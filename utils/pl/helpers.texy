Funkcje pomocnicze
******************

.[perex]
[api:Nette\Utils\Helpers] jest klasą statyczną z przydatnymi funkcjami.


Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Wykonuje wywołanie zwrotne i zwraca przechwycone wyjście jako ciąg znaków.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Ogranicza wartość do podanego zakresu włączenia min i max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Porównuje dwie wartości w taki sam sposób jak robi to PHP. Wyróżnia operatory `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
Funkcja jest przydatna w sytuacjach, gdy operator jest mutowalny.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Konwertuje `false` na `null`, nie zmienia innych wartości.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Zwraca ostatni błąd w PHP lub pusty łańcuch, jeśli nie wystąpił żaden błąd. W przeciwieństwie do `error_get_last()`, na nie wpływa dyrektywa PHP `html_errors` i zawsze zwraca tekst, a nie HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Spośród oferowanych opcji, `$possibilities` szuka ciągu, który jest najbardziej podobny do `$value`, ale nie taki sam. Obsługuje on tylko kodowanie 8-bitowe.

Przydaje się, gdy dana opcja jest nieważna i chcemy doradzić użytkownikowi podobną (ale inną, więc ten sam ciąg jest ignorowany). W ten sposób Nette tworzy wiadomości `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', ne 'baz'
```
