Delo s plavajočimi števili (floats)
***********************************

.[perex]
[api:Nette\Utils\Floats] je statični razred z uporabnimi funkcijami za primerjavo decimalnih števil.


Namestitev:

```shell
composer require nette/utils
```

Vsi primeri predpostavljajo ustvarjen vzdevek:

```php
use Nette\Utils\Floats;
```


Motivacija
==========

Se sprašujete, zakaj pravzaprav razred za primerjavo floatov? Saj lahko uporabim operatorje `<`, `>`, `===` in sem končal.
Ni povsem res. Kaj mislite, da bo izpisala ta koda?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Če zaženete kodo, bodo nekateri med vami zagotovo presenečeni, da je program izpisal `not same`.

Pri matematičnih operacijah z decimalnimi števili prihaja do napak zaradi pretvorbe med desetiškim in dvojiškim sistemom. Na primer, `0.1 + 0.2` je `0.300000000000000044…`. Zato moramo pri primerjavi tolerirati majhno razliko od določenega decimalnega mesta.

In prav to počne razred `Floats`. Naslednja primerjava bo delovala po pričakovanjih:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // enako
```

Pri poskusu primerjave `NAN` sproži izjemo `\LogicException`.

.[tip]
Razred `Floats` tolerira razlike, manjše od `1e-10`. Če morate delati z večjo natančnostjo, raje uporabite knjižnico BCMath.


Primerjava floatov
==================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Vrne `true`, če je `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Vrne `true`, če velja `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Vrne `true`, če velja `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Vrne `true`, če velja `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Vrne `true`, če velja `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Če je `$a` < `$b`, vrne `-1`, če sta enaka, vrne `0`, in če je `$a` > `$b`, vrne `1`.

Lahko se uporablja na primer s funkcijo `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr je zdaj [-3.5, 1, 2, 5]
```


Pomožne funkcije
================


isZero(float $value): bool .[method]
------------------------------------

Vrne `true`, če je vrednost enaka nič.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Vrne `true`, če je vrednost celo število.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
