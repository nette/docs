Работа с JSON
*************

.[perex]
[api:Nette\Utils\Json] это статический класс с функциями для кодирования и декодирования формата JSON. Он обрабатывает уязвимости в различных версиях PHP и выбрасывает исключения при возникновении ошибок.

Установка:

```shell
composer require nette/utils
```

Во всех примерах предполагается, что псевдоним уже создан:

```php
use Nette\Utils\Json;
```


Использование .[#toc-usage]
===========================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Конвертирует `$value` в формат JSON.

Если установлено значение `$pretty`, он форматирует JSON для более легкого чтения и ясности:

```php
Json::encode($value); // возвращает JSON
Json::encode($value, pretty: true); // возвращает более чистый JSON
```

На `$asciiSafe` он генерирует вывод в ASCII, т.е. заменяет символы юникода последовательностью `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Параметр `$htmlSafe` гарантирует, что вывод не содержит символов, имеющих специальное значение в HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

С помощью `$forceObjects` даже поля с числовыми ключами будут закодированы как объекты JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Выбрасывается исключение при ошибке `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Обработка исключений
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Парсирует JSON в PHP.

Установка `$forceArray` заставляет возвращать массивы вместо объектов:

```php
Json::decode('{"variable": true}'); // возвращает объект типа stdClass
Json::decode('{"variable": true}', forceArray: true); // возвращает массив
```

При возникновении ошибки выбрасывается исключение `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Обработка исключений
}
```


Как отправить JSON от ведущего? .[#toc-how-to-send-a-json-from-a-presenter]
===========================================================================

Для этого можно использовать метод `$this->sendJson($data)`, который можно вызвать в методе `action*()`, например, см. раздел [Отправка ответа |application:presenters#Sending a Response].
