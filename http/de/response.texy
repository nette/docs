HTTP-Antwort
************

.[perex]
Nette kapselt die HTTP-Antwort in Objekte mit einer verständlichen API.

Die HTTP-Antwort wird durch das Objekt [api:Nette\Http\Response] repräsentiert. Wenn Sie mit Nette arbeiten, wird dieses Objekt automatisch vom Framework erstellt und Sie können es sich mittels [Dependency Injection |dependency-injection:passing-dependencies] übergeben lassen. In Presentern reicht es aus, die Methode `$this->getHttpResponse()` aufzurufen.

→ [Installation und Anforderungen |@home#Instalace]


Nette\Http\Response
===================

Das Objekt ist im Gegensatz zu [Nette\Http\Request|request] mutable, d.h. Sie können den Zustand mithilfe von Settern ändern, z. B. Header senden. Vergessen Sie nicht, dass alle Setter **vor dem Senden jeglicher Ausgabe** aufgerufen werden müssen. Ob bereits eine Ausgabe gesendet wurde, verrät die Methode `isSent()`. Wenn sie `true` zurückgibt, löst jeder Versuch, einen Header zu senden, eine `Nette\InvalidStateException` aus.


setCode(int $code, ?string $reason=null) .[method]
--------------------------------------------------
Ändert den [Antwort-Statuscode |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. Zur besseren Lesbarkeit des Quellcodes empfehlen wir, für den Code statt Zahlen [vordefinierte Konstanten |api:Nette\Http\IResponse] zu verwenden.

```php
$httpResponse->setCode(Nette\Http\Response::S404_NotFound);
```


getCode(): int .[method]
------------------------
Gibt den Statuscode der Antwort zurück.


isSent(): bool .[method]
------------------------
Gibt zurück, ob bereits Header vom Server an den Browser gesendet wurden und es daher nicht mehr möglich ist, Header zu senden oder den Statuscode zu ändern.


setHeader(string $name, string $value) .[method]
------------------------------------------------
Sendet einen HTTP-Header und **überschreibt** einen zuvor gesendeten Header mit demselben Namen.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```


addHeader(string $name, string $value) .[method]
------------------------------------------------
Sendet einen HTTP-Header und **überschreibt nicht** einen zuvor gesendeten Header mit demselben Namen.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```


deleteHeader(string $name) .[method]
------------------------------------
Löscht einen zuvor gesendeten HTTP-Header.


getHeader(string $header): ?string .[method]
--------------------------------------------
Gibt den gesendeten HTTP-Header zurück oder `null`, wenn keiner existiert. Der Parameter ist case-insensitive.

```php
$pragma = $httpResponse->getHeader('Pragma');
```


getHeaders(): array .[method]
-----------------------------
Gibt alle gesendeten HTTP-Header als assoziatives Array zurück.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```


setContentType(string $type, ?string $charset=null) .[method]
-------------------------------------------------------------
Ändert den `Content-Type`-Header.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```


redirect(string $url, int $code=self::S302_Found): void .[method]
-----------------------------------------------------------------
Leitet zu einer anderen URL weiter. Vergessen Sie nicht, das Skript danach zu beenden.

```php
$httpResponse->redirect('http://example.com');
exit;
```


setExpiration(?string $time) .[method]
--------------------------------------
Legt die Ablaufzeit des HTTP-Dokuments mithilfe der Header `Cache-Control` und `Expires` fest. Der Parameter ist entweder ein Zeitintervall (als Text) oder `null`, was das Caching deaktiviert.

```php
// Cache im Browser läuft in einer Stunde ab
$httpResponse->setExpiration('1 hour');
```


sendAsFile(string $fileName) .[method]
--------------------------------------
Die Antwort wird über das Dialogfeld *Speichern unter* unter dem angegebenen Namen heruntergeladen. Die Datei selbst wird dabei nicht gesendet.

```php
$httpResponse->sendAsFile('faktura.pdf'); // rechnung.pdf
```


setCookie(string $name, string $value, $time, ?string $path=null, ?string $domain=null, ?bool $secure=null, ?bool $httpOnly=null, ?string $sameSite=null) .[method]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sendet ein Cookie. Standardwerte der Parameter:

| `$path`     | `'/'`   | Cookie ist für alle Pfade in der (Sub-)Domain gültig *(konfigurierbar)*
| `$domain`   | `null`  | bedeutet Gültigkeit für die aktuelle (Sub-)Domain, aber nicht deren Subdomains *(konfigurierbar)*
| `$secure`   | `true`  | wenn die Website über HTTPS läuft, sonst `false` *(konfigurierbar)*
| `$httpOnly` | `true`  | Cookie ist für JavaScript unzugänglich
| `$sameSite` | `'Lax'` | Cookie muss möglicherweise nicht beim [Zugriff von einer anderen Domain|nette:glossary#SameSite cookie] gesendet werden

Die Standardwerte der Parameter `$path`, `$domain` und `$secure` können Sie in der [Konfiguration|configuration#HTTP cookie] ändern.

Die Zeit kann als Anzahl von Sekunden oder als String angegeben werden:

```php
$httpResponse->setCookie('lang', 'cs', '100 days');
```

Der Parameter `$domain` bestimmt, welche Domains Cookies akzeptieren können. Wenn er nicht angegeben ist, akzeptiert die gleiche (Sub-)Domain, die das Cookie gesetzt hat, aber nicht deren Subdomains, das Cookie. Wenn `$domain` angegeben ist, sind auch Subdomains enthalten. Daher ist die Angabe von `$domain` weniger restriktiv als das Weglassen. Zum Beispiel sind bei `$domain = 'nette.org'` Cookies auch auf allen Subdomains wie `doc.nette.org` verfügbar.

Für den Wert `$sameSite` können Sie die Konstanten `Response::SameSiteLax`, `SameSiteStrict` und `SameSiteNone` verwenden.


deleteCookie(string $name, ?string $path=null, ?string $domain=null, ?bool $secure=null): void .[method]
--------------------------------------------------------------------------------------------------------
Löscht ein Cookie. Standardwerte der Parameter sind:
- `$path` mit Gültigkeit für alle Verzeichnisse (`'/'`)
- `$domain` mit Gültigkeit für die aktuelle (Sub-)Domain, aber nicht deren Subdomains
- `$secure` richtet sich nach den Einstellungen in der [Konfiguration|configuration#HTTP cookie]

```php
$httpResponse->deleteCookie('lang');
```
