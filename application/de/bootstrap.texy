Bootstrap
*********

<div class=perex>

Bootstrap ist der Startcode, der die Umgebung initialisiert, den Dependency Injection (DI) Container erstellt und die Anwendung startet. Wir werden erkl√§ren:

- wie sie mithilfe von NEON-Dateien konfiguriert wird
- wie man zwischen Produktions- und Entwicklungsmodus unterscheidet
- wie man den DI-Container erstellt

</div>


Anwendungen, egal ob Webanwendungen oder von der Kommandozeile gestartete Skripte, beginnen ihre Ausf√ºhrung mit einer Form der Initialisierung der Umgebung. Fr√ºher war daf√ºr eine Datei wie `include.inc.php` verantwortlich, die von der initialen Datei eingebunden wurde.
In modernen Nette-Anwendungen wurde dies durch die Klasse `Bootstrap` ersetzt, die Sie als Teil der Anwendung in der Datei `app/Bootstrap.php` finden. Sie k√∂nnte zum Beispiel so aussehen:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// Der Configurator ist f√ºr die Einstellung der Anwendungsumgebung und der Dienste verantwortlich.
		$this->configurator = new Configurator;
		// Legt das Verzeichnis f√ºr tempor√§re Dateien fest, die von Nette generiert werden (z. B. kompilierte Templates)
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// Nette ist schlau und der Entwicklungsmodus wird automatisch aktiviert,
		// oder Sie k√∂nnen ihn f√ºr eine bestimmte IP-Adresse aktivieren, indem Sie die folgende Zeile auskommentieren:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Aktiviert Tracy: das ultimative "Schweizer Taschenmesser" f√ºr das Debugging.
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: l√§dt automatisch alle Klassen im ausgew√§hlten Verzeichnis
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// L√§dt Konfigurationsdateien
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php
=========

Die initiale Datei f√ºr Webanwendungen ist `index.php`, die sich im [√∂ffentlichen Verzeichnis |directory-structure#verejny-adresar-www] `www/` befindet. Diese l√§sst die Umgebung von der Bootstrap-Klasse initialisieren und den DI-Container erstellen. Danach holt sie sich den Dienst `Application` daraus, der die Webanwendung startet:

```php
$bootstrap = new App\Bootstrap;
// Initialisierung der Umgebung + Erstellung des DI-Containers
$container = $bootstrap->bootWebApplication();
// Der DI-Container erstellt das Objekt Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// Start der Nette-Anwendung und Verarbeitung der eingehenden Anfrage
$application->run();
```

Wie man sieht, hilft die Klasse [api:Nette\Bootstrap\Configurator] bei der Einstellung der Umgebung und der Erstellung des Dependency Injection (DI) Containers, die wir uns nun genauer ansehen werden.


Entwicklungs- vs. Produktionsmodus
==================================

Nette verh√§lt sich unterschiedlich, je nachdem, ob es auf einem Entwicklungs- oder Produktionsserver l√§uft:

üõ†Ô∏è  Entwicklungsmodus (Development):
	- Zeigt die Tracy Debugbar mit n√ºtzlichen Informationen an (SQL-Abfragen, Ausf√ºhrungszeit, verwendeter Speicher)
	- Zeigt im Fehlerfall eine detaillierte Fehlerseite mit Funktionsaufrufen und Variableninhalten an
	- Erneuert automatisch den Cache bei √Ñnderungen an Latte-Templates, Konfigurationsdateien usw.


üöÄ  Produktionsmodus (Production):
	- Zeigt keine Debugging-Informationen an, alle Fehler werden im Log protokolliert
	- Zeigt im Fehlerfall den ErrorPresenter oder eine allgemeine "Server Error"-Seite an
	- Der Cache wird niemals automatisch erneuert!
	- Optimiert f√ºr Geschwindigkeit und Sicherheit


Die Moduswahl erfolgt durch Auto-Detektion, sodass normalerweise nichts konfiguriert oder manuell umgeschaltet werden muss:

- Entwicklungsmodus: auf Localhost (IP-Adresse `127.0.0.1` oder `::1`), wenn kein Proxy vorhanden ist (d. h. dessen HTTP-Header)
- Produktionsmodus: √ºberall sonst

Wenn wir den Entwicklungsmodus auch in anderen F√§llen aktivieren m√∂chten, z. B. f√ºr Programmierer, die von einer bestimmten IP-Adresse zugreifen, verwenden wir `setDebugMode()`:

```php
$this->configurator->setDebugMode('23.75.345.200'); // es kann auch ein Array von IP-Adressen angegeben werden
```

Wir empfehlen dringend, die IP-Adresse mit einem Cookie zu kombinieren. Wir speichern einen geheimen Token, z. B. `secret1234`, im Cookie `nette-debug` und aktivieren auf diese Weise den Entwicklungsmodus f√ºr Programmierer, die von einer bestimmten IP-Adresse zugreifen und gleichzeitig den erw√§hnten Token im Cookie haben:

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Wir k√∂nnen den Entwicklungsmodus auch vollst√§ndig deaktivieren, sogar f√ºr Localhost:

```php
$this->configurator->setDebugMode(false);
```

Achtung, der Wert `true` schaltet den Entwicklungsmodus fest ein, was auf einem Produktionsserver niemals passieren darf.


Debugging-Tool Tracy
====================

F√ºr einfaches Debugging aktivieren wir noch das gro√üartige Werkzeug [Tracy |tracy:]. Im Entwicklungsmodus visualisiert es Fehler und im Produktionsmodus protokolliert es Fehler in das angegebene Verzeichnis:

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Tempor√§re Dateien
=================

Nette verwendet einen Cache f√ºr den DI-Container, RobotLoader, Templates usw. Daher ist es notwendig, den Pfad zum Verzeichnis festzulegen, in dem der Cache gespeichert wird:

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

Unter Linux oder macOS setzen Sie f√ºr die Verzeichnisse `log/` und `temp/` [Schreibrechte |nette:troubleshooting#Nastaven√≠ pr√°v adres√°≈ô≈Ø].


RobotLoader
===========

In der Regel m√∂chten wir Klassen automatisch mit dem [RobotLoader |robot-loader:] laden, also m√ºssen wir ihn starten und ihn Klassen aus dem Verzeichnis laden lassen, in dem sich `Bootstrap.php` befindet (d. h. `__DIR__`), sowie aus allen Unterverzeichnissen:

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Ein alternativer Ansatz besteht darin, Klassen nur √ºber [Composer |best-practices:composer] unter Einhaltung von PSR-4 laden zu lassen.


Zeitzone
========

√úber den Konfigurator k√∂nnen Sie die Standard-Zeitzone einstellen.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Konfiguration des DI-Containers
===============================

Ein Teil des Boot-Prozesses ist die Erstellung des DI-Containers, auch Objektfabrik genannt, der das Herz der gesamten Anwendung ist. Es handelt sich tats√§chlich um eine PHP-Klasse, die von Nette generiert und im Cache-Verzeichnis gespeichert wird. Die Fabrik erstellt die Schl√ºsselobjekte der Anwendung, und mithilfe von Konfigurationsdateien weisen wir sie an, wie sie diese erstellen und einstellen soll, wodurch wir das Verhalten der gesamten Anwendung beeinflussen.

Konfigurationsdateien werden normalerweise im [NEON |neon:format]-Format geschrieben. In einem separaten Kapitel erfahren Sie, [was alles konfiguriert werden kann |nette:configuring].

.[tip]
Im Entwicklungsmodus wird der Container bei jeder √Ñnderung des Codes oder der Konfigurationsdateien automatisch aktualisiert. Im Produktionsmodus wird er nur einmal generiert, und √Ñnderungen werden zur Maximierung der Leistung nicht √ºberpr√ºft.

Konfigurationsdateien laden wir mit `addConfig()`:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

Wenn wir mehrere Konfigurationsdateien hinzuf√ºgen m√∂chten, k√∂nnen wir die Funktion `addConfig()` mehrmals aufrufen.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

Der Name `cli.php` ist kein Tippfehler; die Konfiguration kann auch in einer PHP-Datei geschrieben sein, die sie als Array zur√ºckgibt.

Wir k√∂nnen auch weitere Konfigurationsdateien im [Abschnitt `includes` |dependency-injection:configuration#Vkl√°d√°n√≠ soubor≈Ø] hinzuf√ºgen.

Wenn in den Konfigurationsdateien Elemente mit denselben Schl√ºsseln erscheinen, werden sie √ºberschrieben oder im Falle von [Arrays zusammengef√ºhrt |dependency-injection:configuration#Sluƒçov√°n√≠]. Die sp√§ter eingebundene Datei hat eine h√∂here Priorit√§t als die vorherige. Die Datei, in der der Abschnitt `includes` aufgef√ºhrt ist, hat eine h√∂here Priorit√§t als die darin eingebundenen Dateien.


Statische Parameter
-------------------

Parameter, die in Konfigurationsdateien verwendet werden, k√∂nnen [im Abschnitt `parameters`|dependency-injection:configuration#parametry] definiert und auch √ºber die Methode `addStaticParameters()` (hat den Alias `addParameters()`) √ºbergeben (oder √ºberschrieben) werden. Wichtig ist, dass unterschiedliche Werte der Parameter die Generierung zus√§tzlicher DI-Container, also zus√§tzlicher Klassen, verursachen.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

Auf den Parameter `projectId` kann in der Konfiguration mit der √ºblichen Schreibweise `%projectId%` verwiesen werden.


Dynamische Parameter
--------------------

Wir k√∂nnen dem Container auch dynamische Parameter hinzuf√ºgen, deren unterschiedliche Werte im Gegensatz zu statischen Parametern nicht die Generierung neuer DI-Container verursachen.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

So k√∂nnen wir einfach z. B. Umgebungsvariablen hinzuf√ºgen, auf die dann in der Konfiguration mit der Schreibweise `%env.variable%` verwiesen werden kann.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Standardparameter
-----------------

In Konfigurationsdateien k√∂nnen Sie diese statischen Parameter verwenden:

- `%appDir%` ist der absolute Pfad zum Verzeichnis mit der Datei `Bootstrap.php`
- `%wwwDir%` ist der absolute Pfad zum Verzeichnis mit der Eingabedatei `index.php`
- `%tempDir%` ist der absolute Pfad zum Verzeichnis f√ºr tempor√§re Dateien
- `%vendorDir%` ist der absolute Pfad zum Verzeichnis, in dem Composer Bibliotheken installiert
- `%rootDir%` ist der absolute Pfad zum Stammverzeichnis des Projekts
- `%debugMode%` gibt an, ob sich die Anwendung im Debugging-Modus befindet
- `%consoleMode%` gibt an, ob die Anfrage √ºber die Kommandozeile kam


Importierte Dienste
-------------------

Jetzt gehen wir tiefer. Obwohl der Zweck des DI-Containers darin besteht, Objekte zu erstellen, kann es ausnahmsweise notwendig sein, ein vorhandenes Objekt in den Container einzuf√ºgen. Dies tun wir, indem wir den Dienst mit dem Flag `imported: true` definieren.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Und im Bootstrap f√ºgen wir das Objekt in den Container ein:

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Unterschiedliche Umgebungen
===========================

Scheuen Sie sich nicht, die Bootstrap-Klasse an Ihre Bed√ºrfnisse anzupassen. Sie k√∂nnen der Methode `bootWebApplication()` Parameter hinzuf√ºgen, um Webprojekte zu unterscheiden. Oder wir k√∂nnen weitere Methoden hinzuf√ºgen, zum Beispiel `bootTestEnvironment()`, die die Umgebung f√ºr Unit-Tests initialisiert, `bootConsoleApplication()` f√ºr Skripte, die von der Kommandozeile aufgerufen werden, usw.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // Initialisierung von Nette Tester
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
