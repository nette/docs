DI: konfigurace služeb
**********************

/--div .[perex]
Dependency Injection (DI) kontejner se snadno konfiguruje pomocí souborů NEON. Řekneme si:

- jak používat parametry
- jak přidat a nastavit služby
- jak vložit více konfiguračních souborů
\--

Samotná konfigurace se obykle zapisuje v NEON souboru. Se syntaxí se můžete seznámit na stránce https://ne-on.org.


Parametery
==========

V konfiguraci můžete definovat parametry, které lze pak použít jako součást definic služeb. Čímž můžete zpřehlednit konfiguraci nebo sjednodit a vyčlenit hodnoty, které se budou měnit.

Pro nastavení parametrů použijte sekci `parameters` konfiguračního souboru:

/--neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
\--

Na parametr `dsn` se odkážeme kdekoliv v konfiguraci zápisem `%dsn%`. Lze je používat i uvnitř řetězců jako `'%wwwDir%/images'`.

Parametry nemusí být jen řetězce nebo čísla, mohou také obsahovat pole:

/--neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
\--

Na konkrétní klíč se odkážeme jako `%mailer.user%`.

.[note]
Chcete-li zapsat řetězec začínající znakem `@` nebo obsahující `%`, musíte znak escapovat zdvojením na `@@` nebo `%%`.


Služby
======

Konfigurační soubor je místem, kam umísťujeme definice vlastních služeb. Slouží k tomu sekce `services`. Například takto může vypadat definice služby pojmenované `database`, což bude instance `PDO`:

/--neon
# v jednom řádku
services:
	database: PDO(%dsn%, %user%, %password%)

# nebo ve dvou řádcích:
	database:
		factory: PDO(%dsn%, %user%, %password%)

# nebo ve třech řádcích :-)
	database:
		factory: PDO
		arguments: [%dsn%, %user%, %password%]
\--

Což vygeneruje tovární metodu v DI kontejneru:

/--php
function createServiceDatabase()
{
	return new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'secret');
}
\--

Kromě vytvoření instance třídy lze volat i metodu:

/--neon
services:
	database: Database::create(root, password)
\--

Vygenerovaný kód:

/--php
function createServiceDatabase()
{
	return Database::create('root', 'secret');
}
\--

V tomto případě je nutné, aby metoda `Database::create()` měla definovaný návratový typ buď pomocí anotace `@return` nebo type hintů v PHP 7.

Službu získáme z DI kontejneru metodou `getService()`:

/--php
$database = $container->getService('database');
\--


Setup
-----

Nad vytvořenou službou můžeme volat metody nebo nastavovat hodnoty proměnným a statickým proměnným:

/--neon
services:
	database:
		factory: PDO(%dsn%, %user%, %password%)
		setup:
			- setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)
			- $mode = 123

	myService:
		factory: MyService
		setup:
			- MyService::$foo = 2
\--

Vygeneruje:

/--php
public function createServiceDatabase()
{
	$service = new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'secret');
	$service->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	$service->mode = 123;
	return $service;
}

public function createServiceMyService()
{
	$service = new MyService;
	MyService::$foo = 2;
	return $service;
}
\--

Parametry metod mohou být kromě řetězců a čísel i pole, lze vytvářet i nové objekty nebo volat metody:

/--neon
services:
	analyser: My\Analyser(
		FilesystemIterator(%appDir%)
		[dryrun: yes, verbose: no]
		DateTime::createFromFormat('Y-m-d')
	)
\--

Vygeneruje:

/--php
public function createServiceAnalyser()
{
	return new My\Analyser(
		new FilesystemIterator('...'),
		['dryrun' => true, 'verbose' => false],
		DateTime::createFromFormat('Y-m-d')
	);
}
\--


Propojení služeb
----------------

Na jednotlivé služby se odkazujeme pomocí zavináče a názvu služby, takže například `@database`:

/--neon
services:
	database: PDO(%dsn%, %user%, %password%)
	articles:
		factory: Model\ArticleRepository(@database)
		setup:
			- setCacheStorage(@cache.storage)   # cache.storage je systémová služba
\--

Vygeneruje:

/--php
public function createServiceArticles()
{
	$service = new Model\ArticleRepository($this->getService('database'));
	$service->setCacheStorage($this->getService('cache.storage'));
	return $service;
}
\--


Anonymní služby
---------------

Pojmenování služeb je vhodné hlavně ve chvíli, kdy na ně chceme odkazovat z jiných částí konfiguračního souboru. Pokud na službu není odkazováno názvem, není ji potřeba pojmenovávat. Pro anonymní služby použijte následující syntax:

/--neon
services:
	- PDO('sqlite::memory:)

	-
		factory: Model\ArticleRepository
		setup:
			- setCacheStorage
\--

Nicméně i na anonymní služby lze odkazovat přes zavináč, jen místo názvu uvedeme jejich typ (třídu nebo rozhraní). Tohle ovšem obvykle není potřeba dělat díky [autowiringu|#autowiring].

/--neon
services:
	articles:
		factory: Model\ArticleRepository(@Nette\Database\Connection)  # nebo @\PDO
\--

Službu získáme z DI kontejneru metodou `getByType()`:

/--php
$database = $container->getByType(Nette\Database\Connection::class);
\--



Pokročilá syntaxe
-----------------

Formát NEON nám dává mimořádně silné výrazové prostředky, pomocí kterých můžete zapsat téměř cokoliv.

Nad odkazovanou službou lze volat metody, nicméně pro jednoduchost místo `->` používáme `::`.

/--neon
services:
	routerFactory: App\Router\Factory
	router: @routerFactory::create()
\--

Vygeneruje:

/--php
public function createServiceRouterFactory()
{
	return new App\Router\Factory;
}

public function createServiceRouter()
{
	return $this->getService('routerFactory')->create();
}
\--

Volání method lze zřetězit za sebe:

/--neon
services:
	foo: FooFactory::build()::get()
\--

Vygeneruje:

/--php
public function createServiceFoo()
{
	return FooFactory::build()->get();
}
\--

Volání metod lze použít i v parameterch. Krom metod je lze volat i globální funkce, před jejich názvem dáme čtyřtečku:

/--neon
services:
	routerFactory: App\Router\Factory( Foo::bar() )   # volání statické metody
	setup:
		- setIp( @http.request::getRemoteAddress() )  # http.request je systémová služba
		- setMode( ::getenv(NETTE_MODE) )             # global function getenv
\--

Vygeneruje:

/--php
public function createServiceRouterFactory()
{
	$service = new App\Router\Factory( Foo::bar() );
	$service->setIp( $this->getService('http.request')->getRemoteAddress() );
	$service->setMode( getenv('NETTE_MODE') );
	return $service;
}
\--

Zápis ve tvaru `NázevTřídy([parametry, ...])`, který používáme obvykle v položce `factory` a který znamená vytvoření objektu, vlastně odpovídá zápisu v PHP jen s tím rozdílem, že vynecháváme operátor `new`. Tento zápis můžeme používat i kdekoliv jinde, třeba jako parametr:

/--neon
services:
	articles:
		factory: Model\ArticleRepository( PDO(%dsn%, %user%, %password%) )
		setup:
			- setCacheStorage( Nette\Caching\Storages\DevNullStorage() )
\--

Vygeneruje:

/--php
public function createServiceArticles()
{
	$service = new Model\ArticleRepository( new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'secret') );
	$service->setCacheStorage( new Nette\Caching\Storages\DevNullStorage );
	return $service;
}
\--

Dokonce nad vytvořeným objektem můžeme rovnou volat metody:

/--neon
services:
	router: App\Router\Factory()::create()
	# pozor, neplést s App\Router\Factory::create()
\--

Vygeneruje:

/--php
public function createServiceRouter()
{
	return (new App\Router\Factory())->create();
}
\--



Autowiring
==========

Autowiring je skvělá vlastnost, která umí automaticky předávat do konstruktoru a dalších metod požadované služby, takže je nemusíme vůbec psát. Ušetří vám spoustu času.

Výše uvedený příklad služby `articles` tak můžeme takto zjednodušit:

/--neon
services:
	articles:
		factory: Model\ArticleRepository
		setup:
			- setCacheStorage
\--

Autowiring se řídí podle typehintů, takže aby fungoval, musí být třída `ArticleRepository` definována asi takto:

/--php
namespace Model;

class ArticleRepository
{
	public function __construct(\PDO $db)
	{}

	public function setCacheStorage(\Nette\Caching\IStorage $storage)
	{}
}
\--

Služba uvedeného typu, jako je `PDO` nebo `Nette\Caching\IStorage`, musí být v kontejneru právě jedna. Pokud by jich bylo víc, autowiring by nevěděl, kterou z nich předat a vyhodil by výjimku.

Je možné v kontejneru umístit dvě služby stejného typu a jednu z nich z autowiringu vyřadit. Autowiring pak bude fungovat a automaticky bude předávat službu druhou:

/--neon
services:
	mainDatabase: PDO(%dsn%, %user%, %password%)

	tempDatabase:
		factory: PDO('sqlite::memory:)
		autowired: no

	articles: Model\ArticleRepository    # předá do kontruktoru @mainDatabase
\--

Lze také autowiring omezit jen pro určité třídy nebo rozhraní:

/--php
class Parent
{}

class Child extends Parent implements Int
{}

class ParentDependent
{
	function __construct(Parent $obj)
	{}
}

class ChildDependent
{
	function __construct(Child $obj)
	{}
}
\--

/--neon
services:
	child:
		factory: Child
		autowired: [Parent, Int]

	parentDep: ParentDependent  # autowiring automaticky předá službu @child

	childDep: ChildDependent  # vyhodí výjimku!
\--



Více konfiguračních souborů
===========================

V případě, že chceme pro nastavení používat více propojených konfiguračních souborů, můžeme je uvést v sekci `includes`.

/--neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

Pokud se v konfiguračních souborech objeví prvky se stejnými klíči, budou přepsány, nebo v případě polí sloučeny. Později vkládaný soubor má vyšší prioritu než předchozí. Soubor se sekcí `includes` má vyšší prioritu, než v něm uvedené soubory.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>výsledek</th>
</tr>
<tr>
	<td>
/--neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--neon
items:
	- 3
\--
	</td>
	<td>
/--neon
items:
	- 1
	- 2
	- 3
\--
	</td>
</tr>
</table>

U polí lze zabránit slučování uvedením vykřičníku za názvem klíče:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>výsledek</th>
</tr>
<tr>
	<td>
/--neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--neon
items!:
	- 3
\--
	</td>
	<td>
/--neon
items:
	- 3
\--
	</td>
</tr>
</table>

{{composer: nette/di}}
