Reutilizar formularios en varios sitios
***************************************

.[perex]
¿Cómo reutilizar el mismo formulario en múltiples lugares y no duplicar código? Esto es realmente fácil de hacer en Nette y tienes múltiples formas para elegir.


Fábrica de formularios .[#toc-form-factory]
===========================================

Vamos a crear una clase que pueda crear un formulario. Una clase de este tipo se llama fábrica. En el lugar donde queremos utilizar el formulario (por ejemplo, en el presentador), solicitamos la fábrica [como dependencia |dependency-injection:passing-dependencies].

Parte de la fábrica es el código que pasa los datos para su posterior procesamiento cuando el formulario se envía correctamente. Normalmente a la capa del modelo. También comprueba si todo ha ido bien, y [devuelve |forms:validation#Processing-errors] cualquier error al formulario. El modelo en el siguiente ejemplo está representado por la clase `Facade`:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// añadir elementos al formulario

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// procesamiento de formularios
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

Por supuesto, la fábrica puede ser paramétrica, es decir, puede recibir parámetros que afectarán a la apariencia del formulario que se está creando.

Ahora demostraremos cómo pasar la fábrica al presentador. Primero, la escribimos en el fichero de configuración:

```neon
services:
	- EditFormFactory
```

Y luego la solicitamos en el presentador. También sigue el siguiente paso de procesamiento del formulario enviado y que está redirigiendo a la página siguiente:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Dado que la redirección es manejada por el manejador del presentador, el componente puede ser usado en múltiples lugares y redirigido a otro lugar en cada lugar.


Componente con formulario .[#toc-component-with-form]
=====================================================

Otra forma es crear un nuevo [componente |application:components] que contenga un formulario. Esto nos da la posibilidad de renderizar el formulario de una manera específica, por ejemplo, ya que el componente incluye una plantilla.
O podemos usar señales para comunicación AJAX y cargar información en el formulario, por ejemplo para autocompletar, etc.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// añadir elementos al formulario

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// procesamiento de formularios
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// invocación de eventos
		$this->onSave($this, $values);
	}
}
```

A continuación, crearemos la fábrica que producirá este componente. Sólo tienes que [escribir su interfaz |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

Y añadir al archivo de configuración:

```neon
services:
	- EditControlFactory
```

Y ahora podemos requerir la fábrica y utilizarla en el presentador:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// o redirigir al resultado de la edición, por ejemplo
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Buenas prácticas}}
