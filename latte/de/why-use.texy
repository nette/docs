Warum Vorlagen verwenden?
*************************


Warum sollte ich ein Templatesystem in PHP verwenden? .[#toc-why-should-i-use-a-templating-system-in-php]
---------------------------------------------------------------------------------------------------------

Erinnern wir uns zunächst kurz an die Geschichte von PHP, die viele interessante Wendungen aufweist. Eine der ersten Programmiersprachen, die für die Erstellung von HTML-Schablonen verwendet wurde, war C. Seine Verwendung für diesen Zweck erwies sich jedoch als untauglich. Rasmus Lerdorf entwickelte PHP, um die dynamische HTML-Generierung mit C im Hintergrund zu erleichtern. Ursprünglich war PHP als Schablonensprache gedacht, aber im Laufe der Zeit gewann es mehr Funktionen und wurde zu einer vollwertigen Programmiersprache.

Nichtsdestotrotz funktioniert es immer noch als Schablonensprache. PHP-Dateien können als HTML-Seiten verwendet werden, wobei Sie eine Variable mit `<?= $foo ?>`.

Schon früh in der Geschichte von PHP wurde das Smarty-Templating-System eingeführt, um das Erscheinungsbild (HTML/CSS) strikt von der Anwendungslogik zu trennen. Seine Möglichkeiten waren im Vergleich zu PHP absichtlich begrenzt, so dass ein Entwickler beispielsweise keine Datenbankabfrage aus einer Vorlage heraus durchführen konnte. Diese Systeme führten jedoch zusätzliche Abhängigkeiten ein, erhöhten die Projektkomplexität und erforderten das Erlernen einer neuen Smarty-Sprache. Ihre Vorteile waren umstritten, und für Vorlagen wurde weiterhin einfaches PHP verwendet.

Im Laufe der Zeit wurden die Vorlagensysteme immer nützlicher. Immer mehr Programmierer und Unternehmen haben erkannt, wie wichtig die Sicherheit ist. Sie haben die Existenz von [Sicherheitslücken wie XSS |safety-first] erkannt. Die korrekte Art, eine Variable anzuzeigen, ist nicht `<?= $foo ?>` sondern `<?= htmlspecialchars($foo) ?>`und die Vernachlässigung der Escape-Funktion, d. h. die Verwendung der Funktion `htmlspecialchars()`, kann eine ernsthafte Sicherheitslücke verursachen. Schablonensysteme führten das automatische Escaping ein, so dass es genügte, einfach `{$foo}` zu schreiben, und die Variable wurde inklusive Escaping angezeigt.

Templatesysteme boten Unterstützung für Vererbung, Sandboxing und andere nützliche Funktionen, wodurch das Schreiben von Templates viel einfacher wurde als mit PHP. Irgendwann überwogen die Vorteile von Templatesystemen deutlich die Bedenken über die Einführung neuer Abhängigkeiten.


Warum sollte ich das Latte-Templating-System verwenden? .[#toc-why-should-i-use-the-latte-templating-system]
------------------------------------------------------------------------------------------------------------

Die Hauptgründe sind Sicherheit und Syntax.

Alle Templating-Systeme, wie Twig, Blade oder Smarty, haben im Laufe ihrer Existenz einen XSS-Schutz in Form von automatischem Escaping eingeführt. Latte ging jedoch noch weiter und erkannte, dass das System HTML verstehen musste, damit das automatische Escaping wirklich funktionierte. Es musste nicht nur eine Zeichenkette erkennen, sondern auch Tags, Attribute usw. Denn innerhalb von HTML-Text, innerhalb von HTML-Tags, innerhalb von JavaScript usw. sind unterschiedliche Escape-Methoden erforderlich. Latte hat gelernt, HTML zu verstehen und in jedem dieser Kontexte [entsprechend |safety-first#Context-Aware Escaping] zu escapen. So wurde es zum ersten und bisher einzigen PHP-Templating-System mit kontextabhängigem Escaping.

Latte stellt ein wirklich sicheres Templating-System dar, während andere Systeme dazu neigen, ein falsches Gefühl von Sicherheit zu erzeugen.

Ein weiterer großer Vorteil von Latte ist die Verwendung der PHP-Syntax, so dass der Programmierer/Kodierer keine neue Sprache lernen muss, sondern das verwenden kann, was er bereits gut kennt.


Was sind die Hauptunterschiede zwischen Templating-Systemen wie Latte, Twig und Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Die Unterschiede zwischen Templating-Systemen wie Latte, Twig und Blade liegen hauptsächlich in der Syntax, der Sicherheit und der Integration mit Frameworks:

- Latte: verwendet die Syntax der PHP-Sprache und ist daher leichter zu erlernen und zu verwenden. Es bietet einen erstklassigen Schutz gegen XSS-Angriffe.
- Twig: verwendet eine Python-ähnliche Syntax, die sich deutlich von PHP unterscheidet. Es bricht ohne Kontextunterscheidung aus. Es ist gut mit dem Symfony-Framework integriert.
- Blade: verwendet eine Mischung aus PHP und benutzerdefinierter Syntax. Es bricht ohne Kontextunterscheidung aus. Es ist eng mit den Funktionen und dem Ökosystem von Laravel integriert.


Lohnt es sich für Unternehmen, ein Templating-System zu verwenden? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
----------------------------------------------------------------------------------------------------------------------------------

Zunächst einmal sind die Kosten für die Schulung, die Nutzung und den Gesamtnutzen je nach System sehr unterschiedlich. Das Templating-System Latte vereinfacht dank der Verwendung der PHP-Syntax das Lernen für Programmierer, die mit dieser Sprache bereits vertraut sind, erheblich. In der Regel benötigt ein Programmierer nur wenige Stunden, um sich ausreichend mit Latte vertraut zu machen, was die Schulungskosten senkt und die Übernahme der Technologie und vor allem die Effizienz im täglichen Gebrauch beschleunigt.

Darüber hinaus bietet Latte dank seiner einzigartigen kontextabhängigen Escape-Technologie ein hohes Maß an Schutz vor XSS-Schwachstellen. Dieser Schutz ist entscheidend, um die Sicherheit von Webanwendungen zu gewährleisten und das Risiko von Angriffen zu minimieren, die Benutzer oder Unternehmensdaten gefährden könnten. Die Sicherheit von Webanwendungen ist auch wichtig für die Aufrechterhaltung des guten Rufs eines Unternehmens. Sicherheitsprobleme können zu einem Vertrauensverlust bei den Kunden führen und den Ruf des Unternehmens auf dem Markt schädigen.

Die Verwendung von Latte senkt auch die Gesamtkosten für Entwicklung und Wartung, da beides einfacher wird. Daher lohnt sich der Einsatz eines Templating-Systems auf jeden Fall.


Wie wirkt sich Latte auf die Leistung von Webanwendungen und Serverressourcen aus? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Obwohl Latte-Vorlagen schnell verarbeitet werden, ist dieser Aspekt nicht wirklich von Bedeutung. Der Grund dafür ist, dass das Parsen der Dateien nur einmal bei der ersten Anzeige erfolgt. Anschließend werden sie in PHP-Code kompiliert, auf der Festplatte gespeichert und bei jeder nachfolgenden Anfrage ausgeführt, ohne dass eine erneute Kompilierung erforderlich ist.

So funktioniert es auch in einer Produktionsumgebung. Während der Entwicklung werden die Latte-Vorlagen jedes Mal neu kompiliert, wenn sich ihr Inhalt ändert, so dass der Entwickler immer die aktuelle Version sieht.
