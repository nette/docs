Formato NEON
************

.[perex]
NEON es un formato de datos estructurados legibles por humanos. En Nette, se utiliza para archivos de configuración. También se utiliza para datos estructurados como configuraciones, traducciones de idiomas, etc. [Pruébalo en el sandbox |https://ne-on.org].

NEON son las siglas de *Nette Object Notation*. Es menos complejo y desgarbado que XML o JSON, pero proporciona capacidades similares. Es muy similar a YAML. La principal ventaja es que NEON tiene las llamadas [entidades |#entities], gracias a las cuales la configuración de los servicios DI es tan sexy. Y permite tabuladores para la indentación.

NEON está construido desde cero para ser fácil de usar.


Integración .[#toc-integration]
===============================

- NetBeans (tiene soporte integrado)
- PhpStorm ([complemento |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([complemento |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte])
- Sublime Text 3 ([complemento |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([complemento |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([complemento |https://github.com/fpob/nette.vim])
- Emacs ([complemento |https://github.com/Fuco1/neon-mode])
- Prism.js ([lenguaje integrado |https://prismjs.com/#supported-languages])


- [NEON para PHP|@home]
- [NEON para JavaScript|https://github.com/matej21/neon-js]
- [NEON para Python |https://github.com/paveldedik/neon-py]


Sintaxis .[#toc-syntax]
=======================

Un archivo escrito en NEON consiste normalmente en una secuencia o mapeo.


Asignaciones .[#toc-mappings]
-----------------------------
El mapeo es un conjunto de pares clave-valor, en PHP se llamaría una matriz asociativa. Cada par se escribe como `key: value`, se requiere un espacio después de `:`. El valor puede ser cualquier cosa: cadena, número, booleano, null, secuencia u otro mapeo.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Esta notación se llama notación de bloque porque todos los elementos están en una línea separada y tienen la misma sangría (ninguna en este caso). NEON también admite la representación en línea para la asignación, que se encierra entre corchetes, la sangría no juega ningún papel, y el separador de cada elemento es una coma o una nueva línea:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

Esto es lo mismo escrito en varias líneas (la sangría no importa):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

Como alternativa, puede utilizarse `=` en lugar de <code>: </code> tanto en la notación en bloque como en la notación en línea:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Secuencias .[#toc-sequences]
----------------------------
Las secuencias son matrices indexadas en PHP. Se escriben como líneas que comienzan con el guión `-` seguido de un espacio. De nuevo, el valor puede ser cualquier cosa: cadena, número, booleano, null, secuencia, u otro mapeo.

```neon
- Cat
- Dog
- Goldfish
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Esta notación se llama notación de bloque porque todos los elementos están en una línea separada y tienen la misma sangría (ninguna en este caso). NEON también soporta la representación en línea para secuencias, que se encierran entre corchetes, la sangría no juega ningún papel, y el separador de cada elemento es una coma o una nueva línea:

```neon
[Cat, Dog, Goldfish]
```

Esto es lo mismo escrito en varias líneas (la sangría no importa):

```neon
[
	Cat, Dog
		Goldfish
]
```

Los guiones no pueden utilizarse en una representación en línea.


Combinación .[#toc-combination]
-------------------------------
Los valores de las correspondencias y secuencias pueden ser otras correspondencias y secuencias. El nivel de sangría desempeña un papel importante. En el siguiente ejemplo, el guión utilizado para indicar los elementos de la secuencia tiene una sangría mayor que la tecla `pets`, por lo que los elementos se convierten en el valor de la primera línea:

```neon
pets:
 - Cat
 - Dog
cars:
 - Volvo
 - Skoda
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Es posible combinar la notación en bloque y en línea:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

La notación en bloque ya no puede utilizarse dentro de una notación en línea, esto no funciona:

```neon
item: [
	pets:
	 - Cat     # THIS IS NOT POSSIBLE!!!
	 - Dog
]
```

Debido a que PHP utiliza la misma estructura para mapeo y secuencias, es decir, arrays, ambos pueden ser fusionados. La indentación es la misma esta vez:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Cadenas .[#toc-strings]
-----------------------
Las cadenas en NEON pueden ir entre comillas simples o dobles. Pero como puede ver, también pueden ir sin comillas.

```neon
- A unquoted string in NEON
- 'A singled-quoted string in NEON'
- "A double-quoted string in NEON"
```

Si la cadena contiene caracteres `# " ' , : = - [ ] { } ( )` que puedan confundirse con la sintaxis NEON, debe ir entre comillas. Recomendamos utilizar comillas simples porque no utilizan escapes. Si necesita encerrar una comilla en una cadena de este tipo, duplíquela:

```neon
'A single quote '' inside a single-quoted string'
```

Las comillas dobles le permiten utilizar secuencias de escape para escribir caracteres especiales mediante barras invertidas `\`. All escape sequences as in the JSON format are supported, plus `\_`, que es un espacio que no se rompe, es decir, `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Hay otros casos en los que es necesario encerrar las cadenas entre comillas:
- empiezan o acaban con espacios
- parecen números, booleanos o nulos
- NEON las entendería como [fechas |#dates]


Cadenas multilínea .[#toc-multiline-strings]
--------------------------------------------

Una cadena multilínea comienza y termina con una triple comilla en líneas separadas. La sangría de la primera línea se ignora para todas las líneas:

```neon
'''
	first line
		second line
	third line
	'''
```

En PHP escribiríamos lo mismo que:

```php
"first line\n\tsecond line\nthird line" // PHP
```

Las secuencias de escape sólo funcionan para cadenas encerradas entre comillas dobles en lugar de apóstrofes:

```neon
"""
	Copyright \u00A9
"""
```


Números .[#toc-numbers]
-----------------------
NEON entiende los números escritos en la llamada notación científica y también los números en binario, octal y hexadecimal:

```neon
- 12         # an integer
- 12.3       # a float
- +1.2e-34   # an exponential number

- 0b11010    # binary number
- 0o666      # octal number
- 0x7A       # hexa number
```


Nulos .[#toc-nulls]
-------------------
Los nulos pueden expresarse en NEON utilizando `null` o no especificando un valor. También se permiten variantes con la primera mayúscula o todo en mayúsculas.

```neon
a: null
b:
```


Booleanos .[#toc-booleans]
--------------------------
Los valores booleanos se expresan en NEON utilizando `true` / `false` o `yes` / `no`. También se admiten variantes con la primera mayúscula o todo en mayúsculas.

```neon
[true, TRUE, True, false, yes, no]
```


Fechas .[#toc-dates]
--------------------
NEON utiliza los siguientes formatos para expresar datos y los convierte automáticamente en objetos de `DateTimeImmutable`:

```neon
- 2016-06-03                  # date
- 2016-06-03 19:00:00         # date & time
- 2016-06-03 19:00:00.1234    # date & microtime
- 2016-06-03 19:00:00 +0200   # date & time & timezone
- 2016-06-03 19:00:00 +02:00  # date & time & timezone
```


Entidades .[#toc-entities]
--------------------------
Una entidad es una estructura que se asemeja a una llamada de función:

```neon
Column(type: int, nulls: yes)
```

En PHP, se interpreta como un objeto [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Las entidades también pueden encadenarse:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Que se analiza en PHP de la siguiente manera:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

Dentro de los paréntesis, se aplican las reglas de notación inline utilizadas para mapeo y secuencias, por lo que se puede dividir en varias líneas y no es necesario añadir comas:

```neon
Column(
	type: int
	nulls: yes
)
```


Comentarios .[#toc-comments]
----------------------------
Los comentarios empiezan por `#` y se ignoran todos los caracteres siguientes a la derecha:

```neon
# this line will be ignored by the interpreter
street: 742 Evergreen Terrace
city: Springfield  # this is ignored too
country: USA
```


NEON frente a JSON .[#toc-neon-versus-json]
===========================================
JSON es un subconjunto de NEON. Por lo tanto, cada JSON puede ser analizado como NEON:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

¿Y si pudiéramos omitir las comillas?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

¿Y las llaves y las comas?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

¿Son más legibles las viñetas?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

¿Y los comentarios?

```neon
# my web application config

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # use gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

¡Has encontrado la sintaxis NEON!


{{description: NEON es un lenguaje de serialización de datos fácil de usar. Es similar a YAML. La principal diferencia es que NEON admite "entidades" y caracteres de tabulación para la sangría.}}
{{leftbar: utils:@left-menu}}
