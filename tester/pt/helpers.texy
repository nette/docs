Classes Auxiliares
******************


DomQuery
--------
`Tester\DomQuery` é uma classe que estende `SimpleXMLElement` com busca fácil em HTML ou XML usando seletores CSS.

```php
# criação de DomQuery a partir de uma string HTML
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# teste de existência de elementos usando seletores CSS
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# encontrar elementos como um array de objetos DomQuery
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# teste se o elemento corresponde ao seletor (a partir da versão 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# encontrar o ancestral mais próximo correspondente ao seletor (a partir de 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock
--------
`Tester\FileMock` emula arquivos na memória e facilita o teste de código que usa funções como `fopen()`, `file_get_contents()`, `parse_ini_file()` e similares. Exemplo de uso:

```php
# Classe testada
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Novo arquivo vazio
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Testamos o conteúdo criado
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Não é uma asserção, mas um auxiliar para testar métodos e propriedades privadas de objetos.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // $ent->enabled privado tornado acessível
});
```


Helpers::purge() .[filter]
--------------------------
O método `purge()` cria o diretório especificado e, se já existir, apaga todo o seu conteúdo. É útil para criar um diretório temporário. Por exemplo, em `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - o diretório já pode existir

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Os testes são executados em paralelo. No entanto, às vezes precisamos que a execução dos testes não se sobreponha. Tipicamente em testes de banco de dados, é necessário que um teste prepare o conteúdo do banco de dados e outro teste não acesse o banco de dados durante sua execução. Nesses testes, usamos `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

O primeiro parâmetro é o nome da trava, o segundo é o caminho para o diretório para armazenar a trava. O teste que obtém a trava primeiro é executado, os outros testes devem esperar sua conclusão.


Environment::bypassFinals() .[filter]
-------------------------------------
Classes ou métodos marcados como `final` são difíceis de testar. A chamada `Tester\Environment::bypassFinals()` no início do teste faz com que as palavras-chave `final` sejam omitidas durante o carregamento do código.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass não é mais final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- melhora a legibilidade da saída de erros (incluindo coloração), caso contrário, é exibido o stack trace padrão do PHP
- ativa a verificação de que asserções foram chamadas no teste, caso contrário, um teste sem asserções (por exemplo, esquecidas) também passará
- ao usar `--coverage`, inicia automaticamente a coleta de informações sobre o código executado (descrito adiante)
- exibe o status OK ou FAILURE no final do script


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Cria as funções globais `test()`, `testException()`, `setUp()` e `tearDown()`, nas quais você pode dividir os testes.

```php
test('descrição do teste', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Permite verificar se o teste foi executado diretamente ou através do Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# executado pelo Tester
} else {
	# executado de outra forma
}
```


Environment::VariableThread .[filter]
-------------------------------------
O Tester executa os testes em paralelo no número especificado de threads. Se estivermos interessados no número da thread, obtemo-lo da variável de ambiente:

```php
echo "Executando na thread número " . getenv(Tester\Environment::VariableThread);
```
