Работа с масиви
***************

.[perex]
Тази страница е посветена на класовете [Nette\Utils\Arrays|#Arrays], [#ArrayHash] и [#ArrayList], които се отнасят до масиви.


Инсталация:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] е статичен клас, съдържащ полезни функции за работа с масиви. Негов аналог за итератори е [Nette\Utils\Iterables|iterables].

Следващите примери предполагат създаден псевдоним (alias):

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Функцията гъвкаво трансформира масива `$array` в асоциативен масив или обекти според зададения път `$path`. Пътят може да бъде низ или масив. Той се състои от имената на ключовете на входния масив и оператори като '[]', '->', '=' и '|'. Хвърля `Nette\InvalidArgumentException`, ако пътят е невалиден.

```php
// преобразуване в асоциативен масив по прост ключ
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// присвояване на стойности от един ключ на друг с използване на оператора =
$result = Arrays::associate($arr, 'name=age'); // или ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// създаване на обект с използване на оператора ->
$result = Arrays::associate($arr, '->name'); // или ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// комбинация от ключове с помощта на оператора |
$result = Arrays::associate($arr, 'name|age'); // или ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// добавяне към масив с използване на []
$result = Arrays::associate($arr, 'name[]'); // или ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Тества масива за наличие на стойност. Използва стриктно сравнение (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Тества дали всички елементи в масива преминават теста, имплементиран в `$predicate` със сигнатура `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Вижте [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Връща нов масив, съдържащ всички двойки ключ-стойност, отговарящи на зададения предикат. Callback-ът има сигнатура `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Връща първия елемент (отговарящ на предиката, ако е зададен). Ако такъв елемент не съществува, връща резултата от извикването на `$else` или null.
Параметърът `$predicate` има сигнатура `function ($value, int|string $key, array $array): bool`.

Не променя вътрешния указател, за разлика от `reset()`. Параметрите `$predicate` и `$else` съществуват от версия 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Вижте [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Връща ключа на първия елемент (отговарящ на предиката, ако е посочен) или null, ако такъв елемент не съществува. Предикатът `$predicate` има сигнатура `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Вижте [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Обединява многоизмерен масив в плосък.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

Връща елемента `$array[$key]`. Ако не съществува, хвърля изключение `Nette\InvalidArgumentException` или, ако е посочен трети параметър `$default`, връща него.

```php
// ако $array['foo'] не съществува, хвърля изключение
$value = Arrays::get($array, 'foo');

// ако $array['foo'] не съществува, връща 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Ключът `$key` може да бъде и масив.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// връща 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Получава референция към зададения елемент на масива. Ако елементът не съществува, ще бъде създаден със стойност null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// връща референция към $array['foo']
```

Подобно на функцията [get() |#get()], може да работи с многоизмерни масиви.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// връща референция към $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Връща само тези елементи на масива, чиято стойност съответства на регулярния израз `$pattern`. Ако `$invert` е `true`, връща елементите, които не съответстват. Грешка при компилация или обработка на израза хвърля изключение `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// връща само елементи на масива, състоящи се от цифри
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Вмъква съдържанието на масива `$inserted` в масива `$array` веднага след елемента с ключ `$key`. Ако `$key` е `null` (или не е в масива), се вмъква в края.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Вмъква съдържанието на масива `$inserted` в масива `$array` преди елемента с ключ `$key`. Ако `$key` е `null` (или не е в масива), се вмъква в началото.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Извиква всички callback-ове и връща масив с резултатите.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Извиква метод върху всеки обект в масива и връща масив с резултатите.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Проверява дали масивът е индексиран по възходяща поредица от числови ключове от нула, т.е. списък (list).

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Връща последния елемент (отговарящ на предиката, ако е зададен). Ако такъв елемент не съществува, връща резултата от извикването на `$else` или null.
Параметърът `$predicate` има сигнатура `function ($value, int|string $key, array $array): bool`.

Не променя вътрешния указател, за разлика от `end()`. Параметрите `$predicate` и `$else` съществуват от версия 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Вижте [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Връща ключа на последния елемент (отговарящ на предиката, ако е посочен) или null, ако такъв елемент не съществува. Предикатът `$predicate` има сигнатура `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Вижте [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Извиква `$transformer` върху всички елементи в масива и връща масив с върнатите стойности. Callback-ът има сигнатура `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Създава нов масив чрез трансформиране на стойностите и ключовете на оригиналния масив. Функцията `$transformer` има сигнатура `function ($value, $key, array $array): ?array{$newKey, $newValue}`. Ако `$transformer` върне `null`, елементът се пропуска. За запазените елементи първият елемент на върнатия масив се използва като нов ключ, а вторият елемент като нова стойност.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Този метод е полезен в ситуации, когато трябва да промените структурата на масива (ключове и стойности едновременно) или да филтрирате елементи по време на трансформация (чрез връщане на null за нежелани елементи).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Рекурсивно обединява два масива. Подходящ е например за обединяване на дървовидни структури. При обединяването се ръководи от същите правила като оператора `+`, приложен към масиви, т.е. към първия масив добавя двойки ключ/стойност от втория масив и в случай на колизия на ключове запазва стойността от първия масив.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Стойностите от втория масив винаги се добавят в края на първия. Малко объркващо може да изглежда изчезването на стойността `10` от втория масив. Трябва да се има предвид, че тази стойност, както и стойността `5` в първия масив, имат присвоен един и същ числов ключ `0`, затова в резултантния масив има само елемент от първия масив.


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

Нормализира масива до асоциативен масив. Числовите ключове се заменят с техните стойности, новата стойност ще бъде `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

Връща и премахва стойността на елемент от масива. Ако не съществува, хвърля изключение или връща стойността `$default`, ако е посочена.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// хвърля Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Преименува ключ в масива. Връща `true`, ако ключът е намерен в масива.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Връща позицията на даден ключ в масива. Позицията се номерира от 0. В случай, че ключът не бъде намерен, функцията връща `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // връща 0
$position = Arrays::getKeyOffset($array, 'second'); // връща 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // връща null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Тества дали поне един елемент в масива преминава теста, имплементиран в `$predicate` със сигнатура `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Вижте [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Преобразува стойност в ключ на масив, който е или цяло число (integer), или низ.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Копира елементите на масива `$array` в обекта `$object`, който след това връща.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // задава $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Всеки елемент в масива се преобразува в низ и се обвива с префикс `$prefix` и суфикс `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

Обектът [api:Nette\Utils\ArrayHash] е наследник на генеричния клас stdClass и го разширява с възможността да се работи с него като с масив, т.е. например да се достъпват членовете чрез квадратни скоби:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // едновременно работи и обектният запис
$hash->foo; // 123
```

Може да се използва функцията `count($hash)` за установяване на броя на елементите.

Над обекта може да се итерира по същия начин, както при масив, включително и с референция:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Съществуващ масив можем да трансформираме в `ArrayHash` с метода `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Преобразуването е рекурсивно:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // обект ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Това може да се предотврати с втория параметър:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // масив
```

Трансформация обратно в масив:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] представлява линеен масив, където индексите са само цели числа, нарастващи от 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Съществуващ масив можем да трансформираме в `ArrayList` с метода `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Може да се използва функцията `count($list)` за установяване на броя на елементите.

Над обекта може да се итерира по същия начин, както при масив, включително и с референция:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

Достъпът до ключове извън разрешените стойности хвърля изключение `Nette\OutOfRangeException`:

```php
echo $list[-1]; // хвърля Nette\OutOfRangeException
unset($list[30]); // хвърля Nette\OutOfRangeException
```

Премахването на ключ води до преномериране на елементите:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Нов елемент може да се добави в началото с метода `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
