Configurando o HTTP
*******************

.[perex]
Visão geral das opções de configuração para o Nette HTTP.

Se você não estiver usando toda a estrutura, mas apenas esta biblioteca, leia [como carregar a configuração |bootstrap:].


Cabeçalhos HTTP .[#toc-http-headers]
====================================

```neon
http:
	# headers that are sent with each request
	headers:
		X-Powered-By: MyCMS
		X-Content-Type-Options: nosniff
		X-XSS-Protection: '1; mode=block'

	# affects header X-Frame-Options
	frames: ...      # (string|bool) defaults to 'SAMEORIGIN'
```

Por razões de segurança, a estrutura envia um cabeçalho `X-Frame-Options: SAMEORIGIN`, que diz que uma página pode ser exibida dentro de outra página (no elemento `<iframe>`) somente se estiver no mesmo domínio. Isto pode ser indesejado em certas situações (por exemplo, se você estiver desenvolvendo um aplicativo do Facebook), portanto, o comportamento pode ser alterado através da definição de quadros `frames: http://allowed-host.com`.


Política de Segurança de Conteúdo .[#toc-content-security-policy]
-----------------------------------------------------------------

Os cabeçalhos `Content-Security-Policy` (doravante denominados CSP) podem ser facilmente montados, sua descrição pode ser encontrada na [descrição do CSP |https://content-security-policy.com]. As diretrizes CSP (tais como `script-src`) podem ser escritas como cordas de acordo com a especificação ou como matrizes de valores para melhor legibilidade. Então não há necessidade de escrever aspas em torno de palavras-chave, como `'self'`. A Nette também gerará automaticamente um valor de `nonce`, portanto `'nonce-y4PopTLM=='` será enviado no cabeçalho.

```neon
http:
	# Content Security Policy
	csp:
		# string according to CSP specification
		default-src: "'self' https://example.com"

		# array of values
		script-src:
			- nonce
			- strict-dynamic
			- self
			- https://example.com

		# bool in the case of switches
		upgrade-insecure-requests: true
		block-all-mixed-content: false
```

Use `<script n:nonce>...</script>` nos gabaritos e o valor nonce será preenchido automaticamente. Fazer sites seguros em Nette é realmente fácil.

Da mesma forma, os cabeçalhos `Content-Security-Policy-Report-Only` (que podem ser usados em paralelo com o CSP) e a [Política de Recursos |https://developers.google.com/web/updates/2018/06/feature-policy] podem ser acrescentados:

```neon
http:
	# Content Security Policy Report-Only
	cspReportOnly:
		default-src: self
		report-uri: 'https://my-report-uri-endpoint'

	# Feature Policy
	featurePolicy:
		unsized-media: none
		geolocation:
			- self
			- https://example.com
```


Cookie HTTP .[#toc-http-cookie]
-------------------------------

Você pode alterar os valores padrão de alguns parâmetros do [Nette\HttpResposta::setCookie() |response#setCookie] e métodos de sessão.

```neon
http:
	# cookie scope by path
	cookiePath: ...        # (string) defaults to '/'

	# which hosts are allowed to receive the cookie
	cookieDomain: 'example.com'  # (string|domain) defaults to unset

	# to send cookies only via HTTPS?
	cookieSecure: ...      # (bool|auto) defaults to auto

	# disables the sending of the cookie that Nette uses as protection against CSRF
	disableNetteCookie: ...  # (bool) defaults to false
```

A opção `cookieDomain` determina quais domínios (origens) podem aceitar cookies. Se não especificado, o cookie é aceito pelo mesmo (sub)domínio que é definido por ele, *excluindo* seus subdomínios. Se `cookieDomain` for especificado, então os subdomínios também serão incluídos. Portanto, a especificação do `cookieDomain` é menos restritiva do que a omissão.

Por exemplo, se `cookieDomain: nette.org` estiver definido, o cookie também está disponível em todos os subdomínios como `doc.nette.org`. Isto também pode ser conseguido com o valor especial `domain`, ou seja, `cookieDomain: domain`.

O valor padrão de `cookieSecure` é `auto` o que significa que se o site estiver rodando em HTTPS, os cookies serão enviados com a bandeira `Secure` e, portanto, só estarão disponíveis via HTTPS.


Proxy HTTP .[#toc-http-proxy]
-----------------------------

Se o site estiver rodando atrás de um proxy HTTP, digite o endereço IP do proxy para que a detecção de conexões HTTPS funcione corretamente, assim como o endereço IP do cliente. Ou seja, para que [Nette\Http\Request::getRemoteAddress() |request#getRemoteAddress] e [isSecured() |request#isSecured] retornem os valores corretos e os links sejam gerados com o protocolo `https:` nos templates.

```neon
http:
	# IP address, range (ie. 127.0.0.1/8) or array of these values
	proxy: 127.0.0.1       # (string|string[]) defaults to none
```


Sessão .[#toc-session]
======================

Configurações básicas das [sessões |sessions]:

```neon
session:
	# shows session panel in Tracy Bar?
	debugger: ...        # (bool) defaults to false

	# inactivity time after which the session expires
	expiration: 14 days  # (string) defaults to '3 hours'

	# when to start the session?
	autoStart: ...       # (smart|always|never) defaults to 'smart'

	# handler, service that implements the SessionHandlerInterface interface
	handler: @handlerService
```

A opção `autoStart` controla quando iniciar a sessão. O valor `always` significa que a sessão é sempre iniciada quando a aplicação é iniciada. O valor `smart` significa que a sessão será iniciada quando a aplicação começar somente se ela já existir, ou no momento em que quisermos ler ou escrever para ela. Finalmente, o valor `never` desabilita o início automático da sessão.

Você também pode definir todas as [diretrizes de sessão |https://www.php.net/manual/en/session.configuration.php] PHP (em formato camelCase) e também [lerAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters]. Exemplo:

```neon
session:
	# 'session.name' written as 'name'
	name: MYID

	# 'session.save_path' written as 'savePath'
	savePath: "%tempDir%/sessions"
```


Sessão Cookie .[#toc-session-cookie]
------------------------------------

O cookie da sessão é enviado com os mesmos parâmetros que os [outros cookies |#HTTP cookie], mas você pode alterá-los para ele:

```neon
session:
	# which hosts are allowed to receive the cookie
	cookieDomain: 'example.com'   # (string|domain)

	# restrictions when accessing cross-origin request
	cookieSamesite: None          # (Strict|Lax|None) defaults to Lax
```

A opção `cookieSamesite` afeta se o cookie é enviado com [pedidos de origem cruzada |nette:glossary#SameSite cookie], o que proporciona alguma proteção contra [falsificações em locais cruzados |nette:glossary#cross-site-request-forgery-csrf].
