Erstellen Sie Ihre erste Bewerbung!
***********************************

.[perex]
Lernen Sie das Nette Framework kennen, indem Sie einen einfachen Blog mit Kommentaren erstellen. Los geht's!

Nach den ersten beiden Kapiteln werden Sie Ihren eigenen funktionierenden Blog haben und bereit sein, Ihre tollen Beiträge zu veröffentlichen, obwohl die Funktionen nach Abschluss dieser beiden Kapitel ziemlich eingeschränkt sind. Um es für Ihre Benutzer schöner zu machen, sollten Sie auch die folgenden Kapitel lesen und Ihre Anwendung weiter verbessern.

Sie können die [komplette Anwendung auf GitHub |https://github.com/nette-examples/quickstart/tree/v4.0] finden.

Bitte installieren Sie eine [voll funktionsfähige IDE und alle notwendigen Plugins |best-practices:editors-and-tools], das wird Sie extrem effizient machen.

Dieser QuickStart wurde für Nette Framework 3.1 und PHP 8.0 oder neuer geschrieben.

Sie können das Nette Framework manuell herunterladen, aber der empfohlene Weg, ein neues Projekt zu starten, ist die Verwendung des [Composers |best-practices:composer]. Wenn Sie den Composer nicht kennen, sollten Sie unbedingt damit beginnen. Es ist ein wirklich einfaches und nützliches Tool, sehen Sie sich die [Dokumentation |https://getcomposer.org/doc/] an.

Mit Composer können Sie das Anwendungsskelett, bekannt als Web Project einschließlich Nette Framework, ganz einfach herunterladen und installieren. Suchen Sie dazu Ihr Webroot-Verzeichnis (z. B. `/var/www` oder `C:\InetPub`) in Ihrer Befehlszeile und führen Sie den folgenden Befehl aus:

```shell
composer create-project nette/web-project nette-blog
```

Web Project wird in das Verzeichnis `nette-blog` heruntergeladen.

.[note]
Wenn Sie Composer nicht verwenden können, [laden Sie |https://github.com/nette/web-project/archive/preloaded.zip] das Archiv herunter, extrahieren Sie es und kopieren Sie es in das Stammverzeichnis des Webservers und benennen Sie es in `nette-blog` um. Das gesamte Framework befindet sich im Ordner `vendor`.

Wenn Sie auf macOS oder Linux (oder einem anderen Unix-basierten System) entwickeln, müssen Sie [Schreibrechte |nette:troubleshooting#Setting directory permissions] für den Webserver [konfigurieren |nette:troubleshooting#Setting directory permissions].


Die Willkommensseite .[#toc-the-welcome-page]
=============================================

In diesem Moment sollte die Willkommensseite des Webprojekts laufen. Probieren Sie sie aus, indem Sie Ihren Browser öffnen und die folgende URL aufrufen:

```
http://localhost/nette-blog/www/
```

und Sie sollten die Nette Framework Willkommensseite sehen:

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

Die Anwendung funktioniert und Sie können nun Änderungen vornehmen.

.[note]
Wenn Sie ein Problem haben, [versuchen Sie die folgenden Tipps |nette:troubleshooting#Nette Is Not Working, White Page Is Displayed].


Inhalt des Webprojekts .[#toc-web-project-s-content]
====================================================

Web Project hat die folgende Struktur:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← Anwendungsverzeichnis
│   ├── <b>Presenters/</b>   ← Presenter-Klassen
│   │   └── <b>templates/</b>← Vorlagen
│   ├── <b>Router/</b>       ← Konfiguration von URL-Adressen
│   └── <b>Bootstrap.php</b> ← bootende Klasse Bootstrap
├── <b>bin/</b>              ← Skripte für die Kommandozeile
├── <b>config/</b>           ← Konfigurationsdateien
├── <b>log/</b>              ← Fehlerprotokolle
├── <b>temp/</b>             ← temporäre Dateien, Cache, …
├── <b>vendor/</b>           ← vom Composer installierte Bibliotheken
│   └── <b>autoload.php</b>  ← Automatisches Laden der vom Composer installierten Bibliotheken
└── <b>www/</b>              ← öffentlicher Ordner - der einzige Ort, der vom Browser aus zugänglich ist
    └── <b>index.php</b>     ← Anfangsdatei, die die Anwendung startet
\--

Das Verzeichnis `www` ist für Bilder, JavaScript, CSS und andere öffentlich verfügbare Dateien vorgesehen. Dies ist das einzige Verzeichnis, auf das der Browser direkt zugreift. Sie können also das Stammverzeichnis Ihres Webservers hierher verweisen (Sie können es im Apache konfigurieren, aber das machen wir später, da es im Moment nicht wichtig ist).

Das wichtigste Verzeichnis für Sie ist `app/`. Dort finden Sie die Datei `Bootstrap.php`, in der sich eine Klasse befindet, die das Framework lädt und die Anwendung konfiguriert. Sie aktiviert das [Autoloading |robot-loader:] und richtet den [Debugger |tracy:] und die [Routen |application:routing] ein.


Aufräumen .[#toc-cleanup]
=========================

Das Webprojekt enthält eine Willkommensseite, die wir entfernen können - löschen Sie die Datei `app/Presenters/templates/Homepage/default.latte` und ersetzen Sie sie durch den Text "Hello world!".


[* qs-hello.webp .{url:-} *]


Tracy (Debugger) .[#toc-tracy-debugger]
=======================================

Ein äußerst wichtiges Werkzeug für die Entwicklung ist [ein Debugger namens Tracy |tracy:]. Versuchen Sie, einige Fehler in Ihrer `app/Presenters/HomepagePresenter.php` Datei zu machen (z.B. entfernen Sie eine geschweifte Klammer aus der Definition der Klasse HomepagePresenter) und sehen Sie, was passiert. Es wird eine rote Bildschirmseite mit einer verständlichen Fehlerbeschreibung erscheinen.

[* qs-tracy.webp .{url:-}(debugger screen) *]

Tracy wird Ihnen bei der Fehlersuche sehr helfen. Beachten Sie auch die schwebende Tracy-Leiste in der unteren rechten Ecke, die Sie über wichtige Laufzeitdaten informiert.

[* qs-tracybar.webp .{url:-} *]

Im Produktionsmodus ist Tracy natürlich deaktiviert und gibt keine sensiblen Informationen preis. Alle Fehler werden stattdessen im Verzeichnis `log/` gespeichert. Probieren Sie es einfach aus. Suchen Sie in `app/Bootstrap.php` das folgende Codestück, heben Sie die Kommentare in der Zeile auf und ändern Sie den Parameter für den Methodenaufruf in `false`, so dass es wie folgt aussieht:

```php .{file:app/Bootstrap.php}
...
$configurator->setDebugMode(false);
$configurator->enableTracy(__DIR__ . '/../log');
...
```

Nach dem Aktualisieren der Webseite wird die Seite mit dem roten Bildschirm durch die benutzerfreundliche Meldung ersetzt:

[* qs-fatal.webp .{url:-}(error screen) *]

Schauen Sie nun in das Verzeichnis `log/`. Dort finden Sie das Fehlerprotokoll (in der Datei exception.log) und auch die Seite mit der Fehlermeldung (gespeichert in einer HTML-Datei mit einem Namen, der mit `exception` beginnt).

Kommentieren Sie die Zeile `// $configurator->setDebugMode(false);` erneut aus. Tracy aktiviert automatisch den Entwicklungsmodus in der Umgebung `localhost` und deaktiviert ihn an anderer Stelle.

Jetzt können wir den Fehler beheben und mit der Entwicklung unserer Anwendung fortfahren.


Dank senden .[#toc-send-thanks]
===============================

Wir werden Ihnen einen Trick zeigen, der Open-Source-Autoren glücklich machen wird. Sie können den Bibliotheken, die Ihr Projekt verwendet, auf GitHub ganz einfach einen Stern geben. Führen Sie einfach aus:

```shell
composer thanks
```

Probieren Sie es aus!

{{priority: -1}}
{{sitename: Nette Quickstart}}
