Database
********

/--div .[perex]
Nette Framework provides powerful layer for easy accessing your database.

- composes SQL queries with ease
- easily fetches data
- uses efficient queries and does not transmit unnecessary data
\--


Class [api:Nette\Database\Connection] is wrapper around [php:PDO] and represents connection to database. The core functionality is provided by [api:Nette\Database\Context]. Enhanced layer for querying tables is provided by [Nette\Database\Table | database-table] layer.

Creating a connection
---------------------

To create new database connection just create new instance of [api:Nette\Database\Connection] class:

/--php
use Nette\Database\Connection;

$connection = new Connection($dsn, $user, $password);
\--

Nette\Database will create create own proper internal driver based on your database server. This internal driver adjusts Nette\Database behavior for your database server. Nette supports this database servers:

|* Database server    |* DSN name   |* Database support |* Database\Table support
| MySQL               | mysql       | YES               | YES
| PostgreSQL          | pgsql       | YES               | YES
| Sqlite 3            | sqlite      | YES               | YES
| Sqlite 2            | sqlite2     | YES               | -
| MS SQL (PDO_SQLSRV) | sqlsrv      | YES               | YES
| MS SQL (PDO_DBLIB)  | mssql       | YES               | -
| ODBC                | odbc        | YES               | -

Optional 4th parameter of [connection constructor |api:Nette\Database\Connection] allows you to specify some options. These options are passed to PDO constructor and internal driver constructor, so they can contain configuration for both PDO instance and driver instance.

Internal driver class name is detected by provided DSN. However, you can provide you own implementation of internal driver. To do this, pass your driver name as option with `driverClass` key.

/--code php
$connection = new Connection($dsn, $user, $password, array(
	'driverClass' => 'App\YourSpecificDriverImplementationName'
));
\--

All connections are created as "lazy" by default. This means the connection is established when it's needed, not when you create `Connection` instance. You can disable this behavior by passing `'lazy' => FALSE` configuration.

/--code php
$connection = new Connection($dsn, $user, $password, array(
	'lazy' => FALSE
));
\--


If you use [Nette\Application | application], you will configure you database by application config. You can find more about configuring connection in [Configuring chapter | configuring#toc-database].

Queries
--------

The core functionality is provided by [api:Nette\Database\Context]. Database\Context allows you to easily query your database by calling `query` method:

/--php
use Nette\Database\Context;

$database = new Context($connection);

$database->query('INSERT INTO users', array( // an array can be a parameter
	'name' => 'Jim',
	'created' => new DateTime, // or a DateTime object
	'avatar' => fopen('image.gif', 'r'), // or a file
), ...); // it is even possible to use multiple inserts

$database->query('UPDATE users SET ? WHERE id=?', $data, $id);
$database->query('SELECT * FROM categories WHERE id=?', 123)->dump();
\--

{{toc: title}}

{{themeicon: icon-database.png}}
{{care: Jan Škrášek|449}}
