Работа с поплавками
*******************

.[perex]
[api:Nette\Utils\Floats] это статический класс с полезными функциями для сравнения десятичных чисел.


Установка:

```shell
composer require nette/utils
```

Во всех примерах предполагается, что псевдоним уже создан:

```php
use Nette\Utils\Floats;
```


Мотивация .[#toc-motivation]
============================

Почему класс для сравнения поплавков, спросите вы? Я имею в виду, я могу использовать операторы `<`, `>`, `===` и все готово.
Это не совсем так. Как вы думаете, что выведет этот код?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Если вы запустите этот код, некоторые из вас удивятся, увидев, что программа печатает `not same`.

При математических операциях с десятичными числами ошибки возникают из-за преобразования десятичных чисел в двоичные. Например, `0.1 + 0.2` выводит `0.300000000000000044…`. Поэтому при проведении сравнений мы должны допускать небольшое расхождение с определенным десятичным знаком.

Вот что делает класс `Floats`. Следующее сравнение будет работать так, как ожидается:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

При попытке сравнить `NAN` возникает исключение `\LogicException`.


Сравнение плавающих значений .[#toc-float-comparison]
=====================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Возвращает `true`, если `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Возвращает `true`, если `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Возвращает `true`, если `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Возвращает `true`, если `$a` > `$b` применяется .

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Возвращает `true`, если `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Если `$a` < `$b`, возвращается `-1`, если равно `0` a pokud je `$a` > `$b` возвращается `1`.

Может использоваться, например, с функцией `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr je nyní [-3.5, 1, 2, 5]
```


Вспомогательные функции .[#toc-helpers-functions]
=================================================


isZero(float $value): bool .[method]
------------------------------------

Возвращает `true`, если значение равно нулю.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Возвращает `true`, если значение является целым числом.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
