Comment fonctionnent les applications ?
***************************************

<div class=perex>

Vous lisez actuellement le guide fondamental de la documentation Nette. Vous apprendrez tout le principe de fonctionnement des applications web. De A à Z, du début à la fin de l'exécution du script PHP. Après lecture, vous saurez :

- comment tout cela fonctionne
- ce qu'est Bootstrap, un Presenter et un conteneur DI
- à quoi ressemble la structure des répertoires

</div>


Structure des répertoires
=========================

Ouvrez l'exemple de squelette d'application web appelé [WebProject|https://github.com/nette/web-project] et pendant la lecture, examinez les fichiers mentionnés.

La structure des répertoires ressemble à quelque chose comme ceci :

/--pre
<b>web-project/</b>
├── <b>app/</b>                      ← répertoire de l'application
│   ├── <b>Core/</b>                 ← classes de base nécessaires au fonctionnement
│   │   └── <b>RouterFactory.php</b> ← configuration des adresses URL
│   ├── <b>Presentation/</b>         ← presenters, templates & co.
│   │   ├── <b>@layout.latte</b>     ← template de layout
│   │   └── <b>Home/</b>             ← répertoire du presenter Home
│   │       ├── <b>HomePresenter.php</b> ← classe du presenter Home
│   │       └── <b>default.latte</b> ← template de l'action default
│   └── <b>Bootstrap.php</b>         ← classe de démarrage Bootstrap
├── <b>assets/</b>                   ← ressources (SCSS, TypeScript, images sources)
├── <b>bin/</b>                      ← scripts exécutés depuis la ligne de commande
├── <b>config/</b>                   ← fichiers de configuration
│   ├── <b>common.neon</b>
│   └── <b>services.neon</b>
├── <b>log/</b>                      ← erreurs journalisées
├── <b>temp/</b>                     ← fichiers temporaires, cache, …
├── <b>vendor/</b>                   ← bibliothèques installées par Composer
│   ├── ...
│   └── <b>autoload.php</b>          ← autoloading de tous les paquets installés
├── <b>www/</b>                      ← répertoire public ou document-root du projet
│   ├── <b>assets/</b>               ← fichiers statiques compilés (CSS, JS, images, ...)
│   ├── <b>.htaccess</b>             ← règles mod_rewrite
│   └── <b>index.php</b>             ← fichier initial par lequel l'application est lancée
└── <b>.htaccess</b>                 ← interdit l'accès à tous les répertoires sauf www
\--

Vous pouvez modifier la structure des répertoires comme vous le souhaitez, renommer ou déplacer des dossiers, elle est entièrement flexible. De plus, Nette dispose d'une autodétection intelligente et reconnaît automatiquement l'emplacement de l'application, y compris sa base d'URL.

Pour les applications légèrement plus grandes, nous pouvons [diviser les dossiers avec les presenters et les templates en sous-répertoires |directory-structure#Presenters et templates] et les classes en espaces de noms, que nous appelons modules.

Le répertoire `www/` représente le répertoire public ou document-root du projet. Vous pouvez le renommer sans aucune configuration supplémentaire côté application. Il suffit de [configurer l'hébergement |nette:troubleshooting#Comment changer ou supprimer le répertoire www de l URL] pour que le document-root pointe vers ce répertoire.

Vous pouvez également télécharger directement WebProject incluant Nette en utilisant [Composer |best-practices:composer] :

```shell
composer create-project nette/web-project
```

Sous Linux ou macOS, définissez les [permissions d'écriture |nette:troubleshooting#Configuration des permissions de répertoire] pour les répertoires `log/` et `temp/`.

L'application WebProject est prête à être lancée, il n'y a absolument rien à configurer et vous pouvez l'afficher directement dans le navigateur en accédant au dossier `www/`.


Requête HTTP
============

Tout commence au moment où l'utilisateur ouvre une page dans le navigateur. C'est-à-dire lorsque le navigateur contacte le serveur avec une requête HTTP. La requête pointe vers un seul fichier PHP, qui se trouve dans le répertoire public `www/`, et c'est `index.php`. Supposons qu'il s'agisse d'une requête pour l'adresse `https://example.com/product/123`. Grâce à une [configuration serveur appropriée |nette:troubleshooting#Comment configurer le serveur pour les jolies URL], cette URL est également associée au fichier `index.php`, qui est ensuite exécuté.

Ses tâches sont :

1) initialiser l'environnement
2) obtenir la factory
3) lancer l'application Nette, qui traitera la requête

Quelle factory ? Nous ne fabriquons pas de tracteurs, mais des sites web ! Patientez, cela va s'éclaircir.

Par "initialisation de l'environnement", nous entendons par exemple l'activation de [Tracy|tracy:], qui est un outil exceptionnel pour la journalisation ou la visualisation des erreurs. Sur un serveur de production, il journalise les erreurs, sur un serveur de développement, il les affiche directement. L'initialisation comprend donc également la décision de savoir si le site fonctionne en mode production ou développement. Pour cela, Nette utilise une [autodétection intelligente |bootstrapping#Mode Développement vs Production] : si vous lancez le site sur localhost, il fonctionne en mode développement. Vous n'avez donc rien à configurer et l'application est prête à la fois pour le développement et le déploiement en production. Ces étapes sont effectuées et décrites en détail dans le chapitre sur la [classe Bootstrap|bootstrapping].

Le troisième point (oui, nous avons sauté le deuxième, mais nous y reviendrons) est le lancement de l'application. Le traitement des requêtes HTTP dans Nette est géré par la classe `Nette\Application\Application` (ci-après `Application`), donc quand nous disons lancer l'application, nous entendons spécifiquement appeler la méthode `run()` sur l'objet de cette classe.

Nette est un mentor qui vous guide vers l'écriture d'applications propres selon des méthodologies éprouvées. Et l'une de celles qui sont absolument les plus éprouvées s'appelle **l'injection de dépendances**, en abrégé DI. Pour le moment, nous ne voulons pas vous surcharger avec l'explication de la DI, il y a un [chapitre séparé|dependency-injection:introduction] pour cela, l'important est la conséquence que les objets clés nous seront généralement créés par une factory d'objets appelée **conteneur DI** (abrégé en DIC). Oui, c'est la factory dont il était question il y a un instant. Et elle nous créera aussi l'objet `Application`, c'est pourquoi nous avons d'abord besoin du conteneur. Nous l'obtenons à l'aide de la classe `Configurator` et nous lui demandons de créer l'objet `Application`, nous appelons sa méthode `run()` et l'application Nette est ainsi lancée. C'est exactement ce qui se passe dans le fichier [index.php |bootstrapping#index.php].


Nette Application
=================

La classe `Application` n'a qu'une seule tâche : répondre à la requête HTTP.

Les applications écrites en Nette sont divisées en de nombreux presenters (dans d'autres frameworks, vous pouvez rencontrer le terme controller, c'est la même chose), qui sont des classes, dont chacune représente une page web spécifique : par ex. la page d'accueil ; un produit dans une boutique en ligne ; un formulaire de connexion ; un flux sitemap, etc. Une application peut avoir d'un à des milliers de presenters.

`Application` commence par demander au routeur de décider à quel presenter transmettre la requête actuelle pour traitement. Le routeur détermine qui est responsable. Il regarde l'URL d'entrée `https://example.com/product/123` et sur la base de sa configuration, décide que c'est le travail, par ex., du **presenter** `Product`, auquel il demandera comme **action** l'affichage (`show`) du produit avec `id: 123`. Il est de bonne pratique de noter la paire presenter + action séparée par deux-points, comme `Product:show`.

Le routeur a donc transformé l'URL en une paire `Presenter:action` + paramètres, dans notre cas `Product:show` + `id: 123`. À quoi ressemble un tel routeur, vous pouvez le voir dans le fichier `app/Core/RouterFactory.php` et nous le décrivons en détail dans le chapitre [Routage |Routing].

Continuons. `Application` connaît déjà le nom du presenter et peut continuer. En créant l'objet de la classe `ProductPresenter`, qui est le code du presenter `Product`. Plus précisément, il demande au conteneur DI de créer le presenter, car c'est son rôle.

Le presenter peut ressembler à ceci :

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private ProductRepository $repository,
	) {
	}

	public function renderShow(int $id): void
	{
		// nous obtenons les données du modèle et les passons au template
		$this->template->product = $this->repository->getProduct($id);
	}
}
```

Le presenter prend en charge le traitement de la requête. Et la tâche est claire : effectuer l'action `show` avec `id: 123`. Ce qui, dans le langage des presenters, signifie que la méthode `renderShow()` est appelée et reçoit `123` dans le paramètre `$id`.

Un presenter peut gérer plusieurs actions, c'est-à-dire avoir plusieurs méthodes `render<Action>()`. Mais nous recommandons de concevoir des presenters avec une seule ou le moins d'actions possible.

Donc, la méthode `renderShow(123)` a été appelée, dont le code est un exemple fictif, mais vous pouvez y voir comment les données sont passées au template, c'est-à-dire en écrivant dans `$this->template`.

Ensuite, le presenter retourne une réponse. Cela peut être une page HTML, une image, un document XML, l'envoi d'un fichier depuis le disque, du JSON ou même une redirection vers une autre page. Il est important que si nous ne disons pas explicitement comment répondre (ce qui est le cas de `ProductPresenter`), la réponse sera le rendu d'un template avec une page HTML. Pourquoi ? Parce que dans 99% des cas, nous voulons rendre un template, donc le presenter considère ce comportement comme celui par défaut et veut nous faciliter le travail. C'est le but de Nette.

Nous n'avons même pas besoin de spécifier quel template rendre, il déduit le chemin lui-même. Dans le cas de l'action `show`, il essaie simplement de charger le template `show.latte` dans le répertoire de la classe `ProductPresenter`. Il essaie également de trouver le layout dans le fichier `@layout.latte` (plus de détails sur la [recherche de templates |templates#Recherche de templates]).

Et ensuite, il rend les templates. La tâche du presenter et de toute l'application est ainsi terminée. Si le template n'existait pas, une page d'erreur 404 serait retournée. Vous en apprendrez plus sur les presenters sur la page [Presenters |Presenters].

[* request-flow.svg *]

Pour être sûr, essayons de récapituler tout le processus avec une URL légèrement différente :

1) L'URL sera `https://example.com`
2) nous démarrons l'application, le conteneur est créé et `Application::run()` est lancé
3) le routeur décode l'URL comme la paire `Home:default`
4) l'objet de la classe `HomePresenter` est créé
5) la méthode `renderDefault()` est appelée (si elle existe)
6) le template (par ex. `default.latte`) avec le layout (par ex. `@layout.latte`) est rendu


Vous avez peut-être rencontré de nombreux nouveaux termes maintenant, mais nous espérons qu'ils ont du sens. Créer des applications avec Nette est incroyablement simple et agréable.


Templates
=========

Puisque nous avons parlé des templates, Nette utilise le système de templates [Latte |latte:]. D'une part parce que c'est le système de templates le plus sécurisé pour PHP, et d'autre part parce que c'est aussi le système le plus intuitif. Vous n'avez pas besoin d'apprendre beaucoup de nouveautés, la connaissance de PHP et de quelques balises suffit. Vous apprendrez tout dans [la documentation |templates].

Dans le template, des [liens |creating-links] sont créés vers d'autres presenters & actions comme ceci :

```latte
<a n:href="Product:show $productId">détail du produit</a>
```

Au lieu d'une URL réelle, écrivez simplement la paire connue `Presenter:action` et spécifiez d'éventuels paramètres. L'astuce réside dans `n:href`, qui indique que cet attribut sera traité par Nette. Et il générera :

```latte
<a href="/product/456">détail du produit</a>
```

La génération d'URL est gérée par le routeur mentionné précédemment. En effet, les routeurs dans Nette sont exceptionnels car ils peuvent effectuer non seulement des transformations d'URL en paire presenter:action, mais aussi l'inverse, c'est-à-dire générer une URL à partir du nom du presenter + action + paramètres. Grâce à cela, dans Nette, vous pouvez complètement changer les formes d'URL dans toute une application terminée, sans changer un seul caractère dans le template ou le presenter. Juste en modifiant le routeur. Grâce à cela fonctionne également la canonisation, qui est une autre caractéristique unique de Nette, contribuant à un meilleur SEO (optimisation pour les moteurs de recherche) en empêchant automatiquement l'existence de contenu dupliqué sur différentes URL. De nombreux programmeurs trouvent cela impressionnant.


Composants interactifs
======================

Nous devons vous dire encore une chose sur les presenters : ils ont un système de composants intégré. Les vétérans peuvent se souvenir de quelque chose de similaire dans Delphi ou ASP.NET Web Forms ; React ou Vue.js sont basés sur quelque chose de vaguement similaire. Dans le monde des frameworks PHP, c'est une caractéristique absolument unique.

Les composants sont des unités autonomes et réutilisables que nous insérons dans les pages (c'est-à-dire les presenters). Il peut s'agir de [formulaires |forms:in-presenter], de [datagrids |https://componette.org/contributte/datagrid/], de menus, de sondages, en fait de tout ce qu'il est judicieux d'utiliser de manière répétée. Nous pouvons créer nos propres composants ou utiliser certains de la [vaste offre |https://componette.org] de composants open source.

Les composants influencent fondamentalement l'approche de la création d'applications. Ils vous ouvrent de nouvelles possibilités de composition de pages à partir d'unités préfabriquées. Et en plus, ils ont quelque chose en commun avec [Hollywood |components#Style Hollywood].


Conteneur DI et configuration
=============================

Le conteneur DI ou factory d'objets est le cœur de toute l'application.

Ne vous inquiétez pas, ce n'est pas une boîte noire magique, comme on pourrait le penser d'après les lignes précédentes. En fait, c'est une classe PHP plutôt simple, générée par Nette et stockée dans le répertoire cache. Elle a beaucoup de méthodes nommées comme `createServiceAbcd()` et chacune d'elles sait comment créer et retourner un objet. Oui, il y a aussi une méthode `createServiceApplication()`, qui crée `Nette\Application\Application`, dont nous avions besoin dans le fichier `index.php` pour lancer l'application. Et il y a des méthodes créant les presenters individuels. Et ainsi de suite.

Les objets que le conteneur DI crée sont, pour une raison quelconque, appelés services.

Ce qui est vraiment spécial à propos de cette classe, c'est que ce n'est pas vous qui la programmez, mais le framework. Il génère réellement le code PHP et le sauvegarde sur le disque. Vous donnez simplement des instructions sur les objets que le conteneur doit savoir créer et comment précisément. Et ces instructions sont écrites dans des [fichiers de configuration |bootstrapping#Configuration du Conteneur DI], pour lesquels le format [NEON|neon:format] est utilisé et qui ont donc aussi l'extension `.neon`.

Les fichiers de configuration servent uniquement à instruire le conteneur DI. Ainsi, par exemple, si j'indique dans la section [session |http:configuration#Session] l'option `expiration: 14 days`, alors le conteneur DI, lors de la création de l'objet `Nette\Http\Session` représentant la session, appellera sa méthode `setExpiration('14 days')` et la configuration deviendra ainsi réalité.

Il y a tout un chapitre préparé pour vous décrivant tout ce qui peut être [configuré |nette:configuring] et comment [définir vos propres services |dependency-injection:services].

Dès que vous vous familiariserez un peu avec la création de services, vous rencontrerez le mot [autowiring |dependency-injection:autowiring]. C'est une astuce qui vous simplifiera incroyablement la vie. Elle sait comment passer automatiquement des objets là où vous en avez besoin (par exemple dans les constructeurs de vos classes), sans que vous ayez à faire quoi que ce soit. Vous découvrirez que le conteneur DI de Nette est un petit miracle.


Où aller ensuite ?
==================

Nous avons parcouru les principes de base des applications en Nette. Pour l'instant très superficiellement, mais vous approfondirez bientôt et créerez avec le temps de merveilleuses applications web. Où continuer ? Avez-vous déjà essayé le tutoriel [Écrivons notre première application|quickstart:] ?

En plus de ce qui a été décrit ci-dessus, Nette dispose de tout un arsenal de [classes utiles|utils:], d'une [couche de base de données|database:], etc. Essayez juste de parcourir la documentation. Ou le [blog|https://blog.nette.org]. Vous découvrirez beaucoup de choses intéressantes.

Que le framework vous apporte beaucoup de joie 💙
