Routing
*******

<div class=perex>

Routing is a two-way conversion between URL and presenter action. *Two-way* means we can both determine what presenter URL links to, but also vice versa: generate URL for given action. This article contains:

- how to define routes and create links
- a few notes about SEO redirection
- how to debug defined routes
- how to create your own router

</div>



What is Routing?
================

Routing is a **two-way conversion** between **URL** and an array of parameters.

- `Nette\Http\IRequest` (includes URL) -> array
- array -> absolute URL


Thanks to bidirectional routing you don't have to hardcode URLs into templates anymore, you simply link to [presenters' actions|presenters#handling-presenter-actions] and framework generates the URLs for you:

```html
{* creates a link to presenter 'Product' and action 'detail' *}
<a n:href="Product:detail $productId">product detail</a>
```

Learn more about [creating links |link-generation].

Routing is a **separate application layer**. This allows you to very efficiently manipulate the URL structure without the need to modify the application itself. It's simple to change routes anytime while keeping the original addresses preserved and automatically redirect to the new variants. So hey, who's got that? :-)


SimpleRouter
============

The desired URL format is set by a *router*. The plainest implementation of the router is [SimpleRouter |api:Nette\Application\Routers\SimpleRouter]. It can be used when there's no need for a specific URL format, when `mod_rewrite` (or alternatives) is not available or when we simply do not want to bother with user-friendly URLs yet.

Generated addresses will look like this:

```
http://example.com/?presenter=Product&action=detail&id=123
```

The first parameter of the `SimpleRouter` constructor is a default presenter action, ie. action to be executed if we open e.g. `http://example.com/` without additional parameters.

```php
// defaults to presenter 'Homepage' and action 'default'
$router = new Nette\Application\Routers\SimpleRouter('Homepage:default');
```

The recommended way to configure the application to use `SimpleRouter` is to use [configuration file |configuring#services]:

```neon
services:
	application.router: Nette\Application\Routers\SimpleRouter('Homepage:default')
```


Route: for Prettier URLs .{toc: Route}
======================================

Human-friendly URLs (also more cool & prettier) are easier to remember and do help SEO((search engine optimalization)). Nette Framework keeps current trends in mind and fully meets developers' desires.

All requests must be handled by `index.php` file. This can be accomplished e.g. by using Apache module `mod_rewrite` or Nginx's `try_files` directive (see [how to configure a server for nice URLs |troubleshooting#how-to-configure-a-server-for-nice-urls]).

Class [Route |api:Nette\Application\Routers\Route] is able to create addresses in pretty much any format one can though of. Let's start with a simple example, generating the following pretty URL for action `Product:default` with `id = 123`:

```
http://example.com/product/detail/123
```

The following snippet creates a `Route` object, passing path mask as the first argument and specifying default action in the second argument. We may pass additional [#flags] using the third argument.

```php
// action defaults to presenter Homepage and action default
$route = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');

// alternatively written using an array
$route = new Route('<presenter>/<action>[/<id>]', [
	'presenter' => 'Homepage',
	'action'    => 'default'
]);
```

This route is usable by all presenters and actions. Accepts paths such as `/article/edit/10` or `/catalog/list` because the `id` part is wrapped in square brackets, which marks it as [optional |#optional sequences].

Because other parameters (`presenter` and `action`) do have default values (`Homepage` and `default`), they are optional too. If their value is the same as the default one, they are skipped while the URL is generated. Link to `Product:default` generates only `http://example.com/product` and link to `Homepage:default` generates only `http://example.com/`.


Path Mask
---------

The simplest path mask consists only of a **static URL** and a target presenter action.

```php
$route = new Route('products', 'Products:default');
```

Most real masks however contain some **parameters**. Parameters are enclosed in angle brackets (e.g. `<year>`) and are passed to the target presenter.

```php
$route = new Route('history/<year>', 'History:view');
```

Mask can also contain traditional GET arguments (query after a question mark). Neither validation expressions nor more complex structures are supported in this part of path mask, but you can set what key belongs to which variable:

```php
// use GET parameter "cat" as a "categoryId" in our application
$route = new Route('<presenter>/<action> ? id=<productId> & cat=<categoryId>', ...);
```

The parameters before a question mark are called *path parameters* and the parameters after a question mark are called *query parameters*.

Mask can not only describe path relative to application document root (web root), but can as well contain absolute path (starts with a single slash) or absolute URL with domain (starts with a double slash).

```php
// relative path to application document root (www directory)
$route = new Route('<presenter>/<action>', ...);

// absolute path, relative to server hostname
$route = new Route('/<presenter>/<action>', ...);

// absolute URL including hostname (but scheme-relative)
$route = new Route('//<subdomain>.example.com/<presenter>/<action>', ...);

// absolute URL
$route = new Route('https://<subdomain>.example.com/<presenter>/<action>', ...);
```

Wildcards
---------

Absolute path mask may utilize the following wildcards:
- `%tld%` = top level domain, e.g. `com` or `org`
- `%sld%` = second level domain, e.g. at `example.com` return `example`
- `%domain%` = domain without subdomain, e.g. `example.com`
- `%host%` = full host, e.g. `www.example.com`
- `%basePath%` = an absolute URL path to root dir

```php
$route = new Route('//www.%domain%/%basePath%/<presenter>/<action>', ...);
$route = new Route('//www.%sld%.%tld%/%basePath%/<presenter>/<action', ...);
```


Default Values
--------------

Each parameter may have defined a default value in the mask:

```php
$route = new Route('<presenter=Homepage>/<action=default>/<id=>');
```

Or utilizing an array:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => null,
]);

// equals to the following complex notation
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => [
		Route::VALUE => 'Homepage',
	],
	'action' => [
		Route::VALUE => 'default',
	],
	'id' => [
		Route::VALUE => null,
	],
]);
```

Default values for `<presenter>` and `<action>` can also be written as a string in the second constructor parameter.

```php
$route = new Route('<presenter>/<action>/<id=>', 'Homepage:default');
```



Validation Expressions
----------------------

Each parameter may have defined a **regular expression** which it needs to match. This regular expression is checked both when matching and generating URL. For example let's set `id` to be only numerical, using `\d+` regexp:

```php
// regexp can be defined directly in the path mask after parameter name
$route = new Route('<presenter>/<action>[/<id \d+>]', 'Homepage:default');

// equals to the following complex notation
$route = new Route('<presenter>/<action>[/<id>]', [
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => [
		Route::PATTERN => '\d+',
	],
]);
```


.[note]
Default validation expression for path parameters is `[^/]+`, meaning all characters but a slash. If a parameter is supposed to match a slash as well, we can set the regular expression to `.+`.


Optional Sequences
------------------

Square brackets denote optional parts of mask. Any part of mask may be set as optional, including those containing parameters:

```php
$route = new Route('[<lang [a-z]{2}>/]<name>', 'Article:view');

// Accepted URLs:      Parameters:
//   /en/download        action => view, lang => en, name => download
//   /download           action => view, lang => null, name => download
```

Obviously, if a parameter is inside an optional sequence, it's optional too and defaults to `null`. Sequence should define it's surroundings, in this case a slash which must follow a parameter, if set. The technique may be used for example for optional language subdomains:

```php
$route = new Route('//[<lang=en>.]%domain%/<presenter>/<action>', ...);
```

Sequences may be freely nested and combined:

```php
$route = new Route(
	'[<lang [a-z]{2}>[-<sublang>]/]<name>[/page-<page=0>]',
	'Homepage:default'
);

// Accepted URLs:
//   /cs/hello
//   /en-us/hello
//   /hello
//   /hello/page-12
```


URL generator tries to keep the URL as short as possible (while unique), so what can be omitted is not used. That's why `index[.html]`  route generates `/index`. This behavior can be inverted by writing an exclamation mark after the leftmost square bracket that denotes the respective optional sequence:

```php
// accepts both /hello and /hello.html, generates /hello
$route = new Route('<name>[.html]');

// accepts both /hello and /hello.html, generates /hello.html
$route = new Route('<name>[!.html]');
```


Optional parameters (ie. parameters having default value) without square brackets do behave as if wrapped like this:

```php
$route = new Route('<presenter=Homepage>/<action=default>/<id=>');

// equals to:
$route = new Route('[<presenter=Homepage>/[<action=default>/[<id>]]]');
```

To change how the rightmost slash is generated, i.e. instead of `/homepage/` get a `/homepage`, adjust the route this way:

```php
$route = new Route('[<presenter=Homepage>[/<action=default>[/<id>]]]');
```


Foo Parameters
--------------

Foo parameters are basically unnamed parameters which allow you to match a regular expression. The following route matches `/index`, `/index.html`, `/index.htm` and `/index.php`:

```php
$route = new Route('index<? \.html?|\.php|>', 'Homepage:default');
```

It's also possible to explicitly define a string which will be used for URL generation (similar to setting default value for real parameters). The string must be placed directly after the question mark. The following route is similar to the previous one, but generates `/index.html` instead of `/index` because the string `.html` is set as a "default value".

```php
$route = new Route('index<?.html \.html?|\.php|>', 'Homepage:default');
```


Filters and Translation
-----------------------

It's a good practice to write source code in English, but what if you need your application to run in a different environment? Simple routes such as:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => null,
]);
```

will generate English URLs, such as `/product/detail/123`, `/cart` or `/catalog/view`. If we would like to translate those URLs, we can use a *dictionary* defined under `Route::FILTER_TABLE` key. We'd extend the route so:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => [
		Route::VALUE => 'Homepage', // default value
		Route::FILTER_TABLE => [
			// translated string in URL => presenter
			'produkt' => 'Product',
			'einkaufswagen' => 'Cart',
			'katalog' => 'Catalog',
		],
	],
	'action' => [
		Route::VALUE => 'default',
		Route::FILTER_TABLE => [
			'sehen' => 'view',
		],
	],
	'id' => null,
]);
```

.[tip]
Multiple keys under `Route::FILTER_TABLE` may have the same value. That's how aliases are created. The last value is the canonical one (used for generating links).

Dictionaries may be applied to any path parameter. If a translation is not found, the original (non-translated) value is used. The route by default accepts both translated (e.g. `/einkaufswagen`) and original (e.g. `/cart`) URLs. If you would like to accept only translated URLs, you need to add `Route::FILTER_STRICT => true` to the route definition.

If we only want to only use a translation dictionary for a given parameter, let add `FILTER_STRICT => true`. This will ensure that only the values in the dictionary well will be accepted.

In addition to the translation dictionary in the form of an array, it is possible to set own translation functions and filters:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => [
		Route::VALUE => 'Homepage',
		Route::FILTER_IN => 'filterInFunc',
		Route::FILTER_OUT => 'filterOutFunc',
	],
	'action' => 'default',
	'id' => null,
]);
```

Where 'filterInFunc` and `filterOutFunc` are functions or methods that convert between the parameter in the URL and the value that is passed to the presenter. Each of them provides a conversion in the opposite direction.

The default in-filter is [rawurldecode |php:rawurldecode] and the out-filter is a function that escapes special characters (such as a slash or space) for use in the URL.

There are situations where we want to change this behavior, for example, if we use the `path` parameter, which may include slashes. In order not to convert to `%2F`, cancel the filters:

```php
// accepts http://files.example.com/path/to/my/file

$route = new Route('//files.example.com/<path .+>', [
	'presenter' => 'File',
	'action' => 'default',
	'path' => [
		Route::VALUE => null,
		Route::FILTER_IN => null,
		Route::FILTER_OUT => null,
	],
]);
```


Global Filters
--------------

Besides filters for specific parameters, you can also define **global filters** which accepts an associative array with all parameters and returns an array with filtered parameters. Global filters are defined under `null` key.

```php
$route = new Route('<presenter>/<action>', [
	'presenter' => 'Homepage',
	'action' => 'default',
	null => [
		Route::FILTER_IN => function (array $params): array {
			// ...
			return $params;
		},
		Route::FILTER_OUT => function (array $params): array {
			// ...
			return $params;
		},
	],
]);
```

.[tip]
You can use *global filters* to filter certain parameter based on a value of another parameter, e.g. translate `<presenter>` and `<action>` based on `<lang>`.

Modules
-------

In Nette, we can split presenters into modules. Therefore we need to work with those modules in routes. We can use `module` parameter in `Route` class:

```php
// URL manage/dashboard/default maps to presenter Admin:Dashboard
new Route('manage/<presenter>/<action>', [
	'module' => 'Admin'
]);
```




Route Collection
================

Because we usually define more than one route, we join them into a [RouteList |api:Nette\Application\Routers\RouteList]. Nette does not require routes to be named.

```php
use Nette\Application\Routers\Route;

$router = new Nette\Application\Routers\RouteList;
$router->add(new Route('rss.xml', 'Feed:rss'));
$router->add(new Route('<presenter>/<action>', 'Homepage:default'));
```

The code can be simplified using the `addRoute()` method, which adds `Nette\Application\Routers\Route` objects to the collection.

```php
$router = new Nette\Application\Routers\RouteList;
$router->addRoute('rss.xml', 'Feed:rss');
$router->addRoute('<presenter>/<action>', 'Homepage:default');
```

.[caution]
Order of routes is important because they are tried sequentially from the first one to the last one. Basic rule is we **declare routes from the most specific to the most general**.

Count of routes has an effects on the performance of an application, especially when generating links. It is, therefore, worthwhile to simplify the routing table.


ONE_WAY flag
------------

Unidirectional routers are especially used to preserve the functionality of old URLs by redirecting the URL in the application to a newer form. The `ONE_WAY` flag then marks rows that are no longer used to generate URLs.

```php
// old URL /product-info?id=123, new URL /product/123
$router->addRoute('product-info', 'Product:detail', $router::ONE_WAY);
$router->addRoute('product/<id>', 'Product:detail');
```

Additionally, automatic redirection to the new URL form will cause to do not index the search engines twice (see [#SEO and canonization]).


Modules
-------

If we have more routes that we want to group together in a module, we can use `withModule()`:

```php
$router = new RouteList;
$router->withModule('Forum') // the following routers are part of the Forum module
	->addRoute('rss', 'Feed:rss') // presenter is Forum:Feed
	->addRoute('<presenter>/<action>')

	->withModule('Admin') // the following routers are part of the Forum:Admin module
		->addRoute('sign:in', 'Sign:in');
```

Subdomains
----------

Routes collections can be divided by subdomains:

```php
$router = new RouteList;
$router->withDomain('example.com')
	->addRoute('rss', 'Feed:rss')
	->addRoute('<presenter>/<action>');
```

You can also use [#wildcards] in your domain name:

```php
$router = new RouteList;
$router->withDomain('example.%tld%')
	...
```

Path prefix
-----------

Routes collections can be divided by path in URL:

```php
$router = new RouteList;
$router->withPath('/eshop')
	->addRoute('rss', 'Feed:rss') // matches URL /eshop/rss
	->addRoute('<presenter>/<action>'); // matches URL /eshop/<presenter>/<action>
```

Combinations
------------

The above usage can be combined:

```php
$router = (new RouteList)
	->withDomain('admin.example.com')
		->withModule('Admin')
			->addRoute(...)
			->addRoute(...)
		->end()
		->withModule('Images')
			->addRoute(...)
		->end()
	->end()
	->withDomain('example.com')
		->withPath('export')
			->addRoute(...)
			...
```


Router Factory
==============

The recommended way to configure the application router is to write a factory (e.g. class `RouterFactory`) and register it to [system DI container |configuring#services] in a configuration file:

```php
namespace App\Router;

use Nette;
use Nette\Application\Routers\RouteList;

class RouterFactory
{
	use Nette\StaticClass;

	public static function createRouter(): RouteList
	{
		$router = new RouteList;
		$router->addRoute('article/<id>', 'Article:view');
		$router->addRoute('rss.xml', 'Feed:rss');
		$router->addRoute('<presenter>/<action>', 'Homepage:default');
		return $router;
	}
}
```

Configuration file:

```neon
services:
	router: App\Router\RouterFactory::createRouter
```

If a route is not found, the [BadRequestException |api:Nette\Application\BadRequestException] exception is thrown and the user will see it as the 404 Page Not Found.

Any dependencies, such as a database connection or a configuration flag, can be passed to the router's factory as parameters of the function:

```php
class RouterFactory
{
	public static function createRouter(Nette\Database\Connection $db, bool $debugMode = false): RouteList
	{
		$router = new RouteList;
		$router->add(...);
		return $router;
	}
}
```


SEO and Canonicalization
========================

Framework increases SEO (search engine optimization) as it prevents multiple URLs to link to different content (without a proper redirect). If more than one addresses link to the same target (`/index` and `/index.html`), the framework choices the first (makes it canonical) and redirects the other one to it with an HTTP code 301. Thanks to that your page won't have duplicities on search engines and their rank won't be split.

This whole process is called canonicalization. Default (canonical) URL is the one router generates, that is the first route in a [collection |#route-collection] which does not return `null` and does not have a `ONE_WAY` [flag |#flags].

Canonicalization is done by [Presenter |api:Nette\Application\UI\Presenter] and it's switched on by default. You may disable it by setting [Presenter::$autoCanonicalize |api:Nette\Application\UI\Presenter::$autoCanonicalize] to `false`, e.g. in `startup()`.

.[note]
Ajax and POST requests are not redirected as a user would suffer either a data loss, or it would yield no additional SEO value.


HTTPS
=====

We need to configure our server to use HTTPS protocol.

Forward all addresses for already well-established applications can be achieved by using .htaccess file in the root directory of our application using a permanent redirect with code 301. (Settings may vary by hosting.)

```php
<IfModule mod_rewrite.c>
	RewriteEngine On
	...
	RewriteCond %{HTTPS} off
	RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
	...
</IfModule>
```

Routes generate URLs with the same protocol as the page was loaded, so nothing more is usually needed to set up.

However, if we need the individual routines to run under different protocols, we'll put it in route mask:

```php
// Uses the same protocol, which the page was loaded
$route = new Route('//%host%/<presenter>/<action>','Homepage:default');

// Will generate an HTTP address
$route = new Route('http://%host%/<presenter>/<action>','Homepage:default');

// Will generate an HTTPS address
$route = new Route('https://%host%/<presenter>/<action>','Admin:default');
```

.[caution]
You must activate HTTPS for your hosting.


Routing Debugger
================

Working with routes may seem a bit magical at first. That's why you'll appreciate the value of Routing Debugger. It's a [Debugger |tracy:] bar panel that gives you a list of all parameters a router got and a list of all defined routes. It also shows on which presenter and action you are currently on.

[* routing-debugger.png *]

Routing debugger is enabled by default if the application runs in a debug mode. You can, however, disable it in a configuration file:

```neon
routing:
	debugger: false # on by default
```


Route Caching
=============

If the router does not have any dependencies, such as a database, and its factory does not accept any arguments, we can cache its built-in form (serialize it) directly into the DI container and thus accelerate the application a bit.

```neon
routing:
	cache: true
```


Custom Router
=============

If these offered routes do not fit your needs, you may create your own router and add it to your *router collection*. Router is nothing more than an implementation of [Router |api:Nette\Routing\Router] with its two methods:

```php
use Nette\Http\IRequest as HttpRequest;
use Nette\Http\UrlScript;

class MyRouter implements Nette\Routing\Router
{
	public function match(HttpRequest $httpRequest): ?array
	{
		// ...
	}

	public function constructUrl(array $params, UrlScript $refUrl): ?string
	{
		// ...
	}
}
```

Method `match` does process an [HttpRequest  |api:Nette\Http\Request] (which offers more than just a [Url |api:Nette\Http\Url]) into an array that contains presenter name and it's parameters. If the HTTP request could not be processed, it should return `null`.

Method `constructUrl` generates an absolute URL from an array of parameters, possibly utilizing information from `$refUrl` argument.

Possibilities of custom routers are unlimited, for example, it's possible to implement a router based on database records.

{{composer: nette/application}}
