Файловая система
****************

.[perex]
[api:Nette\Utils\FileSystem] это статический класс, содержащий полезные функции для работы с файловой системой. Одно из преимуществ перед собственными функциями PHP заключается в том, что они бросают исключения в случае ошибок.


Установка:

```shell
composer require nette/utils
```

В следующих примерах предполагается, что определен следующий псевдоним класса:

```php
use Nette\Utils\FileSystem;
```


Манипуляция .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копирует файл или целый каталог. По умолчанию перезаписывает существующие файлы и каталоги. Если `$overwrite` установлен в `false`, а `$target` уже существует, выбрасывает исключение `Nette\InvalidStateException`. Выбрасывает исключение `Nette\IOException` при возникновении ошибки.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Создает каталог, если он не существует, включая родительские каталоги. Выбрасывает исключение `Nette\IOException` при возникновении ошибки.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Удаляет файл или весь каталог, если он существует. Если каталог не пуст, то сначала удаляется его содержимое. При возникновении ошибки выбрасывает исключение `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Устанавливает разрешения для файлов на `$fileMode` или разрешения для каталогов на `$dirMode`. Рекурсивно обходит и устанавливает разрешения на все содержимое каталога.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Открывает файл и возвращает ресурс. Параметр `$mode` работает так же, как и родная функция `fopen()`:https://www.php.net/manual/en/function.fopen.php. Если возникает ошибка, он вызывает исключение `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Читает содержимое файла `$file`. При возникновении ошибки выбрасывает исключение `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Читает содержимое файла построчно. В отличие от родной функции `file()`, она не читает весь файл в память, а читает его непрерывно, что позволяет читать файлы, размер которых превышает объем доступной памяти. Параметр `$stripNewLines` указывает, следует ли удалять символы перевода строки `\r` и `\n`.
В случае ошибки она вызывает исключение `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Переименовывает или перемещает файл или каталог, указанный `$origin`, на `$target`. По умолчанию перезаписывает существующие файлы и каталоги. Если `$overwrite` установлен в `false` и `$target` уже существует, выбрасывается исключение `Nette\InvalidStateException`. Выбрасывает исключение `Nette\IOException` при возникновении ошибки.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записывает `$content` на `$file`. При возникновении ошибки выбрасывает исключение `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Пути .[#toc-paths]
==================


isAbsolute(string $path): bool .[method]
----------------------------------------

Определяет, является ли `$path` абсолютным.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Объединяет все сегменты пути и нормализует результат.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормализует `..` и `.` и разделители каталогов в пути.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Преобразует косые черты в `/`, используемые в системах Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Преобразует косые черты в символы, характерные для текущей платформы, т.е. `\` в Windows и `/` в других системах.

```php
$path = FileSystem::platformSlashes($path);
```
