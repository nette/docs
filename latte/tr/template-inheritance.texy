Şablon Kalıtımı ve Yeniden Kullanılabilirlik
********************************************

.[perex]
Şablon yeniden kullanılabilirliği ve kalıtım mekanizmaları üretkenliğinizi artırmak için burada, çünkü her şablon yalnızca benzersiz içerikler içeriyor ve tekrarlanan öğeler ve yapılar yeniden kullanılıyor. Üç kavramı tanıtıyoruz: [düzen kalı |#layout inheritance] tımı, [yatay yeniden |#horizontal reuse] kullanım ve [birim |#unit inheritance] kalıtımı.

Latte şablon kalıtımı kavramı PHP sınıf kalıtımına benzer. Diğer **çocuk şablonlarının** genişletebileceği ve ana şablonun bazı kısımlarını geçersiz kılabileceği bir **ana şablon** tanımlarsınız. Öğeler ortak bir yapıyı paylaştığında harika çalışır. Kulağa karmaşık mı geliyor? Merak etmeyin, değil.


Düzen Kalıtımı `{layout}` .{toc: Layout Inheritance}
====================================================

Bir örnekle başlayarak düzen şablonu kalıtımına bakalım. Bu, örneğin `layout.latte` olarak adlandıracağımız bir üst şablon ve bir HTML iskelet belgesini tanımlıyor.

```latte
<!doctype html>
<html lang="en">
<head>
	<title>{block title}{/block}</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="content">
		{block content}{/block}
	</div>
	<div id="footer">
		{block footer}&copy; Copyright 2008{/block}
	</div>
</body>
</html>
```

`{block}` etiketleri, alt şablonların doldurabileceği üç blok tanımlar. Blok etiketinin tek yaptığı, şablon motoruna bir alt şablonun aynı isimde kendi bloğunu tanımlayarak şablonun bu bölümlerini geçersiz kılabileceğini söylemektir.

Bir çocuk şablonu şu şekilde görünebilir:

```latte
{layout 'layout.latte'}

{block title}My amazing blog{/block}

{block content}
	<p>Welcome to my awesome homepage.</p>
{/block}
```

Burada anahtar `{layout}` etiketidir. Şablon motoruna bu şablonun başka bir şablonu "genişlettiğini" söyler. Latte bu şablonu işlediğinde, önce üst şablonu bulur - bu durumda `layout.latte`.

Bu noktada, şablon motoru `layout.latte` adresindeki üç blok etiketini fark edecek ve bu blokları alt şablonun içeriğiyle değiştirecektir. Alt şablon *footer* bloğunu tanımlamadığından, bunun yerine üst şablondaki içeriğin kullanıldığını unutmayın. Ana şablondaki bir `{block}` etiketi içindeki içerik her zaman yedek olarak kullanılır.

Çıktı aşağıdaki gibi görünebilir:

```latte
<!doctype html>
<html lang="en">
<head>
	<title>My amazing blog</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="content">
		<p>Welcome to my awesome homepage.</p>
	</div>
	<div id="footer">
		&copy; Copyright 2008
	</div>
</body>
</html>
```

Bir alt şablonda, bloklar yalnızca üst seviyede veya başka bir bloğun içinde yer alabilir, örn:

```latte
{block content}
	<h1>{block title}Welcome to my awesome homepage{/block}</h1>
{/block}
```

Ayrıca, çevreleyen `{if}` koşulunun doğru veya yanlış olarak değerlendirilip değerlendirilmediğine bakılmaksızın her zaman bir blok oluşturulacaktır. Düşündüğünüzün aksine, bu şablon bir blok tanımlamaktadır.

```latte
{if false}
	{block head}
		<meta name="robots" content="noindex, follow">
	{/block}
{/if}
```

Blok içindeki çıktının koşullu olarak görüntülenmesini istiyorsanız, bunun yerine aşağıdakileri kullanın:

```latte
{block head}
	{if $condition}
		<meta name="robots" content="noindex, follow">
	{/if}
{/block}
```

Bir alt şablondaki blokların dışındaki veriler, düzen şablonu oluşturulmadan önce yürütülür, böylece `{var $foo = bar}` gibi değişkenleri tanımlamak ve verileri tüm kalıtım zincirine yaymak için kullanabilirsiniz:

```latte
{layout 'layout.latte'}
{var $robots = noindex}

...
```


Çok Düzeyli Kalıtım .[#toc-multilevel-inheritance]
--------------------------------------------------
Gerektiği kadar çok sayıda kalıtım düzeyi kullanabilirsiniz. Düzen kalıtımını kullanmanın yaygın bir yolu aşağıdaki üç seviyeli yaklaşımdır:

1) Sitenizin ana görünümünü ve hissini içeren bir `layout.latte` şablonu oluşturun.
2) Sitenizin her bölümü için bir `layout-SECTIONNAME.latte` şablonu oluşturun. Örneğin, `layout-news.latte`, `layout-blog.latte` vb. Bu şablonların tümü `layout.latte` adresini genişletir ve bölüme özgü stilleri/tasarımı içerir.
3) Haber makalesi veya blog girişi gibi her sayfa türü için ayrı şablonlar oluşturun. Bu şablonlar uygun bölüm şablonunu genişletir.


Dinamik Yerleşim Kalıtımı .[#toc-dynamic-layout-inheritance]
------------------------------------------------------------
Üst şablonun adı olarak bir değişken veya herhangi bir PHP ifadesi kullanabilirsiniz, böylece kalıtım dinamik olarak davranabilir:

```latte
{layout $standalone ? 'minimum.latte' : 'layout.latte'}
```

Düzen şablonunu [otomatik |develop#automatic-layout-lookup] olarak seçmek için Latte API'sini de kullanabilirsiniz.


İpuçları .[#toc-tips]
---------------------
Düzen kalıtımı ile çalışmak için bazı ipuçları:

- Bir şablonda `{layout}` kullanıyorsanız, bu şablondaki ilk şablon etiketi olmalıdır.

- `{layout}` etiketinin `{extends}` takma adı vardır.

- Genişletilmiş şablonun dosya adı şablon [yükleyiciye |extending-latte#Loaders] bağlıdır.

- İstediğiniz kadar bloğa sahip olabilirsiniz. Unutmayın, alt şablonlar tüm üst blokları tanımlamak zorunda değildir, bu nedenle bir dizi blokta makul varsayılanları doldurabilir ve daha sonra yalnızca ihtiyacınız olanları tanımlayabilirsiniz.


Bloklar `{block}` .{toc: Blocks}
================================

.[note]
Ayrıca bakınız anonim [`{block}` |tags#block]

Bir blok, bir şablonun belirli bir bölümünün nasıl işleneceğini değiştirmenin bir yolunu sağlar, ancak etrafındaki mantığa hiçbir şekilde müdahale etmez. Bir bloğun nasıl çalıştığını ve daha da önemlisi nasıl çalışmadığını göstermek için aşağıdaki örneği ele alalım:

```latte
{* parent.Latte *}
{foreach $posts as $post}
{block post}
	<h1>{$post->title}</h1>
	<p>{$post->body}</p>
{/block}
{/foreach}
```

Bu şablonu işlerseniz, sonuç blok etiketleri olsun ya da olmasın tamamen aynı olacaktır. Blokların dış kapsamlardaki değişkenlere erişimi vardır. Bu sadece bir alt şablon tarafından geçersiz kılınabilir hale getirmenin bir yoludur:

```latte
{* child.Latte *}
{layout 'parent.Latte'}

{block post}
	<article>
		<header>{$post->title}</header>
		<section>{$post->text}</section>
	</article>
{/block}
```

Şimdi, alt şablon işlenirken, döngü `parent.Latte` temel şablonunda tanımlanan blok yerine `child.Latte` alt şablonunda tanımlanan bloğu kullanacaktır; bu durumda çalıştırılan şablon aşağıdakine eşdeğer olacaktır:

```latte
{foreach $posts as $post}
	<article>
		<header>{$post->title}</header>
		<section>{$post->text}</section>
	</article>
{/foreach}
```

Ancak, adlandırılmış bir blok içinde yeni bir değişken oluşturursak veya mevcut bir değişkenin değerini değiştirirsek, değişiklik yalnızca blok içinde görünür olacaktır:

```latte
{var $foo = 'foo'}
{block post}
	{do $foo = 'new value'}
	{var $bar = 'bar'}
{/block}

foo: {$foo}                  // prints: foo
bar: {$bar ?? 'not defined'} // prints: not defined
```

Blok içeriği [filtreler |syntax#filters] tarafından değiştirilebilir. Aşağıdaki örnek, tüm HTML'yi kaldırır ve başlık atar:

```latte
<title>{block title|stripHtml|capitalize}...{/block}</title>
```

Etiket [n:attribute |syntax#n:attributes] şeklinde de yazılabilir:

```latte
<article n:block=post>
	...
</article>
```


Yerel Bloklar .[#toc-local-blocks]
----------------------------------

Her blok aynı isimli üst bloğun içeriğini geçersiz kılar. Yerel bloklar hariç. Bunlar sınıftaki özel yöntemler gibi bir şeydir. Blok adlarının çakışması nedeniyle ikinci şablon tarafından üzerlerine yazılacağından endişe etmeden bir şablon oluşturabilirsiniz.

```latte
{block local helper}
	...
{/block}
```


Baskı Blokları `{include}` .{toc: Printing Blocks}
--------------------------------------------------

.[note]
Ayrıca bakınız [`{include file}` |tags#include]

Bir bloğu belirli bir yere yazdırmak için `{include blockname}` etiketini kullanın:

```latte
<title>{block title}{/block}</title>

<h1>{include title}</h1>
```

Bloğu başka bir şablondan da görüntüleyebilirsiniz:

```latte
{include footer from 'main.latte'}
```

Yazdırılan blok, bloğun dahil edildiği aynı dosyada tanımlanmış olması dışında, etkin bağlamın değişkenlerine erişemez. Ancak global değişkenlere erişimleri vardır.

Değişkenleri bu şekilde aktarabilirsiniz:

```latte
{* Latte 2.9'dan beri *}
{include footer, foo: bar, id: 123}

{* Latte 2.9'dan önce *}
{include footer, foo => bar, id => 123}
```

PHP'de blok adı olarak bir değişken veya herhangi bir ifade kullanabilirsiniz. Bu durumda, değişkenden önce `block` anahtar sözcüğünü ekleyin, böylece derleme zamanında bunun bir blok olduğu ve adı değişkende de olabilecek [şablon |tags#include] eklemediği bilinir:

```latte
{var $name = footer}
{include block $name}
```

Blok kendi içinde de yazdırılabilir, bu da örneğin bir ağaç yapısı oluştururken kullanışlıdır:

```latte
{define menu, $items}
<ul>
	{foreach $items as $item}
		<li>
		{if is_array($item)}
			{include menu, $item}
		{else}
			{$item}
		{/if}
		</li>
	{/foreach}
</ul>
{/define}
```

`{include menu, ...}` yerine `{include this, ...}` de yazabiliriz, burada `this` geçerli blok anlamına gelir.

Yazdırılan içerik [filtrelerle |syntax#filters] değiştirilebilir. Aşağıdaki örnek tüm HTML'yi kaldırır ve başlığını büyük harfle yazar:

```latte
<title>{include heading|stripHtml|capitalize}</title>
```


Ebeveyn Bloğu .[#toc-parent-block]
----------------------------------

Bloğun içeriğini üst şablondan yazdırmanız gerekiyorsa, `{include parent}` deyimi işinizi görecektir. Bu, bir üst bloğu tamamen geçersiz kılmak yerine içeriğine ekleme yapmak istediğinizde kullanışlıdır.

```latte
{block footer}
	{include parent}
	<a href="https://github.com/nette">GitHub</a>
	<a href="https://twitter.com/nettefw">Twitter</a>
{/block}
```


Tanımlar `{define}` .{toc: Definitions}
---------------------------------------

Bloklara ek olarak, Latte'de "tanımlar" da vardır. Bunlar normal programlama dillerindeki fonksiyonlarla karşılaştırılabilir. Kendinizi tekrar etmemek için şablon parçalarını yeniden kullanmak için kullanışlıdırlar.

Latte işleri kolayca yapmaya çalışır, bu nedenle temel olarak tanımlar bloklarla aynıdır ve **bloklar hakkında söylenen her şey tanımlar için de geçerlidir**. Bloklardan sadece üç şekilde farklıdır:

1) argümanları kabul edebilirler
2) [filtreleri olamaz|syntax#filters]
3) `{define}` etiketleri içine alınmışlardır ve bu etiketlerin içindeki içerik siz onları dahil edene kadar çıktıya gönderilmez. Bu sayede onları her yerde oluşturabilirsiniz:

```latte
{block foo}<p>Hello</p>{/block}
{* prints: <p>Hello</p> *}

{define bar}<p>World</p>{/define}
{* prints nothing *}

{include bar}
{* prints: <p>World</p> *}
```

HTML formlarının tanımlar aracılığıyla nasıl işleneceğini tanımlayan genel bir yardımcı şablona sahip olduğunuzu düşünün:

```latte
{* forms.latte *}
{define input, $name, $value, $type = 'text'}
	<input type={$type} name={$name} value={$value}>
{/define}

{define textarea, $name, $value}
	<textarea name={$name}>{$value}</textarea>
{/define}
```

Bir tanımın argümanları, varsayılan değer belirtilmediği sürece, varsayılan değer `null` ile her zaman isteğe bağlıdır (burada `text`, Latte 2.9.1'den beri mümkün olan `$type` için varsayılan değerdir). Latte 2.7'den itibaren parametre türleri de bildirilebilir: `{define input, string $name, ...}`.

Tanımların aktif bağlamın değişkenlerine erişimi yoktur, ancak global değişkenlere erişimleri vardır.

[Blok ile aynı şekilde |#Printing Blocks] dahil edilirler:

```latte
<p>{include input, 'password', null, 'password'}</p>
<p>{include textarea, 'comment'}</p>
```


Dinamik Blok Adları .[#toc-dynamic-block-names]
-----------------------------------------------

Latte blokların tanımlanmasında büyük esneklik sağlar çünkü blok adı herhangi bir PHP ifadesi olabilir. Bu örnekte `hi-Peter`, `hi-John` ve `hi-Mary` adında üç blok tanımlanmıştır:

```latte
{* parent.latte *}
{foreach [Peter, John, Mary] as $name}
	{block "hi-$name"}Hi, I am {$name}.{/block}
{/foreach}
```

Örneğin, bir alt şablonda yalnızca bir bloğu yeniden tanımlayabiliriz:

```latte
{* child.latte *}
{block hi-John}Hello. I am {$name}.{/block}
```

Böylece çıktı şu şekilde görünecektir:

```latte
Hi, I am Peter.
Hello. I am John.
Hi, I am Mary.
```


Blok Varlığını Kontrol Etme `{ifset}` .{toc: Checking Block Existence}
----------------------------------------------------------------------

.[note]
Ayrıca bakınız [`{ifset $var}` |tags#ifset-elseifset]

Geçerli bağlamda bir bloğun (veya daha fazla bloğun) var olup olmadığını kontrol etmek için `{ifset blockname}` testini kullanın:

```latte
{ifset footer}
	...
{/ifset}

{ifset footer, header, main}
	...
{/ifset}
```

PHP'de blok adı olarak bir değişken veya herhangi bir ifade kullanabilirsiniz. Bu durumda, kontrol edilenin değişken olmadığını açıkça belirtmek için [değişkenden |tags#ifset-elseifset] önce `block` anahtar sözcüğünü ekleyin:

```latte
{ifset block $name}
	...
{/ifset}
```


İpuçları .[#toc-tips]
---------------------
İşte bloklarla çalışmak için bazı ipuçları:

- Son üst düzey bloğun kapanış etiketine sahip olması gerekmez (blok belgenin sonuyla biter). Bu, bir ana blok olan alt şablonların yazılmasını kolaylaştırır.

- Daha fazla okunabilirlik için, isteğe bağlı olarak `{/block}` etiketinize bir ad verebilirsiniz, örneğin `{/block footer}`. Ancak, ad blok adıyla eşleşmelidir. Daha büyük şablonlarda bu teknik, hangi blok etiketlerinin kapatıldığını görmenize yardımcı olur.

- Aynı şablonda aynı ada sahip birden fazla blok etiketini doğrudan tanımlayamazsınız. Ancak [dinamik blok adları |#dynamic block names] kullanılarak bu sağlanabilir.

- gibi blokları tanımlamak için [n:attributes |syntax#n:attributes] kullanabilirsiniz `<h1 n:block=title>Welcome to my awesome homepage</h1>`

- Bloklar, yalnızca [filtreleri |syntax#filters] çıktıya uygulamak için isimsiz olarak da kullanılabilir: `{block|strip} hello {/block}`


Yatay Yeniden Kullanım `{import}` .{toc: Horizontal Reuse}
==========================================================

Yatay yeniden kullanım, Latte'deki üçüncü bir yeniden kullanılabilirlik ve kalıtım mekanizmasıdır. Diğer şablonlardan bloklar yüklemenizi sağlar. Yardımcı fonksiyonlar veya bir özellik içeren bir PHP dosyası oluşturmaya benzer.

Düzen şablonu kalıtımı Latte'nin en güçlü özelliklerinden biri olmasına rağmen, tek kalıtımla sınırlıdır; bir şablon yalnızca bir başka şablonu genişletebilir. Bu sınırlama, şablon kalıtımının anlaşılmasını ve hata ayıklamasını kolaylaştırır:

```latte
{layout 'layout.latte'}

{block title}...{/block}
{block content}...{/block}
```

Yatay yeniden kullanım, çoklu kalıtım ile aynı hedefe ulaşmanın bir yoludur, ancak ilişkili karmaşıklık olmadan:

```latte
{layout 'layout.latte'}

{import 'blocks.latte'}

{block title}...{/block}
{block content}...{/block}
```

`{import}` deyimi Latte'ye `blocks.latte` adresinde tanımlanan tüm blokları ve [tanımları |#definitions] geçerli şablona aktarmasını söyler.

```latte
{* blocks.latte *}

{block sidebar}...{/block}
```

Bu örnekte, `{import}` deyimi `sidebar` bloğunu ana şablona aktarır.

İçe aktarılan şablon başka bir şablonu [genişletmemeli |#Layout Inheritance] ve gövdesi boş olmalıdır. Ancak, içe aktarılan şablon diğer şablonları içe aktarabilir.

`{import}` etiketi, `{layout}` adresinden sonraki ilk şablon etiketi olmalıdır. Şablon adı herhangi bir PHP ifadesi olabilir:

```latte
{import $ajax ? 'ajax.latte' : 'not-ajax.latte'}
```

Herhangi bir şablonda istediğiniz kadar `{import}` ifadesi kullanabilirsiniz. İki içe aktarılan şablon aynı bloğu tanımlarsa, ilki kazanır. Ancak, en yüksek öncelik, içe aktarılan herhangi bir bloğun üzerine yazabilen ana şablona verilir.

Geçersiz kılınan tüm bloklar, [üst |#parent block] blok olarak eklenerek kademeli olarak dahil edilebilir:

```latte
{layout 'base.latte'}

{import 'blocks.latte'}

{block sidebar}
	{include parent}
{/block}

{block title}...{/block}
{block content}...{/block}
```

Bu örnekte `{include parent}`, `blocks.latte` şablonundan `sidebar` bloğunu doğru şekilde çağıracaktır.


Birim Kalıtımı `{embed}` .{toc: Unit Inheritance}{data-version:2.9}
===================================================================

Birim kalıtımı, düzen kalıtımı fikrini içerik parçaları düzeyine taşır. Düzen kalıtımı, alt şablonlar tarafından hayata geçirilen "belge iskeletleri" ile çalışırken, birim kalıtımı daha küçük içerik birimleri için iskeletler oluşturmanıza ve bunları istediğiniz yerde yeniden kullanmanıza olanak tanır.

Birim kalıtımında `{embed}` etiketi anahtardır. `{include}` ve `{layout}` etiketlerinin davranışlarını birleştirir. `{include}` etiketinde olduğu gibi, başka bir şablonun veya bloğun içeriğini dahil etmenize ve isteğe bağlı olarak değişkenleri aktarmanıza olanak tanır. Ayrıca, `{layout}` 'un yaptığı gibi, dahil edilen şablonun içinde tanımlanan herhangi bir bloğu geçersiz kılmanıza da olanak tanır.

Örneğin biz katlanabilir akordeon elemanını kullanacağız. `collapsible.latte` şablonundaki eleman iskeletine bir göz atalım:

```latte
<section class="collapsible {$modifierClass}">
	<h4 class="collapsible__title">
		{block title}{/block}
	</h4>

	<div class="collapsible__content">
		{block content}{/block}
	</div>
</section>
```

`{block}` etiketleri, alt şablonların doldurabileceği iki blok tanımlar. Evet, düzen kalıtım şablonundaki ana şablonda olduğu gibi. Ayrıca `$modifierClass` değişkenini de görüyorsunuz.

Elemanımızı şablon içinde kullanalım. İşte burada `{embed}` devreye giriyor. Her şeyi yapmamıza izin veren süper güçlü bir kit parçasıdır: öğenin şablon içeriğini dahil edin, ona değişkenler ekleyin ve ona özel HTML içeren bloklar ekleyin:

```latte
{embed 'collapsible.latte', modifierClass: my-style}
	{block title}
		Hello World
	{/block}

	{block content}
		<p>Lorem ipsum dolor sit amet, consectetuer adipiscing
		elit. Nunc dapibus tortor vel mi dapibus sollicitudin.</p>
	{/block}
{/embed}
```

Çıktı aşağıdaki gibi görünebilir:

```latte
<section class="collapsible my-style">
	<h4 class="collapsible__title">
		Hello World
	</h4>

	<div class="collapsible__content">
		<p>Lorem ipsum dolor sit amet, consectetuer adipiscing
		elit. Nunc dapibus tortor vel mi dapibus sollicitudin.</p>
	</div>
</section>
```

Gömme etiketlerinin içindeki bloklar diğer bloklardan bağımsız ayrı bir katman oluşturur. Bu nedenle, gömme dışındaki blokla aynı ada sahip olabilirler ve hiçbir şekilde etkilenmezler. `{embed}` etiketleri içindeki [include |#Printing Blocks] etiketini kullanarak burada oluşturulan blokları, gömülü şablondan ( [yerel |#Local Blocks] olmayan) blokları ve ayrıca ana şablondan [*yerel* |#Local Blocks] olan blokları ekleyebilirsiniz. Blokları başka dosyalardan da [içe aktarabilirsiniz |#Horizontal Reuse]:

```latte
{block outer}…{/block}
{block local hello}…{/block}

{embed 'collapsible.latte', modifierClass: my-style}
	{import 'blocks.latte'}

	{block inner}…{/block}

	{block title}
		{include inner} {* çalışır, blok gömme içinde tanımlanır *}
		{include hello} {* çalışır, blok bu şablonda yereldir *}
		{include content} {* çalışır, blok gömülü şablonda tanımlanmıştır *}
		{include aBlockDefinedInImportedTemplate} {* çalışır *}
		{include outer} {* çalışmıyor! - blok dış katmanda *}
	{/block}
{/embed}
```

Gömülü şablonların etkin bağlamın değişkenlerine erişimi yoktur, ancak küresel değişkenlere erişimleri vardır.

`{embed}` ile sadece şablonları değil diğer blokları da ekleyebilirsiniz, bu nedenle önceki örnek şu şekilde yazılabilir: .{data-version:2.10}

```latte
{define collapsible}
<section class="collapsible {$modifierClass}">
	<h4 class="collapsible__title">
		{block title}{/block}
	</h4>
	...
</section>
{/define}


{embed collapsible, modifierClass: my-style}
	{block title}
		Hello World
	{/block}
	...
{/embed}
```

`{embed}` adresine bir ifade iletirsek ve bunun bir blok mu yoksa dosya adı mı olduğu net değilse, `block` veya `file` anahtar sözcüğünü ekleyin:

```latte
{embed block $name} ... {/embed}
```


Kullanım Örnekleri .[#toc-use-cases]
====================================

Latte'de çeşitli kalıtım ve kod yeniden kullanımı türleri vardır. Daha fazla açıklık için ana kavramları özetleyelim:


`{include template}`
--------------------

**Kullanım Örneği:** `layout.latte` içinde `header.latte` & `footer.latte` kullanılması.

`header.latte`

```latte
<nav>
   <div>Homepage</div>
   <div>About</div>
</nav>
```

`footer.latte`

```latte
<footer>
   <div>Copyright</div>
</footer>
```

`layout.latte`

```latte
{include 'header.latte'}

<main>{block main}{/block}</main>

{include 'footer.latte'}
```


`{layout}`
----------

**Kullanım Örneği**: `layout.latte` 'u `homepage.latte` & `about.latte` içinde genişletme.

`layout.latte`

```latte
{include 'header.latte'}

<main>{block main}{/block}</main>

{include 'footer.latte'}
```

`homepage.latte`

```latte
{layout 'layout.latte'}

{block main}
	<p>Homepage</p>
{/block}
```

`about.latte`

```latte
{layout 'layout.latte'}

{block main}
	<p>About page</p>
{/block}
```


`{import}`
----------

**Kullanım Örneği**: `sidebar.latte` içinde `single.product.latte` & `single.service.latte`.

`sidebar.latte`

```latte
{block sidebar}<aside>This is sidebar</aside>{/block}
```

`single.product.latte`

```latte
{layout 'product.layout.latte'}

{import 'sidebar.latte'}

{block main}<main>Product page</main>{/block}
```

`single.service.latte`

```latte
{layout 'service.layout.latte'}

{import 'sidebar.latte'}

{block main}<main>Service page</main>{/block}
```


`{define}`
----------

**Kullanım Örneği**: Bazı değişkenleri alan ve bazı biçimlendirmeleri çıktı olarak veren bir işlev.

`form.latte`

```latte
{define form-input, $name, $value, $type = 'text'}
	<input type={$type} name={$name} value={$value}>
{/define}
```

`profile.service.latte`

```latte
{import 'form.latte'}

<form action="" method="post">
	<div>{include form-input, username}</div>
	<div>{include form-input, password}</div>
	<div>{include form-input, submit, Submit, submit}</div>
</form>
```


`{embed}`
---------

**Kullanım Örneği**: `pagination.latte` adresini `product.table.latte` & `service.table.latte` adreslerine gömme.

`pagination.latte`

```latte
<div id="pagination">
	<div>{block first}{/block}</div>

	{for $i = $min + 1; $i < $max - 1; $i++}
		<div>{$i}</div>
	{/for}

	<div>{block last}{/block}</div>
</div>
```

`product.table.latte`

```latte
{embed 'pagination.latte', min: 1, max: $products->count}
	{block first}First Product Page{/block}
	{block last}Last Product Page{/block}
{/embed}
```

`service.table.latte`

```latte
{embed 'pagination.latte', min: 1, max: $services->count}
	{block first}First Service Page{/block}
	{block last}Last Service Page{/block}
{/embed}
```
