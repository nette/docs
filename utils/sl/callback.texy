Delo s povratnimi klici
***********************

.[perex]
[api:Nette\Utils\Callback] je statični razred s funkcijami za delo s [PHP povratnimi klici |https://www.php.net/manual/en/language.types.callable.php].


Namestitev:

```shell
composer require nette/utils
```

Vsi primeri predpostavljajo ustvarjen alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Preveri, ali je spremenljivka `$callable` veljaven povratni klic. Sicer sproži `Nette\InvalidArgumentException`. Če je `$syntax` true, funkcija samo preveri, ali ima `$callable` strukturo povratnega klica, vendar ne preverja, ali dani razred ali metoda dejansko obstaja. Vrne `$callable`.

```php
Callback::check('trim'); // ne sproži izjeme
Callback::check(['NonExistentClass', 'method']); // sproži Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // ne sproži izjeme
Callback::check(function () {}); // ne sproži izjeme
Callback::check(null); // sproži Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Pretvori PHP povratni klic v besedilno obliko. Razred ali metoda ni nujno, da obstajata.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Vrne refleksijo za metodo ali funkcijo v PHP povratnem klicu.

```php
$ref = Callback::toReflection('trim');
// $ref je ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref je ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Ugotavlja, ali je PHP povratni klic funkcija ali statična metoda.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Povratno razširi Closure, ustvarjeno s pomočjo `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
