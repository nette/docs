Redakteure & Tools
******************

.[perex]
Sie können ein guter Programmierer sein, aber nur mit guten Werkzeugen werden Sie ein Meister. In diesem Kapitel finden Sie Tipps zu wichtigen Tools, Editoren und Plugins.


IDE-Editor .[#toc-ide-editor]
=============================

Wir empfehlen dringend, für die Entwicklung eine voll funktionsfähige IDE wie PhpStorm, NetBeans oder VS Code zu verwenden, und nicht nur einen Texteditor mit PHP-Unterstützung. Der Unterschied ist wirklich entscheidend. Es gibt keinen Grund, sich mit einem klassischen Editor mit Syntaxhervorhebung zufrieden zu geben, da dieser nicht an die Fähigkeiten einer IDE mit präzisen Codevorschlägen, die Code refaktorisieren kann, und mehr heranreicht. Einige IDEs sind kostenpflichtig, andere sind kostenlos.

**NetBeans IDE** hat integrierte Unterstützung für Nette, Latte und NEON.

**PhpStorm**: Installieren Sie diese Plugins unter `Settings > Plugins > Marketplace`:
- Nette-Framework-Hilfsmittel
- Latte
- NEON-Unterstützung
- Nette-Tester

**VS Code**: finden Sie das "Nette Latte + Neon" Plugin auf dem Marktplatz.

Verbinden Sie Tracy auch mit dem Editor. Wenn die Fehlerseite angezeigt wird, können Sie auf die Dateinamen klicken und sie werden im Editor mit dem Cursor auf der entsprechenden Zeile geöffnet. Erfahren Sie, [wie Sie das System konfigurieren |tracy:open-files-in-ide] können.


PHPStan .[#toc-phpstan]
=======================

PHPStan ist ein Werkzeug, das logische Fehler in Ihrem Code aufspürt, bevor Sie ihn ausführen.

Installieren Sie es über Composer:

```bash
composer require --dev phpstan/phpstan-nette
```

Erstellen Sie eine Konfigurationsdatei `phpstan.neon` im Projekt:

```neon
includes:
	- vendor/phpstan/phpstan-nette/extension.neon

parameters:
	scanDirectories:
		- app

	level: 5
```

Und lassen Sie dann die Klassen im Ordner `app/` analysieren:

```bash
vendor/bin/phpstan analyse app
```

Eine ausführliche Dokumentation finden Sie direkt bei [PHPStan |https://phpstan.org].


Code-Prüfer .[#toc-code-checker]
================================

[Code Checker |code-checker:] überprüft und repariert möglicherweise einige der formalen Fehler in Ihrem Quellcode.

- entfernt [BOM |nette:glossary#bom]
- prüft die Gültigkeit von [Latte-Vorlagen |latte:]
- prüft die Gültigkeit der Dateien `.neon`, `.php` und `.json`
- prüft auf [Steuerzeichen |nette:glossary#control characters]
- prüft, ob die Datei in UTF-8 kodiert ist
- prüft falsch geschriebene `/* @annotations */` (zweites Sternchen fehlt)
- entfernt PHP-Endungstags `?>` in PHP-Dateien
- entfernt nachstehende Leerzeichen und unnötige Leerzeilen am Ende einer Datei
- normalisiert die Zeilenenden auf die Systemvorgabe (mit dem Parameter `-l` )


Composer .[#toc-composer]
=========================

[Composer] ist ein Werkzeug zur Verwaltung von Abhängigkeiten in PHP. Es erlaubt uns, Bibliotheksabhängigkeiten zu deklarieren und es wird sie für uns in unserem Projekt installieren.


Anforderungs-Checker .[#toc-requirements-checker]
=================================================

Dabei handelt es sich um ein Tool, das die Betriebsumgebung des Servers testet und Auskunft darüber gibt, ob (und in welchem Umfang) das Framework verwendet werden kann. Derzeit kann Nette auf jedem Server verwendet werden, der über die erforderliche Mindestversion von PHP verfügt.

{{sitename: Bewährte Praktiken}}
