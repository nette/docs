Элементы управления форм
************************

.[perex]
Обзор встроенных элементов управления формой.


addText(string|int $name, $label=null): TextInput .[method]
===========================================================

Добавляет однострочное текстовое поле (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Если пользователь не заполнил поле, возвращается пустая строка `''`, или используйте `setNullable()` для возврата `null`.

```php
$form->addText('name', 'Имя:')
	->setRequired()
	->setNullable();
```

Этот метод автоматически проверяет UTF-8, обрезает левые и правые пробелы и удаляет переносы строк, которые могут быть отправлены злоумышленником.

Максимальная длина может быть ограничена с помощью `setMaxLength()`. Функция [addFilter()|validation#Modifying-Input-Values] позволяет изменить введенное пользователем значение.

Используйте `setHtmlType()` для изменения [типа|https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types] элемента ввода на `search`, `tel`, `url`, `range`, `date`, `datetime-local`, `month`, `time`, `week`, `color`. Вместо типов `number` и `email` мы рекомендуем использовать [#addInteger] и [#addEmail], которые обеспечивают валидацию на стороне сервера.

```php
$form->addText('color', 'Выберите цвет:')
	->setHtmlType('color')
	->addRule($form::Pattern, 'недопустимое значение', '[0-9a-f]{6}');
```

Для элемента может быть установлено так называемое «пустое значение», которое является чем-то вроде значения по умолчанию, но если пользователь не перезаписывает его, возвращает пустую строку или `null`.

```php
$form->addText('phone', 'Телефон:')
	->setHtmlType('tel')
	->setEmptyValue('+420');
```


addTextArea(string|int $name, $label=null): TextArea .[method]
==============================================================

Добавляет многострочное текстовое поле (класс [TextArea |api:Nette\Forms\Controls\TextArea]). Если пользователь не заполнил поле, возвращается пустая строка `''`, или используйте `setNullable()` для возврата `null`.

```php
$form->addTextArea('note', 'Примечание:')
	->addRule($form::MaxLength, 'Ваша заметка слишком длинная', 10000);
```

Автоматически проверяет UTF-8 и нормализует переносы строк до `\n`. В отличие от однострочного поля ввода, в нем не обрезаются пробельные символы.

Максимальная длина может быть ограничена с помощью `setMaxLength()`. Функция [addFilter()|validation#Modifying-Input-Values] позволяет изменить введенное пользователем значение. Вы можете установить так называемое «пустое значение», используя `setEmptyValue()`.


addInteger(string|int $name, $label=null): TextInput .[method]
==============================================================

Добавляет поле ввода для целого числа (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Возвращает либо целое число, либо `null`, если пользователь ничего не ввел.

```php
$form->addInteger('level', 'Уровень:')
	->setDefaultValue(0)
	->addRule($form::Range, 'Уровень должен быть между %d и %d.', [0, 100]);
```


addEmail(string|int $name, $label=null): TextInput .[method]
============================================================

Добавляет поле адреса электронной почты с проверкой достоверности (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Если пользователь не заполнил поле, возвращается пустая строка `''`, или используйте `setNullable()` для возврата `null`.

```php
$form->addEmail('email', 'Имейл:');
```

Проверяет, что значение является действительным адресом электронной почты. Он не проверяет, существует ли домен на самом деле, проверяется только синтаксис. Автоматически проверяет UTF-8, обрезает левые и правые пробелы.

Максимальная длина может быть ограничена с помощью `setMaxLength()`. Функция [addFilter()|validation#Modifying-Input-Values] позволяет изменить введенное пользователем значение. Вы можете установить так называемое «пустое значение», используя `setEmptyValue()`.


addPassword(string|int $name, $label=null): TextInput .[method]
===============================================================

Добавляет поле пароля (класс [TextInput |api:Nette\Forms\Controls\TextInput]).

```php
$form->addPassword('password', 'Пароль:')
	->setRequired()
	->addRule($form::MinLength, 'Пароль должен быть длиной не менее %d символов', 8)
	->addRule($form::Pattern, 'Пароль должен содержать цифры', '.*[0-9].*');
```

При повторной отправке формы ввод будет пустым. Он автоматически проверяет UTF-8, обрезает левые и правые пробелы и удаляет переносы строк, которые могут быть отправлены злоумышленником.


addCheckbox(string|int $name, $caption=null): Checkbox .[method]
================================================================

Добавляет флажок (класс [Checkbox |api:Nette\Forms\Controls\Checkbox]). Поле возвращает либо `true`, либо `false`, в зависимости от того, проверено ли оно.

```php
$form->addCheckbox('agree', 'Я согласен с условиями')
	->setRequired('Вы должны согласиться с нашими условиями');
```


addCheckboxList(string|int $name, $label=null, array $items=null): CheckboxList .[method]
=========================================================================================

Добавляет список флажков для выбора нескольких элементов (класс [CheckboxList |api:Nette\Forms\Controls\CheckboxList]). Возвращает массив ключей выбранных элементов. Метод `getSelectedItems()` возвращает значения вместо ключей.

```php
$form->addCheckboxList('colors', 'Цвета:', [
	'r' => 'red',
	'g' => 'green',
	'b' => 'blue',
]);
```

Мы передаем массив элементов в качестве третьего параметра или методом `setItems()`.

Вы можете использовать `setDisabled(['r', 'g'])` для отключения отдельных элементов.

Элемент автоматически проверяет, что не было подделки и что выбранные элементы действительно являются одними из предложенных и не были отключены. Метод `getRawValue()` может быть использован для получения отправленных элементов без этой важной проверки.

При установке значений по умолчанию также проверяется, что они являются одним из предлагаемых элементов, в противном случае возникает исключение. Эта проверка может быть отключена с помощью `checkDefaultValue(false)`.


addRadioList(string|int $name, $label=null, array $items=null): RadioList .[method]
===================================================================================

Добавляет радиокнопки (класс [RadioList |api:Nette\Forms\Controls\RadioList]). Возвращает ключ выбранного элемента или `null`, если пользователь ничего не выбрал. Метод `getSelectedItem()` возвращает значение вместо ключа.

```php
$sex = [
	'm' => 'male',
	'f' => 'female',
];
$form->addRadioList('gender', 'Пол:', $sex);
```

Мы передаем массив элементов в качестве третьего параметра или методом `setItems()`.

Вы можете использовать `setDisabled(['m'])` для отключения отдельных элементов.

Элемент автоматически проверяет, что не было подделки и что выбранный элемент действительно является одним из предложенных и не был отключен. Метод `getRawValue()` может быть использован для получения отправленного элемента без этой важной проверки.

При установке значения по умолчанию проверяется, что оно является одним из предлагаемых элементов, в противном случае возникает исключение. Эта проверка может быть отключена с помощью `checkDefaultValue(false)`.


addSelect(string|int $name, $label=null, array $items=null): SelectBox .[method]
================================================================================

Добавляет поле выбора (класс [SelectBox |api:Nette\Forms\Controls\SelectBox]). Возвращает ключ выбранного элемента или `null`, если пользователь ничего не выбрал. Метод `getSelectedItem()` возвращает значение вместо ключа.

```php
$countries = [
	'CZ' => 'Чешская республика',
	'SK' => 'Словакия',
	'GB' => 'Великобритания',
];

$form->addSelect('country', 'Страна:', $countries)
	->setDefaultValue('SK');
```

Мы передаем массив элементов в качестве третьего параметра или методом `setItems()`. Массив элементов также может быть двумерным:

```php
$countries = [
	'Europe' => [
		'CZ' => 'Чешская республика',
		'SK' => 'Словакия',
		'GB' => 'Великобритания',
	],
	'CA' => 'Канада',
	'US' => 'США',
	'?'  => 'другая',
];
```

В блоках выбора первый элемент часто имеет особое значение, он служит призывом к действию. Используйте метод `setPrompt()` для добавления такой записи.

```php
$form->addSelect('country', 'Страна:', $countries)
	->setPrompt('Выберите страну');
```

Вы можете использовать `setDisabled(['CZ', 'SK'])` для отключения отдельных элементов.

Элемент автоматически проверяет, что не было подделки и что выбранный элемент действительно является одним из предложенных и не был отключен. Метод `getRawValue()` может быть использован для получения отправленного элемента без этой важной проверки.

При установке значения по умолчанию проверяется, что оно является одним из предлагаемых элементов, в противном случае возникает исключение. Эта проверка может быть отключена с помощью `checkDefaultValue(false)`.


addMultiSelect(string|int $name, $label=null, array $items=null): MultiSelectBox .[method]
==========================================================================================

Добавляет окно выбора нескольких вариантов (класс [MultiSelectBox |api:Nette\Forms\Controls\MultiSelectBox]). Возвращает массив ключей выбранных элементов. Метод `getSelectedItems()` возвращает значения вместо ключей.

```php
$form->addMultiSelect('countries', 'Страны:', $countries);
```

Мы передаем массив элементов в качестве третьего параметра или методом `setItems()`. Массив элементов также может быть двумерным.

Вы можете использовать `setDisabled(['CZ', 'SK'])` для отключения отдельных элементов.

Элемент автоматически проверяет, что не было подделки и что выбранные элементы действительно являются одними из предложенных и не были отключены. Метод `getRawValue()` может быть использован для получения отправленных элементов без этой важной проверки.

При установке значений по умолчанию также проверяется, что они являются одним из предлагаемых элементов, в противном случае возникает исключение. Эта проверка может быть отключена с помощью `checkDefaultValue(false)`.


addUpload(string|int $name, $label=null): UploadControl .[method]
=================================================================

Добавляет поле загрузки файлов (класс [UploadControl |api:Nette\Forms\Controls\UploadControl]). Возвращает объект [FileUpload |http:request#FileUpload], даже если пользователь не загрузил файл, что можно выяснить с помощью метода `FileUpload::hasFile()`.

```php
$form->addUpload('avatar', 'Аватар:')
	->addRule($form::Image, 'Аватар должен быть в формате JPEG, PNG, GIF или WebP')
	->addRule($form::MaxFileSize, 'Максимальный размер - 1 МБ', 1024 * 1024);
```

Если файл загружен неправильно, форма не была отправлена успешно и отображается ошибка. Т. е. нет необходимости проверять метод `FileUpload::isOk()`.

Не доверяйте оригинальному имени файла, возвращаемому методом `FileUpload::getName()`, клиент может отправить вредоносное имя файла с намерением испортить или взломать ваше приложение.

Правила `MimeType` и `Image` определяют необходимый тип файла или изображения по его сигнатуре. Целостность всего файла не проверяется. Вы можете узнать, не повреждено ли изображение, например, попытавшись [загрузить его|http:request#toImage].


addMultiUpload(string|int $name, $label=null): UploadControl .[method]
======================================================================

Добавляет поле загрузки нескольких файлов (класс [UploadControl |api:Nette\Forms\Controls\UploadControl]). Возвращает массив объектов [FileUpload |http:request#FileUpload]. Метод `FileUpload::hasFile()` вернет `true` для каждого из них.

```php
$form->addMultiUpload('files', 'Файлы:')
	->addRule($form::MaxLength, 'Может быть загружено не более %d файлов', 10);
```

Если один из файлов не загрузится правильно, форма не будет отправлена успешно и отобразится ошибка. Т. е. нет необходимости проверять метод `FileUpload::isOk()`.

Не доверяйте оригинальным именам файлов, возвращаемым методом `FileUpload::getName()`, клиент может отправить вредоносное имя файла с намерением испортить или взломать ваше приложение.

Правила `MimeType` и `Image` определяют необходимый тип файла или изображения по его сигнатуре. Целостность всего файла не проверяется. Вы можете узнать, не повреждено ли изображение, например, попытавшись [загрузить его|http:request#toImage].


addHidden(string|int $name, string $default=null): HiddenField .[method]
========================================================================

Добавляет скрытое поле (класс [HiddenField |api:Nette\Forms\Controls\HiddenField]).

```php
$form->addHidden('userid');
```

Используйте `setNullable()`, чтобы изменить его так, чтобы он возвращал `null` вместо пустой строки. Функция [addFilter()|validation#Modifying-Input-Values] позволяет изменить представленное значение.


addSubmit(string|int $name, $caption=null): SubmitButton .[method]
==================================================================

Добавляет кнопку отправки (класс [SubmitButton |api:Nette\Forms\Controls\SubmitButton]).

```php
$form->addSubmit('submit', 'Зарегистрироваться');
```

В форме можно иметь более одной кнопки отправки:

```php
$form->addSubmit('register', 'Зарегистрироваться');
$form->addSubmit('cancel', 'Отмена');
```

Чтобы узнать, какая из них была нажата, используйте:

```php
if ($form['register']->isSubmittedBy()) {
  // ...
}
```

Если вы не хотите проверять форму при нажатии кнопки отправки (например, кнопки *Отмена* или *Предварительный просмотр*), вы можете отключить её с помощью [setValidationScope()|validation#Disabling-Validation].


addButton(string|int $name, $caption): Button .[method]
=======================================================

Добавляет кнопку (класс [Button |api:Nette\Forms\Controls\Button]) без функции отправки. Это полезно для привязки другой функциональности к id, например, действия JavaScript.

```php
$form->addButton('raise', 'Поднять зарплату')
	->setHtmlAttribute('onclick', 'raiseSalary()');
```


addImageButton(string|int $name, string $src=null, string $alt=null): ImageButton .[method]
===========================================================================================

Добавляет кнопку отправки в виде изображения (класс [ImageButton |api:Nette\Forms\Controls\ImageButton]).

```php
$form->addImageButton('submit', '/path/to/image');
```

При использовании нескольких кнопок отправки можно узнать, какая из них была нажата с помощью `$form['submit']->isSubmittedBy()`.


addContainer(string|int $name): Container .[method]
===================================================

Добавляет подформу (класс [Container|api:Nette\Forms\Container]), или контейнер, с которым можно обращаться так же, как и с формой. Это означает, что вы можете использовать такие методы, как `setDefaults()` или `getValues()`.

```php
$sub1 = $form->addContainer('first');
$sub1->addText('name', 'Ваше имя:');
$sub1->addEmail('email', 'Имейл:');

$sub2 = $form->addContainer('second');
$sub2->addText('name', 'Ваше имя:');
$sub2->addEmail('email', 'Имейл:');
```

Затем отправленные данные возвращаются в виде многомерной структуры:

```php
[
	'first' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
	'second' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
]
```


Обзор настроек .[#toc-overview-of-settings]
===========================================

Для всех элементов мы можем вызывать следующие методы (полный обзор см. в [документации по API|https://api.nette.org/forms/master/Nette/Forms/Controls.html]):

.[table-form-methods language-php]
| `setDefaultValue($value)` | устанавливает значение по умолчанию
| `getValue()` 				| получить текущее значение
| `setOmitted()` 			| [#omitted values]
| `setDisabled()` 			| [#disabling inputs]

Рендеринг:
.[table-form-methods language-php]
| `setCaption()` 			| изменить заголовка элемента
| `setTranslator()` 		| задает [транслятор |best-practices:translations#Form-Translation]
| `setHtmlAttribute()` 		| задает [HTML атрибут |rendering#HTML attributes] элемента
| `setHtmlId()` 			| задает HTML атрибут `id`
| `setHtmlType()` 			| задает HTML атрибут `type`
| `setOption()` 			| задает [рендеринг данных|rendering#Options]

Валидация:
.[table-form-methods language-php]
| `setRequired()` 			| [обязательное поле |validation]
| `addRule()` 				| установить [правило проверки |validation#Rules]
| `addCondition()`, `addConditionOn()` | установить [условие проверки|validation#Conditions]
| `addError()` 				| [передача сообщения об ошибке|validation#Processing-Errors]

Следующие методы могут быть вызваны для элементов `addText()`, `addPassword()`, `addTextArea()`, `addEmail()`, `addInteger()`:

.[table-form-methods language-php]
| `setNullable()`			| устанавливает, возвращает ли getValue() `null` вместо пустой строки
| `setEmptyValue()` 		| устанавливает специальное значение, которое рассматривается как пустая строка
| `setMaxLength()` 			| устанавливает максимальное количество разрешенных символов
| `addFilter()` 			| [изменение входных значений |validation#Modifying-Input-Values]


Опущенные значения .[#toc-omitted-values]
-----------------------------------------

Если вас не интересует значение, введенное пользователем, мы можем использовать `setOmitted()`, чтобы опустить его из результата, предоставляемого методом `$form->getValues()` или передаваемого обработчикам. Это подходит для различных паролей для проверки, антиспамовых полей и т. д.

```php
$form->addPassword('passwordVerify', 'Повторите пароль:')
	->setRequired('Введите пароль ещё раз, чтобы проверить опечатку')
	->addRule($form::Equal, 'Несоответствие пароля', $form['password'])
	->setOmitted();
```


Отключение элементов ввода .[#toc-disabling-inputs]
---------------------------------------------------

Чтобы отключить вход, вы можете вызвать `setDisabled()`. Такое поле не может быть отредактировано пользователем.

```php
$form->addText('username', 'Имя пользователя:')
	->setDisabled();
```

Обратите внимание, что браузер вообще не отправляет отключенные поля на сервер, поэтому вы даже не найдете их в данных, возвращаемых функцией `$form->getValues()`.

Если вы устанавливаете значение по умолчанию для поля, вы должны сделать это только после его отключения:

```php
$form->addText('username', 'Имя пользователя:')
	->setDisabled()
	->setDefaultValue($userName);
```


Пользовательские элементы управления .[#toc-custom-controls]
============================================================

Помимо широкого спектра встроенных элементов управления формой, вы можете добавить свои элементы следующим образом:

```php
$form->addComponent(new DateInput('Дата:'), 'date');
// альтернативный синтаксис: $form['date'] = new DateInput('Дата:');
```

Существует способ определения новых методов формы для добавления пользовательских элементов (например, '$form->addZip()'). Это так называемые методы расширения. Недостатком является то, что подсказки кода в редакторах не будут работать для них.

```php
use Nette\Forms\Container;

// добавляет метод addZip(string $name, string $label = null)
Container::extensionMethod('addZip', function (Container $form, string $name, string $label = null) {
	return $form->addText($name, $label)
		->addRule($form::Pattern, 'Не менее 5 номеров', '[0-9]{5}');
});

// использование
$form->addZip('zip', 'ZIP-код:');
```


Низкоуровневые поля .[#toc-low-level-fields]
============================================

Чтобы добавить элемент в форму, не нужно вызывать '$form->addXyz()'. Вместо этого элементы формы могут быть введены исключительно в шаблоны. Это полезно, если вам, например, нужно создать динамические элементы:

```latte
{foreach $items as $item}
	<p><input type=checkbox name="sel[]" value={$item->id}> {$item->name}</p>
{/foreach}
```

После отправки можно получить значения:

```php
$data = $form->getHttpData($form::DataText, 'sel[]');
$data = $form->getHttpData($form::DataText | $form::DataKeys, 'sel[]');
```

В первом параметре вы указываете тип элемента (`DataFile` для `type=file`, `DataLine` для однострочных вводов типа `text`, `password` или `email` и `DataText` для остальных). Второй параметр соответствует HTML-атрибуту `name`. Если вам нужно сохранить ключи, вы можете объединить первый параметр с `DataKeys`. Это полезно для `select`, `radioList` или `checkboxList`.

Функция `getHttpData()` возвращает обработанные данные. В этом случае это всегда будет массив допустимых строк UTF-8, независимо от того, что атакующий отправил через форму. Это альтернатива работе с `$_POST` или `$_GET` напрямую, если вы хотите получать безопасные данные.
