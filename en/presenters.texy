MVC applications & presenters
*****************************

/--div .[perex]
We will learn, how to create applications in Nette Framework. After this chapter you will know:

- MVC, directory structure and `bootstrap.php` file
- what are presenters and actions
- how to use templates
- what are persistent parameters
\--


Model-View-Controller (MVC)
===========================

Model-View-Controller is software architecture, that was created to satisfy the need to separate in application with graphical interface, utility code (controller) from application logic code (model) and from code for displaying data (view). With this approach we create better understandable application, simplify future development and enable testing each unit of application separately.


Model
-----

Model is data and especially functional base of whole application. It contains application logic. Any user action (login, insertion of goods to basket, change of value in database) represents a model action. Model is managing his internal state and provides solid interface to outside. By calling methods of this interface, we can read or update its state. Model doesn't know anything about view or controller.

.[note]
Concept of *Model* represents whole layer, not only a single class.


View
----

View is an application layer, that is taking care of displaying result of request. It usualy uses templating engine and knows, how should be each component rendered or result acquired from model.


Controller
----------

Controller does handle requests from user, calls relevant application logic (model) and then asks view to display data. Analogically for controllers in Nette Framework there are [presenters |glossary#presenter].



Directory structure
===================

When you look at `sandbox` after downloading of Nette Framework package, you will see recommended directory structure:

/--pre
<b>sandbox/</b>
	<b>app/</b>                  ← directory with application
		<b>models/</b>           ← model layer and it's classes
		<b>presenters/</b>       ← presenter classes
			<b>HomepagePresenter.php</b>  ← Homepage presenter class

		<b>templates/</b>        ← templates directory
			<b>@layout.latte</b> ← template of shared layout
			<b>Homepage/</b>     ← tempaltes for Homepage presenter
				<b>default.latte</b>  ← template for default action

		<b>config.neon</b>       ← application configuration file
		<b>bootstrap.php</b>     ← application boot file

	<b>libs/</b>                 ← directory with libraries (for example 3rd parties)
		<b>Nette/</b>            ← your favourite framework
		...

	<b>log/</b>                  ← contains logs, errors, etc.
	<b>temp/</b>                 ← for temporary files, cache, ...
	<b>www/</b>                  ← public directory, document root of project
		<b>.htaccess</b>         ← rules for mod_rewrite
		<b>index.php</b>         ← triggers the application
		<b>images/</b>           ← another directories, images, styles, ..
\--

Moreover in some directories, there are `.htaccess` and `web.config` files, that denies access from browser (for Apache or IIS). Make sure, that this is working, and you cannot reach `app/` and `libs/` directories from browser.

.[note]
Don't forget to grant write privilege (`chmod 0777`) to directories `log/` and `temp/`.


index.php & bootstrap.php
-------------------------

Browser is sending all requests through one and only file, located in public directory `www/` and that is `index.php`. Inside his body isn't happening almost anything. There are only definitions, describing directory structure of application (`$params['wwwDir']` and `$params['appDir']`) and passing of the control to the application (that is the `app/` directory) to the boot file `bootstrap.php`.

.[note]
Nette Framework is saving all its paths consistently, without the right trailing slash.

Described directory structure is realy just recommended, because you can easily change it however you want to. All you have to do, is rename directories and change paths in `index.php` or `bootstrap.php`.

First, file `bootstrap.php` loads Nette Framework:

/--php
require $params['libsDir'] . '/Nette/loader.php';
\--

Activates [debugger and logger |debugging] in strict mode:

/--php
use Nette\Diagnostics\Debugger;

Debugger::$logDirectory = __DIR__ . '/../log';
Debugger::$strictMode = TRUE;
Debugger::enable();
\--

And creates so called [DI context |configuring] by loading configuration file `config.neon`. Everthing else depends on it.

/--php
$configurator = new Nette\Configurator;
$configurator->container->params += $params;
$configurator->container->params['tempDir'] = __DIR__ . '/../temp';
$container = $configurator->loadConfig(__DIR__ . '/config.neon');
\--

Sets rules for [routing |routing], to enable translate the URL addresses into [a presenter action |#processing-presenter-action]. This rule, among others, says, that default presenter action will be `Homepage:default`.

/--php
$router = $container->router;
$router[] = new Route('index.php', 'Homepage:default', Route::ONE_WAY);
$router[] = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');
\--

Sets application parameters, for example error presenter, that will be in production environment responsible for displaying appropriate messages, when an error occurs:

/--php
$application = $container->application;
$application->errorPresenter = 'Error';
\--

If we wanted to do execute any other tasks, like connecting to database, it's appropriate to add this to the `onStartup` event of the application: (note: it's generally better to let [DI container |configuring] take care of connecting to database).

/--php
$application->onStartup[] = function() {
	... we will connect to database ...
};
\--

And we will run the application:

/--php
$application->run();
\--

That's it.


Modules
-------

When developing complex applications, we can separate directories with presenters and templates to subdirectories. We call them modules. If our application would contain, for example modules `Front` and `Admin`, its structure could look like this:

/--pre
<b>sandbox/</b>
	<b>app/</b>                ← directory with application
		<b>models/</b>         ← model layer and its classes
		<b>AdminModule/</b>    ← Admin module
			<b>presenters/</b> ← its presenters
			<b>templates/</b>  ← its templates

		<b>FrontModule/</b>    ← Front module
			<b>presenters/</b> ← its presenters
			<b>templates/</b>  ← its templates

		<b>config.neon</b>    ← application configuration file
		<b>bootstrap.php</b>  ← application boot file
	...
\--

Modules don't have to be arranged in flat structure, you can even create submodules.




Processing presenter action
===========================

Now listen up closely, please. Every request on our application will reach through files `index.php` and `bootstap.php` into object `$application`. But, that one doesn't understand to http requests, because of that, it will ask the [router | routing], to translate the request into something, that it can understand. Thus to tell him, for what **presenter** is the request meant and what **action** should it execute. For example, router answers, that user want's action `show` of presenter `Product` (it's good habit to write it like `Product:show`) and passes parameter `id = 123`. You can read it like: user want's to show product with id 123.

This is finally understandable to `$application` and it will proceed to fulfill the wishes. It will create an object of class `ProductPresenter`, that represents presenter `Product`. (To be completely accurate, application asks for creation of presenter the `presenterFactory` service). And presenter will ask for execution of action (`show` with parameter `id`).

Presenter is an object, that takes the request, translated by router and devises the answer. Answer can be HTML page, image, XML document, file on hard drive, JSON, redirection or anything that you need. Specifically `ProductPresenter` asks model for data, that it will pass to template for displaying. This is usually done in method `renderShow`, where word `Show` corresponds to the name of action and request parameter `id` will be passed to the method as argument:

/--php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	function renderShow($id)
	{
		// we will get data from model and pass it to template
		$this->template->product = $this->model->getProduct($id);
	}
}
\--

Then the presenter will render the template.


Templates
---------

Presenter will deduce the path to the template from simple logic. It will try, for presenter `Product` and action `show`, if one of these files exists:

/--
- templates/Product/show.latte
- templates/Product.show.latte
\--

Besides the `.latte` extension, you can use the `.phtml` extension too.

Presenter will also try to search for a layout (that is optional):

/--
- templates/Product/@layout.latte
- templates/Product.@layout.latte
- templates/@layout.latte layout shared by multiple presenters
\--

(You can change the way of searching the templates by overriding the [formatTemplateFiles |api:Nette\Application\UI\Presenter::formatTemplateFiles()] or [formatLayoutTemplateFiles |api:Nette\Application\UI\Presenter::formatLayoutTemplateFiles()] methods.)

Presenters and its components passes to the templates few useful variables:

- `$basePath` is an absolute URL path to root dir (for example `/CD-collection`)
- `$baseUrl` is an absolute URL to root dir (for example `http://localhost/CD-collection`)
- `$user` is a object [representing the user |security]
- `$presenter` is the current presenter
- `$control` is the current component or presenter
- `$flashes` list of [messages |#flash-messages] sent by method `flashMessage()`

You can read more details about template rendering in a [separate chapter |templating].

Actually it's not hard at all! When you're requesting an action, for example `Homepage:default`, then

1) an object of class `HomepagePresenter` will be created
2) method `renderDefault()` will be called (if it exists, but it doesn't have to)
3) template, for example `templates/Homepage/default.latte` with layout, for example `templates/@layout.latte`, will be rendered

and in template we can [create a link |#Linking] to mentioned `Product:show($id)`, roughly like this:

/--html
<a n:href="Product:show $productId">product detail</a>
\--

I think that making applications in Nette will be easy.


Modules
------

For more complex applications, that separates presenters to modules, everything works wery similarly. Lets say, that our application contains module `Front`, and it contains presenter `Product`. Action `show` can than be written as `Front:Product:show` and class `ProductPresenter` will be placed into namespace `FrontModule`:

/--php
namespace FrontModule;

class ProductPresenter extends Nette\Application\UI\Presenter
{
	...
\--



Link creation
=============

Creation of links belongs to the strongest features of Nette Framework. Thanks to [two-way routing |routing] you don't have to hardcode your URLs or nastily assemble them. You can just refer to actions of presenters, and pass them parameters and framework will generate URLs by itself. Creating links is as easy as calling a function. You will realy like it!

When programming and coding templates, we don't have to care about URLs design, we will refer directly to action of presenter, that's for example already mentioned `Product:show`.


Links in templates
------------------

Most often we create links in templates. To make it as easy as possible, framework does offer three macros. Smartest of them is macro `n:href`

/--html
<a n:href="Product:show $productId">product detail</a>
\--

Note, that instead of the HTML attribute `href` we've used [n:macro |templating#n-macros] `n:href`. It's value isn't a URL, as you were used to at `href` attribute, but directly an action of a presenter. The syntax is

/--
[Presenter:]action [,] [arg1] [, arg2] [, ...]
\--

After clicking on the link, method `ProductPresenter::renderShow()` will get its word and as parameter `$id` will get the value of `$productId`, We can pass even more parameters, in the same way, as we call a method. Could it be even easier?

.[note]
It's better to follow convetion of first big letter for name of presenter and small for action. As separator is used colon.

Besides that, it's even possible to pass named parameters. Next link passes parameter `lang` with value `cs`:

/--html
<a n:href="Product:show $productId, lang => cs">product detail</a>
\--

Allthough method `renderShow` doesn't have `$lang` in it's declaration, it can read the value of this parameter by calling `$lang = $this->getParam('lang')`.

If we have all parameters in array, we can expand them with `(expand)` operator:

/--html
{var $args = [$productId, lang => cs]}
<a n:href="Product:show (expand) $args">product detail</a>
\--

If the template, in which we are creating links, is part of `Product` presenter, we can omit the name of the presenter and write directly `n:href="show $productId"`. Or the other way, if a link leads to the an action named `default`, you can skip that and write `n:href="Product: $id"` (don't forget the colon).

Links can even refer to other [modules |#modules]. Here we distinguish, if it's refering "relatively" to submodule, or "absolutely" to different module - then path begins with colon. Lets assume, that actual presenter is part of module `Front`, then we will write:

/--html
<a n:href="Shop:Product:show">link for Front:Shop:Product:show</a>
<a n:href=":Admin:Product:show">link for Admin:Product:show</a>
\--

Special case is linking to itself, when we'll write `this` as the target.

Generated link is in absolute path format. When you want to generate absolute link including domain, for example `http://example.com`, we will supply two slashes at the beginning `n:href="//show $productId"`.

We can refer to specific part on page using so called fragments behind the symbol of grid `#`:

/--html
<a n:href="show#comments">link to Product:show and fragment #comments</a>
\--

Macro `n:href` is realy handy when we are creating a HTML tag `<a>`. When we want to print link elsewhere, for example in text of the template, we will use macro `{link}` with the same internal syntax:

/--html
The address is: {link Product:show $productId}
\--

Read more details about syntax of [Latte templates |default-macros].


Linking in presenter
--------------------

Presenter and [a component | api:Nette\Application\UI\PresenterComponent] have method `link`, which can be used to create links just like in a template. First argument is presenters target action, followed by passed arguments:

/--php
$url = $this->link(destination [,arg [,arg ...]]);
\--

They can also be passed using an array. Examples:

/--php
$url = $this->link('Product:show', $productId);

$url = $this->link('Product:show', array($productId, 'lang' => 'en'));
\--



Invalid links
-------------

It may happen that we create an invalid link - either because it refers to nonexisting presenter, or beacuse it passes more parameters that the target method receives in its definition, or when there can't be generated URL for targeted action. What to do with invalid link is determined by static variable `Presenter::$invalidLinkMode`. It can have one of these values (constants):

- `Presenter::INVALID_LINK_SILENT` - silent mode, there will be returned symbol `#` as  URL
- `Presenter::INVALID_LINK_WARNING` - visual warning
- `Presenter::INVALID_LINK_EXCEPTION` - there will be thrown an exception InvalidLinkException

Default setup in production mode is `INVALID_LINK_SILENT` and in development mode it's `INVALID_LINK_WARNING`. When setup to `INVALID_LINK_WARNING`, presenter and components returns error message as URL which stars with `error:`. To make such links visible, we will add CSS rule to our stylesheet:

/--code css
a[href^="error:"] {
	background: red;
	color: white;
}
\--



Persistent parameters
---------------------

Except classic parameters, that we know by now, there are so called persistent parameters. Those are different in a very essential feature: **they are passed through requests automaticaly.** That means, we doesn't have to explicitly mention them in links, but they are anyway passed.

When your application have multiple language variants, passing of actual language in every link will be incredibly tiring. But that's not needed with Nette Framework. You can simply mark the `$lang` parameter as persistent just like this:

/--php
class ProductPresenter extends Presenter
{
    /** @persistent */
    public $lang;

    ...
\--

If the actual value of parameter `$lang` will be `'en'`, the into the link

/--html
<a n:href="Product:show $productId">product detail</a>
\--

will be automaticaly passed parameter `lang => en`. Great!

But we can also add parameter `lang` and by that, change its value:

/--html
<a n:href="Product:show $productId, lang => cs">detail in czech language</a>
\--

The parameter will be accessible in class variable `$lang` in object of `ProductPresenter` and it can be accessed through `$this->lang`. We can even set the default value of persistent parameter to presenter class. If the parameter value will correspond to default value, it will not be passed in URL.

.[note]
Persistent variable must be declared as public.

Persistence reflects hierarchy of presenter classes, thus parameter defined in specific presenter will be automaticaly taken into account in every single presenter that inheriting from it.



Life cycle of presenter
=======================


We know by now, that a presenter action causes invoking `render<Action>` method, thus for example `renderShow`. But it's not the only method, that gets invoked. When writing presenters, we can write following methods:


[* lifecycle2.gif *] *** *Life cycle of presenter* .<>

`startup()`
---------

Method `startup()` gets invoked immediately after the presenter is created. It initializes variables or checks user privileges.

.[note]
If you write your own `startup()` method, don't forget to call its ancestors `parent::startup()`.

`action<Action>()`
------------------

Analogy to method `render<View>()`. There are situations, when presenter executes some specific action (authenticates the user, writes to database) and then redirects to somewhere else. Name such a method `render` would be inappropriate, because method doesn't render anything. Because of that, there is alternative with name `action`.

It's important to know, that method `action<Action>()` get's called before `render<View>()` method. It can even decide to change what render method gets invoked, by calling `$this->setView('otherView')` (`renderOtherView()` will get invoked).

`handle<Signal>()`
-------------------------

Method handles so called [signals |components#signal-aka-subrequest] aka subrequests. Designed mainly for components and handling of AJAX requests.

`beforeRender()`
-----------------

Method `beforeRender`, as the name suggests, gets invoked before `render<View>()` and it can contain for example setup of template, passing variables to template common for more views and so on.

`render<View>()`
----------------

Usualy passes required data to templates.


`shutdown()`
-------------

Gets invoked at the end of the presenters life cycle.

.[note]
More accurate would be to say, that we were talking about life cycle of class [api:Nette\Application\UI\Presenter], from which are presenters inherited most often. In general, presenter is any class implementing simple interface [api:Nette\Application\IPresenter] and one such alternative uses [Micro-framework | micro-framework].


Termination of presenter
------------------------

We can terminate presenter anytime during his life cycle. We usualy do this, to prevent rendering a template.

- termination of presenter directly by method: `$presenter->terminate()`
- termination of presenter and immediate render the template: `$presenter->sendTemplate()`
- termination of presenter and dispatch of the payload: `$presenter->sendPayload()` (for AJAX)
- termination of presenter and dispatch of own response: `$presenter->sendResponse($response)`

Presenter can be terminated also by redirecting or by throwing a BadRequestException.


Redirection
===========

There are two methods `redirect()` and `forward()` for jumping to another presenter, which have similar syntax as mentioned [link() |#Linking]. For example after submitting a form and writing to database, we will redirect to the products detail by calling:

/--php
$this->redirect('Product:show', $id);
\--

While `forward()` will pass to new action without redirecting, method `redirect()` will redirect browser with HTTP code 302 or 303. If we would want to use different code, we will put it before the name of the action of presenter:

/--php
$this->redirect(301, 'Product:show', $id);
\--

To different URLs to outside of application, you can redirect using `redirectUrl()`:

/--php
$this->redirectUrl('http://nette.org');
\--

Redirection immediately terminates activity of the presenter by throwing so called terminating exception `Nette\Application\AbortException`.

Sometimes, before redirection, we want to send so called [flash message |#Flash messages]. That's a message, that will appear after redirection in template.


Error 404, etc.
===============

When we can't fulfill the request, because for example the record is missing in database, we will throw an exception `Nette\Application\BadRequestException`, which represents HTTP error 404:

/--php
function renderShow($id)
{
	$product = $this->model->getProduct($id);
	if (!$product) {
		throw new Nette\Application\BadRequestException;
	}
	...
}
\--

When user is not authorized to see the page, we will throw a `Nette\Application\ForbiddenRequestException` exception (error 403). Other error codes can be returned using second argument of `Nette\Application\BadRequestException`.



Flash messages
==============

These are messages informing about a result of some operation. Important feature of flash messages is, that they are available in template, even after redirection. Even when displayed, they are available next three seconds - in case that user would unintentionally refresh page - thus messages will not be lost.

Method [flashMessage |api:Nette\Application\UI\Control::flashMessage()] takes care about passing to template. First argument is text of message and second optional argument is it's type (error, warning, info etc.). Method `flashMessage()` returns an instance of flash message, to allow us to add more information.

/--php
public function deleteFormSubmitted($form)
{
	... model asks for deletion of record ...

	// we will pass the flash message
	$this->flashMessage('Item was removed.');

	$this->redirect(...); // and redirect
}
\--

These messages are available in templates variable `$flashes` as anonymous objects, that contains `message` and `type` properties and they can even contain previously mentioned user-defined information. They can be rendered for example like this:

/--php
{foreach $flashes as $flash}
<div class="flash {$flash->type}">{$flash->message}</div>
{/foreach}
\--



Presenter and components
========================

When we talk about presenters, then under the term [components |components] we usualy mean descendants of class [Control |api:Nette\Application\UI\Control]. More accurate would be to use term "controls", but it has different meaning in czech language and "components" did better catch on.

Presenter `Nette\Application\UI\Presenter` by itself, is descendant of class `Control`, so there is major similarity between components and presenter. But mainly `UI\Control` (and thus even `UI\Presenter`) is so called component container. Which means, that you can add to it another components. Just like we add to [form |forms] inputs (text field, button, ...). And just like with forms, you can access them through brackets:

/--php
// attach component at presenter
$presenter['mymenu'] = new MenuControl;

// get component from presenter and render it
$presenter['mymenu']->render();
\--


Attaching the component to the presenter (binding them) you will be able to:
- create links in component
- use [signals |components#signal-aka-subrequest]
- use persistent parameters in components

When you don't need any of these features, you don't have to bind the component with the presenter.


Component factories
-------------------

Component factories is an elegant way to create components only when they are realy needed (lazy / on demand). Whole magic is in implementation of method with name `createComponent<Name>()`, where `<Name>` is the name of component, that will create and return desired component. Component is then attached to presenter. To method `createComponent<Name>()` is optionaly passed `$name` of component, that is beeing created, as argument.

/--php
class DefaultPresenter extends Nette\Application\UI\Presenter
{
	public function renderDefault()
	{
		$menu = $this['menu']; // access to component
		// if this was the first access, method createComponentMenu() will be called
		...
	}

	protected function createComponentMenu()
	{
		// create and configure component
		$menu = new MenuControl;
		$menu->items = $this->item;
		// and return it
		return $menu;
	}
}
\--

.[note]
Component name always starts with lowercase letter, despite that they are with uppercased first letter in name of factory.

Because all components are created in separated methods, the code is cleaner and clearer.

We never call factories directly, it gets called automaticaly, when we use the component for the first time. Thanks to that, the component is created at the right moment, and only if it's realy needed. If we wouldn't use the component (for example on some AJAX request, where we return only part of the page, or when parts are cached), it wouldn't even be created and we save performance of the server.

You can access and render component using [macro {control} |default-macros#toc-components-rendering]. So there is no need of manualy passing the components to template.

/--html
<h2>Edit form</h2>

{control editForm}
\--


You can read more detailed information about components on a [separate page |components].



Persistent components
---------------------

Not even parameters, but also components can be persistent. Their state is then passed around when jumping to another presenter, just like with [persistent parameters |#persistent parameters]. We mark persistent components with this annotation (here we mark components `calendar` and `menu`):

/--php
/**
 * @persistent(calendar, menu)
 */
class DefaultPresenter extends Presenter
{
    ...
}
\--

You don't have to mark subcomponents as persistent, they would be persistent automaticaly too.


Where can i get some components?
--------------------------------

On page [Add-ons, plugins and components |addons:homepage] you can find some open-source components, that were made and shared by community of Nette Framework. Nette Foundation is not liable for them.

{{themeicon: icon-house.png}}
