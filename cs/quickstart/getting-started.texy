Začínáme
********

.[perex]
Poznáme Framework Nette a vytvoříme naši první aplikaci.

Napřed ověříme, že náš server splňuje [požadavky|/requirements] Nette Frameworku. Vše by mělo být v pořádku, ale jen pro jistotu, ať začneme psát v podporovaném prostředí.

Nette Framework můžeme stáhnout [manuálně |www:download], ale lepší je k vytvoření projektu použít [Composer |/composer]. [Dokumentace |http://getcomposer.org/doc/] Composeru je perfektním zdrojem informací k seznámení se s tímto špickovým nástrojem pro správu závislostí, který je téměř nezbytností pro každého, kdo chce ve svých projektech používat knihovny ostatních vývojářů.

Composerem můžeme snadno stáhnout a naistalovat základ aplikace známý pod označením Sandbox, který již obsahuje Nette Framework. V příkazovém řádku otevřeme kořenový adresář webu (např. `/var/www` nebo `C:\InetPub`) a spustíme následující příkaz:

/--code
composer create-project nette/sandbox nette-blog
\--

Sandbox se stáhne do adresáře `nette-blog`.

Pokud vyvíjíme na Mac OS X, Linuxu nebo jiném systému postaveném na Unixu, tak bude třeba nastavit práva zápisu pro webový server.

/--code
cd nette-blog && chmod -R a+rw temp log
\--


Uvítací stránka
===============

Už by nám měla běžet uvítací stránka Sandboxu. Můžeme ji navštívit, když v prohlížeči otevřeme následující adresu:

/--
http://localhost/nette-blog/www/
\--

měli bychom vidět uvítací stránku Nette Frameworku, která vypadá asi takto:

[* welcome-620.jpg *]

Aplikace funguje a my v ní můžeme začít provádět změny.


Obsah Sandboxu
==============

Sandbox má následující strukturu:

/--pre
<b>www/</b>                      ← kořenový adresář webu
└── <b>nette-blog/</b>
    ├── <b>app/</b>              ← adresář aplikace
    │   ├── <b>config/</b>       ← konfigurační soubory
    │   ├── <b>model/</b>        ← třídy modelové vrstvy
    │   ├── <b>presenters/</b>   ← třídy presenterů
    │   ├── <b>templates/</b>    ← šablony
    │   └── <b>bootstrap.php</b> ← soubor, který zavádí aplikaci
    │
    ├── <b>libs/</b>             ← knihovny pro použití v naší aplikaci
    │   └── <b>Nette/</b>        ← jako třeba nejoblíbenější framework:-)
    │
    ├── <b>log/</b>              ← zde najdeme aplikační logy včetně chyb
    ├── <b>temp/</b>             ← místo pro dočasné soubory (cache, sessions, atd.)
    ├── <b>test/</b>             ← adresář pro unit testy
    └── <b>www/</b>              ← aplikační kořenová složka webu - toto je jediný adresář přístupný přes web
\--

Adresář `www` slouží pro ukládání obrázků, javascriptu, CSS a dalších veřejně přístupných souborů. Tento adresář je jako jediný přístupný přes webový prohlížeč, takže do něj můžeme nasměrovat nějakou doménu (to se dá udělat změnou konfigurace serveru Apache, ale k tomu se dostaneme až později).

Nejdůležitějším adresářem pro nás je `app`, ve kterém nalezneme soubor `bootstrap.php`. Ten nahraje framework, nakonfiguruje aplikaci, aktivuje [autoloading |/auto-loading], nastaví [debugger |/debugging] a [routování |/routing].


Úklid
=====

Sandbox obsahuje vzorový kód, který nebudeme potřebovat, takže ho můžeme smazat. Můžeme například odstranit soubor `app/templates/Homepage/default.latte`, protože si za chvíli vytvoříme vlastní.


Tracy
=====

An extremely important tool for development is [a debugger called Tracy |/en/debugging]. Try to make some errors in your `app/presenters/HomepagePresenter.php` file (e.g. remove a letter from the word `class` in code) and see what happens. A red-screen page will pop up with understandable error description.

[* debugger-620.png .(debugger screen) *]

Tracy will significantly help you while hunting down errors. Also note the floating Debugger bar in the bottom right corner, which informs you about important runtime data.

In the production mode, Tracy is, of course, disabled and does not reveal any sensitive information. All error logs are saved into `log` directory instead. Just try it out. In  `app/bootstrap.php`, find the following piece of code, uncomment the line and change the method call parameter to `FALSE`, so it looks like this:

/--php
// Enable Nette Debugger for error visualization & logging
$configurator->setDebugMode(FALSE);
$configurator->enableDebugger(__DIR__ . '/../log');
\--


After refreshing the web page, the red-screen page will be replaced with user-friendly message:

[* server-error-620.png .(error screen) *]

Now look into the `log` directory. You can find the error log there and also a red-screen page saved in an HTML file with name starting with `exception`.

Comment line `$configurator->setDebugMode(FALSE);` again. Tracy automatically enables debug mode on `localhost` environment and disables it elsewhere.

Now, with the basic knowledge, we can start designing our application.
