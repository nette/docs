Формат NEON
***********

.[perex]
NEON — это человекочитаемый формат структурированных данных. В Nette он используется для конфигурационных файлов. Он также используется для структурированных данных, таких как настройки, языковые переводы и т. д. [Попробуйте его|https://ne-on.org].

NEON — это аббревиатура от *Nette Object Notation*. Он менее сложен и громоздок, чем XML или JSON, но предоставляет схожие функции. Он очень похож на YAML. Главное преимущество заключается в том, что NEON имеет так называемые [#entity], благодаря которым конфигурация DI-сервисов [тоже сексуальна |https://gist.github.com/dg/26baf3ce8f29d0f751e9dddfaa06504f]. И позволяет использовать табуляцию для отступов.

NEON построен с нуля так, чтобы быть простым в использовании.


Интеграция
==========

- NetBeans (имеет встроенную поддержку)
- PhpStorm ([плагин |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([Nette Latte + Neon |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte]) или [Nette for VS Code |https://marketplace.visualstudio.com/items?itemName=franken-ui.nette-for-vscode])
- Sublime Text 3 ([плагин |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([плагин |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([плагин |https://github.com/fpob/nette.vim])
- Emacs ([плагин |https://github.com/Fuco1/neon-mode])
- Prism.js ([встроенный язык |https://prismjs.com/#supported-languages])


- [NEON for PHP |@home]
- [NEON for JavaScript |https://github.com/matej21/neon-js]
- [NEON for Python |https://github.com/paveldedik/neon-py].


Синтаксис
=========

Файл, написанный в NEON, обычно представляет собой массив или отображение.


Отображение
-----------
Отображение — это набор пар ключ-значение, в PHP это называется ассоциативным массивом. Каждая пара записывается как `key: value`, пробел после `:` обязателен. Значением может быть что угодно: строка, число, булево значение, null, последовательность или другое отображение.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

В PHP та же структура была бы записана так:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Эта запись называется блочной, потому что все элементы находятся на отдельной строке и имеют одинаковый отступ (в данном случае никакого). NEON также поддерживает инлайн-представление отображений, которое заключено в скобки, отступ не играет роли, а разделителем отдельных элементов является либо запятая, либо новая строка:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

То же самое, записанное на нескольких строках (отступ не имеет значения):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

Вместо <code>: </code> можно альтернативно использовать `=`, как в блочной, так и в инлайн-записи:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Последовательность
------------------
Последовательности в PHP — это индексированные массивы. Они записываются как строки, начинающиеся с дефиса `-`, за которым следует пробел. Значением опять же может быть что угодно: строка, число, булево значение, null, последовательность или другое отображение.

```neon
- Cat
- Dog
- Goldfish
```

В PHP та же структура была бы записана так:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Эта запись называется блочной, потому что все элементы находятся на отдельной строке и имеют одинаковый отступ (в данном случае никакого). NEON также поддерживает инлайн-представление последовательности, которое заключено в скобки, отступ не играет роли, а разделителем отдельных элементов является либо запятая, либо новая строка:

```neon
[Cat, Dog, Goldfish]
```

То же самое, записанное на нескольких строках (отступ не имеет значения):

```neon
[
	Cat, Dog
		Goldfish
]
```

В инлайн-представлении нельзя использовать отступы с дефисами.


Комбинации
----------
Значениями отображений и последовательностей могут быть другие отображения и последовательности. Главную роль играет уровень отступа. В следующем примере дефис, используемый для обозначения элементов последовательности, имеет больший отступ, чем ключ `pets`, поэтому элементы становятся значением первой строки:

```neon
pets:
   - Cat
   - Dog
cars:
   - Volvo
   - Skoda
```

В PHP та же структура была бы записана так:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Можно комбинировать блочную и инлайн-запись:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

Внутри инлайн-записи уже нельзя использовать блочную запись, это не работает:

```neon
item: [
	pets:
	 - Cat     # ЭТО НЕВОЗМОЖНО!!!
	 - Dog
]
```

В предыдущем случае мы записали отображение, элементами которого были последовательности, теперь попробуем наоборот и создадим последовательность, содержащую отображения:

```neon
-
	name: John
	age: 35
-
	name: Peter
	age: 28
```

Не обязательно, чтобы дефисы были на отдельных строках, их можно разместить и таким образом:

```neon
- name: John
  age: 35
- name: Peter
  age: 28
```

Вам решать, выравнивать ли ключи в столбец с помощью пробелов или использовать табуляцию.

Поскольку в PHP для отображений и последовательностей используется одна и та же структура, то есть массив, их можно объединить. Отступ на этот раз одинаковый:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

В PHP та же структура была бы записана так:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Строки
------
Строки в NEON можно заключать в одинарные или двойные кавычки. Но, как вы видите, они могут быть и без кавычек.

```neon
- Строка в NEON без кавычек
- 'Строка в NEON в одинарных кавычках'
- "Строка в NEON в двойных кавычках"
```

Если строка содержит символы `# " ' , : = - [ ] { } ( )`, которые можно спутать с синтаксисом NEON, ее необходимо заключить в кавычки. Рекомендуется использовать одинарные кавычки, так как в них не используется экранирование. Если вам нужно записать кавычку в такой строке, удвойте ее:

```neon
'Кавычка '' внутри строки в одинарных кавычках'
```

Двойные кавычки позволяют использовать escape-последовательности для записи специальных символов с помощью обратных слешей `\`. Поддерживаются все escape-последовательности, как в формате JSON, а также `\_`, что является неразрывным пробелом, то есть `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Существуют и другие случаи, когда необходимо заключать строки в кавычки:
- они начинаются или заканчиваются пробелами
- они выглядят как числа, булевы значения или null
- NEON воспринял бы их как [#datum]


Многострочные строки
--------------------

Многострочная строка начинается и заканчивается тройными кавычками на отдельных строках. Отступ первой строки игнорируется, и это касается всех строк:

```neon
'''
	первая строка
		вторая строка
	третья строка
	'''
```

В PHP мы бы написали то же самое так:

```php
"первая строка\n\tвторая строка\nтретья строка" // PHP
```

Escape-последовательности работают только для строк, заключенных в двойные кавычки вместо апострофов:

```neon
"""
	Copyright \u00A9
"""
```


Числа
-----
NEON понимает числа, записанные в так называемой научной нотации, а также числа в двоичной, восьмеричной и шестнадцатеричной системах счисления:

```neon
- 12         # целое число
- 12.3       # float
- +1.2e-34   # экспоненциальное число

- 0b11010    # двоичное число
- 0o666      # восьмеричное число
- 0x7A       # шестнадцатеричное число
```


Nulls
-----
Null в NEON можно выразить с помощью `null` или не указывая значение. Разрешены также варианты с большой первой или всеми большими буквами.

```neon
a: null
b:
```


Логические значения
-------------------
Логические значения в NEON выражаются с помощью `true` / `false` или `yes` / `no`. Разрешены также варианты с большой первой или всеми большими буквами.

```neon
[true, TRUE, True, false, yes, no]
```


Дата
----
NEON использует для выражения дат следующие форматы и автоматически преобразует их в объекты `DateTimeImmutable`:

```neon
- 2016-06-03                  # дата
- 2016-06-03 19:00:00         # дата и время
- 2016-06-03 19:00:00.1234    # дата и микровремя
- 2016-06-03 19:00:00 +0200   # дата и время и зона
- 2016-06-03 19:00:00 +02:00  # дата и время и зона
```


Сущности
--------
Сущность — это структура, напоминающая вызов функции:

```neon
Column(type: int, nulls: yes)
```

В PHP она парсится как объект [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Сущности также могут быть объединены в цепочку:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Что в PHP парсится следующим образом:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

Внутри скобок действуют правила для инлайн-записи, используемой для отображений и последовательностей, то есть она может быть многострочной, и тогда не нужно указывать запятые:

```neon
Column(
	type: int
	nulls: yes
)
```


Комментарии
-----------
Комментарии начинаются с символа `#`, и все последующие символы справа игнорируются:

```neon
# эта строка будет проигнорирована интерпретатором
street: 742 Evergreen Terrace
city: Springfield  # это тоже игнорируется
country: USA
```


Neon против JSON
================
JSON является подмножеством NEON. Поэтому любой JSON можно распарсить как NEON:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

Что, если мы уберем кавычки?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

А фигурные скобки и запятые?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

Не лучше ли читаются списки с дефисами?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Добавим комментарии?

```neon
# конфигурация моего веб-приложения

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # использовать gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Ура, теперь вы знаете синтаксис NEON!


{{description: NEON — это легко читаемый формат для сериализации данных. Он похож на YAML. Основное отличие в том, что NEON поддерживает «сущности», и для отступов мы можем использовать как пробелы, так и табуляцию.}}
{{leftbar: utils:@left-menu}}
