Hashování hesel
***************

.[perex]
Abychom zajistili bezpečnost našich uživatelů, neukládáme jejich hesla v čitelné podobě, ale uložíme si pouze otisk (tzv. hash). Z otisku nelze zpětně zrekonstruovat původní podobu hesla. Je důležité použít bezpečný algoritmus, kterým otisk vytvoříme. S tím nám pomůže třída [api:Nette\Security\Passwords].

Instalace:

```shell
composer require nette/utils
```

Framework automaticky přidává do DI kontejneru službu typu `Nette\Security\Passwords` pod názevem `security.passwords`, takže obvykle nebudete potřebovat ve svém kódu vytvářet instanci třídy `Passwords`, ale necháte si ji [předat pomocí dependency injection |di-usage]:

```php
use Nette\Security\Passwords;

class Foo
{
	/** @var Passwords */
	private $passwords;

	public function __construct(Passwords $passwords)
	{
		$this->passwords = $passwords;
	}
}
```


__construct($algo = PASSWORD_DEFAULT, array $options=[]): string .[method]
==========================================================================

Volíme, který [bezpečný algoritmus|https://www.php.net/manual/en/password.constants.php] pro generování hashe použít a konfigurujeme jeho parametry.

Jako výchozí se používá `PASSWORD_DEFAULT`, tedy volba algoritmu se nechává na PHP. Algoritmus se může v novějších verzích PHP změnit, pokud se objeví novější, silnější hashovací algoritmy. Proto byste si měli být vědomi, že délka výsledného hashe se může změnit, a měli byste jej uložit způsobem, který dokáže pojmout dostatek znaků, 255 je doporučená šířka.

```php
// budeme hesla hashovat 12 iteracemi algoritmu bcrypt
$passwords = new Passwords(PASSWORD_BCRYPT, ['cost' => 12]);
```

hash(string $passwords): string .[method]
=========================================

Vygeneruje hash hesla.

```php
$hash = $passwords->hash($password); // Zahashuje heslo
```

verify(string $password, string $hash): bool .[method]
======================================================

Zjistí, zda dané heslo odpovídá danému otisku.

```php
if ($passwords->verify($password, $hash)) {
	...
}
```

needsRehash(string $hash): bool .[method]
=========================================

Zjistí, zda hash odpovídá v konstruktoru zadaným volbám.

```php
if ($passwords->needsRehash($hash)) {
	...
}
```

{{composer: nette/security}}
