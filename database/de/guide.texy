Nette Database
**************

.[perex]
Nette Database ist eine leistungsstarke und elegante Datenbankschicht für PHP mit Schwerpunkt auf Einfachheit und intelligenten Funktionen. Sie bietet zwei Möglichkeiten zur Arbeit mit der Datenbank - [Explorer] für die schnelle Entwicklung von Anwendungen oder den [SQL-Zugriff |SQL way] für die direkte Arbeit mit Abfragen.

<div class="grid gap-3">
<div>


[SQL-Zugriff |SQL way]
======================
- Sichere parametrisierte Abfragen
- Präzise Kontrolle über die Form der SQL-Abfragen
- Wenn Sie komplexe Abfragen mit erweiterten Funktionen schreiben
- Sie optimieren die Leistung mithilfe spezifischer SQL-Funktionen

</div>

<div>


[Explorer]
==========
- Sie entwickeln schnell ohne SQL zu schreiben
- Intuitive Arbeit mit Beziehungen zwischen Tabellen
- Sie schätzen die automatische Optimierung von Abfragen
- Geeignet für schnelle und bequeme Arbeit mit der Datenbank

</div>

</div>


Installation
============

Die Bibliothek wird mit dem Werkzeug [Composer|best-practices:composer] heruntergeladen und installiert:

```shell
composer require nette/database
```


Unterstützte Datenbanken
========================

Nette Database unterstützt die folgenden Datenbanken:

|* Datenbankserver    |* DSN-Name   |* Unterstützung in Explorer
|---------------------|-------------|-----------------------
| MySQL (>= 5.1)      | mysql       | JA
| PostgreSQL (>= 9.0) | pgsql       | JA
| Sqlite 3 (>= 3.8)   | sqlite      | JA
| Oracle              | oci         | -
| MS SQL (PDO_SQLSRV) | sqlsrv      | JA
| MS SQL (PDO_DBLIB)  | mssql       | -
| ODBC                | odbc        | -


Zwei Zugänge zur Datenbank
==========================

Nette Database gibt Ihnen die Wahl: Sie können entweder SQL-Abfragen direkt schreiben (SQL-Zugriff) oder sie automatisch generieren lassen (Explorer). Sehen wir uns an, wie beide Ansätze dieselben Aufgaben lösen:

[SQL-Zugriff|sql way] - SQL-Abfragen

```php
// Einfügen eines Datensatzes
$database->query('INSERT INTO books', [
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// Abrufen von Datensätzen: Autoren von Büchern
$result = $database->query('
	SELECT authors.*, COUNT(books.id) AS books_count
	FROM authors
	LEFT JOIN books ON authors.id = books.author_id
	WHERE authors.active = 1
	GROUP BY authors.id
');

// Ausgabe (nicht optimal, generiert N weitere Abfragen)
foreach ($result as $author) {
	$books = $database->query('
		SELECT * FROM books
		WHERE author_id = ?
		ORDER BY published_at DESC
	', $author->id);

	echo "Autor $author->name hat $author->books_count Bücher geschrieben:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

[Explorer-Zugriff|explorer] - automatische Generierung von SQL

```php
// Einfügen eines Datensatzes
$database->table('books')->insert([
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// Abrufen von Datensätzen: Autoren von Büchern
$authors = $database->table('authors')
	->where('active', 1);

// Ausgabe (generiert automatisch nur 2 optimierte Abfragen)
foreach ($authors as $author) {
	$books = $author->related('books')
		->order('published_at DESC');

	echo "Autor $author->name hat {$books->count()} Bücher geschrieben:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

Der Explorer-Zugriff generiert und optimiert SQL-Abfragen automatisch. Im gezeigten Beispiel generiert der SQL-Zugriff N+1 Abfragen (eine für Autoren und dann eine für die Bücher jedes Autors), während der Explorer die Abfragen automatisch optimiert und nur zwei durchführt - eine für Autoren und eine für alle ihre Bücher.

Beide Ansätze können in der Anwendung nach Bedarf beliebig kombiniert werden.


Verbindung und Konfiguration
============================

Um eine Verbindung zur Datenbank herzustellen, genügt es, eine Instanz der Klasse [api:Nette\Database\Connection] zu erstellen:

```php
$database = new Nette\Database\Connection($dsn, $user, $password);
```

Der Parameter `$dsn` (Data Source Name) ist derselbe, [den PDO verwendet |https://www.php.net/manual/de/pdo.construct.php#refsect1-pdo.construct-parameters], z.B. `host=127.0.0.1;dbname=test`. Im Fehlerfall wird eine Ausnahme `Nette\Database\ConnectionException` ausgelöst.

Ein geschickterer Weg bietet jedoch die [Anwendungskonfiguration |configuration], wo es genügt, den Abschnitt `database` hinzuzufügen, und die erforderlichen Objekte sowie das Datenbankpanel in der [Tracy |tracy:]-Bar werden erstellt.

```neon
database:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: password
```

Danach erhalten wir das Verbindungsobjekt [als Dienst aus dem DI-Container |dependency-injection:passing-dependencies], z.B.:

```php
class Model
{
	public function __construct(
		// oder Nette\Database\Explorer
		private Nette\Database\Connection $database,
	) {
	}
}
```

Mehr Informationen zur [Datenbankkonfiguration|configuration].


Manuelle Erstellung des Explorers
---------------------------------

Wenn Sie keinen Nette DI-Container verwenden, können Sie die Instanz `Nette\Database\Explorer` manuell erstellen:

```php
// Verbindung zur Datenbank
$connection = new Nette\Database\Connection('mysql:host=127.0.0.1;dbname=mydatabase', 'user', 'password');
// Speicher für Cache, implementiert Nette\Caching\Storage, z.B.:
$storage = new Nette\Caching\Storages\FileStorage('/path/to/temp/dir');
// kümmert sich um die Reflexion der Datenbankstruktur
$structure = new Nette\Database\Structure($connection, $storage);
// definiert Regeln für das Mapping von Tabellen-, Spalten- und Fremdschlüsselnamen
$conventions = new Nette\Database\Conventions\DiscoveredConventions($structure);
$explorer = new Nette\Database\Explorer($connection, $structure, $conventions, $storage);
```


Verbindungsverwaltung
=====================

Beim Erstellen des `Connection`-Objekts wird die Verbindung automatisch hergestellt. Wenn Sie die Verbindung verzögern möchten, verwenden Sie den Lazy-Modus - diesen aktivieren Sie in der [Konfiguration|configuration] durch Setzen von `lazy` oder so:

```php
$database = new Nette\Database\Connection($dsn, $user, $password, ['lazy' => true]);
```

Zur Verwaltung der Verbindung nutzen Sie die Methoden `connect()`, `disconnect()` und `reconnect()`.
- `connect()` stellt die Verbindung her, falls sie noch nicht existiert, und kann eine Ausnahme `Nette\Database\ConnectionException` auslösen.
- `disconnect()` trennt die aktuelle Verbindung zur Datenbank.
- `reconnect()` führt eine Trennung und anschließende erneute Verbindung zur Datenbank durch. Diese Methode kann ebenfalls eine Ausnahme `Nette\Database\ConnectionException` auslösen.

Darüber hinaus können Sie Ereignisse im Zusammenhang mit der Verbindung über das Ereignis `onConnect` verfolgen, ein Array von Callbacks, die nach dem Aufbau der Verbindung zur Datenbank aufgerufen werden.

```php
// wird nach der Verbindung zur Datenbank ausgeführt
$database->onConnect[] = function($database) {
	echo "Verbunden mit der Datenbank";
};
```


Tracy Debug Bar
===============

Wenn Sie [Tracy |tracy:] verwenden, wird automatisch das Database-Panel in der Debug-Bar aktiviert, das alle ausgeführten Abfragen, ihre Parameter, die Ausführungszeit und den Ort im Code anzeigt, an dem sie aufgerufen wurden.

[* db-panel.webp *]
