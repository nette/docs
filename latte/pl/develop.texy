Procedury rozwojowe
*******************


Instalacja .[#toc-instalace]
============================

Najlepszym sposobem na zainstalowanie Latte jest Composer:

```shell
composer require latte/latte
```

Obsługiwane wersje PHP (dotyczy najnowszej 100 wersji Latte):

| wersje | kompatybilne z PHP
|-----------------|-------------------
| Latte 3.0 | PHP 8.0 - 8.2
| Latte 2.11 | PHP 7.1 - 8.2
| Latte 2.8 - 2.10| PHP 7.1 - 8.1


Jak renderować szablon .[#toc-jak-vykreslit-sablonu]
====================================================

Jak renderować szablon? Wystarczy użyć tego prostego kodu:

```php
$latte = new Latte\Engine;
// adresář pro cache
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* proměnné šablony */ ];
// or $params = new TemplateParameters(/* ... */);

// kresli na výstup
$latte->render('template.latte', $params);
// kresli do proměnné
$output = $latte->renderToString('template.latte', $params);
```

Parametry mogą być tablicą lub jeszcze lepiej [obiektem |#Parametry jako třída], który zapewnia sprawdzanie typu i podpowiadanie w edytorze.

.[note]
Możesz również znaleźć przykłady użycia w repozytorium [przykładów Latte |https://github.com/nette-examples/latte].


Wydajność i buforowanie .[#toc-vykon-a-cache]
=============================================

Szablony Latte są niezwykle szybkie, ponieważ Latte kompiluje je bezpośrednio do kodu PHP i buforuje na dysku. Dzięki temu nie mają one żadnych dodatkowych kosztów ogólnych w porównaniu z szablonami napisanymi w czystym PHP.

Pamięć podręczna jest automatycznie regenerowana przy każdej zmianie pliku źródłowego. Możesz więc wygodnie edytować swoje szablony w Latte podczas rozwoju i zobaczyć zmiany natychmiast w przeglądarce. Możesz wyłączyć tę funkcję w środowisku produkcyjnym i zaoszczędzić trochę wydajności:

```php
$latte->setAutoRefresh(false);
```

Po wdrożeniu na serwerze produkcyjnym początkowe generowanie pamięci podręcznej, zwłaszcza w przypadku większych aplikacji, może trochę potrwać. Latte ma wbudowaną prewencję przed "cache stampede":https://en.wikipedia.org/wiki/Cache_stampede.
Jest to sytuacja, w której duża liczba współbieżnych żądań spotyka się, aby uruchomić Latte, a ponieważ pamięć podręczna jeszcze nie istnieje, wszystkie zaczęłyby generować ją w tym samym czasie. Co spowodowałoby nieproporcjonalne obciążenie serwera.
Latte jest inteligentny i gdy istnieje wiele współbieżnych żądań, tylko pierwszy wątek generuje pamięć podręczną, pozostałe czekają, a następnie używają go.


Parametry jako klasa .[#toc-parametry-jako-trida]
=================================================

Lepszym rozwiązaniem niż przekazywanie zmiennych do szablonu w postaci tablicy jest stworzenie klasy. Otrzymujesz [notację bezpieczną dla typu |type-system], [ładne podpowiedzi IDE |recipes#Editory a IDE] i sposób [rejestrowania filtrów |extending-latte#Filtry pomocí třídy] i [funkcji |extending-latte#Funkce pomocí třídy].

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Wyłączenie automatycznego wstawiania znaków zmiennych .[#toc-vypnuti-auto-escapovani-promenne]
==============================================================================================

Jeśli zmienna zawiera łańcuch HTML, możesz go oznaczyć, aby Latte nie robiła automatycznej (a więc podwójnej) eskapady. Pozwala to uniknąć konieczności podawania adresu `|noescape` w szablonie.

Najprostszym sposobem jest zawinięcie ciągu w obiekt `Latte\Runtime\Html`:

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

Ponadto Latte nie eskapuje wszystkich obiektów, które implementują interfejs `Latte\HtmlStringable` Możesz stworzyć niestandardową klasę, której metoda `__toString()` zwróci kod HTML, który nie będzie automatycznie eskapowany:

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
Metoda `__toString` musi zwracać poprawny HTML i dostarczać eskapowane parametry, w przeciwnym razie może być podatna na XSS!


Jak rozszerzyć Latte o filtry, tagi itp. .[#toc-jak-rozsirit-latte-o-filtry-znacky-atd]
=======================================================================================

Jak dodać niestandardowy filtr, funkcję, tag itp. do Latte? Jest to temat rozdziału [Extending Latte |extending-latte].
Jeśli chcesz ponownie użyć swoich dostosowań w różnych projektach lub podzielić się nimi z innymi, powinieneś [utworzyć rozszerzenie |creating-extension].


Dowolny kod w szablonie `{php ...}` .{data-version:3.0}{toc: RawPhpExtension}
=============================================================================

Wewnątrz tagu [`{do}` |tags#do] może zawierać tylko wyrażenia PHP, więc nie możesz wstawiać takich konstrukcji jak `if ... else` czy wyrażenia zakończone średnikiem.

Można jednak zarejestrować rozszerzenie `RawPhpExtension`, które dodaje znacznik `{php ...}`, za pomocą którego można wstawić dowolny kod PHP na ryzyko autora szablonu.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Tłumaczenie w szablonach .{data-version:3.0}{toc: TranslatorExtension}
======================================================================

Użyj rozszerzenia `TranslatorExtension`, aby dodać tagi do swojego szablonu [`{_...}` |tags#_], [`{translate}` |tags#translate] i filtr [`translate` |filters#translate]. Służy do tłumaczenia wartości lub części szablonu na inne języki. Jako parametr określ metodę (callable PHP) wykonującą tłumaczenie:

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// z $original vytvoříme $translated dle $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] v PHP 8.0
);
$latte->addExtension($extension);
```

Translator jest wywoływany w czasie runtime, gdy szablon jest renderowany. Jednak Latte może przetłumaczyć cały tekst statyczny podczas kompilacji szablonu. To oszczędza wydajność, ponieważ każdy ciąg jest tłumaczony tylko raz, a wynikowe tłumaczenie jest zapisywane do skompilowanej formy. To tworzy wiele skompilowanych wersji szablonu w katalogu cache, po jednej dla każdego języka. Aby to zrobić, wystarczy podać język jako drugi parametr:

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

Przez tekst statyczny rozumiemy na przykład `{_'hello'}` lub `{translate}hello{/translate}`. Tekst niestatyczny, taki jak `{_$foo}`, będzie nadal kompilowany w locie.

Dodatkowe parametry mogą być również przekazane do tłumacza z szablonu za pomocą `{_$original, foo: bar}` lub `{translate foo: bar}`, które otrzyma on jako pole `$params`:

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


Debugowanie i Tracy .[#toc-debuggovani-a-tracy]
===============================================

Latte stara się, aby Twój rozwój był jak najbardziej przyjemny. Istnieją trzy znaczniki bezpośrednio do celów debugowania [`{dump}` |tags#dump], [`{debugbreak}` |tags#debugbreak] a [`{trace}` |tags#trace].

Największą wygodę uzyskasz, jeśli jeszcze zainstalujesz świetny [debugger Tracy |tracy:] i aktywujesz dodatek Latte:

```php
// zapne Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// aktivuje rozšíření pro Tracy
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);
```

Teraz zobaczysz wszystkie błędy na wyraźnym czerwonym ekranie, w tym błędy w szablonach z podświetleniem wierszy i kolumn ([wideo |https://github.com/nette/tracy/releases/tag/v2.9.0]).
Jednocześnie w prawym dolnym rogu Tracy Bar pojawia się zakładka Latte, na której wyraźnie widać wszystkie wyrenderowane szablony i ich relacje (w tym możliwość kliknięcia w szablon lub skompilowany kod), a także zmienne:

[* latte-debugging.webp *]

Ponieważ Latte kompiluje szablony do czystego kodu PHP, możesz wygodnie przejść przez nie w swoim IDE.


Linter: sprawdzanie poprawności składni szablonów .{data-version:2.11}{toc: Linter}
===================================================================================

Narzędzie Linter pomaga przejść przez wszystkie szablony i sprawdzić błędy składni. Jest on uruchamiany z poziomu konsoli:

```shell
vendor/bin/latte-lint <cesta>
```

Jeśli używasz niestandardowych znaczników, utwórz również własną wersję Lintera, np. `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// zadejte skutečnou cestu k soubor autoload.php
require __DIR__ . '/vendor/autoload.php';

$linter = new Latte\Tools\Linter($engine);
$linter->scanDirectory($path);

$engine = new Latte\Engine;
// tady zaregistruje jednotlivá rozšíření
$engine->addExtension(/* ... */);

$path = $argv[1];
$linter = new Latte\Tools\Linter(engine: $engine);
$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```


Ładowanie szablonów z ciągu znaków .[#toc-nacitani-sablon-z-retezce]
====================================================================

Potrzeba ładowania szablonów z ciągów zamiast plików, być może do celów testowych? [StringLoader |extending-latte#stringloader] może ci pomóc:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Obsługa wyjątków .[#toc-exception-handler]
==========================================

Możesz zdefiniować własny handler wyjątków dla oczekiwanych wyjątków. Zostanie on przekazany wyjątkom wygenerowanym wewnątrz [`{try}` |tags#try] i w [piaskownicy |sandbox].

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Automatyczne śledzenie układu .[#toc-automaticke-dohledavani-layoutu]
=====================================================================

Użycie znacznika [`{layout}` |template-inheritance#layoutova-dedicnost] szablon określa swój szablon nadrzędny. Możliwe jest również automatyczne wyszukiwanie układu, co uprości pisanie szablonów, gdyż nie będą one musiały zawierać znacznika `{layout}`.

Odbywa się to w następujący sposób:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// vrací cestu k souboru s layoutem
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

Jeśli szablon nie powinien mieć układu, ogłosi to za pomocą znacznika `{layout none}`.
