Cos'è l'iniezione di dipendenza?
********************************

.[perex]
Questo capitolo introduce le pratiche di programmazione di base che sono alla base dell'intero framework Nette e che si dovrebbero seguire quando si scrivono le proprie applicazioni. Si tratta delle basi necessarie per scrivere codice pulito, comprensibile e manutenibile.

Se imparate e seguite queste regole, il framework vi assisterà in ogni momento. Gestirà per voi le attività di routine e vi metterà il più possibile a vostro agio, in modo che possiate concentrarvi sulla logica.

I principi che vi illustreremo sono piuttosto semplici. Non c'è nulla di cui preoccuparsi.


Ricordate il vostro primo programma? .[#toc-remember-your-first-program]
------------------------------------------------------------------------

Non abbiamo idea in quale linguaggio l'abbiate scritto, ma se fosse stato PHP, probabilmente avrebbe avuto un aspetto simile a questo:

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // stampa 24
```

Poche righe di codice banali, ma in cui sono nascosti molti concetti chiave. Vediamo che ci sono delle variabili. Che il codice è suddiviso in unità più piccole, come ad esempio le funzioni. Che si passano loro degli argomenti in ingresso e che restituiscono dei risultati. Mancano solo le condizioni e i cicli.

Il fatto che si passi un input a una funzione e che questa restituisca un risultato è un concetto perfettamente comprensibile, utilizzato anche in altri campi, come la matematica.

Una funzione ha una firma, che consiste nel suo nome, in un elenco di parametri e dei loro tipi e infine nel tipo di valore di ritorno. Come utenti, siamo interessati alla firma; di solito non abbiamo bisogno di sapere nulla dell'implementazione interna.

Immaginiamo ora che la firma di una funzione abbia il seguente aspetto:

```php
function addition(float $x): float
```

Un'addizione con un solo parametro? È strano... Che ne dite di questo?

```php
function addition(): float
```

È davvero strano, vero? Come pensate che venga utilizzata la funzione?

```php
echo addition(); // cosa stampa?
```

Guardando questo codice, siamo confusi. Non solo un principiante non lo capirebbe, anche un programmatore esperto non capirebbe questo codice.

Ci si chiede che aspetto avrebbe una funzione del genere all'interno? Dove prenderebbe gli addendi? Probabilmente li otterrebbe *in qualche modo* da sola, come in questo caso:

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Si scopre che nel corpo della funzione ci sono legami nascosti con altre funzioni (o metodi statici) e per scoprire da dove provengono effettivamente gli addendi, dobbiamo scavare ulteriormente.


Non in questo modo! .[#toc-not-this-way]
----------------------------------------

Il disegno appena mostrato è l'essenza di molte caratteristiche negative:

- la firma della funzione fingeva di non aver bisogno di addendi, il che ci confondeva
- non abbiamo idea di come far calcolare la funzione con altri due numeri
- abbiamo dovuto guardare nel codice per vedere dove prende gli addendi
- abbiamo scoperto legami nascosti
- per comprendere appieno, dobbiamo esplorare anche questi binding

E il compito della funzione di addizione è anche quello di procurarsi gli input? Ovviamente no.  La sua responsabilità è solo quella di aggiungere.


Non vogliamo incontrare codice di questo tipo e certamente non vogliamo scriverlo. Il rimedio è semplice: tornare alle origini e usare solo i parametri:


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Regola n. 1: utilizzare i parametri .[#toc-rule-1-use-parameters]
-----------------------------------------------------------------

La regola più importante è: **tutti i dati di cui le funzioni o le classi hanno bisogno devono essere passati ad esse**.

Se si infrange questa regola, sarà impossibile rendere il codice comprensibile, pulito e sostenibile.

Se la seguiamo, ci avviamo verso un codice senza vincoli nascosti. Verso un codice comprensibile non solo all'autore, ma a chiunque lo legga in seguito. Dove tutto è comprensibile dalle firme delle funzioni e delle classi e non c'è bisogno di cercare segreti nascosti nell'implementazione.

Questa tecnica di passaggio di argomenti è tecnicamente chiamata **dependency injection**.

(Non confondete l'iniezione di dipendenza con un "contenitore di iniezione di dipendenza"; è qualcosa di radicalmente diverso e tratteremo i contenitori nel [prossimo capitolo |container]).


Dalle funzioni alle classi .[#toc-from-functions-to-classes]
------------------------------------------------------------

E come si relazionano le classi? Una classe è un'entità più complessa di una semplice funzione, ma la regola n. 1 si applica anche in questo caso. Ci sono solo [più modi per passare gli argomenti |passing-dependencies]. Per esempio, in modo del tutto simile al caso di una funzione:

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

Oppure utilizzando altri metodi o direttamente il costruttore:

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Entrambi gli esempi sono completamente conformi alla dependency injection.


Esempi reali .[#toc-real-life-examples]
---------------------------------------

Nel mondo reale non si scrivono classi per sommare numeri. Passiamo agli esempi della vita reale.

Abbiamo una classe `Article` che rappresenta un articolo di blog:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// salva l'articolo nel database
	}
}
```

e l'utilizzo sarà il seguente:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Il metodo `save()` memorizza l'articolo in una tabella del database. Implementarlo utilizzando [Nette Database |database:] sarebbe un gioco da ragazzi, se non fosse per un problema: dove `Article` ottiene la connessione al database, cioè l'oggetto di classe `Nette\Database\Connection`?

Sembra che ci siano molte opzioni. Può prenderla da una variabile statica. Oppure ereditare dalla classe che fornirà la connessione al database. Oppure sfruttare un cosiddetto singleton. Oppure le cosiddette facciate utilizzate in Laravel:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Bene, abbiamo risolto il problema.

O forse no?

Ricordate la [regola n. 1: usare i parametri |#rule #1: use parameters]: dobbiamo passargli tutti i dati di cui la classe ha bisogno. Perché se non lo facciamo e infrangiamo la regola, abbiamo iniziato a percorrere la strada di un codice sporco, pieno di vincoli nascosti, incomprensibile e il risultato sarà un'applicazione che è una sofferenza da mantenere e sviluppare.

L'utente della classe `Article` non ha idea di dove il metodo `save()` memorizzi l'articolo. In una tabella del database? In quale, in produzione o in sviluppo? E come si può cambiare?

L'utente deve guardare come è implementato il metodo `save()` per trovare l'uso del metodo `DB::insert()`. Quindi deve cercare ulteriormente per scoprire come questo metodo si procura una connessione al database. E le connessioni nascoste possono formare una catena piuttosto lunga.

I binding nascosti, le facciate di Laravel o le variabili statiche non sono mai presenti in un codice pulito e ben progettato. Nel codice pulito e ben progettato, gli argomenti vengono passati:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Ancora più pratico, come vedremo in seguito, è utilizzare un costruttore:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Se state per scrivere una classe che richiede un database, ad esempio, non cercate di capire da dove prenderlo, ma lasciate che vi venga passato. Magari come parametro di un costruttore o di un altro metodo. Dichiarare le dipendenze. Esponetele nell'API della vostra classe. Otterrete un codice comprensibile e prevedibile.

Che ne dite di questa classe che registra i messaggi di errore?

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Cosa ne pensate, abbiamo seguito la [regola n. 1: usare i parametri |#rule #1: use parameters]?

Non l'abbiamo fatto.

La classe *ottenere* l'informazione chiave, la directory contenente il file di log, da una costante.

Si veda un esempio di utilizzo:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Senza conoscere l'implementazione, si può rispondere alla domanda dove vengono scritti i messaggi? Si potrebbe pensare che l'esistenza della costante LOG_DIR sia necessaria per il suo funzionamento? E si potrebbe creare una seconda istanza che scriva in una posizione diversa? Certamente no.

Correggiamo la classe:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

La classe è ora molto più chiara, più configurabile e quindi più utile.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Ma non mi interessa! .[#toc-but-i-don-t-care]
---------------------------------------------

*Quando creo un oggetto Article e chiamo save(), non voglio avere a che fare con il database, voglio solo che venga salvato in quello che ho impostato nella configurazione. "*

*"Quando uso Logger, voglio solo che il messaggio venga scritto e non voglio occuparmi di dove. Lasciare che vengano utilizzate le impostazioni globali. "*

Questi sono commenti corretti.

Come esempio, prendiamo una classe che invia newsletter e registriamo come è andata:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Tuttavia, il nuovo `Logger`, che non utilizza più la costante `LOG_DIR`, richiede il percorso del file nel costruttore. Come risolvere il problema? Alla classe `NewsletterDistributor` non interessa dove vengono scritti i messaggi, vuole solo scriverli.

La soluzione è ancora una volta la [regola n. 1: usare i parametri |#rule #1: use parameters]: passare tutti i dati di cui la classe ha bisogno.

Quindi passiamo il percorso del log al costruttore, che poi usiamo quando creiamo l'oggetto `Logger`? No, perché il percorso non è il dato di cui ha bisogno la classe `NewsletterDistributor`; è quello di cui ha bisogno `Logger`. La classe ha bisogno del logger stesso. E noi glielo passeremo:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Ora è chiaro dalle firme della classe `NewsletterDistributor` che il logging fa parte delle sue funzionalità. E si ha la possibilità di sostituire il logger con un altro.

Mentre nell'intera applicazione possiamo accontentarci di una singola istanza del logger e passarla ovunque ci sia qualcosa da registrare, nel caso della classe `Article` è diverso. Vogliamo crearne più istanze. Come gestire la dipendenza dal database nel costruttore? Come esempio, prendiamo un controllore che deve salvare un articolo nel database dopo aver inviato un modulo:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Si suggerisce una possibile soluzione: passare l'oggetto database a `UserController` tramite il costruttore e usare `$article = new Article($this->db)`.

Come nel caso precedente, questa non è una pratica corretta. Il database non è una dipendenza di `UserController`, ma di `Article`. Inoltre, nel momento in cui il costruttore della classe `Article` viene in qualche modo modificato (con l'aggiunta di un nuovo parametro), dovremo modificare il codice in tutti i punti in cui vengono create le istanze.

La soluzione è rappresentata dalle fabbriche.


Regola n. 2: usare le fabbriche .[#toc-rule-2-use-factories]
------------------------------------------------------------

Rimuovendo i binding nascosti e passando tutti i dati come argomenti, si ottengono classi più configurabili e flessibili. Pertanto, abbiamo ancora bisogno di qualcosa per creare e configurare queste classi più flessibili. Lo chiameremo un factory.

La regola generale è: se una classe ha delle dipendenze, lasciare la creazione delle sue istanze al factory.

I factory sono un sostituto più intelligente dell'operatore `new` nel mondo della dependency injection.


Fabbrica .[#toc-factory]
------------------------

Un factory è una classe che crea e configura oggetti. Il factory che produce `Article` si chiamerà `ArticleFactory` e il suo utilizzo nel controllore sarà il seguente:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// lasciamo che il factory crei un oggetto
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

L'implementazione di un factory potrebbe essere simile a questa:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

A questo punto, quando la firma del costruttore della classe `Article` cambia, l'unica parte del codice che deve reagire è il factory `ArticleFactory`. Qualsiasi altro codice che lavora con gli oggetti `Article`, come `UserController`, non ne risente.

Forse vi starete battendo la fronte in questo momento, chiedendovi come abbiamo fatto ad aiutarci. La quantità di codice è cresciuta e si è spostata dal controllore a una classe separata. Tuttavia, Nette DI ha un asso nascosto nella manica. Capisce il concetto di factory e può anche [scrivere un servizio di questo tipo per noi |factory]. Quindi, invece della classe `ArticleFactory`, possiamo semplicemente creare un'interfaccia:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Ma stiamo andando un po' oltre, ci arriveremo tra un minuto.


Sintesi .[#toc-summary]
-----------------------

All'inizio di questo capitolo abbiamo promesso di dimostrare un semplice principio di progettazione delle applicazioni. Sebbene il principio in sé sia semplice (dare alle classi i dati di cui hanno bisogno), ciò che ne consegue richiede una maggiore riflessione. Sentitevi liberi di leggere questo capitolo più volte.

I programmatori che hanno abbandonato le vecchie abitudini e hanno iniziato a usare l'iniezione di dipendenza lo considerano sempre un momento cruciale della loro vita professionale. Ha aperto un mondo di applicazioni chiare e sostenibili.

Ora vedremo cos'è il [Dependency Injection Container |container].
