Latte használata a Slim 4-gyel
******************************

.[perex]
Ez a "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html által írt cikk a Latte és a Slim Framework használatát írja le.

Először "telepítse a Slim Frameworket":https://odan.github.io/2019/11/05/slim4-tutorial.html, majd a Latte-t a Composer segítségével:

```shell
composer require latte/latte
```


Configuration .[#toc-configuration]
-----------------------------------

Hozzon létre egy új `templates` könyvtárat a projekt gyökérkönyvtárában. Az összes sablon a későbbiekben oda kerül.

Adjon hozzá egy új `template` konfigurációs kulcsot a `config/defaults.php` fájlban:

```php
$settings['template'] = __DIR__ . '/../templates';
```

A Latte a sablonokat natív PHP kóddá fordítja, és a lemezen lévő gyorsítótárban tárolja. Így olyan gyorsak, mintha natív PHP-ben íródtak volna.

Adjon hozzá egy új `template_temp` konfigurációs kulcsot a `config/defaults.php` fájlban: Győződjön meg róla, hogy a `{project}/tmp/templates` könyvtár létezik, és rendelkezik olvasási és írási hozzáférési jogosultságokkal.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

A Latte automatikusan újratermeli a gyorsítótárat minden alkalommal, amikor megváltoztatja a sablont, ami kikapcsolható a termelési környezetben, hogy egy kis teljesítményt takarítson meg:

```php
// a termelési környezetben false-ra változik
$settings['template_auto_refresh'] = true;
```

Ezután adjunk hozzá egy DI konténerdefiníciót a `Latte\Engine` osztályhoz.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Ez önmagában technikailag működne egy Latte sablon rendereléséhez, de a PSR-7 válaszobjektummal is működőképessé kell tennünk.

Ehhez létrehozunk egy speciális `TemplateRenderer` osztályt, amely ezt a munkát elvégzi helyettünk.

Tehát a következő lépésként hozzunk létre egy fájlt a `src/Renderer/TemplateRenderer.php` oldalon, és másoljuk/illesszük be ezt a kódot:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Felhasználás .[#toc-usage]
--------------------------

Ahelyett, hogy közvetlenül a Latte Engine objektumot használnánk, a `TemplateRenderer` objektumot használjuk a sablon PSR-7 kompatibilis objektummá történő rendereléséhez.

Egy tipikus Action kezelő osztály így nézhet ki egy `home.latte` nevű sablon rendereléséhez:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

A működéshez hozzon létre egy sablonfájlt a `templates/home.latte` oldalon ezzel a tartalommal:

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Ha minden helyesen van beállítva, a következő kimenetet kell látnia:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
