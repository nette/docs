HTTP İsteği
***********

.[perex]
Nette, HTTP isteğini anlaşılabilir bir API ile nesneler halinde kapsüllerken bir sanitizasyon filtresi sağlar.

Bir HTTP isteği, [bağımlılık enjeksiyonu |dependency-injection:passing-dependencies] kullanarak geçirdiğiniz bir [api:Nette\Http\Request] nesnesidir. Sunucularda basitçe `$httpRequest = $this->getHttpRequest()` adresini çağırın.

Önemli olan, Nette'in bu nesneyi [oluştururken |#RequestFactory] tüm GET, POST ve COOKIE giriş parametrelerinin yanı sıra kontrol karakterlerinin ve geçersiz UTF-8 dizilerinin URL'lerini de temizlemesidir. Böylece verilerle güvenle çalışmaya devam edebilirsiniz. Temizlenen veriler daha sonra sunumlarda ve formlarda kullanılır.

→ [Kurulum ve gereksinimler |@home#Installation]


Nette\Http\Request .[#toc-nette-http-request]
=============================================

Bu nesne değişmezdir. Ayarlayıcıları yoktur, yalnızca bir tane wither `withUrl()` vardır, bu da nesneyi değiştirmez, ancak değiştirilmiş bir değere sahip yeni bir örnek döndürür.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Farklı bir URL ile bir klon döndürür.


getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
İsteğin URL'sini [UrlScript |urls#UrlScript] nesnesi olarak döndürür.

```php
$url = $httpRequest->getUrl();
echo $url; // https://nette.org/en/documentation?action=edit
echo $url->getHost(); // nette.org
```

Tarayıcılar sunucuya bir parça göndermez, bu nedenle `$url->getFragment()` boş bir dize döndürür.


getQuery(string $key=null): string|array|null .[method]
-------------------------------------------------------
GET istek parametrelerini döndürür:

```php
$all = $httpRequest->getQuery(); // tüm URL parametrelerinin dizisi
$id = $httpRequest->getQuery('id'); // GET parametresi 'id' (veya null) döndürür
```


getPost(string $key=null): string|array|null .[method]
------------------------------------------------------
POST istek parametrelerini döndürür:

```php
$all = $httpRequest->getPost(); // tüm POST parametrelerinin dizisi
$id = $httpRequest->getPost('id'); // POST parametresi 'id' (veya null) döndürür
```


getFile(string|string[] $key): Nette\Http\FileUpload|array|null .[method]
-------------------------------------------------------------------------
[Yüklemeyi |#Uploaded Files] nesne olarak döndürür [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // herhangi bir dosya yüklendi mi?
	$file->getUntrustedName(); // kullanıcı tarafından gönderilen dosyanın adı
	$file->getSanitizedName(); // tehlikeli karakterler içermeyen ad
}
```

Alt ağaç yapısına erişmek için bir anahtar dizisi belirtin.

```php
//<input type="file" name="my-form[details][avatar]" multiple>
$file = $request->getFile(['my-form', 'details', 'avatar']);
```

Dışarıdan gelen verilere güvenemediğiniz ve bu nedenle yapının biçimine güvenmediğiniz için, bu yöntem `$request->getFiles()['my-form']['details']['avatar']`bu da başarısız olabilir.


getFiles(): array .[method]
---------------------------
Normalleştirilmiş bir yapıda [yükleme dosyalarının |#Uploaded Files] ağacını döndürür, her yaprak [api:Nette\Http\FileUpload]'un bir örneğidir:

```php
$files = $httpRequest->getFiles();
```


getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Bir çerezi veya yoksa `null` adresini döndürür.

```php
$sessId = $httpRequest->getCookie('sess_id');
```


getCookies(): array .[method]
-----------------------------
Tüm çerezleri döndürür:

```php
$cookies = $httpRequest->getCookies();
```


getMethod(): string .[method]
-----------------------------
İsteğin yapıldığı HTTP yöntemini döndürür.

```php
echo $httpRequest->getMethod(); // GET, POST, HEAD, PUT
```


isMethod(string $method): bool .[method]
----------------------------------------
İsteğin hangi HTTP yöntemiyle yapıldığını kontrol eder. Parametre büyük/küçük harfe duyarlı değildir.

```php
if ($httpRequest->isMethod('GET')) // ...
```


getHeader(string $header): ?string .[method]
--------------------------------------------
Bir HTTP başlığını veya yoksa `null` adresini döndürür. Parametre büyük/küçük harfe duyarlı değildir:

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```


getHeaders(): array .[method]
-----------------------------
Tüm HTTP başlıklarını ilişkisel dizi olarak döndürür:

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```


getReferer(): ?Nette\Http\UrlImmutable .[method]
------------------------------------------------
Kullanıcı hangi URL'den geldi? Dikkat edin, hiç güvenilir değil.


isSecured(): bool .[method]
---------------------------
Bağlantı şifreli mi (HTTPS)? Düzgün işlevsellik için [bir proxy ayarlamanız |configuration#HTTP proxy] gerekebilir.


isSameSite(): bool .[method]
----------------------------
İstek aynı (alt) etki alanından mı geliyor ve bir bağlantıya tıklanarak mı başlatılıyor? Nette bunu tespit etmek için `_nss` çerezini (eski adıyla `nette-samesite`) kullanır.


isAjax(): bool .[method]
------------------------
Bu bir AJAX isteği mi?


getRemoteAddress(): ?string .[method]
-------------------------------------
Kullanıcının IP adresini döndürür. Düzgün işlevsellik için [bir proxy ayarlamanız |configuration#HTTP proxy] gerekebilir.


getRemoteHost(): ?string .[method deprecated]
---------------------------------------------
Kullanıcının IP adresinin DNS çevirisini döndürür. Düzgün işlevsellik için [bir proxy ayarlamanız |configuration#HTTP proxy] gerekebilir.


getBasicCredentials(): ?string .[method]
----------------------------------------
[Temel HTTP kimlik doğrulama |https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication] bilgilerini döndürür.

```php
[$user, $password] = $httpRequest->getBasicCredentials();
```


getRawBody(): ?string .[method]
-------------------------------
HTTP isteğinin gövdesini döndürür:

```php
$body = $httpRequest->getRawBody();
```


detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Dili algılar. Parametre olarak `$lang`, uygulamanın desteklediği bir dizi dili iletiriz ve tarayıcı tarafından tercih edileni döndürür. Bu sihirli değildir, yöntem sadece `Accept-Language` başlığını kullanır. Eşleşme bulunamazsa, `null` döndürür.

```php
// Tarayıcı tarafından gönderilen başlık: Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // uygulamada desteklenen diller
echo $httpRequest->detectLanguage($langs); // en
```


RequestFactory .[#toc-requestfactory]
=====================================

Geçerli HTTP isteğinin nesnesi [api:Nette\Http\RequestFactory] tarafından oluşturulur. DI konteyneri kullanmayan bir uygulama yazıyorsanız, aşağıdaki gibi bir istek oluşturursunuz:

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

RequestFactory, `fromGlobals()` adresini çağırmadan önce yapılandırılabilir. `$factory->setBinary()` adresini kullanarak geçersiz UTF-8 dizilerinden gelen girdi parametrelerinin tüm sanitizasyonunu devre dışı bırakabiliriz. Ayrıca `$factory->setProxy(...)` adresini kullanarak kullanıcının IP adresinin doğru algılanması için önemli olan bir proxy sunucusu da kurabiliriz.

Filtreler kullanarak URL'leri, diğer çeşitli web sitelerindeki kötü uygulanan yorum sistemleri nedeniyle içlerine girebilecek karakterlerden temizlemek mümkündür:

```php
// yoldan boşlukları kaldırın
$requestFactory->urlFilters['path']['%20'] = '';

// URL'nin sonundaki nokta, virgül veya sağ parantezi kaldırın
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// yolu yinelenen bölü çizgilerinden temizle (varsayılan filtre)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```


Yüklenen Dosyalar .[#toc-uploaded-files]
========================================

`Nette\Http\Request::getFiles()` yöntemi normalleştirilmiş bir yapıda yükleme dosyalarından oluşan bir ağaç döndürür ve her yaprak [api:Nette\Http\FileUpload] öğesinin bir örneğidir. `<input type=file>` form öğesi.

Yapı, HTML'deki öğelerin adlandırılmasını yansıtır. En basit örnekte bu, şu şekilde gönderilen tek bir adlandırılmış form öğesi olabilir:

```latte
<input type="file" name="avatar">
```

Bu durumda, `$request->getFiles()` adresi dizi döndürür:

```php
[
	'avatar' => /* FileUpload instance */
]
```

Kullanıcı herhangi bir dosya yüklememiş veya yükleme başarısız olmuş olsa bile `FileUpload` nesnesi oluşturulur. Bir dosya gönderilmişse `hasFile()` yöntemi true değerini döndürür:

```php
$request->getFile('avatar')->hasFile();
```

Ad için dizi gösterimi kullanan bir girdi olması durumunda:

```latte
<input type="file" name="my-form[details][avatar]">
```

Geri dönen ağaç bu şekilde görünür:

```php
[
	'my-form' => [
		'details' => [
			'avatar' => /* FileUpload instance */
		],
	],
]
```

Ayrıca dosya dizileri de oluşturabilirsiniz:

```latte
<input type="file" name="my-form[details][avatars][] multiple">
```

Böyle bir durumda yapı şöyle görünür:

```php
[
	'my-form' => [
		'details' => [
			'avatars' => [
				0 => /* FileUpload instance */,
				1 => /* FileUpload instance */,
				2 => /* FileUpload instance */,
			],
		],
	],
]
```

İç içe geçmiş bir dizinin 1. dizinine erişmenin en iyi yolu aşağıdaki gibidir:

```php
$file = $request->getFile(['my-form', 'details', 'avatars', 1]);
if ($file instanceof FileUpload) {
	// ...
}
```

Dışarıdan gelen verilere güvenemediğiniz ve bu nedenle yapının biçimine güvenmediğiniz için, bu yöntem `$request->getFiles()['my-form']['details']['avatars'][1]`bu da başarısız olabilir.


`FileUpload` Yöntemlerine Genel Bakış .{toc: FileUpload}
--------------------------------------------------------


hasFile(): bool .[method]
-------------------------
Kullanıcı bir dosya yüklediyse `true` döndürür.


isOk(): bool .[method]
----------------------
Dosya başarıyla yüklenmişse `true` döndürür.


getError(): int .[method]
-------------------------
Yüklenen dosya ile ilişkili hata kodunu döndürür. [UPLOAD_ERR_XXX |http://php.net/manual/en/features.file-upload.errors.php] sabitlerinden biri olabilir. Dosya başarıyla yüklenmişse, `UPLOAD_ERR_OK` döndürür.


move(string $dest) .[method]
----------------------------
Yüklenen bir dosyayı yeni bir konuma taşır. Hedef dosya zaten mevcutsa, üzerine yazılır.

```php
$file->move('/path/to/files/name.ext');
```


getContents(): ?string .[method]
--------------------------------
Karşıya yüklenen dosyanın içeriğini döndürür. Yükleme başarılı olmadıysa, `null` döndürür.


getContentType(): ?string .[method]
-----------------------------------
İmzasına dayalı olarak yüklenen dosyanın MIME içerik türünü algılar. Yükleme başarılı olmadıysa veya algılama başarısız olduysa, `null` döndürür.

.[caution]
PHP uzantısı gerektirir `fileinfo`.


getUntrustedName(): string .[method]
------------------------------------
Tarayıcı tarafından gönderilen orijinal dosya adını döndürür.

.[caution]
Bu yöntem tarafından döndürülen değere güvenmeyin. Bir istemci, uygulamanızı bozmak veya hacklemek amacıyla kötü amaçlı bir dosya adı gönderebilir.


getSanitizedName(): string .[method]
------------------------------------
Temizlenmiş dosya adını döndürür. Yalnızca ASCII karakterleri içerir `[a-zA-Z0-9.-]`. Ad bu tür karakterler içermiyorsa, 'bilinmeyen' döndürür. Dosya JPEG, PNG, GIF veya WebP görüntüsüyse, doğru dosya uzantısını döndürür.


getUntrustedFullPath(): string .[method]
----------------------------------------
Dizin yüklemesi sırasında tarayıcı tarafından gönderilen özgün tam yolu döndürür. Tam yol sadece PHP 8.1 ve üzeri sürümlerde mevcuttur. Önceki sürümlerde bu yöntem güvenilmeyen dosya ismini döndürür.

.[caution]
Bu yöntem tarafından döndürülen değere güvenmeyin. Bir istemci, uygulamanızı bozmak veya hacklemek amacıyla kötü amaçlı bir dosya adı gönderebilir.


getSize(): int .[method]
------------------------
Yüklenen dosyanın boyutunu döndürür. Yükleme başarılı olmadıysa `0` döndürür.


getTemporaryFile(): string .[method]
------------------------------------
Karşıya yüklenen dosyanın geçici konumunun yolunu döndürür. Yükleme başarılı olmadıysa, `''` döndürür.


isImage(): bool .[method]
-------------------------
Yüklenen dosya bir JPEG, PNG, GIF veya WebP görüntüsü ise `true` döndürür. Algılama, imzasına dayanır. Tüm dosyanın bütünlüğü kontrol edilmez. Bir görüntünün bozuk olup olmadığını örneğin [yüklemeyi |#toImage] deneyerek öğrenebilirsiniz.

.[caution]
PHP uzantısı gerektirir `fileinfo`.


getImageSize(): ?array .[method]
--------------------------------
Bir çift döndürür `[width, height]` yüklenen resmin boyutlarıyla birlikte. Yükleme başarılı olmadıysa veya geçerli bir görüntü değilse, `null` döndürür.


toImage(): Nette\Utils\Image .[method]
--------------------------------------
Bir resmi [Image |utils:images] nesnesi olarak yükler. Yükleme başarılı değilse veya geçerli bir resim değilse, bir `Nette\Utils\ImageException` istisnası atar.
