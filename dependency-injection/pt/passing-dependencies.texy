Dependências de passagem
************************
<div class=perex>


Argumentos, ou "dependências" na terminologia DI, podem ser passados às aulas das seguintes maneiras principais:

* passando por construtor
* passando por método (chamado setter)
* definindo uma propriedade
*por método, anotação ou atributo *injectar*

</div>

Os três primeiros métodos se aplicam em geral em todas as línguas orientadas a objetos, o quarto é específico para os apresentadores Nette, por isso é discutido em [capítulo separado |best-practices:inject-method-attribute]. Vamos agora analisar mais de perto cada uma destas opções e mostrá-las com exemplos específicos.


Injeção do construtor .[#toc-constructor-injection]
===================================================

As dependências são passadas como argumentos para o construtor quando o objeto é criado:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Este formulário é útil para as dependências obrigatórias que a classe precisa absolutamente funcionar, pois sem elas a instância não pode ser criada.

Desde o PHP 8.0, podemos usar uma forma mais curta de notação que é funcionalmente equivalente:

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

A partir do PHP 8.1, uma propriedade pode ser marcada com uma bandeira `readonly` que declara que o conteúdo da propriedade não mudará:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Recipiente DI passa automaticamente as dependências para o construtor usando [a fiação automática |autowiring]. Argumentos que não podem ser passados desta forma (por exemplo, strings, números, booleans) [escrevem na configuração |services#Arguments].


Injeção de setter .[#toc-setter-injection]
==========================================

As dependências são passadas chamando um método que as armazena em uma propriedade privada. A convenção usual de nomenclatura destes métodos é a forma `set*()`, razão pela qual eles são chamados de setters.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Este método é útil para dependências opcionais que não são necessárias para a função de classe, uma vez que não é garantido que o objeto realmente as receberá (ou seja, que o usuário chamará o método).

Ao mesmo tempo, este método permite que o setter seja chamado repetidamente para mudar a dependência. Se isto não for desejável, acrescente uma verificação ao método, ou a partir do PHP 8.1, marque a propriedade `$cache` com a bandeira `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

A chamada do setter é definida na configuração do recipiente DI na [configuração da seção |services#Setup]. Também aqui a passagem automática de dependências é usada por cabeamento automático:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Injeção de propriedade .[#toc-property-injection]
=================================================

As dependências são passadas diretamente para a propriedade:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Este método é considerado inadequado porque a propriedade deve ser declarada como `public`. Assim, não temos controle sobre se a dependência passada será realmente do tipo especificado (isto era verdade antes do PHP 7.4) e perdemos a capacidade de reagir à dependência recém-atribuída com nosso próprio código, por exemplo, para evitar mudanças subseqüentes. Ao mesmo tempo, a propriedade se torna parte da interface pública da classe, o que pode não ser desejável.

A configuração da variável é definida na configuração do recipiente DI na [configuração da seção |services#Setup]:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Qual a maneira de escolher? .[#toc-which-way-to-choose]
=======================================================

- construtor é adequado para as dependências obrigatórias que a classe precisa para funcionar
- o setter, por outro lado, é adequado para dependências opcionais, ou dependências que podem ser alteradas
- variáveis públicas não são recomendadas
