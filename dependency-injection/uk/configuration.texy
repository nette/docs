Налаштування DI-контейнера
**************************

.[perex]
Огляд варіантів конфігурації контейнера Nette DI.


Конфігураційний файл
====================

Контейнером Nette DI легко керувати за допомогою конфігураційних файлів. Зазвичай вони записуються у форматі [NEON format |neon:format]. Ми рекомендуємо використовувати для редагування таких файлів [редактори з підтримкою |best-practices:editors-and-tools#IDE-Editor] цього формату.

<pre>
"decorator .[prism-token prism-atrule]":[#Decorator]: 	"Decorator .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"DI Container .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Extensions]: 	"Встановіть додаткові розширення DI .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Including files]: 	"Включення файлів .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#Parameters]: 	"Параметри .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Автоматична реєстрація сервісів .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Сервіси .[prism-token prism-comment]"
</pre>

.[note]
Щоб записати рядок, що містить символ `%`, вы должны экранировать его удвоением до `%%`.


Параметри .[#toc-parameters]
============================

Можна задати параметри, які потім можуть бути використані як частина визначення сервісу. Це може допомогти розділити значення, які ви хочете змінювати більш регулярно:

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

У будь-якому файлі конфігурації можна посилатися на параметр `foo` через `%foo%` в іншому місці. Вони також можуть використовуватися всередині рядків, таких як `'%wwwDir%/images'`.

Параметри не повинні бути тільки рядками, вони можуть бути також значеннями масиву:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Можна посилатися на окремий ключ так: `%mailer.user%`.

Якщо вам потрібно отримати значення будь-якого параметра у вашому коді, наприклад, у класі, то передайте його цьому класу. Наприклад, у конструкторі. Не існує глобального об'єкта конфігурації, який міг би запитувати значення параметрів. Це суперечить принципу впровадження залежностей.


Сервіси .[#toc-services]
========================

Див. [окремий розділ |services].


Декоратор .[#toc-decorator]
===========================

Як масово редагувати всі сервіси певного типу? Потрібно викликати певний метод для всіх презентерів, що успадковують від певного спільного предка? Ось звідки береться декоратор:

```neon
decorator:
	# Для всіх сервісів, які є екземплярами цього класу або інтерфейсу
	App\Presenters\BasePresenter:
		setup:
			- setProjectId(10)     # викликаємо цей метод
			- $absoluteUrls = true # і задаємо змінну
```

Декоратор також можна використовувати для встановлення [тегів |services#Tags] або ввімкнення [режиму впровадження |services#Inject-Mode].

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

Технічні налаштування контейнера DI:

```neon
di:
	# відображати DIC в панелі налагодження Tracy?
	debugger: ...        # (bool) за замовчуванням true

	# типи параметрів, які не потрібно монтувати автоматично
	excluded: ...        # (string[])

	# клас, від якого успадковується контейнер DI
	parentClass: ...     # (string) за замовчуванням Nette\DI\Container
```


Експорт метаданих .[#toc-metadata-export]
-----------------------------------------

Клас контейнера DI також містить безліч метаданих. Ви можете зменшити його, скоротивши експорт метаданих.

```neon
di:
	export:
		# експортувати параметри
		parameters: false # (bool) за замовчуванням true

		# експортувати теги
		tags:             # (string[]|bool) за замовчуванням усі
			- event.subscriber

		# експортувати дані для автоматичного підключення
		types:            # (string[]|bool) за замовчуванням усі
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

Якщо ви не використовуєте масив `$container->parameters`, можна вимкнути експорт параметрів. Крім того, ви можете експортувати тільки ті теги, через які ви отримуєте сервіси, використовуючи метод `$container->findByTag(...)`.
Якщо ви не викликаєте цей метод зовсім, можна повністю відключити експорт тегів, вказавши значення `false`.

Ви можете значно зменшити метадані для автоматичного підключення, вказавши класи, які ви використовуєте як параметр у методі `$container->getByType()`.
І знову, якщо ви не викликаєте цей метод зовсім (або тільки в [bootstrap |application:bootstrap] для отримання `Nette\Application\Application`), можна повністю відключити експорт, вказавши значення `false`.


Розширення .[#toc-extensions]
=============================

Реєстрація інших розширень DI. Таким чином, ми додаємо, наприклад, DI розширення `Dibi\Bridges\Nette\DibiExtension22` під іменем `dibi`:

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Потім ми налаштовуємо його в секції, яка також називається `dibi`:

```neon
dibi:
	host: localhost
```

Ви також можете додати клас розширення з параметрами:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Файли, що включаються .[#toc-including-files]
=============================================

Додаткові файли конфігурації можуть бути вставлені в секції `includes`:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

Назва `parameters.php` не є друкарською помилкою, конфігурацію також можна записати в PHP-файлі, який повертає її у вигляді масиву:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Якщо в конфігураційних файлах з'являються елементи з однаковими ключами, вони будуть [перезаписані або об'єднані |#Merging] у випадку з масивами. Наступний включений файл має вищий пріоритет, ніж попередній. Файл, у якому вказано секцію `includes`, має вищий пріоритет, ніж файли, включені в нього.


Пошук .[#toc-search]
====================

Автоматичне додавання сервісів у контейнер DI робить роботу надзвичайно приємною. Nette автоматично додає презентери в контейнер, але ви можете легко додати будь-які інші класи.

Просто вкажіть, у яких каталогах (і підкаталогах) слід шукати класи:

```neon
search:
	# ви самі вибираєте назви секцій
	myForms:
		in: %appDir%/Forms

	model:
		in: %appDir%/Model
```

Зазвичай, однак, ми не хочемо додавати всі класи та інтерфейси, тому ми можемо відфільтрувати їх:

```neon
search:
	myForms:
		in: %appDir%/Forms

		# фільтрація за ім'ям файлу (string|string[])
		files:
			- *Factory.php

		# фільтрація за ім'ям класу (string|string[])
		classes:
			- *Factory
```

Або ми можемо вибрати класи, які успадковують або реалізують принаймні один із наступних класів:


```neon
search:
	myForms:
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Ви також можете визначити негативні правила, тобто маски імен класів або предків, і якщо вони відповідають вимогам, сервіс не буде додано в контейнер DI:

```neon
search:
	myForms:
		exclude:
			classes: ...
			extends: ...
			implements: ...
```

Для додаткових сервісів можна визначити теги:

```neon
search:
	myForms:
		tags: ...
```


Об'єднання .[#toc-merging]
==========================

Якщо елементи з однаковими ключами з'являються в кількох конфігураційних файлах, їх буде перезаписано або об'єднано в разі масивів. Пізніший включений файл має вищий пріоритет.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>результат</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Щоб запобігти об'єднанню певного масиву, використовуйте знак оклику відразу після імені масиву:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>result</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>
