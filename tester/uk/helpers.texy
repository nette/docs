Допоміжні класи
***************


DomQuery
--------
`Tester\DomQuery` — це клас, що розширює `SimpleXMLElement` для легкого пошуку в HTML або XML за допомогою CSS-селекторів.

```php
# створення DomQuery з HTML рядка
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# тест існування елементів за допомогою CSS селекторів
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# знаходження елементів як масиву об'єктів DomQuery
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# тест, чи елемент відповідає селектору (з версії 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# знаходження найближчого предка, що відповідає селектору (з 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock
--------
`Tester\FileMock` емулює файли в пам'яті та полегшує тестування коду, який використовує функції `fopen()`, `file_get_contents()`, `parse_ini_file()` тощо. Приклад використання:

```php
# Тестований клас
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Новий порожній файл
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Тестуємо створений вміст
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Це не assertion, а помічник для тестування приватних методів та властивостей об'єктів.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // доступна приватна $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Метод `purge()` створює вказану директорію, а якщо вона вже існує, видаляє весь її вміст. Корисно для створення тимчасової директорії. Наприклад, у `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - директорія вже може існувати

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Тести запускаються паралельно. Іноді, однак, нам потрібно, щоб виконання тестів не перекривалося. Типово для тестів баз даних необхідно, щоб тест підготував вміст бази даних, і інший тест під час його виконання не втручався в базу даних. У цих тестах використовуємо `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Перший параметр — це ім'я блокування, другий — шлях до директорії для збереження блокування. Тест, який отримає блокування першим, виконається, інші тести повинні чекати його завершення.


Environment::bypassFinals() .[filter]
-------------------------------------
Класи або методи, позначені як `final`, важко тестувати. Виклик `Tester\Environment::bypassFinals()` на початку тесту призводить до того, що ключові слова `final` під час завантаження коду пропускаються.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass вже не final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- покращує читабельність виводу помилок (включно з підсвічуванням), інакше виводиться стандартне PHP трасування стека
- вмикає перевірку, що в тесті були викликані assertion, інакше тест без assertion (наприклад, забутих) також пройде
- при використанні `--coverage` автоматично запускає збір інформації про виконаний код (описано далі)
- виводить стан OK або FAILURE в кінці скрипта


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Створює глобальні функції `test()`, `testException()`, `setUp()` та `tearDown()`, за допомогою яких ви можете структурувати тести.

```php
test('опис тесту', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Дозволяє з'ясувати, чи був тест запущений безпосередньо, чи за допомогою Tester'а.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# запущено Tester'ом
} else {
	# запущено інакше
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester запускає тести паралельно у вказаній кількості потоків. Якщо нас цікавить номер потоку, ми дізнаємося його зі змінної середовища:

```php
echo "Працюю в потоці номер " . getenv(Tester\Environment::VariableThread);
```
