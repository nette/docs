Fájlrendszer
************

.[perex]
Az [api:Nette\Utils\FileSystem] egy osztály hasznos függvényekkel a fájlrendszerrel való munkához. Az egyik előnye a natív PHP függvényekkel szemben, hogy hiba esetén kivételt dobnak.


Ha fájlokat kell keresnie a lemezen, használja a [Finder |finder]-t.

Telepítés:

```shell
composer require nette/utils
```

A következő példák feltételezik a következő alias létrehozását:

```php
use Nette\Utils\FileSystem;
```


Manipuláció
===========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Lemásolja a fájlt vagy a teljes könyvtárat. Alapértelmezett beállításként felülírja a létező fájlokat és könyvtárakat. A `false` értékre állított `$overwrite` paraméterrel `Nette\InvalidStateException` kivételt vált ki, ha a célfájl vagy könyvtár `$target` létezik. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Létrehozza a könyvtárat, ha nem létezik, beleértve a szülőkönyvtárakat is. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Törli a fájlt vagy a teljes könyvtárat, ha létezik. Ha a könyvtár nem üres, először a tartalmát törli. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Beállítja a fájl jogosultságait `$fileMode`-ra vagy a könyvtárnak `$dirMode`-ra. Rekurzívan bejárja és beállítja a jogosultságokat a könyvtár teljes tartalmára is.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Megnyitja a fájlt és resource-t ad vissza. A `$mode` paraméter ugyanúgy működik, mint a natív `fopen()`:https://www.php.net/manual/en/function.fopen.php függvénynél. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Visszaadja a `$file` fájl tartalmát. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Soronként olvassa be a fájl tartalmát. Ellentétben a natív `file()`:https://www.php.net/manual/en/function.file.php függvénnyel, nem tölti be az egész fájlt a memóriába, hanem folyamatosan olvassa, így a rendelkezésre álló memóriánál nagyobb fájlokat is lehet olvasni. A `$stripNewLines` megmondja, hogy el kell-e távolítani a `\r` és `\n` sorvégi karaktereket.
Hiba esetén `Nette\IOException` kivételt vált ki.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Átnevezi vagy áthelyezi a `$origin` fájlt vagy könyvtárat. Alapértelmezett beállításként felülírja a létező fájlokat és könyvtárakat. A `false` értékre állított `$overwrite` paraméterrel `Nette\InvalidStateException` kivételt vált ki, ha a célfájl vagy könyvtár `$target` létezik. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Beírja a `$content` stringet a `$file` fájlba. Hiba esetén `Nette\IOException` kivételt vált ki.

```php
FileSystem::write('/path/to/file', $content);
```


Elérési utak
============


isAbsolute(string $path): bool .[method]
----------------------------------------

Megállapítja, hogy a `$path` elérési út abszolút-e.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Összefűzi az elérési út összes szegmensét és normalizálja az eredményt.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizálja a `..` és `.` karaktereket, valamint a könyvtárelválasztókat az elérési úton rendszerspecifikusra.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Perjeleket `/`-re konvertálja, amelyeket unix rendszerekben használnak.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Perjeleket az aktuális platformra jellemző karakterekre konvertálja, azaz `\` Windows alatt és `/` máshol.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Levezeti a végső elérési utat a `$path` elérési útból az `$basePath` alapkönyvtárhoz képest. Az abszolút elérési utakat (`/foo`, `C:/foo`) változatlanul hagyja (csak a perjeleket normalizálja), a relatív elérési utakat hozzáfűzi az alap elérési úthoz.

```php
// Windows alatt a kimenetben lévő perjelek fordítottak lennének (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Statikus vs nem statikus hozzáférés
===================================

Annak érdekében, hogy például tesztelési célokra könnyen helyettesíthessék az osztályt egy másikkal (mockkal), használja nem statikusan:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
