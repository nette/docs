Вклад в код
***********

.[perex]
Вы планируете внести свой вклад в Nette Framework и вам необходимо ознакомиться с правилами и процедурами? Это руководство для начинающих расскажет вам о том, как эффективно вносить вклад в код, работать с репозиториями и внедрять изменения.


Процедура .[#toc-procedure]
===========================

Чтобы внести свой вклад в код, необходимо иметь учетную запись на [GitHub |https://github.com] и быть знакомым с основами работы с системой контроля версий Git. Если вы не знакомы с Git, вы можете ознакомиться с [git - простым руководством |https://rogerdudler.github.io/git-guide/] и рассмотреть возможность использования одного из многочисленных [графических клиентов |https://git-scm.com/downloads/guis].


Подготовка среды и репозитория .[#toc-preparing-the-environment-and-repository]
-------------------------------------------------------------------------------

1) На GitHub создайте [форк |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] [репозитория пакета |www:packages], который вы собираетесь изменить
2) [Клонируйте |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] этот репозиторий на свой компьютер
3) Установите зависимости, включая [Nette Tester |tester:], с помощью команды `composer install`.
4) Убедитесь, что тесты работают, выполнив команду `composer tester`
5) Создайте [новую ветку |#New Branch] на основе последней выпущенной версии


Внедрение собственных изменений .[#toc-implementing-your-own-changes]
---------------------------------------------------------------------

Теперь вы можете внести собственные изменения в код:

1) Внесите желаемые изменения и не забудьте о тестах
2) Убедитесь, что тесты успешно выполняются `composer tester`
3) Проверьте, соответствует ли код [стандартам кодирования |#coding standards]
4) Сохраните (зафиксируйте) изменения с описанием в [таком формате |#Commit Description]

Вы можете создать несколько коммитов, по одному для каждого логического шага. Каждый коммит должен быть значимым сам по себе.


Представление изменений .[#toc-submitting-changes]
--------------------------------------------------

После того как вы будете удовлетворены изменениями, вы можете отправить их:

1) Внесите изменения на GitHub в свой форк.
2) Оттуда отправьте их в репозиторий Nette, создав [pull request|https://help.github.com/articles/creating-a-pull-request] внесение изменений (PR).
3) Предоставьте [достаточную информацию |#pull request description] в описании


Включение обратной связи .[#toc-incorporating-feedback]
-------------------------------------------------------

Теперь ваши коммиты видны другим. Часто можно получить комментарии с предложениями:

1) Следить за предлагаемыми изменениями
2) Включить их в новые коммиты или [объединить с предыдущими |https://help.github.com/en/github/using-git/about-git-rebase]
3) Повторно отправить исправления на GitHub, и они автоматически появятся в запросе на исправление.

Никогда не создавайте новый pull request для изменения существующего.


Документация .[#toc-documentation]
----------------------------------

Если вы изменили функциональность или добавили новую, не забудьте также [добавить ее в документацию |documentation].


Новый филиал .[#toc-new-branch]
===============================

Если возможно, вносите изменения в последнюю выпущенную версию, т.е. в последний тег в ветке. Для тега v3.2.1 создайте ветку с помощью этой команды:

```shell
git checkout -b new_branch_name v3.2.1
```


Стандарты кодирования .[#toc-coding-standards]
==============================================

Ваш код должен соответствовать [стандартам кодирования |coding standard], используемым в Nette Framework. Существует автоматический инструмент для проверки и исправления кода. Вы можете установить его **глобально** через Composer в выбранную вами папку:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Теперь вы должны быть в состоянии запустить инструмент в терминале. Первая команда проверяет, а вторая исправляет код в папках `src` и `tests` в текущем каталоге:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Описание обязательств .[#toc-commit-description]
================================================

В Nette темы коммитов имеют следующий формат: `Presenter: fixed AJAX detection [Closes #69]`

- область, за которой следует двоеточие
- цель фиксации в прошедшем времени; если возможно, начинайте с таких слов, как: added, fixed, refactored, changed, removed
- если коммит нарушает обратную совместимость, добавьте "BC break"
- любая связь с трекером проблем, например, `(#123)` или `[Closes #69]`
- после темы может быть одна пустая строка, за которой следует более подробное описание, включая, например, ссылки на форум


Описание Pull Request .[#toc-pull-request-description]
======================================================

При создании pull request интерфейс GitHub позволит вам ввести название и описание. Укажите лаконичное название и включите в описание как можно больше информации о причинах вашего изменения.

Также укажите в заголовке, является ли это новой функцией или исправлением ошибки, и может ли это привести к проблемам обратной совместимости (BC break). Если существует связанная с ним проблема, укажите ссылку на нее, чтобы она была закрыта после одобрения запроса.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
