Configuring
#####################

/--div .[perex]
System container is a DI container holding all the services and parameters needed for the application to run.
Soon you will be able to:

- create the system container
- configure your application using NEON files
- handle production and development modes
- create and use your own container extensions
\--

*This page is still being prepared*

System container is a static [Dependency Injection container |dependency-injection#toc-nette-di-container], that holds all services and parameters the application needs. This means not only services of the framework itself, but of each library you have decided to use. Take a look at an example of such [system container |configuring/systemcontainer].

Developers learned that writing containers is a very tedious work. And it surely gets difficult to manage the application as it grows. Nette will do the work for you! With a simple configuration language we will describe services of the application and the framework will generate the PHP code. In all seriousness - the container linked above was generated this way as well.


Configurator
************

The task of code generation is given to [Nette\Configurator|api:] class. The compilation process is triggered only once and its result is cached. For that reason we need to choose a directory for storing this code.

/--php
$configurator = new Nette\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');
\--

Now we just add a path to the config file:

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
\--

And getting container's instance is the simplest one:

/--php
// returns SystemContainer instance
$container = $configurator->createContainer();
\--


Running in different modes
==========================

Configurator attempts to detect if the application is running on production or development server. As long as the server's IP address is 127.0.0.1 it is considered as in development mode. Get the current mode using `isProductionMode()` method and change it using `setProductionMode()`.


RobotLoader
===========

To compile the container Configurator needs to load all the classes mentioned in configuration files. It is most handy to have auto-loading at your disposal and Configurator offers a method creating an instance of RobotLoader. We only list the directories to be indexed and activate the loader. Do not forget to place this code before calling `createContainer()`.

/--php
$configurator->createRobotLoader()
	->addDirectory(APP_DIR)
	->addDirectory(LIBS_DIR)
	->register();
\--


Configuration using NEON files
******************************

Have fun trying out the syntax at http://ne-on.org.


Services definitions
====================

/--code neon
services:
	database: Nette\Database\Connection(%dsn%, %user%, %password%)

# or multi-lines
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)

# or more multi-lines :-)
	database:
		class: Nette\Database\Connection
		arguments: [%dsn%, %user%, %password%]
\--

Generates:

/--php
	function createServiceDatabase()
	{
		return new Nette\Database\Connection(
			$this->parameters['dsn'],
			$this->parameters['user'],
			$this->parameters['password']
		);
	}
\--


Service definition:

/--code neon
services:
	database:
		class: Nette\Database\Connection
		factory: DbFactory::createConnection

\--

`DbFactory::createConnection`:

/--php
class DbFactory
{
	static function createConnection(Nette\DI\Container $container)
	{
		...
	}
}
\--

Generates:

/--php
	function createServiceDatabase()
	{
		return DbFactory::createConnection($this);
	}
\--




Setup
=====

/--code neon
services:
	database:
		class: Nette\Database\Connection(%dsn%, %user%, %password%)
		setup:
			- setCacheStorage(@cacheStorage)

\--

Generates:

/--php
	function createServiceDatabase()
	{
		$service = new Nette\Database\Connection(...);
		$service->setCacheStorage($this->cacheStorage);
		return $service;
	}
\--

Autowiring feature adds dependencies automatically, so they don't even have to be mentioned:

/--code neon
setup:
	- setCacheStorage
\--

In case the `cacheStorage` service does not exist, it is possible to use a result of a call as a parameter:

/--code neon
setup:
	- setCacheStorage( Factory::createStorage() )

# or a method of other service:
	- setCacheStorage( @factory::createStorage() )
\--

Alternatively a newly created class instance:

/--code neon
setup:
	- setCacheStorage( Nette\Caching\Storages\FileStorage(%tempDir%) )

# generates: $service->setCacheStorage(new Nette\Caching\Storages\FileStorage(...));
\--

You can also set a value of a property:

substitutions
/--code neon
setup:
	- $substitutions( [db: test] )

# generates: $service->substitutions = array('db' => 'test');
\--


Full example:

/--code neon
parameters:
	database:
		driver: mysql
		host: localhost
		dbname: test
		user: jim
		password: beam
		substitutions:
			db: test

services:
	database:
		class: Nette\Database\Connection(
			'%database.driver%:host=%database.host%;dbname=%database.dbname%',
			%database.user%, %database.password%, null,
			Nette\Database\Reflection\DiscoveredReflection()
		)
		setup:
			- setCacheStorage
			- $substitutions( %database.substitutions% )

\--


Service definitions inheritance
===============================

/--code neon
services:
	dev_database < database
		setup:
			- Diagnostics\ConnectionPanel::initialize

\--


Factories
=========

Factories are defined in almost the same way as services:

/--code neon
factories:
	article:
		class: Article
\--

Generates:

/--php
	function createArticle()
	{
		return new Article($this->database);
	}
\--

Factory is called directly like `$article = $container->createArticle();`

Unlike services a factory can accept parameters:

/--code neon
factories:
	article:
		parameters: [id, title: null]
		class: Article(..., %id%)
		setup:
			- $title(%title%)

\--

Generates:

/--php
	function createArticle($id, $title = NULL)
	{
		$service = new Article($this->database, $id);
		$service->title = $title;
		return $service;
	}
\--



Auto-wiring
***********

Auto-wiring feature can automatically pass dependencies into constructor and methods of the service. It uses typehinting and `@return` annotations. There can be only one service matching the type in the container, otherwise an exception is thrown.

To define more than one service of the same type we need to exclude them from auto-wiring:

/--code neon
services:
	cacheStorage:
		class: Nette\Caching\Storages\FileStorage(%tempDir%)

	tempCacheStorage:
		class: Nette\Caching\Storages\DevNullStorage
		autowired: no

\--


When modifying the Nette Framework's core services we need to make sure the container is aware of the classes we want to use. That means using fully qualified class names in `@return` annotations or set the FQ class name with `class` entry.


Multiple configuration files
****************************

Use `includes` section to add more configuration files.

/--code neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

Configuration merging process assigns the highest priority to the file containing `includes` section and the lowest priority to the first included file. To prevent merging of a certain array use exclamation mark right after the name of the array:

/--code neon
argument!: [1, 2, 3]
\--



{{themeicon: config.png}}
{{care: David Grudl|2}}
