Píšeme první aplikaci!
**********************

.[perex]
Poznejme spolu Nette Framework, při vytváření jednoduchého blogu s komentáři. Jdeme na to!

Již po prvních dvou kapitolách budeme mít svůj vlastní funkční blog a budeme moci publikovat své skvělé příspěvky i když funkce budou zatím do značné míry omezeny. Měli byste si přečíst také následující kapitoly, kde si naprogramujeme přidávání komentářů, editování článků a na závěr blog zabezpečíme.

Kompletní aplikaci naleznete [na GitHubu |https://github.com/nette/tutorial-quickstart/tree/v3.0].

Nainstalujte si prosím [kvalitní IDE a všechny potřebné pluginy |/editors-and-tools], nesmírně vás to zefektivní.

Tento QuickStart byl napsán pro Nette Framework 3.0 a PHP 7.1, nebo novější. Úplně první věc, kterou bychom měli udělat, je zkontrolovat, zda náš server splňuje [požadavky|/requirements] pro běh Nette Frameworku. To by s největší pravděpodobností mělo být v pořádku, ale jen pro jistotu, nechceme začínat na nefunkčním prostředí.

Nette Framework můžeme stáhnout manuálně, ale doporučená cesta je začít nový projekt s využitím [Composeru |/composer]. Pokud Composer neznáte, určitě byste měli začít s ním. Je to velice jednoduchý a užitečný nástroj, vše se dozvíte v [dokumentaci Composeru|https://getcomposer.org/doc/].

S Composerem si můžeme velmi jednoduše stáhnout a nainstalovat základní skeleton aplikace, známý jako Web Project, který již obsahuje Nette Framework. Abychom mohli založit projekt, najdeme si kořenový adresář webového serveru (např. `/var/www` nebo `C:\InetPub`) a pomocí příkazové řádky a spustíme následující příkaz.

```shell
composer create-project nette/web-project nette-blog
```

Web Project se následně stáhne do složky `nette-blog`.

.[note]
Pokud nechcete použít Composer, [stáhněte si archív |https://github.com/nette/web-project/archive/preloaded.zip] a rozbalte jej a zkopírujte do kořenového adresáře webového serveru a přejmenujte na `nette-blog`. Framework se nachází ve složce `vendor`.

Pokud vyvíjíte na macOS nebo na Linuxu (nebo na jakémkoliv jiném systému založeném na Unixu), budeme muset ještě [nastavit práva zápisu|/troubleshooting#Nastavení práv adresářů] webovému serveru.


Uvítací stránka
===============

V tento okamžik by měla již úvodní stránka Web Projectu fungovat. Vyzkoušíme to otevřením prohlížeče na následující URL adrese:

```
http://localhost/nette-blog/www/
```

a uvidíme úvodní stránku Nette Frameworku:

[* qs-welcome.png *]

Aplikace funguje a můžete začít dělat úpravy.


Obsah Web Projectu
==================

Web Project má následující strukturu:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← adresář s aplikací
│   ├── <b>config/</b>       ← konfigurační soubory
│   ├── <b>Presenters/</b>   ← třídy presenterů
│   │   └── <b>templates/</b>← šablony
│   ├── <b>Router/</b>       ← konfigurace URL adres
│   └── <b>Bootstrap.php</b> ← zaváděcí třída Bootstrap
├── <b>bin/</b>              ← skripty spouštěné z příkazové řádky
├── <b>log/</b>              ← logování chyb
├── <b>temp/</b>             ← dočasné soubory, cache, …
├── <b>vendor/</b>           ← knihovny instalované Composerem
│   └── <b>autoload.php</b>  ← autoloading všech nainstalovaných balíčků
└── <b>www/</b>              ← veřejný adresář - jediný přístupný z prohlížeče
    └── <b>index.php</b>     ← prvotní soubor, kterým se aplikace spouští
\--

Adresář `www` je určen pro ukládání obrázků, JavaScript souborů, CSS stylů a dalších veřejně přístupných souborů. Pouze tento adresář je přístupný z internetu, takže nastavte kořenový adresář vaší aplikace tak, aby směřoval právě sem (to můžete nastavit v konfiguraci Apache, ale pojďme to udělat později, teď to není důležité).

Nejdůležitější složka je pro nás `app/`. Zde nalezneme soubor `Bootstrap.php`, ve kterém je třída slouží k načtení celého frameworku a nastavení aplikace. Aktivuje se zde [autoloading |/robotloader], nastaví se zde [debugger |tracy:homepage] a [routy |/routing].



Úklid
=====

Web Project obsahuje úvodní stránku, kterou smažeme předtím, než začneme něco programovat - bez obav tedy nahradíme obsah souboru `app/Presenters/templates/Homepage/default.latte` za "Hello world!".


[* qs-hello.png *]


Tracy (debugger)
================

Extrémně důležitý nástroj pro vývoj je [ladicí nástroj Tracy |tracy:]. Vyzkoušejte si vyvolání nějaké chyby v souboru `app/Presenters/HomepagePresenter.php` (např. odstraněním složené závorky v definici třídy HomepagePresenter) a podívejte se, co se stane. Vyskočí oznamovací stránka, která chybu srozumitelně popisuje.

[* qs-tracy.png .(debugger screen) *]

Tracy nám ohromně pomůže, až budeme hledat chyby v aplikaci. Také si všimněte plovoucího Tracy Baru v pravém dolním rohu obrazovky, který obsahuje informace z běhu aplikace.

[* qs-tracybar.png *]

V produkčním módu je Tracy samozřejmě vypnuta a nezobrazuje žádné citlivé informace. Všechny chyby jsou v tomto případě uloženy ve složce `log/`. Pojďme si to vyzkoušet, v souboru `app/Bootstrap.php` odkomentujeme následující řádek a změníme parametr volání na `false`, aby kód vypadal takto:

```php .{data-file:app/Bootstrap.php}
$configurator->setDebugMode(false);
$configurator->enableTracy(__DIR__ . '/../log');
```

Po obnovení stránky již Tracy neuvidíme. Místo ní se zobrazí uživatelsky přívětivá zpráva:

[* qs-fatal.png .(error screen) *]

Nyní se podívejme do adresáře `log/`. Zde (v souboru exception.log) nalezneme zalogovanou chybu a také již známou stránku s chybovou hláškou (uloženou jako HTML soubor s názvem začínající na `exception-`).

Zakomentujeme opět řádek `// $configurator->setDebugMode(false);`. Tracy automaticky povolí vývojářský režim na localhostu a zakáže ho všude jinde.

Chybu, kterou jsme vytvořili, můžeme opravit a pokračovat v psaní aplikace.
