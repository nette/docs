Sesiuni
*******

<div class=perex>

HTTP este un protocol fără stare, însă aproape orice aplicație are nevoie să păstreze starea între cereri, de exemplu conținutul coșului de cumpărături. Tocmai pentru aceasta servesc sesiunile. Vom arăta,

- cum să utilizați sesiunile
- cum să preveniți conflictele de nume
- cum să setați expirarea

</div>

La utilizarea sesiunilor, fiecare utilizator primește un identificator unic numit ID de sesiune, care este transmis într-un cookie. Acesta servește drept cheie pentru datele sesiunii. Spre deosebire de cookie-uri, care sunt stocate pe partea browserului, datele din sesiune sunt stocate pe partea serverului.

Sesiunea o setăm în [configurație |configuration#session], importantă fiind în special alegerea timpului de expirare.

Gestionarea sesiunii este responsabilitatea obiectului [api:Nette\Http\Session], la care ajungeți solicitându-l prin [injecție de dependențe |dependency-injection:passing-dependencies]. În presentere, este suficient să apelați `$session = $this->getSession()`.

→ [Instalare și cerințe |@home#Instalace]


Pornirea sesiunii
=================

Nette, în setarea implicită, pornește automat sesiunea în momentul în care începem să citim sau să scriem date în ea. Manual, sesiunea se pornește folosind `$session->start()`.

PHP trimite la pornirea sesiunii antete HTTP care afectează stocarea în cache, vezi [php:session_cache_limiter], și eventual și un cookie cu ID-ul sesiunii. De aceea, este necesar să porniți întotdeauna sesiunea înainte de a trimite orice ieșire către browser, altfel se va arunca o excepție. Deci, dacă știți că în timpul randării paginii se va utiliza sesiunea, porniți-o manual înainte, de exemplu în presenter.

În modul de dezvoltare, Tracy pornește sesiunea, deoarece o utilizează pentru afișarea barelor cu redirecționări și cereri AJAX în Tracy Bar.


Secțiuni
========

În PHP pur, stocarea datelor sesiunii este realizată ca un array accesibil prin variabila globală `$_SESSION`. Problema este că aplicațiile sunt compuse în mod obișnuit dintr-o serie de părți independente reciproc și dacă toate au la dispoziție doar un singur array, mai devreme sau mai târziu va apărea o coliziune de nume.

Nette Framework rezolvă problema împărțind întregul spațiu în secțiuni (obiecte [api:Nette\Http\SessionSection]). Fiecare unitate utilizează apoi propria secțiune cu un nume unic și nicio coliziune nu mai poate avea loc.

Obținem secțiunea din sesiune:

```php
$section = $session->getSection('nume-unic');
```

În presenter este suficient să folosim `getSession()` cu parametru:

```php
// $this este Presenter
$section = $this->getSession('nume-unic');
```

Existența secțiunii poate fi verificată cu metoda `$session->hasSection('nume-unic')`.

Cu secțiunea însăși se lucrează apoi foarte ușor folosind metodele `set()`, `get()` și `remove()`:

```php
// scriere variabilă
$section->set('userName', 'franta');

// citire variabilă, returnează null dacă nu există
echo $section->get('userName');

// anulare variabilă
$section->remove('userName');
```

Pentru a obține toate variabilele dintr-o secțiune, se poate utiliza bucla `foreach`:

```php
foreach ($section as $key => $val) {
	echo "$key = $val";
}
```


Setarea expirării
-----------------

Pentru secțiuni individuale sau chiar variabile individuale se poate seta expirarea. Putem astfel lăsa autentificarea utilizatorului să expire după 20 de minute, dar în același timp să păstrăm conținutul coșului.

```php
// secțiunea expiră după 20 de minute
$section->setExpiration('20 minutes');
```

Pentru setarea expirării variabilelor individuale servește al treilea parametru al metodei `set()`:

```php
// variabila 'flash' va expira după 30 de secunde
$section->set('flash', $message, '30 seconds');
```

.[note]
Nu uitați că timpul de expirare al întregii sesiuni (vezi [configurarea sesiunii|configuration#session]) trebuie să fie egal sau mai mare decât timpul setat pentru secțiunile sau variabilele individuale.

Anularea expirării setate anterior se realizează cu metoda `removeExpiration()`. Anularea imediată a întregii secțiuni este asigurată de metoda `remove()`.


Evenimentele $onStart, $onBeforeWrite
-------------------------------------

Obiectul `Nette\Http\Session` are [evenimente|nette:glossary#Události] `$onStart` și `$onBeforeWrite`, deci puteți adăuga callback-uri care se declanșează după pornirea sesiunii sau înainte de scrierea ei pe disc și închiderea ulterioară.

```php
$session->onBeforeWrite[] = function () {
	// scriem datele în sesiune
	$this->section->set('basket', $this->basket);
};
```


Gestionarea sesiunii
====================

Prezentare generală a metodelor clasei `Nette\Http\Session` pentru gestionarea sesiunii:

<div class=wiki-methods-brief>


start(): void .[method]
-----------------------
Pornește sesiunea.


isStarted(): bool .[method]
---------------------------
Sesiunea este pornită?


close(): void .[method]
-----------------------
Închide sesiunea. Sesiunea se închide automat la sfârșitul rulării scriptului.


destroy(): void .[method]
-------------------------
Închide și șterge sesiunea.


exists(): bool .[method]
------------------------
Cererea HTTP conține un cookie cu ID-ul sesiunii?


regenerateId(): void .[method]
------------------------------
Generează un nou ID de sesiune aleatoriu. Datele rămân păstrate.


getId(): string .[method]
-------------------------
Returnează ID-ul sesiunii.

</div>


Configurație
------------

Sesiunea o setăm în [configurație |configuration#session]. Dacă scrieți o aplicație care nu utilizează containerul DI, pentru configurare servesc aceste metode. Trebuie apelate înainte de pornirea sesiunii.

<div class=wiki-methods-brief>


setName(string $name): static .[method]
---------------------------------------
Setează numele cookie-ului în care se transmite ID-ul sesiunii. Numele standard este `PHPSESSID`. Este util în cazul în care pe același site web rulați mai multe aplicații diferite.


getName(): string .[method]
---------------------------
Returnează numele cookie-ului în care se transmite ID-ul sesiunii.


setOptions(array $options): static .[method]
--------------------------------------------
Configurează sesiunea. Se pot seta toate [directivele de sesiune |https://www.php.net/manual/en/session.configuration.php] PHP (în format camelCase, de ex. în loc de `session.save_path` scriem `savePath`) și, de asemenea, [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters].


setExpiration(?string $time): static .[method]
----------------------------------------------
Setează perioada de inactivitate după care sesiunea expiră.


setCookieParameters(string $path, ?string $domain=null, ?bool $secure=null, ?string $samesite=null): static .[method]
---------------------------------------------------------------------------------------------------------------------
Setarea parametrilor pentru cookie. Valorile implicite ale parametrilor le puteți modifica în [configurație|configuration#Session cookie].


setSavePath(string $path): static .[method]
-------------------------------------------
Setează directorul unde se salvează fișierele cu sesiuni.


setHandler(\SessionHandlerInterface $handler): static .[method]
---------------------------------------------------------------
Setarea unui handler personalizat, vezi [documentația PHP|https://www.php.net/manual/en/class.sessionhandlerinterface.php].

</div>


Securitatea înainte de toate
============================

Serverul presupune că comunică în continuare cu același utilizator, atâta timp cât cererile sunt însoțite de același ID de sesiune. Sarcina mecanismelor de securitate este să asigure că acest lucru se întâmplă într-adevăr și că nu este posibilă furtul sau substituirea identificatorului.

Nette Framework configurează, prin urmare, corect directivele PHP, astfel încât ID-ul sesiunii să fie transmis doar în cookie, să fie inaccesibil pentru JavaScript și să ignore eventualii identificatori din URL. În plus, în momente critice, cum ar fi autentificarea utilizatorului, generează un nou ID de sesiune.

.[note]
Pentru configurarea PHP se utilizează funcția ini_set, pe care, din păcate, unele hostinguri o interzic. Dacă este și cazul hosterului dvs., încercați să discutați cu el pentru a vă permite funcția sau cel puțin pentru a configura serverul.
