Виконання тестів
****************

.[perex]
Найпомітнішою частиною Nette Tester є програма запуску тестів з командного рядка. Він надзвичайно швидкий і надійний, оскільки автоматично запускає
усі тести як окремі процеси паралельно в кількох потоках. Він також може працювати самостійно в так званому сторожовому режимі.

Програма запуску тестів Nette Tester викликається з командного рядка. Як параметр ми передамо каталог із тестами. Для поточного каталогу достатньо ввести крапку:

/--pre .[terminal]
vendor/bin/tester .
\--

Під час виклику програма запуску тестів сканує зазначену директорію і всі піддиректорії та шукає тести, які являють собою файли `*.phpt` і `*Test.php`. Вона також читає й оцінює їхні [анотації |test-annotations], щоб знати, які з них і як запускати.

Потім він виконує тести. Для кожного виконаного тесту бігунок друкує один символ, що вказує на прогрес:

- <code style="color: #CCC; background-color: #000">.</code> - тест пройдено
- <code style="color: #CCC; background-color: #000">s</code> - тест пропущено
- <code style="color: #FFF; background-color: #900">F</code> - тест не пройдено

Висновок може мати такий вигляд:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Note: No php.ini is used.
PHP 7.4.8 (cli) | php -n | 8 threads

........s..........................

<span style="color: #FFF; background-color: #090">OK (35 tests, 1 skipped, 1.7 seconds)</span>
\--

Під час повторного запуску спочатку запускаються тести, які не пройшли під час попереднього запуску, тому ви одразу дізнаєтеся, чи виправили ви помилку.

Код виходу Tester дорівнює нулю, якщо жоден тест не пройшов. В іншому разі - ненульовий.

.[warning]
Tester запускає процеси PHP без `php.ini`. Детальніша інформація в розділі [Власний php.ini |#Own-php-ini].


Параметри командного рядка .[#toc-command-line-options]
=======================================================

Ми отримуємо огляд опцій командного рядка, запускаючи Tester без параметрів або з опцією `-h`:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Использование:
    tester [параметры] [<тестовый файл> | <каталог>]...

Параметры:
    -p <путь>                    Укажите интерпретатор PHP для запуска (по умолчанию: php).
    -c <path>                    Искать php.ini файл (или искать в директории) <path>.
    -C                           Использовать общесистемный php.ini.
    -l | --log <путь>            Запись журнала в файл <путь>.
    -d <ключ=значение>...        Определить INI-запись 'key' со значением 'value'.
    -s                           Показать информацию о пропущенных тестах.
    --stop-on-fail               Остановить выполнение при первом сбое.
    -j <num>                     Выполнять <num> заданий параллельно (по умолчанию: 8).
    -o <console|tap|junit|none>  Указать формат вывода.
    -w | --watch <путь>          Каталог просмотра.
    -i | --info                  Показать информацию об окружении тестов и выйти.
    --setup <путь>               Сценарий для настройки бегущей строки.
    --temp <путь>                Путь к временному каталогу. По умолчанию: sys_get_temp_dir().
    --colors [1|0]               Включить или отключить цвета.
    --coverage <путь>            Генерировать отчет о покрытии кода в файл.
    --coverage-src <путь>        Путь к исходному коду.
    -h | --help                  Это справка.
\--


-p <path>
---------
Вказує бінарний файл PHP, який буде використовуватися для запуску тестів. За замовчуванням це `php`.

/--pre .[terminal]
tester -p /home/user/php-7.2.0-beta/php-cgi tests
\--


-c <path>
---------
Вказує, який `php.ini` буде використовуватися під час виконання тестів. За замовчуванням php.ini не використовується. Для отримання додаткової інформації дивіться [Власний php.ini |#Own-php-ini].


-C
---
Використовується загальносистемний `php.ini`. Тому на платформі UNIX усі файли `/etc/php/{sapi}/conf.d/*.ini` теж. Див. [власний |#Own-php-ini] розділ [php.ini |#Own-php-ini].


''-l | --log <path>''
---------------------
Хід тестування записується у файл. Усі невдалі, пропущені, а також успішні тести:

/--pre .[terminal]
tester --log /var/log/tests.log tests
\--


-d <key=value>
--------------
Встановлює значення директиви конфігурації PHP для тестів. Параметр може бути використаний кілька разів.

/--pre .[terminal]
tester -d max_execution_time=20
\--


-s
---
Буде показано інформацію про пропущені тести.


--stop-on-fail
--------------
Tester припиняє тестування при першому невдалому тесті.


-j <num>
--------
Тести запускаються в `<num>` паралельно. Значення за замовчуванням - 8. Якщо ми хочемо запускати тести послідовно, ми використовуємо значення 1.


-o <console|tap|junit|none>
---------------------------
Формат виведення. За замовчуванням - консольний формат.

- `console`: те саме, що і за замовчуванням, але ASCII-логотип у цьому випадку не друкується.
- `tap`: [формат TAP |https://en.wikipedia.org/wiki/Test_Anything_Protocol], придатний для машинної обробки
- `junit`: формат JUnit XML, також придатний для машинної обробки.
- `none`: нічого не друкується


''-w | --watch <path>''
-----------------------
Tester не завершується після завершення тестів, а продовжує запускати і спостерігати за PHP-файлами в заданому каталозі. При зміні параметрів він запускає тести знову. Параметр може бути використаний кілька разів, якщо ми хочемо контролювати кілька директорій.

Це зручно під час рефакторингу бібліотеки або налагодження тестів.

/--pre .[terminal]
tester --watch src tests
\--


''-i | --info''
---------------
Вона показує інформацію про тестове оточення. Наприклад:

/--pre .[terminal]
tester -p /usr/bin/php7.1 -c tests/php.ini --info

<span style="color: #0F0">PHP binary:</span>
/usr/bin/php7.1

<span style="color: #0F0">PHP version:</span>
7.1.7-1+0~20170711133844.5+jessie~1.gbp5284f4 (cli)

<span style="color: #0F0">Code coverage engines:</span>
(not available)

<span style="color: #0F0">Loaded php.ini files:</span>
/var/www/dev/demo/tests/php.ini

<span style="color: #0F0">PHP temporary directory:</span>
/tmp

<span style="color: #0F0">Loaded extensions:</span>
Core, ctype, date, dom, ereg, fileinfo, filter, hash, ...
\--


--setup <path>
--------------
Tester під час запуску завантажує заданий PHP-скрипт. У ньому є змінна `Tester\Runner\Runner $runner`. Припустимо, файл `tests/runner-setup.php`:

```php
$runner->outputHandlers[] = new MyOutputHandler;
```

і запустимо Tester:

/--pre .[terminal]
tester --setup tests/runner-setup.php tests
\--


--temp <path>
-------------
Задає шлях до директорії для тимчасових файлів Tester. Значення за замовчуванням повертає `sys_get_temp_dir()`. Якщо значення за замовчуванням недійсне, ви будете повідомлені про це.

Якщо ми не впевнені, який каталог використовується, ми можемо запустити Tester з параметром `--info`.


--colors 1|0
------------
Tester за замовчуванням визначає термінал з підтримкою кольору і забарвлює його виведення. Ця опція доповнює автовизначення. Ми можемо задати розмальовку глобально за допомогою системної змінної оточення `NETTE_TESTER_COLORS`.


--coverage <path>
-----------------
Tester згенерує звіт з оглядом того, наскільки вихідний код покритий тестами. Ця опція вимагає ввімкненого розширення PHP [Xdebug |https://xdebug.org/] або [PCOV |https://github.com/krakjoe/pcov], або PHP 7 з PHPDBG SAPI, що швидше. Розширення кінцевого файлу визначає формат вмісту. HTML або Clover XML.

/--pre .[terminal]
tester tests --coverage coverage.html  # HTML report
tester tests --coverage coverage.xml   # Clover XML report
\--

Пріоритет при виборі механізму збору наступний:
1) PCOV
2) PHPDBG
3) Xdebug

Великі тести можуть вийти з ладу під час виконання PHPDBG через вичерпання пам'яті. Збір даних про покриття є операцією, що займає багато пам'яті. У цьому випадку може допомогти виклик `Tester\CodeCoverage\Collector::flush()` всередині тесту. Це дасть змогу вивантажити зібрані дані у файл і звільнити пам'ять. Якщо збір даних не ведеться або використовується Xdebug, виклик не має жодного ефекту.

"Приклад HTML-звіту":https://files.nette.org/tester/coverage.html з покриттям коду.


--coverage-src <path>
---------------------
Ми використовуємо його одночасно з опцією `--coverage`. Параметр `<path>` це шлях до вихідного коду, для якого ми генеруємо звіт. Його можна використовувати багаторазово.


Власний php.ini .[#toc-own-php-ini]
===================================
Tester запускає процеси PHP з опцією `-n`, що означає, що ніякий `php.ini` не завантажується (навіть `/etc/php/conf.d/*.ini` в UNIX). Це забезпечує однакове оточення для запуску тестів, але також деактивує всі зовнішні розширення PHP, які зазвичай завантажуються системним PHP.

Якщо ви хочете зберегти системну конфігурацію, використовуйте параметр `-C`.

Якщо вам потрібні якісь розширення або спеціальні налаштування INI, ми рекомендуємо створити власний файл `php.ini` і розподілити його між тестами. Потім запускаємо Tester із параметром `-c`, наприклад, `tester -c tests/php.ini`. INI-файл може мати такий вигляд:

```ini
[PHP]

extension=php_pdo_mysql.dll
extension=php_pdo_pgsql.dll

memory_limit=512M
```

Запуск Tester із системою `php.ini` в UNIX, наприклад, `tester -c /etc/php/cgi/php.ini`, не завантажує інші INI з `/etc/php/conf.d/*.ini`. Це поведінка PHP, а не Tester.
