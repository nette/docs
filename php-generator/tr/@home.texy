Nette PhpGenerator
******************

<div class="perex">
Sınıflar, fonksiyonlar veya tam dosyalar için PHP kodu oluşturmak için bir araç mı arıyorsunuz?

- PHP'deki en son yeniliklerin tümünü destekler (property hooks, enumlar, nitelikler vb.)
- Mevcut sınıfları kolayca değiştirmenizi sağlar
- Çıktı kodu PSR-12 / PER kodlama stili ile uyumludur
- Olgun, kararlı ve yaygın olarak kullanılan bir kütüphane
</div>


Kurulum
-------

Kütüphaneyi [Composer|best-practices:composer] aracını kullanarak indirip kurun:

```shell
composer require nette/php-generator
```

PHP uyumluluğunu [tabloda |#Uyumluluk Tablosu] bulabilirsiniz.


Sınıflar
--------

Doğrudan [ClassType |api:Nette\PhpGenerator\ClassType] kullanarak bir sınıf oluşturma örneğiyle başlayalım:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addComment("Sınıf açıklaması.\nİkinci satır\n")
	->addComment('@property-read Nette\Forms\Form $form');

// kodu basitçe bir dizeye dönüştürerek veya echo kullanarak oluşturun:
echo $class;
```

Aşağıdaki sonucu döndürür:

```php
/**
 * Sınıf açıklaması
 * İkinci satır
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
}
```

Kodu oluşturmak için, `echo $class`'tan farklı olarak [daha fazla yapılandırabileceğimiz |#Yazıcı ve PSR Uyumluluğu] sözde bir yazıcı (printer) da kullanabiliriz:

```php
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Sabitler ([Constant |api:Nette\PhpGenerator\Constant] sınıfı) ve değişkenler ([Property |api:Nette\PhpGenerator\Property] sınıfı) ekleyebiliriz:

```php
$class->addConstant('ID', 123)
	->setProtected() // sabitlerin görünürlüğü
	->setType('int')
	->setFinal();

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // veya setVisibility('private')
	->setStatic()
	->addComment('@var int[]');

$class->addProperty('list')
	->setType('?array')
	->setInitialized(); // '= null' yazdırır
```

Oluşturur:

```php
final protected const int ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];

public ?array $list = null;
```

Ve [metotları |#Metot ve Fonksiyon İmzaları] ekleyebiliriz:

```php
$method = $class->addMethod('count')
	->addComment('Say.')
	->setFinal()
	->setProtected()
	->setReturnType('?int') // metotlarda dönüş türleri
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []
```

Sonuç:

```php
/**
 * Say.
 */
final protected function count(array &$items = []): ?int
{
	return count($items ?: $this->items);
}
```

PHP 8.0 tarafından tanıtılan tanıtılmış parametreler yapıcıya iletilebilir:

```php
$method = $class->addMethod('__construct');
$method->addPromotedParameter('name');
$method->addPromotedParameter('args', [])
	->setPrivate();
```

Sonuç:

```php
public function __construct(
	public $name,
	private $args = [],
) {
}
```

Salt okunur özellikler ve sınıflar `setReadOnly()` fonksiyonu kullanılarak işaretlenebilir.

------

Eklenen özellik, sabit, metot veya parametre zaten mevcutsa, bir istisna fırlatılır.

Sınıf üyeleri `removeProperty()`, `removeConstant()`, `removeMethod()` veya `removeParameter()` kullanılarak kaldırılabilir.

Sınıfa mevcut `Method`, `Property` veya `Constant` nesnelerini de ekleyebilirsiniz:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

Ayrıca mevcut metotları, özellikleri ve sabitleri `cloneWithName()` kullanarak farklı bir ad altında klonlayabilirsiniz:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```


Arayüz veya Trait
-----------------

Arayüzler ve trait'ler oluşturabilirsiniz ([InterfaceType |api:Nette\PhpGenerator\InterfaceType] ve [TraitType |api:Nette\PhpGenerator\TraitType] sınıfları):

```php
$interface = new Nette\PhpGenerator\InterfaceType('MyInterface');
$trait = new Nette\PhpGenerator\TraitType('MyTrait');
```

Trait kullanma:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject');
$class->addTrait('MyTrait')
	->addResolution('sayHello as protected')
	->addComment('@use MyTrait<Foo>');
echo $class;
```

Sonuç:

```php
class Demo
{
	use SmartObject;
	/** @use MyTrait<Foo> */
	use MyTrait {
		sayHello as protected;
	}
}
```


Enumlar
-------

PHP 8.1'in getirdiği enumları şu şekilde kolayca oluşturabilirsiniz: ([EnumType |api:Nette\PhpGenerator\EnumType] sınıfı):

```php
$enum = new Nette\PhpGenerator\EnumType('Suit');
$enum->addCase('Clubs');
$enum->addCase('Diamonds');
$enum->addCase('Hearts');
$enum->addCase('Spades');

echo $enum;
```

Sonuç:

```php
enum Suit
{
	case Clubs;
	case Diamonds;
	case Hearts;
	case Spades;
}
```

Ayrıca skaler eşdeğerleri tanımlayabilir ve böylece "backed" bir enum oluşturabilirsiniz:

```php
$enum->addCase('Clubs', '♣');
$enum->addCase('Diamonds', '♦');
```

Her *case*'e `addComment()` veya `addAttribute()` kullanarak bir yorum veya [#nitelikler] eklemek mümkündür.


Anonim Sınıflar
---------------

Ad olarak `null` iletiriz ve anonim bir sınıfımız olur:

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Sonuç:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```


Genel Fonksiyonlar
------------------

Fonksiyonların kodunu [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction] sınıfı oluşturur:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// veya PSR-2 / PSR-12 / PER uyumlu çıktı için PsrPrinter kullanın
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Sonuç:

```php
function foo($a, $b)
{
	return $a + $b;
}
```


Anonim Fonksiyonlar
-------------------

Anonim fonksiyonların kodunu [Closure |api:Nette\PhpGenerator\Closure] sınıfı oluşturur:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// veya PSR-2 / PSR-12 / PER uyumlu çıktı için PsrPrinter kullanın
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Sonuç:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```


Kısaltılmış Ok Fonksiyonları
----------------------------

Ayrıca bir yazıcı kullanarak kısaltılmış bir anonim fonksiyon yazdırabilirsiniz:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('$a + $b');
$closure->addParameter('a');
$closure->addParameter('b');

echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Sonuç:

```php
fn($a, $b) => $a + $b
```


Metot ve Fonksiyon İmzaları
---------------------------

Metotları [Method |api:Nette\PhpGenerator\Method] sınıfı temsil eder. Görünürlüğü, dönüş değerini ayarlayabilir, yorumlar, [#nitelikler] vb. ekleyebilirsiniz:

```php
$method = $class->addMethod('count')
	->addComment('Say.')
	->setFinal()
	->setProtected()
	->setReturnType('?int');
```

Bireysel parametreleri [Parameter |api:Nette\PhpGenerator\Parameter] sınıfı temsil eder. Yine, akla gelebilecek tüm özellikleri ayarlayabilirsiniz:

```php
$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []

// function count(&$items = [])
```

Sözde variadics parametreleri (veya splat operatörü) tanımlamak için `setVariadic()` kullanılır:

```php
$method = $class->addMethod('count');
$method->setVariadic(true);
$method->addParameter('items');
```

Oluşturur:

```php
function count(...$items)
{
}
```


Metot ve Fonksiyon Gövdeleri
----------------------------

Gövde, `setBody()` metoduna bir kerede iletilebilir veya `addBody()`'nin tekrarlanan çağrılarıyla (satır satır) kademeli olarak iletilebilir:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('$a = rand(10, 20);');
$function->addBody('return $a;');
echo $function;
```

Sonuç

```php
function foo()
{
	$a = rand(10, 20);
	return $a;
}
```

Değişkenleri kolayca eklemek için özel yer tutucular kullanabilirsiniz.

Basit yer tutucular `?`

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return substr(?, ?);', [$str, $num]);
echo $function;
```

Sonuç

```php
function foo()
{
	return substr('any string', 3);
}
```

Variadic yer tutucu `...?`

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Sonuç:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

PHP 8 için adlandırılmış parametreleri `...?:` kullanarak da kullanabilirsiniz:

```php
$items = ['foo' => 1, 'bar' => true];
$function->setBody('myfunc(...?:);', [$items]);

// myfunc(foo: 1, bar: true);
```

Yer tutucu, ters eğik çizgi `\?` ile kaçılır

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Sonuç:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```


Yazıcı ve PSR Uyumluluğu
------------------------

PHP kodu oluşturmak için [Printer |api:Nette\PhpGenerator\Printer] sınıfı kullanılır:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class); // şununla aynı: echo $class
```

Diğer tüm öğelerin kodunu oluşturabilir, `printFunction()`, `printNamespace()` vb. gibi metotlar sunar.

Ayrıca, çıktısı PSR-2 / PSR-12 / PER kodlama stili ile uyumlu olan `PsrPrinter` sınıfı da mevcuttur:

```php
$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class);
```

Davranışı özel ihtiyaçlarınıza göre ayarlamanız mı gerekiyor? `Printer` sınıfından miras alarak kendi sürümünüzü oluşturun. Bu değişkenler yeniden yapılandırılabilir:

```php
class MyPrinter extends Nette\PhpGenerator\Printer
{
	// satır kaydırmanın gerçekleştiği satır uzunluğu
	public int $wrapLength = 120;
	// girinti karakteri, boşluk dizisiyle değiştirilebilir
	public string $indentation = "\t";
	// özellikler arasındaki boş satır sayısı
	public int $linesBetweenProperties = 0;
	// metotlar arasındaki boş satır sayısı
	public int $linesBetweenMethods = 2;
	// sınıflar, fonksiyonlar ve sabitler için 'use ifadeleri' grupları arasındaki boş satır sayısı
	public int $linesBetweenUseTypes = 0;
	// fonksiyonlar ve metotlar için açılış küme parantezinin konumu
	public bool $bracesOnNextLine = true;
	// bir niteliği olsa veya desteklense bile tek bir parametreyi tek bir satıra yerleştirin
	public bool $singleParameterOnOneLine = false;
	// herhangi bir sınıf veya fonksiyon içermeyen ad alanlarını atlar
	public bool $omitEmptyNamespaces = true;
	// fonksiyonların ve metotların sağ parantezi ile dönüş türü arasındaki ayırıcı
	public string $returnTypeColon = ': ';
}
```

Standart `Printer` ve `PsrPrinter` tam olarak nasıl ve neden farklıdır? Neden pakette yalnızca bir yazıcı, yani `PsrPrinter` yok?

Standart `Printer`, kodu tüm Nette'de kullandığımız şekilde biçimlendirir. Nette'nin PSR'den çok daha önce ortaya çıkması ve PSR'nin yıllarca standartları zamanında değil, örneğin PHP'de yeni bir özelliğin tanıtılmasından ancak birkaç yıl sonra sunması nedeniyle, [kodlama standardı |contributing:coding-standard] birkaç küçük ayrıntıda farklılık gösterir. En büyük fark, boşluklar yerine sekmelerin kullanılmasıdır. Projelerimizde sekmeler kullanarak, [görme engelli kişiler için gerekli |contributing:coding-standard#Boşluklar yerine sekmeler] olan genişlik ayarlamasına izin verdiğimizi biliyoruz. Küçük bir farklılık örneği, fonksiyonlarda ve metotlarda açılış küme parantezinin her zaman ayrı bir satıra yerleştirilmesidir. PSR tavsiyesi bize mantıksız görünüyor ve [kod okunabilirliğinin azalmasına |contributing:coding-standard#Sarma ve Parantezler] yol açıyor.


Tipler
------

Herhangi bir tür veya union/intersection türü bir dize olarak iletilebilir, ayrıca yerel türler için önceden tanımlanmış sabitleri de kullanabilirsiniz:

```php
use Nette\PhpGenerator\Type;

$member->setType('array'); // veya Type::Array;
$member->setType('?array'); // veya Type::nullable(Type::Array);
$member->setType('array|string'); // veya Type::union(Type::Array, Type::String)
$member->setType('Foo&Bar'); // veya Type::intersection(Foo::class, Bar::class)
$member->setType(null); // türü kaldırır
```

Aynısı `setReturnType()` metodu için de geçerlidir.


Değişmezler
-----------

`Literal` kullanarak herhangi bir PHP kodunu iletebilirsiniz, örneğin özelliklerin veya parametrelerin varsayılan değerleri için vb:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Sonuç:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

Ayrıca `Literal`'a parametreler iletebilir ve bunların [yer tutucuları |#Metot ve Fonksiyon Gövdeleri] kullanarak geçerli PHP koduna biçimlendirilmesini sağlayabilirsiniz:

```php
new Literal('substr(?, ?)', [$a, $b]);
// örneğin oluşturur: substr('hello', 5);
```

Yeni bir nesnenin oluşturulmasını temsil eden bir değişmez, `new` metodu kullanılarak kolayca oluşturulabilir:

```php
Literal::new(Demo::class, [$a, 'foo' => $b]);
// örneğin oluşturur: new Demo(10, foo: 20)
```


Nitelikler
----------

PHP 8 niteliklerini tüm sınıflara, metotlara, özelliklere, sabitlere, enumlara, fonksiyonlara, closure'lara ve parametrelere ekleyebilirsiniz. Parametre değerleri olarak [#değişmezler] de kullanılabilir.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addAttribute('Table', [
	'name' => 'user',
	'constraints' => [
		Literal::new('UniqueConstraint', ['name' => 'ean', 'columns' => ['ean']]),
	],
]);

$class->addProperty('list')
	->addAttribute('Deprecated');

$method = $class->addMethod('count')
	->addAttribute('Foo\Cached', ['mode' => true]);

$method->addParameter('items')
	->addAttribute('Bar');

echo $class;
```

Sonuç:

```php
#[Table(name: 'user', constraints: [new UniqueConstraint(name: 'ean', columns: ['ean'])])]
class Demo
{
	#[Deprecated]
	public $list;


	#[Foo\Cached(mode: true)]
	public function count(
		#[Bar]
		$items,
	) {
	}
}
```


Property Hooks
--------------

Property hooks ([PropertyHook|api:Nette\PhpGenerator\PropertyHook] sınıfı tarafından temsil edilir) kullanarak, PHP 8.4'te tanıtılan bir özellik olan özellikler için get ve set işlemlerini tanımlayabilirsiniz:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$prop = $class->addProperty('firstName')
    ->setType('string');

$prop->addHook('set', 'strtolower($value)')
    ->addParameter('value')
	    ->setType('string');

$prop->addHook('get')
	->setBody('return ucfirst($this->firstName);');

echo $class;
```

Oluşturur:

```php
class Demo
{
    public string $firstName {
        set(string $value) => strtolower($value);
        get {
            return ucfirst($this->firstName);
        }
    }
}
```

Özellikler ve property hooks soyut veya final olabilir:

```php
$class->addProperty('id')
    ->setType('int')
    ->addHook('get')
        ->setAbstract();

$class->addProperty('role')
    ->setType('string')
    ->addHook('set', 'strtolower($value)')
        ->setFinal();
```


Asimetrik Görünürlük
--------------------

PHP 8.4, özellikler için asimetrik görünürlük sunar. Okuma ve yazma için farklı erişim seviyeleri ayarlayabilirsiniz.

Görünürlük, iki parametreli `setVisibility()` metoduyla veya görünürlüğün özelliğin okunmasına mı yoksa yazılmasına mı uygulanacağını belirten `mode` parametresiyle `setPublic()`, `setProtected()` veya `setPrivate()` kullanılarak ayarlanabilir. Varsayılan mod `'get'`'tir.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('name')
    ->setType('string')
    ->setVisibility('public', 'private'); // okuma için public, yazma için private

$class->addProperty('id')
    ->setType('int')
    ->setProtected('set'); // yazma için protected

echo $class;
```

Oluşturur:

```php
class Demo
{
    public private(set) string $name;

    protected(set) int $id;
}
```


Ad Alanı
--------

Sınıflar, özellikler, arayüzler ve enumlar (bundan sonra sınıflar olarak anılacaktır), [PhpNamespace |api:Nette\PhpGenerator\PhpNamespace] sınıfı tarafından temsil edilen ad alanlarında gruplandırılabilir:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

// ad alanında yeni sınıflar oluşturun
$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// veya mevcut bir sınıfı ad alanına ekleyin
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Sınıf zaten mevcutsa, bir istisna fırlatılır.

Use yan tümceleri tanımlayabilirsiniz:

```php
// use Http\Request;
$namespace->addUse(Http\Request::class);
// use Http\Request as HttpReq;
$namespace->addUse(Http\Request::class, 'HttpReq');
// use function iter\range;
$namespace->addUseFunction('iter\range');
```

Tanımlanan takma adlara göre tam nitelikli bir sınıf, fonksiyon veya sabit adını basitleştirmek için `simplifyName` metodunu kullanın:

```php
echo $namespace->simplifyName('Foo\Bar'); // 'Bar', çünkü 'Foo' mevcut ad alanıdır
echo $namespace->simplifyName('iter\range', $namespace::NameFunction); // 'range', tanımlanan use ifadesi nedeniyle
```

Tersine, basitleştirilmiş bir sınıf, fonksiyon veya sabit adını `resolveName` metodunu kullanarak tam nitelikli bir ada dönüştürebilirsiniz:

```php
echo $namespace->resolveName('Bar'); // 'Foo\Bar'
echo $namespace->resolveName('range', $namespace::NameFunction); // 'iter\range'
```


Sınıf Adı Çözümlemesi
---------------------

**Bir sınıf bir ad alanının parçası olduğunda, biraz farklı oluşturulur:** tüm türler (örneğin, tür ipuçları, dönüş türleri, üst sınıf adı, uygulanan arayüzler, kullanılan özellikler ve nitelikler) otomatik olarak *çözümlenir* (bunu kapatmazsanız, aşağıya bakın). Bu, tanımlarda **tam sınıf adlarını kullanmanız gerektiği** ve bunların sonuç kodunda takma adlarla (use yan tümcelerine göre) veya tam nitelikli adlarla değiştirileceği anlamına gelir:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // A olarak basitleştirilecek
	->addTrait('Bar\AliasedClass'); // AliasedClass olarak basitleştirilecek

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->simplifyType('Foo\D')); // yorumlarda manuel olarak basitleştiriyoruz
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // \Bar\OtherClass olarak çözümlenecek

echo $namespace;

// veya PSR-2 / PSR-12 / PER uyumlu çıktı için PsrPrinter kullanın
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Sonuç:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

Otomatik çözümleme şu şekilde kapatılabilir:

```php
$printer = new Nette\PhpGenerator\Printer; // veya PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```


PHP Dosyaları
-------------

Sınıflar, fonksiyonlar ve ad alanları, [PhpFile|api:Nette\PhpGenerator\PhpFile] sınıfı tarafından temsil edilen PHP dosyalarında gruplandırılabilir:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('Bu dosya otomatik olarak oluşturulmuştur.');
$file->setStrictTypes(); // declare(strict_types=1) ekler

$class = $file->addClass('Foo\A');
$function = $file->addFunction('Foo\foo');

// veya
// $namespace = $file->addNamespace('Foo');
// $class = $namespace->addClass('A');
// $function = $namespace->addFunction('foo');

echo $file;

// veya PSR-2 / PSR-12 / PER uyumlu çıktı için PsrPrinter kullanın
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Sonuç:

```php
<?php

/**
 * Bu dosya otomatik olarak oluşturulmuştur.
 */

declare(strict_types=1);

namespace Foo;

class A
{
}

function foo()
{
}
```

**Uyarı:** Dosyalara fonksiyonlar ve sınıflar dışında başka kod eklemek mümkün değildir.


Mevcut Olanlara Göre Oluşturma
------------------------------

Sınıfları ve fonksiyonları yukarıda açıklanan API kullanarak modellemenin yanı sıra, mevcut kalıplara göre otomatik olarak oluşturulmalarını da sağlayabilirsiniz:

```php
// PDO sınıfıyla aynı bir sınıf oluşturur
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

// trim() fonksiyonuyla aynı bir fonksiyon oluşturur
$function = Nette\PhpGenerator\GlobalFunction::from('trim');

// belirtilene göre bir closure oluşturur
$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {},
);
```

Fonksiyonların ve metotların gövdeleri varsayılan olarak boştur. Bunları da yüklemek istiyorsanız, bu yöntemi kullanın (`nikic/php-parser` paketinin yüklenmesini gerektirir):

```php
$class = Nette\PhpGenerator\ClassType::from(Foo::class, withBodies: true);

$function = Nette\PhpGenerator\GlobalFunction::from('foo', withBody: true);
```


PHP Dosyalarından Yükleme
-------------------------

Fonksiyonları, sınıfları, arayüzleri ve enumları doğrudan PHP kodu içeren bir dizeden de yükleyebilirsiniz. Örneğin, bir `ClassType` nesnesini şu şekilde oluştururuz:

```php
$class = Nette\PhpGenerator\ClassType::fromCode(<<<XX
	<?php

	class Demo
	{
		public $foo;
	}
	XX);
```

PHP kodundan sınıfları yüklerken, metot gövdeleri dışındaki tek satırlık yorumlar (ör. özelliklerde vb.) yoksayılır, çünkü bu kütüphanenin bunlarla çalışmak için bir API'si yoktur.

Ayrıca, herhangi bir sayıda sınıf, fonksiyon veya hatta ad alanı içerebilen tüm bir PHP dosyasını doğrudan yükleyebilirsiniz:

```php
$file = Nette\PhpGenerator\PhpFile::fromCode(file_get_contents('classes.php'));
```

Dosyanın başlangıç yorumu ve `strict_types` bildirimi de yüklenir. Tersine, diğer tüm genel kod yoksayılır.

`nikic/php-parser`'ın yüklenmesi gerekir.

.[note]
Dosyalardaki genel kodu veya metot gövdelerindeki bireysel deyimleri manipüle etmeniz gerekiyorsa, doğrudan `nikic/php-parser` kütüphanesini kullanmak daha iyidir.


Sınıf Manipülatörü
------------------

[ClassManipulator|api:Nette\PhpGenerator\ClassManipulator] sınıfı, sınıfları manipüle etmek için araçlar sağlar.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$manipulator = new Nette\PhpGenerator\ClassManipulator($class);
```

`inheritMethod()` metodu, üst sınıftan veya uygulanan arayüzden bir metodu sınıfınıza kopyalar. Bu, metodu geçersiz kılmanıza veya imzasını genişletmenize olanak tanır:

```php
$method = $manipulator->inheritMethod('bar');
$method->setBody('...');
```

`inheritProperty()` metodu, üst sınıftan bir özelliği sınıfınıza kopyalar. Sınıfınızda aynı özelliğe sahip olmak istediğinizde, ancak belki farklı bir varsayılan değerle yararlıdır:

```php
$property = $manipulator->inheritProperty('foo');
$property->setValue('new value');
```

`implement()` metodu, verilen arayüzden veya soyut sınıftan tüm metotları ve özellikleri sınıfınızda otomatik olarak uygular:

```php
$manipulator->implement(SomeInterface::class);
// Artık sınıfınız SomeInterface'i uygular ve tüm metotlarını içerir
```


Değişken Dökümü
---------------

`Dumper` sınıfı, bir değişkeni ayrıştırılabilir PHP koduna dönüştürür. Standart `var_export()` fonksiyonundan daha iyi ve daha net bir çıktı sağlar.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // ['a', 'b', 123] yazdırır
```


Uyumluluk Tablosu
-----------------

PhpGenerator 4.1, PHP 8.0 ila 8.4 ile uyumludur.
