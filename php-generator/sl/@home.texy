Generator kode PHP
******************

<div class=perex>
- Potrebujete kodo PHP za razrede, funkcije, datoteke PHP itd.?
- Podpira vse najnovejše funkcije PHP, kot so enumi, atributi itd.
- Omogoča enostavno spreminjanje obstoječih razredov
- Izpis v skladu s standardom PSR-12
- Zelo zrela, stabilna in pogosto uporabljena knjižnica
</div>


Namestitev .[#toc-installation]
-------------------------------

Prenesite in namestite paket s [programom Composer |best-practices:composer]:

```shell
composer require nette/php-generator
```

Za združljivost s PHP glejte [tabelo |#Compatibility Table].


Razredi .[#toc-classes]
-----------------------

Začnimo z enostavnim primerom generiranja razreda z uporabo [ClassType |api:Nette\PhpGenerator\ClassType]:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addComment("Description of class.\nSecond line\n")
	->addComment('@property-read Nette\Forms\Form $form');

// za generiranje kode PHP preprosto pretvorite v niz ali uporabite echo:
echo $class;
```

Rezultat bo naslednji:

```php
/**
 * Description of class.
 * Second line
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
}
```

Za generiranje kode lahko uporabimo tudi tiskalnik, ki ga bomo za razliko od `echo $class` lahko [dodatno konfigurirali |#Printers and PSR compliance]:

```php
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Dodamo lahko konstante (razred [Constant |api:Nette\PhpGenerator\Constant]) in lastnosti (razred [Property |api:Nette\PhpGenerator\Property]):

```php
$class->addConstant('ID', 123)
	->setProtected() // konstantna vidnost
	->setType('int')
	->setFinal();

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // ali setVisibility('private')
	->setStatic()
	->addComment('@var int[]');

$class->addProperty('list')
	->setType('?array')
	->setInitialized(); // izpiše '= null'
```

Ustvari se:

```php
final protected const int ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];

public ?array $list = null;
```

In lahko dodamo [metode |#Method and Function Signature]:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int') // tip vrnitve metode
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []
```

Rezultat je:

```php
/**
 * Count it.
 */
final protected function count(array &$items = []): ?int
{
	return count($items ?: $this->items);
}
```

Konstruktorju se lahko posredujejo promovirani parametri, ki jih je uvedel PHP 8.0:

```php
$method = $class->addMethod('__construct');
$method->addPromotedParameter('name');
$method->addPromotedParameter('args', [])
	->setPrivate();
```

Rezultat je:

```php
public function __construct(
	public $name,
	private $args = [],
) {
}
```

Lastnosti in razrede, ki so namenjeni samo branju, lahko označite s spletno stranjo `setReadOnly()`.

------

Če dodana lastnost, konstanta, metoda ali parameter že obstajajo, se vrže izjema.

Člane lahko odstranite z uporabo `removeProperty()`, `removeConstant()`, `removeMethod()` ali `removeParameter()`.

Razredu lahko dodate tudi obstoječe predmete `Method`, `Property` ali `Constant`:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

Obstoječe metode, lastnosti in konstante lahko klonirate z drugim imenom z uporabo `cloneWithName()`:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```


Vmesnik ali lastnost .[#toc-interface-or-trait]
-----------------------------------------------

Ustvarite lahko vmesnike in lastnosti (razreda [InterfaceType |api:Nette\PhpGenerator\InterfaceType] in [TraitType |api:Nette\PhpGenerator\TraitType]):

```php
$interface = new Nette\PhpGenerator\InterfaceType('MyInterface');
$trait = new Nette\PhpGenerator\TraitType('MyTrait');
```

Uporaba lastnosti:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject');
$class->addTrait('MyTrait')
	->addResolution('sayHello as protected')
	->addComment('@use MyTrait<Foo>');
echo $class;
```

Rezultat:

```php
class Demo
{
	use SmartObject;
	/** @use MyTrait<Foo> */
	use MyTrait {
		sayHello as protected;
	}
}
```


Enumi .[#toc-enums]
-------------------

Enostavno lahko ustvarite enume, ki jih prinaša PHP 8.1 (razred [EnumType |api:Nette\PhpGenerator\EnumType]):

```php
$enum = new Nette\PhpGenerator\EnumType('Suit');
$enum->addCase('Clubs');
$enum->addCase('Diamonds');
$enum->addCase('Hearts');
$enum->addCase('Spades');

echo $enum;
```

Rezultat:

```php
enum Suit
{
	case Clubs;
	case Diamonds;
	case Hearts;
	case Spades;
}
```

Za ustvarjanje podprtega enuma lahko določite tudi skalarne ekvivalente za primere:

```php
$enum->addCase('Clubs', '♣');
$enum->addCase('Diamonds', '♦');
```

Vsakemu primeru je mogoče dodati komentar ali [atribute |#attributes] z uporabo `addComment()` ali `addAttribute()`.


Anonimni razred .[#toc-anonymous-class]
---------------------------------------

Kot ime dajte `null` in dobili boste anonimni razred:

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Rezultat:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```


Globalna funkcija .[#toc-global-function]
-----------------------------------------

Koda funkcije bo ustvarila razred [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction]:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// ali uporabite PsrPrinter za izpis v skladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Rezultat:

```php
function foo($a, $b)
{
	return $a + $b;
}
```


Zaprtje .[#toc-closure]
-----------------------

Koda zaprtja bo ustvarila razred [Closure |api:Nette\PhpGenerator\Closure]:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// ali uporabite PsrPrinter za izpis v skladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Rezultat:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```


Funkcija puščice .[#toc-arrow-function]
---------------------------------------

Zaključek lahko natisnete tudi s tiskalnikom kot funkcijo puščice:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('$a + $b');
$closure->addParameter('a');
$closure->addParameter('b');

echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Rezultat:

```php
fn($a, $b) => $a + $b
```


Podpis metode in funkcije .[#toc-method-and-function-signature]
---------------------------------------------------------------

Metode so predstavljene z razredom [Method |api:Nette\PhpGenerator\Method]. Nastavite lahko vidnost, povratno vrednost, dodate komentarje, [atribute |#Attributes] itd:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int');
```

Vsak parameter je predstavljen z razredom [Parameter |api:Nette\PhpGenerator\Parameter]. Spet lahko nastavite vse možne lastnosti:

```php
$method->addParameter('items', []) // $items = []
	->setReference() // &$items = []
	->setType('array'); // array &$items = []

// function count(&$items = [])
```

Za določitev tako imenovanih parametrov variadics (ali tudi operatorjev splat, spread, elipsis, unpacking ali tri pike) uporabite `setVariadics()`:

```php
$method = $class->addMethod('count');
$method->setVariadics(true);
$method->addParameter('items');
```

Generira:

```php
function count(...$items)
{
}
```


Metoda in telo funkcije .[#toc-method-and-function-body]
--------------------------------------------------------

Telo lahko metodi `setBody()` posredujete naenkrat ali zaporedno (vrstico za vrstico) z večkratnim klicem `addBody()`:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('$a = rand(10, 20);');
$function->addBody('return $a;');
echo $function;
```

Rezultat

```php
function foo()
{
	$a = rand(10, 20);
	return $a;
}
```

Za priročen način injiciranja spremenljivk lahko uporabite posebna nadomestna imena.

Enostavna nadomestna imena `?`

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return substr(?, ?);', [$str, $num]);
echo $function;
```

Rezultat:

```php
function foo()
{
	return substr('any string', 3);
}
```

Variadični nosilec mesta `...?`

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Rezultat:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

Poimenovane parametre PHP 8 lahko uporabite tudi z uporabo nadomestnega imena `...?:`

```php
$items = ['foo' => 1, 'bar' => true];
$function->setBody('myfunc(...?:);', [$items]);

// myfunc(foo: 1, bar: true);
```

Namestno znamenje pobegnite s poševnico `\?`

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Rezultat:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```


Tiskalniki in skladnost s predpisi PSR .[#toc-printers-and-psr-compliance]
--------------------------------------------------------------------------

Koda PHP se ustvari s pomočjo predmetov `Printer`. Obstaja `PsrPrinter`, katerega izpis je skladen s PSR-2 in PSR-12 ter uporablja presledke za alineje, in `Printer`, ki za alineje uporablja tabulatorje.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class); // Odmik 4 presledki
```

Potrebujete prilagoditi obnašanje tiskalnika? Ustvarite svojega tako, da podedujete razred `Printer`. Te spremenljivke lahko ponovno konfigurirate:

```php
class MyPrinter extends Nette\PhpGenerator\Printer
{
	public int $wrapLength = 120;
	public string $indentation = "\t";
	public int $linesBetweenProperties = 0;
	public int $linesBetweenMethods = 2;
	public int $linesBetweenUseTypes = 0;
	public bool $bracesOnNextLine = true;
	public string $returnTypeColon = ': ';
}
```


Tipi .[#toc-types]
------------------

Vsak tip ali tip zveze/intersekcije je mogoče posredovati kot niz, uporabite lahko tudi vnaprej določene konstante za domače tipe:

```php
use Nette\PhpGenerator\Type;

$member->setType('array'); // ali Type::Array;
$member->setType('array|string'); // ali Type::union('array', 'string')
$member->setType('Foo&Bar'); // ali Type::intersection(Foo::class, Bar::class)
$member->setType(null); // odstrani tip
```

Enako velja za metodo `setReturnType()`.


Literali .[#toc-literals]
-------------------------

S `Literal` lahko poljubno kodo PHP posredujete na primer privzetim vrednostim lastnosti ali parametrov itd:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Rezultat:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

Rezultat: Na naslov `Literal` lahko posredujete tudi parametre, ki se s [posebnimi nadomestki |#method-and-function-body-generator] oblikujejo v veljavno PHP kodo:

```php
new Literal('substr(?, ?)', [$a, $b]);
// generira, na primer: substr('hello', 5);
```


Atributi .[#toc-attributes]
---------------------------

Vsem razredom, metodam, lastnostim, konstantam, imenskim primerom, funkcijam, zaključkom in parametrom lahko dodate atribute PHP 8. Kot vrednosti parametrov lahko uporabite tudi [literale |#Literals].

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addAttribute('Deprecated');

$class->addProperty('list')
	->addAttribute('WithArguments', [1, 2]);

$method = $class->addMethod('count')
	->addAttribute('Foo\Cached', ['mode' => true]);

$method->addParameter('items')
	->addAttribute('Bar');

echo $class;
```

Rezultat:

```php
#[Deprecated]
class Demo
{
	#[WithArguments(1, 2)]
	public $list;


	#[Foo\Cached(mode: true)]
	public function count(#[Bar] $items)
	{
	}
}
```


Imenski prostor .[#toc-namespace]
---------------------------------

Razrede, lastnosti, vmesnike in enume (v nadaljevanju razredi) lahko združimo v imenski prostor ([PhpNamespace |api:Nette\PhpGenerator\PhpNamespace]):

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

// ustvarjanje novih razredov v imenskem prostoru
$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// ali vstavite obstoječi razred v imenski prostor.
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Če razred že obstaja, se vrže izjema.

Določite lahko izjave o uporabi:

```php
// use Http\Request;
$namespace->addUse(Http\Request::class);
// use Http\Request as HttpReq;
$namespace->addUse(Http\Request::class, 'HttpReq');
// use function iter\range;
$namespace->addUseFunction('iter\range');
```

Če želite poenostaviti polno kvalificirano ime razreda, funkcije ali konstante v skladu z opredeljenimi vzdevki, uporabite metodo `simplifyName`:

```php
echo $namespace->simplifyName('Foo\Bar'); // 'Bar', ker je 'Foo' trenutni imenski prostor
echo $namespace->simplifyName('iter\range', $namespace::NameFunction); // 'range', ker je opredeljena izjava o uporabi
```

Poenostavljeno ime razreda, funkcije ali konstante pa lahko pretvorite v polno kvalificirano ime z uporabo metode `resolveName`:

```php
echo $namespace->resolveName('Bar'); // 'Foo\Bar'
echo $namespace->resolveName('range', $namespace::NameFunction); // 'iter\range'
```


Razreševanje imen razredov .[#toc-class-names-resolving]
--------------------------------------------------------

**Ko je razred del imenskega prostora, se prikaže nekoliko drugače**: vse vrste (tj. namigi na vrsto, vrnitvene vrste, ime nadrejenega razreda,
implementirani vmesniki, uporabljene lastnosti in atributi) se samodejno *razrešijo* (razen če to izklopite, glejte spodaj).
To pomeni, da morate v definicijah **uporabiti polna imena razredov**, ki bodo v dobljeni kodi nadomeščena s približki (glede na izjave o uporabi) ali polno kvalificiranimi imeni:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // se poenostavi na A
	->addTrait('Bar\AliasedClass'); // se poenostavi na AliasedClass

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->simplifyType('Foo\D')); // v komentarjih poenostavite ročno
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // razreši se na \Bar\OtherClass

echo $namespace;

// ali uporabite PsrPrinter za izpis v skladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Rezultat:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

Na ta način je mogoče izklopiti samodejno reševanje:

```php
$printer = new Nette\PhpGenerator\Printer; // ali PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```


Datoteke PHP .[#toc-php-files]
------------------------------

Razrede, funkcije in prostore imen lahko združite v datoteke PHP, ki jih predstavlja razred [PhpFile |api:Nette\PhpGenerator\PhpFile]:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('This file is auto-generated.');
$file->setStrictTypes(); // doda declare(strict_types=1)

$class = $file->addClass('Foo\A');
$function = $file->addFunction('Foo\foo');

// ali
// $namespace = $file->addNamespace('Foo');
// $class = $namespace->addClass('A');
// $function = $namespace->addFunction('foo');

echo $file;

// ali uporabite PsrPrinter za izpis v skladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Rezultat:

```php
<?php

/**
 * This file is auto-generated.
 */

declare(strict_types=1);

namespace Foo;

class A
{
}

function foo()
{
}
```


Ustvarjanje glede na obstoječe .[#toc-generating-according-to-existing-ones]
----------------------------------------------------------------------------

Poleg tega, da lahko razrede in funkcije modelirate z uporabo zgoraj opisanega API-ja, jih lahko tudi samodejno generirate na podlagi obstoječih:

```php
// ustvari razred, ki je enak razredu PDO
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

// ustvari funkcijo, ki je enaka funkciji trim()
$function = Nette\PhpGenerator\GlobalFunction::from('trim');

// ustvari zaprtje, kot je določeno
$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {},
);
```

Privzeto so telesa funkcij in metod prazna. Če jih želite tudi naložiti, uporabite ta način
(zahteva namestitev spletne strani `nikic/php-parser` ):

```php
$class = Nette\PhpGenerator\ClassType::from(Foo::class, withBodies: true);

$function = Nette\PhpGenerator\GlobalFunction::from('foo', withBody: true);
```


Nalaganje iz datoteke PHP .[#toc-loading-from-php-file]
-------------------------------------------------------

Funkcije, razrede, vmesnike in enume lahko naložite tudi neposredno iz niza kode PHP. Tako na primer ustvarimo objekt `ClassType`:

```php
$class = Nette\PhpGenerator\ClassType::fromCode(<<<XX
	<?php

	class Demo
	{
		public $foo;
	}
	XX);
```

Pri nalaganju razredov iz kode PHP se enovrstični komentarji zunaj teles metod ne upoštevajo (npr. za lastnosti itd.), ker ta knjižnica nima API za delo z njimi.

Neposredno lahko naložite tudi celotno datoteko PHP, ki lahko vsebuje poljubno število razredov, funkcij ali celo več imenskih prostorov:

```php
$file = Nette\PhpGenerator\PhpFile::fromCode(file_get_contents('classes.php'));
```

Prav tako se naložita začetni komentar datoteke in deklaracija `strict_types`. Po drugi strani pa se vsa druga globalna koda ne upošteva.

Za to je treba namestiti `nikic/php-parser`.

.[note]
Če morate upravljati globalno kodo v datotekah ali posamezne stavke v telesih metod, je bolje, da neposredno uporabite knjižnico `nikic/php-parser`.


Zbiralnik spremenljivk .[#toc-variables-dumper]
-----------------------------------------------

Dumper vrne razčlenljiv niz PHP za predstavitev spremenljivke. Zagotavlja boljši in jasnejši izpis kot nativna funkcija `var_export()`.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // natisne ['a', 'b', 123]
```


Preglednica združljivosti .[#toc-compatibility-table]
-----------------------------------------------------

PhpGenerator 4.0 je združljiv s PHP 8.0 do 8.2

{{leftbar: nette:@menu-topics}}
