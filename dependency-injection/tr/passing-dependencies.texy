Bağımlılıkları Geçme
********************
<div class=perex>


Argümanlar veya DI terminolojisinde "bağımlılıklar" sınıflara aşağıdaki ana yollarla aktarılabilir:

* kurucu tarafından geçiş
* yöntemle geçiş (setter olarak adlandırılır)
* bir özellik ayarlayarak
* yöntem, ek açıklama veya öznitelik ile *enjekte*

</div>

İlk üç yöntem genel olarak tüm nesne yönelimli dillerde geçerlidir, dördüncüsü ise Nette sunucularına özeldir, bu nedenle [ayrı bir bölümde |best-practices:inject-method-attribute] ele alınmıştır. Şimdi bu seçeneklerin her birine daha yakından bakacağız ve bunları belirli örneklerle göstereceğiz.


Kurucu Enjeksiyonu .[#toc-constructor-injection]
================================================

Nesne oluşturulduğunda bağımlılıklar yapıcıya argüman olarak aktarılır:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Bu form, sınıfın çalışması için kesinlikle ihtiyaç duyduğu zorunlu bağımlılıklar için kullanışlıdır, çünkü bunlar olmadan örnek oluşturulamaz.

PHP 8.0'dan beri, işlevsel olarak eşdeğer olan daha kısa bir gösterim biçimi kullanabiliriz ([constructor property promotion |https://blog.nette.org/tr/php-8-0-haberlere-genel-bakis#toc-constructor-property-promotion]):

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

PHP 8.1'den itibaren bir özellik, içeriğinin değişmeyeceğini bildiren `readonly` bayrağı ile işaretlenebilir:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

DI konteyneri, [otomatik |autowiring] bağlantı kullanarak bağımlılıkları otomatik olarak kurucuya geçirir. Bu şekilde aktarılamayan bağımsız değişkenler (örn. dizeler, sayılar, booleanlar) [yapılandırmada yazılır |services#Arguments].


Ayarlayıcı Enjeksiyonu .[#toc-setter-injection]
===============================================

Bağımlılıklar, onları özel bir özellikte saklayan bir yöntem çağrılarak aktarılır. Bu yöntemler için olağan adlandırma kuralı `set*()` şeklindedir, bu nedenle ayarlayıcılar olarak adlandırılırlar.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Bu yöntem, nesnenin bunları gerçekten alacağı (yani kullanıcının yöntemi çağıracağı) garanti edilmediğinden, sınıf işlevi için gerekli olmayan isteğe bağlı bağımlılıklar için kullanışlıdır.

Aynı zamanda, bu yöntem bağımlılığı değiştirmek için setter'ın tekrar tekrar çağrılmasına izin verir. Bu istenmiyorsa, yönteme bir kontrol ekleyin veya PHP 8.1'den itibaren `$cache` özelliğini `readonly` bayrağı ile işaretleyin.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

Setter çağrısı, [kurulum bölümündeki |services#Setup] DI konteyner yapılandırmasında tanımlanır. Ayrıca burada bağımlılıkların otomatik geçişi autowiring tarafından kullanılır:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Mülkiyet Enjeksiyonu .[#toc-property-injection]
===============================================

Bağımlılıklar doğrudan özelliğe aktarılır:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Bu yöntemin uygun olmadığı düşünülmektedir, çünkü özellik `public` olarak bildirilmelidir. Bu nedenle, aktarılan bağımlılığın gerçekten belirtilen türde olup olmayacağı üzerinde hiçbir kontrolümüz yoktur (bu PHP 7.4'ten önce doğruydu) ve yeni atanan bağımlılığa kendi kodumuzla tepki verme yeteneğimizi kaybederiz, örneğin sonraki değişiklikleri önlemek için. Aynı zamanda, özellik sınıfın genel arayüzünün bir parçası haline gelir ki bu da arzu edilen bir durum olmayabilir.

Değişkenin ayarı, [kurulum bölümündeki |services#Setup] DI konteyner yapılandırmasında tanımlanır:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Hangi Yolu Seçmeli? .[#toc-which-way-to-choose]
===============================================

- yapıcı, sınıfın çalışması için gereken zorunlu bağımlılıklar için uygundur
- setter ise isteğe bağlı bağımlılıklar veya değiştirilebilen bağımlılıklar için uygundur
- genel değişkenler önerilmez
