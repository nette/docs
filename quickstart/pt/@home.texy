Escrevendo a primeira aplicação!
********************************

.[perex]
Vamos conhecer juntos o Nette Framework, criando um blog simples com comentários. Vamos lá!

Já após os dois primeiros capítulos teremos nosso próprio blog funcional e poderemos publicar nossos ótimos posts, embora as funções ainda sejam bastante limitadas. Você também deve ler os capítulos seguintes, onde programaremos a adição de comentários, edição de artigos e, finalmente, protegeremos o blog.

.[tip]
Este tutorial assume que você leu a página [Instalação |nette:installation] e preparou com sucesso as ferramentas necessárias. Também assume que você entende [programação orientada a objetos em PHP |nette:introduction-to-object-oriented-programming].

Por favor, use PHP 8.1 ou mais recente. A aplicação completa pode ser encontrada [no GitHub |https://github.com/nette-examples/quickstart/tree/v4.0].


Página de boas-vindas
=====================

Comecemos criando um novo projeto no diretório `nette-blog`:

```shell
composer create-project nette/web-project nette-blog
```

Neste ponto, a página inicial do Web Project já deve estar funcionando. Vamos testar abrindo o navegador no seguinte endereço URL:

```
http://localhost/nette-blog/www/
```

e veremos a página inicial do Nette Framework:

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

A aplicação funciona e você pode começar a fazer alterações.

.[note]
Se ocorreu um problema, [tente estas poucas dicas |nette:troubleshooting#O Nette não funciona uma página em branco é exibida].


Conteúdo do Web Project
=======================

O Web Project tem a seguinte estrutura:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← diretório com a aplicação
│   ├── <b>Core/</b>         ← classes básicas necessárias para o funcionamento
│   ├── <b>Presentation/</b> ← presenters, templates & cia.
│   │   └── <b>Home/</b>     ← diretório do presenter Home
│   └── <b>Bootstrap.php</b> ← classe de inicialização Bootstrap
├── <b>assets/</b>           ← ativos brutos (SCSS, TypeScript, imagens de origem)
├── <b>bin/</b>              ← scripts executados da linha de comando
├── <b>config/</b>           ← arquivos de configuração
├── <b>log/</b>              ← log de erros
├── <b>temp/</b>             ← arquivos temporários, cache, …
├── <b>vendor/</b>           ← bibliotecas instaladas pelo Composer
│   └── <b>autoload.php</b>  ← autoloading de todos os pacotes instalados
└── <b>www/</b>              ← diretório público - o único acessível pelo navegador
	├── <b>assets/</b>       ← arquivos estáticos compilados (CSS, JS, imagens, ...)
    └── <b>index.php</b>     ← arquivo inicial pelo qual a aplicação é iniciada
\--

O diretório `www/` destina-se ao armazenamento de imagens, arquivos JavaScript, estilos CSS e outros arquivos publicamente acessíveis. Apenas este diretório é acessível pela internet, então configure o diretório raiz da sua aplicação para apontar para cá (você pode configurar isso na configuração do Apache ou nginx, mas vamos fazer isso depois, não é importante agora).

A pasta mais importante para nós é `app/`. Aqui encontramos o arquivo `Bootstrap.php`, que contém a classe que serve para carregar todo o framework e configurar a aplicação. Ativa-se aqui o [autoloading |robot-loader:], configura-se o [debugger |tracy:] e as [rotas |application:routing].


Limpeza
=======

O Web Project contém uma página inicial, que excluiremos antes de começarmos a programar algo. Portanto, sem medo, substituiremos o conteúdo do arquivo `app/Presentation/Home/default.latte` por "Olá mundo!".


[* qs-hello.webp .{url:-} *]


Tracy (debugger)
================

Uma ferramenta extremamente importante para o desenvolvimento é a [ferramenta de depuração Tracy |tracy:]. Tente provocar algum erro no arquivo `app/Presentation/Home/HomePresenter.php` (por exemplo, removendo uma chave na definição da classe HomePresenter) e veja o que acontece. Aparecerá uma página de notificação que descreve o erro de forma compreensível.

[* qs-tracy.avif .{url:-}(tela do debugger) *]

O Tracy nos ajudará imensamente quando estivermos procurando erros na aplicação. Observe também a Barra Tracy flutuante no canto inferior direito da tela, que contém informações sobre a execução da aplicação.

[* qs-tracybar.webp .{url:-} *]

No modo de produção, o Tracy é obviamente desativado e não exibe nenhuma informação sensível. Todos os erros neste caso são armazenados na pasta `log/`. Vamos experimentar. No arquivo `app/Bootstrap.php`, descomente a seguinte linha e altere o parâmetro da chamada para `false`, para que o código fique assim:

```php .{file:app/Bootstrap.php}
...
$this->configurator->setDebugMode(false);
...
```

Após atualizar a página, não veremos mais o Tracy. Em vez disso, uma mensagem amigável ao usuário será exibida:

[* qs-fatal.webp .{url:-}(tela de erro) *]

Agora, vejamos o diretório `log/`. Aqui (no arquivo `exception.log`) encontraremos o erro registrado e também a já conhecida página com a mensagem de erro (salva como um arquivo HTML com um nome começando com `exception-`).

Comente novamente a linha `// $configurator->setDebugMode(false);`. O Tracy ativa automaticamente o modo de desenvolvimento no localhost e o desativa em todos os outros lugares.

Podemos corrigir o erro que criamos e continuar escrevendo a aplicação.


Envie um agradecimento
======================

Mostraremos um truque que agradará os autores de código aberto. De forma simples, você pode dar uma estrela no GitHub às bibliotecas que seu projeto usa. Basta executar:

```shell
composer thanks
```

Experimente!

{{priority: -1}}
{{sitename: Nette Quickstart}}
