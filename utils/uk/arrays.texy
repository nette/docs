Робота з полем
**************

.[perex]
Ця сторінка присвячена класам [Nette\Utils\Arrays |#Arrays], [ArrayHash |#ArrayHash] і [ArrayList |#ArrayList], які пов'язані з масивами.


Встановлення:

```shell
composer require nette/utils
```


Масиви .[#toc-arrays]
=====================

[api:Nette\Utils\Arrays] це статичний клас, який містить декілька зручних функцій для роботи з масивами. Його еквівалентом для ітераторів є [Nette\Utils\Iterables |iterables].

У наступних прикладах передбачається, що псевдонім уже створено:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Функція гнучко перетворює `$array` в асоціативний масив або об'єкти за вказаним шляхом `$path`. Шлях може бути рядком або масивом. Він складається з імен ключів у вхідному масиві та операторів '[]', '->', '=' і '|'. Якщо шлях невірний, то генерується `Nette\InvalidArgumentException`.

```php
// перетворення в асоціативний масив з допомогою простого ключа
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    //...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// присвоювання значень від одного ключа до іншого за допомогою оператора =
$result = Arrays::associate($arr, 'name=age'); // або ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// створення об'єкту з допомогою оператора ->
$result = Arrays::associate($arr, '->name'); // або ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// об'єднання ключів за допомогою оператора | або
$result = Arrays::associate($arr, 'name|age'); // або ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// додавання до масиву з використанням [] або []
$result = Arrays::associate($arr, 'name[]'); // або ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Перевіряє масив на наявність значення. Використовує суворе порівняння (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Перевіряє, чи всі елементи в масиві проходять тест, реалізований у `$predicate` з сигнатурою `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Див. [some() |#some].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Повертає новий масив, що містить всі пари ключ-значення, які відповідають заданому `$predicate`. Зворотний виклик має сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Повертає перший елемент (що відповідає вказаному предикату, якщо він заданий). Якщо такого елемента немає, повертається результат виклику `$else` або нуль.
Функція `$predicate` має підпис `function ($value, int|string $key, array $array): bool`.

Він не змінює внутрішній вказівник, на відміну від `reset()`. Параметри `$predicate` та `$else` з'явилися починаючи з версії 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Див. [функцію last( |#last()]).


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Повертає ключ першого елемента (що відповідає вказаному предикату, якщо він заданий) або нуль, якщо такого елемента немає. `$predicate` має підпис `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Див. функцію [lastKey( |#lastKey()]).


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Консолідує багаторівневий масив у плоский.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Повертає елемент `$array[$key]`. Якщо він не існує, то або видається виняток `Nette\InvalidArgumentException`, або, якщо задано третій параметр `$default`, то повертається цей параметр.

```php
// якщо $array['foo'] не існує, згенерувати виключення
$value = Arrays::get($array, 'foo');

// якщо $array['foo'] не існує, повернути 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Ключ `$key` також може бути масивом.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrátí 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Отримує посилання на вказаний елемент масиву. Якщо елемент не існує, він буде створений зі значенням null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// повертає посилання на $array['foo']
```

Як і функція [get() |#get], вона може працювати з багатовимірними масивами.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// отримати посилання на $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Повертає тільки ті елементи масиву, значення яких збігається з регулярним виразом `$pattern`. Якщо `$invert` дорівнює `true`, то повертає елементи, які не збігаються. Помилка компіляції або обробки виразу викликає виключення `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// повертає тільки елементи масиву, що складаються з цифр
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Вставляє вміст поля `$inserted` у поле `$array` відразу після елемента з ключем `$key`. Якщо `$key` є `null` (або відсутнє в полі), воно вставляється в кінець.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Вставляє вміст поля `$inserted` у поле `$array` перед елементом із ключем `$key`. Якщо `$key` є `null` (або відсутнє в полі), воно вставляється на початок.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Викликає всі зворотні виклики і повертає масив результатів.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Викликає метод на кожному об'єкті в масиві та повертає масив результатів.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Перевіряє, чи індексований масив зростаючим рядом числових ключів, починаючи з нуля, тобто списком.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Повертає останній елемент (що відповідає вказаному предикату, якщо він заданий). Якщо такого елемента немає, повертається результат виклику `$else` або нуль.
Функція `$predicate` має підпис `function ($value, int|string $key, array $array): bool`.

Він не змінює внутрішній вказівник, на відміну від `end()`. Параметри `$predicate` та `$else` з'явилися починаючи з версії 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Див. [функцію first() |#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Повертає ключ останнього елемента (який відповідає вказаному предикату, якщо його задано) або нуль, якщо такого елемента не існує. `$predicate` має підпис `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Зверніться до [firstKey( |#firstKey()]).


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Викликає `$transformer` на всіх елементах масиву і повертає масив значень, що повертаються. Зворотний виклик має сигнатуру `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Створює новий масив шляхом перетворення значень і ключів вихідного масиву. Функція `$transformer` має сигнатуру `function ($value, $key, array $array): ?array{$newValue, $newKey}`. Якщо `$transformer` повертає `null`, елемент пропускається. Для збережених елементів перший елемент повернутого масиву використовується як новий ключ, а другий елемент - як нове значення.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Цей метод корисний у ситуаціях, коли потрібно змінити структуру масиву (і ключі, і значення одночасно) або відфільтрувати елементи під час перетворення (повертаючи нуль для небажаних елементів).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Рекурсивно об'єднує два поля. Це корисно, наприклад, для об'єднання деревоподібних структур. При об'єднанні він слідує тим самим правилам, що й оператор `+`, який застосовується до масивів, тобто додає пару ключ/значення з другого масиву в перший масив і залишає значення з першого масиву в разі зіткнення ключів.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Значення з другого масиву завжди додаються до кінця першого. Зникнення значення `10` з другого поля може здатися трохи незрозумілим. Зверніть увагу, що це значення, як і значення `5` v poli prvním mají přiřazený stejný numerický klíč `0`, тому в результуючий масив потрапляє тільки елемент із першого поля.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Нормалізує масив до асоціативного масиву. Замінює цифрові клавіші їхніми значеннями, нове значення буде `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Повертає і видаляє значення елемента з масиву. Якщо він не існує, видає виняток або повертає значення `$default`, якщо воно існує.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Перейменовує ключ у масиві. Повертає `true`, якщо ключ було знайдено в масиві.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Повертає позицію заданого ключа в масиві. Позиція нумерується від 0. Якщо ключ не знайдено, функція повертає `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // vrátí 0
$position = Arrays::getKeyOffset($array, 'second'); // vrátí 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // vrátí null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Перевіряє, чи проходить хоча б один елемент у масиві тест, реалізований у `$predicate` із сигнатурою `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Див. розділ [Кожен() |#every].


toKey(mixed $key): string|int .[method]
---------------------------------------

Перетворює значення в ключ масиву, який є або цілим числом, або рядком.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Копіює елементи масиву `$array` в об'єкт `$object`, який потім повертає.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // додаємо $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Виводить кожен елемент масиву в рядок і обертає його префіксом `$prefix` і суфіксом `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

Об'єкт [api:Nette\Utils\ArrayHash] є нащадком загального класу stdClass і розширює його можливістю поводитися з ним як з масивом, тобто, наприклад, звертатися до членів через квадратні дужки:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // одночасно працює об'єктна нотація
$hash->foo; // 123
```

Ви можете використовувати функцію `count($hash)`, щоб отримати кількість членів.

Ви можете виконувати ітерації над об'єктом, як у випадку з масивом, навіть із посиланням:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Ми можемо перетворити існуючий масив на `ArrayHash` за допомогою методу `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Перетворення є рекурсивним:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // об'єкт ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Цьому можна запобігти за допомогою другого параметра:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // полюс
```

Перетворення назад у масив:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] являє собою лінійний масив, у якому індексами є тільки цілі числа, що зростають від 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Існуючі масиви можуть бути перетворені в `ArrayList` за допомогою методу `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Ви можете використовувати функцію `count($list)` для отримання кількості елементів.

Ви можете виконувати ітерації над об'єктом, як у випадку з масивом, навіть із посиланням:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'нове значення';
}
```

Доступ до ключів за межами допустимих значень викликає виняток `Nette\OutOfRangeException`:

```php
echo $list[-1]; // призводить Nette\OutOfRangeException
unset($list[30]); // призводить Nette\OutOfRangeException
```

Видалення ключа призводить до зміни нумерації елементів:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Новий елемент може бути доданий на початок за допомогою методу `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
