NEON Formatı
************

.[perex]
NEON insan tarafından okunabilen yapılandırılmış bir veri formatıdır. Nette, yapılandırma dosyaları için kullanılır. Ayrıca ayarlar, dil çevirileri vb. gibi yapılandırılmış veriler için de kullanılır. [Sandbox üzerinde deneyin |https://ne-on.org].

NEON, *Nette Nesne Notasyonu* anlamına gelir. XML veya JSON'dan daha az karmaşık ve hantaldır, ancak benzer yetenekler sağlar. YAML'ye çok benzemektedir. Ana avantajı, NEON'un DI hizmetlerinin yapılandırılmasının çok seksi olması sayesinde sözde [varlıklara |#entities] sahip olmasıdır. Ve girinti için sekmelere izin verir.

NEON, kullanımı basit olacak şekilde sıfırdan inşa edilmiştir.


Entegrasyon .[#toc-integration]
===============================

- NetBeans (yerleşik desteği vardır)
- PhpStorm ([eklenti |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([eklenti |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte])
- Sublime Text 3 ([eklenti |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([eklenti |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([eklenti |https://github.com/fpob/nette.vim])
- Emacs ([eklenti |https://github.com/Fuco1/neon-mode])
- Prism.js ([entegre dil |https://prismjs.com/#supported-languages])


- [PHP için NEON |@home]
- [JavaScript için NEON |https://github.com/matej21/neon-js]
- [Python için NEON |https://github.com/paveldedik/neon-py].


Sözdizimi .[#toc-syntax]
========================

NEON'da yazılmış bir dosya genellikle bir dizi veya eşlemeden oluşur.


Eşlemeler .[#toc-mappings]
--------------------------
Eşleme bir anahtar-değer çiftleri kümesidir, PHP'de buna ilişkisel dizi denir. Her çift `key: value` şeklinde yazılır, `:`'dan sonra bir boşluk bırakılması gerekir. Değer herhangi bir şey olabilir: dize, sayı, boolean, null, dizi veya başka bir eşleme.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

PHP'de aynı yapı şu şekilde yazılacaktır:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Bu gösterime blok gösterimi denir çünkü tüm öğeler ayrı bir satırdadır ve aynı girintiye sahiptir (bu durumda hiçbiri). NEON ayrıca parantez içine alınan, girintinin rol oynamadığı ve her bir öğenin ayırıcısının virgül veya satırsonu olduğu eşleme için satır içi gösterimi de destekler:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

Bu, birden fazla satırda yazılanın aynısıdır (girinti önemli değildir):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

Alternatif olarak, `=` yerine kullanılabilir <code>: </code>, hem blok hem de satır içi gösterimde kullanılabilir:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Diziler .[#toc-sequences]
-------------------------
Diziler PHP'de dizinlenmiş dizilerdir. Bunlar `-` tire işareti ve ardından bir boşluk ile başlayan satırlar olarak yazılır. Yine, değer herhangi bir şey olabilir: dize, sayı, boolean, null, dizi veya başka bir eşleme.

```neon
- Cat
- Dog
- Goldfish
```

PHP'de aynı yapı şu şekilde yazılacaktır:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Bu gösterime blok gösterimi denir çünkü tüm öğeler ayrı bir satırdadır ve aynı girintiye sahiptir (bu durumda hiçbiri). NEON ayrıca diziler için parantez içine alınmış satır içi gösterimi de destekler, girinti bir rol oynamaz ve her bir öğenin ayırıcısı virgül veya satırsonudur:

```neon
[Cat, Dog, Goldfish]
```

Bu, birden fazla satırda yazılanın aynısıdır (girinti önemli değildir):

```neon
[
	Cat, Dog
		Goldfish
]
```

Satır içi gösterimde kısa çizgiler kullanılamaz.


Kombinasyon .[#toc-combination]
-------------------------------
Eşlemelerin ve dizilerin değerleri başka eşlemeler ve diziler olabilir. Girinti seviyesi önemli bir rol oynar. Aşağıdaki örnekte, sıra öğelerini belirtmek için kullanılan kısa çizgi `pets` tuşundan daha büyük bir girintiye sahiptir, bu nedenle öğeler ilk satırın değeri haline gelir:

```neon
pets:
 - Cat
 - Dog
cars:
 - Volvo
 - Skoda
```

PHP'de aynı yapı şu şekilde yazılacaktır:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Blok ve satır içi gösterimleri birleştirmek mümkündür:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

Blok gösterimi artık bir satır içi gösterimin içinde kullanılamaz, bu çalışmaz:

```neon
item: [
	pets:
	 - Cat     # THIS IS NOT POSSIBLE!!!
	 - Dog
]
```

PHP eşleme ve diziler için aynı yapıyı, yani dizileri kullandığından, her ikisi de birleştirilebilir. Girintileme bu sefer aynıdır:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

PHP'de aynı yapı şu şekilde yazılacaktır:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Dizeler .[#toc-strings]
-----------------------
NEON'daki dizeler tek veya çift tırnak içine alınabilir. Ancak görebileceğiniz gibi, tırnak işaretleri olmadan da olabilirler.

```neon
- A unquoted string in NEON
- 'A singled-quoted string in NEON'
- "A double-quoted string in NEON"
```

Dize karakter içeriyorsa `# " ' , : = - [ ] { } ( )` NEON sözdizimi ile karıştırılabileceği için tırnak içine alınmalıdır. Kaçış kullanmadıkları için tek tırnak kullanmanızı öneririz. Böyle bir dizede bir tırnak işareti içine almanız gerekiyorsa, iki katına çıkarın:

```neon
'A single quote '' inside a single-quoted string'
```

Çift tırnaklar, ters eğik çizgileri kullanarak özel karakterler yazmak için kaçış dizilerini kullanmanıza olanak tanır `\`. All escape sequences as in the JSON format are supported, plus `\_`, bu boşluk bırakmayan bir boşluktur, yani `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Dizeleri tırnak işareti içine almanız gereken başka durumlar da vardır:
- boşluklarla başlar veya biterler
- sayı, boole veya null gibi görünebilir
- NEON bunları [tarih |#dates] olarak anlayacaktır


Çok Satırlı Dizeler .[#toc-multiline-strings]
---------------------------------------------

Çok satırlı bir dize ayrı satırlarda üçlü tırnak işaretiyle başlar ve biter. İlk satırın girintisi tüm satırlar için yok sayılır:

```neon
'''
	first line
		second line
	third line
	'''
```

PHP'de aynısını şöyle yazardık:

```php
"first line\n\tsecond line\nthird line" // PHP
```

Kaçış dizileri yalnızca kesme işaretleri yerine çift tırnak içine alınmış dizeler için çalışır:

```neon
"""
	Copyright \u00A9
"""
```


Sayılar .[#toc-numbers]
-----------------------
NEON, bilimsel gösterim olarak adlandırılan şekilde yazılmış sayıları ve ayrıca ikili, sekizli ve onaltılı sayıları anlar:

```neon
- 12 # bir tamsayı
- 12.3 # a float
- +1.2e-34 # üstel bir sayı

- 0b11010 # ikili sayı
- 0o666 # sekizli sayı
- 0x7A # hexa sayısı
```


Nulls .[#toc-nulls]
-------------------
Null NEON'da `null` kullanılarak veya bir değer belirtilmeden ifade edilebilir. Baş harfi büyük olan veya tüm harfleri büyük olan varyantlara da izin verilir.

```neon
a: null
b:
```


Booleans .[#toc-booleans]
-------------------------
Boolean değerler NEON'da `true` / `false` veya `yes` / `no` kullanılarak ifade edilir. Baş harfi büyük veya tamamı büyük harf olan varyantlara da izin verilir.

```neon
[true, TRUE, True, false, yes, no]
```


Tarihler .[#toc-dates]
----------------------
NEON, verileri ifade etmek için aşağıdaki formatları kullanır ve bunları otomatik olarak `DateTimeImmutable` nesnelerine dönüştürür:

```neon
- 2016-06-03 # tarih
- 2016-06-03 19:00:00 # tarih ve saat
- 2016-06-03 19:00:00.1234 # tarih ve mikro zaman
- 2016-06-03 19:00:00 +0200 # tarih & saat & zaman dilimi
- 2016-06-03 19:00:00 +02:00 # tarih & saat & zaman dilimi
```


Varlıklar .[#toc-entities]
--------------------------
Varlık, bir fonksiyon çağrısına benzeyen bir yapıdır:

```neon
Column(type: int, nulls: yes)
```

PHP'de bir nesne olarak ayrıştırılır [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Varlıklar da zincirlenebilir:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

PHP'de aşağıdaki gibi ayrıştırılır:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

Parantezlerin içinde, eşleme ve diziler için kullanılan satır içi gösterim kuralları geçerlidir, bu nedenle birkaç satıra bölünebilir ve virgül eklemek gerekli değildir:

```neon
Column(
	type: int
	nulls: yes
)
```


Yorumlar .[#toc-comments]
-------------------------
Yorumlar `#` ile başlar ve sağdaki tüm karakterler yok sayılır:

```neon
# bu satır yorumlayıcı tarafından göz ardı edilecektir
Sokak: 742 Evergreen Terrace
Şehir: Springfield # bu da göz ardı edildi
ülke ABD
```


NEON JSON'a Karşı .[#toc-neon-versus-json]
==========================================
JSON, NEON'un bir alt kümesidir. Bu nedenle her JSON NEON olarak ayrıştırılabilir:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

Tırnak işaretlerini çıkarırsak ne olur?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

Parantez ve virgüllere ne dersiniz?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

Mermiler daha okunaklı mı?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Peki ya yorumlar?

```neon
# my web application config

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # use gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

NEON sözdizimini buldunuz!


{{description: NEON insan dostu bir veri serileştirme dilidir. YAML ile benzerlik gösterir. Temel fark, NEON'un "varlıkları" ve girinti için sekme karakterlerini desteklemesidir.}}
{{leftbar: utils:@left-menu}}
