Razširjanje Latte
*****************

.[perex]
Latte je zasnovan z mislijo na razširljivost. Čeprav njegov standardni nabor oznak, filtrov in funkcij pokriva številne primere uporabe, pogosto potrebujete dodati lastno specifično logiko ali pomožna orodja. Ta stran ponuja pregled načinov, kako razširiti Latte, da bo popolnoma ustrezal zahtevam vašega projekta - od preprostih pomočnikov do kompleksne nove sintakse.


Načini razširitve Latte .[#toc-ways-to-extend-latte]
====================================================

Tukaj je hiter pregled glavnih načinov, kako lahko prilagodite in razširite Latte:

- **[Filtri po meri |Custom Filters]:** Za formatiranje ali preoblikovanje podatkov neposredno v izpisu predloge (npr. `{$var|myFilter}`). Idealno za naloge, kot so formatiranje datumov, urejanje besedila ali uporaba specifičnega ubežanja znakov. Uporabite jih lahko tudi za urejanje večjih blokov vsebine HTML tako, da vsebino ovijete v anonimni [`{block}` |tags#block] in nanjo uporabite filter po meri.
- **[Funkcije po meri |Custom Functions]:** Za dodajanje ponovno uporabne logike, ki jo je mogoče klicati znotraj izrazov v predlogi (npr. `{myFunction($arg1, $arg2)}`). Uporabno za izračune, dostop do pomožnih funkcij aplikacije ali generiranje majhnih delov vsebine.
- **[Oznake po meri |Custom Tags]:** Za ustvarjanje popolnoma novih jezikovnih konstruktov (`{mytag}...{/mytag}` ali `n:mytag`). Oznake ponujajo največ možnosti, omogočajo definiranje lastnih struktur, nadzor nad razčlenjevanjem predloge in implementacijo kompleksne logike izrisa.
- **[Prevajalni prehodi |Compiler Passes]:** Funkcije, ki spreminjajo abstraktno sintaktično drevo (AST) predloge po razčlenjevanju, vendar pred generiranjem kode PHP. Uporabljajo se za napredne optimizacije, varnostne preglede (kot je Sandbox) ali samodejne spremembe kode.
- **[Nalagatelji po meri |loaders]:** Za spremembo načina, kako Latte išče in nalaga datoteke predlog (npr. nalaganje iz baze podatkov, šifriranega pomnilnika itd.).

Izbira prave metode razširitve je ključna. Preden ustvarite zapleteno oznako, razmislite, ali bi zadostoval preprostejši filter ali funkcija. Poglejmo si primer: implementacija generatorja *Lorem ipsum*, ki kot argument sprejme število besed za generiranje.

- **Kot oznaka?** `{lipsum 40}` - Možno, vendar so oznake primernejše za krmilne strukture ali generiranje zapletenih oznak. Oznak ni mogoče uporabiti neposredno v izrazih.
- **Kot filter?** `{=40|lipsum}` - Tehnično deluje, vendar so filtri namenjeni *preoblikovanju* vhodne vrednosti. Tukaj je `40` *argument*, ne vrednost, ki se preoblikuje. To se zdi semantično napačno.
- **Kot funkcija?** `{lipsum(40)}` - To je najbolj naravna rešitev! Funkcije sprejemajo argumente in vračajo vrednosti, kar je idealno za uporabo v katerem koli izrazu: `{var $text = lipsum(40)}`.

**Splošno priporočilo:** Uporabljajte funkcije za izračune/generiranje, filtre za preoblikovanje in oznake za nove jezikovne konstrukte ali zapletene oznake. Prehode uporabljajte za manipulacijo z AST in nalagatelje za pridobivanje predlog.


Neposredna registracija .[#toc-direct-registration]
===================================================

Za pomožna orodja, specifična za projekt, ali hitre razširitve Latte omogoča neposredno registracijo filtrov in funkcij v objekt `Latte\Engine`.

Za registracijo filtra uporabite metodo `addFilter()`. Prvi argument vaše filtrirne funkcije bo vrednost pred znakom `|`, naslednji argumenti pa so tisti, ki se posredujejo za dvopičjem `:`.

```php
$latte = new Latte\Engine;

// Definicija filtra (klicni objekt: funkcija, statična metoda itd.)
$myTruncate = fn(string $s, int $length = 50) => mb_substr($s, 0, $length);

// Registracija
$latte->addFilter('truncate', $myTruncate);

// Uporaba v predlogi: {$text|truncate} ali {$text|truncate:100}
```

Lahko registrirate tudi **Nalagatelj filtrov (Filter Loader)**, funkcijo, ki dinamično zagotavlja klicne objekte filtrov glede na zahtevano ime:

```php
$latte->addFilterLoader(fn(string $name) => /* vrne klicni objekt ali null */);
```


Za registracijo funkcije, uporabne v izrazih predloge, uporabite `addFunction()`.

```php
$latte = new Latte\Engine;

// Definicija funkcije
$isWeekend = fn(DateTimeInterface $date) => $date->format('N') >= 6;

// Registracija
$latte->addFunction('isWeekend', $isWeekend);

// Uporaba v predlogi: {if isWeekend($myDate)}Víkend!{/if}
```

Več informacij najdete v razdelku [Ustvarjanje filtrov po meri |custom-filters] in [Funkcij |custom-functions].


Robusten način: Razširitev Latte .{toc: Latte Extension}
========================================================

Medtem ko je neposredna registracija preprosta, je standardni in priporočeni način za pakiranje in distribucijo razširitev Latte prek razredov **Extension**. Razširitev služi kot osrednja konfiguracijska točka za registracijo več oznak, filtrov, funkcij, prevajalnih prehodov in drugih elementov.

Zakaj uporabljati razširitve?

- **Organizacija:** Ohranja povezane razširitve (oznake, filtri itd. za določeno funkcijo) skupaj v enem razredu.
- **Ponovna uporabnost in deljenje:** Enostavno zapakirate svoje razširitve za uporabo v drugih projektih ali za deljenje s skupnostjo (npr. prek Composerja).
- **Polna moč:** Oznake po meri in prevajalne prehode *lahko registrirate samo* prek razširitev.


Registracija razširitve .[#toc-registering-an-extension]
--------------------------------------------------------

Razširitev se registrira v Latte z metodo `addExtension()` (ali prek [konfiguracijske datoteke |application:configuration#sablony-latte]):

```php
$latte = new Latte\Engine;
$latte->addExtension(new MyProjectExtension);
```

Če registrirate več razširitev in te definirajo enako poimenovane oznake, filtre ali funkcije, ima prednost zadnja dodana razširitev. To tudi pomeni, da lahko vaše razširitve prepišejo izvorne oznake/filtre/funkcije.

Kadar koli naredite spremembo v razredu in samodejno osveževanje ni izklopljeno, bo Latte samodejno ponovno prevedel vaše predloge.


Ustvarjanje razširitve .[#toc-creating-an-extension]
----------------------------------------------------

Za ustvarjanje lastne razširitve morate ustvariti razred, ki deduje od [api:Latte\Extension]. Za predstavo, kako taka razširitev izgleda, si oglejte vgrajeno "CoreExtension":https://github.com/nette/latte/blob/master/src/Latte/Essential/CoreExtension.php.

Poglejmo si metode, ki jih lahko implementirate:


beforeCompile(Latte\Engine $engine): void .[method]
---------------------------------------------------

Pokliče se pred prevajanjem predloge. Metodo lahko uporabite na primer za inicializacije, povezane s prevajanjem.


getTags(): array .[method]
--------------------------

Pokliče se med prevajanjem predloge. Vrne asociativno polje *ime oznake => klicni objekt*, kar so funkcije za razčlenjevanje oznak. [Več informacij |custom-tags].

```php
public function getTags(): array
{
	return [
		'foo' => FooNode::create(...),
		'bar' => BarNode::create(...),
		'n:baz' => NBazNode::create(...),
		// ...
	];
}
```

Oznaka `n:baz` predstavlja čisti [n:atribut |syntax#n:atributy], torej oznako, ki jo je mogoče zapisati samo kot atribut.

Pri oznakah `foo` in `bar` Latte samodejno prepozna, ali gre za parne oznake, in če da, jih je mogoče samodejno zapisati z n:atributi, vključno z različicami s predponami `n:inner-foo` in `n:tag-foo`.

Vrstni red izvajanja takšnih n:atributov je določen z njihovim vrstnim redom v polju, ki ga vrne metoda `getTags()`. Tako se `n:foo` vedno izvede pred `n:bar`, tudi če so atributi v oznaki HTML navedeni v obratnem vrstnem redu kot `<div n:bar="..." n:foo="...">`.

Če morate določiti vrstni red n:atributov med več razširitvami, uporabite pomožno metodo `order()`, kjer parameter `before` xor `after` določa, katere oznake so razvrščene pred ali za oznako.

```php
public function getTags(): array
{
	return [
		'foo' => self::order(FooNode::create(...), before: 'bar')]
		'bar' => self::order(BarNode::create(...), after: ['block', 'snippet'])]
	];
}
```


getPasses(): array .[method]
----------------------------

Pokliče se med prevajanjem predloge. Vrne asociativno polje *ime prehoda => klicni objekt*, kar so funkcije, ki predstavljajo t.i. [prevajalni prehodi |compiler-passes], ki prehajajo in spreminjajo AST.

Tudi tukaj lahko uporabite pomožno metodo `order()`. Vrednost parametrov `before` ali `after` je lahko `*` s pomenom pred/po vseh.

```php
public function getPasses(): array
{
	return [
		'optimize' => Passes::optimizePass(...),
		'sandbox' => self::order($this->sandboxPass(...), before: '*'),
		// ...
	];
}
```


beforeRender(Latte\Engine $engine): void .[method]
--------------------------------------------------

Pokliče se pred vsakim izrisom predloge. Metodo lahko uporabite na primer za inicializacijo spremenljivk, ki se uporabljajo med izrisom.


getFilters(): array .[method]
-----------------------------

Pokliče se pred izrisom predloge. Vrne filtre kot asociativno polje *ime filtra => klicni objekt*. [Več informacij |custom-filters].

```php
public function getFilters(): array
{
	return [
		'batch' => $this->batchFilter(...),
		'trim' => $this->trimFilter(...),
		// ...
	];
}
```


getFunctions(): array .[method]
-------------------------------

Pokliče se pred izrisom predloge. Vrne funkcije kot asociativno polje *ime funkcije => klicni objekt*. [Več informacij |custom-functions].

```php
public function getFunctions(): array
{
	return [
		'clamp' => $this->clampFunction(...),
		'divisibleBy' => $this->divisibleByFunction(...),
		// ...
	];
}
```


getProviders(): array .[method]
-------------------------------

Pokliče se pred izrisom predloge. Vrne polje ponudnikov, ki so običajno objekti, ki jih oznake uporabljajo med izvajanjem. Dostopa se jim prek `$this->global->...`. [Več informacij |custom-tags#Introducing Providers].

```php
public function getProviders(): array
{
	return [
		'myFoo' => $this->foo,
		'myBar' => $this->bar,
		// ...
	];
}
```


getCacheKey(Latte\Engine $engine): mixed .[method]
--------------------------------------------------

Pokliče se pred izrisom predloge. Vračana vrednost postane del ključa, katerega zgoščena vrednost je vsebovana v imenu datoteke prevedene predloge. Za različne vračane vrednosti torej Latte generira različne datoteke predpomnilnika.
