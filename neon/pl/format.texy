Format NEON
***********

.[perex]
NEON to czytelny dla człowieka format danych strukturalnych. W Nette jest używany do plików konfiguracyjnych. Jest również używany do danych strukturalnych, takich jak ustawienia, tłumaczenia językowe itp. [Wypróbuj go|https://ne-on.org].

NEON to skrót od *Nette Object Notation*. Jest mniej skomplikowany i nieporęczny niż XML czy JSON, ale zapewnia podobne funkcje. Jest bardzo podobny do YAML. Główną zaletą jest to, że NEON ma tak zwane [#encje], dzięki którym konfiguracja usług DI jest [również seksowna |https://gist.github.com/dg/26baf3ce8f29d0f751e9dddfaa06504f]. I pozwala na wcięcia za pomocą tabulatorów.

NEON został zbudowany od podstaw tak, aby był łatwy w użyciu.


Integracja
==========

- NetBeans (ma wbudowane wsparcie)
- PhpStorm ([plugin |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([Nette Latte + Neon |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte]) lub [Nette for VS Code |https://marketplace.visualstudio.com/items?itemName=franken-ui.nette-for-vscode])
- Sublime Text 3 ([plugin |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([plugin |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([plugin |https://github.com/fpob/nette.vim])
- Emacs ([plugin |https://github.com/Fuco1/neon-mode])
- Prism.js ([zintegrowany język |https://prismjs.com/#supported-languages])


- [NEON for PHP |@home]
- [NEON for JavaScript |https://github.com/matej21/neon-js]
- [NEON for Python |https://github.com/paveldedik/neon-py].


Składnia
========

Plik napisany w NEON zwykle reprezentuje tablicę lub mapowanie.


Mapowanie
---------
Mapowanie to zbiór par klucz-wartość, w PHP powiedzielibyśmy tablica asocjacyjna. Każda para jest zapisana jako `key: value`, spacja po `:` jest wymagana. Wartością może być cokolwiek: ciąg znaków, liczba, boolean, null, sekwencja lub inne mapowanie.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

W PHP ta sama struktura zostałaby zapisana jako:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Ten zapis nazywa się blokowym, ponieważ wszystkie elementy znajdują się w osobnych wierszach i mają takie samo wcięcie (w tym przypadku żadne). NEON obsługuje również reprezentację inline mapowania, która jest zamknięta w nawiasach, wcięcie nie odgrywa żadnej roli, a separatorem poszczególnych elementów jest przecinek lub nowy wiersz:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

To samo zapisane w wielu wierszach (wcięcie nie ma znaczenia):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

Zamiast <code>: </code> można alternatywnie używać `=` zarówno w zapisie blokowym, jak i inline:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Sekwencje
---------
Sekwencje to w PHP tablice indeksowane. Zapisuje się je jako wiersze zaczynające się od myślnika `-` poprzedzonego spacją. Wartością ponownie może być cokolwiek: ciąg znaków, liczba, boolean, null, sekwencja lub inne mapowanie.

```neon
- Cat
- Dog
- Goldfish
```

W PHP ta sama struktura zostałaby zapisana jako:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Ten zapis nazywa się blokowym, ponieważ wszystkie elementy znajdują się w osobnych wierszach i mają takie samo wcięcie (w tym przypadku żadne). NEON obsługuje również reprezentację inline sekwencji, która jest zamknięta w nawiasach, wcięcie nie odgrywa żadnej roli, a separatorem poszczególnych elementów jest przecinek lub nowy wiersz:

```neon
[Cat, Dog, Goldfish]
```

To samo zapisane w wielu wierszach (wcięcie nie ma znaczenia):

```neon
[
	Cat, Dog
		Goldfish
]
```

W reprezentacji inline nie można używać myślników z wcięciem.


Kombinacje
----------
Wartościami mapowań i sekwencji mogą być inne mapowania i sekwencje. Główną rolę odgrywa poziom wcięcia. W poniższym przykładzie myślnik użyty do oznaczenia elementów sekwencji ma większe wcięcie niż klucz `pets`, więc elementy stają się wartością pierwszego wiersza:

```neon
pets:
   - Cat
   - Dog
cars:
   - Volvo
   - Skoda
```

W PHP ta sama struktura zostałaby zapisana jako:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Można łączyć zapis blokowy i inline:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

Wewnątrz zapisu inline nie można już używać zapisu blokowego, to nie zadziała:

```neon
item: [
	pets:
	 - Cat     # TO JEST NIEDOZWOLONE!!!
	 - Dog
]
```

W poprzednim przypadku zapisaliśmy mapowanie, którego elementami były sekwencje, teraz spróbujemy odwrotnie i utworzymy sekwencję zawierającą mapowania:

```neon
-
	name: John
	age: 35
-
	name: Peter
	age: 28
```

Nie jest konieczne, aby myślniki znajdowały się w osobnych wierszach, można je umieścić również w ten sposób:

```neon
- name: John
  age: 35
- name: Peter
  age: 28
```

To od ciebie zależy, czy wyrównasz klucze w kolumnie za pomocą spacji, czy użyjesz tabulatora.

Ponieważ w PHP używa się tej samej struktury zarówno dla mapowań, jak i sekwencji, czyli tablic, można je obie połączyć. Wcięcie jest tym razem takie samo:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

W PHP ta sama struktura zostałaby zapisana jako:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Ciągi / Stringi
---------------
Ciągi znaków w NEON można umieszczać w pojedynczych lub podwójnych cudzysłowach. Ale jak widać, mogą być również bez cudzysłowów.

```neon
- Ciąg w NEON bez cudzysłowów
- 'Ciąg w NEON w pojedynczych cudzysłowach'
- "Ciąg w NEON w podwójnych cudzysłowach"
```

Jeśli ciąg zawiera znaki `# " ' , : = - [ ] { } ( )`, które można pomylić ze składnią NEON, należy go umieścić w cudzysłowach. Zalecamy użycie pojedynczych cudzysłowów, ponieważ w nich nie stosuje się escapowania. Jeśli potrzebujesz zapisać cudzysłów w takim ciągu, podwój go:

```neon
'Cudzysłów '' wewnątrz ciągu w pojedynczych cudzysłowach'
```

Podwójne cudzysłowy umożliwiają używanie sekwencji ucieczki do zapisu znaków specjalnych za pomocą odwrotnych ukośników `\`. Obsługiwane są wszystkie sekwencje ucieczki jak w formacie JSON oraz dodatkowo `\_`, co jest spacją niełamliwą, czyli `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Istnieją inne przypadki, w których należy umieścić ciągi znaków w cudzysłowach:
- zaczynają się lub kończą spacjami
- wyglądają jak liczby, wartości logiczne lub null
- NEON zrozumiałby je jako [#Daty]


Ciągi wieloliniowe
------------------

Ciąg wieloliniowy zaczyna się i kończy potrójnym cudzysłowem w osobnych wierszach. Wcięcie pierwszego wiersza jest ignorowane dla wszystkich wierszy:

```neon
'''
	pierwsza linia
		druga linia
	trzecia linia
	'''
```

W PHP to samo napisalibyśmy jako:

```php
"pierwsza linia\n\tdruga linia\ntrzecia linia" // PHP
```

Sekwencje ucieczki działają tylko w ciągach ujętych w podwójne cudzysłowy zamiast apostrofów:

```neon
"""
	Copyright \u00A9
"""
```


Liczby
------
NEON rozumie liczby zapisane w tzw. notacji naukowej, a także liczby w systemie binarnym, ósemkowym i szesnastkowym:

```neon
- 12         # liczba całkowita
- 12.3       # float
- +1.2e-34   # liczba wykładnicza

- 0b11010    # liczba binarna
- 0o666      # liczba ósemkowa
- 0x7A       # liczba szesnastkowa
```


Null
----
Null można w NEON wyrazić za pomocą `null` lub przez pominięcie wartości. Dozwolone są również warianty z wielką pierwszą literą lub wszystkimi wielkimi literami.

```neon
a: null
b:
```


Wartości logiczne
-----------------
Wartości logiczne są w NEON wyrażane za pomocą `true` / `false` lub `yes` / `no`. Dozwolone są również warianty z wielką pierwszą literą lub wszystkimi wielkimi literami.

```neon
[true, TRUE, True, false, yes, no]
```


Daty
----
NEON używa do wyrażania dat następujących formatów i automatycznie konwertuje je na obiekty `DateTimeImmutable`:

```neon
- 2016-06-03                  # data
- 2016-06-03 19:00:00         # data i czas
- 2016-06-03 19:00:00.1234    # data i mikroczas
- 2016-06-03 19:00:00 +0200   # data i czas i strefa
- 2016-06-03 19:00:00 +02:00  # data i czas i strefa
```


Encje
-----
Encja to struktura przypominająca wywołanie funkcji:

```neon
Column(type: int, nulls: yes)
```

W PHP jest parsowana jako obiekt [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Encje można również łączyć w łańcuchy:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Co w PHP jest parsowane w ten sposób:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

Wewnątrz nawiasów obowiązują zasady zapisu inline używane dla mapowań i sekwencji, więc może być również wieloliniowy i wtedy nie trzeba podawać przecinków:

```neon
Column(
	type: int
	nulls: yes
)
```


Komentarze
----------
Komentarze zaczynają się od znaku `#`, a wszystkie następujące znaki po prawej stronie są ignorowane:

```neon
# ta linia zostanie zignorowana przez interpreter
street: 742 Evergreen Terrace
city: Springfield  # to również jest ignorowane
country: USA
```


Neon kontra JSON
================
JSON jest podzbiorem NEONu. Każdy JSON można więc sparsować jako NEON:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

Co gdybyśmy pominęli cudzysłowy?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

A nawiasy klamrowe i przecinki?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

Czy listy z myślnikami nie są bardziej czytelne?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Dodamy komentarze?

```neon
# konfiguracja mojej aplikacji internetowej

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # użyj gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Hurra, teraz znasz składnię NEONu!


{{description: NEON to łatwy do odczytania format serializacji danych. Jest podobny do YAML. Główna różnica polega na tym, że NEON obsługuje „encje” i do wcięć możemy używać zarówno spacji, jak i tabulatorów.}}
