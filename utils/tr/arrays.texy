Dizi İşlevleri
**************

.[perex]
Bu sayfa dizilerle ilgili olan [Nette\Utils\Arrays |#Arrays], [ArrayHash |#ArrayHash] ve [ArrayList |#ArrayList] sınıfları hakkındadır.

Kurulum:

```shell
composer require nette/utils
```


Diziler .[#toc-arrays]
======================

[api:Nette\Utils\Arrays] bir avuç kullanışlı dizi işlevi içeren statik bir sınıftır.

Aşağıdaki örneklerde, aşağıdaki sınıf takma adının tanımlandığı varsayılmaktadır:

```php
use Nette\Utils\Arrays;
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Bir dizide değer olup olmadığını sınar. Sıkı bir karşılaştırma kullanır (`===`)

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(iterable $array, callable $callback): bool .[method]
----------------------------------------------------------

Dizideki tüm öğelerin, `function ($value, $key, array $array): bool` imzasına sahip olan sağlanan işlev tarafından uygulanan testi geçip geçmediğini sınar.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

[some() |#some()] işlevine bakın.


first(array $array): mixed .[method]
------------------------------------

Dizideki ilk öğeyi veya dizi boşsa null döndürür. `reset()` adresinden farklı olarak dahili göstericiyi değiştirmez.

```php
Arrays::first([1, 2, 3]); // 1
Arrays::first([]);        // null
```


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Çok boyutlu diziyi düz diziye dönüştürür.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Geri dönüşler `$array[$key]` öğesi. Eğer mevcut değilse, üçüncü bağımsız değişken olarak varsayılan bir değer ayarlanmadığı sürece `Nette\InvalidArgumentException` adresi atılır.

```php
// eğer $array['foo'] mevcut değilse, bir istisna atar
$value = Arrays::get($array, 'foo');

// eğer $array['foo'] mevcut değilse, 'bar' döndürür
$value = Arrays::get($array, 'foo', 'bar');
```

Argüman `$key` bir dizi de olabilir.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// returns 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Verilen referansı döndürür `$array[$key]`. Dizin mevcut değilse, `null` değeriyle yeni bir dizin oluşturulur.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// $array['foo'] referansını döndürür
```

[get() |#get()] işlevinin yanı sıra çok boyutlu dizilerle de çalışır.

```php
$value = & Arrays::get($array, ['color', 'favorite']);
// $array['color']['favorite'] referansını döndürür
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Yalnızca `$pattern` düzenli ifadesiyle eşleşen dizi öğelerini döndürür. `$invert` `true` ise, eşleşmeyen öğeleri döndürür. Regex derleme veya çalışma zamanı hatası `Nette\RegexpException` atar.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// sadece sayısal öğeleri döndürür
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

`$inserted` dizisinin içeriğini `$key` dizisinden hemen sonra `$array` dizisine ekler. `$key` dizisi `null` dizisi ise (veya yoksa), dizinin sonuna eklenir.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

`$inserted` dizisinin içeriğini `$key`'den önce `$array` 'e yerleştirir. `$key`, `null` ise (veya yoksa), başa yerleştirilir.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Tüm geri çağırmaları çağırır ve sonuç dizisini döndürür.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Bir dizideki her nesne üzerinde yöntem çağırır ve sonuç dizisini döndürür.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Dizinin sıfırdan itibaren artan sırada sayısal anahtarlarla indislenip indislenmediğini denetler.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array): mixed .[method]
-----------------------------------

Dizideki son öğeyi veya dizi boşsa null döndürür. `end()` adresinden farklı olarak dahili göstericiyi değiştirmez.

```php
Arrays::last([1, 2, 3]); // 3
Arrays::last([]);        // null
```


map(iterable $array, callable $callback): array .[method]
---------------------------------------------------------

Dizideki tüm öğeler üzerinde `$callback` adresini çağırır ve dönüş değerleri dizisini döndürür. Geri arama `function ($value, $key, array $array): bool` imzasına sahiptir.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

İki alanı özyinelemeli olarak birleştirir. Örneğin, ağaç yapılarını birleştirmek için kullanışlıdır. Dizi için `+` operatörü gibi davranır, yani ikinci diziden bir anahtar/değer çiftini birincisine ekler ve bir anahtar çakışması durumunda ilk dizideki değeri korur.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

İkinci dizideki değerler her zaman birinciye eklenir. İkinci diziden `10` değerinin kaybolması biraz kafa karıştırıcı görünebilir. Bu değerin yanı sıra `5` in the first array have the same numeric key `0` değerinin de kaybolduğuna dikkat edilmelidir, bu nedenle ortaya çıkan alanda yalnızca ilk diziden bir öğe vardır.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Diziyi ilişkisel diziye normalleştirir. Sayısal anahtarları değerleriyle değiştirin, yeni değer `$filling` olacaktır.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Bir diziden bir öğenin değerini döndürür ve kaldırır. Mevcut değilse, bir istisna atar veya sağlanmışsa `$default` döndürür.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Bir anahtarı yeniden adlandırır. Anahtar dizide bulunmuşsa `true` döndürür.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Verilen dizi anahtarının sıfır indeksli konumunu döndürür. Anahtar bulunamazsa `null` döndürür.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // returns 0
$position = Arrays::getKeyOffset($array, 'second'); // returns 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // returns null
```


some(iterable $array, callable $callback): bool .[method]
---------------------------------------------------------

Dizideki en az bir öğenin `function ($value, $key, array $array): bool` imzasıyla sağlanan geri arama tarafından uygulanan testi geçip geçmediğini sınar.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Bkz. [every() |#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Bir değeri, tamsayı veya dize olan bir dizi anahtarına dönüştürür.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

`$array` dizisinin öğelerini `$object` nesnesine kopyalar ve sonra geri döndürür.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // it sets $obj->foo = 1; $obj->bar = 2;
```


wrap(iterable $array, string $prefix='', string $suffix=''): array .[method]
----------------------------------------------------------------------------

Dizinin her bir elemanını dizeye dönüştürür ve `$prefix` ve `$suffix` ile çevreler.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

Object [api:Nette\Utils\ArrayHash] genel sınıf stdClass'ın soyundan gelir ve onu bir dizi olarak ele alma, örneğin köşeli parantez kullanarak üyelere erişme becerisine genişletir:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // nesne gösteriminde de çalışır
$hash->foo; // 123
```

Eleman sayısını elde etmek için `count($hash)` işlevini kullanabilirsiniz.

Bir nesne üzerinde, bir dizide yaptığınız gibi, hatta bir referansla bile yineleme yapabilirsiniz:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'yeni değer';
}
```

Mevcut diziler `from()` kullanılarak `ArrayHash` adresine dönüştürülebilir:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Dönüşüm özyinelemelidir:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // object ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

İkinci parametre ile önlenebilir:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // array
```

Diziye geri dönüştürün:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] indislerin yalnızca 0'dan itibaren artan tamsayılar olduğu doğrusal bir diziyi temsil eder.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Öğe sayısını almak için `count($list)` işlevini kullanabilirsiniz.

Bir nesne üzerinde, bir dizide yaptığınız gibi, hatta bir referansla bile yineleme yapabilirsiniz:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'yeni değer';
}
```

Mevcut diziler `from()` kullanılarak `ArrayList` adresine dönüştürülebilir:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

İzin verilen değerlerin ötesindeki anahtarlara erişmek bir istisna oluşturur `Nette\OutOfRangeException`:

```php
echo $list[-1]; // throws Nette\OutOfRangeException
unset($list[30]); // throws Nette\OutOfRangeException
```

Anahtarın çıkarılması elemanların yeniden numaralandırılmasına neden olacaktır:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

`prepend()` adresini kullanarak başlangıca yeni bir öğe ekleyebilirsiniz:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
