Файлова система
***************

.[perex]
[api:Nette\Utils\FileSystem] — це клас з корисними функціями для роботи з файловою системою. Однією з переваг порівняно з нативними функціями PHP є те, що в разі помилки вони викликають винятки.


Якщо вам потрібно шукати файли на диску, використовуйте [Finder|finder].

Встановлення:

```shell
composer require nette/utils
```

Наступні приклади передбачають створений псевдонім:

```php
use Nette\Utils\FileSystem;
```


Маніпуляції
===========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копіює файл або весь каталог. За замовчуванням перезаписує існуючі файли та каталоги. З параметром `$overwrite`, встановленим на `false`, викликає виняток `Nette\InvalidStateException`, якщо цільовий файл або каталог `$target` існує. При помилці викликає виняток `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Створює каталог, якщо він не існує, включно з батьківськими каталогами. При помилці викликає виняток `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Видаляє файл або весь каталог, якщо він існує. Якщо каталог не порожній, спочатку видаляє його вміст. При помилці викликає виняток `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Встановлює права доступу файлу на `$fileMode` або каталогу на `$dirMode`. Рекурсивно проходить і встановлює права доступу також для всього вмісту каталогу.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Відкриває файл і повертає ресурс. Параметр `$mode` працює так само, як і в нативній функції `fopen()`:https://www.php.net/manual/en/function.fopen.php. У разі помилки викликає виняток `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Повертає вміст файлу `$file`. При помилці викликає виняток `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Читає вміст файлу рядок за рядком. На відміну від нативної функції `file()`, не завантажує весь файл у пам'ять, а читає його поступово, тому можна читати файли, більші за доступну пам'ять. `$stripNewLines` вказує, чи слід видаляти символи кінця рядка `\r` та `\n`.
У разі помилки викликає виняток `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Перейменовує або переміщує файл чи каталог `$origin`. За замовчуванням перезаписує існуючі файли та каталоги. З параметром `$overwrite`, встановленим на `false`, викликає виняток `Nette\InvalidStateException`, якщо цільовий файл або каталог `$target` існує. При помилці викликає виняток `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записує рядок `$content` у файл `$file`. При помилці викликає виняток `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Шляхи
=====


isAbsolute(string $path): bool .[method]
----------------------------------------

Визначає, чи є шлях `$path` абсолютним.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Об'єднує всі сегменти шляху та нормалізує результат.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормалізує `..` та `.` і роздільники каталогів у шляху до системних.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Перетворює скісні риски на `/`, що використовуються в Unix-системах.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Перетворює скісні риски на символи, специфічні для поточної платформи, тобто `\` у Windows та `/` в інших системах.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Визначає кінцевий шлях зі шляху `$path` відносно базового каталогу `$basePath`. Абсолютні шляхи (`/foo`, `C:/foo`) залишає без змін (лише нормалізує скісні риски), відносні шляхи приєднує до базового шляху.

```php
// У Windows скісні риски у виводі були б зворотними (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Статичний vs нестатичний доступ
===============================

Щоб, наприклад, для цілей тестування ви могли легко замінити клас іншим (моком), використовуйте його нестатично:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
