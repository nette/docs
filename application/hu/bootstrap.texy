Bootstrap
*********

<div class=perex>

A Bootstrap egy ind√≠t√≥k√≥d, amely inicializ√°lja a k√∂rnyezetet, l√©trehozza a dependency injection (DI) kont√©nert √©s elind√≠tja az alkalmaz√°st. Megbesz√©lj√ºk:

- hogyan konfigur√°lhat√≥ NEON f√°jlok seg√≠ts√©g√©vel
- hogyan k√ºl√∂nb√∂ztethet≈ë meg az √©les √©s a fejleszt≈ëi m√≥d
- hogyan hozhat√≥ l√©tre a DI kont√©ner

</div>


Az alkalmaz√°sok, legyenek azok webesek vagy parancssorb√≥l futtatott szkriptek, m≈±k√∂d√©s√ºket valamilyen k√∂rnyezet inicializ√°l√°si form√°val kezdik. R√©gen ezt egy `include.inc.php` nev≈± f√°jl int√©zte, amelyet az els≈ëdleges f√°jl inklud√°lt.
A modern Nette alkalmaz√°sokban ezt a `Bootstrap` oszt√°ly v√°ltotta fel, amelyet az alkalmaz√°s r√©szek√©nt az `app/Bootstrap.php` f√°jlban tal√°lhat meg. P√©ld√°ul √≠gy n√©zhet ki:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// A Configurator felel≈ës az alkalmaz√°s k√∂rnyezet√©nek √©s szolg√°ltat√°sainak be√°ll√≠t√°s√°√©rt.
		$this->configurator = new Configurator;
		// Be√°ll√≠tja a Nette √°ltal gener√°lt ideiglenes f√°jlok (pl. ford√≠tott sablonok) k√∂nyvt√°r√°t
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// A Nette okos, √©s a fejleszt≈ëi m√≥d automatikusan bekapcsol√≥dik,
		// vagy enged√©lyezheti egy adott IP-c√≠mre a k√∂vetkez≈ë sor kommentj√©nek elt√°vol√≠t√°s√°val:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Aktiv√°lja a Tracy-t: a v√©gs≈ë "sv√°jci bicska" a debuggol√°shoz.
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: automatikusan bet√∂lti az √∂sszes oszt√°lyt a kiv√°lasztott k√∂nyvt√°rban
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Bet√∂lti a konfigur√°ci√≥s f√°jlokat
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php
=========

A webalkalmaz√°sok eset√©ben az els≈ëdleges f√°jl az `index.php`, amely a [nyilv√°nos k√∂nyvt√°rban |directory-structure#verejny-adresar-www] (`www/`) tal√°lhat√≥. Ez a Bootstrap oszt√°lyt√≥l k√©ri a k√∂rnyezet inicializ√°l√°s√°t √©s a DI kont√©ner l√©trehoz√°s√°t. Ezut√°n ebb≈ël szerzi be az `Application` szolg√°ltat√°st, amely elind√≠tja a webalkalmaz√°st:

```php
$bootstrap = new App\Bootstrap;
// K√∂rnyezet inicializ√°l√°sa + DI kont√©ner l√©trehoz√°sa
$container = $bootstrap->bootWebApplication();
// A DI kont√©ner l√©trehozza a Nette\Application\Application objektumot
$application = $container->getByType(Nette\Application\Application::class);
// A Nette alkalmaz√°s elind√≠t√°sa √©s a bej√∂v≈ë k√©r√©s feldolgoz√°sa
$application->run();
```

Mint l√°that√≥, a k√∂rnyezet be√°ll√≠t√°s√°ban √©s a dependency injection (DI) kont√©ner l√©trehoz√°s√°ban a [api:Nette\Bootstrap\Configurator] oszt√°ly seg√≠t, amelyet most r√©szletesebben bemutatunk.


Fejleszt≈ëi vs √©les m√≥d
======================

A Nette elt√©r≈ëen viselkedik att√≥l f√ºgg≈ëen, hogy fejleszt≈ëi vagy √©les szerveren fut:

üõ†Ô∏è  Fejleszt≈ëi m√≥d (Development):
	- Megjelen√≠ti a Tracy debugbart hasznos inform√°ci√≥kkal (SQL lek√©rdez√©sek, v√©grehajt√°si id≈ë, felhaszn√°lt mem√≥ria)
	- Hiba eset√©n r√©szletes hibaoldalt jelen√≠t meg a f√ºggv√©nyh√≠v√°sokkal √©s a v√°ltoz√≥k tartalm√°val
	- Automatikusan friss√≠ti a cache-t a Latte sablonok m√≥dos√≠t√°sakor, a konfigur√°ci√≥s f√°jlok szerkeszt√©sekor stb.


üöÄ  √âles m√≥d (Production):
	- Nem jelen√≠t meg semmilyen debuggol√°si inform√°ci√≥t, minden hib√°t a logba √≠r
	- Hiba eset√©n az ErrorPresentert vagy egy √°ltal√°nos "Server Error" oldalt jelen√≠t meg
	- A cache soha nem friss√ºl automatikusan!
	- Optimaliz√°lva a sebess√©gre √©s a biztons√°gra


A m√≥d kiv√°laszt√°sa automatikus felismer√©ssel t√∂rt√©nik, √≠gy √°ltal√°ban nincs sz√ºks√©g semmit konfigur√°lni vagy manu√°lisan √°tv√°ltani:

- fejleszt≈ëi m√≥d: localhoston (IP-c√≠m `127.0.0.1` vagy `::1`), ha nincs proxy (azaz annak HTTP fejl√©ce)
- √©les m√≥d: mindenhol m√°shol

Ha a fejleszt≈ëi m√≥dot m√°s esetekben is enged√©lyezni szeretn√©nk, p√©ld√°ul egy adott IP-c√≠mr≈ël hozz√°f√©r≈ë programoz√≥k sz√°m√°ra, haszn√°ljuk a `setDebugMode()` met√≥dust:

```php
$this->configurator->setDebugMode('23.75.345.200'); // IP-c√≠mek t√∂mbje is megadhat√≥
```

Hat√°rozottan javasoljuk az IP-c√≠m √©s a cookie kombin√°l√°s√°t. A `nette-debug` cookie-ba ments√ºnk el egy titkos tokent, pl. `secret1234`, √©s √≠gy aktiv√°ljuk a fejleszt≈ëi m√≥dot az adott IP-c√≠mr≈ël hozz√°f√©r≈ë √©s a cookie-ban eml√≠tett tokennel rendelkez≈ë programoz√≥k sz√°m√°ra:

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

A fejleszt≈ëi m√≥dot teljesen ki is kapcsolhatjuk, m√©g localhostra is:

```php
$this->configurator->setDebugMode(false);
```

Figyelem, a `true` √©rt√©k v√©glegesen bekapcsolja a fejleszt≈ëi m√≥dot, ami soha nem t√∂rt√©nhet meg √©les szerveren.


Tracy debuggol√≥ eszk√∂z
======================

A k√∂nny≈± debuggol√°s √©rdek√©ben kapcsoljuk be a nagyszer≈± [Tracy |tracy:] eszk√∂zt. Fejleszt≈ëi m√≥dban vizualiz√°lja a hib√°kat, √©les m√≥dban pedig a hib√°kat a megadott k√∂nyvt√°rba logolja:

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Ideiglenes f√°jlok
=================

A Nette cache-t haszn√°l a DI kont√©nerhez, a RobotLoaderhez, a sablonokhoz stb. Ez√©rt sz√ºks√©ges be√°ll√≠tani annak a k√∂nyvt√°rnak az el√©r√©si √∫tj√°t, ahov√° a cache ment√©sre ker√ºl:

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

Linuxon vagy macOS-en √°ll√≠tsa be a `log/` √©s `temp/` k√∂nyvt√°raknak az [√≠r√°si jogokat |nette:troubleshooting#Nastaven√≠ pr√°v adres√°≈ô≈Ø].


RobotLoader
===========

√Åltal√°ban szeretn√©nk automatikusan bet√∂lteni az oszt√°lyokat a [RobotLoader |robot-loader:] seg√≠ts√©g√©vel, ez√©rt el kell ind√≠tanunk, √©s hagynunk kell, hogy bet√∂ltse az oszt√°lyokat abb√≥l a k√∂nyvt√°rb√≥l, ahol a `Bootstrap.php` tal√°lhat√≥ (azaz `__DIR__`), √©s az √∂sszes alk√∂nyvt√°r√°b√≥l:

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Alternat√≠v megk√∂zel√≠t√©s az oszt√°lyok bet√∂lt√©s√©nek kiz√°r√≥lag a [Composer |best-practices:composer] seg√≠ts√©g√©vel t√∂rt√©n≈ë enged√©lyez√©se a PSR-4 betart√°sa mellett.


Id≈ëz√≥na
=======

A konfigur√°toron kereszt√ºl be√°ll√≠thatja az alap√©rtelmezett id≈ëz√≥n√°t.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


DI kont√©ner konfigur√°l√°sa
=========================

Az ind√≠t√°si folyamat r√©sze a DI kont√©ner, vagyis az objektumgy√°r l√©trehoz√°sa, amely az eg√©sz alkalmaz√°s sz√≠ve. Ez val√≥j√°ban egy PHP oszt√°ly, amelyet a Nette gener√°l √©s a cache k√∂nyvt√°rba ment. A gy√°r gy√°rtja az alkalmaz√°s kulcsfontoss√°g√∫ objektumait, √©s a konfigur√°ci√≥s f√°jlok seg√≠ts√©g√©vel utas√≠tjuk, hogyan hozza l√©tre √©s √°ll√≠tsa be ≈ëket, ezzel befoly√°solva az eg√©sz alkalmaz√°s viselked√©s√©t.

A konfigur√°ci√≥s f√°jlokat √°ltal√°ban [NEON |neon:format] form√°tumban √≠rj√°k. Egy k√ºl√∂n fejezetben olvashat arr√≥l, [mit lehet konfigur√°lni |nette:configuring].

.[tip]
Fejleszt≈ëi m√≥dban a kont√©ner automatikusan friss√ºl minden k√≥d- vagy konfigur√°ci√≥s f√°jl m√≥dos√≠t√°sakor. √âles m√≥dban csak egyszer gener√°l√≥dik, √©s a v√°ltoz√°sok a maxim√°lis teljes√≠tm√©ny √©rdek√©ben nem ker√ºlnek ellen≈ërz√©sre.

A konfigur√°ci√≥s f√°jlokat a `addConfig()` seg√≠ts√©g√©vel t√∂ltj√ºk be:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

Ha t√∂bb konfigur√°ci√≥s f√°jlt szeretn√©nk hozz√°adni, t√∂bbsz√∂r is megh√≠vhatjuk az `addConfig()` f√ºggv√©nyt.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

A `cli.php` n√©v nem el√≠r√°s, a konfigur√°ci√≥ PHP f√°jlban is megadhat√≥, amely t√∂mbk√©nt adja vissza.

Tov√°bbi konfigur√°ci√≥s f√°jlokat is hozz√°adhatunk az [`includes` |dependency-injection:configuration#Vkl√°d√°n√≠ soubor≈Ø] szekci√≥ban.

Ha a konfigur√°ci√≥s f√°jlokban azonos kulcsokkal rendelkez≈ë elemek jelennek meg, azok fel√ºl√≠r√≥dnak, vagy [t√∂mb√∂k eset√©n egyes√ºlnek |dependency-injection:configuration#Sluƒçov√°n√≠]. A k√©s≈ëbb beillesztett f√°jlnak magasabb priorit√°sa van, mint az el≈ëz≈ënek. Annak a f√°jlnak, amelyben az `includes` szekci√≥ szerepel, magasabb priorit√°sa van, mint a benne inklud√°lt f√°jloknak.


Statikus param√©terek
--------------------

A konfigur√°ci√≥s f√°jlokban haszn√°lt param√©tereket defini√°lhatjuk a [`parameters`|dependency-injection:configuration#parametry] szekci√≥ban, √©s √°tadhatjuk (vagy fel√ºl√≠rhatjuk) az `addStaticParameters()` met√≥dussal (van `addParameters()` aliasa is). Fontos, hogy a param√©terek k√ºl√∂nb√∂z≈ë √©rt√©kei tov√°bbi DI kont√©nerek, azaz tov√°bbi oszt√°lyok gener√°l√°s√°t eredm√©nyezik.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

A `projectId` param√©terre a konfigur√°ci√≥ban a szok√°sos `%projectId%` jel√∂l√©ssel lehet hivatkozni.


Dinamikus param√©terek
---------------------

A kont√©nerhez dinamikus param√©tereket is hozz√°adhatunk, amelyek k√ºl√∂nb√∂z≈ë √©rt√©kei, a statikus param√©terekkel ellent√©tben, nem okozz√°k √∫j DI kont√©nerek gener√°l√°s√°t.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

√çgy egyszer≈±en hozz√°adhatunk pl. k√∂rnyezeti v√°ltoz√≥kat, amelyekre azt√°n a konfigur√°ci√≥ban a `%env.variable%` jel√∂l√©ssel lehet hivatkozni.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Alap√©rtelmezett param√©terek
---------------------------

A konfigur√°ci√≥s f√°jlokban haszn√°lhatja ezeket a statikus param√©tereket:

- `%appDir%` az abszol√∫t el√©r√©si √∫t a `Bootstrap.php` f√°jlt tartalmaz√≥ k√∂nyvt√°rhoz
- `%wwwDir%` az abszol√∫t el√©r√©si √∫t a `index.php` bemeneti f√°jlt tartalmaz√≥ k√∂nyvt√°rhoz
- `%tempDir%` az abszol√∫t el√©r√©si √∫t az ideiglenes f√°jlok k√∂nyvt√°r√°hoz
- `%vendorDir%` az abszol√∫t el√©r√©si √∫t ahhoz a k√∂nyvt√°rhoz, ahov√° a Composer telep√≠ti a k√∂nyvt√°rakat
- `%rootDir%` az abszol√∫t el√©r√©si √∫t a projekt gy√∂k√©rk√∂nyvt√°r√°hoz
- `%debugMode%` jelzi, hogy az alkalmaz√°s debug m√≥dban van-e
- `%consoleMode%` jelzi, hogy a k√©r√©s parancssorb√≥l √©rkezett-e


Import√°lt szolg√°ltat√°sok
------------------------

Most m√©lyebbre megy√ºnk. B√°r a DI kont√©ner c√©lja az objektumok gy√°rt√°sa, kiv√©telesen sz√ºks√©g lehet egy megl√©v≈ë objektum beilleszt√©s√©re a kont√©nerbe. Ezt √∫gy tehetj√ºk meg, hogy a szolg√°ltat√°st `imported: true` jelz≈ëvel defini√°ljuk.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

√âs a bootstrapban beillesztj√ºk az objektumot a kont√©nerbe:

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Elt√©r≈ë k√∂rnyezet
================

Ne f√©ljen m√≥dos√≠tani a Bootstrap oszt√°lyt saj√°t ig√©nyei szerint. A `bootWebApplication()` met√≥dushoz hozz√°adhat param√©tereket a webprojektek megk√ºl√∂nb√∂ztet√©s√©re. Vagy kieg√©sz√≠thetj√ºk tov√°bbi met√≥dusokkal, p√©ld√°ul `bootTestEnvironment()`, amely inicializ√°lja a k√∂rnyezetet az egys√©gtesztekhez, `bootConsoleApplication()` a parancssorb√≥l h√≠vott szkriptekhez stb.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // Nette Tester inicializ√°l√°sa
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
