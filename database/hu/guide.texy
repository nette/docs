Nette Database
**************

.[perex]
A Nette Database egy erőteljes és elegáns adatbázis réteg PHP számára, hangsúlyt fektetve az egyszerűségre és az okos funkciókra. Kétféle módot kínál az adatbázissal való munkára - [Explorer |Explorer] az alkalmazások gyors fejlesztéséhez, vagy [SQL megközelítés |SQL way] a lekérdezésekkel való közvetlen munkához.

<div class="grid gap-3">
<div>


[SQL megközelítés |SQL way]
===========================
- Biztonságos paraméterezett lekérdezések
- Pontos ellenőrzés az SQL lekérdezések formája felett
- Amikor komplex lekérdezéseket ír haladó funkciókkal
- Optimalizálja a teljesítményt specifikus SQL funkciók segítségével

</div>

<div>


[Explorer |Explorer]
====================
- Gyorsan fejleszthet SQL írása nélkül
- Intuitív munka a táblák közötti kapcsolatokkal
- Értékelni fogja a lekérdezések automatikus optimalizálását
- Alkalmas gyors és kényelmes adatbázis-kezelésre

</div>

</div>


Telepítés
=========

A könyvtárat a [Composer|best-practices:composer] eszközzel töltheti le és telepítheti:

```shell
composer require nette/database
```


Támogatott adatbázisok
======================

A Nette Database a következő adatbázisokat támogatja:

|* Adatbázis szerver |* DSN név    |* Támogatás az Explorerben
|---------------------|-------------|-----------------------
| MySQL (>= 5.1)      | mysql       | IGEN
| PostgreSQL (>= 9.0) | pgsql       | IGEN
| Sqlite 3 (>= 3.8)   | sqlite      | IGEN
| Oracle              | oci         | -
| MS SQL (PDO_SQLSRV) | sqlsrv      | IGEN
| MS SQL (PDO_DBLIB)  | mssql       | -
| ODBC                | odbc        | -


Két megközelítés az adatbázishoz
================================

A Nette Database választási lehetőséget kínál: vagy közvetlenül írhat SQL lekérdezéseket (SQL megközelítés), vagy hagyhatja, hogy automatikusan generálódjanak (Explorer). Nézzük meg, hogyan oldják meg mindkét megközelítéssel ugyanazokat a feladatokat:

[SQL megközelítés|sql way] - SQL lekérdezések

```php
// rekord beszúrása
$database->query('INSERT INTO books', [
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// rekordok lekérése: könyvek szerzői
$result = $database->query('
	SELECT authors.*, COUNT(books.id) AS books_count
	FROM authors
	LEFT JOIN books ON authors.id = books.author_id
	WHERE authors.active = 1
	GROUP BY authors.id
');

// listázás (nem optimális, N további lekérdezést generál)
foreach ($result as $author) {
	$books = $database->query('
		SELECT * FROM books
		WHERE author_id = ?
		ORDER BY published_at DESC
	', $author->id);

	echo "Szerző $author->name írt $author->books_count könyvet:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

[Explorer megközelítés|explorer] - automatikus SQL generálás

```php
// rekord beszúrása
$database->table('books')->insert([
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// rekordok lekérése: könyvek szerzői
$authors = $database->table('authors')
	->where('active', 1);

// listázás (automatikusan csak 2 optimalizált lekérdezést generál)
foreach ($authors as $author) {
	$books = $author->related('books')
		->order('published_at DESC');

	echo "Szerző $author->name írt {$books->count()} könyvet:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

Az Explorer megközelítés automatikusan generálja és optimalizálja az SQL lekérdezéseket. A megadott példában az SQL megközelítés N+1 lekérdezést generál (egyet a szerzőkhöz, majd egyet minden szerző könyveihez), míg az Explorer automatikusan optimalizálja a lekérdezéseket, és csak kettőt hajt végre - egyet a szerzőkhöz és egyet az összes könyvükhöz.

Mindkét megközelítés tetszés szerint kombinálható az alkalmazásban, igény szerint.


Csatlakozás és konfiguráció
===========================

Az adatbázishoz való csatlakozáshoz elegendő létrehozni egy [api:Nette\Database\Connection] osztálypéldányt:

```php
$database = new Nette\Database\Connection($dsn, $user, $password);
```

A `$dsn` (data source name) paraméter ugyanaz, [amit a PDO használ |https://www.php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters], pl. `host=127.0.0.1;dbname=test`. Hiba esetén `Nette\Database\ConnectionException` kivételt dob.

Azonban egy ügyesebb módszert kínál az [alkalmazáskonfiguráció |configuration], ahová elegendő hozzáadni egy `database` szekciót, és létrejönnek a szükséges objektumok, valamint az adatbázis panel a [Tracy |tracy:] sávban.

```neon
database:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: password
```

Ezután a kapcsolat objektumot [szolgáltatásként kapjuk meg a DI konténerből |dependency-injection:passing-dependencies], pl.:

```php
class Model
{
	public function __construct(
		// vagy Nette\Database\Explorer
		private Nette\Database\Connection $database,
	) {
	}
}
```

További információk az [adatbázis konfigurációjáról|configuration].


Explorer manuális létrehozása
-----------------------------

Ha nem használja a Nette DI konténert, manuálisan is létrehozhat egy `Nette\Database\Explorer` példányt:

```php
// csatlakozás az adatbázishoz
$connection = new Nette\Database\Connection('mysql:host=127.0.0.1;dbname=mydatabase', 'user', 'password');
// tároló a cache-hez, implementálja a Nette\Caching\Storage-ot, pl.:
$storage = new Nette\Caching\Storages\FileStorage('/path/to/temp/dir');
// gondoskodik az adatbázis struktúra reflexiójáról
$structure = new Nette\Database\Structure($connection, $storage);
// definiálja a táblanevek, oszlopnevek és idegen kulcsok leképezési szabályait
$conventions = new Nette\Database\Conventions\DiscoveredConventions($structure);
$explorer = new Nette\Database\Explorer($connection, $structure, $conventions, $storage);
```


Kapcsolatkezelés
================

A `Connection` objektum létrehozásakor a csatlakozás automatikusan megtörténik. Ha késleltetni szeretné a csatlakozást, használja a lazy módot - ezt a [konfigurációban|configuration] a `lazy` beállításával, vagy így kapcsolhatja be:

```php
$database = new Nette\Database\Connection($dsn, $user, $password, ['lazy' => true]);
```

A kapcsolat kezeléséhez használja a `connect()`, `disconnect()` és `reconnect()` metódusokat.
- `connect()` létrehozza a kapcsolatot, ha még nem létezik, és `Nette\Database\ConnectionException` kivételt dobhat.
- `disconnect()` megszakítja az aktuális adatbázis-kapcsolatot.
- `reconnect()` megszakítja, majd újra csatlakoztatja az adatbázishoz. Ez a metódus szintén `Nette\Database\ConnectionException` kivételt dobhat.

Ezenkívül figyelheti a csatlakozással kapcsolatos eseményeket az `onConnect` esemény segítségével, amely egy callback tömb, amely az adatbázissal való kapcsolat létrejötte után hívódik meg.

```php
// az adatbázishoz való csatlakozás után fut le
$database->onConnect[] = function($database) {
	echo "Csatlakozva az adatbázishoz";
};
```


Tracy Debug Bar
===============

Ha [Tracy-t |tracy:] használ, a Database panel automatikusan aktiválódik a Debug sávban, amely megjeleníti az összes végrehajtott lekérdezést, azok paramétereit, végrehajtási idejét és a kódban való meghívásuk helyét.

[* db-panel.webp *]
