Praca z adresami URL
********************

.[perex]
Klasy [#Url], [#UrlImmutable] i [#UrlScript] umożliwiają łatwe generowanie, parsowanie i manipulowanie adresami URL.

→ [Instalacja i wymagania |@home#Instalacja]


Url
===

Klasa [api:Nette\Http\Url] umożliwia łatwą pracę z adresami URL i ich poszczególnymi komponentami, które przedstawia ten schemat:

/--pre
 scheme  user  password  host   port    path        query  fragment
   |      |      |        |      |       |            |       |
 /--\   /--\ /------\ /-------\ /--\/----------\ /--------\ /----\
 <b>http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer</b>
 \______\__________________________/
     |               |
  hostUrl        authority
\--

Generowanie URL jest intuicyjne:

```php
use Nette\Http\Url;

$url = new Url;
$url->setScheme('https')
	->setHost('localhost')
	->setPath('/edit')
	->setQueryParameter('foo', 'bar');

echo $url; // 'https://localhost/edit?foo=bar'
```

Można również sparsować URL i dalej nim manipulować:

```php
$url = new Url(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);
```

Klasa `Url` implementuje interfejs `JsonSerializable` i ma metodę `__toString()`, więc obiekt można wypisać lub użyć w danych przekazywanych do `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


Komponenty URL .[method]
------------------------

Do zwracania lub zmiany poszczególnych komponentów URL dostępne są następujące metody:

.[language-php]
| Setter									| Getter						| Zwracana wartość
|--------------------------------------------------------------------------------------------
| `setScheme(string $scheme)`				| `getScheme(): string`			| `'http'`
| `setUser(string $user)`					| `getUser(): string`			| `'john'`
| `setPassword(string $password)`			| `getPassword(): string`		| `'xyz*12'`
| `setHost(string $host)`					| `getHost(): string`			| `'nette.org'`
| `setPort(int $port)`						| `getPort(): ?int`				| `8080`
|											| `getDefaultPort(): ?int`		| `80`
| `setPath(string $path)`					| `getPath(): string`			| `'/en/download'`
| `setQuery(string\|array $query)`			| `getQuery(): string`			| `'name=param'`
| `setFragment(string $fragment)`			| `getFragment(): string`		| `'footer'`
| 											| `getAuthority(): string`		| `'nette.org:8080'`
| 											| `getHostUrl(): string`		| `'http://nette.org:8080'`
| 											| `getAbsoluteUrl(): string` 	| cały URL

Uwaga: Pracując z adresem URL uzyskanym z [żądania HTTP|request], pamiętaj, że nie będzie on zawierał fragmentu, ponieważ przeglądarka go nie wysyła na serwer.

Możemy również pracować z poszczególnymi parametrami zapytania za pomocą:

.[language-php]
| Setter									| Getter
|---------------------------------------------------
| `setQuery(string\|array $query)`  		| `getQueryParameters(): array`
| `setQueryParameter(string $name, $val)`	| `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Zwraca prawą lub lewą część hosta. Działa w ten sposób, jeśli host to `www.nette.org`:

.[language-php]
| `getDomain(1)`  |  `'org'`
| `getDomain(2)`  |  `'nette.org'`
| `getDomain(3)`  |  `'www.nette.org'`
| `getDomain(0)`  |  `'www.nette.org'`
| `getDomain(-1)` |  `'www.nette'`
| `getDomain(-2)` |  `'www'`
| `getDomain(-3)` |  `''`


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Sprawdza, czy dwa adresy URL są identyczne.

```php
$url->isEqual('https://nette.org');
```


Url::isAbsolute(string $url): bool .[method]{data-version:3.3.2}
----------------------------------------------------------------
Sprawdza, czy adres URL jest absolutny. Adres URL jest uważany za absolutny, jeśli zaczyna się od schematu (np. http, https, ftp) poprzedzonego dwukropkiem.

```php
Url::isAbsolute('https://nette.org');    // true
Url::isAbsolute('//nette.org');          // false
```


Url::removeDotSegments(string $path): string .[method]{data-version:3.3.2}
--------------------------------------------------------------------------
Normalizuje ścieżkę w adresie URL, usuwając specjalne segmenty `.` i `..`. Metoda usuwa zbędne elementy ścieżki w taki sam sposób, jak robią to przeglądarki internetowe.

```php
Url::removeDotSegments('/path/../subtree/./file.txt');  // '/subtree/file.txt'
Url::removeDotSegments('/../foo/./bar');                // '/foo/bar'
Url::removeDotSegments('./today/../file.txt');          // 'file.txt'
```


UrlImmutable
============

Klasa [api:Nette\Http\UrlImmutable] jest immutable (niezmienną) alternatywą klasy [#Url] (podobnie jak w PHP `DateTimeImmutable` jest niezmienną alternatywą `DateTime`). Zamiast setterów ma tzw. withery, które nie zmieniają obiektu, ale zwracają nowe instancje ze zmodyfikowaną wartością:

```php
use Nette\Http\UrlImmutable;

$url = new UrlImmutable(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);

$newUrl = $url
	->withUser('')
	->withPassword('')
	->withPath('/cs/');

echo $newUrl; // 'http://nette.org:8080/cs/?name=param#footer'
```

Klasa `UrlImmutable` implementuje interfejs `JsonSerializable` i ma metodę `__toString()`, więc obiekt można wypisać lub użyć w danych przekazywanych do `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


Komponenty URL .[method]
------------------------

Do zwracania lub zmiany poszczególnych komponentów URL służą metody:

.[language-php]
| Wither									| Getter						| Zwracana wartość
|--------------------------------------------------------------------------------------------
| `withScheme(string $scheme)`				| `getScheme(): string`			| `'http'`
| `withUser(string $user)`					| `getUser(): string`			| `'john'`
| `withPassword(string $password)`			| `getPassword(): string`		| `'xyz*12'`
| `withHost(string $host)`					| `getHost(): string`			| `'nette.org'`
| `withPort(int $port)`						| `getPort(): ?int`				| `8080`
|											| `getDefaultPort(): ?int`		| `80`
| `withPath(string $path)`					| `getPath(): string`			| `'/en/download'`
| `withQuery(string\|array $query)`			| `getQuery(): string`			| `'name=param'`
| `withFragment(string $fragment)`			| `getFragment(): string`		| `'footer'`
| 											| `getAuthority(): string`		| `'nette.org:8080'`
| 											| `getHostUrl(): string`		| `'http://nette.org:8080'`
| 											| `getAbsoluteUrl(): string` 	| cały URL

Metoda `withoutUserInfo()` usuwa `user` i `password`.

Możemy również pracować z poszczególnymi parametrami zapytania za pomocą:

.[language-php]
| Wither								| Getter
|-----------------------------------------------
| `withQuery(string\|array $query)` 	    | `getQueryParameters(): array`
| `withQueryParameter(string $name, $val)`  | `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Zwraca prawą lub lewą część hosta. Działa w ten sposób, jeśli host to `www.nette.org`:

.[language-php]
| `getDomain(1)`  |  `'org'`
| `getDomain(2)`  |  `'nette.org'`
| `getDomain(3)`  |  `'www.nette.org'`
| `getDomain(0)`  |  `'www.nette.org'`
| `getDomain(-1)` |  `'www.nette'`
| `getDomain(-2)` |  `'www'`
| `getDomain(-3)` |  `''`


resolve(string $reference): UrlImmutable .[method]{data-version:3.3.2}
----------------------------------------------------------------------
Wyprowadza absolutny adres URL w taki sam sposób, w jaki przeglądarka przetwarza linki na stronie HTML:
- jeśli link jest absolutnym adresem URL (zawiera schemat), jest używany bez zmian
- jeśli link zaczyna się od `//`, pobierany jest tylko schemat z bieżącego adresu URL
- jeśli link zaczyna się od `/`, tworzona jest ścieżka absolutna od korzenia domeny
- w pozostałych przypadkach adres URL jest budowany względnie do bieżącej ścieżki

```php
$url = new UrlImmutable('https://example.com/path/page');
echo $url->resolve('../foo');           // 'https://example.com/foo'
echo $url->resolve('/bar');             // 'https://example.com/bar'
echo $url->resolve('sub/page.html');    // 'https://example.com/path/sub/page.html'
```


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Sprawdza, czy dwa adresy URL są identyczne.

```php
$url->isEqual('https://nette.org');
```


UrlScript
=========

Klasa [api:Nette\Http\UrlScript] jest potomkiem [#UrlImmutable] i rozszerza go o dodatkowe wirtualne komponenty URL, takie jak katalog główny projektu itp. Podobnie jak klasa macierzysta, jest obiektem immutable (niezmiennym).

Poniższy diagram przedstawia komponenty, które UrlScript rozpoznaje:

/--pre
      baseUrl    basePath  relativePath  relativeUrl
         |          |        |               |
 /---------------/-----\/--------\---------------------------\
 <b>http://nette.org/admin/script.php/pathinfo/?name=param#footer</b>
                 \_______________/\________/
                        |              |
                   scriptPath       pathInfo
\--

- `baseUrl` to podstawowy adres URL aplikacji, w tym domena i część ścieżki do katalogu głównego aplikacji
- `basePath` to część ścieżki do katalogu głównego aplikacji
- `scriptPath` to ścieżka do bieżącego skryptu
- `relativePath` to nazwa skryptu (ewentualnie dodatkowe segmenty ścieżki) względna do `basePath`
- `relativeUrl` to cała część adresu URL za `baseUrl`, w tym query string i fragment.
- `pathInfo` to dziś rzadko używana część adresu URL za nazwą skryptu

Do zwracania części URL dostępne są metody:

.[language-php]
| Getter						| Zwracana wartość
|------------------------------------------------
| `getScriptPath(): string`		| `'/admin/script.php'`
| `getBasePath(): string`		| `'/admin/'`
| `getBaseUrl(): string`		| `'http://nette.org/admin/'`
| `getRelativePath(): string`	| `'script.php'`
| `getRelativeUrl(): string`	| `'script.php/pathinfo/?name=param#footer'`
| `getPathInfo(): string`		| `'/pathinfo/'`

Obiekty `UrlScript` zwykle nie tworzymy bezpośrednio, ale zwraca je metoda [Nette\Http\Request::getUrl()|request] z już poprawnie ustawionymi komponentami dla bieżącego żądania HTTP.
