Zajęcia pomocnicze
******************


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` jest klasą rozszerzającą `SimpleXMLElement` o metody ułatwiające testowanie zawartości HTML lub XML.

```php
# mějme v $html HTML dokument, který načteme
$dom = Tester\DomQuery::fromHtml($html);

# můžeme testovat přítomnost elementů podle CSS selektorů
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[type="submit"]'));

# nebo vybrat elementy jako pole DomQuery
$elems = $dom->find('input[data-autocomplete]');
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` emuluje pliki w pamięci, ułatwiając testowanie kodu, który używa funkcji `fopen()`, `file_get_contents()`, `parse_ini_file()` i podobnych. Przykład zastosowania:

```php
# Testovaná třída
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Nový prázdný soubor
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Testujeme vytvořený obsah
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
To nie jest asercja, ale pomocnik do testowania prywatnych metod i obiektów własności.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // zpřístupněná privátní $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Metoda `purge()` tworzy podany katalog i usuwa całą jego zawartość, jeśli już istnieje. Przydaje się do tworzenia katalogu tymczasowego. Na przykład w `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - adresář již může existovat

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Testy są przeprowadzane równolegle. Czasami jednak potrzebujemy, aby testy nie nakładały się na siebie. Zazwyczaj w przypadku testów baz danych konieczne jest, aby jeden test przygotował zawartość bazy danych, a inny test nie dotykał bazy danych podczas jej działania. W tych testach używamy `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Pierwszy parametr to nazwa zamka, drugi to ścieżka do katalogu, w którym ma być przechowywany zamek. Test, który dostanie blokadę jako pierwszy, przejdzie, pozostałe testy muszą czekać na zakończenie blokady.


Environment::bypassFinals() .[filter]
-------------------------------------
Klasy lub metody oznaczone jako `final` są trudne do przetestowania. Wywołanie `Tester\Environment::bypassFinals()` na początku testu powoduje, że podczas ładowania kodu odpadają słowa kluczowe `final`.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass už není final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- poprawia czytelność listy błędów (w tym kolorowanie), w przeciwnym razie wyświetlany jest domyślny ślad stosu PHP
- włącza sprawdzanie czy asercje zostały wywołane w teście, w przeciwnym razie test bez asercji (np. zapomniany) również przejdzie
- podczas korzystania z `--coverage`, automatycznie rozpoczyna zbieranie informacji o uruchomionym kodzie (opisane poniżej)
- drukuj status OK lub FAILURE na końcu skryptu


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Tworzy globalne funkcje `test()`, `setUp()`, i `tearDown()`, na które można podzielić swoje testy.

```php
test('popis testu', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Umożliwia sprawdzenie, czy test został uruchomiony bezpośrednio czy za pomocą Testera.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# spuštěno Testerem
} else {
	# spuštěno jinak
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester uruchamia testy równolegle w określonej liczbie wątków. Jeśli interesuje nas numer wątku, możemy go uzyskać ze zmiennej środowiskowej:

```php
echo "Běžím ve vlákně číslo " . getenv(Tester\Environment::VariableThread);
```
