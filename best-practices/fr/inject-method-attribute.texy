Méthodes et attributs d'injection
*********************************

.[perex]
À l'aide d'exemples spécifiques, nous examinerons les possibilités de transmettre des dépendances aux présentateurs et expliquerons les méthodes et attributs/annotations de `inject`.


`inject*()` Méthodes .[#toc-inject-methods]
===========================================

Dans le présentateur, comme dans tout autre code, la manière préférée de passer les dépendances est d'utiliser le [constructeur |dependency-injection:passing-dependencies#Constructor Injection]. Toutefois, si le présentateur hérite d'un ancêtre commun (par exemple, `BasePresenter`), il est préférable d'utiliser les méthodes de `inject*()` dans cet ancêtre. C'est un cas particulier de setter, où la méthode commence par un préfixe `inject`. Cela s'explique par le fait que nous gardons le constructeur libre pour les descendants :

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

La différence fondamentale avec un setter est que Nette DI appelle automatiquement les méthodes nommées de cette façon dans les présentateurs dès que l'instance est créée, en leur passant toutes les dépendances requises. Un présentateur peut contenir plusieurs méthodes `inject*()` et chaque méthode peut avoir un nombre quelconque de paramètres.

Si nous transmettions les dépendances aux ancêtres par le biais de leurs constructeurs, nous devrions obtenir leurs dépendances dans tous les descendants et les transmettre à `parent::__construct()`, ce qui complique le code :

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // c'est une complication
		$this->bar = $bar;
	}
}
```

Les méthodes `inject*()` sont également utiles dans les cas où le diffuseur est [composé de traits |presenter-traits] et que chacun d'entre eux nécessite sa propre dépendance.

Il est également possible d'utiliser l'annotation `@inject`, mais il est important de garder à l'esprit que l'encapsulation est rompue.


`Inject` Annotations .[#toc-inject-annotations]
===============================================

Il s'agit d'un passage automatique de la dépendance à la variable membre publique du présentateur, qui est annotée avec `@inject` dans le commentaire de la documentation. Le type peut également être spécifié dans le commentaire de la documentation si vous utilisez un PHP inférieur à 7.4.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

Depuis PHP 8.0, une propriété peut être marquée avec un attribut `Inject`:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Là encore, Nette DI passera automatiquement les dépendances aux propriétés annotées de cette manière dans le présentateur dès que l'instance sera créée.

Cette méthode présente les mêmes inconvénients que le passage des dépendances à une propriété publique. Elle est utilisée dans le presenter car elle ne complique pas le code et ne nécessite qu'un minimum de saisie.


{{sitename: Meilleures pratiques}}
