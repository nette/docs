Struttura delle directory dell'applicazione
*******************************************

<div class=perex>

Come progettare una struttura di directory chiara e scalabile per i progetti in Nette Framework? Vi mostreremo pratiche collaudate che vi aiuteranno a organizzare il vostro codice. Imparerete:

- come **strutturare logicamente** l'applicazione in directory
- come progettare la struttura per **scalare bene** con la crescita del progetto
- quali sono le **possibili alternative** e i loro vantaggi o svantaggi

</div>


È importante ricordare che Nette Framework non insiste su alcuna struttura specifica. È stato progettato per essere facilmente adattabile a qualsiasi esigenza e preferenza.


Struttura di base del progetto .[#toc-basic-project-structure]
==============================================================

Sebbene Nette Framework non imponga una struttura di directory fissa, esiste una disposizione predefinita e collaudata sotto forma di [Web Project |https://github.com/nette/web-project]:

/--pre
<b>web-project/</b>
├── <b>app/</b>              ← directory dell'applicazione
├── <b>assets/</b>           ← file SCSS, JS, immagini..., in alternativa resources/
├── <b>bin/</b>              ← script della riga di comando
├── <b>config/</b>           ← configurazione
├── <b>log/</b>              ← errori registrati
├── <b>temp/</b>             ← file temporanei, cache
├── <b>tests/</b>            ← test
├── <b>vendor/</b>           ← librerie installate da Composer
└── <b>www/</b>              ← directory pubblica (document-root)
\--

È possibile modificare liberamente questa struttura in base alle proprie esigenze, rinominando o spostando le cartelle. È sufficiente modificare i percorsi relativi alle cartelle in `Bootstrap.php` ed eventualmente in `composer.json`. Non serve nient'altro, nessuna riconfigurazione complessa, nessuna modifica costante. Nette ha un rilevamento automatico intelligente e riconosce automaticamente la posizione dell'applicazione, compresa la sua base URL.


Principi di organizzazione del codice .[#toc-code-organization-principles]
==========================================================================

Quando si esplora per la prima volta un nuovo progetto, si dovrebbe essere in grado di orientarsi rapidamente. Immaginate di fare clic sulla cartella `app/Model/` e di vedere questa struttura:

/--pre
<b>app/Model/</b>
├── <b>Services/</b>
├── <b>Repositories/</b>
└── <b>Entities/</b>
\--

Da qui si apprende solo che il progetto utilizza alcuni servizi, repository ed entità. Non si apprende nulla sullo scopo effettivo dell'applicazione.

Vediamo un approccio diverso: **organizzazione per domini**:

/--pre
<b>app/Model/</b>
├── <b>Cart/</b>
├── <b>Payment/</b>
├── <b>Order/</b>
└── <b>Product/</b>
\--

Questo è diverso: a prima vista è chiaro che si tratta di un sito di e-commerce. I nomi stessi delle directory rivelano ciò che l'applicazione può fare: lavora con pagamenti, ordini e prodotti.

Il primo approccio (organizzazione per tipo di classe) comporta diversi problemi nella pratica: il codice che è logicamente correlato è sparso in diverse cartelle e bisogna saltare da una all'altra. Pertanto, organizzeremo per domini.


Spazi dei nomi .[#toc-namespaces]
---------------------------------

È convenzionale che la struttura delle directory corrisponda agli spazi dei nomi nell'applicazione. Ciò significa che la posizione fisica dei file corrisponde al loro spazio dei nomi. Per esempio, una classe situata in `app/Model/Product/ProductRepository.php` dovrebbe avere lo spazio dei nomi `App\Model\Product`. Questo principio aiuta a orientare il codice e semplifica il caricamento automatico.


Singolare e plurale nei nomi .[#toc-singular-vs-plural-in-names]
----------------------------------------------------------------

Si noti che usiamo il singolare per le directory delle applicazioni principali: `app`, `config`, `log`, `temp`, `www`. Lo stesso vale all'interno dell'applicazione: `Model`, `Core`, `Presentation`. Questo perché ognuno di essi rappresenta un concetto unificato.

Allo stesso modo, `app/Model/Product` rappresenta tutto ciò che riguarda i prodotti. Non lo chiamiamo `Products` perché non è una cartella piena di prodotti (che conterrebbe file come `iphone.php`, `samsung.php`). È uno spazio dei nomi che contiene classi per lavorare con i prodotti - `ProductRepository.php`, `ProductService.php`.

La cartella `app/Tasks` è al plurale perché contiene un insieme di script eseguibili autonomi - `CleanupTask.php`, `ImportTask.php`. Ognuno di essi è un'unità indipendente.

Per coerenza, si consiglia di usare:
- Singolare per gli spazi dei nomi che rappresentano un'unità funzionale (anche se si lavora con più entità).
- Plurale per le collezioni di unità indipendenti
- In caso di incertezza o se non si vuole pensarci, scegliere singolare


Elenco pubblico `www/` .[#toc-public-directory-www]
===================================================

Questa directory è l'unica accessibile dal web (la cosiddetta document-root). Spesso si può trovare il nome `public/` invece di `www/`: è solo una questione di convenzione e non influisce sulla funzionalità. La directory contiene:
- [Punto di ingresso |bootstrap#index.php] dell'applicazione `index.php`
- File `.htaccess` con regole di mod_rewrite (per Apache)
- File statici (CSS, JavaScript, immagini)
- File caricati

Per una corretta sicurezza dell'applicazione, è fondamentale avere una [document-root configurata |nette:troubleshooting#how-to-change-or-remove-www-directory-from-url] correttamente.

.[note]
Non collocare mai la cartella `node_modules/` in questa directory: contiene migliaia di file che possono essere eseguibili e non dovrebbero essere accessibili al pubblico.


Directory delle applicazioni `app/` .[#toc-application-directory-app]
=====================================================================

Questa è la directory principale con il codice dell'applicazione. Struttura di base:

/--pre
<b>app/</b>
├── <b>Core/</b>               ← L'infrastruttura è importante
├── <b>Model/</b>              ← logica aziendale
├── <b>Presentation/</b>       ← presentatori e modelli
├── <b>Tasks/</b>              ← script di comando
└── <b>Bootstrap.php</b>       ← classe bootstrap dell'applicazione
\--

`Bootstrap.php` è la [classe di avvio dell'applicazione |bootstrap] che inizializza l'ambiente, carica la configurazione e crea il contenitore DI.

Vediamo ora in dettaglio le singole sottodirectory.


Presentatori e modelli .[#toc-presenters-and-templates]
=======================================================

La parte di presentazione dell'applicazione si trova nella directory `app/Presentation`. Un'alternativa è la breve `app/UI`. Qui si trovano tutti i presentatori, i loro modelli e tutte le classi di aiuto.

Organizziamo questo livello per domini. In un progetto complesso, che combina e-commerce, blog e API, la struttura sarebbe la seguente:

/--pre
<b>app/Presentation/</b>
├── <b>Shop/</b>              ← frontend e-commerce
│   ├── <b>Product/</b>
│   ├── <b>Cart/</b>
│   └── <b>Order/</b>
├── <b>Blog/</b>              ← blog
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← amministrazione
│   ├── <b>Dashboard/</b>
│   └── <b>Products/</b>
└── <b>Api/</b>               ← endpoint API
	└── <b>V1/</b>
\--

Al contrario, per un semplice blog utilizzeremmo questa struttura:

/--pre
<b>app/Presentation/</b>
├── <b>Front/</b>             ← sito web frontend
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← amministrazione
│   ├── <b>Dashboard/</b>
│   └── <b>Posts/</b>
├── <b>Error/</b>
└── <b>Export/</b>            ← RSS, sitemaps, ecc.
\--

Cartelle come `Home/` o `Dashboard/` contengono presentatori e modelli. Cartelle come `Front/`, `Admin/` o `Api/` sono chiamate **moduli**. Tecnicamente, si tratta di cartelle regolari che servono per l'organizzazione logica dell'applicazione.

Ogni cartella con un presentatore contiene un presentatore con nome simile e i relativi modelli. Ad esempio, la cartella `Dashboard/` contiene:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presentatore
└── <b>default.latte</b>              ← modello
\--

Questa struttura di directory si riflette negli spazi dei nomi delle classi. Ad esempio, `DashboardPresenter` si trova nello spazio dei nomi `App\Presentation\Admin\Dashboard` (vedere la [mappatura dei presentatori |#presenter mapping]):

```php
namespace App\Presentation\Admin\Dashboard;

class DashboardPresenter extends Nette\Application\UI\Presenter
{
	//...
}
```

Ci riferiamo al presentatore `Dashboard` all'interno del modulo `Admin` nell'applicazione usando la notazione dei due punti come `Admin:Dashboard`. Alla sua azione `default` ci si riferisce quindi come `Admin:Dashboard:default`. Per i moduli annidati, usiamo più punti, ad esempio `Shop:Order:Detail:default`.


Sviluppo di una struttura flessibile .[#toc-flexible-structure-development]
---------------------------------------------------------------------------

Uno dei grandi vantaggi di questa struttura è l'eleganza con cui si adatta alle crescenti esigenze del progetto. A titolo di esempio, prendiamo la parte che genera i feed XML. Inizialmente, abbiamo un semplice modulo:

/--pre
<b>Export/</b>
├── <b>ExportPresenter.php</b>   ← un unico presentatore per tutte le esportazioni
├── <b>sitemap.latte</b>         ← modello per la mappa del sito
└── <b>feed.latte</b>            ← modello per il feed RSS
\--

Nel corso del tempo, vengono aggiunti altri tipi di feed e abbiamo bisogno di più logica per loro... Nessun problema! La cartella `Export/` diventa semplicemente un modulo:

/--pre
<b>Export/</b>
├── <b>Sitemap/</b>
│   ├── <b>SitemapPresenter.php</b>
│   └── <b>sitemap.latte</b>
└── <b>Feed/</b>
	├── <b>FeedPresenter.php</b>
	├── <b>amazon.latte</b>         ← feed per Amazon
	└── <b>ebay.latte</b>           ← feed per eBay
\--

Questa trasformazione è del tutto agevole: basta creare nuove sottocartelle, suddividervi il codice e aggiornare i collegamenti (ad esempio, da `Export:feed` a `Export:Feed:amazon`). Grazie a ciò, possiamo espandere gradualmente la struttura secondo le necessità, il livello di annidamento non è limitato in alcun modo.

Ad esempio, se nell'amministrazione sono presenti molti presentatori relativi alla gestione degli ordini, come `OrderDetail`, `OrderEdit`, `OrderDispatch` ecc. si può creare un modulo (cartella) `Order` per una migliore organizzazione, che conterrà (cartelle per) i presentatori `Detail`, `Edit`, `Dispatch` e altri.


Posizione del modello .[#toc-template-location]
-----------------------------------------------

Negli esempi precedenti, abbiamo visto che i modelli si trovano direttamente nella cartella del presentatore:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presentatore
├── <b>DashboardTemplate.php</b>      ← classe modello opzionale
└── <b>default.latte</b>              ← modello
\--

Questa posizione si rivela la più comoda nella pratica: si hanno tutti i file correlati a portata di mano.

In alternativa, è possibile collocare i modelli in una sottocartella di `templates/`. Nette supporta entrambe le varianti. È anche possibile collocare i modelli completamente al di fuori della cartella `Presentation/`. Per maggiori informazioni sulle opzioni di collocazione dei modelli, consultare il capitolo [Ricerca dei modelli |templates#Template Lookup].


Classi e componenti di aiuto .[#toc-helper-classes-and-components]
------------------------------------------------------------------

I presentatori e i modelli sono spesso accompagnati da altri file di aiuto. Li collochiamo logicamente in base al loro scopo:

1. **Direttamente con il presentatore** nel caso di componenti specifici per un determinato presentatore:

/--pre
<b>Product/</b>
├── <b>ProductPresenter.php</b>
├── <b>ProductGrid.php</b>        ← componente per l'elenco dei prodotti
└── <b>FilterForm.php</b>         ← modulo per il filtraggio
\--

2. **Per il modulo** - si consiglia di utilizzare la cartella `Accessory`, che si trova ordinatamente all'inizio dell'alfabeto:

/--pre
<b>Front/</b>
├── <b>Accessory/</b>
│   ├── <b>NavbarControl.php</b>    ← componenti per il frontend
│   └── <b>TemplateFilters.php</b>
├── <b>Product/</b>
└── <b>Cart/</b>
\--

3. **Per l'intera applicazione** - in `Presentation/Accessory/`:
/--pre
<b>app/Presentation/</b>
├── <b>Accessory/</b>
│   ├── <b>LatteExtension.php</b>
│   └── <b>TemplateFilters.php</b>
├── <b>Front/</b>
└── <b>Admin/</b>
\--

Oppure si possono inserire classi di aiuto come `LatteExtension.php` o `TemplateFilters.php` nella cartella dell'infrastruttura `app/Core/Latte/`. E i componenti in `app/Components`. La scelta dipende dalle convenzioni del team.


Modello - Cuore dell'applicazione .[#toc-model-heart-of-the-application]
========================================================================

Il modello contiene tutta la logica di business dell'applicazione. Per la sua organizzazione, vale la stessa regola: si struttura per domini:

/--pre
<b>app/Model/</b>
├── <b>Payment/</b>                   ← tutto sui pagamenti
│   ├── <b>PaymentFacade.php</b>      ← punto di ingresso principale
│   ├── <b>PaymentRepository.php</b>
│   ├── <b>Payment.php</b>            ← entità
├── <b>Order/</b>                     ← tutto sugli ordini
│   ├── <b>OrderFacade.php</b>
│   ├── <b>OrderRepository.php</b>
│   ├── <b>Order.php</b>
└── <b>Shipping/</b>                  ← tutto sulla spedizione
\--

Nel modello si incontrano tipicamente questi tipi di classi:

**Facades**: rappresentano il punto di ingresso principale in un dominio specifico dell'applicazione. Agiscono come un orchestratore che coordina la cooperazione tra diversi servizi per implementare casi d'uso completi (come "creare un ordine" o "elaborare un pagamento"). Sotto il loro livello di orchestrazione, la facciata nasconde i dettagli dell'implementazione al resto dell'applicazione, fornendo così un'interfaccia pulita per lavorare con il dominio in questione.

```php
class OrderFacade
{
	public function createOrder(Cart $cart): Order
	{
		// convalida
		// creazione dell'ordine
		// invio di e-mail
		// scrittura su statistiche
	}
}
```

**Servizi**: si concentrano su operazioni commerciali specifiche all'interno di un dominio. A differenza delle facciate, che orchestrano interi casi d'uso, un servizio implementa una logica aziendale specifica (come il calcolo dei prezzi o l'elaborazione dei pagamenti). I servizi sono tipicamente stateless e possono essere utilizzati sia dalle facade come elementi costitutivi per operazioni più complesse, sia direttamente da altre parti dell'applicazione per compiti più semplici.

```php
class PricingService
{
	public function calculateTotal(Order $order): Money
	{
		// calcolo del prezzo
	}
}
```

**Repository**: gestiscono tutte le comunicazioni con l'archivio dati, in genere un database. Il loro compito è quello di caricare e salvare le entità e di implementare metodi per la loro ricerca. Un repository protegge il resto dell'applicazione dai dettagli dell'implementazione del database e fornisce un'interfaccia orientata agli oggetti per lavorare con i dati.

```php
class OrderRepository
{
	public function find(int $id): ?Order
	{
	}

	public function findByCustomer(int $customerId): array
	{
	}
}
```

**Entità**: oggetti che rappresentano i principali concetti di business dell'applicazione, che hanno una loro identità e cambiano nel tempo. In genere si tratta di classi mappate sulle tabelle del database tramite ORM (come Nette Database Explorer o Doctrine). Le entità possono contenere regole di business relative ai loro dati e alla logica di validazione.

```php
// Entità mappata alla tabella del database ordini
class Order extends Nette\Database\Table\ActiveRow
{
	public function addItem(Product $product, int $quantity): void
	{
		$this->related('order_items')->insert([
			'product_id' => $product->id,
			'quantity' => $quantity,
			'unit_price' => $product->price,
		]);
	}
}
```

**Oggetti valore**: oggetti immutabili che rappresentano valori senza una propria identità, ad esempio una somma di denaro o un indirizzo e-mail. Due istanze di un oggetto valore con gli stessi valori sono considerate identiche.


Codice dell'infrastruttura .[#toc-infrastructure-code]
======================================================

La cartella `Core/` (o anche `Infrastructure/`) ospita le fondamenta tecniche dell'applicazione. Il codice dell'infrastruttura include tipicamente:

/--pre
<b>app/Core/</b>
├── <b>Router/</b>               ← instradamento e gestione degli URL
│   └── <b>RouterFactory.php</b>
├── <b>Security/</b>             ← autenticazione e autorizzazione
│   ├── <b>Authenticator.php</b>
│   └── <b>Authorizator.php</b>
├── <b>Logging/</b>              ← registrazione e monitoraggio
│   ├── <b>SentryLogger.php</b>
│   └── <b>FileLogger.php
├── <b>Cache/</b>                ← livello di caching
│   └── <b>FullPageCache.php</b>
└── <b>Integration/</b>          ← integrazione con servizi esterni
	├── <b>Slack/</b>
	└── <b>Stripe/</b>
\--

Per i progetti più piccoli, una struttura piatta è naturalmente sufficiente:

/--pre
<b>Core/</b>
├── <b>RouterFactory.php</b>
├── <b>Authenticator.php</b>
└── <b>QueueMailer.php</b>
\--

Questo è codice che:

- Gestisce l'infrastruttura tecnica (routing, logging, caching)
- integra servizi esterni (Sentry, Elasticsearch, Redis)
- Fornisce servizi di base per l'intera applicazione (posta, database)
- È per lo più indipendente dal dominio specifico: la cache o il logger funzionano allo stesso modo per l'e-commerce o il blog.

Ci si chiede se una certa classe debba stare qui o nel modello? La differenza fondamentale è che il codice in `Core/`:

- Non sa nulla del dominio (prodotti, ordini, articoli).
- Di solito può essere trasferito a un altro progetto
- Risolve "come funziona" (come inviare la posta), non "cosa fa" (quale posta inviare)

Esempio per una migliore comprensione:

- `App\Core\MailerFactory` - crea istanze di classe per l'invio di email, gestisce le impostazioni SMTP
- `App\Model\OrderMailer` - utilizza `MailerFactory` per inviare le e-mail sugli ordini, conosce i loro modelli e quando devono essere inviati


Script di comando .[#toc-command-scripts]
=========================================

Le applicazioni hanno spesso bisogno di eseguire compiti al di fuori delle normali richieste HTTP, che si tratti di elaborazione di dati in background, manutenzione o compiti periodici. Per l'esecuzione vengono utilizzati semplici script nella cartella `bin/`, mentre la logica di implementazione vera e propria è collocata in `app/Tasks/` (o `app/Commands/`).

Esempio:

/--pre
<b>app/Tasks/</b>
├── <b>Maintenance/</b>               ← script di manutenzione
│   ├── <b>CleanupCommand.php</b>     ← eliminazione di vecchi dati
│   └── <b>DbOptimizeCommand.php</b>  ← ottimizzazione del database
├── <b>Integration/</b>               ← integrazione con sistemi esterni
│   ├── <b>ImportProducts.php</b>     ← importazione dal sistema dei fornitori
│   └── <b>SyncOrders.php</b>         ← sincronizzazione degli ordini
└── <b>Scheduled/</b>                 ← attività regolari
	├── <b>NewsletterCommand.php</b>  ← invio di newsletter
	└── <b>ReminderCommand.php</b>    ← notifiche ai clienti
\--

Cosa appartiene al modello e cosa agli script di comando? Ad esempio, la logica per l'invio di un'e-mail fa parte del modello, l'invio massivo di migliaia di e-mail appartiene a `Tasks/`.

I task vengono solitamente [eseguiti dalla riga di comando |https://blog.nette.org/en/cli-scripts-in-nette-application] o tramite cron. Possono anche essere eseguiti tramite richiesta HTTP, ma occorre tenere conto della sicurezza. Il presenter che esegue il task deve essere protetto, ad esempio solo per gli utenti loggati o con un token forte e l'accesso da indirizzi IP consentiti. Per i task lunghi, è necessario aumentare il limite di tempo dello script e utilizzare `session_write_close()` per evitare di bloccare la sessione.


Altre possibili directory .[#toc-other-possible-directories]
============================================================

Oltre alle directory di base menzionate, è possibile aggiungere altre cartelle specializzate in base alle esigenze del progetto. Vediamo le più comuni e il loro utilizzo:

/--pre
<b>app/</b>
├── <b>Api/</b>              ← Logica API indipendente dal livello di presentazione
├── <b>Database/</b>         ← script di migrazione e seeders per i dati di test
├── <b>Components/</b>       ← componenti visivi condivisi nell'applicazione
├── <b>Event/</b>            ← utile se si utilizza un'architettura guidata dagli eventi
├── <b>Mail/</b>             ← modelli di e-mail e relativa logica
└── <b>Utils/</b>            ← classi di aiuto
\--

Per i componenti visivi condivisi usati nelle presentazioni di tutta l'applicazione, si può usare la cartella `app/Components` o `app/Controls`:

/--pre
<b>app/Components/</b>
├── <b>Form/</b>                 ← componenti di moduli condivisi
│   ├── <b>SignInForm.php</b>
│   └── <b>UserForm.php</b>
├── <b>Grid/</b>                 ← componenti per gli elenchi di dati
│   └── <b>DataGrid.php</b>
└── <b>Navigation/</b>           ← elementi di navigazione
	├── <b>Breadcrumbs.php</b>
	└── <b>Menu.php</b>
\--

Qui si trovano i componenti con una logica più complessa. Se si desidera condividere i componenti tra più progetti, è bene separarli in un pacchetto autonomo del compositore.

Nella cartella `app/Mail` si può collocare la gestione delle comunicazioni via e-mail:

/--pre
<b>app/Mail/</b>
├── <b>templates/</b>            ← modelli di e-mail
│   ├── <b>order-confirmation.latte</b>
│   └── <b>welcome.latte</b>
└── <b>OrderMailer.php</b>
\--


Mappatura dei presentatori .[#toc-presenter-mapping]
====================================================

La mappatura definisce le regole per derivare i nomi delle classi dai nomi dei presentatori. Vengono specificate nella [configurazione |configuration] sotto la chiave `application › mapping`.

In questa pagina, abbiamo mostrato che collochiamo i presentatori nella cartella `app/Presentation` (o `app/UI`). Dobbiamo comunicare a Nette questa convenzione nel file di configurazione. Una riga è sufficiente:

```neon
application:
	mapping: App\Presentation\*\**Presenter
```

Come funziona la mappatura? Per capire meglio, immaginiamo prima un'applicazione senza moduli. Vogliamo che le classi del presentatore rientrino nello spazio dei nomi `App\Presentation`, in modo che il presentatore `Home` sia mappato sulla classe `App\Presentation\HomePresenter`. Questo si ottiene con questa configurazione:

```neon
application:
	mapping: App\Presentation\*Presenter
```

La mappatura funziona sostituendo l'asterisco nella maschera `App\Presentation\*Presenter` con il nome del presentatore `Home`, ottenendo il nome finale della classe `App\Presentation\HomePresenter`. Semplice!

Tuttavia, come si vede negli esempi di questo e di altri capitoli, le classi del presentatore vengono collocate in sottodirectory eponime, ad esempio il presentatore `Home` viene mappato nella classe `App\Presentation\Home\HomePresenter`. Questo si ottiene raddoppiando i due punti (richiede Nette Application 3.2):

```neon
application:
	mapping: App\Presentation\**Presenter
```

Ora passiamo alla mappatura dei presentatori nei moduli. Possiamo definire una mappatura specifica per ogni modulo:

```neon
application:
	mapping:
		Front: App\Presentation\Front\**Presenter
		Admin: App\Presentation\Admin\**Presenter
		Api: App\Api\*Presenter
```

In base a questa configurazione, il presentatore `Front:Home` si mappa alla classe `App\Presentation\Front\Home\HomePresenter`, mentre il presentatore `Api:OAuth` si mappa alla classe `App\Api\OAuthPresenter`.

Poiché i moduli `Front` e `Admin` hanno un metodo di mappatura simile e probabilmente ci saranno altri moduli di questo tipo, è possibile creare una regola generale che li sostituisca. Un nuovo asterisco per il modulo sarà aggiunto alla maschera della classe:

```neon
application:
	mapping:
		*: App\Presentation\*\**Presenter
		Api: App\Api\*Presenter
```

Funziona anche per strutture di directory annidate più in profondità, come il presenter `Admin:User:Edit`, dove il segmento con l'asterisco si ripete per ogni livello e risulta nella classe `App\Presentation\Admin\User\Edit\EditPresenter`.

Una notazione alternativa consiste nell'utilizzare un array composto da tre segmenti invece di una stringa. Questa notazione è equivalente alla precedente:

```neon
application:
	mapping:
		*: [App\Presentation, *, **Presenter]
		Api: [App\Api, '', *Presenter]
```
