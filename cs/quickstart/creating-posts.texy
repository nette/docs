Vytváření a editace příspěvků
*****************************

Výborně! Máme úžasňácký nový blog, lidi se hádají v komentářích a konečně můžeme zase věnovat nějaký čas programování. I když se nám Adminer líbí, přeci jen v něm není moc pohodlné psát články. Možná je teď ten pravý čas přidat jednoducý formulář, kterým bychom mohli publikovat příspěvky přímo z naší aplikace. Tak pojďme na to.

Začneme přípravou uživatelského rozhraní:

1. Na hlavní stránce vypíšeme odkaz pro přidání nového příspěvku.
2. Ten nám zobrazí formulář s poli pro titulek a obsah článku.
3. Odesláním formuláře článek uložíme.

Samozřejmě přidáme i přihlašování a přidávání nových příspšvků dovolíme jen přihlášeným uživatelům. Ale to si nechme na později. Co musíme udělat pro přidávání příspěvků?

1. Přidat odkaz na stránku s novým příspěvkem (v šabloně `app/templates/Homepage/default.latte`).
2. Vytvořit novou stránku (šablonu), kde se bude zobrazovat formulář.
3. Nadefinovat formulář nového příspěvku.
4. Připravit handle, který se spustí po odeslání nového formuláře a uloží příspěvek do databáze.


Odkaz na přidání příspěvku
===

Jak přidat odkaz byste už měli vědět. Tak to zkuste.

Pokud si nejste jistí, přidejte následující kus kódu někam do `app/templates/Homepage/default.latte`:

/---html
<a n:href="Post:create">Write new post</a>
\---


Stránka s formulářem přidání příspěvku
===

Odkaz který jsme právě vytvořili vede na `PostPresenter` a jeho akci `create`. Mohli bychom vytvořit metodu `renderCreate`, ale to není potřeba. Nemusíme získávat žádná data z databáze a dávat je do šablony, metoda by stejně byla prázdná. Bude nám stačit vytvořit odpovídající šablonu.

.[note]
Pokud chcete, prázdnou metodu samozřejmě můžete vytvořit, pro případ, že bychom do ní nějaký kód přidávali později. Je to na vás.

Vytvořme šablonu `app/templates/Post/create.latte`:

/---html
{block #content}
<h1>New post</h1>

{control postForm}
\--

Vše by vám z ní mělo být zřejmé. Poslední řádek vykresluje formulář, který v zápětí vytvoříme.


Formulář přidání příspěvku
===

Komponenty a formuláře jsme už probrali, když jsme přidávali komentáře. Pokud ještě nejste pevní v kramflecích, zopakukte si [jak fungují |comments#toc-form-for-commenting], počkáme tady ;)

Teď v presenteru `PostPresenter` vytvořte následující metodu:

/---code php
	protected function createComponentPostForm()
	{
		$form = new Nette\Application\UI\Form;
		$form->addText('title', 'Title:')
			->setRequired();
		$form->addTextArea('content', 'Content:')
			->setRequired();

		$form->addSubmit('send', 'Save and publish');
		$form->onSuccess[] = $this->postFormSucceeded;

		return $form;
	}
\---


Uložení příspěvku z formuláře
===

Pokračujeme vytvořením handleru.

/---php
	public function postFormSucceeded($form)
	{
		$values = $form->getValues();
		$post = $this->database->table('posts')->insert($values);

		$this->flashMessage("Post was published", 'success');
		$this->redirect('show', $post->id);
	}
\---

Rychle vysvětlíme: handler z formuláře získá data, vloží je do databáze, nastaví zprávu pro uživatele, že se přidání příspěvku zdařilo, a přesměruje na stránku příspěvku, takže hned vidíte, jak příspěvek vypadá.


Editace příspěvků
===

Určitě budeme chtít existující příspěvky upravovat. Mělo by to být jednoduché - formulář `postForm` už máme, a můžeme ho použít i pro editaci. Vytvoříme novou stránku `edit` a upravíme handler formuláře tak, aby uměl jak přidat nový příspěvek, tak upravit existující.

Přidáme metodu do presenteru `PostPresenter`:

/---php
	public function actionEdit($postId)
	{
		$post = $this->database->table('posts')->get($postId);
		if (!$post) {
			$this->error('Post not found');
		}
		$this['postForm']->setDefaults($post->toArray());
	}
\---

Povšimněte si, že metoda se jmenuje `actionEdit` a ne `renderEdit`, jak jste si mohli myslet. Render metody používáme pro předávání dat šablonám. Na druhou stranu action metody mohou dělat mnohem víc - měly by kontrolovat, jestli stránku můžeme zobrazit konkrétnímu návštěvníkovi, a také by měly zařizovat většinu "tvrdé práce", která nepatří do formulářových handlerů. Předávání dat do šablony by v action metodách samozřejmě také fungovalo, ale kvůli rozdělení odpovědností to není doporučené. Když zodpovědnosti rozdělíte, váš kód bude čitelnější a lépe spravovatelný.

Teď založme šablonu `app/templates/Post/edit.latte`:

/---html
{block content}
<h1>Edit post</h1>

{control postForm}
\---

Dále rozšíříme formulářový handler:

/---code php
	public function postFormSucceeded(Form $form)
	{
		$values = $form->getValues();
		$postId = $this->getParameter('postId');

		if ($postId) {
			$post = $this->database->table('posts')->get($postId);
			$post->update($values);
		} else {
			$post = $this->database->table('posts')->insert($values);
		}

		$this->flashMessage('Post was published', 'success');
		$this->redirect('show', $post->id);
	}
\---

Pokud je k dispozici parametr `postId`, znamená to, že příspěvek upravujeme. V takovém případě zkontrolujeme, že příspěvek s daným ID opravdu existuje, a pokud ano, upravíme jeho záznam v databázi. Pokud `postId` do formuláře nepřijde, vytvoří se příspěvek nový.

Ale odkud `postId` přijde? Je to parametr, který předáváme do metody `actionEdit`. Můžete si vytvořit odkaz v šabloně `app/templates/Post/show.latte`:

/---html
<a n:href="edit $post->id">Edit this post</a>
\---


Shrnutí
=======

Blog funguje, lidé komentují a my nadále nejsme při přidávání a editaci článků závislí na Admineru.
Články může přidávat kdokoliv. Ale počkat, to asi nechceme, aby nám na blogu mohl přispívat *úplně* každý. Budeme potřebovat nějaké přihlašování, abychom k psaní článků pustili jen pověřené osoby. O tom si promluvíme v další kapitole.
