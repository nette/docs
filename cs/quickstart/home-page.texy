Titulní stránka
***************

.[perex]
Pojďme vytvořit titulní stránku, na které se budou vypisovat nejčerstvější příspěvky


Než začneme, měli byste něco vědět o návrhovém vzoru Model-View-Presenter (je podobný MVC((Model-View-Controller))):

- **Model** - vrstva pro práci s daty. Je zcela nezávislá na zbytku aplikace. Komunikuje pouze s presentery.

- **View** - vrstva, která definuje vzhled aplikace. Vykresuje uživateli data za použití šablon.

- **Presenter** (také Controller) - propojující vrstva pro Model a View. Zpracovává požadavky, z Modelu získává data a předává je do patřičného View.


U tak jednoduché aplikace, jakou je náš blog, bude Model sestávat ze samotné databáze, nepotřebujeme pro něj žádný PHP kód navíc. Stačí nám vytvořit Presentery a View. V Nette má každý Presenter svoje View, takže je budeme vytvářet souběžně.

Zdrojový kód quick startu můžete [stahnout na GitHubu |https://github.com/nette/quickstart].


Vytvoření databáze pomocí Admineru
==================================

K uchování dat použijeme databázi MySQL - mezi webovými vývojáři je to nejběžnější volba. Nic vám samozřejmě nebrání použít jinou podporovanou databázi (PostgreSQL, SQLite aj.).

Připravme si databázi, kam budeme ukládat články blogu. Začneme jednoduše, s jedinou tabulkou příspěvků.

Nejjednodušší cestou, jak vytvořit databázi, je nástroj "Adminer":[http://adminer.org/], který je připraven v sandboxu. Najdete jej na URL `http://localhost/nette-blog/www/adminer/`. Databázové schéma můžete samozřejmě vytvořit pomocí libovolného jiného nástroje, pokud je to pro vás pohodlnější.

V Admineru vytvoříme novou databázi, kterou pojmenujeme `quickstart`.

Přidáme tabulku `posts` s následujícími sloupci:
- `id` int, click on autoincrement (AI)
- `title` varchar, length 255
- `content` text
- `created_at` timestamp

Celé by to mělo vypadat nějak takhle:

[* adminer-posts.png *]

.[tip]
Během vytváření tabulky je důležité zvolit **InnoDB** storage. Konkrétní důvod poznáte později. Prozatím můžete tabulku uložit.

Než naprogramujeme přidávání příspěvků přímo z webové aplikace, zkuste přidat pár článků ručně. Konec konců, žádné rozhraní bychom programovat nemuseli, jednoduchý blog by si se správou článků bohatě vystačil s Adminerem.



Připojení k databázi
====================

Když už máme databázi s několika ukázkovými články, pojďme je zobrazit na titulní stránce.

Nejprve musíme říct aplikaci, kterou databázi použít. Veškeré nastavení, včetně toho databázového, je uchováno v souboru `/app/config/config.neon`. Nastavte DSN((Data Source Name)) pro připojení k databázi, jméno a heslo. Takhle nějak by to mělo vypadat:

/---neon
	nette:
		database:
			dsn: 'mysql:host=127.0.0.1;dbname=quickstart'
			user: root
			password: *enter password here*
\---

.[note]
Při upravování tohoto souboru si dávejte pozor: formát [NEON |http://ne-on.org] zvládá zpracovat odsazení mezerami i tabulátory, ale není možné tyto dva formáty kombinovat. Konfigurační soubor v sandboxu používá tabulátory.



Předávání připojení k databázi
=============================

Presenter titulní stránky (v souboru `app/presenters/HomepagePresenter.php`), kde budeme články vypisovat, potřebuje připojení k databázi. Předáme mu ho konstruktorem, jak je to ukázáno níže:

/--php
class HomepagePresenter extends BasePresenter
{
	/** @var Nette\Database\Connection */
	private $database;

	public function __construct(Nette\Database\Connection $database)
	{
		$this->database = $database;
	}

	// ...

}
\--



Načtení příspěvků z databáze
============================

Teď načtěme příspěvky a předejme je šabloně, která pak vypíše HTML kód. K tomu slouží *render* metoda.

/--php
	public function renderDefault()
	{
		$this->template->posts = $this->database->table('posts')
			->order('created_at DESC')
			->limit(5);
	}
\--

Presenter teď obsahuje jednu render metodu `renderDefault()`, která předává data do view jménem `default`. Šablony presenteru najdeme podle schématu `app/templates/{PresenterName}/{viewName}.latte`, v tomto případě tedy bude cesta k šabloně `app/templates/Homepage/default.latte`. V šabloně máme k dispozici proměnnou `$posts`.


Šablona
=======

Každá stránka má nadřazenou šablonu s hlavičkou, styly, patičkou... (té říkáme *layout*) a pak vlastní šablonu se svým obsahem (pro titulní stránku to je seznam příspěvků). Vlastní šablona stránky může ovlivňovat některé části nadřazeného layoutu.

Ve výchozím stavu najdeme layout v `app/templates/@layout.latte`. Ten obsahuje

/--html
{include #content}
\--

Tento řádek do layoutu vloží blok pojmenovaný `#content` - ten je definován ve vlastní šabloně stránky.

Můžete zkusit zobrazit titulní stránku své aplikace. Protože jsme ještě nevytvořili konkrétní šablonu, Nette zobrazí chybovou hlášku:

/--
Page not found. Missing template '…/app/templates/Homepage/default.latte'.
\--

Vytvořte chybějící soubor a vložte do něj základní kus kódu:

/--html
{block #content}
\--

To nadefinuje blok *content*, který se pak bude vkládat do layoutu. Když teď obnovíte stránku v prohlížeči, uvidíte práznou stránku (jen s HTML hlavičkou a patičkou).

Pojďme vypsat příspěvky blogu - přidejte následující kód do šablony stránky, za počátek definice blocku *content*.

/--html
<h1 n:block="title">My awesome blog</h1>

{foreach $posts as $post}
<div class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>

	<h2><a href="{link Post:show $post->id}">{$post->title}</a></h2>

	<div>{$post->content}</div>
</div>
{/foreach}
\--

Obnovte stránku a uvidíte seznam svých příspěvků. Zatím není nijak hezký, natož barevný, můžete si [pohrát s CSS |https://github.com/nette/quickstart/blob/master/www/css/screen.css].

Makro `{foreach}` projde všechny příspěvky, které jsme v presenteru přidali do šablony v proměnné `$posts` a pro každý z nich vypíše kus HTML kódu. Stejně, jako by to udělal PHP kód.

Makro `{link}` vygeneruje URL, které vede na akci `Post:show` (tu v zápětí vytvoříme). Jako parametr předává ID článku. K tomu se ještě dostaneme.

Část šablony `|date:` se jmenuje helper. Helpery můžeme použít k formátování výstupu. Tento konkrétní helper změní datum z proměnné před ním (mapř. `2013-04-12`) na hezký, čitelný formát (`April 12, 2013`). Více dostupných "helperů":/default-helpers můžete najít v dokumentaci, a pokud potřebujete, můžete si vytvořit i své vlastní.

Ještě jednu věc: Celý kód můžeme trochu zkrátit a zjednodušit. *Latte makra* můžeme nahradit za *n: atributy*, třeba takto:

/--html
<div n:foreach="$posts as $post" class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>

	<h2><a n:href="Post:show $post->id">{$post->title}</a></h2>

	<div>{$post->content}</div>
</div>
\--

Atribut `n:foreach`, obalí *div* blokem *foreach* (který pak dělá úplně to samé, jako kus šablony výše).

Atribut `n:href` je aliasem pro makro `{link}`.


Shrnutí
=======

Vytvořili jsme velmi jednoduchou databázi s pár příspěvky blogu. Aplikace se připojí do databáze a vypíše jednoduchý seznam těchto příspěvků.
