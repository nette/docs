Authentication
**************

Nette provides you with guidelines how to program authentication on your page, but it doesn't push you to do it any particular way. It's up to you how you want to implement it. Nette has an interface `Nette\Security\IAuthenticator`, which wants you to implement just a single method called `login`, which finds the user anyhow you want.

There are many ways how a user can authenticate himself. The most common way is *password-based authentication* (user provides his name or email and a password), but there are other means as well. You may be familiar with "Login with Facebook" buttons on many websites, or login via Google/Twitter/GitHub or any other site. With Nette, you can have any authentication method you want, or you can combine them. It's up to you.


Normally you would write your own authenticator, but for this simple small blog, we can use one the `SimpleAuthenticator` which is bundled with Nette. It provides password-based authentication and the usernames and passwords are stored in `.neon` config file. Add a *security* section to your `config.neon` (and don't forget to change the password):


/--neon
	nette:
		security:
			users:
				admin: secret
\--


Nette will automatically create a service `authenticator` into DI Container.

.[note]
You can read more about [Dependency Injection here |doc:en/dependency-injection], and about [Configuration here |doc:en/configuring]


Sign-in Form
===

We now have the backend part of authentication ready and we need to provide a user interface, through which the user would log in. Let's create a new presenter called *SignPresenter*, which will

- display a login form (asking for username and password)
- authenticate the user when the form is submitted
- provide log out action.

What a coincidence, there is already one prepared in default sandbox! We can simply use it. So let's just go throu it and check how it works.


Let's start with the login form. You already know how form works in a presenter. Open up the `SignPresenter` and find method `createComponentSignInForm`. It should look like this

/--php
	protected function createComponentSignInForm()
	{
		$form = new Form;
		$form->addText('username', 'Username:')
			->setRequired('Please enter your username.');

		$form->addPassword('password', 'Password:')
			->setRequired('Please enter your password.');

		$form->addCheckbox('remember', 'Keep me signed in');

		$form->addSubmit('send', 'Sign in');

		// call method signInFormSucceeded() on success
		$form->onSuccess[] = $this->signInFormSucceeded;
		return $form;
	}
\--

There is a input for username and password. You can delete the `remember` checkbox if you like.


View
---

The form is rendered in the template `app/templates/Sign/in.latte`

/--html
{block #content}
<h1 n:block=title>Sign in</h1>

{control signInForm}
\--


Login Handler
----

There is also prepared a *form handler* for for signing in the user, that get's invoked right after the form is submitted. The current handler also extends the time, for how long the user will be logged in, if he checks "remember", that's not needed right now, so let's delete it.

The handler will just take the username and password the user entered and will pass it to authenticator defined earlier. After the user has logged in, we will redirect him to the homepage.

There is a one more thing - the `try catch` statement`. The method "User->login()":http://api.nette.org/2.0/Nette.Security.User.html#_login should throw an exception, when the username or password doesn't match those we've defined earlier. As we already know, that would result in a Tracy redscreen, or in production mode, into message informing about internal server error. We wouldn't like that. That's why we catch the exception and add nice and friendly error message to the form.

When the error occurs in the form, the page with the form will be rendered again, and above the form, there will be a nice message, informing the user, that he or she have entered wrong username or password.

/--php
	public function signInFormSucceeded($form)
	{
		$values = $form->values;

		try {
			$this->getUser()->login($values->username, $values->password);
			$this->redirect('Homepage:');

		} catch (Nette\Security\AuthenticationException $e) {
			$form->addError("Incorrect username or password.");
		}
	}
\--


Post Form
===

First of all, let's secure the form for creating new posts. It's defined in `PostPresenter` and rendered in `app/templates/Post/create.latte`. Our first goal is not to allow the user to view the page if he's not logged in.


Presenter Views
---

Let's create a action method `actionCreate` and if the user is not logged in, we will redirect him to sign in form and require authentication.

/--php
	public function actionCreate()
	{
		if (!$this->user->isLoggedIn()) {
			$this->redirect('Sign:in');
		}
	}
\--

We should also secure the edit view, so simply add those three lines there too.

/--php
	public function actionEdit($postId)
	{
		if (!$this->user->isLoggedIn()) {
			$this->redirect('Sign:in');
		}
\--


Hide Links
----


An unauthenticated user can not see the *create* nor *edit page*, but he can still see the links pointing to them. Let's hide those as well. One such link is in `app/templates/Homepage/default.latte`, and it should be visible only if the user is logged in.

We can hide it using *n:macro* called `n:if`. If the statement inside it is `false`, the whole `<a>` tag and it's contents will be not displayed

/--html
<a n:href="Post:create" n:if="$user->loggedIn">Create post</a>
\--

this is a shortcut for

/--html
{if $user->loggedIn}<a n:href="Post:create">Create post</a>{/if}
\--


Form Handlers
---

The last, and **the most important thing** is to **secure the form handler**. Because components are reusable, they can be rendered in several views. And because they can be rendered in several views, they can also be submitted from any such view, even the ones that do not really exist. This means, even if the view `create` is not rendered, by tweaking the url, some user can still submit the form (and add/edit posts).

It can be prevented with a simple *if* that we will add at the beginning of `postFormSucceeded`

/--php
	public function postFormSucceeded(Form $form)
	{
		if (!$this->user->loggedIn) {
			$form->addError("You need to log in to create or edit posts");
			return;
		}

\--

It's simple as that, but you shall **never forget it**, it's really crucial for securing your app.


Login Form Link
====

Hey, but how do we get to the login page? There is no link pointing to it. Let's add one in the `app/templates/@layout.latte` template file. Try finding a nice place, it can be anywhere you like it most.

/--html
<div class="menu">
	{if !$user->loggedIn}
		<a n:href="Sign:in">Sign in</a>
	{else}
		<a n:href="Sign:out">Sign out</a>
	{/if}
</div>
\--

If the user is not yet logged in, we will show the "Sing in" link. And if he already is, we will show the "Sign out" link. That action is also already in default sandbox and we can simply use it.

The logout action looks like this, and because we redirect the user immediately, there is no need for a view template.

/--php
	public function actionOut()
	{
		$this->getUser()->logout();
		$this->flashMessage('You have been signed out.');
		$this->redirect('Homepage:');
	}
\--

All it does, is to call the "User->logout()":http://api.nette.org/2.0/Nette.Security.User.html#_logout method and then shows a nice message to the user.


Summary
===

There is a `Sign in` link pointing to a new presenter, which asks the user for his passwords and authenticates him. We used *SimpleAuthenticator* and configured the usernames and passwords in config file, because it was very easy step and we don't need more users at the moment. We also secured all required actions and forms, so that only logged in users can add new posts or edit existing ones.
