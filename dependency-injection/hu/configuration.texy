DI konténer konfigurációja
**************************

.[perex]
A Nette DI konténer konfigurációs opcióinak áttekintése.


Konfigurációs fájl
==================

A Nette DI konténer könnyen vezérelhető konfigurációs fájlok segítségével. Ezek általában [NEON formátumban|neon:format] íródnak. A szerkesztéshez [támogatással rendelkező szerkesztőket|best-practices:editors-and-tools#ide-editor] ajánlunk ehhez a formátumhoz.

<pre>
"decorator .[prism-token prism-atrule]":[#decorator |#decorator]: 	"Dekorátor .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI |#DI]: 			"DI konténer .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Kiterjesztések |#Rozšíření]: 	"További DI kiterjesztések telepítése .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Fájlok beillesztése |#Vkládání souborů]: 	"Fájlok beillesztése .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#paraméterek |#parametry]: 	"Paraméterek .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search |#Search]: 		"Szolgáltatások automatikus regisztrálása .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[szolgáltatások |services]: 		"Szolgáltatások .[prism-token prism-comment]"
</pre>

Ha `%` karaktert tartalmazó stringet szeretne írni, duplázással kell escapelni `%%`-ra. .[note]


Paraméterek
===========

A konfigurációban definiálhat paramétereket, amelyeket aztán a szolgáltatásdefiníciók részeként használhat. Ezzel áttekinthetőbbé teheti a konfigurációt, vagy egységesítheti és kiemelheti azokat az értékeket, amelyek változni fognak.

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

A `dsn` paraméterre bárhol a konfigurációban `%dsn%` írással hivatkozhatunk. A paramétereket stringeken belül is használhatjuk, mint például `'%wwwDir%/images'`.

A paraméterek nem csak stringek vagy számok lehetnek, tartalmazhatnak tömböket is:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Egy konkrét kulcsra `%mailer.user%`-ként hivatkozhatunk.

Ha a kódjában, például egy osztályban, meg kell tudnia bármely paraméter értékét, adja át azt ennek az osztálynak. Például a konstruktorban. Nincs globális objektum, amely a konfigurációt képviselné, és amelytől az osztályok lekérdeznék a paraméterértékeket. Ez megsértené a dependency injection elvét.


Szolgáltatások
==============

Lásd a [külön fejezetben|services].


Decorator
=========

Hogyan lehet tömegesen módosítani egy adott típusú összes szolgáltatást? Például meghívni egy bizonyos metódust minden olyan presenter esetén, amely egy konkrét közös őstől öröklődik? Erre való a decorator.

```neon
decorator:
	# minden olyan szolgáltatásnál, amely ennek az osztálynak vagy interfésznek a példánya
	App\Presentation\BasePresenter:
		setup:
			- setProjectId(10)       # hívd meg ezt a metódust
			- $absoluteUrls = true   # és állítsd be a változót
```

A decorator használható [tagekkel|services#Tagy] beállítására vagy az [inject|services#Režim Inject] mód bekapcsolására is.

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

A DI konténer technikai beállításai.

```neon
di:
	# megjeleníteni a DIC-t a Tracy Bar-ban?
	debugger: ...        # (bool) alapértelmezett true

	# soha nem autowire-olandó paramétertípusok
	excluded: ...        # (string[])

	# engedélyezni a szolgáltatások lazy létrehozását?
	lazy: ...            # (bool) alapértelmezett false

	# osztály, amelytől a DI konténer öröklődik
	parentClass: ...     # (string) alapértelmezett Nette\DI\Container
```


Lazy szolgáltatások .{data-version:3.2.4}
-----------------------------------------

A `lazy: true` beállítás aktiválja a szolgáltatások lazy (késleltetett) létrehozását. Ez azt jelenti, hogy a szolgáltatások nem jönnek létre ténylegesen abban a pillanatban, amikor lekérjük őket a DI konténerből, hanem csak az első használatuk pillanatában. Ez gyorsíthatja az alkalmazás indítását és csökkentheti a memóriaterhelést, mivel csak azok a szolgáltatások jönnek létre, amelyekre az adott kérésben valóban szükség van.

Egy konkrét szolgáltatásnál a lazy létrehozást [módosítani|services#Lazy služby] lehet.

.[note]
A lazy objektumok csak felhasználói osztályokhoz használhatók, nem belső PHP osztályokhoz. PHP 8.4 vagy újabb verziót igényel.


Metaadatok exportálása
----------------------

A DI konténer osztálya sok metaadatot is tartalmaz. Csökkentheti a méretét azáltal, hogy redukálja a metaadatok exportálását.

```neon
di:
	export:
		# exportálni a paramétereket?
		parameters: false   # (bool) alapértelmezett true

		# exportálni a tageket és melyeket?
		tags:               # (string[]|bool) alapértelmezés szerint mindet
			- event.subscriber

		# exportálni az autowiring adatokat és melyeket?
		types:              # (string[]|bool) alapértelmezés szerint mindet
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

Ha nem használja a `$container->getParameters()` tömböt, kikapcsolhatja a paraméterek exportálását. Továbbá exportálhatja csak azokat a tageket, amelyeken keresztül szolgáltatásokat szerez a `$container->findByTag(...)` metódussal.
Ha egyáltalán nem hívja meg a metódust, teljesen kikapcsolhatja a tagek exportálását `false`-szal.

Jelentősen redukálhatja az [autowiring |autowiring] metaadatait azáltal, hogy megadja azokat az osztályokat, amelyeket a `$container->getByType()` metódus paramétereként használ.
És ismét, ha egyáltalán nem hívja meg a metódust (illetve csak a [bootstrapban|application:bootstrap] a `Nette\Application\Application` megszerzéséhez), teljesen kikapcsolhatja az exportálást `false`-szal.


Kiterjesztések
==============

További DI kiterjesztések regisztrálása. Ezzel a módszerrel hozzáadjuk például a `Dibi\Bridges\Nette\DibiExtension22` DI kiterjesztést `dibi` néven.

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Ezután a `dibi` szekcióban konfiguráljuk:

```neon
dibi:
	host: localhost
```

Kiterjesztésként hozzá lehet adni egy osztályt is, amelynek paraméterei vannak:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Fájlok beillesztése
===================

További konfigurációs fájlokat illeszthetünk be az `includes` szekcióban:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

A `parameters.php` név nem elírás, a konfiguráció PHP fájlban is leírható, amely tömbként adja vissza:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Ha a konfigurációs fájlokban azonos kulcsokkal rendelkező elemek jelennek meg, felülíródnak, vagy [tömbök esetén egyesítve |#Slučování] lesznek. A később beillesztett fájl magasabb prioritású, mint az előző. Az a fájl, amelyben az `includes` szekció szerepel, magasabb prioritású, mint a benne beillesztett fájlok.


Search
======

A szolgáltatások automatikus hozzáadása a DI konténerhez rendkívül megkönnyíti a munkát. A Nette automatikusan hozzáadja a presentereket a konténerhez, de könnyen hozzáadhat bármilyen más osztályt is.

Csak meg kell adni, mely könyvtárakban (és alkönyvtárakban) keresse az osztályokat:

```neon
search:
	-	in: %appDir%/Forms
	-	in: %appDir%/Model
```

Általában azonban nem akarjuk hozzáadni az összes osztályt és interfészt, ezért szűrhetjük őket:

```neon
search:
	-	in: %appDir%/Forms

		# szűrés fájlnév alapján (string|string[])
		files:
			- *Factory.php

		# szűrés osztálynév alapján (string|string[])
		classes:
			- *Factory
```

Vagy kiválaszthatunk olyan osztályokat, amelyek legalább egyet örökölnek vagy implementálnak a megadott osztályok közül:


```neon
search:
	-	in: %appDir%
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Definiálhatunk kizáró szabályokat is, azaz osztálynév maszkokat vagy örökölt ősöket, amelyek ha megfelelnek, a szolgáltatás nem kerül hozzáadásra a DI konténerhez:

```neon
search:
	-	in: %appDir%
		exclude:
			files: ...
			classes: ...
			extends: ...
			implements: ...
```

Minden szolgáltatáshoz be lehet állítani tageket:

```neon
search:
	-	in: %appDir%
		tags: ...
```


Összefésülés
============

Ha több konfigurációs fájlban azonos kulcsokkal rendelkező elemek jelennek meg, felülíródnak, vagy tömbök esetén összefésülődnek. A később beillesztett fájl magasabb prioritású, mint az előző.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>eredmény</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Tömbök esetén megakadályozható az összefésülés egy felkiáltójel hozzáadásával a kulcs neve után:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>eredmény</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>

{{maintitle: Dependency Injection Konfiguráció}}
