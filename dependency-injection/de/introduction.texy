Was ist Dependency Injection?
*****************************

.[perex]
In diesem Kapitel werden Sie mit den grundlegenden Programmierpraktiken vertraut gemacht, die dem gesamten Nette-Framework zugrunde liegen und die Sie beim Schreiben Ihrer eigenen Anwendungen befolgen sollten. Dies sind die Grundlagen, die benötigt werden, um sauberen, verständlichen und wartbaren Code zu schreiben.

Wenn Sie diese Regeln lernen und befolgen, wird Ihnen das Framework bei jedem Schritt zur Seite stehen. Es wird Routineaufgaben für Sie erledigen und Ihnen die Arbeit so angenehm wie möglich machen, damit Sie sich auf die eigentliche Logik konzentrieren können.

Die Prinzipien, die wir hier zeigen, sind ganz einfach. Sie müssen sich um nichts kümmern.


Erinnern Sie sich an Ihr erstes Programm? .[#toc-remember-your-first-program]
-----------------------------------------------------------------------------

Wir haben keine Ahnung, in welcher Sprache Sie es geschrieben haben, aber wenn es PHP wäre, würde es wahrscheinlich ungefähr so aussehen:

```php
function summe(float $a, float $b): float
{
	return $a + $b;
}

echo summe(23, 1); // gibt 24 aus
```

Ein paar triviale Codezeilen, und doch sind darin so viele wichtige Konzepte versteckt. Wir sehen, dass es Variablen gibt. Dass der Code in kleinere Einheiten aufgeteilt ist, die zum Beispiel Funktionen sind. Dass wir ihnen Eingabeargumente übergeben und sie Ergebnisse zurückgeben. Alles, was fehlt, sind Bedingungen und Schleifen.

Die Tatsache, dass wir einer Funktion eine Eingabe übergeben und sie ein Ergebnis zurückliefert, ist ein vollkommen verständliches Konzept, das auch in anderen Bereichen, wie der Mathematik, verwendet wird.

Eine Funktion hat eine Signatur, die aus ihrem Namen, einer Liste von Parametern und deren Typen und schließlich dem Typ des Rückgabewerts besteht. Als Benutzer sind wir an der Signatur interessiert; über die interne Implementierung brauchen wir normalerweise nichts zu wissen.

Stellen Sie sich nun vor, dass die Signatur einer Funktion wie folgt aussieht:

```php
function summe(float $x): float
```

Eine Addition mit einem Parameter? Das ist seltsam... Wie wäre es hiermit?

```php
function summe(): float
```

Das ist wirklich seltsam, nicht wahr? Was glaubst du, wie die Funktion verwendet wird?

```php
echo summe(); // was wird gedruckt?
```

Wenn wir uns einen solchen Code ansehen, sind wir verwirrt. Nicht nur ein Anfänger würde ihn nicht verstehen, auch ein erfahrener Programmierer würde einen solchen Code nicht verstehen.

Wir fragen uns, wie eine solche Funktion eigentlich aussehen würde? Woher würde sie die Summanden bekommen? Wahrscheinlich würde sie sie sich *irgendwie* selbst beschaffen, etwa so:

```php
function summe(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Es stellt sich heraus, dass es versteckte Bindungen zu anderen Funktionen (oder statischen Methoden) im Körper der Funktion gibt, und um herauszufinden, woher die Summanden tatsächlich kommen, müssen wir weiter graben.


Nicht hier entlang! .[#toc-not-this-way]
----------------------------------------

Das soeben gezeigte Design ist die Essenz vieler negativer Merkmale:

- die Funktionssignatur gibt vor, dass sie keine Summanden braucht, was uns verwirrt
- wir haben keine Ahnung, wie wir die Funktion mit zwei anderen Zahlen rechnen lassen können
- wir mussten in den Code schauen, um zu sehen, woher die Summanden kommen
- wir haben versteckte Bindungen entdeckt
- um alles zu verstehen, müssen wir auch diese Bindungen untersuchen

Und ist es überhaupt die Aufgabe der Additionsfunktion, Eingaben zu beschaffen? Nein, natürlich nicht.  Ihre Aufgabe ist es nur, zu addieren.


Solchen Code wollen wir nicht sehen, und wir wollen ihn schon gar nicht schreiben. Die Abhilfe ist einfach: Zurück zu den Grundlagen und einfach Parameter verwenden:


```php
function summe(float $a, float $b): float
{
	return $a + $b;
}
```


Regel Nr. 1: Parameter verwenden .[#toc-rule-1-use-parameters]
--------------------------------------------------------------

Die wichtigste Regel lautet: **alle Daten, die Funktionen oder Klassen benötigen, müssen an sie übergeben werden**.

Wenn wir diese Regel brechen, wird es unmöglich sein, den Code verständlich, sauber und nachhaltig zu gestalten.

Wenn wir sie befolgen, sind wir auf dem Weg zu Code ohne versteckte Zwänge. Auf dem Weg zu einem Code, der nicht nur für den Autor, sondern auch für jeden, der ihn später liest, verständlich ist. Wo alles anhand der Signaturen von Funktionen und Klassen verständlich ist und man nicht nach versteckten Geheimnissen in der Implementierung suchen muss.

Diese Technik der Übergabe von Argumenten wird technisch **dependency injection** genannt.

(Verwechseln Sie Dependency Injection nicht mit einem "Dependency Injection Container"; das ist etwas völlig anderes, und wir werden Container im [nächsten Kapitel |container] behandeln).


Von Funktionen zu Klassen .[#toc-from-functions-to-classes]
-----------------------------------------------------------

Und was haben Klassen damit zu tun? Eine Klasse ist ein komplexeres Gebilde als eine einfache Funktion, aber auch hier gilt Regel Nr. 1. Es gibt einfach [mehr Möglichkeiten, Argumente |passing-dependencies] zu übergeben. Zum Beispiel, ganz ähnlich wie im Fall einer Funktion:

```php
class Mathematik
{
	public function summe(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Mathematik;
echo $math->summe(23, 1); // 24
```

Oder durch die Verwendung anderer Methoden oder des Konstruktors direkt:

```php
class Summe
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$summe = new Summe(23, 1);
echo $summe->calculate(); // 24
```

Beide Beispiele stehen vollständig im Einklang mit der Dependency Injection.


Beispiele aus der Praxis .[#toc-real-life-examples]
---------------------------------------------------

In der realen Welt werden Sie keine Klassen schreiben, um Zahlen zu addieren. Kommen wir nun zu Beispielen aus dem wirklichen Leben.

Nehmen wir eine Klasse `Article`, die einen Blog-Artikel darstellt:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// speichert den Artikel in der Datenbank
	}
}
```

und die Verwendung wird wie folgt sein:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Die Methode `save()` wird den Artikel in einer Datenbanktabelle speichern. Die Implementierung mit [Nette Database |database:] wäre ein Kinderspiel, wenn es nicht ein Problem gäbe: Woher bekommt `Article` die Datenbankverbindung, d.h. das Klassenobjekt `Nette\Database\Connection`?

Es scheint, dass wir viele Möglichkeiten haben. Es kann sie von einer statischen Variablen beziehen. Oder von der Klasse erben, die die Datenbankverbindung bereitstellen wird. Oder die Vorteile eines so genannten Singletons nutzen. Oder die sogenannten Fassaden, die in Laravel verwendet werden:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Toll, wir haben das Problem gelöst.

Oder haben wir das?

Erinnern Sie sich an [Regel Nr. 1: Verwenden Sie Parameter |#rule #1: use parameters]: Wir müssen alle Daten, die die Klasse benötigt, an sie übergeben. Denn wenn wir das nicht tun und die Regel brechen, haben wir den Weg zu schmutzigem Code voller versteckter Bindungen und Unverständlichkeit eingeschlagen, und das Ergebnis wird eine Anwendung sein, die nur schwer zu warten und zu entwickeln ist.

Der Benutzer der Klasse `Article` hat keine Ahnung, wo die Methode `save()` den Artikel speichert. In einer Datenbanktabelle? In welcher, der Produktions- oder der Entwicklungstabelle? Und wie kann dies geändert werden?

Der Benutzer muss sich ansehen, wie die Methode `save()` implementiert ist, um die Verwendung der Methode `DB::insert()` zu finden. Er muss also weiter suchen, um herauszufinden, wie diese Methode eine Datenbankverbindung herstellt. Und versteckte Bindungen können eine ziemlich lange Kette bilden.

Versteckte Bindungen, Laravel-Fassaden oder statische Variablen sind in sauberem, gut durchdachtem Code nie vorhanden. In sauberem und gut durchdachtem Code werden Argumente übergeben:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Noch praktischer ist es, wie wir gleich sehen werden, einen Konstruktor zu verwenden:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Wenn Sie eine Klasse schreiben wollen, die z. B. eine Datenbank benötigt, überlegen Sie nicht, woher Sie sie bekommen, sondern lassen Sie sie sich übergeben. Vielleicht als Parameter in einem Konstruktor oder einer anderen Methode. Deklarieren Sie Abhängigkeiten. Legen Sie sie in der API Ihrer Klasse offen. So erhalten Sie verständlichen und vorhersehbaren Code.

Wie wäre es mit dieser Klasse, die Fehlermeldungen protokolliert:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Was meinen Sie, haben wir [Regel Nr. 1 |#rule #1: use parameters] befolgt [: Parameter verwenden |#rule #1: use parameters]?

Wir haben es nicht getan.

Die Klasse *erhält* die Schlüsselinformation, das Verzeichnis mit der Protokolldatei, von einer Konstante.

Siehe ein Anwendungsbeispiel:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Könnten Sie, ohne die Implementierung zu kennen, die Frage beantworten, wo die Meldungen geschrieben werden? Würden Sie vermuten, dass das Vorhandensein der Konstante LOG_DIR notwendig ist, damit es funktioniert? Und wären Sie in der Lage, eine zweite Instanz zu erstellen, die an einen anderen Ort schreibt? Sicherlich nicht.

Lassen Sie uns die Klasse reparieren:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Die Klasse ist jetzt viel übersichtlicher, besser konfigurierbar und daher nützlicher.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Aber das ist mir egal! .[#toc-but-i-don-t-care]
-----------------------------------------------

*"Wenn ich ein Artikel-Objekt erstelle und save() aufrufe, möchte ich mich nicht mit der Datenbank befassen, ich möchte nur, dass es in der Datenbank gespeichert wird, die ich in der Konfiguration eingestellt habe. "*

*"Wenn ich Logger verwende, möchte ich nur, dass die Nachricht geschrieben wird, und ich möchte mich nicht darum kümmern, wo. Es sollen die globalen Einstellungen verwendet werden. "*

Dies sind korrekte Kommentare.

Nehmen wir als Beispiel eine Klasse, die Newsletter verschickt und protokolliert, wie das gelaufen ist:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Die neue `Logger`, die nicht mehr die Konstante `LOG_DIR` verwendet, verlangt jedoch den Pfad zur Datei im Konstruktor. Wie ist das Problem zu lösen? Der Klasse `NewsletterDistributor` ist es egal, wohin die Nachrichten geschrieben werden, sie will sie nur schreiben.

Die Lösung ist wieder [Regel Nr. 1: Verwenden Sie Parameter |#rule #1: use parameters]: Übergeben Sie alle Daten, die die Klasse benötigt.

Wir übergeben also den Pfad zum Protokoll an den Konstruktor, den wir dann beim Erstellen des `Logger` -Objekts verwenden? Nein. Denn der Pfad ist nicht die Daten, die die Klasse `NewsletterDistributor` benötigt; das ist, was `Logger` benötigt. Die Klasse braucht den Logger selbst. Und den werden wir übergeben:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Aus den Signaturen der Klasse `NewsletterDistributor` ist ersichtlich, dass die Protokollierung Teil ihrer Funktionalität ist. Und Sie haben die Möglichkeit, den Logger durch einen anderen zu ersetzen.

Während wir uns in der gesamten Anwendung mit einer einzigen Instanz des Loggers begnügen und sie überall dort übergeben können, wo etwas protokolliert wird, ist das im Fall der Klasse `Article` anders. Wir werden mehrere Instanzen davon erstellen wollen. Wie geht man mit der Datenbankabhängigkeit im Konstruktor um? Nehmen wir als Beispiel einen Controller, der nach dem Absenden eines Formulars einen Artikel in der Datenbank speichern soll:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Eine mögliche Lösung wird vorgeschlagen: Übergeben Sie das Datenbankobjekt im Konstruktor an die `UserController` und verwenden Sie `$article = new Article($this->db)`.

Wie im vorherigen Fall ist dies nicht die richtige Vorgehensweise. Die Datenbank ist keine `UserController` -Abhängigkeit, sondern eine `Article` -Abhängigkeit. Außerdem müssen wir in dem Moment, in dem der Konstruktor der Klasse `Article` irgendwie geändert wird (ein neuer Parameter wird hinzugefügt), den Code an allen Stellen ändern, an denen Instanzen erstellt werden.

Die Lösung sind Fabriken.


Regel #2: Fabriken verwenden .[#toc-rule-2-use-factories]
---------------------------------------------------------

Indem wir die versteckten Bindungen entfernen und alle Daten als Argumente übergeben, erhalten wir flexiblere und besser konfigurierbare Klassen. Deshalb brauchen wir noch etwas, um diese flexibleren Klassen zu erstellen und zu konfigurieren. Wir nennen das eine Fabrik.

Als Faustregel gilt: Wenn eine Klasse Abhängigkeiten hat, überlassen Sie die Erstellung ihrer Instanzen der Fabrik.

Fabriken sind ein intelligenter Ersatz für den `new` Operator in der Welt der Dependency Injection.


Fabrik .[#toc-factory]
----------------------

Eine Fabrik ist eine Klasse, die Objekte erstellt und konfiguriert. Die Fabrik, die `Article` erzeugt, wird `ArticleFactory` genannt, und ihre Verwendung im Controller sieht folgendermaßen aus:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// Lassen Sie die Fabrik ein Objekt erstellen
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Eine Factory-Implementierung könnte wie folgt aussehen:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Wenn sich nun die Signatur des Klassenkonstruktors `Article` ändert, ist der einzige Teil des Codes, der darauf reagieren muss, die Fabrik `ArticleFactory`. Jeder andere Code, der mit `Article` Objekten arbeitet, wie z. B. `UserController`, ist davon nicht betroffen.

Sie werden sich jetzt vielleicht an die Stirn tippen und sich fragen, wie wir uns eigentlich geholfen haben. Die Menge des Codes ist gewachsen und wurde vom Controller in eine separate Klasse verlagert. Nette DI hat jedoch ein verstecktes Ass im Ärmel. Es versteht das Konzept der Factories und kann sogar [einen solchen Dienst für uns schreiben |factory]. Anstelle der Klasse `ArticleFactory` könnten wir also einfach eine Schnittstelle erstellen:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Aber das ist jetzt ein bisschen zu weit hergeholt, dazu kommen wir gleich noch.


Zusammenfassung .[#toc-summary]
-------------------------------

Zu Beginn dieses Kapitels haben wir versprochen, ein einfaches Prinzip für die Gestaltung von Anwendungen zu demonstrieren. Obwohl das Prinzip selbst einfach ist (geben Sie den Klassen die Daten, die sie benötigen), erfordert das, was daraus folgt, mehr Überlegung. Lesen Sie sich dieses Kapitel ruhig mehrmals durch.

Programmierer, die alte Gewohnheiten über Bord geworfen haben und begonnen haben, Dependency Injection zu verwenden, betrachten dies durchweg als einen entscheidenden Moment in ihrem Berufsleben. Es hat ihnen eine Welt klarer und nachhaltiger Anwendungen eröffnet.

Jetzt werden wir sehen, was [Dependency Injection Container |container] ist.
