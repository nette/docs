Konfiguracja uprawnień dostępu
******************************

.[perex]
Przegląd opcji konfiguracyjnych dla Nette Security.

Jeśli nie używasz całego frameworka, a jedynie tej biblioteki, przeczytaj [jak załadować konfigurację |bootstrap:].

Możesz zdefiniować listę użytkowników w konfiguracji, aby utworzyć [prosty authenticator |authentication] (`Nette\Security\SimpleAuthenticator`). Ponieważ konfiguracja wymienia hasła w czytelnej formie, rozwiązanie to nadaje się jedynie do celów testowych.

```neon
security:
	# zobrazit panel uživatele v Tracy Bar?
	debugger: ...  # (bool) výchozí je true

	users:
		# jméno: heslo
		frantisek: tajneheslo

		# jméno, heslo, role a další data dostupná v identitě
		dobrota:
			password: tajneheslo
			roles: [admin]
			data: ...

```

Ponadto można zdefiniować role i zasoby, aby stworzyć podstawę dla [autoryzatora |authorization] (`Nette\Security\Permission`):

```neon
security:
	roles:
		guest:
		registered: [guest]  # registered dědí od guest
		admin: [registered]  # a od něj dědí admin

	resources:
		article:
		comment: [article]   # zdroj dědí od article
		poll:
```


Repozytorium .[#toc-uloziste]
-----------------------------

Można skonfigurować sposób przechowywania informacji o zalogowanym użytkowniku:

```neon
security:
	authentication:
		# po jak dlouhé době nečinnosti bude uživatel odhlášen
		expiration: 30 minutes        # (string) výchozí je nenastaveno

		# kam ukládat informace o přihlášeném uživateli
		storage: session              # (session|cookie) výchozí je session
```

Jeśli jako miejsce przechowywania wybierzesz `cookie`, możesz również skonfigurować następujące opcje:

```neon
security:
	authentication:
		# jméno cookie
		cookieName: userId            # (string) výchozí je userid

		# domény, které přijímají cookie
		cookieDomain: 'example.com'  # (string|domain)

		# omezení při přístupu z jiné domény
		cookieSamesite: None         # (Strict|Lax|None) výchozí je Lax
```
