Funções auxiliares
******************

.[perex]
[api:Nette\Utils\Helpers] é uma classe estática com funções úteis.


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos pressupõem a criação de um alias:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Executa o callback e retorna a saída capturada como uma string.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Limita um valor ao intervalo inclusivo fornecido de min e max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Compara dois valores da mesma forma que o PHP faz. Distingue os operadores `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
A função é útil em situações onde o operador é variável.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Converte `false` para `null`, outros valores permanecem inalterados.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Retorna o último erro no PHP ou uma string vazia se nenhum erro ocorreu. Ao contrário de `error_get_last()`, não é afetado pela diretiva PHP `html_errors` e sempre retorna texto, não HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

A partir das opções fornecidas `$possibilities`, procura a string que é mais semelhante a `$value`, mas não idêntica. Suporta apenas codificação de 8 bits.

É útil quando uma determinada opção não é válida e queremos sugerir uma semelhante ao usuário (mas diferente, por isso a string idêntica é ignorada). Desta forma, o Nette cria as mensagens `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', não 'baz'
```
