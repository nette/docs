Yemek Tarifleri
***************


İçerik Güvenliği Politikası .[#toc-content-security-policy]
===========================================================

Siteniz İçerik Güvenliği İlkesi kullanıyorsa, şunları eklemeniz gerekir `'nonce-<value>'` ve Tracy'nin düzgün çalışması için `'strict-dynamic'` adresinden `script-src` adresine gidin. Bazı 3. eklentiler ek yönergeler gerektirebilir.
Nonce, `style-src` yönergesinde desteklenmez, bu yönergeyi kullanırsanız `'unsafe-inline'` eklemeniz gerekir, ancak üretim modunda bundan kaçınılmalıdır.

 [Nette Framework |nette:configuring] için yapılandırma örneği:

```neon
http:
	csp:
		script-src: [nonce, strict-dynamic]
```

Saf PHP'de örnek:

```php
$nonce = base64_encode(random_bytes(20));
header("Content-Security-Policy: script-src 'nonce-$nonce' 'strict-dynamic';");
```


Daha Hızlı Yükleme .[#toc-faster-loading]
=========================================

Temel entegrasyon basittir, ancak web sayfasında yavaş engelleyen komut dosyalarınız varsa, Tracy'nin yüklenmesini yavaşlatabilirler.
Çözüm yerleştirmektir `<?php Tracy\Debugger::renderLoader() ?>` önce şablonunuza
herhangi bir senaryo:

```latte
<!DOCTYPE html>
<html>
<head>
	<title>...<title>
	<?php Tracy\Debugger::renderLoader() ?>
	<link rel="stylesheet" href="assets/style.css">
	<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
</head>
```


AJAX ve Yönlendirilmiş İstekler .[#toc-ajax-and-redirected-requests]
====================================================================

Tracy, AJAX istekleri ve yönlendirmeleri için Hata Ayıklama çubuğu ve Mavi Ekranlar görüntüleyebilir. Tracy kendi oturumlarını oluşturur, verileri kendi geçici dosyalarında saklar ve bir `tracy-session` çerezi kullanır.

Tracy, Tracy açılmadan önce başlatılan yerel bir PHP oturumu kullanacak şekilde de yapılandırılabilir:

```php
session_start();
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();
```

Bir oturum başlatmanın daha karmaşık bir başlatma gerektirmesi durumunda, Tracy'yi hemen başlatabilir (böylece oluşan hataları işleyebilir) ve ardından oturum işleyicisini başlatabilirsiniz
ve son olarak Tracy'ye `dispatch()` işlevini kullanarak oturumun kullanıma hazır olduğunu bildirin:

```php
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();

// followed by session initialization
// and start the session
session_start();

Debugger::dispatch();
```

 `setSessionStorage()` işlevi 2.9 sürümünden beri mevcuttur, bundan önce Tracy her zaman yerel PHP oturumunu kullanmıştır.


Özel Yıkayıcı .[#toc-custom-scrubber]
=====================================

Scrubber, parolalar veya kimlik bilgileri gibi hassas verilerin dökümlerden sızmasını önleyen bir filtredir. Filtre, dökülen dizi veya nesnenin her öğesi için çağrılır ve değer hassas ise `true` döndürür. Bu durumda, değer yerine `*****` yazdırılır.

```php
// avoids dumping key values and properties such as `password`,
// `password_repeat`, `check_password`, `DATABASE_PASSWORD`, etc.
$scrubber = function(string $key, $value, ?string $class): bool
{
	return preg_match('#password#i', $key) && $value !== null;
};

// we use it for all dumps inside BlueScreen
Tracy\Debugger::getBlueScreen()->scrubber = $scrubber;
```


Özel Kaydedici .[#toc-custom-logger]
====================================

Hataları, yakalanmamış istisnaları günlüğe kaydetmek ve `Tracy\Debugger::log()` tarafından çağrılmak üzere özel bir logger oluşturabiliriz. Logger, [api:Tracy\ILogger] arayüzünü uygular.

```php
use Tracy\ILogger;

class SlackLogger implements ILogger
{
	public function log($value, $priority = ILogger::INFO)
	{
		// sends a request to Slack
	}
}
```

Ve sonra onu etkinleştiririz:

```php
Tracy\Debugger::setLogger(new SlackLogger);
```

Eğer Nette Framework'ün tamamını kullanırsak, bunu NEON yapılandırma dosyasında ayarlayabiliriz:

```neon
services:
	tracy.logger: SlackLogger
```


nginx .[#toc-nginx]
===================

Eğer Tracy nginx üzerinde çalışmıyorsa, muhtemelen yanlış yapılandırılmıştır. Eğer şöyle bir şey varsa

```nginx
try_files $uri $uri/ /index.php;
```

olarak değiştirin

```nginx
try_files $uri $uri/ /index.php$is_args$args;
```
