Generátor PHP kódu
******************

.[perex]
Generujte PHP kód, třídy, jmenné prostory apod. pomocí jednoduchého API.

Instalace:

```shell
composer require nette/php-generator
```

Třídy
-----

Začněme rovnou příkladem tvorby třídy pomocí [ClassType |api:Nette\PhpGenerator\ClassType]:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addTrait(Nette\SmartObject::class)
	->addComment("Popis třídy.\nDruhý řádek\n")
	->addComment('@property-read Nette\Forms\Form $form');

// kód jednoduše vygenerujete přetypováním na řetězec nebo použitím echo:
echo $class;

// nebou použijte printer:
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Vrátí následující výsledek:

```php
/**
 * Popis třídy
 * Druhý řádek
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
	use Nette\SmartObject;
}
```

Můžeme přidat konstanty ([Constant |api:Nette\PhpGenerator\Constant]) a proměnné ([Property |api:Nette\PhpGenerator\Property]):

```php
$class->addConstant('ID', 123);

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // nebo setVisibility('private')
	->setStatic()
	->addComment('@var int[]');
```

Vygeneruje:

```php
const ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];
```

A můžeme přidat metody ([Method |api:Nette\PhpGenerator\Method]) s parametry ([Parameter |api:Nette\PhpGenerator\Parameter]):

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->addComment('@return int')
	->setFinal()
	->setProtected()
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
		->setReference() // &$items = []
		->setType('array'); // array &$items = []
```

Výsledkem je:

```php
/**
 * Count it.
 * @return int
 */
final protected function count(array &$items = [])
{
	return count($items ?: $this->items);
}
```

Pokud vlastnost, konstanta, metoda nebo parametr již existuje, bude přepsán.

Členy třídy lze odebrat pomocí `removeProperty()`, `removeConstant()`, `removeMethod()` nebo `removeParameter()`.

PHP Generator podporuje všechny nové vlastnosti PHP 7.3 a 7.4:

```php
use Nette\PhpGenerator\Type;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addConstant('ID', 123)
	->setPrivate(); // viditelnost konstant

$class->addProperty('items')
	->setType('array') // nebo setType(Type::ARRAY)
	->setNullable()
	->setInitialized();

$method = $class->addMethod('getValue')
	->setReturnType('int') // návratové typy u metod
	->setReturnNullable() // nullable typy
	->setBody('return count($this->items);');

$method->addParameter('id')
		->setType('int') // scalar type hint
		->setNullable(); // nullable type hint

echo $class;
```

Výsledek:

```php
class Demo
{
	private const ID = 123;

	public ?array $items = null;

	public function getValue(?int $id): ?int
	{
		return count($this->items);
	}
}
```

Do třídy můžete také přidat existující objekty `Method`, `Property` nebo `Constant`:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

Můžete také klonovat stávající metody, vlastnosti a konstanty pod jiným názvem pomocí `cloneWithName()`:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```

Tabulátory versus mezery
------------------------

Vygenerovaný kód používá tabulátory pro odsazení. Pokud chcete mít výstup kompatibilní s PSR-2 nebo PSR-12, použijte `PsrPrinter`:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class); // odsazení 4 mezerami
```

Může jej použít pro funkce, closury, jmenné prostory apod.


Literály
--------

Jako výchozí hodnoty vlastností nebo parametrů lze předat jakýkolv PHP kód přes `Literal`:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Výsledek:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

Interface nebo traita
---------------------

```php
$class = new Nette\PhpGenerator\ClassType('DemoInterface');
$class->setInterface();
// or $class->setTrait();
```

Řešení trait a viditelnost
--------------------------

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject', ['sayHello as protected']);
echo $class;
```

Výsledek:

```php
class Demo
{
	use SmartObject {
		sayHello as protected;
	}
}
```

Anonymní třídy
--------------

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Výsledek:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```

Globální funkce
---------------

Kód funkce generuje třída [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction]:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// nebo použijte PsrPrinter pro výstup kompatibilní s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Výsledek:

```php
function foo($a, $b)
{
	return $a + $b;
}
```

Anonymní funkce
---------------

Kód anonymní funkce generuje třída [Closure |api:Nette\PhpGenerator\Closure]:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// nebo použijte PsrPrinter pro výstup kompatibilní s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Výsledek:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```

Zkrácené arrow funkce
---------------------

Můžete také vypsat zkrácenou anonymní funkci pomocí printeru:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');

// nebo použijte PsrPrinter pro výstup kompatibilní s PSR-2 / PSR-12
echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Výsledek:

```php
fn ($a, $b) => $a + $b;
```

Generování kódu metod a funkcí
------------------------------

Můžete použít speciální zástupné symboly pro snadné vytvoření kódu metod nebo funkcí.

Jednoduché zástupné symboly:

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return strlen(?, ?);', [$str, $num]);
echo $function;
```

Výsledek

```php
function foo()
{
	return strlen('any string', 3);
}
```

Zástupný symbol variadic:

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Výsledek:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

Zástupný symbol se escapuje pomocí lomítka:

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Výsledek:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```

Jmenný prostor
--------------

Třídy, vlastnosti a rozhraní (dále jen třídy) lze seskupit do jmenných prostorů reprezentovaných třídou ([PhpNamespace |api:Nette\PhpGenerator\PhpNamespace]):

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// nebo
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Pokud třída již existuje, bude přepsána.

Můžete definovat klauzule use:

```php
$namespace->addUse(Http\Request::class); // use Http\Request;
$namespace->addUse(Http\Request::class, 'HttpReq'); // use Http\Request as HttpReq;
```

**DŮLEŽITÁ POZNÁMKA:** když je třída součástí jmenného prostoru, je vykreslena mírně odlišně: všechny typy (např. typehinty, návratové typy, název rodičovské třídy,
implementovaná rozhraní a použité vlastnosti) jsou automaticky *překládány* (pokud to nevypnete, viz níže).
To znamená, že musíte v definicích **používat úplné názvy tříd** a ty budou nahrazeny
za aliasy (podle klauzulí use) nebo za plně kvalifikovaná jména ve výsledném kódu:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // bude přeložen na A
	->addTrait('Bar\AliasedClass'); // bude přeložen na AliasedClass

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->unresolveName('Foo\D')); // v komentářích překládáme manuálně
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // bude přeložen na \Bar\OtherClass

echo $namespace;

// nebo použijte PsrPrinter pro výstup kompatibilní s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Výsledek:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

Automatické překládání lze vypnout tímto způsobem:

```php
$printer = new Nette\PhpGenerator\Printer; // nebo PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```

PHP soubory
-----------

Soubory PHP mohou obsahovat více tříd, jmenných prostorů a komentářů:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('This file is auto-generated.');
$file->setStrictTypes(); // přidá declare(strict_types=1)

$namespace = $file->addNamespace('Foo');
$class = $namespace->addClass('A');
$class->addMethod('hello');

echo $file;

// nebo použijte PsrPrinter pro výstup kompatibilní s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Výsledek:

```php
<?php

/**
 * This file is auto-generated.
 */

declare(strict_types=1);

namespace Foo;

class A
{
	public function hello()
	{
	}
}
```

Generování podle vzorů
----------------------

Dalším častým případem použití je vytvoření třídy či metody podle existujících:

```php
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

$function = Nette\PhpGenerator\GlobalFunction::from('trim');

$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {}
);
```

Těla metod jsou ve výchozím stavu prázdná. Pokud je chcete také načíst, použijte tento způsob
(vyžaduje instalaci balíčku `nikic/php-parser` a PhpGenerator verze 3.4):

```php
$class = Nette\PhpGenerator\ClassType::withBodiesFrom(MyClass::class);

$function = Nette\PhpGenerator\GlobalFunction::withBodyFrom('dump');
```

Výpis proměnných
----------------

Třída `Dumper` převede proměnnou do parsovatelného PHP kódu. Poskytuje lepší funkčnost a přehlednější výstup, než standardní funkce `var_export()`.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // vypíše ['a', 'b', 123]
```

{{composer: nette/php-generator}}
