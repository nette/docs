Refleksja w PHP
***************

.[perex]
[api:Nette\Utils\Reflection] jest klasą statyczną zawierającą przydatne funkcje do refleksji w PHP. Jego celem jest naprawienie niedociągnięć klas natywnych i ujednolicenie zachowania w różnych wersjach PHP.


Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Określenie, czy refleksja ma dostęp do komentarzy PHPdoc. Komentarze mogą być niedostępne z powodu pamięci podręcznej opcode, zobacz na przykład dyrektywę [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Rozwija nazwę klasy `$name` do jej pełnej nazwy w kontekście klasy `$context`, czyli w kontekście jej przestrzeni nazw i zdefiniowanych aliasów. Tak więc w rzeczywistości mówi, jak parser PHP `$name` zrozumiałby , gdyby był napisany w ciele klasy `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Zwraca odbicie metody, które zawiera deklarację metody `$method`. Zazwyczaj każda metoda jest swoją własną deklaracją, ale ciało metody może znajdować się w cechach i pod inną nazwą.

Ponieważ PHP nie dostarcza wystarczających informacji, za pomocą których można określić rzeczywistą deklarację, Nette używa własnej heurystyki, która **powinna** być wiarygodna.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Zwraca odzwierciedlenie klasy lub cechy, która zawiera deklarację właściwości `$prop`. Właściwość może być w rzeczywistości zadeklarowana w cechach.

Ponieważ PHP nie dostarcza wystarczających informacji, aby określić rzeczywistą deklarację, Nette używa własnej heurystyki, która jest **nie** wiarygodna.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Określ, czy `$type` jest wbudowanym typem PHP. W przeciwnym razie jest to nazwa klasy.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Użyj funkcji [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Konwertuje odbicie na zrozumiały dla człowieka ciąg znaków.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
