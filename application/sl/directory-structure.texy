Struktura mape aplikacije
*************************

<div class=perex>

Kako zasnovati pregledno in razširljivo strukturo map za projekte v Nette Framework? Pokazali si bomo preverjene prakse, ki vam bodo pomagale pri organizaciji kode. Izvedeli boste:

- kako **logično razčleniti** aplikacijo v mape
- kako strukturo zasnovati tako, da **dobro skalira** z rastjo projekta
- kakšne so **možne alternative** in njihove prednosti ali slabosti

</div>


Pomembno je omeniti, da Nette Framework sam po sebi ne vztraja pri nobeni konkretni strukturi. Zasnovan je tako, da se ga da enostavno prilagoditi kakršnimkoli potrebam in preferencam.


Osnovna struktura projekta
==========================

Čeprav Nette Framework ne narekuje nobene fiksne strukture map, obstaja preverjena privzeta ureditev v obliki [Web Project|https://github.com/nette/web-project]:

/--pre
<b>web-project/</b>
├── <b>app/</b>              ← mapa z aplikacijo
├── <b>assets/</b>           ← datoteke SCSS, JS, slike..., alternativno resources/
├── <b>bin/</b>              ← skripti za ukazno vrstico
├── <b>config/</b>           ← konfiguracija
├── <b>log/</b>              ← zabeležene napake
├── <b>temp/</b>             ← začasne datoteke, predpomnilnik
├── <b>tests/</b>            ← testi
├── <b>vendor/</b>           ← knjižnice, nameščene s Composerjem
└── <b>www/</b>              ← javna mapa (document-root)
\--

To strukturo lahko poljubno urejate glede na svoje potrebe - mape preimenujete ali premaknete. Nato je dovolj le urediti relativne poti do map v datoteki `Bootstrap.php` in po potrebi `composer.json`. Nič več ni potrebno, nobene zapletene rekonfiguracije, nobenih sprememb konstant. Nette razpolaga s pametnim samodejnim zaznavanjem in samodejno prepozna lokacijo aplikacije, vključno z njeno osnovno URL.


Principi organizacije kode
==========================

Ko prvič raziskujete nov projekt, bi se morali v njem hitro znajti. Predstavljajte si, da odprete mapo `app/Model/` in vidite to strukturo:

/--pre
<b>app/Model/</b>
├── <b>Services/</b>
├── <b>Repositories/</b>
└── <b>Entities/</b>
\--

Iz nje razberete le to, da projekt uporablja neke storitve, repozitorije in entitete. O dejanskem namenu aplikacije ne izveste ničesar.

Poglejmo si drugačen pristop - **organizacijo po domenah**:

/--pre
<b>app/Model/</b>
├── <b>Cart/</b>
├── <b>Payment/</b>
├── <b>Order/</b>
└── <b>Product/</b>
\--

Tukaj je drugače - na prvi pogled je jasno, da gre za spletno trgovino. Že sama imena map razkrivajo, kaj aplikacija zna - dela s plačili, naročili in izdelki.

Prvi pristop (organizacija po tipu razredov) v praksi prinaša vrsto težav: koda, ki logično sodi skupaj, je razdrobljena v različne mape in morate med njimi preskakovati. Zato bomo organizirali po domenah.


Imenski prostori
----------------

Običajno je, da struktura map ustreza imenskim prostorom v aplikaciji. To pomeni, da fizična lokacija datotek ustreza njihovemu imenskemu prostoru. Na primer, razred, ki se nahaja v `app/Model/Product/ProductRepository.php`, bi moral imeti imenski prostor `App\Model\Product`. Ta princip pomaga pri orientaciji v kodi in poenostavlja samodejno nalaganje.


Ednina vs množina v imenih
--------------------------

Opazite, da pri glavnih mapah aplikacije uporabljamo ednino: `app`, `config`, `log`, `temp`, `www`. Enako tudi znotraj aplikacije: `Model`, `Core`, `Presentation`. To je zato, ker vsaka od njih predstavlja en celovit koncept.

Podobno na primer `app/Model/Product` predstavlja vse v zvezi z izdelki. Ne bomo ga poimenovali `Products`, ker ne gre za mapo, polno izdelkov (to bi bile tam datoteke `nokia.php`, `samsung.php`). To je imenski prostor, ki vsebuje razrede za delo z izdelki - `ProductRepository.php`, `ProductService.php`.

Mapa `app/Tasks` je v množini zato, ker vsebuje nabor samostojnih izvedljivih skriptov - `CleanupTask.php`, `ImportTask.php`. Vsak od njih je samostojna enota.

Za doslednost priporočamo uporabo:
- Ednine za imenski prostor, ki predstavlja funkcionalno celoto (čeprav dela z več entitetami)
- Množine za zbirke samostojnih enot
- V primeru negotovosti ali če o tem ne želite razmišljati, izberite ednino


Javna mapa `www/`
=================

Ta mapa je edina dostopna s spleta (t.i. document-root). Pogosto se lahko srečate tudi z imenom `public/` namesto `www/` - to je le vprašanje konvencije in na funkcionalnost rastlinarja nima vpliva. Mapa vsebuje:
- [Vstopno točko |bootstrap#index.php] aplikacije `index.php`
- Datoteko `.htaccess` s pravili za mod_rewrite (pri Apache)
- Statične datoteke (CSS, JavaScript, slike)
- Naložene datoteke

Za pravilno varnost aplikacije je ključno imeti pravilno [konfiguriran document-root |nette:troubleshooting#Jak změnit či ostranit z URL adresář www].

.[note]
Nikoli ne postavljajte v to mapo mape `node_modules/` - vsebuje na tisoče datotek, ki so lahko izvedljive in ne bi smele biti javno dostopne.


Aplikacijska mapa `app/`
========================

To je glavna mapa z aplikacijsko kodo. Osnovna struktura:

/--pre
<b>app/</b>
├── <b>Core/</b>               ← infrastrukturne zadeve
├── <b>Model/</b>              ← poslovna logika
├── <b>Presentation/</b>       ← presenterji in predloge
├── <b>Tasks/</b>              ← ukazni skripti
└── <b>Bootstrap.php</b>       ← zagonski razred aplikacije
\--

`Bootstrap.php` je [zagonski razred aplikacije|bootstrap], ki inicializira okolje, nalaga konfiguracijo in ustvarja DI vsebnik.

Poglejmo si zdaj posamezne podmape podrobneje.


Presenterji in predloge
=======================

Predstavitveni del aplikacije imamo v mapi `app/Presentation`. Alternativa je kratko `app/UI`. To je mesto za vse presenterje, njihove predloge in morebitne pomožne razrede.

To plast organiziramo po domenah. V kompleksnem projektu, ki združuje spletno trgovino, blog in API, bi struktura izgledala takole:

/--pre
<b>app/Presentation/</b>
├── <b>Shop/</b>              ← spletna trgovina frontend
│   ├── <b>Product/</b>
│   ├── <b>Cart/</b>
│   └── <b>Order/</b>
├── <b>Blog/</b>              ← blog
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← administracija
│   ├── <b>Dashboard/</b>
│   └── <b>Products/</b>
└── <b>Api/</b>               ← API končne točke
	└── <b>V1/</b>
\--

Nasprotno pa bi pri preprostem blogu uporabili členitev:

/--pre
<b>app/Presentation/</b>
├── <b>Front/</b>             ← frontend spletnega mesta
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← administracija
│   ├── <b>Dashboard/</b>
│   └── <b>Posts/</b>
├── <b>Error/</b>
└── <b>Export/</b>            ← RSS, sitemaps itd.
\--

Mape kot `Home/` ali `Dashboard/` vsebujejo presenterje in predloge. Mape kot `Front/`, `Admin/` ali `Api/` imenujemo **moduli**. Tehnično gre za običajne mape, ki služijo za logično členitev aplikacije.

Vsaka mapa s presenterjem vsebuje enako poimenovan presenter in njegove predloge. Na primer, mapa `Dashboard/` vsebuje:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presenter
└── <b>default.latte</b>              ← predloga
\--

Ta struktura map se odraža v imenskih prostorih razredov. Na primer, `DashboardPresenter` se nahaja v imenskem prostoru `App\Presentation\Admin\Dashboard` (glej [#mapování presenterů]):

```php
namespace App\Presentation\Admin\Dashboard;

class DashboardPresenter extends Nette\Application\UI\Presenter
{
	// ...
}
```

Na presenter `Dashboard` znotraj modula `Admin` se v aplikaciji sklicujemo s pomočjo dvopične notacije kot na `Admin:Dashboard`. Na njegovo akcijo `default` potem kot na `Admin:Dashboard:default`. V primeru ugnezdenih modulov uporabljamo več dvopičij, na primer `Shop:Order:Detail:default`.


Fleksibilen razvoj strukture
----------------------------

Ena od velikih prednosti te strukture je, kako elegantno se prilagaja rastočim potrebam projekta. Kot primer si vzemimo del, ki generira XML vire. Na začetku imamo preprosto obliko:

/--pre
<b>Export/</b>
├── <b>ExportPresenter.php</b>   ← en presenter za vse izvoze
├── <b>sitemap.latte</b>         ← predloga za sitemap
└── <b>feed.latte</b>            ← predloga za RSS vir
\--

Sčasoma se dodajo nove vrste virov in zanje potrebujemo več logike... Noben problem! Mapa `Export/` preprosto postane modul:

/--pre
<b>Export/</b>
├── <b>Sitemap/</b>
│   ├── <b>SitemapPresenter.php</b>
│   └── <b>sitemap.latte</b>
└── <b>Feed/</b>
	├── <b>FeedPresenter.php</b>
	├── <b>zbozi.latte</b>         ← vir za Zboží.cz
	└── <b>heureka.latte</b>       ← vir za Heureka.cz
\--

Ta transformacija je popolnoma gladka - dovolj je ustvariti nove podmape, razdeliti kodo vanje in posodobiti povezave (npr. iz `Export:feed` na `Export:Feed:zbozi`). Zahvaljujoč temu lahko strukturo postopoma širimo glede na potrebe, raven gnezdenja ni nikakor omejena.

Če na primer v administraciji imate veliko presenterjev, ki se nanašajo na upravljanje naročil, kot so `OrderDetail`, `OrderEdit`, `OrderDispatch` itd., lahko za boljšo organiziranost na tem mestu ustvarite modul (mapo) `Order`, v katerem bodo (mape za) presenterje `Detail`, `Edit`, `Dispatch` in drugi.


Lokacija predlog
----------------

V prejšnjih primerih smo videli, da so predloge nameščene neposredno v mapi s presenterjem:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presenter
├── <b>DashboardTemplate.php</b>      ← izbirni razred za predlogo
└── <b>default.latte</b>              ← predloga
\--

Ta lokacija se v praksi izkaže za najudobnejšo - vse povezane datoteke imate takoj pri roki.

Alternativno lahko predloge namestite v podmapo `templates/`. Nette podpira obe varianti. Celo predloge lahko namestite tudi popolnoma izven mape `Presentation/`. Vse o možnostih lokacije predlog najdete v poglavju [Iskanje predlog|templates#Hledání šablon].


Pomožni razredi in komponente
-----------------------------

K presenterjem in predlogam pogosto spadajo tudi druge pomožne datoteke. Namestimo jih logično glede na njihovo področje delovanja:

1. **Neposredno pri presenterju** v primeru specifičnih komponent za dani presenter:

/--pre
<b>Product/</b>
├── <b>ProductPresenter.php</b>
├── <b>ProductGrid.php</b>        ← komponenta za izpis izdelkov
└── <b>FilterForm.php</b>         ← obrazec za filtriranje
\--

2. **Za modul** - priporočamo uporabo mape `Accessory`, ki se namesti pregledno takoj na začetku abecede:

/--pre
<b>Front/</b>
├── <b>Accessory/</b>
│   ├── <b>NavbarControl.php</b>    ← komponente za frontend
│   └── <b>TemplateFilters.php</b>
├── <b>Product/</b>
└── <b>Cart/</b>
\--

3. **Za celotno aplikacijo** - v `Presentation/Accessory/`:
/--pre
<b>app/Presentation/</b>
├── <b>Accessory/</b>
│   ├── <b>LatteExtension.php</b>
│   └── <b>TemplateFilters.php</b>
├── <b>Front/</b>
└── <b>Admin/</b>
\--

Ali pa lahko pomožne razrede kot `LatteExtension.php` ali `TemplateFilters.php` namestite v infrastrukturno mapo `app/Core/Latte/`. In komponente v `app/Components`. Izbira je odvisna od navad ekipe.


Model - srce aplikacije
=======================

Model vsebuje vso poslovno logiko aplikacije. Za njegovo organizacijo velja spet pravilo - strukturiramo po domenah:

/--pre
<b>app/Model/</b>
├── <b>Payment/</b>                   ← vse v zvezi s plačili
│   ├── <b>PaymentFacade.php</b>      ← glavna vstopna točka
│   ├── <b>PaymentRepository.php</b>
│   ├── <b>Payment.php</b>            ← entiteta
├── <b>Order/</b>                     ← vse v zvezi z naročili
│   ├── <b>OrderFacade.php</b>
│   ├── <b>OrderRepository.php</b>
│   ├── <b>Order.php</b>
└── <b>Shipping/</b>                  ← vse v zvezi z dostavo
\--

V modelu se tipično srečate s temi tipi razredov:

**Fasade**: predstavljajo glavno vstopno točko v konkretno domeno v aplikaciji. Delujejo kot orkestrator, ki koordinira sodelovanje med različnimi storitvami za namen implementacije celotnih primerov uporabe (kot "ustvari naročilo" ali "obdelaj plačilo"). Pod svojo orkestracijsko plastjo fasada skriva implementacijske podrobnosti pred preostankom aplikacije, s čimer zagotavlja čist vmesnik za delo z dano domeno.

```php
class OrderFacade
{
	public function createOrder(Cart $cart): Order
	{
		// validacija
		// ustvarjanje naročila
		// pošiljanje e-pošte
		// zapisovanje v statistiko
	}
}
```

**Storitve**: osredotočajo se na specifično poslovno operacijo znotraj domene. Za razliko od fasade, ki orkestrira celotne primere uporabe, storitev implementira konkretno poslovno logiko (kot izračuni cen ali obdelava plačil). Storitve so tipično brez stanja in jih lahko uporabljajo bodisi fasade kot gradniki za kompleksnejše operacije ali neposredno drugi deli aplikacije za enostavnejše naloge.

```php
class PricingService
{
	public function calculateTotal(Order $order): Money
	{
		// izračun cene
	}
}
```

**Repozitoriji**: zagotavljajo vso komunikacijo s podatkovnim skladiščem, tipično podatkovno bazo. Njegova naloga je nalaganje in shranjevanje entitet ter implementacija metod za njihovo iskanje. Repozitorij loči preostanek aplikacije od implementacijskih podrobnosti podatkovne baze in zagotavlja objektno usmerjen vmesnik za delo s podatki.

```php
class OrderRepository
{
	public function find(int $id): ?Order
	{
	}

	public function findByCustomer(int $customerId): array
	{
	}
}
```

**Entitete**: objekti, ki predstavljajo glavne poslovne koncepte v aplikaciji, ki imajo svojo identiteto in se spreminjajo s časom. Tipično gre za razrede, preslikane na tabele podatkovne baze s pomočjo ORM (kot Nette Database Explorer ali Doctrine). Entitete lahko vsebujejo poslovna pravila, ki se nanašajo na njihove podatke, in validacijsko logiko.

```php
// Entiteta, preslikana na tabelo podatkovne baze orders
class Order extends Nette\Database\Table\ActiveRow
{
	public function addItem(Product $product, int $quantity): void
	{
		$this->related('order_items')->insert([
			'product_id' => $product->id,
			'quantity' => $quantity,
			'unit_price' => $product->price,
		]);
	}
}
```

**Vrednostni objekti**: nespremenljivi objekti, ki predstavljajo vrednosti brez lastne identitete - na primer denarni znesek ali e-poštni naslov. Dve instanci vrednostnega objekta z enakimi vrednostmi se štejeta za identični.


Infrastrukturna koda
====================

Mapa `Core/` (ali tudi `Infrastructure/`) je dom za tehnično osnovo aplikacije. Infrastrukturna koda tipično vključuje:

/--pre
<b>app/Core/</b>
├── <b>Router/</b>               ← usmerjanje in upravljanje URL-jev
│   └── <b>RouterFactory.php</b>
├── <b>Security/</b>             ← avtentikacija in avtorizacija
│   ├── <b>Authenticator.php</b>
│   └── <b>Authorizator.php</b>
├── <b>Logging/</b>              ← dnevniško beleženje in nadzor
│   ├── <b>SentryLogger.php</b>
│   └── <b>FileLogger.php</b>
├── <b>Cache/</b>                ← plast predpomnjenja
│   └── <b>FullPageCache.php</b>
└── <b>Integration/</b>          ← integracija z zunanjimi storitvami
	├── <b>Slack/</b>
	└── <b>Stripe/</b>
\--

Pri manjših projektih seveda zadostuje ravna členitev:

/--pre
<b>Core/</b>
├── <b>RouterFactory.php</b>
├── <b>Authenticator.php</b>
└── <b>QueueMailer.php</b>
\--

Gre za kodo, ki:

- Rešuje tehnično infrastrukturo (usmerjanje, beleženje, predpomnjenje)
- Integrira zunanje storitve (Sentry, Elasticsearch, Redis)
- Zagotavlja osnovne storitve za celotno aplikacijo (pošta, podatkovna baza)
- Je večinoma neodvisna od konkretne domene - predpomnilnik ali logger deluje enako za spletno trgovino ali blog.

Se sprašujete, ali določen razred spada sem ali v model? Ključna razlika je v tem, da koda v `Core/`:

- Ne ve nič o domeni (izdelki, naročila, članki)
- Je večinoma mogoče prenesti v drug projekt
- Rešuje "kako deluje" (kako poslati pošto), ne pa "kaj dela" (kakšno pošto poslati)

Primer za boljše razumevanje:

- `App\Core\MailerFactory` - ustvarja instance razreda za pošiljanje e-pošte, rešuje SMTP nastavitve
- `App\Model\OrderMailer` - uporablja `MailerFactory` za pošiljanje e-pošte o naročilih, pozna njihove predloge in ve, kdaj se morajo poslati


Ukazni skripti
==============

Aplikacije pogosto potrebujejo izvajanje dejavnosti izven običajnih HTTP zahtevkov - bodisi gre za obdelavo podatkov v ozadju, vzdrževanje ali periodične naloge. Za zagon služijo preprosti skripti v mapi `bin/`, samo implementacijsko logiko pa namestimo v `app/Tasks/` (po potrebi `app/Commands/`).

Primer:

/--pre
<b>app/Tasks/</b>
├── <b>Maintenance/</b>               ← vzdrževalni skripti
│   ├── <b>CleanupCommand.php</b>     ← brisanje starih podatkov
│   └── <b>DbOptimizeCommand.php</b>  ← optimizacija podatkovne baze
├── <b>Integration/</b>               ← integracija z zunanjimi sistemi
│   ├── <b>ImportProducts.php</b>     ← uvoz iz dobaviteljskega sistema
│   └── <b>SyncOrders.php</b>         ← sinhronizacija naročil
└── <b>Scheduled/</b>                 ← redne naloge
	├── <b>NewsletterCommand.php</b>  ← pošiljanje novičnikov
	└── <b>ReminderCommand.php</b>    ← obvestila strankam
\--

Kaj spada v model in kaj v ukazne skripte? Na primer, logika za pošiljanje enega e-poštnega sporočila je del modela, množično pošiljanje tisočev e-poštnih sporočil pa že spada v `Tasks/`.

Naloge običajno [zaženemo iz ukazne vrstice |https://blog.nette.org/cs/cli-skripty-v-nette-aplikaci] ali prek crona. Lahko jih zaženemo tudi prek HTTP zahtevka, vendar je treba misliti na varnost. Presenter, ki nalogo zažene, je treba zavarovati, na primer samo za prijavljene uporabnike ali z močnim žetonom in dostopom z dovoljenih IP naslovov. Pri dolgih nalogah je treba povečati časovno omejitev skripta in uporabiti `session_write_close()`, da se ne zaklene seja.


Druge možne mape
================

Poleg omenjenih osnovnih map lahko glede na potrebe projekta dodate druge specializirane mape. Poglejmo si najpogostejše izmed njih in njihovo uporabo:

/--pre
<b>app/</b>
├── <b>Api/</b>              ← logika za API, neodvisna od predstavitvene plasti
├── <b>Database/</b>         ← migracijski skripti in sejalci za testne podatke
├── <b>Components/</b>       ← deljene vizualne komponente po celotni aplikaciji
├── <b>Event/</b>            ← uporabno, če uporabljate arhitekturo, vodeno z dogodki
├── <b>Mail/</b>             ← e-poštne predloge in povezana logika
└── <b>Utils/</b>            ← pomožni razredi
\--

Za deljene vizualne komponente, uporabljene v presenterjih po celotni aplikaciji, lahko uporabite mapo `app/Components` ali `app/Controls`:

/--pre
<b>app/Components/</b>
├── <b>Form/</b>                 ← deljene komponente obrazcev
│   ├── <b>SignInForm.php</b>
│   └── <b>UserForm.php</b>
├── <b>Grid/</b>                 ← komponente za izpise podatkov
│   └── <b>DataGrid.php</b>
└── <b>Navigation/</b>           ← navigacijski elementi
	├── <b>Breadcrumbs.php</b>
	└── <b>Menu.php</b>
\--

Sem spadajo komponente, ki imajo kompleksnejšo logiko. Če želite komponente deliti med več projekti, je priporočljivo, da jih izločite v samostojen composer paket.

V mapo `app/Mail` lahko namestite upravljanje e-poštne komunikacije:

/--pre
<b>app/Mail/</b>
├── <b>templates/</b>            ← e-poštne predloge
│   ├── <b>order-confirmation.latte</b>
│   └── <b>welcome.latte</b>
└── <b>OrderMailer.php</b>
\--


Mapiranje presenterjev
======================

Mapiranje definira pravila za izpeljavo imena razreda iz imena presenterja. Specificiramo jih v [konfiguraciji|configuration] pod ključem `application › mapping`.

Na tej strani smo si pokazali, da presenterje nameščamo v mapo `app/Presentation` (po potrebi `app/UI`). To konvencijo moramo Nette sporočiti v konfiguracijski datoteki. Dovolj je ena vrstica:

```neon
application:
	mapping: App\Presentation\*\**Presenter
```

Kako mapiranje deluje? Za boljše razumevanje si najprej predstavljajmo aplikacijo brez modulov. Želimo, da razredi presenterjev spadajo v imenski prostor `App\Presentation`, da se presenter `Home` preslika na razred `App\Presentation\HomePresenter`. Kar dosežemo s to konfiguracijo:

```neon
application:
	mapping: App\Presentation\*Presenter
```

Mapiranje deluje tako, da ime presenterja `Home` nadomesti zvezdico v maski `App\Presentation\*Presenter`, s čimer dobimo končno ime razreda `App\Presentation\HomePresenter`. Preprosto!

Kot pa vidite v primerih v tem in drugih poglavjih, razrede presenterjev nameščamo v istoimenske podmape, na primer presenter `Home` se preslika na razred `App\Presentation\Home\HomePresenter`. To dosežemo z podvojitvijo dvopičja (zahteva Nette Application 3.2):

```neon
application:
	mapping: App\Presentation\**Presenter
```

Zdaj pristopimo k mapiranju presenterjev v module. Za vsak modul lahko definiramo specifično mapiranje:

```neon
application:
	mapping:
		Front: App\Presentation\Front\**Presenter
		Admin: App\Presentation\Admin\**Presenter
		Api: App\Api\*Presenter
```

Glede na to konfiguracijo se presenter `Front:Home` preslika na razred `App\Presentation\Front\Home\HomePresenter`, medtem ko se presenter `Api:OAuth` na razred `App\Api\OAuthPresenter`.

Ker imata modula `Front` in `Admin` podoben način mapiranja in takšnih modulov bo najverjetneje več, je mogoče ustvariti splošno pravilo, ki jih nadomesti. V masko razreda tako pride nova zvezdica za modul:

```neon
application:
	mapping:
		*: App\Presentation\*\**Presenter
		Api: App\Api\*Presenter
```

Deluje tudi za globlje ugnezdene strukture map, kot je na primer presenter `Admin:User:Edit`, se segment z zvezdico ponovi za vsako raven in rezultat je razred `App\Presentation\Admin\User\Edit\EditPresenter`.

Alternativni zapis je namesto niza uporabiti polje, sestavljeno iz treh segmentov. Ta zapis je ekvivalenten prejšnjemu:

```neon
application:
	mapping:
		*: [App\Presentation, *, **Presenter]
		Api: [App\Api, '', *Presenter]
```
