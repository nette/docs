Latte'yi Slim 4 ile kullanma
****************************

.[perex]
"Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html tarafından yazılan bu makalede Latte'nin Slim Framework ile nasıl kullanılacağı anlatılmaktadır.

Önce "Slim Framework'ü yükleyin":https://odan.github.io/2019/11/05/slim4-tutorial.html ve ardından Composer'ı kullanarak Latte'yi  yükleyin:https://odan.github.io/2019/11/05/slim4-tutorial.html:

```shell
composer require latte/latte
```


Konfigürasyon .[#toc-configuration]
-----------------------------------

Proje kök dizininizde yeni bir `templates` dizini oluşturun. Tüm şablonlar daha sonra buraya yerleştirilecektir.

`config/defaults.php` dosyanıza yeni bir `template` yapılandırma anahtarı ekleyin:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte, şablonları yerel PHP koduna derler ve bunları diskteki bir önbellekte saklar. Böylece yerel PHP ile yazılmış kadar hızlıdırlar.

`config/defaults.php` dosyanıza yeni bir `template_temp` yapılandırma anahtarı ekleyin: `{project}/tmp/templates` dizininin var olduğundan ve okuma ve yazma erişim izinlerine sahip olduğundan emin olun.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte, şablonu her değiştirdiğinizde önbelleği otomatik olarak yeniden oluşturur; bu, biraz performans tasarrufu sağlamak için üretim ortamında kapatılabilir:

```php
// üretim ortamında false olarak değiştirin
$settings['template_auto_refresh'] = true;
```

Ardından, `Latte\Engine` sınıfı için bir DI konteyner tanımları ekleyin.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Bu tek başına teknik olarak bir Latte şablonu oluşturmak için işe yarayacaktır, ancak PSR-7 yanıt nesnesiyle de çalışmasını sağlamamız gerekir.

Bu amaçla, bu işi bizim için yapan özel bir `TemplateRenderer` sınıfı oluşturuyoruz.

Şimdi `src/Renderer/TemplateRenderer.php` adresinde bir dosya oluşturun ve bu kodu kopyalayıp yapıştırın:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Kullanım .[#toc-usage]
----------------------

Latte Engine nesnesini doğrudan kullanmak yerine, şablonu PSR-7 uyumlu bir nesneye dönüştürmek için `TemplateRenderer` nesnesini kullanırız.

Tipik bir Eylem işleyici sınıfı, `home.latte` adında bir şablon oluşturmak için aşağıdaki gibi görünebilir:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Çalıştırmak için `templates/home.latte` adresinde bu içeriğe sahip bir şablon dosyası oluşturun:

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Her şey doğru yapılandırılmışsa aşağıdaki çıktıyı görmeniz gerekir:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
