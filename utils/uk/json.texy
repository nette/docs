Робота з JSON
*************

.[perex]
[api:Nette\Utils\Json] це статичний клас із функціями для кодування та декодування формату JSON. Він обробляє вразливості в різних версіях PHP і викидає винятки в разі виникнення помилок.

Встановлення:

```shell
composer require nette/utils
```

У всіх прикладах передбачається, що псевдонім уже створено:

```php
use Nette\Utils\Json;
```


Використання .[#toc-usage]
==========================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Конвертує `$value` у формат JSON.

Якщо встановлено значення `$pretty`, він форматує JSON для легшого читання та ясності:

```php
Json::encode($value); // повертає JSON
Json::encode($value, pretty: true); // повертає чистіший JSON
```

На `$asciiSafe` він генерує виведення в ASCII, тобто замінює символи юнікоду послідовністю `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Параметр `$htmlSafe` гарантує, що виведення не містить символів, які мають спеціальне значення в HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

За допомогою `$forceObjects` навіть поля з числовими ключами будуть закодовані як об'єкти JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Викидається виняток при помилці `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Обробка виключень
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Парсує JSON у PHP.

Встановлення `$forceArray` змушує повертати масиви замість об'єктів:

```php
Json::decode('{"variable": true}'); // повертає об'єкт типу stdClass
Json::decode('{"variable": true}', forceArray: true); // повертає масив
```

При виникненні помилки викидається виняток `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Обробка виключень
}
```


Як надіслати JSON від ведучого? .[#toc-how-to-send-a-json-from-a-presenter]
===========================================================================

Для цього можна використовувати метод `$this->sendJson($data)`, який можна викликати в методі `action*()`, наприклад, див. розділ [Надсилання відповіді |application:presenters#Sending a Response].
