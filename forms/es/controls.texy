Controles de formularios
************************

.[perex]
Visión general de los controles de formulario incorporados.


addText(string|int $name, $label=null): TextInput .[method]
===========================================================

Añade un campo de texto de una sola línea (clase [TextInput |api:Nette\Forms\Controls\TextInput]). Si el usuario no rellena el campo, devuelve una cadena vacía `''`, o utiliza `setNullable()` para cambiarlo y que devuelva `null`.

```php
$form->addText('name', 'Nombre:')
	->setRequired()
	->setNullable();
```

Valida automáticamente UTF-8, recorta los espacios en blanco a izquierda y derecha, y elimina los saltos de línea que podría enviar un atacante.

La longitud máxima puede limitarse mediante `setMaxLength()`. La [función addFilter() |validation#Modifying Input Values] permite cambiar el valor introducido por el usuario.

Utilice `setHtmlType()` para cambiar el [carácter |https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types] del elemento de entrada a `search`, `tel`, `url`, `range`, `date`, `datetime-local`, `month`, `time`, `week`, `color`. En lugar de los tipos `number` y `email`, recomendamos utilizar [addInteger |#addInteger] y [addEmail |#addEmail], que proporcionan validación del lado del servidor.

```php
$form->addText('color', 'Elige color:')
	->setHtmlType('color')
	->addRule($form::Pattern, 'valor no válido', '[0-9a-f]{6}');
```

Se puede establecer el llamado empty-value para el elemento, que es algo así como el valor por defecto, pero si el usuario no lo sobrescribe, devuelve cadena vacía o `null`.

```php
$form->addText('phone', 'Teléfono:')
	->setHtmlType('tel')
	->setEmptyValue('+420');
```


addTextArea(string|int $name, $label=null): TextArea .[method]
==============================================================

Añade un campo de texto multilínea (clase [TextArea |api:Nette\Forms\Controls\TextArea]). Si el usuario no rellena el campo, devuelve una cadena vacía `''`, o utiliza `setNullable()` para cambiarlo y que devuelva `null`.

```php
$form->addTextArea('note', 'Nota:')
	->addRule($form::MaxLength, 'Tu nota es demasiado larga', 10000);
```

Valida automáticamente UTF-8 y normaliza los saltos de línea a `\n`. A diferencia de un campo de entrada de una sola línea, no recorta los espacios en blanco.

La longitud máxima puede limitarse mediante `setMaxLength()`. La [función addFilter() |validation#Modifying Input Values] permite cambiar el valor introducido por el usuario. Puede establecer el llamado valor vacío utilizando `setEmptyValue()`.


addInteger(string|int $name, $label=null): TextInput .[method]
==============================================================

Añade un campo de entrada para números enteros (clase [TextInput |api:Nette\Forms\Controls\TextInput]). Devuelve un entero o `null` si el usuario no introduce nada.

```php
$form->addInteger('level', 'Nivel:')
	->setDefaultValue(0)
	->addRule($form::Range, 'El nivel debe estar entre %d y %d.', [0, 100]);
```


addEmail(string|int $name, $label=null): TextInput .[method]
============================================================

Añade un campo de dirección de correo electrónico con comprobación de validez (clase [TextInput |api:Nette\Forms\Controls\TextInput]). Si el usuario no rellena el campo, devuelve una cadena vacía `''`, o utiliza `setNullable()` para cambiarlo y que devuelva `null`.

```php
$form->addEmail('email', 'Email:');
```

Verifica que el valor es una dirección de correo electrónico válida. No verifica que el dominio exista realmente, sólo se verifica la sintaxis. Valida automáticamente UTF-8, recorta los espacios en blanco a izquierda y derecha.

La longitud máxima puede limitarse utilizando `setMaxLength()`. La [función addFilter() |validation#Modifying Input Values] permite cambiar el valor introducido por el usuario. Puede establecer el llamado valor vacío utilizando `setEmptyValue()`.


addPassword(string|int $name, $label=null): TextInput .[method]
===============================================================

Añade campo de contraseña (clase [TextInput |api:Nette\Forms\Controls\TextInput]).

```php
$form->addPassword('password', 'Contraseña:')
	->setRequired()
	->addRule($form::MinLength, 'La contraseña debe tener al menos %d caracteres', 8)
	->addRule($form::Pattern, 'La contraseña debe contener un número', '.*[0-9].*');
```

Al reenviar el formulario, la entrada estará en blanco. Valida automáticamente UTF-8, recorta los espacios en blanco a izquierda y derecha y elimina los saltos de línea que podría enviar un atacante.


addCheckbox(string|int $name, $caption=null): Checkbox .[method]
================================================================

Añade una casilla de verificación (clase [Checkbox |api:Nette\Forms\Controls\Checkbox]). El campo devuelve `true` o `false`, dependiendo de si está marcado.

```php
$form->addCheckbox('agree', 'Estoy de acuerdo con las condiciones')
	->setRequired('Debe aceptar nuestros términos');
```


addCheckboxList(string|int $name, $label=null, array $items=null): CheckboxList .[method]
=========================================================================================

Añade una lista de casillas de verificación para seleccionar varios elementos (clase [CheckboxList |api:Nette\Forms\Controls\CheckboxList]). Devuelve el array de claves de los elementos seleccionados. El método `getSelectedItems()` devuelve valores en lugar de claves.

```php
$form->addCheckboxList('colors', 'Colors:', [
	'r' => 'red',
	'g' => 'green',
	'b' => 'blue',
]);
```

Pasamos el array de elementos como tercer parámetro, o por el método `setItems()`.

Puede utilizar `setDisabled(['r', 'g'])` para desactivar elementos individuales.

El elemento comprueba automáticamente que no ha habido falsificación y que los elementos seleccionados son realmente uno de los ofrecidos y no han sido desactivados. Se puede utilizar el método `getRawValue()` para recuperar los elementos enviados sin esta importante comprobación.

Cuando se establecen valores por defecto, también comprueba que son uno de los elementos ofrecidos, de lo contrario lanza una excepción. Esta comprobación puede desactivarse con `checkDefaultValue(false)`.


addRadioList(string|int $name, $label=null, array $items=null): RadioList .[method]
===================================================================================

Añade botones de radio (clase [RadioList |api:Nette\Forms\Controls\RadioList]). Devuelve la clave del elemento seleccionado, o `null` si el usuario no seleccionó nada. El método `getSelectedItem()` devuelve un valor en lugar de una clave.

```php
$sex = [
	'm' => 'male',
	'f' => 'female',
];
$form->addRadioList('gender', 'Gender:', $sex);
```

Pasamos el array de elementos como tercer parámetro, o por el método `setItems()`.

Puede utilizar `setDisabled(['m'])` para desactivar elementos individuales.

El elemento comprueba automáticamente que no ha habido falsificación y que el elemento seleccionado es realmente uno de los ofrecidos y no ha sido desactivado. Se puede utilizar el método `getRawValue()` para recuperar el elemento presentado sin esta importante comprobación.

Cuando se establece el valor por defecto, también comprueba que es uno de los elementos ofrecidos, de lo contrario lanza una excepción. Esta comprobación puede desactivarse con `checkDefaultValue(false)`.


addSelect(string|int $name, $label=null, array $items=null): SelectBox .[method]
================================================================================

Añade una caja de selección (clase [SelectBox |api:Nette\Forms\Controls\SelectBox]). Devuelve la clave del elemento seleccionado, o `null` si el usuario no seleccionó nada. El método `getSelectedItem()` devuelve un valor en lugar de una clave.

```php
$countries = [
	'CZ' => 'Czech republic',
	'SK' => 'Slovakia',
	'GB' => 'United Kingdom',
];

$form->addSelect('country', 'Country:', $countries)
	->setDefaultValue('SK');
```

Pasamos la matriz de elementos como tercer parámetro, o mediante el método `setItems()`. La matriz de elementos también puede ser bidimensional:

```php
$countries = [
	'Europe' => [
		'CZ' => 'Czech republic',
		'SK' => 'Slovakia',
		'GB' => 'United Kingdom',
	],
	'CA' => 'Canada',
	'US' => 'USA',
	'?'  => 'other',
];
```

Para las cajas de selección, el primer elemento a menudo tiene un significado especial, sirve como una llamada a la acción. Utilice el método `setPrompt()` para añadir una entrada de este tipo.

```php
$form->addSelect('country', 'Country:', $countries)
	->setPrompt('Pick a country');
```

Puede utilizar `setDisabled(['CZ', 'SK'])` para desactivar elementos individuales.

El elemento comprueba automáticamente que no ha habido falsificación y que el elemento seleccionado es realmente uno de los ofrecidos y no ha sido desactivado. Se puede utilizar el método `getRawValue()` para recuperar el elemento presentado sin esta importante comprobación.

Cuando se establece el valor por defecto, también comprueba que es uno de los elementos ofrecidos, de lo contrario lanza una excepción. Esta comprobación puede desactivarse con `checkDefaultValue(false)`.


addMultiSelect(string|int $name, $label=null, array $items=null): MultiSelectBox .[method]
==========================================================================================

Añade una caja de selección multielección (clase [MultiSelectBox |api:Nette\Forms\Controls\MultiSelectBox]). Devuelve el array de claves de los elementos seleccionados. El método `getSelectedItems()` devuelve valores en lugar de claves.

```php
$form->addMultiSelect('countries', 'Countries:', $countries);
```

Pasamos la matriz de elementos como tercer parámetro, o mediante el método `setItems()`. La matriz de elementos también puede ser bidimensional.

Puede utilizar `setDisabled(['CZ', 'SK'])` para desactivar elementos individuales.

El elemento comprueba automáticamente que no ha habido falsificación y que los elementos seleccionados son realmente uno de los ofrecidos y no han sido desactivados. Se puede utilizar el método `getRawValue()` para recuperar los elementos enviados sin esta importante comprobación.

Cuando se establecen valores por defecto, también comprueba que son uno de los elementos ofrecidos, de lo contrario lanza una excepción. Esta comprobación puede desactivarse con `checkDefaultValue(false)`.


addUpload(string|int $name, $label=null): UploadControl .[method]
=================================================================

Añade el campo de subida de ficheros (clase [UploadControl |api:Nette\Forms\Controls\UploadControl]). Devuelve el objeto [FileUpload |http:request#FileUpload], incluso si el usuario no ha subido un archivo, lo cual puede averiguarse mediante el método `FileUpload::hasFile()`.

```php
$form->addUpload('avatar', 'Avatar:')
	->addRule($form::Image, 'Avatar must be JPEG, PNG, GIF or WebP')
	->addRule($form::MaxFileSize, 'Maximum size is 1 MB', 1024 * 1024);
```

Si el fichero no se ha subido correctamente, el formulario no se ha enviado correctamente y se muestra un error. Es decir, no es necesario comprobar el método `FileUpload::isOk()`.

No confíe en el nombre de archivo original devuelto por el método `FileUpload::getName()`, un cliente podría enviar un nombre de archivo malicioso con la intención de corromper o hackear su aplicación.

Las reglas `MimeType` y `Image` detectan el tipo de archivo o imagen requerido por su firma. No se comprueba la integridad de todo el archivo. Puedes averiguar si una imagen no está corrupta, por ejemplo, intentando [cargarla |http:request#toImage].


addMultiUpload(string|int $name, $label=null): UploadControl .[method]
======================================================================

Añade un campo de carga múltiple de archivos (clase [UploadControl |api:Nette\Forms\Controls\UploadControl]). Devuelve un array de objetos [FileUpload |http:request#FileUpload]. El método `FileUpload::hasFile()` devolverá `true` para cada uno de ellos.

```php
$form->addMultiUpload('files', 'Files:')
	->addRule($form::MaxLength, 'A maximum of %d files can be uploaded', 10);
```

Si uno de los archivos no se carga correctamente, el formulario no se ha enviado correctamente y se muestra un error. Es decir, no es necesario comprobar el método `FileUpload::isOk()`.

No confíe en los nombres de archivo originales devueltos por el método `FileUpload::getName()`, un cliente podría enviar un nombre de archivo malicioso con la intención de corromper o piratear su aplicación.

Las reglas `MimeType` y `Image` detectan el tipo de archivo o imagen requerido por su firma. No se comprueba la integridad de todo el archivo. Puedes averiguar si una imagen no está corrupta, por ejemplo, intentando [cargarla |http:request#toImage].


addHidden(string|int $name, string $default=null): HiddenField .[method]
========================================================================

Añade un campo oculto (clase [HiddenField |api:Nette\Forms\Controls\HiddenField]).

```php
$form->addHidden('userid');
```

Utiliza `setNullable()` para cambiarlo y que devuelva `null` en lugar de una cadena vacía. La [función addFilter() |validation#Modifying Input Values] permite cambiar el valor enviado.


addSubmit(string|int $name, $caption=null): SubmitButton .[method]
==================================================================

Añade un botón de envío (clase [SubmitButton |api:Nette\Forms\Controls\SubmitButton]).

```php
$form->addSubmit('submit', 'Register');
```

Es posible tener más de un botón de envío en el formulario:

```php
$form->addSubmit('register', 'Register');
$form->addSubmit('cancel', 'Cancel');
```

Para saber cuál de ellos fue pulsado, utilice:

```php
if ($form['register']->isSubmittedBy()) {
  // ...
}
```

Si no desea validar el formulario cuando se pulsa un botón de envío (como los botones *Cancelar* o *Preview*), puede desactivarlo con [setValidationScope() |validation#Disabling Validation].


addButton(string|int $name, $caption): Button .[method]
=======================================================

Añade un botón (clase [Button |api:Nette\Forms\Controls\Button]) sin función de envío. Es útil para vincular otra funcionalidad a id, por ejemplo una acción JavaScript.

```php
$form->addButton('raise', 'Raise salary')
	->setHtmlAttribute('onclick', 'raiseSalary()');
```


addImageButton(string|int $name, string $src=null, string $alt=null): ImageButton .[method]
===========================================================================================

Añade un botón de envío en forma de imagen (clase [ImageButton |api:Nette\Forms\Controls\ImageButton]).

```php
$form->addImageButton('submit', '/path/to/image');
```

Cuando se utilizan varios botones de envío, puede averiguar cuál fue pulsado con `$form['submit']->isSubmittedBy()`.


addContainer(string|int $name): Container .[method]
===================================================

Añade un subformulario (clase [Container |api:Nette\Forms\Container]), o un contenedor, que puede ser tratado de la misma manera que un formulario. Esto significa que puede utilizar métodos como `setDefaults()` o `getValues()`.

```php
$sub1 = $form->addContainer('first');
$sub1->addText('name', 'Tu nombre:');
$sub1->addEmail('email', 'Email:');

$sub2 = $form->addContainer('segundo');
$sub2->addText('name', 'Tu nombre:');
$sub2->addEmail('email', 'Email:');
```

Los datos enviados se devuelven como una estructura multidimensional:

```php
[
	'first' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
	'second' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
]
```


Visión general de la configuración .[#toc-overview-of-settings]
===============================================================

Para todos los elementos podemos llamar a los siguientes métodos (véase la [documentación de la API |https://api.nette.org/forms/master/Nette/Forms/Controls.html] para una visión completa):

.[table-form-methods language-php]
| `setDefaultValue($value)` | establece el valor por defecto
| `getValue()` | obtiene el valor actual
| `setOmitted()` | omitir [valores |#omitted values]
| `setDisabled()` | [desactivar entradas |#disabling inputs]

Renderización:
.[table-form-methods language-php]
| `setCaption($caption)`| cambia el título del elemento
| `setTranslator($translator)` | establece el [traductor |rendering#translating]
| `setHtmlAttribute($name, $value)` | establece el [atributo |rendering#HTML attributes] HTML del elemento
| `setHtmlId($id)` | establece el atributo HTML `id`
| `setHtmlType($type)` | establece el atributo HTML `type`
| `setHtmlName($name)`| establece el atributo HTML `name`
| `setOption($key, $value)` | establece los [datos de renderizado |rendering#Options]

Validación:
.[table-form-methods language-php]
| `setRequired()` | [Campo obligatorio|validation]
| `addRule()` | [Establecer regla de validación|validation#Rules]
| `addCondition()`, `addConditionOn()` | [Establecer condición de validación |validation#Conditions]
| `addError($message)` | [Pasar mensaje de error|validation#processing-errors]

Los siguientes métodos pueden ser llamados para los elementos `addText()`, `addPassword()`, `addTextArea()`, `addEmail()`, `addInteger()`:

.[table-form-methods language-php]
| `setNullable()`| establece si getValue() devuelve `null` en lugar de una cadena vacía
| `setEmptyValue($value)` | establece el valor especial que se trata como cadena vacía
| `setMaxLength($length)`| establece el número máximo de caracteres permitidos
| `addFilter($filter)` | [Modificación de los valores de entrada |validation#Modifying Input Values]


Valores omitidos .[#toc-omitted-values]
---------------------------------------

Si no nos interesa el valor introducido por el usuario, podemos utilizar `setOmitted()` para omitirlo del resultado proporcionado por el método `$form->getValues​()` o pasado a los manejadores. Esto es adecuado para varias contraseñas de verificación, campos antispam, etc.

```php
$form->addPassword('passwordVerify', 'Contraseña de nuevo:')
	->setRequired('Rellena tu contraseña de nuevo para comprobar si hay algún error tipográfico')
	->addRule($form::Equal, 'Contraseña incorrecta', $form['password'])
	->setOmitted();
```


Desactivar entradas .[#toc-disabling-inputs]
--------------------------------------------

Para desactivar una entrada, puede llamar a `setDisabled()`. Un campo de este tipo no puede ser editado por el usuario.

```php
$form->addText('username', 'User name:')
	->setDisabled();
```

Tenga en cuenta que el navegador no envía los campos deshabilitados al servidor en absoluto, por lo que ni siquiera los encontrará en los datos devueltos por la función `$form->getValues()`.

Si establece un valor predeterminado para un campo, debe hacerlo sólo después de desactivarlo:

```php
$form->addText('username', 'User name:')
	->setDisabled()
	->setDefaultValue($userName);
```


Controles personalizados .[#toc-custom-controls]
================================================

Además de la amplia gama de controles de formulario incorporados, puede añadir controles personalizados al formulario como se indica a continuación:

```php
$form->addComponent(new DateInput('Date:'), 'date');
// alternative syntax: $form['date'] = new DateInput('Date:');
```

.[note]
El formulario es descendiente de la clase [Container | component-model:#Container] y los elementos son descendientes de [Component | component-model:#Component].

Existe una forma de definir nuevos métodos de formulario para añadir elementos personalizados (por ejemplo `$form->addZip()`). Estos son los llamados métodos de extensión. El inconveniente es que las sugerencias de código en los editores no funcionarán para ellos.

```php
use Nette\Forms\Container;

// adds method addZip(string $name, string $label = null)
Container::extensionMethod('addZip', function (Container $form, string $name, string $label = null) {
	return $form->addText($name, $label)
		->addRule($form::Pattern, 'At least 5 numbers', '[0-9]{5}');
});

// usage
$form->addZip('zip', 'ZIP code:');
```


Campos de bajo nivel .[#toc-low-level-fields]
=============================================

Para añadir un elemento al formulario, no es necesario llamar a `$form->addXyz()`. En su lugar, los elementos del formulario pueden introducirse exclusivamente en las plantillas. Esto es útil si, por ejemplo, necesita generar elementos dinámicos:

```latte
{foreach $items as $item}
	<p><input type=checkbox name="sel[]" value={$item->id}> {$item->name}</p>
{/foreach}
```

Tras el envío, puede recuperar los valores:

```php
$data = $form->getHttpData($form::DataText, 'sel[]');
$data = $form->getHttpData($form::DataText | $form::DataKeys, 'sel[]');
```

En el primer parámetro, se especifica el tipo de elemento (`DataFile` para `type=file`, `DataLine` para entradas de una línea como `text`, `password` o `email` y `DataText` para el resto). El segundo parámetro coincide con el atributo HTML `name`. Si necesita conservar las claves, puede combinar el primer parámetro con `DataKeys`. Esto es útil para `select`, `radioList` o `checkboxList`.

`getHttpData()` devuelve la entrada desinfectada. En este caso, siempre será un array de cadenas UTF-8 válidas, sin importar el atacante enviado por el formulario. Es una alternativa a trabajar con `$_POST` o `$_GET` directamente si quieres recibir datos seguros.
