Formları Birden Fazla Yerde Yeniden Kullanın
********************************************

.[perex]
Aynı formu birden fazla yerde nasıl tekrar kullanabilir ve kodu kopyalamayabilirsiniz? Nette bunu yapmak gerçekten çok kolay ve aralarından seçim yapabileceğiniz birden fazla yol var.


Form Fabrikası .[#toc-form-factory]
===================================

Form oluşturabilen bir sınıf oluşturalım. Böyle bir sınıfa fabrika denir. Formu kullanmak istediğimiz yerde (örneğin sunucuda), fabrikayı [bağımlılık olarak |dependency-injection:passing-dependencies] talep ederiz.

Fabrikanın bir parçası, form başarıyla gönderildiğinde verileri daha sonraki işlemler için aktaran koddur. Genellikle model katmanına. Ayrıca her şeyin yolunda gidip gitmediğini kontrol eder ve hataları forma [geri ilet |forms:validation#Processing-errors] ir. Aşağıdaki örnekteki model `Facade` sınıfı tarafından temsil edilmektedir:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// forma öğeler ekleyin

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// form işleme
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

Elbette, fabrika parametrik olabilir, yani oluşturulmakta olan formun görünümünü etkileyecek parametreler alabilir.

Şimdi fabrikayı sunucuya aktarmayı göstereceğiz. İlk olarak, bunu yapılandırma dosyasına yazıyoruz:

```neon
services:
	- EditFormFactory
```

Ve sonra sunum yapan kişiden talep edin. Gönderilen formun işlenmesinin bir sonraki adımı da bir sonraki sayfaya yönlendirmektir:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Yeniden yönlendirme sunum işleyicisi tarafından gerçekleştirildiğinden, bileşen birden fazla yerde kullanılabilir ve her bir yerde başka bir yere yönlendirilebilir.


Formlu Bileşen .[#toc-component-with-form]
==========================================

Başka bir yol da form içeren yeni bir [bileşen |application:components] oluşturmaktır. Bu bize, örneğin bileşen bir şablon içerdiğinden, formu belirli bir şekilde oluşturma yeteneği verir.
Veya AJAX iletişimi için sinyalleri kullanabilir ve örneğin otomatik tamamlama vb. için forma bilgi yükleyebiliriz.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// forma öğeler ekleyin

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// form işleme
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// olay çağrısı
		$this->onSave($this, $values);
	}
}
```

Daha sonra, bu bileşeni üretecek fabrikayı oluşturacağız. Sadece [arayüzünü yazın |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

Ve yapılandırma dosyasına ekleyin:

```neon
services:
	- EditControlFactory
```

Ve şimdi fabrikaya ihtiyaç duyabilir ve onu sunumda kullanabiliriz:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// veya düzenlemenin sonucuna yönlendirin, örn:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: En İyi Uygulamalar}}
