Safety First
************


Context-Aware Escaping
======================

Although the [Cross-Site Scripting (XSS) |doc:vulnerability-protection#cross-site-scripting-xss] is one of the trivial ways of exploiting a web page it is the most common vulnerability but very serious. It can lead to identity theft and so on. The best defense is consistent [escaping |doc:glossary#escaping] of printed data, ie. converting the characters which have a special meaning in the given context.

If the coder omits the escaping a security hole is made. That's why template engines implement automated escaping. The problem is that the web page has different contexts and each has different rules for escaping printed data. A security hole then shows up if the wrong escaping functions are used.

But Latte is sophisticated. It features unique technology of *Context-Aware Escaping* which recognizes the context in which the tag is placed and chooses the right escaping mode. What does that mean?

Latte doesn't need any manual work. **All is done automatically, consistently and correctly.** You don't have to worry about security holes.

Lets see how it works:

```html
<p onclick="alert({$movie})">{$movie}</p>

<script>var movie = {$movie};</script>
```

If `$movie` variable stores `'Amarcord & 8 1/2'` string it generates the following output. Notice different escaping used in HTML and JavaScript and also in `onclick` attribute:


```html
<p onclick="alert(&quot;Amarcord &amp; 8 1\/2&quot;)">Amarcord &amp; 8 1/2</p>

<script>var movie = "Amarcord & 8 1\/2";</script>
```

Thanks to Context-Aware Escaping the template is simple and your application perfectly secured against Cross-Site Scripting. You can use PHP variables natively inside the JavaScript!


Link checking
=============

Latte automatically checks whether the variable used in the `src` or `href` attributes contains a web URL (ie protocol HTTP) and prevents the writing of links that may pose a security risk.

```html
{var $link = 'javascript:attack()'}

<a href="{$link}">click here</a>
```

Writes:

```html
<a href="">click here</a>
```

The check can be turned off using a filter [noCheck|filters#noCheck].
