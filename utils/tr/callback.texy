Geri Çağırma İşlevleri
**********************

.[perex]
[api:Nette\Utils\Callback] [PHP geri aramalarıyla |https://www.php.net/manual/en/language.types.callable.php] çalışmak için işlevler içeren statik bir sınıftır.


Kurulum:

```shell
composer require nette/utils
```

Tüm örnekler aşağıdaki sınıf takma adının tanımlandığını varsayar:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

`$callable` adresinin geçerli bir PHP geri araması olup olmadığını kontrol eder. Aksi takdirde `Nette\InvalidArgumentException` atar. `$syntax` true olarak ayarlanırsa, işlev yalnızca `$callable` adresinin geriçağırım olarak kullanılacak geçerli bir yapıya sahip olduğunu doğrular, ancak sınıf veya yöntemin gerçekten var olup olmadığını doğrulamaz. `$callable` döndürür.

```php
Callback::check('trim'); // istisna yok
Callback::check(['NonExistentClass', 'method']); // throws Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // istisna yok
Callback::check(function () {}); // istisna yok
Callback::check(null); // throws Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

PHP geri aramasını metinsel biçime dönüştürür. Sınıf veya yöntem mevcut olmayabilir.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

PHP geriçağırımında kullanılan yöntem veya işlev için yansıma döndürür.

```php
$ref = Callback::toReflection('trim');
// $ref is ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref is ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

PHP geriçağırımının işlev mi yoksa duruk yöntem mi olduğunu denetler.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

`Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php tarafından oluşturulan Unwraps kapanışı.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
