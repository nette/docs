Dateisystem-Funktionen
**********************

.[perex]
[api:Nette\Utils\FileSystem] ist eine statische Klasse, die nützliche Funktionen für die Arbeit mit einem Dateisystem enthält. Ein Vorteil gegenüber nativen PHP-Funktionen ist, dass sie im Fehlerfall Ausnahmen auslösen.


Installation:

```shell
composer require nette/utils
```

Die folgenden Beispiele gehen davon aus, dass der folgende Klassenalias definiert ist:

```php
use Nette\Utils\FileSystem;
```


Manipulation .[#toc-manipulation]
=================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Kopiert eine Datei oder ein ganzes Verzeichnis. Überschreibt standardmäßig vorhandene Dateien und Verzeichnisse. Wenn `$overwrite` auf `false` gesetzt ist und ein `$target` bereits existiert, wird eine Exception `Nette\InvalidStateException` geworfen. Löst eine Exception `Nette\IOException` aus, wenn ein Fehler auftritt.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Erstellt ein Verzeichnis, wenn es nicht existiert, einschließlich übergeordneter Verzeichnisse. Wirft eine Exception `Nette\IOException` wenn ein Fehler auftritt.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Löscht eine Datei oder ein ganzes Verzeichnis, falls vorhanden. Wenn das Verzeichnis nicht leer ist, wird zuerst sein Inhalt gelöscht. Wirft eine Exception `Nette\IOException` wenn ein Fehler auftritt.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Setzt die Dateiberechtigungen auf `$fileMode` oder die Verzeichnisberechtigungen auf `$dirMode`. Durchläuft rekursiv den gesamten Inhalt des Verzeichnisses und setzt die Berechtigungen auch für diesen.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Öffnet die Datei und gibt die Ressource zurück. Der Parameter `$mode` funktioniert genauso wie die native Funktion `fopen()`:https://www.php.net/manual/en/function.fopen.php. Wenn ein Fehler auftritt, wird die Ausnahme `Nette\IOException` ausgelöst.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Liest den Inhalt einer `$file`. Bei Auftreten eines Fehlers wird die Ausnahme `Nette\IOException` ausgelöst.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Liest den Inhalt der Datei Zeile für Zeile. Im Gegensatz zur nativen Funktion `file()` wird nicht die gesamte Datei in den Speicher eingelesen, sondern kontinuierlich, so dass auch Dateien gelesen werden können, die größer als der verfügbare Speicher sind. Der Parameter `$stripNewLines` gibt an, ob die Zeilenumbruchzeichen `\r` und `\n` entfernt werden sollen.
Im Falle eines Fehlers löst sie eine `Nette\IOException` Ausnahme aus.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Benennt eine durch `$origin` angegebene Datei oder ein Verzeichnis um oder verschiebt sie/es nach `$target`. Überschreibt standardmäßig vorhandene Dateien und Verzeichnisse. Wenn `$overwrite` auf `false` gesetzt ist und `$target` bereits existiert, wird eine Ausnahme `Nette\InvalidStateException` geworfen. Wirft eine Exception `Nette\IOException`, wenn ein Fehler auftritt.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Schreibt die `$content` in eine `$file`. Bei einem Fehler wird die Ausnahme `Nette\IOException` ausgelöst.

```php
FileSystem::write('/path/to/file', $content);
```


Pfade .[#toc-paths]
===================


isAbsolute(string $path): bool .[method]
----------------------------------------

Bestimmt, ob die `$path` absolut ist.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Verbindet alle Segmente des Pfades und normalisiert das Ergebnis.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalisiert `..` und `.` sowie die Verzeichnistrennzeichen im Pfad.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Wandelt Schrägstriche in `/` um, die auf Unix-Systemen verwendet werden.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Konvertiert Schrägstriche in Zeichen, die für die aktuelle Plattform spezifisch sind, d. h. `\` unter Windows und `/` anderswo.

```php
$path = FileSystem::platformSlashes($path);
```
