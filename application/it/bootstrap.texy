Bootstrap
*********

<div class=perex>

Bootstrap √® il codice di avvio che inizializza l'ambiente, crea il container di dependency injection (DI) ed esegue l'applicazione. Parleremo di:

- come configurarlo utilizzando file NEON
- come distinguere tra modalit√† di produzione e sviluppo
- come creare un container DI

</div>


Le applicazioni, siano esse web o script eseguiti dalla riga di comando, iniziano la loro esecuzione con una qualche forma di inizializzazione dell'ambiente. In passato, questo compito era spesso affidato a un file chiamato, ad esempio, `include.inc.php`, che il file iniziale includeva.
Nelle moderne applicazioni Nette, questo √® stato sostituito dalla classe `Bootstrap`, che, come parte dell'applicazione, si trova nel file `app/Bootstrap.php`. Potrebbe assomigliare, ad esempio, a questo:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// Il Configurator √® responsabile dell'impostazione dell'ambiente e dei servizi dell'applicazione.
		$this->configurator = new Configurator;
		// Imposta la directory per i file temporanei generati da Nette (es. template compilati)
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// Nette √® intelligente e la modalit√† di sviluppo si attiva automaticamente,
		// oppure puoi abilitarla per un indirizzo IP specifico decommentando la riga seguente:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Attiva Tracy: l'ultimo "coltellino svizzero" per il debug.
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: carica automaticamente tutte le classi nella directory selezionata
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Carica i file di configurazione
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php
=========

Il file iniziale nel caso delle applicazioni web √® `index.php`, che si trova nella [directory pubblica |directory-structure#directory-pubblica-www] `www/`. Questo file fa inizializzare l'ambiente e creare il container DI dalla classe Bootstrap. Successivamente, ottiene il servizio `Application` da esso, che avvia l'applicazione web:

```php
$bootstrap = new App\Bootstrap;
// Inizializzazione dell'ambiente + creazione del container DI
$container = $bootstrap->bootWebApplication();
// Il container DI crea l'oggetto Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// Avvio dell'applicazione Nette ed elaborazione della richiesta in arrivo
$application->run();
```

Come si pu√≤ vedere, la classe [api:Nette\Bootstrap\Configurator] aiuta con l'impostazione dell'ambiente e la creazione del container di dependency injection (DI), che ora presenteremo pi√π in dettaglio.


Modalit√† Sviluppo vs Produzione
===============================

Nette si comporta diversamente a seconda che sia in esecuzione su un server di sviluppo o di produzione:

üõ†Ô∏è  Modalit√† Sviluppo (Development):
	- Mostra la debugbar di Tracy con informazioni utili (query SQL, tempo di esecuzione, memoria utilizzata)
	- In caso di errore, mostra una pagina di errore dettagliata con le chiamate alle funzioni e il contenuto delle variabili
	- Aggiorna automaticamente la cache quando vengono modificati i template Latte, i file di configurazione, ecc.


üöÄ  Modalit√† Produzione (Production):
	- Non mostra alcuna informazione di debug, tutti gli errori vengono scritti nel log
	- In caso di errore, mostra ErrorPresenter o una pagina generica "Server Error"
	- La cache non viene mai aggiornata automaticamente!
	- Ottimizzato per velocit√† e sicurezza


La selezione della modalit√† avviene tramite autodetect, quindi di solito non √® necessario configurare nulla o passare manualmente:

- modalit√† sviluppo: su localhost (indirizzo IP `127.0.0.1` o `::1`) se non √® presente un proxy (cio√® il suo header HTTP)
- modalit√† produzione: ovunque altrove

Se vogliamo abilitare la modalit√† di sviluppo anche in altri casi, ad esempio per i programmatori che accedono da un indirizzo IP specifico, utilizziamo `setDebugMode()`:

```php
$this->configurator->setDebugMode('23.75.345.200'); // √® possibile specificare anche un array di indirizzi IP
```

Consigliamo vivamente di combinare l'indirizzo IP con un cookie. Memorizziamo un token segreto nel cookie `nette-debug`, ad esempio `secret1234`, e in questo modo attiviamo la modalit√† di sviluppo per i programmatori che accedono da un indirizzo IP specifico e che hanno anche il token menzionato nel cookie:

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Possiamo anche disattivare completamente la modalit√† di sviluppo, anche per localhost:

```php
$this->configurator->setDebugMode(false);
```

Attenzione, il valore `true` attiva forzatamente la modalit√† di sviluppo, cosa che non deve mai accadere su un server di produzione.


Strumento di Debug Tracy
========================

Per un facile debug, attiviamo anche l'ottimo strumento [Tracy |tracy:]. In modalit√† sviluppo, visualizza gli errori e in modalit√† produzione, registra gli errori nella directory specificata:

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


File Temporanei
===============

Nette utilizza la cache per il container DI, RobotLoader, template, ecc. Pertanto, √® necessario impostare il percorso della directory in cui verr√† memorizzata la cache:

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

Su Linux o macOS, imposta i [permessi di scrittura |nette:troubleshooting#Impostazione dei permessi delle directory] per le directory `log/` e `temp/`.


RobotLoader
===========

Di solito, vorremo caricare automaticamente le classi utilizzando [RobotLoader |robot-loader:], quindi dobbiamo avviarlo e fargli caricare le classi dalla directory in cui si trova `Bootstrap.php` (cio√® `__DIR__`), e da tutte le sottodirectory:

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Un approccio alternativo √® far caricare le classi solo tramite [Composer |best-practices:composer] rispettando PSR-4.


Timezone
========

Tramite il configuratore √® possibile impostare il fuso orario predefinito.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Configurazione del Container DI
===============================

Parte del processo di avvio √® la creazione del container DI, ovvero la factory di oggetti, che √® il cuore dell'intera applicazione. Si tratta in realt√† di una classe PHP generata da Nette e salvata nella directory della cache. La factory produce gli oggetti chiave dell'applicazione e, tramite i file di configurazione, le istruiamo su come crearli e impostarli, influenzando cos√¨ il comportamento dell'intera applicazione.

I file di configurazione sono solitamente scritti nel formato [NEON |neon:format]. In un capitolo separato, imparerai [cosa pu√≤ essere configurato |nette:configuring].

.[tip]
In modalit√† sviluppo, il container viene aggiornato automaticamente ad ogni modifica del codice o dei file di configurazione. In modalit√† produzione, viene generato solo una volta e le modifiche non vengono controllate per massimizzare le prestazioni.

Carichiamo i file di configurazione utilizzando `addConfig()`:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

Se vogliamo aggiungere pi√π file di configurazione, possiamo chiamare la funzione `addConfig()` pi√π volte.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

Il nome `cli.php` non √® un errore di battitura, la configurazione pu√≤ anche essere scritta in un file PHP che la restituisce come array.

Possiamo anche aggiungere altri file di configurazione nella [sezione `includes` |dependency-injection:configuration#Inclusione di file].

Se nei file di configurazione compaiono elementi con le stesse chiavi, verranno sovrascritti o, nel caso di [array, uniti |dependency-injection:configuration#Unione]. Il file incluso successivamente ha una priorit√† maggiore rispetto al precedente. Il file in cui √® specificata la sezione `includes` ha una priorit√† maggiore rispetto ai file inclusi in esso.


Parametri Statici
-----------------

I parametri utilizzati nei file di configurazione possono essere definiti [nella sezione `parameters`|dependency-injection:configuration#parametri] e anche passati (o sovrascritti) con il metodo `addStaticParameters()` (ha l'alias `addParameters()`). √à importante notare che valori diversi dei parametri causeranno la generazione di ulteriori container DI, ovvero ulteriori classi.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

Al parametro `projectId` si pu√≤ fare riferimento nella configurazione con la consueta notazione `%projectId%`.


Parametri Dinamici
------------------

Possiamo aggiungere al container anche parametri dinamici, i cui valori diversi, a differenza dei parametri statici, non causano la generazione di nuovi container DI.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

In questo modo possiamo aggiungere semplicemente, ad esempio, variabili d'ambiente, a cui si pu√≤ fare riferimento nella configurazione con la notazione `%env.variable%`.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Parametri Predefiniti
---------------------

Nei file di configurazione √® possibile utilizzare questi parametri statici:

- `%appDir%` √® il percorso assoluto alla directory contenente il file `Bootstrap.php`
- `%wwwDir%` √® il percorso assoluto alla directory contenente il file di input `index.php`
- `%tempDir%` √® il percorso assoluto alla directory per i file temporanei
- `%vendorDir%` √® il percorso assoluto alla directory in cui Composer installa le librerie
- `%rootDir%` √® il percorso assoluto alla directory principale del progetto
- `%debugMode%` indica se l'applicazione √® in modalit√† debug
- `%consoleMode%` indica se la richiesta √® arrivata tramite la riga di comando


Servizi Importati
-----------------

Ora andiamo pi√π a fondo. Sebbene lo scopo del container DI sia quello di creare oggetti, eccezionalmente potrebbe sorgere la necessit√† di inserire un oggetto esistente nel container. Lo facciamo definendo il servizio con il flag `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

E nel bootstrap inseriamo l'oggetto nel container:

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Ambienti Diversi
================

Non aver paura di modificare la classe Bootstrap secondo le tue esigenze. Puoi aggiungere parametri al metodo `bootWebApplication()` per distinguere i progetti web. Oppure possiamo aggiungere altri metodi, ad esempio `bootTestEnvironment()`, che inizializza l'ambiente per i test unitari, `bootConsoleApplication()` per gli script chiamati dalla riga di comando, ecc.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // inizializzazione di Nette Tester
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
