Вклад в код
***********

Фреймворк Nette использует Git и [GitHub |https://github.com/nette/nette] для поддержания кодовой базы. Лучший способ внести свой вклад — зафиксировать свои изменения в собственном форке, а затем сделать запрос на включение в репозитории на GitHub. В этом документе кратко изложены основные шаги для успешного внесения вклада.


Подготовка окружения
====================

Начните с [создания форка |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] [Nette на GitHub |https://github.com/nette]. [Настройте |https://help.github.com/en/github/getting-started-with-github/set-up-git] вашу локальную среду Git, укажите имя пользователя и имейл, эти учётные данные будут идентифицировать ваши изменения в истории фреймворка Nette.


Работа над своим патчем
=======================

Прежде чем начать работу над патчем, создайте новую ветку для своих изменений:
```shell
git checkout -b new_branch_name
```

Можете вносить изменения в код.


Тестирование изменений
======================

Вам необходимо установить приложение Nette Tester. Самый простой способ — вызвать `composer install` в корне репозитория. Теперь вы должны иметь возможность запускать тесты с помощью `./vendor/bin/tester` в unix-подобном терминале или `vendor\bin\tester` в терминале Windows.

Некоторые тесты могут не пройти из-за отсутствия `php.ini`. Поэтому следует вызывать `runner` с параметром `-c` и указать путь к `php.ini`, например `./vendor/bin/tester -c ./tests/php.ini`.

После того, как вы сможете запустить тесты, вы можете реализовать свои собственные или изменить отказ, чтобы он соответствовал новому поведению. Подробнее о тестировании с помощью Nette Tester читайте в [документации |tester:].


Стандарты кодирования
=====================

Ваш код должен соответствовать [стандарту кодирования |coding-standard], используемому в Nette. Это легко, потому что есть автоматическая программа проверки и исправления. Она требует PHP 7.1 и может быть установлен через Composer в выбранный вами глобальный каталог:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Теперь вы должны иметь возможность запустить инструмент в терминале. Например, эта команда проверяет и исправляет код в папках `src` и `tests` в текущем каталоге:

```shell
/path/to/nette-coding-standard/ecs check src tests --config /path/to/nette-coding-standard/coding-standard-php71.yml --fix
```


Закрепление изменений
---------------------

После того как вы изменили код, вы должны зафиксировать свои изменения. Создайте несколько коммитов, по одному для каждого логического шага. Каждый коммит должен быть пригоден для использования как есть — без других коммитов. Поэтому соответствующие тесты также должны быть включены в тот же коммит.

Пожалуйста, дважды проверьте, соответствует ли ваш код правилам:
- Код не генерирует никаких ошибок.
- Ваш код не нарушает никаких тестов.
- Ваше изменение кода тестируется.
- Вы не совершаете бесполезных изменений.

Сообщение о фиксации должно соответствовать формату `Latte: fixed multi template rendering [Closes # 69]` т. е:
- область, за которой следует двоеточие
- цель коммита в прошлом, если возможно, начинайте с «added», «fixed», «refactored», «changed», «removed»
- потенциальная ссылка на трекер проблем
- если фиксация отменяет обратную совместимость, добавьте «BC break»
- может быть одна свободная строка после темы и более подробное описание, включая ссылки на форум.


Запрос на включение
===================

Если вы удовлетворены своими правками кода, вы должны опубликовать их на GitHub.

```shell
git push origin new_branch_name
```

Изменения представлены публично, однако, вы должны предложить свои изменения для интеграции в мастер-ветку Nette. Для этого сделайте [запрос на включение |https://help.github.com/articles/creating-a-pull-request].
Каждый запрос имеет название и описание. Пожалуйста, укажите какое-нибудь описывающее название. Часто оно похоже на название ветки, например, «Securing signals against CSRF attack».

Описание запроса должно содержать более конкретную информацию о ваших изменениях кода:
```
- bug fix? yes/no   <!-- номера #issue, если таковые имеются -->
- new feature? yes/no
- BC break? yes/no
- doc PR: nette/docs#???  <!-- очень приветствуется, см. https://nette.org/en/writing -->
```

Пожалуйста, измените информационную таблицу в соответствии с вашим запросом. Комментарии к каждому пункту списка:
- Укажите, добавляет ли ваш запрос на включение **фичу** (feature) или это **исправление** (bugfix).
- В конечном итоге ссылаемся на **связанную проблему** (#issue), которая будет закрыта после слияния данного запроса.
- Отметьте, требуется ли **изменение документации**. Если да, то укажите ссылки на соответствующие запросы на включение. Вы не обязаны предоставлять изменения в документации немедленно, однако запрос на исправление не будет объединен, если изменения в документации необходимы. Изменение документации должно быть подготовлено для документации на английском языке, правки для других языков необязательны.
- Укажите, если запрос на исправление создает **необратимые изменения**. Например, всё, что меняет публичный интерфейс, является необратимым изменением.

Финальная таблица может выглядеть следующим образом:
```
- bug fix? no
- new feature? yes   issue #123
- BC break? no
```


Переработка изменений
=====================

Очень часто приходится получать комментарии к изменениям в коде. Пожалуйста, постарайтесь следовать предложенным изменениям и переделайте свои коммиты, если требуется. Вы можете зафиксировать предлагаемые изменения как новые коммиты, а затем присоединить их к предыдущим. См. главу [Interactive rebase |https://help.github.com/en/github/using-git/about-git-rebase] на GitHub. После объединения изменений принудительно отправьте их в ваш форк, всё будет автоматически добавлено в запрос на включение.

{{priority: -1}}
