Funkcije Floats
***************

.[perex]
[api:Nette\Utils\Floats] je statični razred z uporabnimi funkcijami za primerjavo števil float.


Namestitev:

```shell
composer require nette/utils
```

Vsi primeri predpostavljajo, da je definiran naslednji vzdevek razreda:

```php
use Nette\Utils\Floats;
```


Motivacija .[#toc-motivation]
=============================

Se sprašujete, čemu je namenjen razred za primerjavo float? Uporabite lahko operatorje `<`, `>`, `===`, si mislite.
To ni povsem res. Kaj mislite, da se bo izpisala ta koda?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Če boste zagnali kodo, boste nekateri presenečeni, da je program natisnil `not same`.

Matematične operacije s float števili povzročajo napake zaradi pretvorbe med desetiškim in dvojiškim sistemom. Na primer `0.1 + 0.2` je enako `0.300000000000000044…`. Zato moramo pri primerjanju plavajočih števil dopuščati majhno razliko od določenega decimalnega mesta.

In to počne razred `Floats`. Naslednja primerjava bo delovala po pričakovanjih:

```php
echo Floats::areEqual($a, $b) ? 'same': 'not same'; // enako
```

Ko poskuša primerjati `NAN`, pa vrže izjemo `\LogicException`.


Primerjava floatov .[#toc-float-comparison]
===========================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Vrne `true`, če je `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Vrne `true`, če je `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Vrne `true`, če `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Vrne `true`, če je `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Vrne `true`, če `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Če je `$a` < `$b`, vrne `-1`, če sta enaka, vrne `0` and if `$a` > `$b` vrne `1`.

Uporablja se lahko na primer s funkcijo `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr is [-3.5, 1, 2, 5]
```


Pomožne funkcije .[#toc-helpers-functions]
==========================================


isZero(float $value): bool .[method]
------------------------------------

Vrne `true`, če je vrednost enaka nič.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Vrne `true`, če je vrednost celo število.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
