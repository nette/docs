De ce să folosiți șabloane?
***************************


De ce ar trebui să folosesc un sistem de șabloane în PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
-------------------------------------------------------------------------------------------------------------

Mai întâi, să reamintim pe scurt istoria PHP, plină de întorsături interesante. Unul dintre primele limbaje de programare utilizate pentru crearea de șabloane HTML a fost C. Cu toate acestea, utilizarea sa în acest scop s-a dovedit a fi nepotrivită. Rasmus Lerdorf a creat PHP pentru a facilita generarea dinamică de HTML cu C în backend. Inițial, PHP a fost conceput ca un limbaj de creare de șabloane, dar în timp a căpătat mai multe caracteristici și a devenit un limbaj de programare cu drepturi depline.

Cu toate acestea, funcționează în continuare ca un limbaj de modelare. Fișierele PHP pot fi utilizate ca pagini HTML, în care puteți scoate o variabilă folosind `<?= $foo ?>`.

La începutul istoriei PHP, sistemul de modelare Smarty a fost introdus pentru a separa strict aspectul (HTML/CSS) de logica aplicației. Capacitățile sale au fost limitate în mod deliberat în comparație cu PHP, astfel încât un dezvoltator nu putea, de exemplu, să interogheze o bază de date dintr-un șablon. Cu toate acestea, aceste sisteme au introdus dependențe suplimentare, au crescut complexitatea proiectului și au necesitat învățarea unui nou limbaj Smarty. Beneficiile lor au fost controversate, iar PHP simplu a continuat să fie folosit pentru șabloane.

În timp, sistemele de șabloane au devenit mai utile. Un număr tot mai mare de programatori și companii au realizat importanța securității. Aceștia au recunoscut existența unor [vulnerabilități, cum ar fi XSS |safety-first]. Modul corect de afișare a unei variabile nu este `<?= $foo ?>` ci `<?= htmlspecialchars($foo) ?>`, iar neglijarea scăpării, adică utilizarea funcției `htmlspecialchars()`, poate provoca o încălcare gravă a securității. Sistemele de șabloane au introdus funcția auto-escaping, astfel încât era suficient să se scrie doar `{$foo}`, iar variabila ar fi fost afișată cu escaping inclus.

Sistemele de șabloane au adus suport pentru moștenire, sandboxing și alte caracteristici utile, făcând ca scrierea de șabloane să fie mult mai simplă decât cu PHP. La un moment dat, beneficiile sistemelor de șabloane au depășit în mod semnificativ preocupările legate de introducerea unei noi dependențe.


De ce ar trebui să folosesc sistemul de șabloane Latte? .[#toc-why-should-i-use-the-latte-templating-system]
------------------------------------------------------------------------------------------------------------

Principalele motive sunt securitatea și sintaxa.

Toate sistemele de modelare, cum ar fi Twig, Blade sau Smarty, au introdus, de-a lungul existenței lor, protecția XSS sub forma scăpării automate. Cu toate acestea, Latte a mers mai departe, realizând că, pentru ca scăparea automată să fie cu adevărat funcțională, sistemul trebuie să înțeleagă HTML. Trebuia să recunoască nu doar un șir de caractere, ci și etichete, atribute etc. Acest lucru se datorează faptului că sunt necesare diferite metode de evadare în textul HTML, în interiorul etichetelor HTML și în JavaScript etc. Latte a învățat să înțeleagă HTML și să evadeze în fiecare dintre aceste contexte în [mod corespunzător |safety-first#Context-Aware Escaping]. Astfel, a devenit primul și, până în prezent, singurul sistem de modelare PHP cu escape sensibil la context.

Latte reprezintă un sistem de modelare cu adevărat sigur, în timp ce alte sisteme tind să creeze un fals sentiment de securitate.

Un alt avantaj semnificativ al Latte este utilizarea sintaxei PHP, astfel încât programatorul/codificatorul nu trebuie să învețe un nou limbaj, ci poate utiliza ceea ce știe deja bine.


Care sunt principalele diferențe între sistemele de modelare precum Latte, Twig și Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Diferențele dintre sistemele de modelare precum Latte, Twig și Blade constau în principal în sintaxa, securitatea și integrarea cu cadrele:

- Latte: utilizează sintaxa limbajului PHP, ceea ce îl face mai ușor de învățat și de utilizat. Oferă o protecție de top împotriva atacurilor XSS.
- Twig: utilizează o sintaxă de tip Python, care este destul de diferită de cea a limbajului PHP. Evadează fără distincție de context. Este bine integrat cu cadrul Symfony.
- Blade: utilizează un amestec de sintaxă PHP și sintaxă personalizată. Evadează fără distincție de context. Este foarte bine integrat cu caracteristicile și ecosistemul Laravel.


Merită pentru companii să folosească un sistem de template-uri? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
-------------------------------------------------------------------------------------------------------------------------------

În primul rând, costurile asociate cu formarea, utilizarea și beneficiile generale variază semnificativ în funcție de sistem. Sistemul de modelare Latte, datorită utilizării sintaxei PHP, simplifică foarte mult învățarea pentru programatorii deja familiarizați cu acest limbaj. De obicei, unui programator îi sunt necesare câteva ore pentru a se familiariza suficient cu Latte, ceea ce reduce costurile de formare și accelerează adoptarea tehnologiei și, cel mai important, eficiența în utilizarea zilnică.

În plus, Latte oferă un nivel ridicat de protecție împotriva vulnerabilității XSS datorită tehnologiei sale unice de evadare conștientă de context. Această protecție este crucială pentru a asigura securitatea aplicațiilor web și pentru a minimiza riscul de atacuri care ar putea pune în pericol utilizatorii sau datele companiei. De asemenea, securitatea aplicațiilor web este importantă pentru menținerea bunei reputații a unei companii. Problemele de securitate pot duce la pierderea încrederii din partea clienților și pot afecta reputația companiei pe piață.

Utilizarea Latte reduce, de asemenea, costurile generale de dezvoltare și întreținere, facilitându-le pe ambele. Prin urmare, utilizarea unui sistem de modelare merită cu siguranță.


Cum afectează Latte performanța aplicației web și resursele serverului? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
------------------------------------------------------------------------------------------------------------------------------------------------------

Deși șabloanele Latte sunt procesate rapid, acest aspect nu contează cu adevărat. Motivul este că analiza fișierelor are loc o singură dată în timpul primei afișări. Ele sunt apoi compilate în cod PHP, stocate pe disc și rulate la fiecare solicitare ulterioară, fără a necesita recompilare.

Acesta este modul în care funcționează într-un mediu de producție. În timpul dezvoltării, șabloanele Latte sunt recompilate de fiecare dată când conținutul lor se modifică, astfel încât dezvoltatorul vede întotdeauna versiunea curentă.
