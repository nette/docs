ラテ機能
****

.[perex]
PHPの一般的な関数に加え、テンプレートでも使用することができます。

.[table-latte-filters]
|`clamp` |[値を範囲にクランプする|#clamp]
|`divisibleBy`|[ある変数がある数値で割り切れるかどうかをチェックします|#divisibleBy]
|`even` |[与えられた数値が偶数かどうかをチェックします|#even]
|`first` | [配列の最初の要素または文字列の文字を返します|#first]
|`last` | [配列の最後の要素、または文字列の文字を返す|#last]
|`odd` | [与えられた数が奇数かどうかをチェックする|#odd]
|`slice`  | [配列または文字列のスライスを抽出します|#slice]


使用法 .[#toc-usage]
=================

関数は一般的なPHPの関数と同じように使用され、すべての式で使用することができます。

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

[カスタム関 |extending-latte#functions]数は、この方法で登録することができます。

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

このようなテンプレートで使用します。

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


機能 .[#toc-functions]
====================


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]{data-version:2.9}
----------------------------------------------------------------------------------------------
minとmaxを含む範囲にクランプされた値を返します。

```latte
{=clamp($level, 0, 255)}
```

[フィルタクランプの |filters#clamp]項も参照。


divisibleBy(int $value, int $by): bool .[method]{data-version:2.10.2}
---------------------------------------------------------------------
変数がある数値で割り切れるかどうかをチェックする。

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]{data-version:2.10.2}
-----------------------------------------------------
与えられた数字が偶数かどうかをチェックする。

```latte
{if even($num)} ... {/if}
```


first(string|array $value): mixed .[method]{data-version:2.10.2}
----------------------------------------------------------------
配列の最初の要素、または文字列の1文字を返します。

```latte
{=first([1, 2, 3, 4])}    {* outputs 1 *}
{=first('abcd')}          {* outputs 'a' *}
```

[last |#last],[filter first |filters#first] も参照してください。


last(string|array $value): mixed .[method]{data-version:2.10.2}
---------------------------------------------------------------
配列の最後の要素または文字列の文字を返します。

```latte
{=last([1, 2, 3, 4])}    {* outputs 4 *}
{=last('abcd')}          {* outputs 'd' *}
```

[first |#first],[filter last |filters#last] も参照してください。


odd(int $value): bool .[method]{data-version:2.10.2}
----------------------------------------------------
与えられた数字が奇数かどうかをチェックする。

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, int $length=null, bool $preserveKeys=false): string|array .[method]{data-version:2.10.2}
-------------------------------------------------------------------------------------------------------------------------------
配列または文字列のスライスを抽出します。

```latte
{=slice('hello', 1, 2)}           {* outputs 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* outputs ['b', 'c'] *}
```

このスライスフィルタは、配列に対しては`array_slice` PHP 関数として、文字列に対しては`mb_substr` として動作し、UTF-8 モードでは`iconv_substr` にフォールバックします。

start が負でない場合、シーケンスは変数内のその位置から始まります。start が負の場合は、シーケンスは変数の終端からその距離だけ離れたところから始まります。

length が正の値であれば，シーケンスはその要素数までとなる。もし変数が length よりも短ければ、利用可能な変数の要素だけが存在することになります。もし length が負数なら、シーケンスは変数の終端からその数だけ要素を持つことになります。もし length が省略された場合は、offset から変数の終わりまでがシーケンスに含まれます。

Filter は、デフォルトで整数の配列のキーを並べ替え、リセットします。この挙動は、preserveKeys を true に設定することで変更可能です。文字列のキーは、このパラメータに関係なく、常に保存されます。
