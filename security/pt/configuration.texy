Configurando o controle de acesso
*********************************

.[perex]
Visão geral das opções de configuração para a Segurança Nette.

Se você não estiver usando toda a estrutura, mas apenas esta biblioteca, leia [como carregar a configuração |bootstrap:].

Você pode definir uma lista de usuários na configuração para criar um [autenticador simples |authentication] (`Nette\Security\SimpleAuthenticator`). Como as senhas são legíveis na configuração, esta solução é apenas para fins de teste.

```neon
security:
	# shows user panel in Tracy Bar?
	debugger: ...  # (bool) defaults to true

	users:
		# name: password
		johndoe: secret123

		# name, password, role and other data available in the identity
		janedoe:
			password: secret123
			roles: [admin]
			data: ...
```

Você também pode definir papéis e recursos para criar uma base para [autorizador |authorization] (`Nette\Security\Permission`):

```neon
security:
	roles:
		guest:
		registered: [guest]  # registered inherits from guest
		admin: [registered]  # and admin inherits from registered

	resources:
		article:
		comment: [article]   # resource inherits from article
		poll:
```


Armazenamento do usuário .[#toc-user-storage]
---------------------------------------------

Você pode configurar como armazenar informações sobre o usuário logado:

```neon
security:
	authentication:
		# after how long of inactivity the user will be logged out
		expiration: 30 minutes        # (string) default is not set

		# where to store information about the logged in user
		storage: session              # (session|cookie) default is session
```

Se você escolher `cookie` como seu repositório, você também pode definir as seguintes opções:

```neon
security:
	authentication:
		# name of cookie
		cookieName: userId            # (string) výchozí je userid

		# which hosts are allowed to receive the cookie
		cookieDomain: 'example.com'  # (string|domain)

		# restrictions when accessing cross-origin request
		cookieSamesite: None          # (Strict|Lax|None) defaults to Lax
```
