Výchozí Latte makra
*******************

.[perex]
Přehled a popis všech maker šablonovacího systému Latte, které jsou vám standardně k dispozici.

Zajímají vás bližší informace o [syntaxi Latte |templating#latte] nebo o [výchozích helperech | default-helpers]? Makra najdete v [namespace Nette\Latte\Macros | api:namespace-Nette\Latte\Macros].

.[wide]
| Výpis proměnných a výrazů ||
|---------------------------
| `{$variable}`                  | [vypíše escapovanou proměnnou |#Vypsání proměnné]
| `{!$variable}`                 | [vypíše proměnnou bez escapování |#Vypsání proměnné]
| `{expression}`                 | [vypíše escapovaný výraz |#Vypsání proměnné]
| `{!expression}`                | [vypíše výraz bez escapování |#Vypsání proměnné]
|---------------------------
| Podmínky ||
|---------------------------
| `{if $cond} … {elseif $cond} … {else} … {/if}`  [podmínka if |#Podmínky] ||
| `{$cond ? $value1 : $value2}`|[ternární operátor |#Podmínky] |
| `{$cond ? $value}`|[zkrácený "ternární" operátor |#Podmínky] |
| `{ifset $var} … {elseifset $var} … {/ifset}`  [podmínka if (isset()) |#Podmínky] ||
| `{ifCurrent $link} … {/ifCurrent}`  |[speciální případ {if} pro aktivní odkaz |#Podmínky]
|---------------------------
| Cykly ||
|---------------------------
| `{foreach $arr as $item} … {/foreach}` | [cyklus foreach |#Cykly]
| `{for expr; expr; expr} … {/for}`      | [cyklus for |#Cykly]
| `{while expr} … {/while}`      | [cyklus while |#Cykly]
| `{continueIf $cond}`           | [podmíněný skok na další iteraci |#Cykly]
| `{breakIf $cond}`              | [podmíněné ukončení cyklu |#Cykly]
| `{first [$mod]} … {/first}`           | [vypsat při prvním průchodu |#Cykly]
| `{last [$mod]} … {/last}`             | [vypsat při posledním průchodu |#Cykly]
| `{sep} … {/sep}`               | [separátor |#Cykly]
|---------------------------
| Proměnné ||
|---------------------------
| `{var $foo = value}`           | [vytvoří proměnnou |#Deklarace proměnných]
| `{default $foo = value}`       | [výchozí proměnnou pokud neexistuje |#Deklarace proměnných]
| `{capture $var} … {/capture}`  | [zachytí blok do proměnné |#Zachytávání do proměnné]
|---------------------------
| Systémové ||
|---------------------------
| `{include 'file.latte'}`       | [načte šablonu z dalšího souboru |#Vložení souboru]
| `{cache $key} … {/cache}`      | [cachuje část šablony |caching#cachovani-v-sablonach]
| `{? expression}`               | [vyhodnotí výraz, ale nevypíše |#Vyhodnocení kódu]
| `{* text komentáře *}`         | komentář, bude odstraněn
| `{syntax mode} … {/syntax}`    | [změna syntaxe maker za běhu |#Změna syntaxe]
| `{use Class}`                  | načte nová makra
| `{l}` nebo `{r}`               | vypíše znak { nebo }
| `{contentType $type}`          | [přepne escapování a pošle HTTP hlavičku |#hlavicka-contenttype]
| `{status $code}`               | [nastaví stavový HTTP kód |#hlavicka-status]
|---------------------------
| Pomocí HTML kodéra ||
|---------------------------
| `n:class`                      |  [chytrý zápis HTML atributu class |#n-class]
| `n:attr`                       |  [chytrý zápis jakéhokoliv HTML atributu |#n-attr]
| `n:tag-if`                     |  Vynechá HTML tag, pokud je podmínka FALSE
|---------------------------
| Překlady ||
|---------------------------
| `{_}Text{/_}`                  | [přeloží text |#Překlady]
| `{_expression}`                | [přeloží výraz a vypíše s escapováním |#Překlady]
| `{!_expression}`               | [přeloží výraz a vypíše bez escapování |#Překlady]
|---------------------------
| Bloky, layouty, dědičnost šablon ||
|---------------------------
| `{block #block}`               | [definuje a hned vykreslí blok |#bloky]
| `{define #block}`              | [definuje blok pro pozdější použití |#bloky]
| `{include #block}`             | [vloží blok |#Vkládání bloků]
| `{includeblock 'file.latte'}`  | [načte bloky z externí šablony |#rozšiřování a dědičnost]
| `{layout 'file.latte'}`        | [určuje soubor s layoutem |#rozšiřování a dědičnost]
| `{extends 'file.latte'}`       | [alias pro {layout} |#rozšiřování a dědičnost]
| `{ifset #block} … {/ifset}`    | [podmínka, zda existuje blok |#bloky]
|---------------------------
| Odkazy ||
|---------------------------
| `n:href`                       | "odkaz používaný v HTML elementech `<a>`":presenters#toc-odkazy-v-sablonach
| `{link Presenter:action}`      | [vygeneruje odkaz |presenters#toc-odkazy-v-sablonach]
| `{plink Presenter:action}`     | [vygeneruje odkaz na presenter |presenters#toc-odkazy-v-sablonach]
|---------------------------
| Ovládací prvky a formuláře ||
|---------------------------
| `{control loginForm}`          | [vykreslí komponentu |#Vykreslování komponent]
| `{form formName} … {/form}`    | [vykreslí značky formuláře |#formuláře]
| `{label fieldName} … {/label}` | [vykreslí popisku formulářového prvku |#formuláře]
| `{input fieldName}`            | [vykreslí formulářový prvek |#formuláře]
| `n:input`                      | [oživí formulářový prvek |#formuláře]
|---------------------------
| AJAX ||
|---------------------------
| `{snippet name} … {/snippet}`  | [výstřižek, který lze odeslat AJAXem |ajax#makro-snippet]
|---------------------------
| Ladění ||
|---------------------------
| `{dump $variable}`             | [dumpuje proměnné do Debugger Bar |#Dumpování proměnných]
| `{debugbreak $cond}`           | [umístí do kódu breakpoint |#debugbreak]



Vypsání proměnné nebo výrazu `{expression}` .{toc: Vypsání proměnné}
----------------------------

**S escapováním:** (eliminuje riziko [Cross Site Scripting |vulnerability-protection#toc-cross-site-scripting-xss]):

/--html
Jméno: {$name} {$surname}<br>
Věk: {date('Y') - $birth}<br>
\--

**Bez escapování** uvedením vykřičníku:

/--html
<div class="article">
	{!$content}

	{!nl2br($notes)}
</div>
\--

Alternativně lze použit zápis s rovnítkem `{=expression}` a `{!=expression}`.

Díky technologií [Context-Aware Escaping | templating|#Context-aware escaping] je mimo jiné možné nativně používat PHP proměnné uvnitř JavaScriptu:

/--php
$template->arr = array(1, 2, 3);
$template->name = 'Jim Beam';
\--

/--html
<script type="text/javascript">
var pole = {$arr};
var name = {$name}; // pozor, zapisuje se bez uvozovek!
</script>
\--



Podmínky `{if $cond} … {/if}`, `{ifCurrent $link}`, `{$cond ? … : …}` .{toc: Podmínky}
---------------------------

Podmínky se chovají stejně, jako jejich protějšky v PHP:

/--html
{if $stock}
	Skladem
{elseif $onWay}
	Na cestě
{else}
	Není dostupné
{/if}
\--

Lze použít i makro `{ifset}`, která kontroluje existenci proměnné a odpovídá zápisu `if (isset($var))`. Makro `{ifset}` lze také použít pro ověření existence [bloků |#bloky].


Výraz v podmínce `{if}` lze uvést také v ukončovací značce, což se hodí v situacích, kdy při otevírání podmínky ještě jeho výsledek neznáme:

/--html
{if}
	<h1>Výpis řádků z databáze</h1>

	{foreach $database->table as $row} ... {/foreach}
{/if $row}
\--

.[caution]
Blok `{if}` s podmínkou v ukončovací značce nepodporuje makro `{elseif}`. Makro `{else}` použít lze.

Značka {ifCurrent destination} pomáhá zjistit, zda-li je cíl odkazu shodný s aktuální stránkou. Pokud odkaz směřuje na stránku, která je zrovna zobrazena, můžeme ho například jinak nastylovat a podobně. Trik je v tom, že při generování odkazu se detekuje, jestli odkaz míří na aktuální stránku. Výsledek pak vrátí $presenter->getCreatedRequest()->hasFlag('current').
/--html
<!-- příklady použití -->
<a href="{link edit, 10}">edituj</a>
<ul class="menu">
    <li><a href="{link Default:default}">...</a></li>
    <li><a href="{link}">...</a></li>
    ...
    <li {ifCurrent Default:default}class="current"{/ifCurrent}><a href="{link Default:default}">...</a></li>

    <!-- rozšíření scope -->
    <li {ifCurrent Default:*}class="current"{/ifCurrent}><a href="{link Default:default}">...</a></li>
</ul>
<!-- znegování -->
{ifCurrent Admin:login}{else}<a href="{link Admin:login}">Přihlašte se!</a>{/ifCurrent}
\--

Ternární operátor ?: vypíše první hodnotu, pokud je podmínka splněna. V opačném případě vypíše hodnotu druhou. Lze použít i ve zkrácené podobě, kdy se za chybějící hodnotu doplní NULL - tj. nevypíše se nic.

/--html
dostupnost: {$stock ? 'Skladem' : 'Není dostupné'}

zkráceně: {$stock ? 'Skladem'}
\--


Cykly `{foreach}`, `{for}`, `{while}`  .{toc: Cykly}
-------------------------

Cykly `foreach`, `for` a `while` se chovají stejně, jako jejich protějšky v PHP.

/--html
{foreach $result as $row}
	<span>{$row->title}</span>
{/foreach}
\--

/--html
{while $row = $result->fetch()}
	<span>{$row->title}</span>
{/while}
\--

/--html
{for $i = 0; $i < 10; $i++}
	<span>Položka {$i}</span>
{/for}
\--

Uvnitř cyklu je inicializovaná proměnná `$iterator`, díky které můžeme zjišťovat užitečné informace o probíhajícím cyklu. [Její API | api:Nette\Iterators\CachingIterator] disponuje čítačem průchodů a metodami zjišťujícími, zda je aktuální průchod sudý, lichý, první nebo poslední:

- `isFirst()` - prochází se cyklem poprvé?
- `isLast()` - jde o poslední průchod?
- `getCounter()` - čítač průchodů cyklem počítaný od jedničky
- `isOdd()` - jde o lichý průchod?
- `isEven()` - jde o sudý průchod?

Objekt `$iterator` má [vlastnosti třídy Nette\Object |php-language-enhancements#properties-gettery-a-settery], proto lze místo `$iterator->isFirst()` psát `$iterator->first` a podobně. Příklad:

/--html
{foreach $rows as $row}
	{if $iterator->first}<table>{/if}

	<tr id="row-{$iterator->counter}">
		<td>{$row->name}</td>
		<td>{$row->email}</td>
	</tr>

	{if $iterator->last}</table>{/if}
{/foreach}
\--

Konstrukci `{if $iterator->first}<table>{/if}` lze nahradit za ekvivalentní `{first}<table>{/first}`, obdobně podmínku s `last` lze zapsat jako `{last}</table>{/last}`.
Makra `{first}` a `{last}` mají nepovinný parametr, který lze využít jako modulo.

/--html
{foreach $rows as $row}
	{first}<table>{/first}
		{first 5}<tr>{/first} {* nový řádek po 5 záznamech *}
			<td>{$row->value}</td>
		{last 5}</tr>{/last}
	{last}</table>{/last}
{/foreach}
\--

A nakonec, ekvivalentem `{if !$iterator->last} … {/if}` (tj. neposlední prvek) je makro `{sep} … {/sep}`. Obvykle jim označíme oddělovač, například čárku mezi vypisovanými položkami, čímž zajistíme, že se nevypíše přebývající pravostranná čárka:

/--html
{foreach $items as $item} {$item} {sep}, {/sep} {/foreach}
\--

Uvnitř cyklu lze používat makra `{continueIf ?}` a `{breakIf ?}`, které přejdou na další prvek resp. ukončí cyklus při splnění podmínky:

/--html
{foreach $rows as $row}
	{continueIf $row->parent == NULL}
	...
{/foreach}
\--

Definici cyklu lze sloučit s definicí obalujícího prvku HTML následujícím způsobem: (vypíše pro každou řádku tag div a jeho vnitřek)
/--html
<div n:foreach="$rows as $row">
	...
</div>
\--
Nebo pomocí vnitřního cyklu opakovat pouze vnitřek tagu: (ul zobrazí jednou, li pro každou řádku)
/--html
<ul n:inner-foreach="$rows as $row">
  <li>
	...
  </li>
</ul>
\--



Deklarace proměnných `{var}` a `{default}` .{toc: Deklarace proměnných}
--------------------

Proměnné můžeme deklarovat přímo v šabloně makrem `{var}`:

/--html
{var $name = 'John Smith'}
{var $age = 27}

{* Vícenásobná deklarace *}
{var $name = 'John Smith', $age = 27}
\--

Makro `{default}` funguje podobně s tím rozdílem, že nastavuje hodnoty jen neexistujícím proměnným:

/--html
{default $lang = 'cs'}
\--



Zachytávání do proměnné `{capture}` .{toc: Zachytávání do proměnné}
-------------------------------

Makrem `{capture}` lze zachytit výstup do proměnné:

/--html
{capture $var}
<ul>
        <li>Hello World</li>
</ul>
{/capture}

<p>Captured: {$var}</p>
\--

Pokud chcete zachytit výstup jen proto, abyste na něj mohli aplikovat nějaký [helper |templating#helpery], je jednodušší helper aplikovat přímo na blok:

/--html
{block|strip}
<ul>
        <li>Hello World</li>
</ul>
{/block}
\--



Vložení souboru `{include}` .{toc: Vložení souboru}
----------------

Do šablony lze vložit jinou šablonu. Vložený soubor má k dispozici globální proměnné aktuální šablony a případné další parametry, které mu při volání předáme:

/--html
{include 'basket.latte'}

{include 'menu.latte', level => 3, data => $menu}
\--

.[note]
Makro `{include}` se kromě vkládání souborů používá i pro [#vkládání bloků].



Vyhodnocení kódu `{? expression}` .{toc: Vyhodnocení kódu}
----------------

Vyhodnotí kód a nic nevypisuje.



Hlavička `{contentType}`
------------------------

Přepne [Context-Aware Escaping |templating#toc-context-aware-escaping] do kontextu určeného argumentem a všechny proměnné se escapují podle pravidel tohoto kontextu. Například `{contentType xml}` přepne do režimu XML, `{contentType text}` escapování zcela vypne.


Pokud je parametrem plnohodnotný MIME type, tak se navíc odešle jako HTTP hlavička do prohlížeče:

/--html
{contentType application/xml}
<?xml version="1.0"?>
<rss version="2.0">
	<channel>
		<title>RSS feed</title>
		<item>
			...
		</item>
	</channel>
</rss>
\--



Hlavička `{status}`
-------------------

Odešle HTTP stavový kód:

/--html
{status 500}
\--

Pokud již nelze hlavičky odeslat, vyhodí výjimku. Té se dá předejít "volitelným odesláním" uvedením otazníku za kód `{status 500?}`.




Změna syntaxe `{syntax}` .{toc: Změna syntaxe}
------

Makra nemusejí být uzavřena výhradně do jednoduchých složených závorek, můžeme si zvolit i jiný oddělovač a to dokonce za běhu. Slouží k tomu makro `{syntax …}`, kde jako parametr lze uvést:

- latte: `{...}`
- double: `{{...}}`
- asp: `<%...%>`
- python: `{% ... %}` a `{{ ... }}`
- off: vypne zpracování maker

S využitím n:maker lze vypnout Latte třeba jen jednomu bloku JavaScriptu:

/--html
<script n:syntax="off">
	var obj = {var: 123}; // tohle neni makro
</script>
\--

Latte je pohodlně použitelné i v JavaScriptu, jen se stačí vyhnout konstrukci uvedené v předchozím příkladu. Buď zápisem mezery za otevírací složenou závorku `{ var: 123}` nebo použitím uvozovek kolem identifikátoru `{'var': 123}`.

Pokud Latte vypnete pomocí `{syntax off}` (tj. makrem syntax, nikoliv n:makrem), mějte na paměti, že ho již zpátky nemůžete zapnout pomocí `{/syntax}`. Žádné složené závorky se nezpracovávají, tudíž ani tag pro ukončení výjimky v syntaxi.


n:class
-------

Potřebujeme vyřešit běžný úkol: vypisujeme data z databáze jako elementy `<li>`, neznáme dopředu jejich počet a chceme, aby každý lichý řádek měl třídu `alt` a poslední třídu `last`. Pokud by byl poslední řádek lichý, má mít obě třídy. A protože jsme puntičkáři, nechceme v kódu žádné prázdné `<li class=" ">` apod.

Díky makru `n:class` tohle zapíšeme neskutečně snadno:

/--html
<ul>
	{foreach $data as $item}
	<li n:class="$iterator->odd ? alt, $iterator->last ? last">{$item}</li>
	{/foreach}
</ul>
\--


Anebo potřebujete označit aktivní menu třídou `current`?
/--html
<a href="#" n:class="$presenter->isLinkCurrent('Presenter:*') ? current">
\--

Úžasné, že?



n:attr
------

Makro `n:attr` umí s elegancí podobnou makru [n:class |#n:class] generovat libovolné HTML atributy. Hodí se především v případech, kdy nevíme, které atributy budeme chtít vypsat a které ne.

/--html
<input type="checkbox" n:attr="value => $value, checked => $checked">
\--

Vypíše v závislosti na hodnotách proměnných `$value` nebo `$checked`:

/--html
<input type="checkbox">

{* $value = 'Hello' *}
<input type="checkbox" value="Hello">

{* $checked = TRUE *}
<input type="checkbox" value="Hello" checked>
\--



Překlady `{_expression}` .{toc: Překlady}
---------------------------------

Makro usnadňuje automatizované překlady v šablonách. Pro jejich správnou funkčnost musí být nastaven překladač, viz [lokalizace |localization#toc-preklad-sablon]:

/--php
$template->setTranslator(new MyTranslator);
\--

Poté bude jakýkoliv výraz zapsaný v tomto makru automaticky přeložen:

/--html
{_$variable}
\--

Pro textové části šablony lze použít párovou variantu:

/--html
{_}Text, který bude přeložen{/_}
\--





Bloky `{block}` a `{define}`  .{toc: Bloky}
-----------------------------

Bloky slouží pro označení libovolné oblasti šablony. Třeba proto, abychom na ni aplikovali volání helperu (viz [příklad |#Zachytávání do proměnné]) nebo proto, abychom ji pojmenovali a mohli poté na jiném místě znovu vložit.

/--html
{block #sidebar}
	<h3>Menu</h3>
	...
{/block}
\--

Bloky lze zanořovat do sebe. A pochopitelně je můžeme zapsat prostřednictvím n:makra:

/--html
{block #sidebar}
	<h3>Menu</h3>
	...

	<ul n:block="menulist">
		...
	</ul>
{/block}
\--

Blok se na svém místě vykreslí. Pokud bychom chtěli pojmenovaný blok jen definovat bez vykreslení, použijeme místo makra `{block}` makro `{define}`.

Název bloku může být také určen proměnnou: `{block $var} … {/block}`.

Každý blok vidí proměnné ze svého okolí. Avšak vytvoření nebo změna hodnoty proměnné uvnitř bloku se projeví pouze v něm (a pochopitelně i ve vnořených blocích).

Existenci bloku můžeme ověřit makrem `{ifset #sidebar}`.



Vkládání bloků `{include #block}`  .{toc: Vkládání bloků}
---------------------------------

Vložení bloku zajistí makro `{include}`. Abychom se odlišili od vkládání souboru, uvedeme před názvem bloku mřížku:

/--html
{include #sidebar}
\--

Při vkládání bloku je možné mu předat parametry:

/--html
{include #sidebar, id => 123, name => $value}
\--

Můžeme vložit i blok, jehož název je uložen v proměnné:

/--html
{include #$block$name}
\--


V bloku lze vložit i sebe sama, což lze použít např. pro vykreslení stromového menu.

/--html
{block #menu}
<ul>
	{foreach $menu as $item}
	<li>{if is_array($item)}
		{include #menu, menu => $item}
	{else}
		{$item}
	{/if}</li>
	{/foreach}
</ul>
{/block}
\--

Místo `{include #menu, ...}` lze psát také `{include #this, ...}`.




Rozšiřování a dědičnost šablon `{layout}` .{toc: Rozšiřování a dědičnost}
-----------------------------

Rozšiřování šablon (též dědičnost šablon) představuje mocný nástroj, který umožňuje snadnou a efektivní tvorbu i velmi komplikovaných layoutů bez nutnosti zbytečného opakování kódu.

Mějme dvě jednoduché stránky. První:

/--html
<html>
	<head>
		<title>První stránka | Můj web</title>
	</head>
	<body>
		<div id="sidebar">
			<ul>...</ul>
		</div>

		<div id="content">
			<p>Lorem Gypsum...</p>
		</div>
	</body>
</html>
\--

A druhou:

/--html
<html>
	<head>
		<title>Druhá stránka | Můj web</title>
	</head>
	<body>
		<div id="sidebar">
			<ul>...</ul>
		</div>

		<div id="content">
			<p>Proin eu sem purus. Donec bibendum
			vestibulum...</p>
		</div>
	</body>
</html>
\--

Stránky se liší pouze elementem `<title>` a `<div#content>`. Vytvoříme si proto layout, ve kterém budou všechny společné části, a vytvoříme tzv. placeholdery. Což kupodivu nebude nic jiného, než klasický blok:

Soubor `@layout.latte`:
/--html
<html>
	<head>
		<title>{block #title}{/block} | Můj web</title>
	</head>
	<body>
		<div id="sidebar">
			<ul>...</ul>
		</div>

		<div id="content">{block #content}{/block}</div>
	</body>
</html>
\--

V jednotlivých šablonách se nyní na layout odkážeme makrem `{layout}` a můžeme je redukovat na ony dva bloky:

/--html
{layout '@layout.latte'}

{block #title}První stránka{/block}

{block #content}<p>Lorem Gypsum...</p>{/block}
\--

Obdobně bude vypadat i stránka druhá.

Nejsme dokonce ani omezeni dvoustupňovým layoutem. Vrstev může být totiž tolik, kolik se nám hodí.




Vykreslování komponent `{control …}` .{toc: Vykreslování komponent}
------------------------------------

Značka `{control}` slouží k vykreslování komponent presenteru. Pro lepší pochopení je dobré vědět, jak se tato značka přeloží do PHP.

/--html
{control cartControl}		pro celý košík na stránce
{control cartControl:small}	pro malý náhledový košík
\--

se přeloží jako:

/--php
$control->getComponent('cartControl')->render();
$control->getComponent('cartControl')->renderSmall();
\--

Metoda `getComponent()` vrací komponentu `cartControl` a nad touto komponentou volá metodu `render()`, resp. `renderSmall()` pokud je jiný způsob renderování uveden ve značce za dvojtečkou.

Lze použít i volání s parametry, které se předají render metodám, například:

/--html
{control cartControl:small, $maxItems}
\--

se přeloží jako:

/--php
$control->getComponent('cartControl')->renderSmall($maxItems);
\--



Formuláře `{form}`, `{input}`, `{label}` .{toc: Formuláře}
--------------------

Makra usnadňují vykreslení [formulářů |forms] a jejich prvků:

/--html
{form myForm}
<table>
<tr n:foreach="$form->controls as $name => $field">
	<th>{label $name /}<th>
	<td>{input $name}</td>
</tr>
</table>
{/form}
\--

Makro `{input}` vykreslí jakýkoliv prvek, včetně select boxů nebo textarea. Makro `{label}` může být volitelně párové, např. `{label}Věk{/label}`, a ohraničený text bude u [vícejazyčných formulářů |forms#vicejazycne-formulare] také přeložen.

/--comment
Pokud potřebuje formuláře naroubovat na existující HTML kód, můžeme využít makro `n:input`, které zaktivní existující prvky v šabloně:

 /--html
{form myForm}
	<p>Jméno: <input size="50" n:input="name"></p>
	<p>Heslo: <input size="30" n:input="password"></p>
{/form}
\--



Dumpování proměnných `{dump}` .{toc: Dumpování proměnných}
-----------------------------

/--html
{dump $name} {* Vypíše proměnnou $name *}

{dump}       {* Vypíše všechny aktuálně definované proměnné *}
\--


Break point `{debugbreak}` .{toc: debugbreak}
--------------------------

Určuje místo, kde dojde k zastavení vykonávání programu. Používá se při ladění, aby mohl programátor provést inspekci běhového prostředí a zjistil, zda program funguje podle očekávání. Podporován je [Xdebug |http://xdebug.org] a [PhpEd |http://www.nusphere.com/products/php_debugger.htm]. Lze doplnit podmínku, která určuje, kdy má být program zastaven.

/--html
{debugbreak} {* Zastaví program *}

{debugbreak $counter == 1}  {* Zastaví program při splnění podmínky *}
\--
