ラテのタグ
*****

.[perex]
Latte内蔵の全タグの概要と説明。

.[table-latte-tags language-latte]
|## 印刷
|`{$var}`,`{...}` or`{=...}` |[エスケープされた変数や式を印刷します。|#printing]
|`{$var\|filter}` |[フィルタリングして印刷する|#filters]
|`{l}` または`{r}` |`{` or `}` の文字を表示します。

.[table-latte-tags language-latte]
|## 条件
|`{if}`...`{elseif}`...`{else}`...`{/if}` | [条件 if |#if-elseif-else]
|`{ifset}`...`{elseifset}`...`{/ifset}` |[条件 ifset |#ifset-elseifset]
|`{ifchanged}`...`{/ifchanged}` |[変化があったかどうかのテスト|#ifchanged]
|`{switch}` `{case}` `{default}` `{/switch}` |[条件スイッチ |#switch-case-default]

.[table-latte-tags language-latte]
|## ループ
|`{foreach}`...`{/foreach}` |[foreach |#foreach]
|`{for}`...`{/for}` |[for |#for]
|`{while}`...`{/while}` |[while |#while]
|`{continueIf $cond}` |[次の反復に進む |#continueif-skipif-breakif]
|`{skipIf $cond}` |[現在のループの反復をスキップする|#continueif-skipif-breakif]
|`{breakIf $cond}` |[ループを 中断|#continueif-skipif-breakif]
|`{exitIf $cond}` |[早期終了 |#exitif]
|`{first}`...`{/first}` |[最初のイテレーションか？ |#first-last-sep]
|`{last}`...`{/last}` |[それは最後の反復ですか？|#first-last-sep]
|`{sep}`...`{/sep}` |[次の反復が続くか？|#first-last-sep]
|`{iterateWhile}`...`{/iterateWhile}` |[構造化されたforeach |#iterateWhile]
|`$iterator` |[foreachループ内の特殊変数 |#$iterator]

.[table-latte-tags language-latte]
|## 他のテンプレートをインクルードする
|`{include 'file.latte'}` |[他のファイルからテンプレートをインクルードする|#include]
|`{sandbox 'file.latte'}` |[サンドボックスモードでテンプレートをインクルードする|#sandbox]

.[table-latte-tags language-latte]
|## ブロック、レイアウト、テンプレートの継承
|`{block}` |[匿名ブロック |#block]
|`{block blockname}` |[ブロックの定義 |template-inheritance#blocks]
|`{define blockname}` |[将来使用するブロックの定義 |template-inheritance#definitions]
|`{include blockname}` |[ブロックを印刷する|template-inheritance#printing-blocks]
|`{include blockname from 'file.latte'}` |[ファイルからのブロックの印刷|template-inheritance#printing-blocks]
|`{import 'file.latte'}` |[別のテンプレートからブロックをロードする|template-inheritance#horizontal-reuse]
|`{layout 'file.latte'}` /`{extends}` |[レイアウトファイルの指定 |template-inheritance#layout-inheritance]
|`{embed}`...`{/embed}` |[テンプレートまたはブロックをロードし、ブロックを上書きすることができます。|template-inheritance#unit-inheritance]
|`{ifset blockname}`...`{/ifset}` |[ブロックが定義されている場合の条件 |template-inheritance#checking-block-existence]

.[table-latte-tags language-latte]
|## 例外処理
|`{try}`...`{else}`...`{/try}` |[例外をキャッチする |#try]
|`{rollback}` |[トライブロックを破棄する|#rollback]

.[table-latte-tags language-latte]
|## 変数
|`{var $foo = value}` |[変数の作成 |#var-default]
|`{default $foo = value}` |[変数が宣言されていないときのデフォルト値 |#var-default]
|`{parameters}` | [変数の宣言、デフォルト値のタイプ|#parameters]
|`{capture}`...`{/capture}` |[セクションを変数に取り込む |#capture]

.[table-latte-tags language-latte]
|## タイプ
|`{varType}` |[変数のタイプを宣言|type-system#varType]
|`{varPrint}` |[変数の種類を提案する|type-system#varPrint]
|`{templateType}` |[クラスを使った変数の型の宣言|type-system#templateType]
|`{templatePrint}` |[プロパティを含むクラスを生成 |type-system#templatePrint]

.[table-latte-tags language-latte]
|## 翻訳
|`{_string}` |[翻訳された内容を表示する |#Translation]
|`{translate}`...`{/translate}` |[内容を 翻訳する|#Translation]

.[table-latte-tags language-latte]
|## その他
|`{contentType}` |[エスケープモードを切り替え、HTTPヘッダを送信 します。|#contenttype]
|`{debugbreak}` |[コードにブレークポイントを設定 します。|#debugbreak]
|`{do}` |[式を表示せずに評価 する|#do]
|`{dump}` |[トレイシーバーに変数をダンプ する|#dump]
|`{php}` |[任意のPHPコードを実行する |#php]
|`{spaceless}`...`{/spaceless}` |[不要な空白を削除する|#spaceless]
|`{syntax}` |[実行時に構文を切り替えます。|#syntax]
|`{trace}` |[スタックトレースを表示する|#trace]

.[table-latte-tags language-latte]
|## HTMLタグヘルパー
|`n:class` |[スマートなクラス属性|#n:class]
|`n:attr` | [スマートなHTML属性 |#n:attr]
|`n:tag` |[HTML 要素の動的な名前 |#n:tag]
|`n:ifcontent` |[空の HTML タグを省略する|#n:ifcontent]

.[table-latte-tags language-latte]
|## Nette Framework のみで利用可能
|`n:href` |[`<a>` HTML要素内のリンク |application:en:creating-links#In the Presenter Template]
|`{link}` |[リンクを表示する|application:en:creating-links#In the Presenter Template]
|`{plink}` |[プレゼンターへのリンクを表示する|application:en:creating-links#In the Presenter Template]
|`{control}` |[コンポーネントを表示します|application:en:components#Rendering]
|`{snippet}`...`{/snippet}` |[AJAXで送信可能なテンプレートスニペット |application:en:ajax#tag-snippet]
|`{snippetArea}` | スニペットの封筒
|`{cache}`...`{/cache}` |[テンプレートセクションをキャッシュする|caching:en#caching-in-latte]

.[table-latte-tags language-latte]
|## Nette Forms のみで利用可能
|`{form}`...`{/form}` |[フォームエレメントを表示します。|forms:en:rendering#form]
|`{label}`...`{/label}` |[フォーム入力ラベルを表示します。|forms:en:rendering#label-input]
|`{input}` |[フォーム入力要素を表示します。|forms:en:rendering#label-input]
|`{inputError}` | [フォーム入力要素のエラーメッセージを表示します。|forms:en:rendering#inputError]
|`n:name` |[HTML入力要素をアクティブにする|forms:en:rendering#n:name]
|`{formPrint}` |[ラテ型フォームの青写真を生成する|forms:en:rendering#formPrint]
|`{formPrintClass}` |[フォームデータのための PHP クラスを表示する|forms:en:in-presenter#mapping-to-classes]
|`{formContext}`...`{/formContext}` |[フォームの部分的なレンダリング |forms:en:rendering#special-cases]
|`{formContainer}`...`{/formContainer}` |[フォームコンテナのレンダリング |forms:en:rendering#special-cases]


印刷 .[#toc-printing]
===================


`{$var}` `{...}` `{=...}`
-------------------------

Latteでは、`{=...}` タグを使って、任意の式を出力しています。式の先頭が変数や関数呼び出しの場合、等号を書く必要はありません。つまり、実際には、ほとんど書く必要がないのです。

```latte
Name: {$name} {$surname}<br>
Age: {date('Y') - $birth}<br>
```

PHP で知っていることは何でも式として書くことができます。新しい言語を学ぶ必要がないだけです。例えば


```latte
{='0' . ($num ?? $num * 3) . ', ' . PHP_VERSION}
```

前の例で意味を探さないでください。もしそこで意味を見つけたら、私たちに書いてください :-)


エスケープ出力 .[#toc-escaping-output]
-------------------------------

テンプレートシステムの最も重要なタスクは何ですか？セキュリティホールを回避することです。そして、それはまさにLatteが出力に何かを印刷するときに行うことです。それは自動的にすべてをエスケープします。

```latte
<p>{='one < two'}</p>   {* prints: '<p>one &lt; two</p>' *}
```

正確には、Latteは文脈依存のエスケープを行います。これは非常に重要かつユニークな機能なので、[別の章を設けて |safety-first#context-aware-escaping] 解説しています。

また、HTMLコード化されたコンテンツを信頼できるところから印刷する場合は？それなら簡単にエスケープをオフにすることができます。

```latte
{$trustedHtmlString|noescape}
```

.[warning]
`noescape` フィルタを誤用すると、XSS 脆弱性につながる可能性があります!自分が何をしているのか、そして印刷する文字列が信頼できるソースから来たものであることが **絶対に** 確実でない限り、決してこれを使用しないでください。


JavaScriptで印刷する .[#toc-printing-in-javascript]
----------------------------------------------

文脈依存のエスケープのおかげで、JavaScriptの内部で変数を印刷するのは驚くほど簡単で、Latteはそれらを適切にエスケープします。

変数は文字列である必要はなく、どんなデータ型にも対応し、JSONとしてエンコードされます。

```latte
{var $foo = ['hello', true, 1]}
<script>
	alert({$foo});
</script>
```

を生成します。

```latte
<script>
	alert(["hello", true, 1]);
</script>
```

これは、**変数を引用符で囲まないでください**という理由でもあります。ラテは文字列を引用符で囲みます。また、文字列の変数を別の文字列に入れたい場合は、単純に連結してください。

```latte
<script>
	alert('Hello ' + {$name} + '!');  // OK

	alert({="Hello $name!"});         // OK

	alert('Hello {$name} !');         // ERROR!
</script>
```


フィルタ .[#toc-filters]
--------------------

印刷された式は、[フィルターによって |syntax#filters]変更することができます。例えば、この例では文字列を大文字に変換し、最大30文字に短縮しています。

```latte
{$string|upper|truncate:30}
```

また、以下のように式の一部にフィルタを適用することもできます。

```latte
{$left . ($middle|upper) . $right}
```


条件 .[#toc-conditions]
=====================


`{if}` `{elseif}` `{else}`
--------------------------

条件は、PHP の条件と同じように動作します。PHP でおなじみの表現が使えるので、新しい言語を学ぶ必要はありません。

```latte
{if $product->inStock > Stock::Minimum}
	In stock
{elseif $product->isOnWay()}
	On the way
{else}
	Not available
{/if}
```

他のペアタグと同様に、`{if} ... {/ if}` のペアは、例えば[n:attribute |syntax#n:attributes] のように書くことができます。

```latte
<p n:if="$count > 0">In stock {$count} items</p>
```

n:attributesに接頭辞`tag-` を付けることができることをご存知でしょうか？この場合、HTMLタグにのみ影響を与え、その間の内容は常に印刷されます。

```latte
<a href="..." n:tag-if="$clickable">Hello</a>

{* prints 'Hello' when $clickable is falsey *}
{* prints '<a href="...">Hello</a>' when $clickable is truthy *}
```

いいですね。


`{/if $cond}`
-------------

`{if}` 条件の式も終了タグで指定できることに驚かれたかもしれません。これは、タグが開かれたときに、まだ条件の値がわからないような場合に便利です。遅延判定とでも言いましょうか。

たとえば、データベースからレコードを取得してテーブルのリストアップを開始し、レポートが完成した後で、データベースにレコードがないことに気がついたとします。そこで、終了タグ`{/if}` に条件を入れて、レコードがなければ、何も印刷されないようにします。

```latte
{if}
	<h1>Printing rows from the database</h1>

	<table>
	{foreach $resultSet as $row}
		...
	{/foreach}
	</table>
{/if isset($row)}
```

便利でしょう？

繰延条件では`{else}` も使えますが、`{elseif}` は使えません。


`{ifset}` `{elseifset}`
-----------------------

.[note]
参照 [`{ifset block}` |template-inheritance#checking-block-existence]

変数（あるいは複数の変数）が存在し、かつ非 null 値であるかどうかを調べるには、`{ifset $var}` 条件を使用します。これは、実際にはPHPの`if (isset($var))` と同じです。他のペアタグと同様に、[n:attributeの |syntax#n:attributes]形式で書くことができますので、例で紹介しましょう。

```latte
<meta name="robots" content="{$robots}" n:ifset="$robots">
```


`{ifchanged}` .{data-version:2.9}
---------------------------------

`{ifchanged}` は、ループ（foreach、for、while）内の最後の反復から、変数の値が変化したかどうかをチェックします。

タグの中で1つ以上の変数を指定すると、それらの変数のいずれかが変更されたかどうかをチェックし、それに応じて内容を表示します。たとえば、次の例では、名前をリストアップするときに、変更されるたびに名前の最初の文字を見出しとしてプリントしています。

```latte
{foreach ($names|sort) as $name}
	{ifchanged $name[0]} <h2>{$name[0]}</h2> {/ifchanged}

	<p>{$name}</p>
{/foreach}
```

しかし、引数が与えられない場合は、レンダリングされた内容そのものが以前の状態と照らし合わされる。つまり、先ほどの例では、タグの引数を省略しても大丈夫ということです。また、もちろん[n:attributeを |syntax#n:attributes]使うこともできます。

```latte
{foreach ($names|sort) as $name}
	<h2 n:ifchanged>{$name[0]}</h2>

	<p>{$name}</p>
{/foreach}
```

の中に`{else}` 節を入れることもできます。`{ifchanged}`.


`{switch}` `{case}` `{default}`
-------------------------------
値を複数のオプションと比較します。これは、PHPでおなじみの`switch` の構造に似ています。しかし、Latteではそれを改良しています。

- 厳密な比較を行う (`===`)
- は必要ありません。`break`

つまり、PHP 8.0が搭載している`match` 構造とまったく同じものです。

```latte
{switch $transport}
	{case train}
		By train
	{case plane}
		By plane
	{default}
		Differently
{/switch}
```
.{data-version:2.9}
節`{case}` は、カンマで区切られた複数の値を含むことができます。

```latte
{switch $status}
{case $status::New}<b>new item</b>
{case $status::Sold, $status::Unknown}<i>not available</i>
{/switch}
```


ループ .[#toc-loops]
=================

Latteでは、PHPでおなじみのforeach、for、whileといったループが利用可能です。


`{foreach}`
-----------

サイクルはPHPと全く同じように書きます。

```latte
{foreach $langs as $code => $lang}
	<span>{$lang}</span>
{/foreach}
```

さらに、これから説明するような便利な調整もあるそうです。

例えば、ラテは作成した変数が誤って同じ名前のグローバル変数を上書きしないようにチェックしています。これは、`$lang` がそのページの現在の言語であると仮定したときに、`foreach $langs as $lang` がその変数を上書きしてしまったことに気づかなかったときの救いになります。

foreachループも[n:attributeを |syntax#n:attributes]使えば非常にエレガントかつ経済的に書くことができる。

```latte
<ul>
	<li n:foreach="$items as $item">{$item->name}</li>
</ul>
```

n:attributeの前に`inner-` というプレフィックスを付けることができることをご存知ですか？これで、ループの中で要素の内側の部分だけが繰り返されるようになります。

```latte
<div n:inner-foreach="$items as $item">
	<h4>{$item->title}</h4>
	<p>{$item->description}</p>
</div>
```

というわけで、次のような感じでプリントされます。

```latte
<div>
	<h4>Foo</h4>
	<p>Lorem ipsum.</p>
	<h4>Bar</h4>
	<p>Sit dolor.</p>
</div>
```


`{else}` .{data-version:2.9}{toc: foreach-else}
-----------------------------------------------

`foreach` ループでは、オプションで`{else}` 節を指定することができ、そのテキストは与えられた配列が空の場合に表示されます。

```latte
<ul>
	{foreach $people as $person}
		<li>{$person->name}</li>
	{else}
		<li><em>Sorry, no users in this list</em></li>
	{/foreach}
</ul>
```


`$iterator`
-----------

`foreach` ループの内部では、変数`$iterator` が初期化されます。これは、現在のループに関する重要な情報を保持します。

-`$iterator->first` - これは最初の反復処理か？
-`$iterator->last` - これは最後の反復処理ですか？
-`$iterator->counter` - 反復カウンタ、1 から始まる。
-`$iterator->counter0` - 反復カウンタ、0から開始。 .{data-version:2.9}
-`$iterator->odd` - この反復は奇数ですか？
-`$iterator->even` - この反復は偶数か？
-`$iterator->parent` - 現在のイテレータを囲むイテレータ .{data-version:2.9}
-`$iterator->nextValue` - ループ内の次のアイテム
-`$iterator->nextKey` - ループ内の次のアイテムのキー


```latte
{foreach $rows as $row}
	{if $iterator->first}<table>{/if}

	<tr id="row-{$iterator->counter}">
		<td>{$row->name}</td>
		<td>{$row->email}</td>
	</tr>

	{if $iterator->last}</table>{/if}
{/foreach}
```

ラテは賢く、`$iterator->last` 配列だけでなく、事前に項目数が分からない一般的なイテレータ上でループを実行する場合にも有効です。


`{first}` `{last}` `{sep}`
--------------------------

これらのタグは、`{foreach}` のループの中で使用することができます。`{first}` のコンテンツは、最初のパスでレンダリングされます。
`{last}` のコンテンツがレンダリングされる......わかるかな？そう、最後のパスです。これらは実は、`{if $iterator->first}` と`{if $iterator->last}` のショートカットです。

タグは[n:attributesと |syntax#n:attributes]書くこともできる．

```latte
{foreach $rows as $row}
	{first}<h1>List of names</h1>{/first}

	<p>{$row->name}</p>

	<hr n:last>
{/foreach}
```

`{sep}` の内容は、反復が最後でない場合にレンダリングされるので、リストされた項目の間にカンマなどの区切り文字を印刷するのに適しています。

```latte
{foreach $items as $item} {$item} {sep}, {/sep} {/foreach}
```

かなり実用的ですね。


`{iterateWhile}` .{data-version:2.10}
-------------------------------------

条件を満たす限りネストしたループで反復処理を行うことで、foreachループでの反復処理中の線形データのグループ化を簡略化します。[クックブックの |cookbook/iteratewhile]説明をお読みください。

また、上の例の`{first}` と`{last}` をエレガントに置き換えることができます。

```latte
{foreach $rows as $row}
	<table>

	{iterateWhile}
	<tr id="row-{$iterator->counter}">
		<td>{$row->name}</td>
		<td>{$row->email}</td>
	</tr>
	{/iterateWhile true}

	</table>
{/foreach}
```


`{for}`
-------

サイクルはPHPと全く同じように書きます。

```latte
{for $i = 0; $i < 10; $i++}
	<span>Item #{$i}</span>
{/for}
```

タグは[n:attributeと |syntax#n:attributes]書くこともできる。

```latte
<h1 n:for="$i = 0; $i < 10; $i++">{$i}</h1>
```


`{while}`
---------

ここでも、PHPと全く同じ方法でサイクルを書きます。

```latte
{while $row = $result->fetch()}
	<span>{$row->title}</span>
{/while}
```

あるいは[n:attributeの |syntax#n:attributes]ように。

```latte
<span n:while="$row = $result->fetch()">
	{$row->title}
</span>
```

終了タグに条件を指定するバリアントは、PHP の do-while ループに相当します。

```latte
{while}
	<span>{$item->title}</span>
{/while $item = $item->getNext()}
```


`{continueIf}` `{skipIf}` `{breakIf}`
-------------------------------------

ループを制御するために使用できる特別なタグがあります。`{continueIf ?}` と`{breakIf ?}` はそれぞれ、条件が満たされた場合に次の反復処理にジャンプし、ループを終了させるものです。

```latte
{foreach $rows as $row}
	{continueIf $row->date < $now}
	{breakIf $row->parent === null}
	...
{/foreach}
```

.{data-version:2.9}
タグ`{skipIf}` は`{continueIf}` と非常によく似ていますが、カウンターをインクリメントしません。したがって、`$iterator->counter` を表示して、いくつかの項目をスキップしても、番号付けに穴が開くことはありません。また、{else}句はすべての項目をスキップするときに表示されます。

```latte
<ul>
	{foreach $people as $person}
		{skipIf $person->age < 18}
		<li>{$iterator->counter}. {$person->name}</li>
	{else}
		<li><em>Sorry, no adult users in this list</em></li>
	{/foreach}
</ul>
```


`{exitIf}` .{data-version:3.0.5}
--------------------------------

ある条件が満たされたとき、テンプレートまたはブロックのレンダリングを終了します（すなわち、「早期終了」）。

```latte
{exitIf !$messages}

<h1>Messages</h1>
<div n:foreach="$messages as $message">
   {$message}
</div>
```


テンプレートを含む .[#toc-including-templates]
=====================================


`{include 'file.latte'}` .{toc: include}
----------------------------------------

.[note]
参照 [`{include block}` |template-inheritance#printing-blocks]

`{include}` タグは、指定されたテンプレートを読み込み、レンダリングします。私たちの大好きなPHP言語では、次のような感じです。

```php
<?php include 'header.phtml'; ?>
```

インクルードされたテンプレートは、アクティブなコンテキストの変数にはアクセスできませんが、グローバル変数にはアクセスできます。

挿入されたテンプレートには、以下の方法で変数を渡すことができます：

```latte
{* since Latte 2.9 *}
{include 'template.latte', foo: 'bar', id: 123}

{* before Latte 2.9 *}
{include 'template.latte', foo => 'bar', id => 123}
```

テンプレート名には、任意の PHP 式を指定することができます。

```latte
{include $someVar}
{include $ajax ? 'ajax.latte' : 'not-ajax.latte'}
```

挿入される内容は、[フィルタを用いて |syntax#filters]変更することができます。次の例は、すべての HTML を削除し、大文字小文字を調整するものです。

```latte
<title>{include 'heading.latte' |stripHtml|capitalize}</title>
```

[テンプレートの継承は |template inheritance]**デフォルトではこれに関与しません**。インクルードされたテンプレートにブロックタグを追加することはできますが、インクルードされたテンプレート内の一致するブロックを置き換えることはありません。インクルードを、ページやモジュールの独立した、シールドされた部分として考えてください。この動作は、モディファイア`with blocks` （Latte 2.9.1以降）を使って変更することができます。

```latte
{include 'template.latte' with blocks}
```

タグで指定されたファイル名とディスク上のファイルとの関係は、[ローダーの |extending-latte#Loaders]問題です。


`{sandbox}` .{data-version:2.8}
-------------------------------

エンドユーザーが作成したテンプレートをインクルードする場合、サンドボックス化を検討する必要があります（詳細は[サンドボックスのドキュメントを |sandbox]参照してください）。

```latte
{sandbox 'untrusted.latte', level: 3, data: $menu}
```


`{block}`
=========

.[note]
こちらもご覧ください [`{block name}` |template-inheritance#blocks]

名前のないブロックは、テンプレートの一部に[フィルタを |syntax#filters]適用する機能を提供します。例えば、[ストリップ |filters#strip]フィルターを適用して不要なスペースを削除することができます。

```latte
{block|strip}
<ul>
	<li>Hello World</li>
</ul>
{/block}
```


例外処理 .[#toc-exception-handling]
===============================


`{try}` .{data-version:2.9}
---------------------------

このタグを使うと、非常に簡単に堅牢なテンプレートを構築することができます。

`{try}` ブロックのレンダリング中に例外が発生した場合、ブロック全体がスローされ、その後にレンダリングが続行されます。

```latte
{try}
	<ul>
		{foreach $twitter->loadTweets() as $tweet}
  			<li>{$tweet->text}</li>
		{/foreach}
	</ul>
{/try}
```

オプションの節`{else}` の内容は、例外が発生したときだけレンダリングされる。

```latte
{try}
	<ul>
		{foreach $twitter->loadTweets() as $tweet}
  			<li>{$tweet->text}</li>
		{/foreach}
	</ul>
	{else}
	<p>Sorry, the tweets could not be loaded.</p>
{/try}
```

このタグは[n:attributeと |syntax#n:attributes]書くこともできる．

```latte
<ul n:try>
	...
</ul>
```

また、ロギングなどのための[例外ハンドラを独自 |develop#exception handler]に定義することも可能です。


`{rollback}` .{data-version:2.9}
--------------------------------

`{try}` ブロックは、`{rollback}` を使って手動で停止したり、スキップしたりすることもできます。そのため、事前にすべての入力データをチェックする必要はなく、レンダリング中にのみ、オブジェクトをレンダリングすることに意味があるかどうかを判断することができます。

```latte
{try}
<ul>
	{foreach $people as $person}
 		{skipIf $person->age < 18}
 		<li>{$person->name}</li>
	{else}
		{rollback}
	{/foreach}
</ul>
{/try}
```


変数 .[#toc-variables]
====================


`{var}` `{default}`
-------------------

`{var}` タグを使用して、テンプレート内に新しい変数を作成することにします。

```latte
{var $name = 'John Smith'}
{var $age = 27}

{* Multiple declaration *}
{var $name = 'John Smith', $age = 27}
```

`{default}` タグも同様に動作しますが、変数が存在しない場合にのみ変数を作成する点が異なります。

```latte
{default $lang = 'cs'}
```

Latte 2.7では、[変数の種類を |type-system]指定することもできます。Latte 2.7では、変数の型も指定できます。今のところ、これらは情報提供であり、Latteはこれらをチェックしません。

```latte
{var string $name = $article->getTitle()}
{default int $id = 0}
```


`{parameters}` .{data-version:2.9}
----------------------------------

関数がパラメータを宣言するのと同じように，テンプレートもその先頭で変数を宣言することができます．

```latte
{parameters
	$a,
	?int $b,
	int|string $c = 10
}
```

デフォルト値のない変数`$a` と`$b` は自動的にデフォルト値`null` を持ちます．宣言された型はまだ参考値であり，Latteはそれをチェックしません．

その他、宣言された変数はテンプレートに渡されません。この点は`{default}` タグとの違いです。


`{capture}`
-----------

`{capture}` タグを使用することで、出力を変数に取り込むことができます。

```latte
{capture $var}
<ul>
	<li>Hello World</li>
</ul>
{/capture}

<p>Captured: {$var}</p>
```

タグは[n:attributeと |syntax#n:attributes]書くこともできる。

```latte
<ul n:capture="$var">
	<li>Hello World</li>
</ul>
```


その他 .[#toc-others]
==================


`{contentType}`
---------------

タグを使用して、テンプレートが表すコンテンツの種類を指定します。オプションは以下の通りです。

-`html` (デフォルトのタイプ)
-`xml`
-`javascript`
-`css`
-`calendar` (iCal)
-`text`

この機能は，[文脈に応じたエスケープを |safety-first#context-aware-escaping]設定し，Latteが正しくエスケープできるようにするために重要です．例えば、`{contentType xml}` はXMLモードに切り替わり、`{contentType text}` はエスケープを完全にオフにします。

パラメータが`application/xml` のようなフル機能の MIME タイプの場合、ブラウザに HTTP ヘッダ`Content-Type` も送信します。

```latte
{contentType application/xml}
<?xml version="1.0"?>
<rss version="2.0">
	<channel>
		<title>RSS feed</title>
		<item>
			...
		</item>
	</channel>
</rss>
```


`{debugbreak}`
--------------

コードの実行が中断される場所を指定します。プログラマが実行環境を検査し、コードが期待通りに実行されることを確認するためのデバッグ目的で使用されます。[Xdebugに |https://xdebug.org]対応しています。さらに、コードがブレークする条件を指定することができます。

```latte
{debugbreak}                {* breaks the program *}

{debugbreak $counter == 1}  {* breaks the program if the condition is met *}
```


`{do}`
------

PHPコードを実行し、何も表示しません。他のタグと同様に、PHPコードは単一の式です。[PHPの制限を |syntax#PHP Limitations in Latte]参照してください。

```latte
{do $num++}
```


`{dump}`
--------

変数または現在のコンテキストをダンプします。

```latte
{dump $name} {* dumps the $name variable *}

{dump}       {* dumps all the defined variables *}
```

.[caution]
[Tracy |tracy:en] パッケージが必要です。


`{php}`
------

任意の PHP コードを実行できるようにします。このタグは[RawPhpExtension |develop#RawPhpExtension]エクステンションを使用してアクティブにする必要があります。


`{spaceless}`
-------------

不要な空白を削除する。[スペースレスフィルタと似て |filters#spaceless]いる。

```latte
{spaceless}
	<ul>
		<li>Hello</li>
	</ul>
{/spaceless}
```

出力は

```latte
<ul> <li>Hello</li> </ul>
```

タグは、[n:attributeと |syntax#n:attributes]書くこともできる。


`{syntax}`
----------

ラテタグは中括弧だけで囲む必要はありません。実行時であっても、別のセパレータを選択することができます。これは、`{syntax…}` 、パラメータにすることができます。

- doubleとする。 `{{...}}`
- off: Latteタグを完全に無効にする

n:attributeという記法を用いると、JavaScriptのブロックに対してのみLatteを無効にすることができます。

```latte
<script n:syntax="off">
	var obj = {var: 123}; // this isn't a tag any more
</script>
```

JavaScriptでもLatteは快適に使えますが、この例のように`{`の直後に文字が来るような構成は避けてください、詳しくは[JavaScriptやCSSでのLatteを |recipes#Latte inside JavaScript or CSS]ご覧ください。

`{syntax off}` (つまりn:属性ではなくタグ)でLatteをオフにすると、`{/syntax}` までのタグは厳密に無視されます。


{trace} .{data-version:2.10}
----------------------------

`Latte\RuntimeException` 例外をスローします。そのスタックトレースはテンプレートの精神に則っています。したがって、関数やメソッドを呼び出す代わりに、ブロックを呼び出したり、テンプレートを挿入することになります。[Tracyの |tracy:en]ようなスローされた例外を明確に表示するツールを使用すると、渡されたすべての引数を含むコールスタックを明確に見ることができます。


HTMLタグヘルパー .[#toc-html-tag-helpers]
===================================


n:class .[#toc-n-class]
-----------------------

`n:class` のおかげで、必要な HTML 属性`class` を正確に生成することが非常に簡単になりました。

例を挙げましょう。active 要素に`active` というクラスが必要です。

```latte
{foreach $items as $item}
	<a n:class="$item->isActive() ? active">...</a>
{/foreach}
```

さらに、最初の要素に`first` と`main` というクラスを持たせる必要があります。

```latte
{foreach $items as $item}
	<a n:class="$item->isActive() ? active, $iterator->first ? 'first main'">...</a>
{/foreach}
```

そして、すべての要素が`list-item` クラスを持つ必要があります。

```latte
{foreach $items as $item}
	<a n:class="$item->isActive() ? active, $iterator->first ? 'first main', list-item">...</a>
{/foreach}
```

驚くほどシンプルでしょう？


n:attr .[#toc-n-attr]
---------------------

`n:attr` 属性は[n:class |#n:class] と同じエレガンスを持った任意の HTML 属性を生成することができます。

```latte
{foreach $data as $item}
	<input type="checkbox" n:attr="value: $item->getValue(), checked: $item->isActive()">
{/foreach}
```

返された値に応じて、例えば次のように表示します。

```latte
<input type="checkbox">

<input type="checkbox" value="Hello">

<input type="checkbox" value="Hello" checked>
```


n:タグ .[#toc-n-tag]
------------------

`n:tag` 属性は、HTML 要素の名前を動的に変更することができます。

```latte
<h1 n:tag="$heading" class="main">{$title}</h1>
```

もし`$heading === null` 、その `<h1>`タグは変更されずに表示されます。そうでない場合は、要素名を変数の値に変更するので、`$heading === 'h3'` の場合は、次のように書きます。

```latte
<h3 class="main">...</h3>
```


n:ifcontent .[#toc-n-ifcontent]
-------------------------------

空の HTML 要素、つまり空白しか含まない要素が表示されないようにします。

```latte
<div>
	<div class="error" n:ifcontent>{$error}</div>
</div>
```

変数`$error` の値によって、印刷されます。

```latte
{* $error = '' *}
<div>
</div>

{* $error = 'Required' *}
<div>
	<div class="error">Required</div>
</div>
```


翻訳 .[#toc-translation]
======================

翻訳タグを動作させるには、[トランスレータを |develop#TranslatorExtension]設定する必要があります。また、翻訳用の [`translate` |filters#translate]フィルタを使用して翻訳することもできます。


`{_...}`
--------

値を他の言語に翻訳します。

```latte
<a href="basket">{_'Basket'}</a>
<span>{_$item}</span>
```

他のパラメータもトランスレータに渡すことができます。

```latte
<a href="basket">{_'Basket', domain: order}</a>
```


`{translate}`
-------------

Překládá části šablony:

```latte
<h1>{translate}Order{/translate}</h1>

{translate domain: order}Lorem ipsum .. .{/translate}
```

タグは、要素の内部を翻訳するために、[n:attributeと |syntax#n:attributes]記述することも可能です。

```latte
<h1 n:translate>Order</h1>
```
