Transaktionen
*************

.[perex]
Transaktionen garantieren, dass entweder alle Operationen innerhalb der Transaktion ausgeführt werden oder keine einzige. Sie sind nützlich, um die Datenkonsistenz bei komplexeren Operationen sicherzustellen.


Grundlegende Verwendung
=======================

Die einfachste Art, Transaktionen zu verwenden, sieht so aus:

```php
$db->beginTransaction();
try {
    $db->query('DELETE FROM articles WHERE id = ?', $id);
    $db->query('INSERT INTO audit_log', [
        'article_id' => $id,
        'action' => 'delete'
    ]);
    $db->commit();
} catch (\Exception $e) {
    $db->rollBack();
    throw $e;
}
```

Viel eleganter können Sie dasselbe mit der Methode `transaction()` schreiben:

```php
$db->transaction(function ($db) use ($id) {
    $db->query('DELETE FROM articles WHERE id = ?', $id);
    $db->query('INSERT INTO audit_log', [
        'article_id' => $id,
        'action' => 'delete'
    ]);
});
```

Die Methode `transaction()` kann auch Werte zurückgeben:

```php
$count = $db->transaction(function ($db) {
    $result = $db->query('UPDATE users SET active = ?', true);
    return $result->getRowCount(); // gibt die Anzahl der aktualisierten Zeilen zurück
});
```


Verschachtelte Transaktionen .{data-version:4.0}
================================================

Nette Database unterstützt die Verschachtelung von Transaktionen mithilfe von SQL-Savepoints. Das bedeutet, Sie können eine Transaktion innerhalb einer anderen Transaktion starten. Hier ist ein einfaches Beispiel:

```php
$db->transaction(function ($db) {
    // Haupttransaktion
    $db->query('INSERT INTO users', ['name' => 'John']);

    // verschachtelte Transaktion
    $db->transaction(function ($db) {
        $db->query('UPDATE users SET role = ?', 'admin');
        // wenn hier ein Fehler auftritt, wird nur die verschachtelte Transaktion zurückgesetzt
        // die Haupttransaktion wird fortgesetzt
    });

    // Fortsetzung der Haupttransaktion
    $db->query('INSERT INTO user_log', ['action' => 'user created']);
});
```

.[note]
Der zugrunde liegende Mechanismus verwendet tatsächlich nur eine Transaktion auf Datenbankebene und emuliert verschachtelte Transaktionen mithilfe von Savepoints. Dieses Verhalten ist für alle Datenbanken gleich und völlig transparent.


Auto-Commit-Modus .{data-version:4.0}
=====================================

Auto-Commit bestimmt, ob jede Abfrage automatisch in einer separaten Transaktion ausgeführt wird. Standardmäßig ist Auto-Commit aktiviert, was bedeutet, dass jede Abfrage eine eigene Transaktion bildet.

Sie können Auto-Commit in der Konfiguration deaktivieren:

```neon
database:
    dsn: 'mysql:host=127.0.0.1;dbname=test'
    user: root
    password: secret
    options:
        autoCommit: false    # deaktiviert Auto-Commit
```

oder im Code:

```php
$db->setAutoCommit(false);
```

Bei deaktiviertem Auto-Commit wird in folgenden Fällen automatisch eine neue Transaktion gestartet:
- bei Verbindung zur Datenbank
- nach Abschluss der vorherigen Transaktion (Commit oder Rollback)

.[note]
Wenn Sie die Auto-Commit-Einstellung während einer aktiven Transaktion ändern, wird die Transaktion automatisch bestätigt (committed).
