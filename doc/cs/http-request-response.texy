HTTP request & response
***********************

.[perex]
HTTP požadavek a odpověď se zapouzdřuje do objektů [Nette\Http\Request|#HTTP požadavek] a [Response|#HTTP odpověď], které nabízejí přehledné API a fungují zároveň jako sanitizační filtr.

Instalace:

```shell
composer require nette/http
```


HTTP požadavek
==============

HTTP požadavek představuje objekt [api:Nette\Http\Request], ke kterému se dostanete tak, že si jej necháte předat pomocí [dependency injection |di-usage]. V presenterech stačí jen zavolat `$httpRequest = $this->getHttpRequest()`.

Co je důležité, tak že Nette když [vytváří|#RequestFactory] tento objekt, všechny vstupní parametry GET, POST, COOKIE a také URL pročistí od kontrolních znaků a neplatných UTF-8 sekvencí. Takže s daty pak můžete bezpečně dále pracovat. Očištěná data se následně používají v presenterech a formulářích.

Třída `Request` je immutable (neměnná). Nemá žádné settery, má jen jeden tzv. wither `withUrl()`, který objekt nemění, ale vrací novou instanci se změněnou hodnotou.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Vrací klon s jinou URL.


getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Vrací URL požadavku jako objekt [UrlScript|urls#UrlScript].

```php
$url = $httpRequest->getUrl();
echo $url; // https://doc.nette.org/cs/?action=edit
echo $url->getHost(); // nette.org
```

Prohlížeče neodesílají na server fragment, takže `$url->getFragment()` bude vracet prázdný řetězec.


getQuery(string $key = null): string|array|null .[method]
---------------------------------------------------------
Vrací parametry GET požadavku.

```php
$all = $httpRequest->getQuery(); // vrací pole všech parametrů z URL
$id = $httpRequest->getQuery('id'); // vrací GET parametr 'id' (nebo null)
```


getPost(string $key = null): string|array|null .[method]
--------------------------------------------------------
Vrací parametry POST požadavku.

```php
$all = $httpRequest->getPost(); // vrací pole všech parametrů z POST
$id = $httpRequest->getPost('id'); // vrací POST parametr 'id' (nebo null)
```


getFile(string|string[] $key): Nette\Http\FileUpload|array|null .[method]
-------------------------------------------------------------------------
Vrací [upload|#Uploadované soubory] jako objekt [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // byl nějaký soubor nahraný?
	$file->getUntrustedName(); // jméno souboru odeslané uživatelem
	$file->getSanitizedName(); // jméno bez nebezpečných znaků
}
```

Pro přístup do zanořené struktury uveďte pole klíčů.

```php
//<input type="file" name="my-form[details][avatar]" multiple>
$file = $request->getFile(['my-form', 'details', 'avatar']);
```

Protože nelze důvěřovat datům zvenčí a tedy ani spoléhat na podobu struktury souborů, je bezpečnější tento způsob než třeba `$request->getFiles()['my-form']['details']['avatar']`, který může selhat.


getFiles(): array .[method]
---------------------------
Vrátí strom [všech uploadů|#Uploadované soubory] v normalizované struktuře, jejíž listy jsou objekty [api:Nette\Http\FileUpload]:

```php
$files = $httpRequest->getFiles();
```


getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Vrací cookie nebo `null`, když neexistuje.

```php
$sessId = $httpRequest->getCookie('sess_id');
```


getCookies(): array .[method]
-----------------------------
Vrací všechny cookies.

```php
$cookies = $httpRequest->getCookies();
```


getMethod(): string .[method]
-----------------------------
Vrací HTTP metodu, se kterou byl udělán požadavek.

```php
$httpRequest->getMethod(); // GET, POST, HEAD, PUT
```


isMethod(string $method): bool .[method]
----------------------------------------
Testuje HTTP metodu, se kterou byl udělán požadavek. Parametr je case-insensitive.

```php
if ($httpRequest->isMethod('GET')) ...
```


getHeader(string $header): ?string .[method]
--------------------------------------------
Vrací HTTP hlavičku nebo `null`, pokud neexistuje. Parametr je case-insensitive.

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```


getHeaders(): array .[method]
-----------------------------
Vrací všechny HTTP hlavičky jako asociativní pole.

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```


getReferer(): ?Nette\Http\UrlImmutable .[method]
------------------------------------------------
Z jaké URL uživatel přišel? Pozor, není vůbec spolehlivé.


isSecured(): bool .[method]
---------------------------
Je spojení šifrované (HTTPS)? Pro správnou funkčnost může být potřeba [nastavit proxy|configuring#HTTP proxy].


isSameSite(): bool .[method]
----------------------------
Přichází požadavek ze stejné (sub)domény a je iniciován kliknutím na odkaz? Nette k detekci používá cookie `_nss` (dříve `nette-samesite`).


isAjax(): bool .[method]
------------------------
Jde o AJAXový požadavek?


getRemoteAddress(): ?string .[method]
-------------------------------------
Vrací IP adresu uživatele. Pro správnou funkčnost může být potřeba [nastavit proxy|configuring#HTTP proxy].


getRemoteHost(): ?string .[method]
----------------------------------
Vrací DNS překlad IP adresy uživatele. Pro správnou funkčnost může být potřeba [nastavit proxy|configuring#HTTP proxy].


getRawBody(): ?string .[method]
-------------------------------
Vrací tělo HTTP požadavku.

```php
$body = $httpRequest->getRawBody();
```


detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Detekuje jazyk. Jako parametr `$lang` předáme pole s jazyky, které aplikace podporuje, a ona vrátí ten, který by viděl návštěvníkův prohlížeč nejraději. Nejsou to žádná kouzla, jen se využívá hlavičky `Accept-Language`. Pokud nedojde k žádné shodě, vrací `null`.

```php
// prohlížeč odesílá např. Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // jazyky podporované aplikací
echo $httpRequest->detectLanguage($langs); // en
```


RequestFactory
--------------

Objekt aktuálního HTTP requestu vyrobí [api:Nette\Http\RequestFactory]. Pokud píšete aplikaci, která nepoužívá DI kontejner, vyrobíte request takto:

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

RequestFactory lze před zavoláním `fromGlobals()` konfigurovat. Můžeme vypnout sanitizaci vstupních parametrů od kontrolních znaků a neplatných UTF-8 sekvencí pomocí `$factory->setBinary()`. A také nastavit proxy server pomocí `$factory->setProxy(...)`, což je důležité pro správnou detekci IP adresy uživatele.

Pomocí tzv. filtrů lze URL vyčistit od znaků, které se do něj mohou dostat např. kvůli špatně implementovaným komentářovým systémům na různých cizích webech:

```php
// odstraníme mezery z cesty
$requestFactory->urlFilters['path']['%20'] = '';

// odstraníme tečku, čárku nebo pravou závorku z konce URI
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// vyčistíme cestu od zdvojených lomítek (výchozí filtr)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```


HTTP odpověď
============

HTTP odpověď představuje objekt [api:Nette\Http\Response], ke kterému se dostanete tak, že si jej necháte předat pomocí [dependency injection |di-usage]. V presenterech stačí jen zavolat `$httpResponse = $this->getHttpResponse()`.

Objekt je na rozdíl od [Request|#HTTP požadavek] mutable, tedy pomocí setterů můžete měnit stav, tedy např. odesílat hlavičky. Nezapomeňte, že všechny settery musí být volány **před odesláním jakéhokoli výstupu.**
Jestli už byl výstup odeslán prozradí metoda `isSent()`. Pokud vrací `true`, každý pokus o odeslání hlavičky vyvolá výjimku `Nette\InvalidStateException`.


setCode(int $code, string $reason = null) .[method]
---------------------------------------------------
Změní stavový [kód odpovědi |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. Kvůli lepší srozumitelnosti zdrojového kódu doporučujeme pro kód používat místo čísel [předdefinované konstanty |api:Nette\Http\IResponse].

```php
$httpResponse->setCode(Nette\Http\Response::S404_NOT_FOUND);
```


getCode(): int .[method]
------------------------
Vrací stavový kód odpovědi.


isSent(): bool .[method]
------------------------
Vrací, zda už došlo k odeslání hlaviček ze serveru do prohlížeče, a tedy již není možné odesílat hlavičky či měnit stavový kód.


setHeader(string $name, string $value) .[method]
------------------------------------------------
Odešle HTTP hlavičku a **přepíše** dříve odeslanou hlavičkou stejného jména.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```


addHeader(string $name, string $value) .[method]
------------------------------------------------
Odešle HTTP hlavičku a **nepřepíše** dříve odeslanou hlavičkou stejného jména.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```


deleteHeader(string $name) .[method]
------------------------------------
Smaže dříve odeslanou HTTP hlavičku.


getHeader(string $header): ?string .[method]
--------------------------------------------
Vrací odeslanou HTTP hlavičku nebo `null`, pokud taková neexistuje. Parametr je case-insensitive.

```php
$pragma = $httpResponse->getHeader('Pragma');
```


getHeaders(): array .[method]
-----------------------------
Vrací všechny odeslané HTTP hlavičky jako asociativní pole.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```


setContentType(string $type, string $charset = null) .[method]
--------------------------------------------------------------
Mění hlavičku `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```


redirect(string $url, int $code = self::S302_FOUND): void .[method]
-------------------------------------------------------------------
Přesměruje na jiné URL. Nezapomeňte poté ukončit skript.

```php
$httpResponse->redirect('http://example.com');
exit;
```


setExpiration(?string $time) .[method]
--------------------------------------
Nastaví expiraci HTTP dokumentu pomocí hlaviček `Cache-Control` a `Expires`. Parametrem je buď časový interval (jako text), nebo `null`, což zakáže kešování.

```php
// cache v prohlížeči vyprší za hodinu
$httpResponse->setExpiration('1 hour');
```


sendAsFile(string $fileName) .[method]
--------------------------------------
Odpověď bude stažena pomocí dialogového okna *Uložit jako* pod uvedeným názvem. Samotný soubor přitom neodesílá.

```php
$httpResponse->sendAsFile('faktura.pdf');
```


setCookie(string $name, string $value, $time, string $path = null, string $domain = null, bool $secure = null, bool $httpOnly = null, string $sameSite = null) .[method]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Odešle cookie. U neuvedených parametrů nebo při uvedení null se použijí tyto výchozí hodnoty:

- `$path = '/'`, tedy cookie má dosah na všechny cesty v (sub)doméně
- `$domain` není nastaveno, což znamená s dosahem na aktuální (sub)doménu, ale nikoliv její subdomény
- `$secure = true`, pokud web běží na HTTPS
- `$httpOnly = true`, tedy cookie je pro JavaScript nepřístupná
- `$sameSite = 'Lax'`, tedy cookie nemusí být odeslána při [přístupu z jiné domény|vulnerability-protection#SameSite cookie]

Výchozí hodnoty parametrů `$path`, `$domain` a `$secure` můžete změnít v [konfiguraci|configuring#HTTP cookie]. Pro hodnotu `$sameSite` můžete použít konstanty `Response::SAME_SITE_LAX`, `SAME_SITE_STRICT` a `SAME_SITE_NONE`.

Čas lze uvádět jako řetězec nebo počet sekund.

```php
$httpResponse->setCookie('lang', 'cs', '100 days');
```


deleteCookie(string $name, string $path = null, string $domain = null, bool $secure = null): void .[method]
-----------------------------------------------------------------------------------------------------------
Smaže cookie. Výchozí hodnoty parametrů jsou:
- `$path` s dosahem na všechny adresáře (`'/'`)
- `$domain` s dosahem na aktuální (sub)doménu, ale nikoliv její subdomény
- `$secure` se řídí podle nastavení v [konfiguraci|configuring#HTTP cookie]

```php
$httpResponse->deleteCookie('lang');
```


Uploadované soubory
===================

Metoda `Nette\Http\Request::getFiles()` vrací pole všech uploadů v normalizované struktuře, jejíž listy jsou objekty [api:Nette\Http\FileUpload]. Ty zapouzdřují data odeslaná formulářovým prvkem `<input type=file>`.

Struktura reflektuje pojmenování prvků v HTML. V nejjednodušším případě to může být jediný pojmenovaný element formuláře odeslaný jako:

```html
<input type="file" name="avatar">
```

V tomto případě `$request->getFiles()` vrací pole:

```php
[
	'avatar' => /* FileUpload instance */
]
```

Objekt `FileUpload` se vytvoří i v případě, že uživatel žádný soubor neodeslal nebo odeslání selhalo. Jestli byl soubor odeslán vrací metoda `hasFile()`:

```php
$request->getFile('avatar')->hasFile();
```

V případě názvu elementu používajícího notaci pro pole:

```html
<input type="file" name="my-form[details][avatar]">
```

vypadá vrácený strom takto:

```php
[
	'my-form' => [
		'details' => [
			'avatar' => /* FileUpload instance */
		],
	],
]
```

Lze vytvořit i pole souborů:

```html
<input type="file" name="my-form[details][avatars][]" multiple>
```

V takovém případě vypadá struktura takto:

```php
[
	'my-form' => [
		'details' => [
			'avatars' => [
				0 => /* FileUpload instance */,
				1 => /* FileUpload instance */,
				2 => /* FileUpload instance */,
			],
		],
	],
]
```

Přistoupit k indexu 1 vnořeného pole lze nejlépe takto:

```php
$file = $request->getFile(['my-form', 'details', 'avatars', 1]);
if ($file instanceof FileUpload) {
	...
}
```

Protože nelze důvěřovat datům zvenčí a tedy ani spoléhat na podobu struktury souborů, je bezpečnější tento způsob než třeba `$request->getFiles()['my-form']['details']['avatars'][1]`, který může selhat.


Přehled metod `FileUpload` .{toc: FileUpload}
---------------------------------------------


hasFile(): bool .[method]
-------------------------
Vrací `true`, pokud uživatel nějaký soubor uploadoval.


isOk(): bool .[method]
----------------------
Vrací `true`, pokud soubor byl nahrán úspěšně.


getError(): int .[method]
-------------------------
Vrací kód chyby při uploadu souboru. Jde o jednu z konstant [UPLOAD_ERR_XXX|http://php.net/manual/en/features.file-upload.errors.php]. V případě, že upload proběhl v pořádku, vrací `UPLOAD_ERR_OK`.


move(string $dest) .[method]
----------------------------
Přesune nahraný soubor do nového umístění. Pokud cílový soubor již existuje, bude přepsán.

```php
$file->move('/path/to/files/name.ext');
```


getContents(): ?string .[method]
--------------------------------
Vrací obsah uploadovaného souboru. V případě, že upload nebyl úspěšný, vrací `null`.


getContentType(): ?string .[method]
-----------------------------------
Detekuje MIME content type uploadovaného souboru na základě jeho signatury. V případě, že upload nebyl úspěšný nebo detekce se nezdařila, vrací `null`.

.[caution]
Vyžaduje PHP rozšíření `fileinfo`.


getUntrustedName(): string .[method]
------------------------------------
Vrací originální název souboru, jak jej odeslal prohlížeč. V nette/http 3.0 a starších se metoda jmenovala `getName()`.

.[caution]
Nevěřte hodnotě vrácené touto metodou. Klient mohl odeslat škodlivý název souboru s úmyslem poškodit nebo hacknout vaši aplikaci.


getSanitizedName(): string .[method]
------------------------------------
Vrací sanitizovaný název souboru. Obsahuje pouze ASCII znaky `[a-zA-Z0-9.-]`. Pokud název takové znaky neobsahuje, vrátí `'unknown'`. Pokud je soubor obrázek ve formátu JPEG, PNG, GIF, nebo WebP, vrátí i správnou příponu.


getSize(): int .[method]
------------------------
Vrací velikost uploadovaného souboru. V případě, že upload nebyl úspěšný, vrací `0`.


getTemporaryFile(): string .[method]
------------------------------------
Vrací cestu k dočasné lokaci uploadovaného souboru. V případě, že upload nebyl úspěšný, vrací `''`.


isImage(): bool .[method]
-------------------------
Vrací `true`, pokud nahraný soubor je obrázek ve formátu JPEG, PNG, GIF, nebo WebP. Detekce probíhá na základě jeho signatury a neověřuje se integrita celého souboru. Zda není obrázek poškozený lze zjistit například pokusem o jeho [načtení|#toImage].

.[caution]
Vyžaduje PHP rozšíření `fileinfo`.


getImageSize(): ?array .[method]
--------------------------------
Vrací dvojici `[šířka, výška]` s rozměry uploadovaného obrázku. V případě, že upload nebyl úspěšný nebo nejde o platný obrázek, vrací `null`.


toImage(): Nette\Utils\Image .[method]
--------------------------------------
Načte obrázek jak objekt [Image|images]. V případě, že upload nebyl úspěšný nebo nejde o platný obrázek, vyhodí výjimku `Nette\Utils\ImageException`.


{{composer: nette/http}}
