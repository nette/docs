Requisição HTTP
***************

.[perex]
Nette encapsula a requisição HTTP em objetos com uma API compreensível e, ao mesmo tempo, fornece um filtro de sanitização.

A requisição HTTP é representada pelo objeto [api:Nette\Http\Request]. Se você trabalha com Nette, este objeto é criado automaticamente pelo framework e você pode recebê-lo por meio de [injeção de dependência |dependency-injection:passing-dependencies]. Nos presenters, basta chamar o método `$this->getHttpRequest()`. Se você trabalha fora do Nette Framework, pode criar o objeto usando [RequestFactory|#RequestFactory].

Uma grande vantagem de Nette é que, ao criar o objeto, ele limpa automaticamente todos os parâmetros de entrada GET, POST, COOKIE e também a URL de caracteres de controle e sequências UTF-8 inválidas. Com esses dados, você pode trabalhar com segurança. Os dados limpos são então usados ​​em presenters e formulários.

→ [Instalação e requisitos |@home#Instalace]


Nette\Http\Request
==================

Este objeto é imutável. Não possui setters, tem apenas um chamado wither `withUrl()`, que não altera o objeto, mas retorna uma nova instância com o valor alterado.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Retorna um clone com uma URL diferente.


getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Retorna a URL da requisição como um objeto [UrlScript|urls#UrlScript].

```php
$url = $httpRequest->getUrl();
echo $url; // https://doc.nette.org/cs/?action=edit
echo $url->getHost(); // nette.org
```

Aviso: os navegadores não enviam o fragmento para o servidor, então `$url->getFragment()` retornará uma string vazia.


getQuery(?string $key=null): string|array|null .[method]
--------------------------------------------------------
Retorna os parâmetros GET da requisição.

```php
$all = $httpRequest->getQuery(); // retorna um array de todos os parâmetros da URL
$id = $httpRequest->getQuery('id'); // retorna o parâmetro GET 'id' (ou null)
```


getPost(?string $key=null): string|array|null .[method]
-------------------------------------------------------
Retorna os parâmetros POST da requisição.

```php
$all = $httpRequest->getPost(); // retorna um array de todos os parâmetros do POST
$id = $httpRequest->getPost('id'); // retorna o parâmetro POST 'id' (ou null)
```


getFile(string|string[] $key): Nette\Http\FileUpload|array|null .[method]
-------------------------------------------------------------------------
Retorna o [upload|#arquivos-enviados] como um objeto [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // algum arquivo foi enviado?
	$file->getUntrustedName(); // nome do arquivo enviado pelo usuário
	$file->getSanitizedName(); // nome sem caracteres perigosos
}
```

Para acessar a estrutura aninhada, forneça um array de chaves.

```php
//<input type="file" name="my-form[details][avatar]" multiple>
$file = $request->getFile(['my-form', 'details', 'avatar']);
```

Como não se pode confiar nos dados externos e, portanto, nem na forma da estrutura dos arquivos, este método é mais seguro do que, por exemplo, `$request->getFiles()['my-form']['details']['avatar']`, que pode falhar.


getFiles(): array .[method]
---------------------------
Retorna a árvore de [todos os uploads|#arquivos-enviados] em uma estrutura normalizada, cujas folhas são objetos [api:Nette\Http\FileUpload]:

```php
$files = $httpRequest->getFiles();
```


getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Retorna um cookie ou `null` se não existir.

```php
$sessId = $httpRequest->getCookie('sess_id');
```


getCookies(): array .[method]
-----------------------------
Retorna todos os cookies.

```php
$cookies = $httpRequest->getCookies();
```


getMethod(): string .[method]
-----------------------------
Retorna o método HTTP com o qual a requisição foi feita.

```php
$httpRequest->getMethod(); // GET, POST, HEAD, PUT
```


isMethod(string $method): bool .[method]
----------------------------------------
Testa o método HTTP com o qual a requisição foi feita. O parâmetro é insensível a maiúsculas/minúsculas.

```php
if ($httpRequest->isMethod('GET')) // ...
```


getHeader(string $header): ?string .[method]
--------------------------------------------
Retorna um cabeçalho HTTP ou `null` se não existir. O parâmetro é insensível a maiúsculas/minúsculas.

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```


getHeaders(): array .[method]
-----------------------------
Retorna todos os cabeçalhos HTTP como um array associativo.

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```


isSecured(): bool .[method]
---------------------------
A conexão é criptografada (HTTPS)? Para o funcionamento correto, pode ser necessário [configurar o proxy|configuration#HTTP proxy].


isSameSite(): bool .[method]
----------------------------
A requisição vem do mesmo (sub)domínio e é iniciada clicando em um link? Nette usa o cookie `_nss` (anteriormente `nette-samesite`) para detecção.


isAjax(): bool .[method]
------------------------
É uma requisição AJAX?


getRemoteAddress(): ?string .[method]
-------------------------------------
Retorna o endereço IP do usuário. Para o funcionamento correto, pode ser necessário [configurar o proxy|configuration#HTTP proxy].


getRemoteHost(): ?string .[method deprecated]
---------------------------------------------
Retorna a resolução DNS do endereço IP do usuário. Para o funcionamento correto, pode ser necessário [configurar o proxy|configuration#HTTP proxy].


getBasicCredentials(): ?string .[method]
----------------------------------------
Retorna as credenciais de autenticação para [Basic HTTP authentication |https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication].

```php
[$user, $password] = $httpRequest->getBasicCredentials();
```


getRawBody(): ?string .[method]
-------------------------------
Retorna o corpo da requisição HTTP.

```php
$body = $httpRequest->getRawBody();
```


detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Detecta o idioma. Como parâmetro `$lang`, passamos um array com os idiomas que a aplicação suporta, e ela retorna aquele que o navegador do visitante preferiria ver. Não há mágica, apenas o cabeçalho `Accept-Language` é usado. Se não houver correspondência, retorna `null`.

```php
// o navegador envia, por exemplo, Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // idiomas suportados pela aplicação
echo $httpRequest->detectLanguage($langs); // en
```


RequestFactory .[#RequestFactory]
=================================

A classe [api:Nette\Http\RequestFactory] serve para criar uma instância de `Nette\Http\Request`, que representa a requisição HTTP atual. (Se você trabalha com Nette, o objeto da requisição HTTP é criado automaticamente pelo framework.)

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

O método `fromGlobals()` cria o objeto da requisição com base nas variáveis ​​globais atuais do PHP (`$_GET`, `$_POST`, `$_COOKIE`, `$_FILES` e `$_SERVER`). Ao criar o objeto, ele limpa automaticamente todos os parâmetros de entrada GET, POST, COOKIE e também a URL de caracteres de controle e sequências UTF-8 inválidas, o que garante a segurança ao trabalhar posteriormente com esses dados.

A RequestFactory pode ser configurada antes de chamar `fromGlobals()`:

- com o método `$factory->setBinary()`, você desativa a limpeza automática dos parâmetros de entrada de caracteres de controle e sequências UTF-8 inválidas.
- com o método `$factory->setProxy(...)`, você indica o endereço IP do [servidor proxy |configuration#HTTP proxy], o que é necessário para a detecção correta do endereço IP do usuário.

A RequestFactory permite definir filtros que transformam automaticamente partes da URL da requisição. Esses filtros removem caracteres indesejados da URL, que podem ser inseridos lá, por exemplo, por implementações incorretas de sistemas de comentários em vários sites:

```php
// remoção de espaços do caminho
$requestFactory->urlFilters['path']['%20'] = '';

// remoção de ponto, vírgula ou parêntese direito do final da URI
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// limpeza do caminho de barras duplicadas (filtro padrão)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```

A primeira chave `'path'` ou `'url'` determina a qual parte da URL o filtro se aplica. A segunda chave é a expressão regular a ser pesquisada, e o valor é a substituição a ser usada no lugar do texto encontrado.


Arquivos enviados .[#arquivos-enviados]
=======================================

O método `Nette\Http\Request::getFiles()` retorna um array de todos os uploads em uma estrutura normalizada, cujas folhas são objetos [api:Nette\Http\FileUpload]. Eles encapsulam os dados enviados pelo controle de formulário `<input type=file>`.

A estrutura reflete a nomenclatura dos controles em HTML. No caso mais simples, pode ser um único elemento de formulário nomeado enviado como:

```latte
<input type="file" name="avatar">
```

Neste caso, `$request->getFiles()` retorna um array:

```php
[
	'avatar' => /* Instância FileUpload */
]
```

O objeto `FileUpload` é criado mesmo que o usuário não tenha enviado nenhum arquivo ou o envio tenha falhado. Se o arquivo foi enviado é retornado pelo método `hasFile()`:

```php
$request->getFile('avatar')->hasFile();
```

No caso do nome do elemento usando a notação de array:

```latte
<input type="file" name="my-form[details][avatar]">
```

a árvore retornada se parece com isto:

```php
[
	'my-form' => [
		'details' => [
			'avatar' => /* Instância FileUpload */
		],
	],
]
```

Também é possível criar um array de arquivos:

```latte
<input type="file" name="my-form[details][avatars][]" multiple>
```

Nesse caso, a estrutura se parece com isto:

```php
[
	'my-form' => [
		'details' => [
			'avatars' => [
				0 => /* Instância FileUpload */,
				1 => /* Instância FileUpload */,
				2 => /* Instância FileUpload */,
			],
		],
	],
]
```

A melhor maneira de acessar o índice 1 do array aninhado é assim:

```php
$file = $request->getFile(['my-form', 'details', 'avatars', 1]);
if ($file instanceof FileUpload) {
	// ...
}
```

Como não se pode confiar nos dados externos e, portanto, nem na forma da estrutura dos arquivos, este método é mais seguro do que, por exemplo, `$request->getFiles()['my-form']['details']['avatars'][1]`, que pode falhar.


Visão geral dos métodos `FileUpload` .{toc: FileUpload}
-------------------------------------------------------


hasFile(): bool .[method]
-------------------------
Retorna `true` se o usuário enviou algum arquivo.


isOk(): bool .[method]
----------------------
Retorna `true` se o arquivo foi carregado com sucesso.


getError(): int .[method]
-------------------------
Retorna o código de erro durante o upload do arquivo. É uma das constantes [UPLOAD_ERR_XXX|http://php.net/manual/en/features.file-upload.errors.php]. Caso o upload tenha ocorrido corretamente, retorna `UPLOAD_ERR_OK`.


move(string $dest) .[method]
----------------------------
Move o arquivo carregado para um novo local. Se o arquivo de destino já existir, ele será sobrescrito.

```php
$file->move('/path/to/files/name.ext');
```


getContents(): ?string .[method]
--------------------------------
Retorna o conteúdo do arquivo carregado. Caso o upload não tenha sido bem-sucedido, retorna `null`.


getContentType(): ?string .[method]
-----------------------------------
Detecta o tipo de conteúdo MIME do arquivo carregado com base em sua assinatura. Caso o upload não tenha sido bem-sucedido ou a detecção falhe, retorna `null`.

.[caution]
Requer a extensão PHP `fileinfo`.


getUntrustedName(): string .[method]
------------------------------------
Retorna o nome original do arquivo, como enviado pelo navegador.

.[caution]
Não confie no valor retornado por este método. O cliente pode ter enviado um nome de arquivo malicioso com a intenção de danificar ou hackear sua aplicação.


getSanitizedName(): string .[method]
------------------------------------
Retorna o nome do arquivo sanitizado. Contém apenas caracteres ASCII `[a-zA-Z0-9.-]`. Se o nome não contiver tais caracteres, retorna `'unknown'`. Se o arquivo for uma imagem no formato JPEG, PNG, GIF, WebP ou AVIF, retorna também a extensão correta.

.[caution]
Requer a extensão PHP `fileinfo`.


getSuggestedExtension(): ?string .[method]{data-version:3.2.4}
--------------------------------------------------------------
Retorna a extensão de arquivo apropriada (sem o ponto) correspondente ao tipo MIME detectado.

.[caution]
Requer a extensão PHP `fileinfo`.


getUntrustedFullPath(): string .[method]
----------------------------------------
Retorna o caminho original do arquivo, como enviado pelo navegador ao fazer upload de uma pasta. O caminho completo está disponível apenas no PHP 8.1 e superior. Em versões anteriores, este método retorna o nome original do arquivo.

.[caution]
Não confie no valor retornado por este método. O cliente pode ter enviado um nome de arquivo malicioso com a intenção de danificar ou hackear sua aplicação.


getSize(): int .[method]
------------------------
Retorna o tamanho do arquivo carregado. Caso o upload não tenha sido bem-sucedido, retorna `0`.


getTemporaryFile(): string .[method]
------------------------------------
Retorna o caminho para o local temporário do arquivo carregado. Caso o upload não tenha sido bem-sucedido, retorna `''`.


isImage(): bool .[method]
-------------------------
Retorna `true` se o arquivo carregado for uma imagem no formato JPEG, PNG, GIF, WebP ou AVIF. A detecção ocorre com base em sua assinatura e não verifica a integridade de todo o arquivo. Se a imagem não está danificada pode ser verificado, por exemplo, tentando [carregá-la|#toImage].

.[caution]
Requer a extensão PHP `fileinfo`.


getImageSize(): ?array .[method]
--------------------------------
Retorna o par `[largura, altura]` com as dimensões da imagem carregada. Caso o upload não tenha sido bem-sucedido ou não seja uma imagem válida, retorna `null`.


toImage(): Nette\Utils\Image .[method] .[#toImage]
--------------------------------------------------
Carrega a imagem como um objeto [Image|utils:images]. Caso o upload não tenha sido bem-sucedido ou não seja uma imagem válida, lança a exceção `Nette\Utils\ImageException`.
