Utilisation des callbacks
*************************

.[perex]
[api:Nette\Utils\Callback] est une classe statique avec des fonctions pour travailler avec les [callbacks PHP |https://www.php.net/manual/en/language.types.callable.php].


Installation :

```shell
composer require nette/utils
```

Tous les exemples supposent qu'un alias a été créé :

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Vérifie si la variable `$callable` est un callback valide. Sinon, lève `Nette\InvalidArgumentException`. Si `$syntax` est true, la fonction vérifie seulement que `$callable` a la structure d'un callback, mais ne vérifie pas si la classe ou la méthode donnée existe réellement. Retourne `$callable`.

```php
Callback::check('trim'); // ne lève pas d'exception
Callback::check(['NonExistentClass', 'method']); // lève Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // ne lève pas d'exception
Callback::check(function () {}); // ne lève pas d'exception
Callback::check(null); // lève Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Convertit un callback PHP en forme textuelle. La classe ou la méthode n'a pas besoin d'exister.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Retourne la réflexion pour la méthode ou la fonction dans le callback PHP.

```php
$ref = Callback::toReflection('trim');
// $ref est ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref est ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Détermine si le callback PHP est une fonction ou une méthode statique.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Déballe une Closure créée à l'aide de `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
