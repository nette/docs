ヒントとコツ
******


エディタとIDE
========

LatteをサポートするエディタまたはIDEでテンプレートを作成してください。はるかに快適になります。

- PhpStorm: `Settings > Plugins > Marketplace`で[Latteプラグイン|https://plugins.jetbrains.com/plugin/7457-latte]をインストールします
- VS Code: [Nette Latte + Neon|https://marketplace.visualstudio.com/items?itemName=Kasik96.latte]、[Nette Latte templates|https://marketplace.visualstudio.com/items?itemName=smuuf.latte-lang]、または最新の[Nette for VS Code |https://marketplace.visualstudio.com/items?itemName=franken-ui.nette-for-vscode]プラグインをインストールします
- NetBeans IDE: Latteのネイティブサポートはインストールに含まれています
- Sublime Text 3: Package Controlで`Nette`パッケージを見つけてインストールし、`View > Syntax`でLatteを選択します
- 古いエディタでは、.latteファイルにSmartyハイライトを使用してください

PhpStorm用のプラグインは非常に高度で、PHPコードの補完に優れています。最適に機能させるには、[型付きテンプレート|type-system]を使用してください。

[* latte-phpstorm-plugin.webp *]

Latteのサポートは、Webコードハイライター[Prism.js|https://prismjs.com/#supported-languages]およびエディタ[Ace|https://ace.c9.io]でも利用できます。


JavaScriptまたはCSS内のLatte
=======================

LatteはJavaScriptやCSS内でも非常に快適に使用できます。しかし、Latteが誤ってJavaScriptコードやCSSスタイルをLatteタグと見なす状況をどのように回避できるでしょうか？

```latte
<style>
	/* エラー: {color} タグとして解釈されます */
	body {color: blue}
</style>

<script>
	// エラー: {id} タグとして解釈されます
	var obj = {id: 123};
</script>
```

**バリアント 1**

`{`の直後に文字が続く状況を避けてください。例えば、その前にスペース、改行、または引用符を挿入します：

```latte
<style>
	body {
		color: blue
	}
</style>

<script>
	var obj = {'id': 123};
</script>
```

**バリアント 2**

[n:syntax |tags#syntax]を使用して、要素内のLatteタグの処理を完全に無効にします：

```latte
<script n:syntax="off">
	var obj = {id: 123};
</script>
```

**バリアント 3**

要素内でLatteタグの構文を二重波括弧に切り替えます：

```latte
<script n:syntax="double">
	var obj = {id: 123};          // これはJavaScriptです

	{{if $cond}} alert(); {{/if}} // これはLatteです
</script>
```

JavaScriptでは、[変数に引用符を付けない |tags#Vypsání v JavaScriptu]。


Latteでの`use`句の代替
================

クラスにアクセスする際に名前空間を書かなくても済むように、PHPで使用される`use`句をLatteでどのように置き換えることができますか？PHPでの例：

```php
use Pets\Model\Dog;

if ($dog->status === Dog::StatusHungry) {
	// ...
}
```

**バリアント 1**

`use`句の代わりに、クラス名を `$Dog` という変数に保存し、`Dog` の代わりに `$Dog` を使用します：

```latte
{var $Dog = Pets\Model\Dog::class}

<div>
	{if $dog->status === $Dog::StatusHungry}
		...
	{/if}
</div>
```

**バリアント 2**

オブジェクト`$dog`が`Pets\Model\Dog`のインスタンスである場合、`{if $dog->status === $dog::StatusHungry}`を使用できます。


LatteでのXML生成
============

Latteは任意のテキスト形式（HTML、XML、CSV、iCalなど）を生成できますが、出力されるデータを正しくエスケープするには、どの形式を生成しているかをLatteに伝える必要があります。これには[`{contentType}`|tags#contentType]タグを使用します。

```latte
{contentType application/xml}
<?xml version="1.0" encoding="UTF-8"?>
...
```

その後、例えばサイトマップを同様の方法で生成できます：

```latte
{contentType application/xml}
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" >
	<url n:foreach="$urls as $url">
		<loc>{$url->loc}</loc>
		<lastmod>{$url->lastmod->format('Y-m-d')}</lastmod>
		<changefreq>{$url->frequency}</changefreq>
		<priority>{$url->priority}</priority>
	</url>
</urlset>
```


インクルードされたテンプレートからのデータ渡し
=======================

インクルードされたテンプレートで`{var}`または`{default}`を使用して作成した変数は、そのテンプレート内にのみ存在し、インクルード元のテンプレートでは利用できません。
インクルードされたテンプレートからインクルード元のテンプレートにデータを渡したい場合、1つの方法は、テンプレートにオブジェクトを渡し、そのオブジェクトにデータを挿入することです。

メインテンプレート：

```latte
{* 空のオブジェクト $vars を作成 *}
{var $vars = (object) null}

{include 'included.latte', vars: $vars}

{* これでプロパティ foo を含みます *}
{$vars->foo}
```

インクルードされたテンプレート `included.latte`：

```latte
{* プロパティ foo にデータを書き込みます *}
{var $vars->foo = 123}
```
