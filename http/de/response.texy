HTTP-Antwort
************

.[perex]
Nette kapselt die HTTP-Antwort in Objekte mit einer verständlichen API und bietet gleichzeitig einen Bereinigungsfilter.

Eine HTTP-Antwort ist ein [api:Nette\Http\Response] -Objekt, das Sie erhalten, indem Sie es mittels [Dependency Injection |dependency-injection:passing-dependencies] übergeben. In Moderatoren rufen Sie einfach `$httpResponse = $this->getHttpResponse()` auf.

→ [Installation und Anforderungen |@home#Installation]


Nette\Http\Response .[#toc-nette-http-response]
===============================================

Im Gegensatz zu [Nette\Http\Request |request] ist dieses Objekt veränderbar, so dass Sie Setter verwenden können, um den Status zu ändern, d.h. um Header zu senden. Denken Sie daran, dass alle Setter **aufgerufen werden müssen, bevor die eigentliche Ausgabe gesendet wird.** Die Methode `isSent()` zeigt an, ob die Ausgabe gesendet wurde. Wenn sie `true` zurückgibt, löst jeder Versuch, eine Kopfzeile zu senden, eine `Nette\InvalidStateException` Ausnahme aus.


setCode(int $code, string $reason=null) .[method]
-------------------------------------------------
Ändert einen [Status-Antwort-Code |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. Zur besseren Lesbarkeit des Quellcodes wird empfohlen, [vordefinierte Konstanten |api:Nette\Http\IResponse] anstelle von tatsächlichen Zahlen zu verwenden.

```php
$httpResponse->setCode(Nette\Http\Response::S404_NotFound);
```


getCode(): int .[method]
------------------------
Gibt den Statuscode der Antwort zurück.


isSent(): bool .[method]
------------------------
Gibt zurück, ob bereits Header vom Server an den Browser gesendet wurden, so dass es nicht mehr möglich ist, Header zu senden oder den Statuscode zu ändern.


setHeader(string $name, string $value) .[method]
------------------------------------------------
Sendet einen HTTP-Header und **überschreibt** den zuvor gesendeten Header mit demselben Namen.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```


addHeader(string $name, string $value) .[method]
------------------------------------------------
Sendet einen HTTP-Header und **überschreibt** nicht den zuvor gesendeten Header gleichen Namens.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```


deleteHeader(string $name) .[method]
------------------------------------
Löscht einen zuvor gesendeten HTTP-Header.


getHeader(string $header): ?string .[method]
--------------------------------------------
Gibt den gesendeten HTTP-Header zurück, oder `null`, wenn er nicht existiert. Der Parameter unterscheidet nicht zwischen Groß- und Kleinschreibung.

```php
$pragma = $httpResponse->getHeader('Pragma');
```


getHeaders(): array .[method]
-----------------------------
Gibt alle gesendeten HTTP-Header als assoziatives Array zurück.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```


setContentType(string $type, string $charset=null) .[method]
------------------------------------------------------------
Sendet den Header `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```


redirect(string $url, int $code=self::S302_Found): void .[method]
-----------------------------------------------------------------
Leitet zu einer anderen URL um. Vergessen Sie nicht, das Skript dann zu beenden.

```php
$httpResponse->redirect('http://example.com');
exit;
```


setExpiration(?string $time) .[method]
--------------------------------------
Legt das Verfallsdatum des HTTP-Dokuments unter Verwendung der Header `Cache-Control` und `Expires` fest. Der Parameter ist entweder ein Zeitintervall (als Text) oder `null`, was das Caching deaktiviert.

```php
// Browser-Cache läuft in einer Stunde ab
$httpResponse->setExpiration('1 hour');
```


sendAsFile(string $fileName) .[method]
--------------------------------------
Die Antwort sollte mit dem Dialog *Speichern unter* mit dem angegebenen Namen heruntergeladen werden. Es wird keine Datei selbst zur Ausgabe gesendet.

```php
$httpResponse->sendAsFile('invoice.pdf');
```


setCookie(string $name, string $value, $time, string $path=null, string $domain=null, bool $secure=null, bool $httpOnly=null, string $sameSite=null) .[method]
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Sendet ein Cookie. Standard-Parameterwerte:

| `$path` | `'/'` | mit Geltungsbereich auf alle Pfade der (Sub-)Domain *(konfigurierbar)*
| `$domain` | `null` | mit Geltungsbereich der aktuellen (Sub)domain, aber nicht deren Subdomains *(konfigurierbar)*
| `$secure` | `true` | wenn die Seite über HTTPS läuft, sonst `false` *(konfigurierbar)*
| `$httpOnly` | `true` | Cookie ist für JavaScript unzugänglich
| `$sameSite` | `'Lax'` | Cookie muss nicht gesendet werden, wenn [der Zugriff von einem anderen Ursprung erfolgt |nette:glossary#SameSite cookie]

Sie können die Standardwerte der Parameter `$path`, `$domain` und `$secure` in [configuration |configuration#HTTP cookie] ändern.

Die Zeit kann als Anzahl von Sekunden oder als String angegeben werden:

```php
$httpResponse->setCookie('lang', 'en', '100 days');
```

Die Option `$domain` bestimmt, welche Domänen (Ursprünge) Cookies akzeptieren können. Wird sie nicht angegeben, wird das Cookie von derselben (Sub-)Domain akzeptiert, die es gesetzt hat, mit Ausnahme ihrer Subdomains. Wenn `$domain` angegeben ist, werden auch Subdomains einbezogen. Daher ist die Angabe von `$domain` weniger restriktiv als das Weglassen. Wenn zum Beispiel `$domain = 'nette.org'` angegeben wird, ist das Cookie auch auf allen Subdomains wie `doc.nette.org` verfügbar.

Sie können die Konstanten `Response::SameSiteLax`, `SameSiteStrict` und `SameSiteNone` für den Wert `$sameSite` verwenden.


deleteCookie(string $name, string $path=null, string $domain=null, bool $secure=null): void .[method]
-----------------------------------------------------------------------------------------------------
Löscht ein Cookie. Die Standardwerte der Parameter sind:
- `$path` mit Geltungsbereich für alle Verzeichnisse (`'/'`)
- `$domain` mit Geltungsbereich der aktuellen (Sub-)Domain, aber nicht deren Subdomains
- `$secure` wird von den Einstellungen in [configuration |configuration#HTTP cookie] beeinflusst

```php
$httpResponse->deleteCookie('lang');
```
