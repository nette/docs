Fonctions d'aide
****************

.[perex]
[api:Nette\Utils\Helpers] est une classe statique contenant des fonctions utiles.


Installation :

```shell
composer require nette/utils
```

Tous les exemples supposent que l'alias de classe suivant est défini :

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Exécute un callback et renvoie la sortie capturée sous forme de chaîne.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Renvoie une valeur limitée à la plage inclusive de min et max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Compare deux valeurs de la même manière que le fait PHP. Elle fait la distinction entre les opérateurs `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
Cette fonction est utile dans les situations où l'opérateur est variable.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Convertit `false` en `null`, ne change pas les autres valeurs.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Renvoie la dernière erreur PHP survenue ou une chaîne vide si aucune erreur n'est survenue. Contrairement à `error_get_last()`, elle n'est pas affectée par la directive PHP `html_errors` et renvoie toujours du texte, pas du HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Cherche une chaîne de `$possibilities` qui est la plus similaire à `$value`, mais pas la même. Ne prend en charge que les codages 8 bits.

C'est utile si une certaine option n'est pas valide et que nous voulons suggérer à l'utilisateur une option similaire (mais différente, donc la même chaîne est ignorée). De cette façon, Nette crée les messages `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', ne 'baz'
```
