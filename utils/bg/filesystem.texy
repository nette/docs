Файлова система
***************

.[perex]
[api:Nette\Utils\FileSystem] е клас с полезни функции за работа с файловата система. Едно от предимствата пред нативните PHP функции е, че в случай на грешка хвърлят изключения.


Ако трябва да търсите файлове на диска, използвайте [Finder|finder].

Инсталация:

```shell
composer require nette/utils
```

Следващите примери предполагат създаден псевдоним (alias):

```php
use Nette\Utils\FileSystem;
```


Манипулация
===========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копира файл или цяла директория. По подразбиране презаписва съществуващи файлове и директории. С параметър `$overwrite`, зададен на `false`, хвърля изключение `Nette\InvalidStateException`, ако целевият файл или директория `$target` съществува. При грешка хвърля изключение `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Създава директория, ако не съществува, включително родителските директории. При грешка хвърля изключение `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Изтрива файл или цяла директория, ако съществува. Ако директорията не е празна, първо изтрива нейното съдържание. При грешка хвърля изключение `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Задава правата на файла на `$fileMode` или на директорията на `$dirMode`. Рекурсивно преминава и задава права и на цялото съдържание на директорията.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Отваря файл и връща ресурс. Параметърът `$mode` работи по същия начин като при нативната функция `fopen()`:https://www.php.net/manual/en/function.fopen.php. В случай на грешка хвърля изключение `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Връща съдържанието на файла `$file`. При грешка хвърля изключение `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Прочита съдържанието на файла ред по ред. За разлика от нативната функция `file()`, не зарежда целия файл в паметта, а го чете непрекъснато, така че е възможно да се четат и файлове, по-големи от наличната памет. `$stripNewLines` указва дали да се премахнат знаците за край на ред `\r` и `\n`.
В случай на грешка хвърля изключение `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Преименува или премества файл или директория `$origin`. По подразбиране презаписва съществуващи файлове и директории. С параметър `$overwrite`, зададен на `false`, хвърля изключение `Nette\InvalidStateException`, ако целевият файл или директория `$target` съществува. При грешка хвърля изключение `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записва низа `$content` във файла `$file`. При грешка хвърля изключение `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Пътища
======


isAbsolute(string $path): bool .[method]
----------------------------------------

Проверява дали пътят `$path` е абсолютен.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Обединява всички сегменти на пътя и нормализира резултата.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормализира `..` и `.` и разделителите на директории в пътя до системните.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Преобразува наклонените черти в `/`, използвани в Unix системи.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Преобразува наклонените черти в знаци, специфични за текущата платформа, т.е. `\` в Windows и `/` другаде.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Извежда крайния път от пътя `$path` спрямо базовата директория `$basePath`. Абсолютните пътища (`/foo`, `C:/foo`) остават непроменени (само нормализира наклонените черти), относителните пътища се добавят към базовия път.

```php
// В Windows наклонените черти в изхода биха били обратни (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Статичен срещу нестатичен достъп
================================

За да можете например за целите на тестването лесно да замените класа с друг (mock), използвайте го нестатично:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
