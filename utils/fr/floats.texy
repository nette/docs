Fonctions flottantes
********************

.[perex]
[api:Nette\Utils\Floats] est une classe statique contenant des fonctions utiles pour comparer des nombres flottants.


Installation :

```shell
composer require nette/utils
```

Tous les exemples supposent que l'alias de classe suivant est défini :

```php
use Nette\Utils\Floats;
```


Motivation .[#toc-motivation]
=============================

Vous vous demandez à quoi sert une classe de comparaison de flottants ? Vous pouvez utiliser les opérateurs `<`, `>`, `===`, pensez-vous.
Ce n'est pas tout à fait vrai. A votre avis, qu'est-ce qui va imprimer ce code ?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Si vous exécutez ce code, certains d'entre vous seront surpris que le programme ait imprimé `not same`.

Les opérations mathématiques avec des nombres flottants provoquent des erreurs dues à la conversion entre les systèmes décimal et binaire. Par exemple, `0.1 + 0.2` équivaut à `0.300000000000000044…`. Par conséquent, lorsque nous comparons des nombres flottants, nous devons tolérer une petite différence à partir d'une certaine décimale.

Et c'est ce que fait la classe `Floats`. La comparaison suivante fonctionnera comme prévu :

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Lorsque l'on essaie de comparer `NAN`, une exception `\LogicException` est levée.


Comparaison de flottants .[#toc-float-comparison]
=================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Renvoie `true` si `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Renvoie `true` si `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Renvoie `true` si `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Renvoie `true` si `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Renvoie `true` si `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Si `$a` < `$b`, il retourne `-1`, s'ils sont égaux il retourne `0` and if `$a` > `$b` il retourne `1`.

Elle peut être utilisée, par exemple, avec la fonction `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr est [-3.5, 1, 2, 5]
```


Fonctions d'aide .[#toc-helpers-functions]
==========================================


isZero(float $value): bool .[method]
------------------------------------

Renvoie `true` si la valeur est nulle.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Renvoie `true` si la valeur est un nombre entier.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
