DI-Container konfigurieren
**************************

.[perex]
Überblick über die Konfigurationsmöglichkeiten für den Nette-DI-Container.


Konfigurationsdatei
===================

Der Nette-DI-Container lässt sich leicht über Konfigurationsdateien steuern. Sie sind normalerweise im [NEON-Format |neon:format] geschrieben. Wir empfehlen, für die Bearbeitung [Editoren |best-practices:editors-and-tools#ide-editor] zu verwenden [, die |best-practices:editors-and-tools#ide-editor] dieses Format [unterstützen |best-practices:editors-and-tools#ide-editor].

<pre>
"decorator .[prism-token prism-atrule]":[#Decorator]: 	"Dekorateur .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"DI-Container .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Extensions]: 	"Zusätzliche DI-Erweiterungen installieren .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Including files]: 	"Einschließlich Dateien .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#Parameters]: 	"Parameter .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Automatische Registrierung von Diensten .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Dienstleistungen .[prism-token prism-comment]"
</pre>

So schreiben Sie eine Zeichenfolge, die das Zeichen `%`, you must escape it by doubling it to `%%` enthält. .[note]


Parameter .[#toc-parameters]
============================

Sie können Parameter definieren, die dann als Teil von Dienstdefinitionen verwendet werden können. Auf diese Weise können Sie Werte, die Sie häufiger ändern möchten, besser herausfiltern.

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

Sie können auf den Parameter `foo` über `%foo%` an anderer Stelle in jeder Konfigurationsdatei verweisen. Sie können auch innerhalb von Zeichenketten wie `'%wwwDir%/images'` verwendet werden.

Parameter müssen nicht nur Strings sein, sie können auch Array-Werte sein:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Sie können sich auf einzelne Schlüssel als `%mailer.user%` beziehen.

Wenn Sie den Wert eines Parameters in Ihrem Code benötigen, z. B. in Ihrer Klasse, dann übergeben Sie ihn an diese Klasse. Zum Beispiel im Konstruktor. Es gibt kein globales Konfigurationsobjekt, das Klassen nach Parameterwerten abfragen können. Dies würde gegen das Prinzip der Dependency Injection verstoßen.


Dienste .[#toc-services]
========================

Siehe [separates Kapitel |services].


Dekorateur .[#toc-decorator]
============================

Wie kann man alle Dienste eines bestimmten Typs als Ganzes bearbeiten? Müssen Sie eine bestimmte Methode für alle Präsentatoren aufrufen, die von einem bestimmten gemeinsamen Vorfahren erben? Genau dafür gibt es den Decorator.

```neon
decorator:
	# für alle Dienste, die Instanzen dieser Klasse oder Schnittstelle sind
	App\Presenters\BasePresenter:
		setup:
			- setProjectId(10)     # diese Methode aufrufen
			- $absoluteUrls = true # und setze die Variable
```

Decorator kann auch verwendet werden, um [Tags |services#Tags] zu setzen oder den [Inject-Modus |services#Inject Mode] zu aktivieren.

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

Technische Einstellungen des DI-Containers.

```neon
di:
	# zeigt DIC in Tracy Bar?
	debugger: ...        # (bool) standardmäßig true

	# Parametertypen, die Sie niemals automatisch verdrahten
	excluded: ...        # (string[])

	# die Klasse, von der der DI-Container erbt
	parentClass: ...     # (string) ist standardmäßig Nette\DI\Container
```


Metadaten-Export .[#toc-metadata-export]
----------------------------------------

Die DI-Containerklasse enthält auch eine Menge Metadaten. Sie können diese reduzieren, indem Sie den Metadatenexport verringern.

```neon
di:
	export:
		# Parameter zu exportieren?
		parameters: false   # (bool) ist standardmäßig auf true eingestellt

		# Tags exportieren und welche?
		tags:               # (string[]|bool) der Standard ist all
			- event.subscriber

		# exportiere Daten für Autowiring und welche?
		types:              # (string[]|bool) die Voreinstellung ist all
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

Wenn Sie das Array `$container->parameters` nicht verwenden, können Sie den Export der Parameter deaktivieren. Außerdem können Sie nur die Tags exportieren, über die Sie mit der Methode `$container->findByTag(...)` Dienste erhalten.
Wenn Sie die Methode gar nicht aufrufen, können Sie den Tag-Export mit `false` vollständig deaktivieren.

Sie können die Metadaten für die [automatische Verdrahtung |autowiring] erheblich reduzieren, indem Sie die von Ihnen verwendeten Klassen als Parameter für die Methode `$container->getByType()` angeben.
Und wenn Sie die Methode gar nicht aufrufen (oder nur in [application:bootstrap], um `Nette\Application\Application` zu erhalten), können Sie den Export mit `false` vollständig deaktivieren.


Erweiterungen .[#toc-extensions]
================================

Registrierung von anderen DI-Erweiterungen. Auf diese Weise fügen wir z.B. die DI-Erweiterung `Dibi\Bridges\Nette\DibiExtension22` unter dem Namen `dibi` hinzu:

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Dann konfigurieren wir sie in ihrem Abschnitt, der auch `dibi` heißt:

```neon
dibi:
	host: localhost
```

Sie können auch eine Erweiterungsklasse mit Parametern hinzufügen:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Dateien einschließen .[#toc-including-files]
============================================

Zusätzliche Konfigurationsdateien können im Abschnitt `includes` eingefügt werden:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

Der Name `parameters.php` ist kein Tippfehler, die Konfiguration kann auch in eine PHP-Datei geschrieben werden, die sie als Array zurückgibt:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Wenn Elemente mit denselben Schlüsseln in Konfigurationsdateien vorkommen, werden sie [überschrieben oder |#Merging] im Falle von Arrays [zusammengeführt |#Merging]. Die später eingefügte Datei hat eine höhere Priorität als die vorherige. Die Datei, in der der Abschnitt `includes` aufgeführt ist, hat eine höhere Priorität als die darin enthaltenen Dateien.


Suche .[#toc-search]
====================

Das automatische Hinzufügen von Diensten zum DI-Container macht die Arbeit sehr angenehm. Nette fügt automatisch Presenter in den Container ein, aber Sie können auch ganz einfach andere Klassen hinzufügen.

Geben Sie einfach an, in welchen Verzeichnissen (und Unterverzeichnissen) nach den Klassen gesucht werden soll:

```neon
Suche:
	# Sie wählen die Namen der Abschnitte selbst
	myForms:
		in: %appDir%/Forms

	model:
		in: %appDir%/Model
```

Normalerweise wollen wir jedoch nicht alle Klassen und Schnittstellen hinzufügen, so dass wir sie filtern können:

```neon
search:
	myForms:
		in: %appDir%/Forms

		# Filtern nach Dateinamen (string|string[])
		files:
			- *Factory.php

		# Filtern nach Klassennamen (string|string[])
		classes:
			- *Fabrik
```

Oder wir können Klassen auswählen, die mindestens eine der folgenden Klassen erben oder implementieren:


```neon
search:
	myForms:
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Sie können auch negative Regeln definieren, z. B. Klassennamensmasken oder Vorfahren, und wenn sie diese erfüllen, wird der Dienst nicht zum DI-Container hinzugefügt:

```neon
search:
	myForms:
		exclude:
			classes: ...
			extends: ...
			implements: ...
```

Für hinzugefügte Dienste können Tags gesetzt werden:

```neon
search:
	myForms:
		tags: ...
```


Zusammenführung .[#toc-merging]
===============================

Wenn Elemente mit denselben Schlüsseln in mehreren Konfigurationsdateien vorkommen, werden sie überschrieben oder im Falle von Arrays zusammengeführt. Die später hinzugefügte Datei hat eine höhere Priorität.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>Ergebnis</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Um das Zusammenführen eines bestimmten Arrays zu verhindern, verwenden Sie ein Ausrufezeichen direkt nach dem Namen des Arrays:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>Konfig2.neon</th>
	<th>Ergebnis</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>
