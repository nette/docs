Използване на Latte с Slim 4
****************************

.[perex]
Тази статия, написана от "Daniel Opitz:https://odan.github.io/2022/04/06/slim4-latte.html", описва използването на Latte с Slim Framework.

Първо "инсталирайте Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html и след това Latte с Composer:

```shell
composer require latte/latte
```


Конфигурация .[#toc-configuration]
----------------------------------

Създайте нова директория `templates` в главната директория на проекта. Всички шаблони ще бъдат поставени там по-късно.

Добавете нов конфигурационен ключ `template` към вашия файл `config/defaults.php`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte компилира шаблоните в собствен PHP код и ги съхранява в кеш на диска. По този начин те работят толкова бързо, колкото ако бяха написани на родния език PHP.

Добавете нов конфигурационен ключ `template_temp` към файла `config/defaults.php`: Уверете се, че директорията `{project}/tmp/templates` съществува и има права за четене и запис.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte автоматично регенерира кеша при всяка промяна на шаблона, което може да бъде деактивирано в производствена среда, за да се спести част от производителността:

```php
// променете на false в производствената среда
$settings['template_auto_refresh'] = true;
```

След това добавете дефиниции на DI контейнера за класа `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Това само по себе си технически ще работи за визуализиране на шаблона Latte, но трябва да го направим работещ и с обекта за отговор PSR-7.

За тази цел създаваме специален клас `TemplateRenderer`, който върши тази работа вместо нас.

Затова създайте файл в `src/Renderer/TemplateRenderer.php` и копирайте/вмъкнете този код:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Използване на .[#toc-usage]
---------------------------

Вместо да използваме директно обекта Latte Engine, използваме обекта `TemplateRenderer`, за да визуализираме шаблона в обект, съвместим с PSR-7.

Типичен клас за обработка на действия може да изглежда по следния начин за визуализиране на шаблон с име `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

За да направите това, създайте файл-шаблон в `templates/home.latte` с това съдържание:

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Ако всичко е настроено правилно, трябва да видите следния резултат:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
