Lavorare con gli array
**********************

.[perex]
Questa pagina è dedicata alle classi [Nette\Utils\Arrays|#Arrays], [#ArrayHash] e [#ArrayList], che riguardano gli array.


Installazione:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] è una classe statica che contiene funzioni utili per lavorare con gli array. La sua controparte per gli iteratori è [Nette\Utils\Iterables|iterables].

Gli esempi seguenti presuppongono la creazione di un alias:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

La funzione trasforma in modo flessibile l'array `$array` in un array associativo o oggetti secondo il percorso specificato `$path`. Il percorso può essere una stringa o un array. È composto dai nomi delle chiavi dell'array di input e da operatori come '[]', '->', '=', e '|'. Lancia `Nette\InvalidArgumentException` nel caso in cui il percorso non sia valido.

```php
// conversione in array associativo secondo una chiave semplice
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// assegnazione di valori da una chiave a un'altra utilizzando l'operatore =
$result = Arrays::associate($arr, 'name=age'); // o ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// creazione di un oggetto utilizzando l'operatore ->
$result = Arrays::associate($arr, '->name'); // o ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// combinazione di chiavi utilizzando l'operatore |
$result = Arrays::associate($arr, 'name|age'); // o ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// aggiunta all'array utilizzando []
$result = Arrays::associate($arr, 'name[]'); // o ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Verifica la presenza di un valore nell'array. Utilizza un confronto rigoroso (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Verifica se tutti gli elementi nell'array superano il test implementato in `$predicate` con la firma `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Vedi [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Restituisce un nuovo array contenente tutte le coppie chiave-valore che corrispondono al predicato specificato. Il callback ha la firma `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Restituisce il primo elemento (corrispondente al predicato, se specificato). Se tale elemento non esiste, restituisce il risultato della chiamata `$else` o null.
Il parametro `$predicate` ha la firma `function ($value, int|string $key, array $array): bool`.

Non modifica il puntatore interno a differenza di `reset()`. I parametri `$predicate` e `$else` esistono dalla versione 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Vedi [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Restituisce la chiave del primo elemento (corrispondente al predicato, se specificato) o null se tale elemento non esiste. Il predicato `$predicate` ha la firma `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Vedi [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Appiattisce un array multidimensionale in uno piatto.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

Restituisce l'elemento `$array[$key]`. Se non esiste, lancia un'eccezione `Nette\InvalidArgumentException`, oppure, se è specificato il terzo parametro `$default`, restituisce quello.

```php
// se $array['foo'] non esiste, lancia un'eccezione
$value = Arrays::get($array, 'foo');

// se $array['foo'] non esiste, restituisce 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

La chiave `$key` può anche essere un array.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// restituisce 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Ottiene un riferimento all'elemento specificato dell'array. Se l'elemento non esiste, verrà creato con il valore null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// restituisce un riferimento a $array['foo']
```

Come la funzione [get() |#get()], può lavorare con array multidimensionali.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// restituisce un riferimento a $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Restituisce solo gli elementi dell'array il cui valore corrisponde all'espressione regolare `$pattern`. Se `$invert` è `true`, restituisce invece gli elementi che non corrispondono. Un errore durante la compilazione o l'elaborazione dell'espressione lancia un'eccezione `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// restituisce solo gli elementi dell'array composti da cifre
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Inserisce il contenuto dell'array `$inserted` nell'array `$array` subito dopo l'elemento con la chiave `$key`. Se `$key` è `null` (o non è nell'array), viene inserito alla fine.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Inserisce il contenuto dell'array `$inserted` nell'array `$array` prima dell'elemento con la chiave `$key`. Se `$key` è `null` (o non è nell'array), viene inserito all'inizio.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Invoca tutti i callback e restituisce un array di risultati.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Chiama un metodo su ogni oggetto nell'array e restituisce un array di risultati.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Verifica se l'array è indicizzato secondo una serie ascendente di chiavi numeriche a partire da zero, alias lista.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Restituisce l'ultimo elemento (corrispondente al predicato, se specificato). Se tale elemento non esiste, restituisce il risultato della chiamata `$else` o null.
Il parametro `$predicate` ha la firma `function ($value, int|string $key, array $array): bool`.

Non modifica il puntatore interno a differenza di `end()`. I parametri `$predicate` e `$else` esistono dalla versione 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Vedi [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Restituisce la chiave dell'ultimo elemento (corrispondente al predicato, se specificato) o null se tale elemento non esiste. Il predicato `$predicate` ha la firma `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Vedi [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Chiama `$transformer` su tutti gli elementi dell'array e restituisce un array dei valori restituiti. Il callback ha la firma `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Crea un nuovo array trasformando i valori e le chiavi dell'array originale. La funzione `$transformer` ha la firma `function ($value, $key, array $array): ?array{$newKey, $newValue}`. Se `$transformer` restituisce `null`, l'elemento viene saltato. Per gli elementi conservati, il primo elemento dell'array restituito viene utilizzato come nuova chiave e il secondo elemento come nuovo valore.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Questo metodo è utile in situazioni in cui è necessario modificare la struttura dell'array (chiavi e valori contemporaneamente) o filtrare elementi durante la trasformazione (restituendo null per gli elementi indesiderati).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Unisce ricorsivamente due array. È utile, ad esempio, per unire strutture ad albero. Durante l'unione, segue le stesse regole dell'operatore `+` applicato agli array, cioè aggiunge coppie chiave/valore dal secondo array al primo e, in caso di collisione di chiavi, mantiene il valore del primo array.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

I valori del secondo array vengono sempre aggiunti alla fine del primo. La scomparsa del valore `10` dal secondo array può sembrare un po' confusionaria. È necessario rendersi conto che questo valore, così come il valore `5` nel primo array, hanno assegnata la stessa chiave numerica `0`, quindi nell'array risultante c'è solo l'elemento del primo array.


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

Normalizza un array in un array associativo. Sostituisce le chiavi numeriche con i loro valori; il nuovo valore sarà `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

Restituisce e rimuove il valore di un elemento dall'array. Se non esiste, lancia un'eccezione o restituisce il valore `$default`, se specificato.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// lancia Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Rinomina una chiave nell'array. Restituisce `true` se la chiave è stata trovata nell'array.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Restituisce la posizione della chiave data nell'array. La posizione è numerata da 0. Nel caso in cui la chiave non venga trovata, la funzione restituisce `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // restituisce 0
$position = Arrays::getKeyOffset($array, 'second'); // restituisce 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // restituisce null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Verifica se almeno un elemento nell'array supera il test implementato in `$predicate` con la firma `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Vedi [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Converte un valore in una chiave di array, che è un intero o una stringa.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Copia gli elementi dell'array `$array` nell'oggetto `$object`, che viene poi restituito.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // imposta $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Converte ogni elemento dell'array in una stringa e lo racchiude con il prefisso `$prefix` e il suffisso `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

L'oggetto [api:Nette\Utils\ArrayHash] è un discendente della classe generica stdClass e la estende con la capacità di trattarlo come un array, ad esempio accedendo ai membri tramite parentesi quadre:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // funziona anche la notazione a oggetto
$hash->foo; // 123
```

È possibile utilizzare la funzione `count($hash)` per determinare il numero di elementi.

È possibile iterare sull'oggetto come su un array, anche con un riferimento:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Possiamo trasformare un array esistente in `ArrayHash` con il metodo `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

La conversione è ricorsiva:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // oggetto ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Questo può essere evitato con il secondo parametro:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // array
```

Trasformazione di nuovo in array:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] rappresenta un array lineare in cui gli indici sono solo numeri interi crescenti a partire da 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Possiamo trasformare un array esistente in `ArrayList` con il metodo `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

È possibile utilizzare la funzione `count($list)` per determinare il numero di elementi.

È possibile iterare sull'oggetto come su un array, anche con un riferimento:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

L'accesso a chiavi al di fuori dei valori consentiti lancia un'eccezione `Nette\OutOfRangeException`:

```php
echo $list[-1]; // lancia Nette\OutOfRangeException
unset($list[30]); // lancia Nette\OutOfRangeException
```

La rimozione di una chiave causa la rinumerazione degli elementi:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

È possibile aggiungere un nuovo elemento all'inizio con il metodo `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
