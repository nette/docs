Composer
########

/--div .[perex]
Composer je nástroj na správu závislostí v PHP. Dovoluje nám deklarovat libovolně složité závislosti jednotlivých knihoven a pak je za nás nainstaluje, do našeho projektu. Ukážeme si

- jak Composer nainstalovat
- použití v novém či stávajícím projektu
- vytvoření a publikace vlastního balíčku
\--


Instalace do operačního systému
*******************************

Composer se distribuuje jako spustitelný `.phar` soubor, který si můžete "stáhnout zde":http://getcomposer.org/composer.phar.

Pokud používáte Linux, můžete si stáhnout Composer přes installer (doporučováno)

/--code sh
$ curl -s http://getcomposer.org/installer | php
\--

Vložením do složky, která je v systémovém `PATH`

/--code sh
$ mv ./composer.phar ~/bin/composer
\--

se stane composer přístupný globálně pod jednoduchým příkazem

/--code sh
$ composer
\--

/--comment
TODO: doplnit windows (může nějaký windowsák prosím?)
\--


Packagist.org - centrální repozitář
***********************************

"Packagista":http://packagist.org je hlavní repozitář, ve kterém se Composer snaží vyhledávat balíčky, pokud mu neřekneme jinak. Můžeme zde publikovat i vlastní balíčky, "tak jako Nette":http://packagist.org/packages/nette/.

Nejsnadnější způsob, jak balíček publikovat, je nahrát ho na "Github":http://github.com a jeho url pak vložit do Packagisty. Jak se balíček vytváří si ukážeme za chvilku.


Použítí
*******

Základem pro jakýkoliv projekt nebo knihovnu, která využívá Composer, je soubor `composer.json`, který obsahuje meta informace o projektu či knihovně a jejích závislostech.

Náš základní `composer.json` tedy může vypadat takto

/--code javascript
{
	"require": {
		"php" : ">=5.3.2",
		"nette/nette": "2.0.*"
	}
}
\--

Říkáme zde, že naše aplikace (nebo knihovna) vyžaduje balíček `nette/nette` a chce nejnovější verzi, která odpovídá `2.0.*` a taky že běží pouze na PHP větším nebo rovno `5.3.2`.

Máme tedy v kořenu projektu soubor `composer.json` a spustíme instalaci

/--code sh
$ composer install
\--

Composer stáhne Nette a vloží ho do složky `vendor/nette/nette`.


Lock soubor
-----------

Při instalaci vždy Composer vytvoří zámek `composer.lock`, hned vedle `composer.json`. Tento soubor obsahuje jednotlivé verze nainstalovaných balíčků. Je standardem, že `composer.lock` commitujeme do repozitáře pouze u konkrétních aplikací a u knihoven nikoliv. Mohla by totiž nastat situace, kdy se vydá nová verze a kolega si stáhne aplikaci, zavolá `$ composer install` a bude mít novější verze knihoven. Lock soubor tomu zabraňuje, protože při instalaci se Composer vždy snaží použít verze uvedené v zámku.

.[note]
Pokud si chceme vynutit aktualizaci knihoven, stačí jednoduše zavolat `$ composer update`.


Co když nechceme používat centrální repozitář?
----------------------------------------------

Pokud máme vnitrofiremní aplikace, které zkrátka nemůžete hostovat na Githubu, aby jste si je mohli instalovat přes Composer, tak si můžete jednoduše nadefinovat vlastní repozitáře. Ukážeme si příklad na Nette, ale v `url` může být libovolná cesta, nebo adresa, která směřuje na git, svn nebo mercurial.

/--code javascript
{
	"repositories": [
		{
			"type": "vcs",
			"url": "git://github.com/nette/nette.git"
		}
	],
	"require": {
		"nette/nette": "dev-master",
	}
}
\--

.[tip]
Stejně tak umí pracovat s repozitáři Pearu (je třeba uvést jiný typ) a zip soubory (distribuční balíky).

.[note]
Více na téma repozitářů "v oficiální dokumentaci":http://getcomposer.org/doc/05-repositories.md#repositories.


Vlastní balíčky
***************

Za balíček se dá automaticky považovat jakýkoliv projekt, který má v kořenu `composer.json`. Ovšem aby se taková knihovna dala použít jako validní závislost, má povinné dvě pole, `name` a `version`.

/--code javascript
{
	"name": "MojeJmeno/Blog",
	"description" : "Nejlepší blog",
	"version": "1.0.0"
}
\--

.[note]
Jméno se skládá z poskytovatele (vendor) a z konkrétního balíčku, což bylo zavedeno kvůli konfliktům.

.[tip]
Pokud používáme verzovací systém (například git), tak není vůbec nutné verzi uvádět. Composer si umí sám přečíst jaké jsou v projektu "tagy":http://getcomposer.org/doc/02-libraries.md#tags a "větve":http://getcomposer.org/doc/02-libraries.md#branches a detekuje, co z toho vypadá jako verze a je možné si to zvolit jako závislost.


Autoloading
-----------

Composer za nás řeší i autoloading. Každá knihovna může v `composer.json` uvést, jaký standard používá a Composer se přizpůsobí. Řekněme tedy, že bude používat PSR-0, náš hlavní namespace bude `MojeJmeno` a bude v podsložce libs.

/--code javascript
{
	"autoload": {
		"psr-0": {"MojeJmeno": "libs/"},
	}
}
\--

Co když ale PSR-0 tak docela nedodržujeme? Žádný problém, stačí uvést `classmap` místo `psr-0`, což je ekvivalent "RobotLoaderu z Nette":http://doc.nette.org/cs/auto-loading.

/--code javascript
{
	"autoload": {
		"classmap": ["src/", "lib/"]
	}
}
\--

Všechny tyto informace si Composer převede do jedné mapy `namespace => složka` a pak nám z toho generuje autoloader, pro všechny knihovny, které mu sdělily, jak je možné je načítat.

Ve `www/index.php` tedy zaměníme následující řádky

/--code php
define('LIBS_DIR', WWW_DIR . '/../libs');
\--
/--code php
define('LIBS_DIR', WWW_DIR . '/../vendor');
\--

.[note]
Pokud nám nevyhovuje název složky `vendor/`, je možné název této složky změnit na známé `libs/`. Stačí nastavit direktivu `vendor-dir` v `composer.json`, "podle dokumentace":http://getcomposer.org/doc/04-schema.md#config.

V `app/boostrap.php` by nám přibyl řádek s cestou ke generovanému autoloaderu

/--code php
require_once LIBS_DIR . '/.composer/autoload.php';
\--

A ubyl by nám následující řádek v nastavení Nettího Robota, aby se nesnažil indexovat knihovny, o které se stará Composer.

/--code php
->addDirectory(LIBS_DIR)
\--

/--comment
Doufám, že následující odstavec se bude moct brzo smazat, po vytvoření nějaké Nette\Bootstrap třídy ;)
\--

Nutno podotknout, že Nette vyžaduje zavolání svého loaderu při každém spuštění. Malinko se nám tedy prodlouží cesta k loaderu

/--code php
require_once LIBS_DIR . '/Nette/loader.php';
\--

/--code php
require_once LIBS_DIR . '/nette/nette/Nette/autoload.php';
\--
