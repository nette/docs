Code-Prüfer
***********

.[perex]
Das Tool namens [Code Checker |https://github.com/nette/code-checker] prüft und repariert möglicherweise einige der formalen Fehler in Ihrem Quellcode.


Installation
============

Code Checker sollte als Projekt installiert werden, verwenden Sie es nicht als Abhängigkeit.

```shell
composer create-project nette/code-checker
```

Oder installieren Sie ihn global über:

```shell
composer global require nette/code-checker
```

und stellen Sie sicher, dass Ihr globales Vendor Binarys-Verzeichnis in [Ihrer `$PATH` Umgebungsvariable |https://getcomposer.org/doc/03-cli.md#global] enthalten ist.


Verwendung
==========

```
Usage: php code-checker [options]

Options:
	-d <path>             Folder or file to scan (default: current directory)
	-i | --ignore <mask>  Files to ignore
	-f | --fix            Fixes files
	-l | --eol            Convert newline characters
	--no-progress         Do not show progress dots
	--strict-types        Checks whether PHP 7.0 directive strict_types is enabled
```

Ohne Parameter wird das aktuelle Arbeitsverzeichnis im Nur-Lese-Modus geprüft, mit dem Parameter `-f` werden Dateien korrigiert.

Bevor Sie sich mit dem Tool vertraut machen, sollten Sie Ihre Dateien sichern.

Zur einfacheren Ausführung von Code-Checker unter Windows können Sie eine Batch-Datei erstellen, z.B. `code.bat`:

```shell
php path_to\Nette_tools\Code-Checker\code-checker %*
```


Was macht Code-Checker?
=======================

- Entfernt [BOM |nette:glossary#bom]
- prüft die Gültigkeit von [Latte-Vorlagen |latte:]
- prüft die Gültigkeit der Dateien `.neon`, `.php` und `.json`
- prüft auf [Steuerzeichen |nette:glossary#control characters]
- prüft, ob die Datei in UTF-8 kodiert ist
- prüft falsch geschriebene `/* @annotations */` (zweites Sternchen fehlt)
- entfernt PHP-Endungstags `?>` in PHP-Dateien
- entfernt nachstehende Leerzeichen und unnötige Leerzeilen am Ende einer Datei
- normalisiert die Zeilenenden auf die Systemvorgabe (mit dem Parameter `-l` )

{{leftbar: www:@menu-common}}
