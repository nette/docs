Предложение об изменении кодекса
********************************

Nette Framework использует Git и [GitHub |https://github.com/nette/nette] для поддержки кодовой базы. Лучший способ внести свой вклад - зафиксировать свои изменения в собственном форке, а затем сделать pull request на GitHub. В этом документе кратко описаны основные шаги для успешного внесения изменений.


Подготовка среды .[#toc-preparing-environment]
==============================================

Начните с [форка |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] [Nette на GitHub |https://github.com/nette]. Тщательно [настройте |https://help.github.com/en/github/getting-started-with-github/set-up-git] локальную среду Git, задайте имя пользователя и email, эти учетные данные будут идентифицировать ваши изменения в истории Nette Framework.


Работа над вашим патчем .[#toc-working-on-your-patch]
=====================================================

Прежде чем начать работу над патчем, создайте новую ветвь для своих изменений.
```shell
git checkout -b new_branch_name
```

Вы можете работать над изменением своего кода.

Если возможно, вносите изменения из последней выпущенной версии.


Тестирование ваших изменений .[#toc-testing-your-changes]
=========================================================

Вам необходимо установить Nette Tester. Самый простой способ - вызвать `composer install` в корне репозитория. Теперь вы должны иметь возможность запускать тесты с `./vendor/bin/tester` в терминале.

Некоторые тесты могут не работать из-за отсутствия php.ini. Поэтому следует вызвать бегунок с параметром -c и указать путь к php.ini, например, `./vendor/bin/tester -c ./tests/php.ini`.

После того, как вы сможете запустить тесты, вы можете реализовать свои собственные или изменить отказ, чтобы соответствовать новому поведению. Подробнее о тестировании с помощью Nette Tester читайте на [странице документации |tester:].


Стандарты кодирования .[#toc-coding-standards]
==============================================

Ваш код должен соответствовать [стандартам кодирования |coding standard], используемым в Nette Framework. Это легко, потому что есть автоматический чекер и фиксер. Он может быть установлен через Composer в выбранный вами глобальный каталог:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Теперь вы должны быть в состоянии запустить инструмент в терминале. Например, эта команда проверяет и исправляет код в папках `src` и `tests` в текущем каталоге:

```shell
/path/to/nette-coding-standard/ecs check src tests --config /path/to/nette-coding-standard/coding-standard-php71.yml --fix
```


Зафиксировать изменения .[#toc-committing-the-changes]
------------------------------------------------------

После того как вы изменили код, необходимо зафиксировать изменения. Создайте несколько коммитов, по одному на каждый логический шаг. Каждый коммит должен быть пригоден для использования как есть - без других коммитов. Поэтому соответствующие тесты должны быть включены в тот же коммит.

Пожалуйста, дважды проверьте, соответствует ли ваш код правилам:
- Код не генерирует никаких ошибок
- Ваш код не нарушает никаких тестов.
- Ваше изменение кода протестировано.
- Вы не совершаете бесполезных изменений в белых пятнах.

Сообщение о фиксации должно соответствовать формату `Latte: fixed multi template rendering [Closes # 69]` т.е:
- область, за которой следует двоеточие
- цель фиксации в прошлом, если возможно, начинайте с "добавлено.", "исправлено.", "рефакторинговано.", изменено, удалено
- возможная ссылка на трекер проблем
- если коммит отменяет обратную совместимость, добавьте "BC break".
- после темы может быть одна свободная строка и более подробное описание, включая ссылки на форум.


Pull-Requesting the Commits .[#toc-pull-requesting-the-commits]
===============================================================

Если вы удовлетворены своими изменениями и коммитами в коде, вы должны опубликовать свои коммиты на GitHub.

```shell
git push origin new_branch_name
```

Изменения представлены публично, однако вы должны предложить свои изменения для интеграции в мастер-ветку Nette. Для этого сделайте [запрос на |https://help.github.com/articles/creating-a-pull-request] исправление.
Каждый запрос имеет заголовок и описание. Пожалуйста, предоставьте какое-нибудь описывающее название. Часто оно похоже на название ветки, например, "Защита сигналов от CSRF-атак".

Описание запроса на исправление должно содержать более конкретную информацию о ваших изменениях кода:
```
- bug fix? yes/no   <!-- #issue numbers, if any -->
- new feature? yes/no
- BC break? yes/no
- doc PR: nette/docs#???  <!-- highly welcome, see https://nette.org/en/writing -->
```

Пожалуйста, измените информационную таблицу в соответствии с вашим запросом. Комментарии к каждому пункту списка:
- Указывается, добавляет ли запрос на исправление **фичу** или это **исправление**.
- Ссылается на **связанный вопрос**, который будет закрыт после объединения заявки.
- Говорится, нужны ли в заявке **изменения документации**, если да, то укажите ссылки на соответствующие заявки. Вы не обязаны предоставлять изменения документации немедленно, однако запрос на исправление не будет объединен, если изменения документации необходимы. Изменение документации должно быть подготовлено для английской документации, мутации других языков необязательны.
- Говорится, если запрос на изменение создаёт **разрыв BC**. Пожалуйста, считайте все, что изменяет публичный интерфейс, нарушением BC.

Итоговая таблица может выглядеть следующим образом:
```
- bug fix? no
- new feature? yes   issue #123
- BC break? no
```


Переработка ваших изменений .[#toc-reworking-your-changes]
==========================================================

Очень часто приходится получать комментарии к вашим изменениям в коде. Пожалуйста, старайтесь следовать предложенным изменениям и перерабатывайте свои коммиты для этого. Вы можете зафиксировать предложенные изменения как новые коммиты, а затем раздавить их на предыдущие. См. главу [Интерактивный rebase |https://help.github.com/en/github/using-git/about-git-rebase] на GitHub. После перебазирования изменений, принудительно отправьте изменения в ваш удаленный форк, все будет автоматически распространено в pull request.

{{priority: -1}}
