Vytváření odkazů URL
********************

<div class=perex>

Tvořit odkazy v Nette je jednoduché, jako ukazovat prstem. Stačí jen namířit a framework už za vás všechnu práci udělá. Ukážeme si:

- jak vytvářet odkazy v šablonách i jinde
- jak odlišit odkaz na aktuální stránku
- co s neplatnými odkazy

</div>


Díky [obousměrnému routování |routing] nebudeme nikdy muset do šablon či kódu zapisovat navrdo URL naší aplikace, které se mohou později měnit, nebo je komplikovaně skládat. V odkazu stačí uvést presenter a akci, předat případné parametry a framework už URL vygeneruje sám. Vlastně je to velice podobné, jako když voláte funkci. To se vám bude líbit.


Odkazy v šablonách presenterů
=============================

Nejčastěji vytváříme odkazy v šablonách. Aby to bylo co nejjednodušší, nabízí nám framework hned tři cesty. Nejšikovnější z nich je `n:href`

```html
<a n:href="Product:show $productId">detail produktu</a>
```

Všimněte si, že místo HTML atributu `href` jsme použili [n:atribut |latte:guide#n-atributy] `n:href`. Jeho hodnotou pak není URL, jak by tomu bylo v případě atributu `href`, ale název presenteru a akce. Tedy:

```
n:href="[Presenter:]action [,] [arg1] [, arg2] [, ...]"
```

Po kliknutí na odkaz se, zjednodušeně řečeno, dostane ke slovu metoda `ProductPresenter::renderShow()` a v parametru `$id` ji bude předána hodnota proměnné `$productId`. Parametrů bychom mohli předat i víc, stejně jako když voláme metodu.

Kromě toho je možné předávat i pojmenované parametry. Následující odkaz předává parametr `lang` s hodnotou `cs`:

```html
<a n:href="Product:show $productId, lang => cs">detail produktu</a>
```

Pokud metoda `ProductPresenter::renderShow()` nemá `$lang` ve své signatuře, může hodnotu parametru zjistit pomocí `$lang = $this->getParameter('lang')`.

Máme-li všechny parametry v poli, můžeme jej rozvinout operátorem `(expand)`:

```html
{var $args = [$productId, lang => cs]}
<a n:href="Product:show (expand) $args">detail produktu</a>
```

Pokud je šablona, ve které vytváříme odkaz, také součástí `Product` presenteru, můžeme název presenteru vynechat a psát přímo `n:href="show $productId"`. Vede-li odkaz na akci nazvanou `default`, lze tuto vynechat a napsat `n:href="Product: $id"` (nezapomeňte na dvojtečku).

Odkazy mohou také směřovat do jiných [modulů |application#moduly]. Zde se rozlišuje, zda se odkazujeme "relativně" do zanořeného submodulu, nebo "absolutně" do jiného modulu - pak cesta začne dvojtečkou. Pro ukázku předpokládejme, že aktuální presenter je součástí modulu `Front`, potom zapíšeme:

```html
<a n:href="Shop:Product:show">odkaz na Front:Shop:Product:show</a>
<a n:href=":Admin:Product:show">odkaz na Admin:Product:show</a>
```

Speciálním případem je odkaz na sebe sama, kdy jako cíl uvedeme `this`.

Na [signály|components#Signál neboli subrequest] se odkazuje uvedením vykřičníku (zavolá funkci `handleClick()`):

```html
<a n:href="click! $x, $y"> ... </a>
```

Lze vytvořit i odkaz na signál subkomponenty pomocí `nhref="component:subcomponent:signal!"`.

Odkazovat můžeme na určitou část na stránce přes tzv. fragment za znakem mřížky `#`:

```html
<a n:href="show#comments">odkaz na Product:show a fragment #comments</a>
```

Atribut `n:href` je velmi šikovný, pokud vytváříme HTML značku `<a>`. Chceme-li odkaz vypsat jinde, například v textu šablony, použijeme `{link}` se stejnou vnitřní syntaxí:

```html
Adresa je: {link Product:show $productId}
```

Vygenerovaný odkaz má podobu relativní cesty. Pokud potřebujeme **absolutní odkaz včetně domény**, přidáme na začátek dvě lomítka (např. `n:href="//show $productId"`). Pokud nastavíme v presenteru proměnnou [$absoluteUrls |presenters#Šablony] na `true`, budou všechny od té chvíle generované odkazy absolutní.


Odkazy v šablonách komponent
============================

V šablonách [komponent|components] odkazy fungují trošku jinak. Protože komponenty jsou samostatné znovupoužitelné celky, neměly by mít žádné vazby na okolní presentery. Proto `n:href`, `{link}` i metoda `link()` považují cíl v odkazu vždy za název signálu. Proto není nutné uvádět vykřičník:

```html
<a n:href="click $x, $y"> ... </a>
```

Tohle je v komponentě odkaz na signál `click`.

Pokud bychom opravdu chtěli v komponentě odkazovat na presentery, lze k tomu použít značku `{plink}`:

```html
<a href="{plink Product:show $productId}"> ... </a>
```


Odkaz na aktuální stránku
=========================

Presenter nabízí metodu `isLinkCurrent()`, pomocí které zjistíme, zda je cíl odkazu shodný s aktuální stránkou. Toho lze využít například v šabloně k odlišení odkazů atd.

Parametry jsou stejné jako u metody `link()`, navíc je však možné místo konkrétní akce uvést zástupný znak `*`, který znamená jakoukoliv akci daného presenteru.

```html
{if !$presenter->isLinkCurrent('Admin:login')}
	<a n:href="Admin:login">Přihlaste se</a>
{/if}

<li n:class="$presenter->isLinkCurrent('Product:*') ? active">
	<a n:href="Product:">...</a>
</li>
```

V kombinaci s `n:href` v jednom elementu se dá použít zkrácená podoba:

```html
<a n:class="$presenter->isLinkCurrent() ? active" n:href="Product:detail">...</a>
```

Zástupný znak `*` lze použít pouze místo akce, nikoliv presenteru. Pro zjištění, zda jsme v určitém modulu nebo jeho submodulu, použijeme metodu `$presenter->isModuleCurrent(moduleName)`.

```html
<li n:class="$presenter->isModuleCurrent('MyEshop:Users') ? active">
	<a n:href="Product:">...</a>
</li>
```


Odkazování v kódu
=================

Presenter disponuje metodou `link()`, pomocí které lze vytvářet odkazy podobně jako v šabloně. Prvním parametrem je cílový presenter a akce, následují předávané argumenty:

```php
$url = $this->link('Product:show', $productId);
```

Ty lze předat také pomocí pole:

```php
$url = $this->link('Product:show', [$productId, 'lang' => 'cs']);
```

Metoda `link()` u komponent odkazuje přímo na [signály|components#Signál neboli subrequest]:

```php
$url = $this->link('click', $x, $y);
```


Neplatné odkazy
===============

Může se stát, že vytvoříme neplatný odkaz - buď proto, že vede na neexistující presenter, nebo proto, že předává víc parametrů, než které cílová metoda přijímá ve své signatuře, nebo když pro cílovou akci nelze vygenerovat URL. Jak naložit s neplatnými odkazy určuje statická proměnná `Presenter::$invalidLinkMode`. Ta může nabývat kombinaci těchto hodnot (konstant):

- `Presenter::INVALID_LINK_SILENT` - tichý režim, jako URL se vrátí znak #
- `Presenter::INVALID_LINK_WARNING` - vyhodí se varování E_USER_WARNING, které bude v produkčním režimu zalogováno, ale nezpůsobí přerušení běhu skriptu
- `Presenter::INVALID_LINK_TEXTUAL` - vizuální varování, vypíše chybu přímo do odkazu
- `Presenter::INVALID_LINK_EXCEPTION` - vyhodí se výjimka InvalidLinkException

Výchozí nastavení je `INVALID_LINK_WARNING` v produkčním režimu a `INVALID_LINK_WARNING | INVALID_LINK_TEXTUAL` ve vývojovém. `INVALID_LINK_WARNING` v produkčním prostředí nezpůsobí přerušení skriptu, ale varování bude zalogováno. Ve vývojovém prostředí ho zachytí [Tracy | tracy:] a zobrazí bluescreen. `INVALID_LINK_TEXTUAL` pracuje tak, že jako URL vrátí chybovou zprávu, která začíná znaky `#error:`. Aby takové odkazy byly na první pohled patrné, doplníme si do CSS:

```css
a[href^="#error:"] {
	background: red;
	color: white;
}
```

Pokud nechceme, aby se ve vývojovém prostředí produkovala varování, můžeme nastavit tichý režim přímo v [konfiguraci|configuring#application].

```neon
application:
	silentLinks: true
```

{{composer: nette/router}}
