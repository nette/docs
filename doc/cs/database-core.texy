Database Core
*************

.[perex]
Nette Database Core je základní vrstva pro přístup k databázi, tzv. database abstraction layer.


Připojení a konfigurace
=======================

Pro připojení k databázi stačí vytvořit instanci třídy [api:Nette\Database\Connection]:

/--php
$database = new Nette\Database\Connection($dsn, $user, $password);
\--

Parametr `$dsn` (data source name) je stejný, [jaký používá PDO |http://php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters], např. `host=127.0.0.1;dbname=test`. V případě selhání vyhodí výjimku `Nette\Database\ConnectionException`.

Nicméně šikovnější způsob nabízí [aplikační konfigurace |configuring#databaze], kam stačí přidat sekci `database` a vytvoří se potřebné objekty a také databázový panel v [Tracy | tracy:] baru.

/--neon
	database:
		dsn: 'mysql:host=127.0.0.1;dbname=test'
		user: root
		password: password
\--

Poté objekt spojení [získáme jako službu z DI kontejneru |di-usage], např.:

/--php
class Model
{
	private $database;

	// pro práci s vrstvou Database Explorer si předáme Nette\Database\Context
	public function __construct(Nette\Database\Connection $database)
	{
		$this->database = $database;
	}
}
\--

Více informací o [konfiguraci databáze|configuring#databaze].


Dotazy
======

Databázové dotazy pokládáme metodou `query()`, která vrací [ResultSet |api:Nette\Database\ResultSet].

/--php
$result = $database->query('SELECT name FROM users');

foreach ($result as $row) {
	echo $row->name;
}

echo $result->getRowCount(); // vrací počet řádků výsledku, pokud je znám
\--

.[note]
Nad `ResultSet` je možné iterovat pouze jednou, pokud potřebujeme iterovat vícekrát, je nutno výsledek převést na pole metodou `fetchAll()`.

Do dotazu lze velmi snadno přidávat i parametry, všimněte si otazníku:

/--php
$database->query('SELECT * FROM users WHERE name = ?', $name);

$database->query('SELECT * FROM users WHERE name = ? AND active = ?', $name, $active);

$database->query('SELECT * FROM users WHERE id IN (?)', $ids); // $ids je pole
\--

/--div .[warning]
	POZOR, nikdy dotazy neskládejte jako řetězce, vznikla by zranitelnost [SQL injection |https://cs.wikipedia.org/wiki/SQL_injection]
	/--
	$database->query('SELECT * FROM users WHERE name = ' . $name); // ŠPATNĚ!!!
	\--
\---

Kromě `query()` jsou tu další užitečné funkce:

/--php
// vrátí asociativní pole id => name
$pairs = $database->fetchAssoc('SELECT id, name FROM users');

// vrátí všechny záznamy jako pole
$rows = $result->fetchAll('SELECT * FROM users');

// vrátí jeden záznam
$row = $result->fetch('SELECT * FROM users WHERE id = ?', $id);

// vrátí přímo hodnotu buňky
$name = $result->fetchField('SELECT name FROM users WHERE id = ?', $id);
\--

V případě selhání všechny tyto metody vyhodí `Nette\Database\DriverException`.


Insert, Update & Delete
=======================

/--php
// INSERT INTO users (`name`, `year`) VALUES ('Jim', 1978)
$database->query('INSERT INTO users', [ // tady můžeme vynechat otazník
	'name' => $name,
	'year' => $year,
]);

$id = $database->getInsertId(); // vrátí auto-increment vloženého záznamu

$id = $database->getInsertId($sequence); // nebo hodnotu sekvence
\--

Vícenásobný INSERT:

/--php
// INSERT INTO users (`name`, `year`) VALUES ('Jim', 1978), ('Jack', 1987)
$database->query('INSERT INTO users', [
	'name' => 'Jim',
	'year' => 1978,
], [
	'name' => 'Jack',
	'year' => 1987,
]);
\--

Vložení, nebo úprava záznamu, pokud již existuje:

/--php
// INSERT INTO users (`id`, `name`, `year`) VALUES (123, 'Jim', 1978)
//   ON DUPLICATE KEY UPDATE `year` = 1978
$database->query('INSERT INTO users', [
	'id' => $id,
	'name' => $name,
	'year' => $year,
], 'ON DUPLICATE KEY UPDATE', [
	'year' => $year,
]);
\--

Úprava záznamů:

/--php
// UPDATE users SET `name` = 'Jim', `year` = 1978 WHERE id = 123
$result = $database->query('UPDATE users SET', [
	'name' => $name,
	'year' => $year,
], 'WHERE id = ?', $id);

echo $result->getRowCount(); // vrací počet ovlivněných řádků
\--

Mazání:

/--php
$result = $database->query('DELETE FROM users WHERE id = ?', $id);
echo $result->getRowCount(); // vrací počet ovlivněných řádků
\--

V případě selhání `query()` vyhodí buď `Nette\Database\DriverException` nebo některého z potomků:

- [ConstraintViolationException |api:Nette\Database\ConstraintViolationException] - porušení nějakého omezení pro tabulku
- [ForeignKeyConstraintViolationException |api:Nette\Database\ForeignKeyConstraintViolationException] - neplatný cizí klíč
- [NotNullConstraintViolationException |api:Nette\Database\NotNullConstraintViolationException] - porušení podmínky NOT NULL
- [UniqueConstraintViolationException |api:Nette\Database\UniqueConstraintViolationException] - koliduje unikátní index


Pokročilé dotazy
================

V dotazech můžeme používat výčty a operátory:

/--php
$result = $database->query('SELECT * FROM users WHERE ?', [
	'name' => $names, // ['Jim', 'Jack'],
	'year >' => $year, // všimněte si operátoru >
	'role NOT IN' => ['admin', 'owner'],
]);
// SELECT * FROM users WHERE
//    `name` IN ('Jim', 'Jack')
//    AND `year` > 1978
//    AND `role` NOT IN ('admin', 'owner')
\--

Podmínky se standardně spojují operátorem `AND`, což můžeme změnit pomocí `?or`:

/--php
$result = $database->query('SELECT * FROM users WHERE ?or', [
	'name' => $name,
	'year >' => $year,
]);
// SELECT * FROM users WHERE `name` = 'Jim' OR `year` > 1978
\--

Pro složitější kombinace využijeme tzv. SQL literály:

/--php
$result = $database->query('SELECT * FROM users WHERE ?', [
	'name' => $name,
	$database::literal('year > ? AND year < ?', $min, $max),
]);
// SELECT * FROM users WHERE `name` = 'Jim' AND (year > 1978 AND year < 2017)
\--

Nebo:

/--php
$result = $database->query('SELECT * FROM users WHERE ?', [
	'name' => $name,
	$database::literal('?or', [
		'active' => true,
		'role' => $role,
	]),
]);
// SELECT * FROM users WHERE `name` = 'Jim' AND (`active` = 1 OR `role` = 'admin')
\--

A to není vše, můžeme používat i soubory nebo objekty DateTime:

/--php
$database->query('INSERT INTO users', [
	'name' => $name,
	'created' => new DateTime, // nebo $database::literal('NOW()')
	'avatar' => fopen('image.gif', 'r'), // vloží soubor
]);
\--

Pro UPDATE můžeme využít operátorů `+=` a `-=`:

/--php
$database->query('UPDATE users SET', [
	'age+=' => 1, // všimněte si +=
	'name' => $database::literal('UPPER(name)'),
], 'WHERE id = ?', $id);
// UPDATE users SET `age` = `age` + 1 , `name` = UPPER(name) WHERE id = 123
\--

Parametry můžeme použít i pro řazení:

/--php
$result = $database->query('SELECT * FROM users ORDER BY', [
	'name' => true, // vzestupně
	'year' => false, // sestupně
]);
// SELECT * FROM users ORDER BY `name`, `year` DESC
\--

Výběr z tabulky nebo sloupce, jehož název je v proměnné (pozor, nedovolte uživateli manipulovat s obsahem proměnné):

/--php
$table = 'users';
$column = 'name';
$result = $database->query('SELECT * FROM ?name WHERE ?name = ?', $table, $column, $value);
// SELECT * FROM `users` WHERE `name` = 'Jim'
\--


Transakce
=========

Pro práci s transakcemi slouží trojice metod:

/--php
$database->beginTransaction(); // zahájení transakce

$database->commit(); // potvrzení

$database->rollback(); // vrácení zpět
\--


{{composer: nette/database}}
