Вспомогательные классы
**********************


DomQuery
--------
`Tester\DomQuery` — это класс, расширяющий `SimpleXMLElement` для легкого поиска в HTML или XML с помощью CSS-селекторов.

```php
# создание DomQuery из HTML строки
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# тест существования элементов с помощью CSS селекторов
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# нахождение элементов как массива объектов DomQuery
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# тест, соответствует ли элемент селектору (с версии 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# нахождение ближайшего предка, соответствующего селектору (с 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock
--------
`Tester\FileMock` эмулирует файлы в памяти и облегчает таким образом тестирование кода, который использует функции `fopen()`, `file_get_contents()`, `parse_ini_file()` и подобные. Пример использования:

```php
# Тестируемый класс
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Новый пустой файл
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Тестируем созданное содержимое
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Это не утверждение, а помощник для тестирования приватных методов и свойств объектов.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // доступное приватное $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Метод `purge()` создает указанный каталог, а если он уже существует, удаляет все его содержимое. Полезен для создания временного каталога. Например, в `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - каталог уже может существовать

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Тесты запускаются параллельно. Иногда, однако, нам нужно, чтобы выполнение тестов не перекрывалось. Типично для тестов баз данных необходимо, чтобы тест подготовил содержимое базы данных, и другой тест во время его выполнения в базу данных не вмешивался. В этих тестах используем `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Первый параметр — это имя замка, второй — путь к каталогу для сохранения замка. Тест, который получит замок первым, выполнится, остальные тесты должны подождать его завершения.


Environment::bypassFinals() .[filter]
-------------------------------------
Классы или методы, помеченные как `final`, трудно тестировать. Вызов `Tester\Environment::bypassFinals()` в начале теста приводит к тому, что ключевые слова `final` во время загрузки кода опускаются.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass уже не final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- улучшает читаемость вывода ошибок (включая раскрашивание), иначе выводится стандартный PHP stack trace
- включает проверку, что в тесте были вызваны утверждения, иначе тест без утверждений (например, забытых) также пройдет
- при использовании `--coverage` автоматически запускает сбор информации о выполненном коде (описано далее)
- выводит статус OK или FAILURE в конце скрипта


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Создает глобальные функции `test()`, `testException()`, `setUp()` и `tearDown()`, на которые можно разбить тесты.

```php
test('описание теста', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Позволяет узнать, был ли тест запущен напрямую или с помощью Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# запущено Tester
} else {
	# запущено иначе
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester запускает тесты параллельно в заданном количестве потоков. Если нас интересует номер потока, мы узнаем его из переменной окружения:

```php
echo "Выполняюсь в потоке номер " . getenv(Tester\Environment::VariableThread);
```
