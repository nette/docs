Format NEON
***********

.[perex]
NEON est un format de données structuré lisible par l'homme. Dans Nette, il est utilisé pour les fichiers de configuration. Il est également utilisé pour les données structurées telles que les paramètres, les traductions linguistiques, etc. [Essayez-le dans le bac à sable |https://ne-on.org].

NEON est l'abréviation de *Nette Object Notation*. Ce langage est moins complexe et moins disgracieux que XML ou JSON, mais offre des possibilités similaires. Il est très similaire à YAML. Le principal avantage est que NEON possède ce qu'on appelle des [entités |#entities], grâce auxquelles la configuration des services DI est si sexy. Et il autorise les tabulations pour l'indentation.

NEON a été conçu dès le départ pour être simple à utiliser.


Intégration .[#toc-integration]
===============================

- NetBeans (a un support intégré)
- PhpStorm ([plugin |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([plugin |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte])
- Sublime Text 3 ([plugin |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([plugin |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([plugin |https://github.com/fpob/nette.vim])
- Emacs ([plugin |https://github.com/Fuco1/neon-mode])
- Prism.js ([langage intégré |https://prismjs.com/#supported-languages])


- [NEON pour PHP |@home]
- [NEON pour JavaScript |https://github.com/matej21/neon-js]
- [NEON pour Python |https://github.com/paveldedik/neon-py].


Syntaxe .[#toc-syntax]
======================

Un fichier écrit en NEON se compose généralement d'une séquence ou d'un mappage.


Mappages .[#toc-mappings]
-------------------------
Le mappage est un ensemble de paires clé-valeur, en PHP on l'appellerait un tableau associatif. Chaque paire est écrite comme `key: value`, un espace après `:` est nécessaire. La valeur peut être n'importe quoi : chaîne de caractères, nombre, booléen, null, séquence, ou tout autre mappage.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

En PHP, la même structure serait écrite comme suit :

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Cette notation est appelée notation en bloc car tous les éléments sont sur une ligne séparée et ont la même indentation (aucune dans ce cas). NEON prend également en charge la représentation en ligne pour la cartographie, qui est placée entre parenthèses, l'indentation ne joue aucun rôle, et le séparateur de chaque élément est soit une virgule, soit un saut de ligne :

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

Il s'agit de la même chose écrite sur plusieurs lignes (l'indentation ne joue aucun rôle) :

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

Alternativement, `=` peut être utilisé à la place de <code>: </code> dans la notation en bloc et en ligne :

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Séquences .[#toc-sequences]
---------------------------
Les séquences sont des tableaux indexés en PHP. Elles sont écrites comme des lignes commençant par le trait d'union `-` suivi d'un espace. Encore une fois, la valeur peut être n'importe quoi : chaîne de caractères, nombre, booléen, null, séquence, ou autre correspondance.

```neon
- Cat
- Dog
- Goldfish
```

En PHP, la même structure serait écrite comme suit :

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Cette notation est appelée notation en bloc car tous les éléments sont sur une ligne séparée et ont la même indentation (aucune dans ce cas). NEON prend également en charge la représentation en ligne des séquences, qui sont placées entre parenthèses, l'indentation ne joue aucun rôle, et le séparateur de chaque élément est soit une virgule, soit un saut de ligne :

```neon
[Cat, Dog, Goldfish]
```

Il s'agit de la même chose écrite sur plusieurs lignes (l'indentation ne joue aucun rôle) :

```neon
[
	Cat, Dog
		Goldfish
]
```

Les traits d'union ne peuvent pas être utilisés dans une représentation en ligne.


Combinaison .[#toc-combination]
-------------------------------
Les valeurs des mappings et des séquences peuvent être d'autres mappings et séquences. Le niveau d'indentation joue un rôle important. Dans l'exemple suivant, le trait d'union utilisé pour indiquer les éléments de la séquence a une indentation supérieure à celle de la touche `pets`, de sorte que les éléments deviennent la valeur de la première ligne :

```neon
pets:
 - Cat
 - Dog
cars:
 - Volvo
 - Skoda
```

En PHP, la même structure s'écrirait comme suit :

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Il est possible de combiner la notation en bloc et en ligne :

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

La notation en bloc ne peut plus être utilisée à l'intérieur d'une notation en ligne, cela ne fonctionne pas :

```neon
item: [
	pets:
	 - Cat     # THIS IS NOT POSSIBLE!!!
	 - Dog
]
```

Parce que PHP utilise la même structure pour le mapping et les séquences, c'est-à-dire les tableaux, les deux peuvent être fusionnés. L'indentation est la même cette fois :

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

En PHP, la même structure s'écrirait comme suit :

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Chaînes de caractères .[#toc-strings]
-------------------------------------
Les chaînes de caractères dans NEON peuvent être entourées de guillemets simples ou doubles. Mais comme vous pouvez le voir, elles peuvent aussi être sans guillemets.

```neon
- A unquoted string in NEON
- 'A singled-quoted string in NEON'
- "A double-quoted string in NEON"
```

Si la chaîne contient des caractères `# " ' , : = - [ ] { } ( )` qui peuvent être confondus avec la syntaxe NEON, elle doit être placée entre guillemets. Nous vous recommandons d'utiliser des guillemets simples car ils n'utilisent pas d'échappement. Si vous devez placer un guillemet dans une telle chaîne, doublez-le :

```neon
'A single quote '' inside a single-quoted string'
```

Les guillemets doubles vous permettent d'utiliser des séquences d'échappement pour écrire des caractères spéciaux à l'aide de barres obliques inversées `\`. All escape sequences as in the JSON format are supported, plus `\_`, qui est un espace insécable, c'est-à-dire `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Il existe d'autres cas où vous devez mettre des chaînes de caractères entre guillemets :
- elles commencent ou se terminent par des espaces
- ressemblent à des nombres, des booléens ou des nullités
- NEON les comprendrait comme des [dates |#dates]


Chaînes de caractères multilignes .[#toc-multiline-strings]
-----------------------------------------------------------

Une chaîne de caractères multiligne commence et se termine par un guillemet triple sur des lignes séparées. L'indentation de la première ligne est ignorée pour toutes les lignes :

```neon
'''
	first line
		second line
	third line
	'''
```

En PHP, nous écririons la même chose que :

```php
"first line\n\tsecond line\nthird line" // PHP
```

Les séquences d'échappement ne fonctionnent que pour les chaînes de caractères entourées de guillemets doubles au lieu d'apostrophes :

```neon
"""
	Copyright \u00A9
"""
```


Chiffres .[#toc-numbers]
------------------------
NEON comprend les nombres écrits en notation dite scientifique ainsi que les nombres en binaire, octal et hexadécimal :

```neon
- 12 # un nombre entier
- 12.3 # un flottant
- +1.2e-34 # un nombre exponentiel

- 0b11010 # nombre binaire
- 0o666 # nombre octal
- 0x7A # nombre hexa
```


Nulls .[#toc-nulls]
-------------------
Les nuls peuvent être exprimés dans NEON en utilisant `null` ou en ne spécifiant pas de valeur. Les variantes avec une première majuscule ou toutes les lettres majuscules sont également autorisées.

```neon
a: null
b:
```


Booléens .[#toc-booleans]
-------------------------
Les valeurs booléennes sont exprimées dans NEON en utilisant `true` / `false` ou `yes` / `no`. Les variantes avec une première majuscule ou toutes les lettres majuscules sont également autorisées.

```neon
[true, TRUE, True, false, yes, no]
```


Dates .[#toc-dates]
-------------------
NEON utilise les formats suivants pour exprimer les données et les convertit automatiquement en objets `DateTimeImmutable`:

```neon
- 2016-06-03 # date
- 2016-06-03 19:00:00 # date et heure
- 2016-06-03 19:00:00.1234 # date & microtime
- 2016-06-03 19:00:00 +0200 # date & heure & fuseau horaire
- 2016-06-03 19:00:00 +02:00 # date & heure & fuseau horaire
```


Entités .[#toc-entities]
------------------------
Une entité est une structure qui ressemble à un appel de fonction :

```neon
Column(type: int, nulls: yes)
```

En PHP, elle est analysée comme un objet [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Les entités peuvent également être enchaînées :

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Ce qui est analysé en PHP comme suit :

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

À l'intérieur des parenthèses, les règles de notation en ligne utilisées pour le mappage et les séquences s'appliquent, il peut donc être divisé en plusieurs lignes et il n'est pas nécessaire d'ajouter des virgules :

```neon
Column(
	type: int
	nulls: yes
)
```


Commentaires .[#toc-comments]
-----------------------------
Les commentaires commencent par `#` et tous les caractères suivants à droite sont ignorés :

```neon
# cette ligne sera ignorée par l'interpréteur
street: 742 Evergreen Terrace
city: Springfield # cette ligne est également ignorée
country: USA
```


NEON Versus JSON .[#toc-neon-versus-json]
=========================================
JSON est un sous-ensemble de NEON. Chaque JSON peut donc être analysé comme du NEON :

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

Et si nous pouvions omettre les guillemets ?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

Pourquoi pas des accolades et des virgules ?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

Les puces sont-elles plus lisibles ?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Et les commentaires ?

```neon
# la configuration de mon application web

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # use gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Vous avez trouvé la syntaxe NEON !


{{description: NEON est un langage de sérialisation des données convivial. Il est similaire à YAML. La principale différence est que NEON prend en charge les "entités" et les caractères de tabulation pour l'indentation.}}
{{leftbar: utils:@left-menu}}
