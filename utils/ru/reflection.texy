Рефлексия PHP
*************

.[perex]
[api:Nette\Utils\Reflection] - это статический класс с полезными функциями для рефлексии PHP. Его задача - исправлять недостатки нативных классов и унифицировать поведение в разных версиях PHP.


Установка:

```shell
composer require nette/utils
```

Все примеры предполагают созданный псевдоним:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Проверяет, имеет ли рефлексия доступ к комментариям PHPdoc. Комментарии могут быть недоступны из-за opcode cache, см., например, директиву [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Расширяет имя класса `$name` до его полного имени в контексте класса `$context`, то есть в контексте его пространства имен и определенных псевдонимов. То есть, фактически говорит, как PHP-парсер понял бы `$name`, если бы он был записан в теле класса `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Возвращает рефлексию метода, который содержит объявление метода `$method`. Обычно каждый метод является своим собственным объявлением, но тело метода может находиться и в трейте под другим именем.

Поскольку PHP не предоставляет достаточной информации, с помощью которой можно определить фактическое объявление, Nette использует собственную эвристику, которая **должна быть** надежной.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Возвращает рефлексию класса или трейта, который содержит объявление свойства `$prop`. Свойство может быть объявлено и в трейте.

Поскольку PHP не предоставляет достаточной информации, с помощью которой можно определить фактическое объявление, Nette использует собственную эвристику, которая **не является** надежной.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Проверяет, является ли `$type` встроенным типом PHP. В противном случае это имя класса.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Используйте [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Преобразует рефлексию в понятную человеку строку.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
