Kaj je vrivanje odvisnosti?
***************************

.[perex]
V tem poglavju so predstavljene osnovne programske prakse, ki so temelj celotnega ogrodja Nette in jih morate upoštevati pri pisanju lastnih aplikacij. To so osnove, ki so potrebne za pisanje čiste, razumljive in vzdrževane kode.

Če se naučite teh pravil in jih upoštevate, vam bo ogrodje pomagalo na vsakem koraku. Za vas bo opravljalo rutinska opravila in vam zagotavljalo čim večje udobje, tako da se boste lahko osredotočili na samo logiko.

Načela, ki jih bomo prikazali tukaj, so precej preprosta. Nič vam ni treba skrbeti.


Se spomnite svojega prvega programa? .[#toc-remember-your-first-program]
------------------------------------------------------------------------

Nimamo pojma, v katerem jeziku ste ga napisali, a če bi šlo za PHP, bi bil verjetno videti nekako takole:

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // Odtisi 24
```

Nekaj nepomembnih vrstic kode, v katerih pa se skriva toliko ključnih konceptov. Vidimo, da obstajajo spremenljivke. Koda je razdeljena na manjše enote, ki so na primer funkcije. Da jim posredujemo vhodne argumente in da nam vrnejo rezultate. Manjkajo le še pogoji in zanke.

To, da funkciji posredujemo vhodne argumente, ona pa vrne rezultat, je povsem razumljiv koncept, ki se uporablja tudi na drugih področjih, na primer v matematiki.

Funkcija ima signaturo, ki je sestavljena iz njenega imena, seznama parametrov in njihovih vrst ter nazadnje vrste vrnjene vrednosti. Kot uporabnike nas zanima signatura; običajno nam ni treba vedeti ničesar o notranji implementaciji.

Predstavljajte si, da je podpis funkcije videti takole:

```php
function addition(float $x): float
```

Dodatek z enim parametrom? To je čudno... Kaj pa tole?

```php
function addition(): float
```

To je res čudno, kajne? Kako mislite, da se ta funkcija uporablja?

```php
echo addition(); // kaj natisne?
```

Ob pogledu na takšno kodo smo zmedeni. Ne samo, da je ne bi razumel začetnik, takšne kode ne bi razumel niti izkušen programer.

Se sprašujete, kako je takšna funkcija dejansko videti v notranjosti? Kje bi dobila dodatke? Verjetno bi jih dobila *nekako* sama od sebe, kot je to:

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Izkazalo se je, da so v telesu funkcije skrite povezave z drugimi funkcijami (ali statičnimi metodami), in da bi ugotovili, od kod dejansko prihajajo dodatki, moramo kopati naprej.


Ne na ta način! .[#toc-not-this-way]
------------------------------------

Zasnova, ki smo jo pravkar prikazali, je bistvo številnih negativnih lastnosti:

- podpis funkcije se je pretvarjal, da ne potrebuje dodatkov, kar nas je zmedlo
- nismo vedeli, kako bi funkcijo pripravili do tega, da bi računala z dvema drugima številoma
- morali smo pogledati v kodo, da smo videli, kje vzame aditive
- odkrili smo skrite vezi
- za popolno razumevanje moramo raziskati tudi te vezi

In ali je sploh naloga funkcije seštevanja, da pridobiva vhodne podatke? Seveda ni.  Njena naloga je le dodajanje.


S takšno kodo se ne želimo srečati in je zagotovo ne želimo pisati. Rešitev je preprosta: vrnite se k osnovam in uporabite samo parametre:


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Pravilo #1: Uporabite parametre .[#toc-rule-1-use-parameters]
-------------------------------------------------------------

Najpomembnejše pravilo je: **Vse podatke, ki jih potrebujejo funkcije ali razredi, jim je treba posredovati**.

Če to pravilo prekršimo, kode ne bo mogoče narediti razumljive, čiste in trajnostne.

Če ga upoštevamo, smo na poti do kode brez skritih omejitev. Na poti do kode, ki ni razumljiva le avtorju, temveč tudi vsakomur, ki jo prebere pozneje. Kjer je vse razumljivo iz podpisov funkcij in razredov in kjer ni treba iskati skritih skrivnosti v implementaciji.

Ta tehnika posredovanja argumentov se tehnično imenuje **vbrizgavanje odvisnosti**.

(Ne zamenjujte vbrizgavanja odvisnosti z "vsebnikom za vbrizgavanje odvisnosti"; to je nekaj povsem drugega in vsebnike bomo obravnavali v [naslednjem poglavju |container]).


Od funkcij do razredov .[#toc-from-functions-to-classes]
--------------------------------------------------------

In kako so s tem povezani razredi? Razred je bolj zapletena entiteta kot preprosta funkcija, vendar tudi tu velja pravilo št. 1. Obstaja le [več načinov za posredovanje argumentov |passing-dependencies]. Na primer, zelo podobno kot pri funkciji:

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

ali z uporabo drugih metod ali neposredno s konstruktorjem:

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Oba primera sta popolnoma v skladu z vbrizgavanjem odvisnosti.


Primeri iz resničnega življenja .[#toc-real-life-examples]
----------------------------------------------------------

V resničnem svetu ne boste pisali razredov za seštevanje števil. Preidimo na primere iz resničnega življenja.

Imejmo razred `Article`, ki predstavlja blogovski članek:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// shranite članek v zbirko podatkov.
	}
}
```

in uporaba bo naslednja:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Metoda `save()` bo shranila članek v tabelo podatkovne zbirke. Implementacija z uporabo [podatkovne baze Nette |database:en] bi bila prava mala malica, če ne bi bilo ene zadrege: kje `Article` dobi povezavo s podatkovno bazo, tj. objekt razreda `Nette\Database\Connection`?

Zdi se, da imamo veliko možnosti. Lahko jo vzame iz neke statične spremenljivke. Ali pa podeduje od razreda, ki bo zagotovil povezavo s podatkovno bazo. Ali pa izkoristimo tako imenovani singleton. Ali pa tako imenovane fasade, ki se uporabljajo v Laravelu:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Odlično, problem smo rešili.

Ali pa smo?

Spomnite se [pravila št. 1: uporaba parametrov |#rule #1: use parameters]: posredovati jim moramo vse podatke, ki jih razred potrebuje. Ker če tega ne storimo in prekršimo pravilo, smo se podali na pot umazane kode, polne skritih vezav, nerazumljivosti, rezultat pa bo aplikacija, ki jo je neprijetno vzdrževati in razvijati.

Uporabnik razreda `Article` nima pojma, kam metoda `save()` shrani članek. V tabeli podatkovne zbirke? V kateri, produkcijski ali razvojni? In kako je to mogoče spremeniti?

Uporabnik mora pogledati, kako je implementirana metoda `save()`, da bi našel uporabo metode `DB::insert()`. Torej mora iskati naprej, da bi ugotovil, kako ta metoda pridobi povezavo s podatkovno bazo. Skrite vezi pa lahko tvorijo precej dolgo verigo.

Skrite vezi, Laravelove fasade ali statične spremenljivke niso nikoli prisotne v čisti, dobro zasnovani kodi. V čisti in dobro zasnovani kodi se posredujejo argumenti:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Še bolj praktično, kot bomo videli v nadaljevanju, je uporabiti konstruktor:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Če boste na primer napisali razred, ki zahteva podatkovno zbirko, ne razmišljajte o tem, od kod jo dobiti, temveč naj vam jo posreduje. Morda kot parameter konstruktorja ali druge metode. Razglasite odvisnosti. Izpostavite jih v API svojega razreda. Dobili boste razumljivo in predvidljivo kodo.

Kaj pa ta razred, ki beleži sporočila o napakah:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Kaj menite, ali smo upoštevali [pravilo št. 1: uporaba parametrov |#rule #1: use parameters]?

Nismo.

Razred ključno informacijo, imenik, ki vsebuje datoteko dnevnika, pridobi iz konstante.

Oglejte si primer uporabe:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Ali lahko brez poznavanja izvajanja odgovorite na vprašanje, kje so sporočila zapisana? Ali bi lahko sklepali, da je obstoj konstante LOG_DIR potreben za delovanje? In ali bi lahko ustvarili drugi primerek, ki bi pisal na drugo lokacijo? Zagotovo ne.

Popravimo razred:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Razred je zdaj veliko jasnejši, bolj nastavljiv in zato bolj uporaben.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Ampak meni je vseeno! .[#toc-but-i-don-t-care]
----------------------------------------------

*"Ko ustvarim objekt Article in kličem save(), se ne želim ukvarjati s podatkovno bazo, temveč želim le, da se shrani v tisto, ki sem jo določil v konfiguraciji. "*

*"Ko uporabljam Logger, želim samo, da se sporočilo zapiše, in se ne želim ukvarjati s tem, kam. Naj se uporabijo globalne nastavitve. "*

To so pravilne pripombe.

Kot primer vzemimo razred, ki pošilja glasila in beleži, kako je to potekalo:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Novi `Logger`, ki ne uporablja več konstante `LOG_DIR`, pa v konstruktorju zahteva pot do datoteke. Kako to rešiti? Razredu `NewsletterDistributor` je vseeno, kje so sporočila zapisana, želi jih le zapisati.

Rešitev je spet [pravilo št. 1: uporabite parametre |#rule #1: use parameters]: predajte mu vse podatke, ki jih razred potrebuje.

Torej konstruktorju posredujemo pot do dnevnika, ki jo nato uporabimo pri ustvarjanju objekta `Logger`? Ne. ker pot ni podatek, ki ga potrebuje razred `NewsletterDistributor`; tega potrebuje razred `Logger`. Razred potrebuje sam dnevnik. In tega bomo posredovali:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Iz podpisov razreda `NewsletterDistributor` je razvidno, da je beleženje del njegove funkcionalnosti. In imate možnost, da logger zamenjate z drugim.

Medtem ko smo v celotni aplikaciji lahko zadovoljni z enim samim primerkom loggerja in ga posredujemo povsod, kjer se kaj beleži, je v primeru razreda `Article` drugače. Želeli bomo ustvariti več njegovih primerkov. Kako v konstruktorju obravnavati odvisnost od podatkovne zbirke? Kot primer vzemimo kontroler, ki naj bi po oddaji obrazca shranil članek v zbirko podatkov:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Predlagana je možna rešitev: objekt podatkovne zbirke s konstruktorjem posredujemo `UserController` in uporabimo `$article = new Article($this->db)`.

Tako kot v prejšnjem primeru to ni pravilna praksa. Podatkovna baza ni odvisna od `UserController`, temveč od `Article`. Poleg tega bomo morali v trenutku, ko konstruktor razreda `Article` kakor koli spremenimo (dodamo nov parameter), spremeniti kodo na vseh mestih, kjer se ustvarjajo primerki.

Rešitev so tovarne.


Pravilo 2: Uporabite tovarne .[#toc-rule-2-use-factories]
---------------------------------------------------------

Z odstranitvijo skritih vezi in posredovanjem vseh podatkov kot argumentov dobimo bolj nastavljive in prilagodljive razrede. Zato še vedno potrebujemo nekaj za ustvarjanje in konfiguriranje teh bolj prilagodljivih razredov. Temu bomo rekli tovarna.

Velja pravilo: če ima razred odvisnosti, ustvarjanje njihovih primerkov prepustite tovarni.

Tovarne so pametnejša zamenjava za operator `new` v svetu vbrizgavanja odvisnosti.


Tovarna .[#toc-factory]
-----------------------

Tovarna je razred, ki ustvarja in konfigurira predmete. Tovarna, ki ustvarja `Article`, se bo imenovala `ArticleFactory`, njena uporaba v krmilniku pa bo naslednja:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// naj tovarna ustvari predmet
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Implementacija tovarne je lahko videti takole:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Na tej točki, ko se spremeni podpis konstruktorja razreda `Article`, je edini del kode, ki se mora na to odzvati, tovarna `ArticleFactory`. Na nobeno drugo kodo, ki dela z objekti `Article`, kot je `UserController`, to ne vpliva.

Morda se zdaj trkate po čelu in se sprašujete, kako smo si pravzaprav pomagali. Količina kode se je povečala in se iz krmilnika preselila v ločen razred. Vendar ima Nette DI v rokavu skritega asa. Razume koncept tovarn in lahko [za nas |factory] celo [napiše takšno storitev |factory]. Tako lahko namesto razreda `ArticleFactory` preprosto ustvarimo vmesnik:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Vendar smo zdaj nekoliko prehiteli, saj bomo to storili v naslednjem trenutku.


Povzetek .[#toc-summary]
------------------------

Na začetku tega poglavja smo obljubili, da bomo prikazali preprosto načelo načrtovanja aplikacij. Čeprav je načelo samo po sebi preprosto (dajte razredom podatke, ki jih potrebujejo), pa je treba o tem, kaj iz njega izhaja, bolj razmisliti. To poglavje lahko preberete večkrat.

Programerji, ki so zavrgli stare navade in začeli uporabljati vbrizgavanje odvisnosti, to dosledno štejejo za ključni trenutek v svojem poklicnem življenju. Odprl jim je svet jasnih in trajnostnih aplikacij.

Zdaj si bomo ogledali, kaj je [vsebnik za vbrizgavanje odvisnosti |container].
