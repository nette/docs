Metodi e attributi di iniezione
*******************************

.[perex]
Utilizzando esempi specifici, esamineremo le possibilità di passare le dipendenze ai presentatori e spiegheremo i metodi e gli attributi/animazioni di `inject`.


`inject*()` Metodi .[#toc-inject-methods]
=========================================

Nel presentatore, come in qualsiasi altro codice, il modo preferito per passare le dipendenze è l'uso del [costruttore |dependency-injection:passing-dependencies#Constructor Injection]. Tuttavia, se il presentatore eredita da un antenato comune (ad esempio, `BasePresenter`), è meglio utilizzare i metodi di `inject*()` in tale antenato. È un caso particolare di setter, in cui il metodo inizia con il prefisso `inject`. Questo perché si mantiene il costruttore libero per i discendenti:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

La differenza fondamentale rispetto a un setter è che Nette DI chiama automaticamente i metodi così denominati nei presenter non appena l'istanza viene creata, passando loro tutte le dipendenze necessarie. Un presentatore può contenere più metodi `inject*()` e ogni metodo può avere un numero qualsiasi di parametri.

Se passassimo le dipendenze agli antenati attraverso i loro costruttori, dovremmo ottenere le loro dipendenze in tutti i discendenti e passarle a `parent::__construct()`, complicando il codice:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // questa è una complicazione
		$this->bar = $bar;
	}
}
```

I metodi `inject*()` sono utili anche nei casi in cui il presentatore è [composto da tratti |presenter-traits] e ognuno di essi richiede la propria dipendenza.

È anche possibile utilizzare l'annotazione `@inject`, ma è importante tenere presente che l'incapsulamento si interrompe.


`Inject` Le annotazioni .[#toc-inject-annotations]
==================================================

Si tratta di un passaggio automatico della dipendenza alla variabile membro pubblica del presentatore, annotata con `@inject` nel commento alla documentazione. Il tipo può essere specificato anche nel commento alla documentazione, se si usa PHP inferiore a 7.4.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

Da PHP 8.0, una proprietà può essere contrassegnata con l'attributo `Inject`:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Anche in questo caso, Nette DI passerà automaticamente le dipendenze alle proprietà annotate in questo modo nel presenter, non appena l'istanza viene creata.

Questo metodo presenta gli stessi difetti del passaggio delle dipendenze a una proprietà pubblica. Viene utilizzato nel presenter perché non complica il codice e richiede solo un minimo di digitazione.


{{sitename: Migliori pratiche}}
