TestCase
********

.[perex]
Basit testlerde assertion'lar tek tek takip edilebilir. Ancak bazen assertion'ları test sınıfına dahil etmek ve bu şekilde yapılandırmak faydalı olabilir.

Sınıf, `Tester\TestCase` adresinin soyundan gelmelidir ve biz bundan basitçe **testcase** olarak bahsederiz.

```php
use Tester\Assert;

class RectangleTest extends Tester\TestCase
{
	public function testOne()
	{
		Assert::same(/* ... */);
	}

	public function testTwo()
	{
		Assert::match(/* ... */);
	}
}

# Run testing methods
(new RectangleTest)->run();
```

Bir test durumunu `setUp()` ve `tearDown()` yöntemleriyle zenginleştirebiliriz. Her test yönteminden önce/sonra çağrılırlar:

```php
use Tester\Assert;

class NextTest extends Tester\TestCase
{
	public function setUp()
	{
		# Preparation
	}

	public function tearDown()
	{
		# Clean-up
	}

	public function testOne()
	{
		Assert::same(/* ... */);
	}

	public function testTwo()
	{
		Assert::match(/* ... */);
	}
}

# Run testing methods
(new NextTest)->run();

/*


Method Calls Order
------------------
setUp()
testOne()
tearDown()

setUp()
testTwo()
tearDown()
*/
```

Bir `setUp()` veya `tearDown()` aşamasında hata oluşursa, test başarısız olur. Test yönteminde hata oluşursa, `tearDown()` yöntemi yine de çağrılır, ancak içindeki hatalar bastırılır.

Testin başına [@testCase |test-annotations#@testCase] ek açıklamasını yazmanızı öneririz, ardından komut satırı test koşucusu ayrı test senaryosu yöntemlerini ayrı süreçlerde ve birden çok iş parçacığında paralel olarak çalıştıracaktır. Bu, tüm test sürecini önemli ölçüde hızlandırabilir.

/--php
<?php
/** @testCase */
\--


Yöntemlerin Açıklanması .[#toc-annotation-of-methods]
=====================================================

Test yöntemlerinde bize yardımcı olacak birkaç ek açıklama mevcuttur. Bunları test yöntemine doğru yazıyoruz.


@throws .[filter]
-----------------
Bir test yöntemi içinde `Assert::exception()` 'un eşit kullanımıdır. Ancak notasyon daha okunaklıdır:

```php
/**
 * @throws RuntimeException
 */
public function testOne()
{
	// ...
}


/**
 * @throws LogicException Yanlış argüman sırası
 */
public function testTwo()
{
	// ...
}
```


@dataProvider .[filter]
-----------------------
Bu ek açıklama, test yöntemini birden çok kez ancak farklı argümanlarla çalıştırmak istediğimizde uygundur. ( [Dosyalar |test-annotations#dataProvider] için aynı isimli ek açıklama ile karıştırılmamalıdır).

Argüman olarak, test yöntemi için parametreleri döndüren yöntem adını yazıyoruz. Metot bir dizi veya Traversable döndürmelidir. Basit bir örnek:

```php
public function getLoopArgs()
{
	return [
		[1, 2, 3],
		[4, 5, 6],
		[7, 8, 9],
	];
}


/**
 * @dataProvider getLoopArgs
 */
public function testLoop($a, $b, $c)
{
	// ...
}
```

Diğer açıklama **@dataProvider** varyasyonu, INI dosyasına (nispeten test dosyasına) giden bir yolu argüman olarak kabul eder. Yöntem, INI dosyasında bulunan bölüm sayısı kadar çağrılır. Dosya `loop-args.ini`:

```ini
[one]
a=1
b=2
c=3

[two]
a=4
b=5
c=6

[three]
a=7
b=8
c=9
```

ve INI dosyasını kullanan yöntem:

```php
/**
 * @dataProvider loop-args.ini
 */
public function testLoop($a, $b, $c)
{
	// ...
}
```

Benzer şekilde, INI yerine bir PHP betiğine yol aktarabiliriz. Dizi veya Traversable döndürmelidir. Dosya `loop-args.php`:

```php
return [
	['a' => 1, 'b' => 2, 'c' => 3],
	['a' => 4, 'b' => 5, 'c' => 6],
	['a' => 7, 'b' => 8, 'c' => 9],
];
```
