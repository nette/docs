Funciones flotantes
*******************

.[perex]
[api:Nette\Utils\Floats] es una clase estática con funciones útiles para comparar números flotantes.

Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que el siguiente alias de clase está definido:

```php
use Nette\Utils\Floats;
```


Motivación .[#toc-motivation]
=============================

¿Te preguntas para qué sirve una clase de comparación float? Puedes utilizar los operadores `<`, `>`, `===`, pensará usted.
Esto no es del todo cierto. ¿Qué crees que imprimirá este código?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Si ejecuta el código, algunos de ustedes se sorprenderá de que el programa impreso `not same`.

Las operaciones matemáticas con números flotantes provocan errores debidos a la conversión entre los sistemas decimal y binario. Por ejemplo `0.1 + 0.2` equivale a `0.300000000000000044…`. Por lo tanto, al comparar números flotantes, debemos tolerar una pequeña diferencia a partir de un determinado decimal.

Y eso es lo que hace la clase `Floats`. La siguiente comparación funcionará como se espera:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Al intentar comparar `NAN`, lanza una excepción `\LogicException`.


Comparación de flotadores .[#toc-float-comparison]
==================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Devuelve `true` si `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Devuelve `true` si `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Devuelve `true` si `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Devuelve `true` si `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Devuelve `true` si `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Si `$a` < `$b`, devuelve `-1`, si son iguales devuelve `0` and if `$a` > `$b` devuelve `1`.

Puede utilizarse, por ejemplo, con la función `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr is [-3.5, 1, 2, 5]
```


Funciones de ayuda .[#toc-helpers-functions]
============================================


isZero(float $value): bool .[method]
------------------------------------

Devuelve `true` si el valor es cero.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Devuelve `true` si el valor es entero.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
