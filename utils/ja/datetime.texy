日付と時刻
*****

.[perex]
[api:Nette\Utils\DateTime] は、ネイティブの [php:DateTime] を追加機能で拡張するクラスです。


インストール：

```shell
composer require nette/utils
```

以下の例では、エイリアスが作成されていることを前提としています：

```php
use Nette\Utils\DateTime;
```


static from(string|int|\DateTimeInterface $time): DateTime .[method]
--------------------------------------------------------------------
文字列、UNIXタイムスタンプ、または他の [php:DateTimeInterface] オブジェクトからDateTimeオブジェクトを作成します。日付と時刻が無効な場合、`Exception` 例外をスローします。

```php
DateTime::from(1138013640); // デフォルトのタイムゾーンでUNIXタイムスタンプからDateTimeを作成します
DateTime::from(42); // 現在時刻に42秒を加えたDateTimeを作成します
DateTime::from('1994-02-26 04:15:32'); // 文字列に従ってDateTimeを作成します
DateTime::from('1994-02-26'); // 日付に従ってDateTimeを作成し、時刻は00:00:00になります
```


static fromParts(int $year, int $month, int $day, int $hour=0, int $minute=0, float $second=0.0): DateTime .[method]
--------------------------------------------------------------------------------------------------------------------
DateTimeオブジェクトを作成するか、日付と時刻が無効な場合は例外 `Nette\InvalidArgumentException` をスローします。
```php
DateTime::fromParts(1994, 2, 26, 4, 15, 32);
```


static createFromFormat(string $format, string $time, ?string|\DateTimeZone $timezone=null): DateTime|false .[method]
---------------------------------------------------------------------------------------------------------------------
[DateTime::createFromFormat()|https://www.php.net/manual/en/datetime.createfromformat.php] を拡張し、タイムゾーンを文字列として指定する可能性を追加します。
```php
DateTime::createFromFormat('d.m.Y', '26.02.1994', 'Europe/London');
```


modifyClone(string $modify=''): static .[method]
------------------------------------------------
変更された時刻を持つコピーを作成します。
```php
$original = DateTime::from('2017-02-03');
$clone = $original->modifyClone('+1 day');
$original->format('Y-m-d'); // '2017-02-03'
$clone->format('Y-m-d');    // '2017-02-04'
```


__toString(): string .[method]
------------------------------
日付と時刻を `Y-m-d H:i:s` 形式で返します。
```php
echo $dateTime; // '2017-02-03 04:15:32'
```


JsonSerializableを実装します
----------------------
日付と時刻をISO 8601形式で返します。これは例えばJavaScriptで使用されます。
```php
$date = DateTime::from('2017-02-03');
echo json_encode($date);
```
