PHP Відображення
****************

.[perex]
[api:Nette\Utils\Reflection] це статичний клас із корисними функціями для відображення PHP. Його мета - виправити недоліки рідних класів і уніфікувати поведінку в різних версіях PHP.


Встановлення:

```shell
composer require nette/utils
```

У всіх прикладах передбачається, що псевдонім уже створено:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Визначте, чи має reflection доступ до коментарів PHPdoc. Коментарі можуть бути недоступні через кеш опкодів, див. наприклад, директиву [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Розширює ім'я класу `$name` до його повного імені в контексті класу `$context`, тобто в контексті його простору імен і певних псевдонімів. Таким чином, тут фактично йдеться про те, як парсер PHP `$name` зрозумів би , якби він був написаний у тілі класу `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Повертає відображення методу, що містить оголошення методу `$method`. Зазвичай кожен метод є власним оголошенням, але тіло методу може перебувати в трейте і під іншим ім'ям.

Оскільки PHP не надає достатньої інформації для визначення фактичного оголошення, Nette використовує свою власну евристику, яка **повинна** бути надійною.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Повертає відображення класу або трейта, який містить оголошення властивості `$prop`. Властивість може бути оголошена в трейте.

Оскільки PHP не надає достатньої інформації для визначення фактичного оголошення, Nette використовує свою власну евристику, яка **не** надійна.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


toString($reflection): string .[method]
---------------------------------------

Перетворює відображення на зрозумілий людині рядок.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
