Изпълнение на теста
*******************

.[perex]
Най-забележимата част на Nette Tester е стартиращият команден ред за тестове. Той е изключително бърз и надежден, тъй като автоматично стартира
всички тестове като отделни процеси в няколко паралелни нишки. Той може да работи и самостоятелно в т.нар. режим "watchdog".

Тестовата програма Nette Tester се извиква от командния ред. Ще предадем директорията с тестовете като параметър. За текущата директория е достатъчно да въведете точка:

/--pre .[terminal]
vendor/bin/tester .
\--

При извикването си програмата за стартиране на тестове претърсва посочената директория и всички поддиректории и търси тестове, които са файловете `*.phpt` и `*Test.php`. Той също така чете и оценява техните [анотации, |test-annotations] за да знае кои от тях и как да изпълнява.

След това се изпълняват тестовете. За всеки завършен тест програмата отпечатва един символ, който показва напредъка:

- <code style="color: #CCC; background-color: #000">.</code> - тестът е преминал успешно
- <code style="color: #CCC; background-color: #000">s</code> - тестът е преминал успешно
- <code style="color: #FFF; background-color: #900">F</code> - тестът не е преминат

Изходът може да изглежда по следния начин:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Note: No php.ini is used.
PHP 7.4.8 (cli) | php -n | 8 threads

........s..........................

<span style="color: #FFF; background-color: #090">OK (35 tests, 1 skipped, 1.7 seconds)</span>
\--

Когато рестартирате, тестовете, които са се провалили при предишното изпълнение, се изпълняват първи, така че веднага ще разберете дали сте отстранили грешката.

Изходният код на Tester е нула, ако нито един тест не е преминал успешно. В противен случай е ненулева.

.[warning]
Tester изпълнява PHP процеси без `php.ini`. За повече информация вижте [Proprietary php.ini |#Own-php-ini].


Параметри на командния ред .[#toc-command-line-options]
=======================================================

Получаваме представа за опциите на командния ред, като стартираме Tester без параметри или с опцията `-h`:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Использование:
    tester [параметры] [<тестовый файл> | <каталог>]...

Параметры:
    -p <путь>                    Укажите интерпретатор PHP для запуска (по умолчанию: php).
    -c <path>                    Искать php.ini файл (или искать в директории) <path>.
    -C                           Использовать общесистемный php.ini.
    -l | --log <путь>            Запись журнала в файл <путь>.
    -d <ключ=значение>...        Определить INI-запись 'key' со значением 'value'.
    -s                           Показать информацию о пропущенных тестах.
    --stop-on-fail               Остановить выполнение при первом сбое.
    -j <num>                     Выполнять <num> заданий параллельно (по умолчанию: 8).
    -o <console|tap|junit|none>  Указать формат вывода.
    -w | --watch <путь>          Каталог просмотра.
    -i | --info                  Показать информацию об окружении тестов и выйти.
    --setup <путь>               Сценарий для настройки бегущей строки.
    --temp <путь>                Путь к временному каталогу. По умолчанию: sys_get_temp_dir().
    --colors [1|0]               Включить или отключить цвета.
    --coverage <путь>            Генерировать отчет о покрытии кода в файл.
    --coverage-src <путь>        Путь к исходному коду.
    -h | --help                  Это справка.
\--


-p <path>
---------
Указва двоичния файл на PHP, който ще се използва за изпълнение на тестовете. По подразбиране е `php`.

/--pre .[terminal]
tester -p /home/user/php-7.2.0-beta/php-cgi tests
\--


-c <path>
---------
Определя кой `php.ini` ще се използва при изпълнение на тестовете. По подразбиране php.ini не се използва. За повече информация вижте [Custom php.ini |#Own-php-ini].


-C
---
Използва се системният `php.ini`. Следователно и на платформата UNIX всички файлове `/etc/php/{sapi}/conf.d/*.ini` са такива. Вижте [собствения си |#Own-php-ini] раздел [php.ini |#Own-php-ini].


''-l | --log <path>''
---------------------
Напредъкът на теста се записва във файл. Всички неуспешни, пропуснати, както и успешни тестове:

/--pre .[terminal]
tester --log /var/log/tests.log tests
\--


-d <key=value>
--------------
Задава стойността на директивата за конфигурация на PHP за тестове. Параметърът може да се използва многократно.

/--pre .[terminal]
tester -d max_execution_time=20
\--


-s
---
Ще бъде показана информация за пропуснати тестове.


--stop-on-fail
--------------
Tester ще спре тестването при първия неуспешен тест.


-j <num>
--------
Тестовете се изпълняват в `<num>` паралелно. Стойността по подразбиране е 8. Ако искаме да стартираме тестовете последователно, използваме стойността 1.


-o <console|tap|junit|none>
---------------------------
Изходен формат. По подразбиране е избран конзолен формат.

- `console`: същото като по подразбиране, но в този случай ASCII логото не се отпечатва.
- `tap`: [Формат TAP |https://en.wikipedia.org/wiki/Test_Anything_Protocol], подходящ за машинна обработка.
- `junit`: XML формат на JUnit, който може да се чете и от машини.
- `none`: нищо не може да бъде отпечатано


''-w | --watch <path>''
-----------------------
Tester не се прекратява след приключване на тестовете, а продължава да изпълнява и наблюдава PHP файловете в дадената директория. Той изпълнява тестовете отново, ако параметрите са променени. Параметърът може да се използва няколко пъти, ако искаме да наблюдаваме няколко директории.

Това е полезно при рефакторинг на библиотека или отстраняване на грешки при тестове.

/--pre .[terminal]
tester --watch src tests
\--


' -i | --info'
--------------
Тя показва информация за тестовата среда. Например:

/--pre .[terminal]
tester -p /usr/bin/php7.1 -c tests/php.ini --info

<span style="color: #0F0">PHP binary:</span>
/usr/bin/php7.1

<span style="color: #0F0">PHP version:</span>
7.1.7-1+0~20170711133844.5+jessie~1.gbp5284f4 (cli)

<span style="color: #0F0">Code coverage engines:</span>
(not available)

<span style="color: #0F0">Loaded php.ini files:</span>
/var/www/dev/demo/tests/php.ini

<span style="color: #0F0">PHP temporary directory:</span>
/tmp

<span style="color: #0F0">Loaded extensions:</span>
Core, ctype, date, dom, ereg, fileinfo, filter, hash, ...
\--


--setup <path>
--------------
Tester зарежда посочения PHP скрипт при стартиране. Тя съдържа променливата `Tester\Runner\Runner $runner`. Да предположим, че файлът е `tests/runner-setup.php`:

```php
$runner->outputHandlers[] = new MyOutputHandler;
```

и стартирайте Tester:

/--pre .[terminal]
tester --setup tests/runner-setup.php tests
\--


--temp <path>
-------------
Задава пътя до директорията за временните файлове на Tester. Стойността по подразбиране връща `sys_get_temp_dir()`. Ако стойността по подразбиране е невалидна, ще бъдете уведомени.

Ако не сме сигурни коя директория се използва, можем да стартираме Tester с `--info`.


-цветове 1|0
------------
Tester по подразбиране разпознава терминал с активиран цвят и оцветява изхода му. Тази опция допълва автоматичното дефиниране. Можем да зададем оцветяването глобално чрез системната променлива на средата `NETTE_TESTER_COLORS`.


-покритие <path>
----------------
Tester ще изготви доклад с обща информация за това каква част от изходния код е обхваната от тестовете. Тази опция изисква включено разширение PHP [Xdebug |https://xdebug.org/] или [PCOV |https://github.com/krakjoe/pcov], или PHP 7 с PHPDBG SAPI, което е по-бързо. Файловото разширение на дестинацията определя формата на съдържанието. HTML или Clover XML.

/--pre .[terminal]
tester tests --coverage coverage.html  # HTML report
tester tests --coverage coverage.xml   # Clover XML report
\--

Приоритетът при избора на механизъм за събиране е следният:
1) PCOV
2) PHPDBG
3) Xdebug

Обширни тестове могат да се сринат по време на изпълнението на PHPDBG поради изчерпване на паметта. Събирането на данни за покритието е операция, изискваща много памет. В този случай извикването на `Tester\CodeCoverage\Collector::flush()` в рамките на теста може да помогне. Това ще разтовари събраните данни във файл и ще освободи памет. Ако не се извършва събиране на данни или се използва Xdebug, извикването няма ефект.

"Пример за HTML отчет":https://files.nette.org/tester/coverage.html с покритие на кода.


--coverage-src <path>
---------------------
Използваме я едновременно с опцията `--coverage`. Опцията `<path>` е пътят до изходния код, за който генерираме отчета. Може да се използва многократно.


Собствен php.ini .[#toc-own-php-ini]
====================================
Tester стартира PHP процеси с опцията `-n`, което означава, че не се зарежда `php.ini` (дори `/etc/php/conf.d/*.ini` в UNIX). Това осигурява същата среда за провеждане на тестове, но също така деактивира всички външни разширения на PHP, които обикновено се зареждат от системния PHP.

Ако искате да запазите системната конфигурация, използвайте опцията `-C`.

Ако се нуждаете от разширения или специални настройки INI, препоръчваме ви да създадете свой собствен файл `php.ini` и да го разпространите сред тестовете. След това стартирайте Tester с параметъра `-c`, например `tester -c tests/php.ini`. Файлът INI може да изглежда по следния начин:

```ini
[PHP]

extension=php_pdo_mysql.dll
extension=php_pdo_pgsql.dll

memory_limit=512M
```

Стартирането на Tester с `php.ini` в UNIX , например `tester -c /etc/php/cgi/php.ini`, няма да зареди други INI от `/etc/php/conf.d/*.ini`. Това е поведението на PHP, а не на Tester.
