Praca z obrazami
****************

.[perex]
Klasa [api:Nette\Utils\Image] upraszcza manipulację obrazami, takimi jak zmiana rozmiaru, przycinanie, wyostrzanie, rysowanie lub łączenie wielu obrazów.


PHP dysponuje obszernym zestawem funkcji do manipulacji obrazami. Ale ich API nie jest zbyt wygodne. Nie byłby to Nette Framework, gdyby nie wymyślił seksownego API.

Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają utworzony alias:

```php
use Nette\Utils\Image;
use Nette\Utils\ImageColor;
use Nette\Utils\ImageType;
```


Tworzenie obrazu
================

Tworzymy nowy obraz true color, na przykład o wymiarach 100×200:

```php
$image = Image::fromBlank(100, 200);
```

Opcjonalnie można określić kolor tła (domyślny to czarny):

```php
$image = Image::fromBlank(100, 200, ImageColor::rgb(125, 0, 0));
```

Lub wczytamy obraz z pliku:

```php
$image = Image::fromFile('nette.jpg');
```


Zapisywanie obrazu
==================

Obraz można zapisać do pliku:

```php
$image->save('resampled.jpg');
```

Możemy określić jakość kompresji w zakresie 0..100 dla JPEG (domyślna 85), WEBP (domyślna 80) i AVIF (domyślna 30) oraz 0..9 dla PNG (domyślna 9):

```php
$image->save('resampled.jpg', 80); // JPEG, jakość 80%
```

Jeśli z rozszerzenia pliku nie jest oczywisty format, można go określić [stałą|#Formaty]:

```php
$image->save('resampled.tmp', null, ImageType::JPEG);
```

Obraz można zamiast na dysk zapisać do zmiennej:

```php
$data = $image->toString(ImageType::JPEG, 80); // JPEG, jakość 80%
```

lub wysłać bezpośrednio do przeglądarki z odpowiednim nagłówkiem HTTP `Content-Type`:

```php
// wysyła nagłówek Content-Type: image/png
$image->send(ImageType::PNG);
```


Formaty
=======

Obsługiwane formaty to JPEG, PNG, GIF, WebP, AVIF i BMP, jednak muszą być one również obsługiwane przez Twoją wersję PHP, co sprawdzisz funkcją [#isTypeSupported()]. Animacje nie są obsługiwane.

Format reprezentują stałe `ImageType::JPEG`, `ImageType::PNG`, `ImageType::GIF`, `ImageType::WEBP`, `ImageType::AVIF` i `ImageType::BMP`.

```php
$supported = Image::isTypeSupported(ImageType::JPEG);
```

Potrzebujesz wykryć format obrazu podczas wczytywania? Metoda zwróci go w drugim parametrze:

```php
$image = Image::fromFile('nette.jpg', $type);
```

Samo wykrywanie bez wczytywania obrazu wykonuje `Image::detectTypeFromFile()`.


Zmiana rozmiaru
===============

Częstą operacją jest zmiana wymiarów obrazu. Aktualne wymiary zwracają metody `getWidth()` i `getHeight()`.

Do zmiany służy metoda `resize()`. Przykład proporcjonalnej zmiany rozmiaru tak, aby nie przekroczył wymiarów 500x300 pikseli (albo szerokość będzie dokładnie 500 px, albo wysokość będzie dokładnie 300 px, jeden z wymiarów zostanie obliczony tak, aby zachowany był stosunek stron):

```php
$image->resize(500, 300);
```

Można określić tylko jeden wymiar, a drugi zostanie obliczony:

```php
$image->resize(500, null); // szerokość 500px, wysokość zostanie obliczona

$image->resize(null, 300); // szerokość zostanie obliczona, wysokość 300px
```

Każdy wymiar można podać również w procentach:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Zachowanie `resize` można wpłynąć za pomocą następujących flag. Wszystkie oprócz `Image::Stretch` zachowują stosunek stron.

|---------------------------------------------------------------------------------------
| Flaga                  | Opis
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (domyślna) | wynikowe wymiary będą mniejsze lub równe wymaganym wymiarom
| `Image::OrBigger`         | wypełni (i ewentualnie przekroczy w jednym wymiarze) obszar docelowy
| `Image::Cover`            | wypełni obszar docelowy i przytnie to, co przekroczy
| `Image::ShrinkOnly`       | tylko zmniejszanie (zapobiegnie rozciągnięciu małego obrazu)
| `Image::Stretch`          | nie zachowywać stosunku stron


Flagi podaje się jako trzeci argument funkcji:

```php
$image->resize(500, 300, Image::OrBigger);
```

Flagi można łączyć:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Obrazy można odwrócić pionowo lub poziomo, podając jeden z wymiarów (lub oba) jako liczbę ujemną:

```php
$flipped = $image->resize(null, '-100%'); // odwrócenie pionowe

$flipped = $image->resize('-100%', '-100%'); // obrót o 180°

$flipped = $image->resize(-125, 500); // zmiana rozmiaru i odwrócenie poziome
```

Po zmniejszeniu obrazu można poprawić jego wygląd delikatnym wyostrzeniem:

```php
$image->sharpen();
```


Przycinanie
===========

Do przycinania służy metoda `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Podobnie jak w `resize()`, wszystkie wartości mogą być podane w procentach. Procenty dla `$left` i `$top` są obliczane z pozostałego miejsca, podobnie jak we właściwości CSS `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Obraz można również przyciąć automatycznie, na przykład przycięcie czarnych krawędzi:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Metoda `cropAuto()` jest obiektowym zamiennikiem funkcji `imagecropauto()`, w [jej dokumentacji|https://www.php.net/manual/en/function.imagecropauto] znajdziesz więcej informacji.


Kolory .{data-version:4.0.2}
============================

Metoda `ImageColor::rgb()` pozwala definiować kolor za pomocą wartości czerwonej, zielonej i niebieskiej (RGB). Opcjonalnie można również określić wartość przezroczystości w zakresie od 0 (całkowicie przezroczysty) do 1 (całkowicie nieprzezroczysty), czyli tak samo jak w CSS.

```php
$color = ImageColor::rgb(255, 0, 0); // Czerwony
$transparentBlue = ImageColor::rgb(0, 0, 255, 0.5); // Półprzezroczysty niebieski
```

Metoda `ImageColor::hex()` pozwala definiować kolor za pomocą formatu heksadecymalnego, podobnie jak w CSS. Obsługuje formaty `#rgb`, `#rrggbb`, `#rgba` i `#rrggbbaa`:

```php
$color = ImageColor::hex("#F00"); // Czerwony
$transparentGreen = ImageColor::hex("#00FF0080"); // Półprzezroczysta zielony
```

Kolory można użyć w innych metodach, takich jak `ellipse()`, `fill()` itp.


Rysowanie i edycja
==================

Możesz rysować, możesz pisać, ale nie rwij liści. Do dyspozycji są wszystkie funkcje PHP do pracy z obrazami, zobacz [#Przegląd metod], ale w obiektowej szacie:

```php
$image->filledEllipse($centerX, $centerY, $width, $height, ImageColor::rgb(255, 0, 0));
```

Ponieważ funkcje PHP do rysowania prostokątów są niepraktyczne ze względu na określenie współrzędnych, klasa `Image` oferuje ich zamienniki w postaci funkcji [#rectangleWH()] i [#filledRectangleWH()].


Łączenie wielu obrazów
======================

Do obrazu można łatwo wstawić inny obraz:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, ImageColor::rgb(52, 132, 210));

// współrzędne można ponownie podać w procentach
$blank->place($logo, '80%', '80%'); // wstawimy w pobliżu prawego dolnego rogu
```

Podczas wstawiania respektowany jest kanał alfa, ponadto możemy wpłynąć na przezroczystość wstawianego obrazu (tworzymy tzw. znak wodny):

```php
$blank->place($image, '80%', '80%', 25); // przezroczystość wynosi 25 %
```

Takie API to prawdziwa przyjemność używać!


Przegląd metod
==============


static fromBlank(int $width, int $height, ?ImageColor $color=null): Image .[method]
-----------------------------------------------------------------------------------
Tworzy nowy obraz true color o podanych wymiarach. Domyślny kolor to czarny.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Wczytuje obraz z pliku i zwraca jego [typ|#Formaty] w `$detectedFormat`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Wczytuje obraz z ciągu znaków i zwraca jego [typ|#Formaty] w `$detectedFormat`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method][deprecated]
---------------------------------------------------------------------------------------------
Tę funkcję zastąpiła klasa `ImageColor`, zobacz [kolory|#Kolory].


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Zwraca rozszerzenie pliku dla danego [typu|#Formaty].


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Zwraca typ mime dla danego [typu|#Formaty].


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Zwraca [typ|#Formaty] obrazu na podstawie rozszerzenia pliku.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Zwraca [typ|#Formaty] obrazu, a w parametrach `$width` i `$height` także jego wymiary.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Zwraca [typ|#Formaty] obrazu z ciągu znaków, a w parametrach `$width` i `$height` także jego wymiary.


static isTypeSupported(int $type): bool .[method]
-------------------------------------------------
Sprawdza, czy obsługiwany jest dany [typ|#Formaty] obrazu.


static getSupportedTypes(): array .[method]{data-version:4.0.4}
---------------------------------------------------------------
Zwraca tablicę obsługiwanych [typów|#Formaty] obrazu.


static calculateTextBox(string $text, string $fontFile, float $size, float $angle=0, array $options=[]): array .[method]
------------------------------------------------------------------------------------------------------------------------
Oblicza wymiary prostokąta, który otacza tekst w określonej czcionce i rozmiarze. Zwraca tablicę asocjacyjną zawierającą klucze `left`, `top`, `width`, `height`. Lewa krawędź może być ujemna, jeśli tekst zaczyna się od lewego podcięcia.


affine(array $affine, ?array $clip=null): Image .[method]
---------------------------------------------------------
Zwraca obraz zawierający afinicznie przekształcony obraz src przy użyciu opcjonalnego obszaru przycinania. ([więcej |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Zwraca konkatenację dwóch macierzy transformacji afinicznej, co jest przydatne, jeśli do tego samego obrazu należy zastosować jednocześnie wiele transformacji. ([więcej |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, ?mixed $options=null): array .[method]
-----------------------------------------------------------------
Zwraca macierz transformacji afinicznej. ([więcej |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Umożliwia dwa różne tryby rysowania w obrazach truecolor. W trybie mieszania składnik kanału alfa koloru używanego we wszystkich funkcjach rysowania, takich jak `setPixel()`, określa, w jakim stopniu kolor podstawowy powinien być widoczny. W rezultacie istniejący kolor w tym punkcie jest automatycznie mieszany z kolorem rysowanym, a wynik jest zapisywany w obrazie. Wynikowy piksel jest nieprzezroczysty. W trybie bez mieszania rysowany kolor jest kopiowany dosłownie wraz z informacjami o kanale alfa i zastępuje piksel docelowy. Tryb mieszania nie jest dostępny podczas rysowania na obrazach paletowych. ([więcej |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Aktywuj rysowanie wygładzonych linii i wielokątów. Nie obsługuje kanałów alfa. Działa tylko w przypadku obrazów truecolor.

Używanie wygładzonych prymitywów z przezroczystym kolorem tła może prowadzić do nieoczekiwanych wyników. Metoda mieszania używa koloru tła tak jak wszystkich innych kolorów. ([więcej |https://www.php.net/manual/en/function.imageantialias])


arc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color): void .[method]
---------------------------------------------------------------------------------------------------------------------------
Rysuje łuk koła ze środkiem w podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagearc])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Zwraca identyfikator koloru reprezentujący kolor złożony z podanych składników RGB. Musi być wywołana, aby utworzyć każdy kolor, który ma być użyty w obrazie. ([więcej |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Działa tak samo jak `colorAllocate()` z dodaniem parametru przezroczystości `$alpha`. ([więcej |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Zwraca indeks koloru piksela w określonym miejscu obrazu. Jeśli obraz jest typu truecolor, funkcja ta zwraca wartość RGB tego piksela jako liczbę całkowitą. Użyj przesunięcia bitowego i maskowania bitowego, aby uzyskać dostęp do poszczególnych wartości składowych czerwonej, zielonej i niebieskiej: ([więcej |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Zwraca indeks koloru w palecie obrazu, który jest „najbliższy” podanej wartości RGB. „Odległość” między żądanym kolorem a każdym kolorem w palecie jest obliczana tak, jakby wartości RGB reprezentowały punkty w przestrzeni trójwymiarowej. ([więcej |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Zwraca indeks koloru w palecie obrazu, który jest „najbliższy” podanej wartości RGB i poziomowi `$alpha`. ([więcej |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Pobierz indeks koloru, który ma odcień, biel i czerń najbliższe danemu kolorowi. ([więcej |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Dealokuje kolor wcześniej przydzielony za pomocą `colorAllocate()` lub `colorAllocateAlpha()`. ([więcej |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Zwraca indeks określonego koloru w palecie obrazu. ([więcej |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Zwraca indeks określonego koloru + alfa w palecie obrazu. ([więcej |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Dopasowuje kolory palety do drugiego obrazu. ([więcej |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Zwraca indeks koloru dla żądanego koloru, albo dokładny kolor, albo najbliższą możliwą alternatywę. ([więcej |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Zwraca indeks koloru dla żądanego koloru, albo dokładny kolor, albo najbliższą możliwą alternatywę. ([więcej |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Ustawia określony indeks w palecie na określony kolor. ([więcej |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Pobiera kolor dla określonego indeksu. ([więcej |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Zwraca liczbę kolorów w palecie obrazu. ([więcej |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(?int $color=null): int .[method]
-------------------------------------------------
Pobiera lub ustawia przezroczysty kolor w obrazie. ([więcej |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Stosuje macierz splotu do obrazu, używając podanego współczynnika i przesunięcia. ([więcej |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Wymaga obecności *Bundled GD extension*, więc może nie działać wszędzie.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Kopiuje część `$src` do obrazu zaczynając od współrzędnych `$srcX`, `$srcY` o szerokości `$srcW` i wysokości `$srcH`. Zdefiniowana część zostanie skopiowana na współrzędne `$dstX` i `$dstY`. ([więcej |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Kopiuje część `$src` do obrazu zaczynając od współrzędnych `$srcX`, `$srcY` o szerokości `$srcW` i wysokości `$srcH`. Zdefiniowana część zostanie skopiowana na współrzędne `$dstX` i `$dstY`. ([więcej |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Kopiuje część `$src` do obrazu zaczynając od współrzędnych `$srcX`, `$srcY` o szerokości `$srcW` i wysokości `$srcH`. Zdefiniowana część zostanie skopiowana na współrzędne `$dstX` i `$dstY`.

Ta funkcja jest identyczna z `copyMerge()` z tą różnicą, że podczas łączenia zachowuje odcień źródła poprzez konwersję pikseli docelowych na skalę szarości przed operacją kopiowania. ([więcej |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Kopiuje prostokątną część jednego obrazu do drugiego obrazu, płynnie interpolując wartości pikseli, dzięki czemu zwłaszcza zmniejszenie rozmiaru obrazu nadal zachowuje dużą klarowność.

Innymi słowy, `copyResampled()` pobiera prostokątny obszar z `$src` o szerokości `$srcW` i wysokości `$srcH` w pozycji (`$srcX`, `$srcY`) i umieszcza go w prostokątnym obszarze obrazu o szerokości `$dstW` i wysokości `$dstH` w pozycji (`$dstX`, `$dstY`).

Jeśli współrzędne źródłowe i docelowe, szerokość i wysokość różnią się, zostanie wykonane odpowiednie rozciągnięcie lub zmniejszenie fragmentu obrazu. Współrzędne odnoszą się do lewego górnego rogu. Ta funkcja może być używana do kopiowania obszarów w tym samym obrazie, ale jeśli obszary się pokrywają, wyniki nie będą przewidywalne. ([więcej |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Kopiuje prostokątną część jednego obrazu do innego obrazu. Innymi słowy, `copyResized()` pobiera prostokątny obszar z `$src` o szerokości `$srcW` i wysokości `$srcH` w pozycji (`$srcX`, `$srcY`) i umieszcza go w prostokątnym obszarze obrazu o szerokości `$dstW` i wysokości `$dstH` w pozycji (`$dstX`, `$dstY`).

Jeśli współrzędne źródłowe i docelowe, szerokość i wysokość różnią się, zostanie wykonane odpowiednie rozciągnięcie lub zmniejszenie fragmentu obrazu. Współrzędne odnoszą się do lewego górnego rogu. Ta funkcja może być używana do kopiowania obszarów w tym samym obrazie, ale jeśli obszary się pokrywają, wyniki nie będą przewidywalne. ([więcej |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Przycina obraz do podanego prostokątnego obszaru. Wymiary można podawać jako liczby całkowite w pikselach lub ciągi znaków w procentach (na przykład `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, ?ImageColor $color=null): Image .[method]
-------------------------------------------------------------------------------------
Automatycznie przycina obraz zgodnie z podanym `$mode`. ([więcej |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------
Rysuje elipsę ze środkiem w podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, ImageColor $color): void .[method]
-------------------------------------------------------
Wypełnia obszar zaczynając od podanych współrzędnych (lewy górny róg to 0, 0) podanym kolorem `$color`. ([więcej |https://www.php.net/manual/en/function.imagefill])


filledArc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------------------------------------------------
Rysuje częściowy łuk ze środkiem w podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------------
Rysuje wypełnioną elipsę ze środkiem w podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------------
Tworzy w obrazie wypełniony wielokąt. ([więcej |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------
Tworzy prostokąt wypełniony kolorem `$color` w obrazie, zaczynając od punktu `$x1` & `$y1` i kończąc na punkcie `$x2` & `$y2`. Punkt 0, 0 to lewy górny róg obrazu. ([więcej |https://www.php.net/manual/en/function.imagefilledrectangle])


filledRectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------------
Tworzy prostokąt wypełniony kolorem `$color` w obrazie, zaczynając od punktu `$left` & `$top` o szerokości `$width` i wysokości `$height`. Punkt 0, 0 to lewy górny róg obrazu.


fillToBorder(int $x, int $y, int $border, ImageColor $color): void .[method]
----------------------------------------------------------------------------
Rysuje wypełnienie, którego kolor krawędzi jest zdefiniowany za pomocą `$border`. Punktem początkowym wypełnienia jest `$x`, `$y` (lewy górny róg to 0, 0), a obszar jest wypełniany kolorem `$color`. ([więcej |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Stosuje podany filtr `$filtertype` do obrazu. ([więcej |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Odwraca obraz za pomocą podanego `$mode`. ([więcej |https://www.php.net/manual/en/function.imageflip])


ftText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
----------------------------------------------------------------------------------------------------------------------------------------
Wpisuje tekst do obrazu. ([więcej |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Stosuje korekcję gamma do obrazu względem wejściowej i wyjściowej wartości gamma. ([więcej |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Zwraca bieżący obszar przycinania, tj. obszar, poza którym żadne piksele nie będą rysowane. ([więcej |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Zwraca wysokość obrazu.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Zwraca oryginalny zasób.


getWidth(): int .[method]
-------------------------
Zwraca szerokość obrazu.


interlace(?int $interlace=null): int .[method]
----------------------------------------------
Włącza lub wyłącza tryb przeplotu. Jeśli tryb przeplotu jest ustawiony, a obraz jest zapisywany jako JPEG, zostanie zapisany jako progresywny JPEG. ([więcej |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Sprawdza, czy obraz jest typu truecolor. ([więcej |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Ustaw flagę mieszania alfa, aby używać efektów warstw. ([więcej |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
---------------------------------------------------------------------------
Rysuje linię między dwoma podanymi punktami. ([więcej |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, ImageColor $color): void .[method]
-------------------------------------------------------------
Rysuje na obrazie otwarty wielokąt. W przeciwieństwie do `polygon()`, między ostatnim a pierwszym punktem nie jest rysowana żadna linia. ([więcej |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Kopiuje paletę z `$source` do obrazu. ([więcej |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Konwertuje obraz oparty na palecie na obraz pełnokolorowy (truecolor). ([więcej |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Kopiuje `$image` do obrazu na współrzędne `$left` i `$top`. Współrzędne można podawać jako liczby całkowite w pikselach lub ciągi znaków w procentach (na przykład `'50%'`).


polygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------
Tworzy w obrazie wielokąt. ([więcej |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------
Tworzy prostokąt o podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagerectangle])


rectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------
Tworzy prostokąt o podanych współrzędnych.


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Zmienia rozmiar obrazu, [więcej informacji|#Změna velikosti]. Wymiary można podawać jako liczby całkowite w pikselach lub ciągi znaków w procentach (na przykład `'50%'`).


resolution(?int $resX=null, ?int $resY=null): mixed .[method]
-------------------------------------------------------------
Ustawia lub zwraca rozdzielczość obrazu w DPI (punkty na cal). Jeśli żaden z opcjonalnych parametrów nie jest podany, bieżąca rozdzielczość jest zwracana jako tablica indeksowana. Jeśli podano tylko `$resX`, rozdzielczość pozioma i pionowa są ustawiane na tę wartość. Jeśli podano oba opcjonalne parametry, rozdzielczość pozioma i pionowa są ustawiane na te wartości.

Rozdzielczość jest używana tylko jako meta informacja, gdy obrazy są odczytywane i zapisywane w formatach obsługujących ten rodzaj informacji (obecnie PNG i JPEG). Nie ma to wpływu na żadne operacje rysowania. Domyślna rozdzielczość nowych obrazów to 96 DPI. ([więcej |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Obraca obraz o podany kąt `$angle` w stopniach. Środek obrotu to środek obrazu, a obrócony obraz może mieć inne wymiary niż obraz oryginalny. ([więcej |https://www.php.net/manual/en/function.imagerotate])

.[note]
Wymaga obecności *Bundled GD extension*, więc może nie działać wszędzie.


save(string $file, ?int $quality=null, ?int $type=null): void .[method]
-----------------------------------------------------------------------
Zapisuje obraz do pliku.

Jakość kompresji jest w zakresie 0..100 dla JPEG (domyślnie 85), WEBP (domyślnie 80) i AVIF (domyślnie 30) oraz 0..9 dla PNG (domyślnie 9). Jeśli typ nie jest oczywisty z rozszerzenia pliku, można go określić za pomocą jednej ze stałych `ImageType`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Ustawia flagę określającą, czy podczas zapisywania obrazów PNG zachować pełne informacje o kanale alfa (w przeciwieństwie do przezroczystości jednokolorowej).

Mieszanie alfa musi być wyłączone (`alphaBlending(false)`), aby kanał alfa został zachowany w pierwszej kolejności. ([więcej |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Skaluje obraz przy użyciu podanego algorytmu interpolacji. ([więcej |https://www.php.net/manual/en/function.imagescale])


send(int $type=ImageType::JPEG, ?int $quality=null): void .[method]
-------------------------------------------------------------------
Wysyła obraz do przeglądarki.

Jakość kompresji jest w zakresie 0..100 dla JPEG (domyślnie 85), WEBP (domyślnie 80) i AVIF (domyślnie 30) oraz 0..9 dla PNG (domyślnie 9).


setBrush(Image $brush): void .[method]
--------------------------------------
Ustawia obraz pędzla, który będzie używany we wszystkich funkcjach rysowania linii (np. `line()` i `polygon()`) podczas rysowania specjalnymi kolorami IMG_COLOR_BRUSHED lub IMG_COLOR_STYLEDBRUSHED. ([więcej |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Ustawia bieżący obszar przycinania, tj. obszar, poza którym żadne piksele nie będą rysowane. ([więcej |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Ustawia metodę interpolacji, która wpływa na metody `rotate()` i `affine()`. ([więcej |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, ImageColor $color): void .[method]
-----------------------------------------------------------
Rysuje piksel na podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Ustawia styl, który ma być używany przez wszystkie funkcje rysowania linii (np. `line()` i `polygon()`) podczas rysowania specjalnym kolorem IMG_COLOR_STYLED lub linii obrazów kolorem IMG_COLOR_STYLEDBRUSHED. ([więcej |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Ustawia grubość linii podczas rysowania prostokątów, wielokątów, łuków itp. na `$thickness` pikseli. ([więcej |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Ustawia obraz kafelka, który będzie używany we wszystkich funkcjach wypełniania regionów (np. `fill()` i `filledPolygon()`) podczas wypełniania specjalnym kolorem IMG_COLOR_TILED.

Kafelek to obraz używany do wypełniania obszaru powtarzającym się wzorem. Dowolny obraz może być użyty jako kafelek, a ustawienie przezroczystego indeksu koloru obrazu kafelka za pomocą `colorTransparent()` pozwala utworzyć kafelek, w którym pewne części podległego obszaru będą prześwitywać. ([więcej |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Wyostrza obraz.

.[note]
Wymaga obecności *Bundled GD extension*, więc może nie działać wszędzie.


toString(int $type=ImageType::JPEG, ?int $quality=null): string .[method]
-------------------------------------------------------------------------
Zapisuje obraz do ciągu znaków.

Jakość kompresji jest w zakresie 0..100 dla JPEG (domyślnie 85), WEBP (domyślnie 80) i AVIF (domyślnie 30) oraz 0..9 dla PNG (domyślnie 9).


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Konwertuje obraz truecolor na obraz paletowy. ([więcej |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
-----------------------------------------------------------------------------------------------------------------------------------------
Wypisuje podany tekst do obrazu. ([więcej |https://www.php.net/manual/en/function.imagettftext])
