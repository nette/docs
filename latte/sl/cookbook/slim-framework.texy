Uporaba Latte s Slim 4
**********************

.[perex]
Ta članek, ki ga je napisal Daniel Opitz opisuje, kako uporabljati Latte z ogrodjem Slim.

Najprej "namestite Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html in nato Latte z uporabo Composerja:

```shell
composer require latte/latte
```


Konfiguracija .[#toc-configuration]
-----------------------------------

V korenskem imeniku projekta ustvarite nov imenik `templates`. Vanj bodo kasneje nameščene vse predloge.

V datoteko `config/defaults.php` dodajte nov konfiguracijski ključ `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte predloge sestavi v izvirno kodo PHP in jih shrani v predpomnilnik na disku. Zato so tako hitre, kot če bi bile napisane v izvornem jeziku PHP.

V datoteko `config/defaults.php` dodajte nov konfiguracijski ključ `template_temp`: Prepričajte se, da imenik `{project}/tmp/templates` obstaja ter ima dovoljenja za branje in pisanje.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte samodejno regenerira predpomnilnik ob vsaki spremembi predloge, kar lahko v produkcijskem okolju izklopite, da prihranite nekaj zmogljivosti:

```php
// v produkcijskem okolju spremenite v false.
$settings['template_auto_refresh'] = true;
```

Nato dodajte definicije vsebnika DI za razred `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Samo to bi tehnično delovalo za upodabljanje predloge Latte, vendar moramo poskrbeti tudi za delovanje z odzivnim objektom PSR-7.

V ta namen ustvarimo poseben razred `TemplateRenderer`, ki to delo opravi namesto nas.

Nato ustvarite datoteko v `src/Renderer/TemplateRenderer.php` in kopirajte/prilepite to kodo:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Uporaba .[#toc-usage]
---------------------

Namesto neposredne uporabe predmeta Latte Engine uporabimo predmet `TemplateRenderer` za upodobitev predloge v predmet, združljiv s PSR-7.

Tipičen razred izvajalca akcije je lahko videti takole za upodabljanje predloge z imenom `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Če želite, da deluje, ustvarite datoteko s predlogo v `templates/home.latte` s to vsebino:

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Če je vse pravilno konfigurirano, bi morali videti naslednji rezultat:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
