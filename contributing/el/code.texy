Πώς να συνεισφέρετε στον κώδικα
*******************************

.[perex]
Ετοιμάζεστε να συνεισφέρετε στο Nette Framework και χρειάζεστε να προσανατολιστείτε στους κανόνες και τις διαδικασίες; Αυτός ο οδηγός για αρχάριους θα σας δείξει βήμα προς βήμα πώς να συνεισφέρετε αποτελεσματικά στον κώδικα, να εργάζεστε με repositories και να υλοποιείτε αλλαγές.


Διαδικασία
==========

Για να συνεισφέρετε στον κώδικα είναι απαραίτητο να έχετε λογαριασμό στο [GitHub |https://github.com] και να είστε εξοικειωμένοι με τα βασικά της εργασίας με το σύστημα ελέγχου εκδόσεων Git. Αν δεν γνωρίζετε πώς να εργάζεστε με το Git, μπορείτε να δείτε τον οδηγό [git - the simple guide |https://rogerdudler.github.io/git-guide/] και ενδεχομένως να χρησιμοποιήσετε έναν από τους πολλούς [γραφικούς clients |https://git-scm.com/downloads/guis].


Προετοιμασία περιβάλλοντος και repository
-----------------------------------------

1) στο GitHub δημιουργήστε ένα [fork |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] του repository του [πακέτου |www:packages] που πρόκειται να τροποποιήσετε
2) αυτό το repository [κλωνοποιήσετε |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] στον υπολογιστή σας
3) εγκαταστήστε τις εξαρτήσεις, συμπεριλαμβανομένου του [Nette Tester |tester:], χρησιμοποιώντας την εντολή `composer install`
4) ελέγξτε ότι τα tests λειτουργούν, εκτελώντας το `composer tester`
5) δημιουργήστε έναν [νέο κλάδο |#Nová větev] βασισμένο στην τελευταία εκδοθείσα έκδοση


Υλοποίηση των δικών σας αλλαγών
-------------------------------

Τώρα μπορείτε να πραγματοποιήσετε τις δικές σας τροποποιήσεις στον κώδικα:

1) προγραμματίστε τις απαιτούμενες αλλαγές και μην ξεχάσετε τα tests
2) βεβαιωθείτε ότι τα tests εκτελούνται επιτυχώς, χρησιμοποιώντας το `composer tester`
3) ελέγξτε αν ο κώδικας πληροί το [πρότυπο κωδικοποίησης |#Coding Standards]
4) αποθηκεύστε τις αλλαγές (commit) με περιγραφή σε [αυτή τη μορφή |#Popis komitu]

Μπορείτε να δημιουργήσετε πολλά commits, ένα για κάθε λογικό βήμα. Κάθε commit θα πρέπει να έχει νόημα από μόνο του.


Αποστολή των αλλαγών
--------------------

Μόλις είστε ικανοποιημένοι με τις αλλαγές, μπορείτε να τις στείλετε:

1) στείλτε (push) τις αλλαγές στο GitHub στο δικό σας fork
2) από εκεί στείλτε τις στο Nette repository δημιουργώντας ένα [pull request |https://help.github.com/articles/creating-a-pull-request] (PR)
3) αναφέρετε στην περιγραφή [επαρκείς πληροφορίες |#popis pull requestu]


Ενσωμάτωση σχολίων
------------------

Τα commits σας θα τα δουν τώρα και άλλοι. Είναι σύνηθες να λαμβάνετε σχόλια με παρατηρήσεις:

1) παρακολουθήστε τις προτεινόμενες τροποποιήσεις
2) ενσωματώστε τις ως νέα commits ή [συγχωνεύστε τα με τα προηγούμενα |https://help.github.com/en/github/using-git/about-git-rebase]
3) στείλτε ξανά τα commits στο GitHub και αυτόματα θα εμφανιστούν στο pull request

Ποτέ μην δημιουργείτε νέο pull request για την τροποποίηση ενός υπάρχοντος.


Τεκμηρίωση
----------

Αν αλλάξατε τη λειτουργικότητα ή προσθέσατε νέα, μην ξεχάσετε να την [προσθέσετε στην τεκμηρίωση |documentation].


Νέος κλάδος
===========

Αν είναι δυνατόν, πραγματοποιήστε τις αλλαγές έναντι της τελευταίας εκδοθείσας έκδοσης, δηλαδή του τελευταίου tag στον συγκεκριμένο κλάδο. Για το tag `v3.2.1` δημιουργείτε έναν κλάδο με αυτή την εντολή:

```shell
git checkout -b new_branch_name v3.2.1
```


Πρότυπα Κωδικοποίησης
=====================

Ο κώδικάς σας πρέπει να πληροί το [πρότυπο κωδικοποίησης |Coding Standard] που χρησιμοποιείται στο Nette Framework. Για τον έλεγχο και τη διόρθωση του κώδικα είναι διαθέσιμο ένα αυτόματο εργαλείο. Μπορεί να εγκατασταθεί μέσω Composer **global** στον φάκελο της επιλογής σας:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Τώρα θα πρέπει να μπορείτε να εκτελέσετε το εργαλείο στο τερματικό. Με την πρώτη εντολή ελέγχετε και με τη δεύτερη διορθώνετε τον κώδικα στους φακέλους `src` και `tests` στον τρέχοντα κατάλογο:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Περιγραφή του commit
====================

Στο Nette, τα θέματα των commits έχουν τη μορφή: `Presenter: fixed AJAX detection [Closes #69]`

- περιοχή ακολουθούμενη από άνω και κάτω τελεία
- σκοπός του commit σε παρελθοντικό χρόνο, αν είναι δυνατόν, ξεκινήστε με τη λέξη: "added .(προστέθηκε νέα ιδιότητα)", "fixed .(διόρθωση)", "refactored .(αλλαγή στον κώδικα χωρίς αλλαγή συμπεριφοράς)", changed, removed
- αν το commit διακόπτει την προς τα πίσω συμβατότητα, συμπληρώστε "BC break"
- πιθανή σύνδεση με το issue tracker όπως `(#123)` ή `[Closes #69]`
- μετά το θέμα μπορεί να ακολουθεί μία κενή γραμμή και στη συνέχεια λεπτομερέστερη περιγραφή συμπεριλαμβανομένων, για παράδειγμα, συνδέσμων στο φόρουμ


Περιγραφή του pull request
==========================

Κατά τη δημιουργία ενός pull request, το interface του GitHub σας επιτρέπει να εισάγετε έναν τίτλο και μια περιγραφή. Δώστε έναν περιεκτικό τίτλο και στην περιγραφή παρέχετε όσο το δυνατόν περισσότερες πληροφορίες σχετικά με τους λόγους της αλλαγής σας.

Θα εμφανιστεί επίσης μια επικεφαλίδα, όπου θα καθορίσετε αν πρόκειται για νέα λειτουργία ή διόρθωση σφάλματος και αν μπορεί να προκύψει παραβίαση της προς τα πίσω συμβατότητας (BC break). Αν υπάρχει σχετικό πρόβλημα (issue), αναφερθείτε σε αυτό, ώστε να κλείσει μετά την έγκριση του pull request.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
