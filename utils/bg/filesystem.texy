Функции на файловата система
****************************

.[perex]
[api:Nette\Utils\FileSystem] е статичен клас, който съдържа полезни функции за работа с файлова система. Едно от предимствата им пред нативните функции на PHP е, че те хвърлят изключения в случай на грешки.


Инсталация:

```shell
composer require nette/utils
```

Следващите примери предполагат, че е дефиниран следният псевдоним на клас:

```php
use Nette\Utils\FileSystem;
```


Манипулация .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копира файл или цяла директория. По подразбиране презаписва съществуващи файлове и директории. Ако `$overwrite` е зададен на `false` и вече съществува `$target`, се хвърля изключение `Nette\InvalidStateException`. Хвърля изключение `Nette\IOException` при възникнала грешка.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Създава директория, ако тя не съществува, включително родителските директории. Хвърля изключение `Nette\IOException` при възникнала грешка.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Изтрива файл или цяла директория, ако съществува. Ако директорията не е празна, първо се изтрива нейното съдържание. Хвърля изключение `Nette\IOException` при възникнала грешка.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Задава разрешения за файлове на `$fileMode` или разрешения за директории на `$dirMode`. Рекурсивно обхожда и задава разрешения и за цялото съдържание на директорията.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Отваря файл и връща ресурс. Параметърът `$mode` работи по същия начин, както родната функция `fopen()`:https://www.php.net/manual/en/function.fopen.php. Ако възникне грешка, тя предизвиква изключение `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Чете съдържанието на `$file`. Изхвърля изключение `Nette\IOException` при възникване на грешка.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Прочита съдържанието на файла ред по ред. За разлика от родната функция `file()`, тя не чете целия файл в паметта, а го чете непрекъснато, така че да могат да се четат файлове, по-големи от наличната памет. Функцията `$stripNewLines` указва дали да се премахнат символите за прекъсване на реда `\r` и `\n`.
В случай на грешка, тя предизвиква изключение `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Преименува или премества файл или директория, посочени от `$origin`, в `$target`. По подразбиране презаписва съществуващите файлове и директории. Ако `$overwrite` е зададен на `false` и `$target` вече съществува, се хвърля изключение `Nette\InvalidStateException`. Изхвърля изключение `Nette\IOException` при възникнала грешка.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записва `$content` в `$file`. Хвърля изключение `Nette\IOException` при възникнала грешка.

```php
FileSystem::write('/path/to/file', $content);
```


Пътища .[#toc-paths]
====================


isAbsolute(string $path): bool .[method]
----------------------------------------

Определя дали `$path` е абсолютен.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Обединява всички сегменти на пътя и нормализира резултата.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормализира `..` и `.` и разделителите на директории в пътя.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Преобразува наклонените черти в `/`, използвани в Unix системите.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Конвертира наклонените черти в символи, характерни за текущата платформа, т.е. `\` в Windows и `/` другаде.

```php
$path = FileSystem::platformSlashes($path);
```
