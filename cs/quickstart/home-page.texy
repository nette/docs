Úvodní stránka
**********

.[perex]
Nyní si vytvoříme úvodní stránku zobrazující vaše poslední příspěvky.


Než začneme, je zapotřebí znát několik základních informací ohledně návrhového vzoru Model-View-Presenter (podobné jako MVC((Model-View-Controler))):

- **Model** - vrstva pracující s daty. Je kompletně oddělen od zbytku aplikace. Komunikuje pouze s presenterem.

- **View** - front-end vrstva. Vykresluje požadovaná data pomocí šablon a zobrazuje je uživateli.

- **Presenter** (nebo Controler) - propojovací vrstva. Presenter propojuje Model a View. Zpracovává požadavky, dotazuje se Modelu na data a vrací je zpět do View.


You can find the [source code on GitHub |https://github.com/nette/quickstart].
Zdrojový kód naleznete [na GitHubu |https://github.com/nette/quickstart].



Vytvoření databáze pomocí Admineru
==================================

Po ukládání dat použijeme MySQL databázi, protože je nejvíce rozšířená mezi programátory webových aplikací. Pokud ji však nemáte rádi, použijte databázi dle vlastního uvážení.

Nyní si připravíme databázovou strukturu, kde budou uloženy články našeho blogu. Můžeme začít velmi jednoduše - vytvoříme si pouze jednu tabulku pro příspěvky.

Pro vytvoření databáze můžeme použít "Adminer":[http://adminer.org/], který je předinstalovaný v Sandboxu. Můžete ho najít například na URL adrese: `http://localhost/nette-blog/www/adminer/`. Pokud již používáte jiný nástroj na tvorbu databází, bez obav ho můžete používat dál.


Otevřete si Adminer a vytvořte novou databázi s názvem `quickstart`.

Vytvořte novou tabulku s názvem `posts` a přidejte tyto sloupce:
- `id` int, klikněte na autoincrement (AI)
- `title` varchar, length 255
- `content` text
- `created_at` timestamp

Výsledná struktura by měla vypadat takto:

[* adminer-posts.png *]

.[tip]
Je velmi důležité použít úložiště **InnoDB**, jelikož zanedlouho budeme využívat vazby tabulek v databázi.

Než vytvoříme možnost přidávat články do databáze pomocí aplikace, přidejte několik vzorových článků blogu ručně, aby je bylo poté možné vypsat. Možnost přidání článků pomocí aplikace si naprogramujeme později.



Připojení k databázi
====================

Nyní, když je již databáze vytvořena a máme v ní uloženo pár vzorových článků, je ten správný čas zobrazit je na vaší nové stránce.

Prvně musíme aplikaci říct, jakou databázi má použít. Veškerá konfigurace včetně konfigurace databáze je uložena v souboru `/app/config/config.neon`. Připojení nastavíme pomocí DSN((Data Source Name)) a přihlašovacích údajů. Může to vypadat přibližně takto:

/---neon
	nette:
		database:
			dsn: 'mysql:host=127.0.0.1;dbname=quickstart'
			user: root
			password: *zde vložte heslo k databázi*
\---

.[note]
Dbejte na odsazení řádků při editování tohoto souboru. [NEON |http://ne-on.org] formát akceptuje jak odsazení pomocí mezer, tak odsazení pomocí tabulátorů, ale ne obojí zároveň. Výchozí konfigurační soubor v Sandboxu využívá tabulátory.



Připojení k databázi
=============================

Presenter (soubor `app/presenters/HomepagePresenter.php`), který se bude starat o výpis článků, potřebuje připojení k databázi. Pro jeho získání využijeme prinicpu vkládání závislostí. Konstruktor tedy bude vypadat takto:

/--php
class HomepagePresenter extends BasePresenter
{
	/** @var Nette\Database\Connection */
	private $database;

	public function __construct(Nette\Database\Connection $database)
	{
		$this->database = $database;
	}

	// ...

}
\--



Načítání příspěvků z databáze
===============================

Nyní získáme příspěvky z databáze a pošleme je do šablony, která je zpracuje a zobrazí v HTML kódu. Pro to je určena metoda s názvem *render*:

/--php
	public function renderDefault()
	{
		$this->template->posts = $this->database->table('posts')
			->order('created_at DESC')
			->limit(5);
	}
\--

Presenter nyní obsahuje jednu renderovací metodu `renderDefault()`, která předává data z databáze do View (šablony) s názvem `default`. Šablony jsou umístěny v `app/templates/{PresenterName}/{viewName}.latte`, takže v tomto případě je šablona umístěna v `app/templates/Homepage/default.latte`. V šabloně nyní bude k dispozici proměnná `$posts`, ve které jsou příspěvky získané z databáze.


Šablona
========

K dispozici je hlavní šablona pro webovou stránku (jinak *layout*, s hlavičkou, styly, patičkou, ...) a dále konkrétní šablony pro každou konkrétní stránku (např. pro zobrazení příspěvků na blogu), které mohou přepisovat některé části hlavní šablony.

Ve výchozím stavu je layout šablona umístěna v `app/templates/@layout.latte`. Tato šablona obsahuje:

/--html
{include #content}
\--

Tato řádka includuje blok s názvem `#content`, která bude definován právě v konkrétní šabloně.

Vyzkoušejte si obnovit stránku ještě předtím, než šablonu vytvoříte. Nette zobrazí chybovou zprávu s hláškou:

/--
Page not found. Missing template '…/app/templates/Homepage/default.latte'.
\--

Nyní vytvořte chybějící soubor a vložte minimální požadovaný kód:

/--html
{block #content}
\--

Toto makro definuje blok *content*, který bude vložen do hlavního layoutu. Pokud opět obnovíte stránku, uvidíte práznou stránku (pouze s HTML hlavičkou a patičkou).

Pojďme nyní zobrazit příspěvky blogu. Přidejte následující kód do šablony za definici bloku *content*:

/--html
<h1 n:block="title">Můj úžasný blog</h1>

{foreach $posts as $post}
<div class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>

	<h2><a href="{link Post:show $post->id}">{$post->title}</a></h2>

	<div>{$post->content}</div>
</div>
{/foreach}
\--

Pokud obnovíte stránku, uvidíte výpis všech příspěvků z databáze. Výpis zatím není moc hezký, ani barevný, proto můžete přidat pár [CSS stylů |https://github.com/nette/quickstart/blob/master/www/css/screen.css].

Makro `{foreach}` iteruje přes všechny příspěvky z databáze, které jsme v metode `renderDefault` získali v Presenteru do proměnné `$posts`. Dále zobrazuje kód HTML pro každý příspěvek, stejně jako by se to dělalo v PHP bez použití maker.

Makro `{link}` generuje URL adresu, která směřuje na akci `Post:show` (kterou za chvíli vytvoříme). Toto makro také předává ID jako argument. Zanedlouho se k tomu vrátíme.

Zápisu `|date:` říkáme helper. Helpery jsou určeny k dodatečnému formátování výstupu. Tento konkrétní helper převádí datum (např. `2013-04-12`) na jeho čitelnější podobu (`April 12, 2013`). Více užitečných helperů naleznete na stránce, která se "helperům":/default-helpers venuje, nebo si můžete vytvořit vlastní, pokud potřebujete.

Ještě něco. Předchozí kód můžeme zkrátit a zjednodušit. Toho docílíme záměnou *Latte maker* za *n:makra* například takto:

/--html
<div n:foreach="$posts as $post" class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>

	<h2><a n:href="Post:show $post->id">{$post->title}</a></h2>

	<div>{$post->content}</div>
</div>
\--

N:makro `n:foreach` jednoduše obaluje *div* blokem *foreach* (dělá přesně to, co v předchozím případě obyčejné makro).

Atribut `n:href` je aliasem pro makro `{link}`.


Shrnutí
=======

Nyní máme velmi jednoduchou MySQL databázi s příspěvky. Aplikace se připojuje k této databázi a vypisuje jednoduchý seznam těchto příspěvků do šablony.
