Paso de variables entre plantillas
**********************************

Esta guía le explicará cómo se pasan las variables entre plantillas en Latte usando diferentes etiquetas como `{include}`, `{import}`, `{embed}`, `{layout}`, `{sandbox}` y otras. También aprenderá cómo trabajar con variables en las etiquetas `{block}` y `{define}`, y para qué sirve la etiqueta `{parameters}`.


Tipos de variables
------------------
Las variables en Latte se pueden dividir en tres categorías según cómo y dónde se definen:

**Variables de entrada** son aquellas que se pasan a la plantilla desde el exterior, por ejemplo, desde un script PHP o usando una etiqueta como `{include}`.

```php
$latte->render('template.latte', ['userName' => 'Jan', 'userAge' => 30]);
```

**Variables circundantes** son variables que existen en el lugar de una etiqueta específica. Incluyen todas las variables de entrada y otras variables creadas usando etiquetas como `{var}`, `{default}` o dentro de un bucle `{foreach}`.

```latte
{foreach $users as $user}
	{include 'userBox.latte', user: $user}
{/foreach}
```

**Variables explícitas** son aquellas que se especifican directamente dentro de la etiqueta y se envían a la plantilla de destino.

```latte
{include 'userBox.latte', name: $user->name, age: $user->age}
```


`{block}`
---------
La etiqueta `{block}` se utiliza para definir bloques de código reutilizables que se pueden personalizar o ampliar en plantillas heredadas. Las variables circundantes definidas antes del bloque están disponibles dentro del bloque, pero cualquier cambio en las variables solo tendrá efecto dentro de ese bloque.

```latte
{var $foo = 'původní'}
{block example}
	{var $foo = 'změněný'}
{/block}

{$foo}    // imprime: původní
```


`{define}`
----------
La etiqueta `{define}` sirve para crear bloques que se renderizan solo después de ser llamados mediante `{include}`. Las variables disponibles dentro de estos bloques dependen de si se especifican parámetros en la definición. Si es así, solo tienen acceso a estos parámetros. Si no, tienen acceso a todas las variables de entrada de la plantilla en la que se definen los bloques.

```latte
{define hello}
	{* tiene acceso a todas las variables de entrada de la plantilla *}
{/define}

{define hello $name}
	{* solo tiene acceso al parámetro $name *}
{/define}
```


`{parameters}`
--------------
La etiqueta `{parameters}` sirve para declarar explícitamente las variables de entrada esperadas al principio de la plantilla. De esta manera, se pueden documentar fácilmente las variables esperadas y sus tipos de datos. También es posible definir valores predeterminados.

```latte
{parameters int $age, string $name = 'neznámé'}
<p>Edad: {$age}, Nombre: {$name}</p>
```


`{include file}`
----------------
La etiqueta `{include file}` sirve para insertar una plantilla completa. A esta plantilla se le pasan tanto las variables de entrada de la plantilla en la que se utiliza la etiqueta, como las variables definidas explícitamente en ella. Sin embargo, la plantilla de destino puede limitar el alcance usando `{parameters}`.

```latte
{include 'profile.latte', userId: $user->id}
```


`{include block}`
-----------------
Cuando inserta un bloque definido en la misma plantilla, se le pasan todas las variables circundantes y explícitamente definidas:

```latte
{define blockName}
	<p>Nombre: {$name}, Edad: {$age}</p>
{/define}

{var $name = 'Jan', $age = 30}
{include blockName}
```

En este ejemplo, las variables `$name` y `$age` se pasan al bloque `blockName`. De la misma manera se comporta `{include parent}`.

Al insertar un bloque desde otra plantilla, solo se pasan las variables de entrada y las definidas explícitamente. Las variables circundantes no están disponibles automáticamente.

```latte
{include blockInOtherTemplate, name: $name, age: $age}
```


`{layout}` o `{extends}`
------------------------
Estas etiquetas definen el layout, al que se pasan las variables de entrada de la plantilla hija y, además, las variables creadas en el código antes de los bloques:

```latte
{layout 'layout.latte'}
{var $seo = 'index, follow'}
```

Plantilla `layout.latte`:

```latte
<head>
	<meta name="robots" content="{$seo}">
</head>
```


`{embed}`
---------
La etiqueta `{embed}` es similar a la etiqueta `{include}`, pero permite insertar bloques en la plantilla. A diferencia de `{include}`, solo se pasan las variables declaradas explícitamente:

```latte
{embed 'menu.latte', items: $menuItems}
{/embed}
```

En este ejemplo, la plantilla `menu.latte` solo tiene acceso a la variable `$items`.

Por el contrario, en los bloques dentro de `{embed}` hay acceso a todas las variables circundantes:

```latte
{var $name = 'Jan'}
{embed 'menu.latte', items: $menuItems}
	{block foo}
		{$nam}
	{/block}
{/embed}
```


`{import}`
----------
La etiqueta `{import}` se utiliza para cargar bloques de otras plantillas. Se transfieren tanto las variables de entrada como las declaradas explícitamente a los bloques importados.

```latte
{import 'buttons.latte'}
```


`{sandbox}`
-----------
La etiqueta `{sandbox}` aísla la plantilla para un procesamiento seguro. Las variables se pasan exclusivamente de forma explícita.

```latte
{sandbox 'secure.latte', data: $secureData}
```


{{leftbar: /@left-menu}}
