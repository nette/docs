Funções de ajuda
****************

.[perex]
[api:Nette\Utils\Helpers] é uma classe estática com funções úteis.


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos assumem que a seguinte classe está definida:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Executa uma chamada de retorno e retorna a saída capturada como um fio.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Retorna o valor fixado para a faixa inclusiva de min e max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Compara dois valores da mesma forma que o PHP. Ele distingue entre os operadores `>`, `>=`, `<`, `<=`, `=`, `==`, `!=`, `===`, , `!==`, `<>`.
A função é útil em situações em que o operador é variável.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Converte `false` para `null`, não altera outros valores.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Retorna o último erro PHP ocorrido ou uma string vazia se nenhum erro tiver ocorrido. Ao contrário de `error_get_last()`, não é afetado pela diretiva PHP `html_errors` e sempre retorna texto, não HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Procura um fio de `$possibilities` que é mais parecido com `$value`, mas não o mesmo. Suporta apenas codificações de 8 bits.

É útil se uma determinada opção não for válida e quisermos sugerir ao usuário uma opção semelhante (mas diferente, portanto a mesma seqüência é ignorada). Desta forma, a Nette cria mensagens `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', ne 'baz'
```
