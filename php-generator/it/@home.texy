Generatore di codice PHP
************************
<div class=perex>

- Avete bisogno di generare codice PHP per classi, funzioni, file PHP e così via?
- Supporta tutte le più recenti caratteristiche di PHP, come enum, attributi, ecc.
- Permette di modificare facilmente le classi esistenti
- Output conforme a PSR-12
- Libreria altamente matura, stabile e ampiamente utilizzata
</div>


Installazione .[#toc-installation]
----------------------------------

Scaricare e installare il pacchetto utilizzando [Composer |best-practices:composer]:

```shell
composer require nette/php-generator
```

Per la compatibilità con PHP, vedere la [tabella |#Compatibility Table].


Classi .[#toc-classes]
----------------------

Cominciamo con un esempio semplice di generazione di classi usando [ClassType |api:Nette\PhpGenerator\ClassType]:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addComment("Description of class.\nSecond line\n")
	->addComment('@property-read Nette\Forms\Form $form');

// to generate PHP code simply cast to string or use echo:
echo $class;
```

Il risultato sarà questo:

```php
/**
 * Description of class.
 * Second line
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
	use Nette\SmartObject;
}
```

Possiamo anche utilizzare una stampante per generare il codice che, a differenza di `echo $class`, potremo [configurare ulteriormente |#Printers and PSR compliance]:

```php
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Possiamo aggiungere costanti (classe [Constant |api:Nette\PhpGenerator\Constant]) e proprietà (classe [Property |api:Nette\PhpGenerator\Property]):

```php
$class->addConstant('ID', 123)
	->setProtected() // constant visibility
	->setFinal();

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // or setVisibility('private')
	->setStatic()
	->addComment('@var int[]');

$class->addProperty('list')
	->setType('?array')
	->setInitialized(); // prints '= null'
```

Genera:

```php
final protected const ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];

public ?array $list = null;
```

E possiamo aggiungere [metodi |#Method and Function Signature]:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int') // method return type
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []
```

Il risultato è:

```php
/**
 * Count it.
 */
final protected function count(array &$items = []): ?int
{
	return count($items ?: $this->items);
}
```

I parametri promossi introdotti da PHP 8.0 possono essere passati al costruttore:

```php
$method = $class->addMethod('__construct');
$method->addPromotedParameter('name');
$method->addPromotedParameter('args', [])
	->setPrivate();
```

Il risultato è:

```php
public function __construct(
	public $name,
	private $args = [],
) {
}
```

Le proprietà di sola lettura introdotte da PHP 8.1 possono essere contrassegnate tramite `setReadOnly()`.

------

Se la proprietà, la costante, il metodo o il parametro aggiunto esistono già, viene lanciata un'eccezione.

I membri possono essere rimossi utilizzando `removeProperty()`, `removeConstant()`, `removeMethod()` o `removeParameter()`.

È anche possibile aggiungere alla classe oggetti esistenti `Method`, `Property` o `Constant`:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

È possibile clonare metodi, proprietà e costanti esistenti con un nome diverso, utilizzando `cloneWithName()`:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```


Interfaccia o tratto .[#toc-interface-or-trait]
-----------------------------------------------

È possibile creare interfacce e tratti:

```php
$interface = new Nette\PhpGenerator\InterfaceType('MyInterface');
$trait = new Nette\PhpGenerator\TraitType('MyTrait');
```

Utilizzo dei tratti:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject');
$class->addTrait('MyTrait')
	->addResolution('sayHello as protected')
	->addComment('@use MyTrait<Foo>');
echo $class;
```

Risultato:

```php
class Demo
{
	use SmartObject;
	use MyTrait {
		sayHello as protected;
	}
}
```


Enum .[#toc-enums]
------------------

È possibile creare facilmente gli enum che PHP 8.1 introduce:

```php
$enum = new Nette\PhpGenerator\EnumType('Suit');
$enum->addCase('Clubs');
$enum->addCase('Diamonds');
$enum->addCase('Hearts');
$enum->addCase('Spades');

echo $enum;
```

Risultato:

```php
enum Suit
{
	case Clubs;
	case Diamonds;
	case Hearts;
	case Spades;
}
```

È possibile definire anche equivalenti scalari per i casi, in modo da creare un'enum supportata:

```php
$enum->addCase('Clubs', '♣');
$enum->addCase('Diamonds', '♦');
```

È possibile aggiungere un commento o degli [attributi |#attributes] a ciascun caso utilizzando `addComment()` o `addAttribute()`.


Classe anonima .[#toc-anonymous-class]
--------------------------------------

Date il nome `null` e avrete una classe anonima:

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Risultato:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```


Funzione globale .[#toc-global-function]
----------------------------------------

Il codice delle funzioni genererà la classe [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction]:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// or use PsrPrinter for output conforming to PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Risultato:

```php
function foo($a, $b)
{
	return $a + $b;
}
```


Chiusura .[#toc-closure]
------------------------

Il codice delle chiusure genererà la classe [Closure |api:Nette\PhpGenerator\Closure]:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// or use PsrPrinter for output conforming to PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Risultato:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```


Funzione freccia .[#toc-arrow-function]
---------------------------------------

È inoltre possibile stampare la chiusura come funzione freccia utilizzando la stampante:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('$a + $b');
$closure->addParameter('a');
$closure->addParameter('b');

echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Risultato:

```php
fn($a, $b) => $a + $b
```


Firma di metodi e funzioni .[#toc-method-and-function-signature]
----------------------------------------------------------------

I metodi sono rappresentati dalla classe [Metodo |api:Nette\PhpGenerator\Method]. È possibile impostare la visibilità, il valore di ritorno, aggiungere commenti, [attributi |#Attributes] ecc:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int');
```

Ogni parametro è rappresentato da una classe [Parametro |api:Nette\PhpGenerator\Parameter]. Anche in questo caso, si possono impostare tutte le proprietà possibili:

```php
$method->addParameter('items', []) // $items = []
	->setReference() // &$items = []
	->setType('array'); // array &$items = []

// function count(&$items = [])
```

Per definire i cosiddetti parametri variadici (o anche gli operatori splat, spread, ellipsis, unpacking o tre punti), utilizzare `setVariadics()`:

```php
$method = $class->addMethod('count');
$method->setVariadics(true);
$method->addParameter('items');
```

Genera:

```php
function count(...$items)
{
}
```


Metodo e corpo della funzione .[#toc-method-and-function-body]
--------------------------------------------------------------

Il corpo può essere passato al metodo `setBody()` in una sola volta o in sequenza (riga per riga) chiamando ripetutamente `addBody()`:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('$a = rand(10, 20);');
$function->addBody('return $a;');
echo $function;
```

Risultato

```php
function foo()
{
	$a = rand(10, 20);
	return $a;
}
```

È possibile utilizzare segnaposto speciali per iniettare variabili in modo pratico.

Segnaposto semplici `?`

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return substr(?, ?);', [$str, $num]);
echo $function;
```

Risultato:

```php
function foo()
{
	return substr('any string', 3);
}
```

Segnaposto variabile `...?`

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Risultato:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

È possibile utilizzare anche i parametri denominati di PHP 8 utilizzando i segnaposto `...?:`

```php
$items = ['foo' => 1, 'bar' => true];
$function->setBody('myfunc(...?:);', [$items]);

// myfunc(foo: 1, bar: true);
```

Sfuggire al segnaposto usando una barra `\?`

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Risultato:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```


Stampanti e conformità PSR .[#toc-printers-and-psr-compliance]
--------------------------------------------------------------

Il codice PHP è generato dagli oggetti `Printer`. Esiste un `PsrPrinter` il cui output è conforme a PSR-2 e PSR-12 e utilizza gli spazi per l'indentazione e un `Printer` che utilizza le tabulazioni per l'indentazione.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class); // 4 spaces indentation
```

Avete bisogno di personalizzare il comportamento della stampante? Createne una vostra ereditando la classe `Printer`. È possibile riconfigurare queste variabili:

```php
class MyPrinter extends Nette\PhpGenerator\Printer
{
	public int $wrapLength = 120;
	public string $indentation = "\t";
	public int $linesBetweenProperties = 0;
	public int $linesBetweenMethods = 2;
	public int $linesBetweenUseTypes = 0;
	public bool $bracesOnNextLine = true;
	public string $returnTypeColon = ': ';
}
```


Tipi .[#toc-types]
------------------

Ogni tipo o tipo di unione/intersezione può essere passato come stringa; si possono anche usare costanti predefinite per i tipi nativi:

```php
use Nette\PhpGenerator\Type;

$member->setType('array'); // or Type::Array;
$member->setType('array|string'); // or Type::union('array', 'string')
$member->setType('Foo&Bar'); // or Type::intersection(Foo::class, Bar::class)
$member->setType(null); // removes type
```

Lo stesso vale per il metodo `setReturnType()`.


Letterali .[#toc-literals]
--------------------------

Con `Literal` è possibile passare codice PHP arbitrario, ad esempio per i valori predefiniti di proprietà o parametri, ecc:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Risultato:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

È anche possibile passare dei parametri a `Literal` e farli formattare in codice PHP valido, utilizzando [speciali segnaposto |#method-and-function-body-generator]:

```php
new Literal('substr(?, ?)', [$a, $b]);
// generates, for example: substr('hello', 5);
```


Attributi .[#toc-attributes]
----------------------------

È possibile aggiungere attributi di PHP 8 a tutte le classi, i metodi, le proprietà, le costanti, i casi enum, le funzioni, le chiusure e i parametri. Anche i [letterali |#Literals] possono essere usati come valori dei parametri.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addAttribute('Deprecated');

$class->addProperty('list')
	->addAttribute('WithArguments', [1, 2]);

$method = $class->addMethod('count')
	->addAttribute('Foo\Cached', ['mode' => true]);

$method->addParameter('items')
	->addAttribute('Bar');

echo $class;
```

Risultato:

```php
#[Deprecated]
class Demo
{
	#[WithArguments(1, 2)]
	public $list;


	#[Foo\Cached(mode: true)]
	public function count(#[Bar] $items)
	{
	}
}
```


Spazio dei nomi .[#toc-namespace]
---------------------------------

Classi, tratti, interfacce ed enum (di seguito classi) possono essere raggruppati in spazi dei nomi ([PhpNamespace |api:Nette\PhpGenerator\PhpNamespace]):

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

// create new classes in the namespace
$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// or insert an existing class into the namespace
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Se la classe esiste già, viene lanciata un'eccezione.

È possibile definire dichiarazioni d'uso:

```php
// use Http\Request;
$namespace->addUse(Http\Request::class);
// use Http\Request as HttpReq;
$namespace->addUse(Http\Request::class, 'HttpReq');
// use function iter\range;
$namespace->addUseFunction('iter\range');
```

Per semplificare il nome di una classe, di una funzione o di una costante completamente qualificata secondo gli alias definiti, utilizzare il metodo `simplifyName`:

```php
echo $namespace->simplifyName('Foo\Bar'); // 'Bar', because 'Foo' is current namespace
echo $namespace->simplifyName('iter\range', $namespace::NameFunction); // 'range', because of the defined use-statement
```

Al contrario, è possibile convertire un nome di classe, funzione o costante semplificato in uno pienamente qualificato, utilizzando il metodo `resolveName`:

```php
echo $namespace->resolveName('Bar'); // 'Foo\Bar'
echo $namespace->resolveName('range', $namespace::NameFunction); // 'iter\range'
```


Risoluzione dei nomi di classe .[#toc-class-names-resolving]
------------------------------------------------------------

**Quando la classe fa parte dello spazio dei nomi, viene resa in modo leggermente diverso**: tutti i tipi (cioè i suggerimenti sui tipi, i tipi di ritorno, il nome della classe genitore,
interfacce implementate, tratti e attributi utilizzati) sono automaticamente *risolti* (a meno che non lo si disattivi, vedere sotto).
Significa che si devono **usare i nomi completi delle classi** nelle definizioni e che questi saranno sostituiti
con alias (secondo le dichiarazioni d'uso) o con nomi completamente qualificati nel codice risultante:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // it will simplify to A
	->addTrait('Bar\AliasedClass'); // it will simplify to AliasedClass

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->simplifyName('Foo\D')); // in comments simplify manually
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // it will resolve to \Bar\OtherClass

echo $namespace;

// or use PsrPrinter for output conforming to PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Risultato:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

In questo modo è possibile disattivare la risoluzione automatica:

```php
$printer = new Nette\PhpGenerator\Printer; // or PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```


File PHP .[#toc-php-files]
--------------------------

Classi, funzioni e spazi dei nomi possono essere raggruppati in file PHP rappresentati dalla classe [PhpFile |api:Nette\PhpGenerator\PhpFile]:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('This file is auto-generated.');
$file->setStrictTypes(); // adds declare(strict_types=1)

$class = $file->addClass('Foo\A');
$function = $file->addFunction('Foo\foo');

// or
// $namespace = $file->addNamespace('Foo');
// $class = $namespace->addClass('A');
// $function = $namespace->addFunction('foo');

echo $file;

// or use PsrPrinter for output conforming to PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Risultato:

```php
<?php

/**
 * This file is auto-generated.
 */

declare(strict_types=1);

namespace Foo;

class A
{
}

function foo()
{
}
```


Generare in base a quelli esistenti .[#toc-generating-according-to-existing-ones]
---------------------------------------------------------------------------------

Oltre a poter modellare classi e funzioni utilizzando le API descritte in precedenza, è anche possibile generarle automaticamente in base a quelle esistenti:

```php
// creates a class identical to the PDO class
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

// creates a function identical to trim()
$function = Nette\PhpGenerator\GlobalFunction::from('trim');

// creates a closure as specified
$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {},
);
```

I corpi delle funzioni e dei metodi sono vuoti per impostazione predefinita. Se si desidera caricarli, utilizzare questo metodo
(richiede l'installazione di `nikic/php-parser` ):

```php
$class = Nette\PhpGenerator\ClassType::from(Foo::class, withBodies: true);

$function = Nette\PhpGenerator\GlobalFunction::from('foo', withBody: true);
```


Caricamento da file PHP .[#toc-loading-from-php-file]
-----------------------------------------------------

È anche possibile caricare classi e funzioni direttamente da un file PHP non ancora caricato o da una stringa di codice PHP:

```php
$class = Nette\PhpGenerator\ClassType::fromCode(<<<XX
	<?php

	class Demo
	{
		public $foo;
	}
	XX);
```

Caricare l'intero file PHP, che può contenere più classi o anche più spazi dei nomi:

```php
$file = Nette\PhpGenerator\PhpFile::fromCode(file_get_contents('classes.php'));
```

Questo richiede l'installazione di `nikic/php-parser`.


Dumper di variabili .[#toc-variables-dumper]
--------------------------------------------

Dumper restituisce una rappresentazione in stringhe PHP parsabili di una variabile. Fornisce un output migliore e più chiaro rispetto alla funzione nativa `var_export()`.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // prints ['a', 'b', 123]
```


Tabella di compatibilità .[#toc-compatibility-table]
----------------------------------------------------

PhpGenerator 4.0 è compatibile con PHP 8.0 - 8.2

{{leftbar: nette:@menu-topics}}
