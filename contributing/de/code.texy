Wie man zum Code beiträgt
*************************

.[perex]
Sie möchten zum Nette Framework beitragen und benötigen eine Orientierung über die Regeln und Verfahren? Dieser Leitfaden für Anfänger zeigt Ihnen Schritt für Schritt, wie Sie effektiv zum Code beitragen, mit Repositories arbeiten und Änderungen implementieren können.


Vorgehensweise
==============

Um zum Code beizutragen, ist es unerlässlich, ein Konto auf [GitHub|https://github.com] zu haben und mit den Grundlagen der Arbeit mit dem Versionskontrollsystem Git vertraut zu sein. Wenn Sie nicht mit Git vertraut sind, können Sie sich den Leitfaden [git - the simple guide |https://rogerdudler.github.io/git-guide/] ansehen und gegebenenfalls einen der vielen [grafischen Clients |https://git-scm.com/downloads/guis] nutzen.


Vorbereitung der Umgebung und des Repositorys
---------------------------------------------

1) Erstellen Sie auf GitHub einen [Fork |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] des Repositorys des [Pakets |www:packages], das Sie bearbeiten möchten.
2) [Klonen |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] Sie dieses Repository auf Ihren Computer.
3) Installieren Sie die Abhängigkeiten, einschließlich des [Nette Testers |tester:], mit dem Befehl `composer install`.
4) Überprüfen Sie, ob die Tests funktionieren, indem Sie `composer tester` ausführen.
5) Erstellen Sie einen [neuen Branch |#Neuer Branch] basierend auf der letzten veröffentlichten Version.


Implementierung eigener Änderungen
----------------------------------

Nun können Sie Ihre eigenen Codeänderungen vornehmen:

1) Programmieren Sie die gewünschten Änderungen und vergessen Sie nicht die Tests.
2) Stellen Sie sicher, dass die Tests erfolgreich verlaufen, indem Sie `composer tester` verwenden.
3) Überprüfen Sie, ob der Code den [Coding Standards|#Coding Standards] entspricht.
4) Speichern (committen) Sie die Änderungen mit einer Beschreibung in [diesem Format|#Commit-Beschreibung].

Sie können mehrere Commits erstellen, einen für jeden logischen Schritt. Jeder Commit sollte für sich genommen sinnvoll sein.


Senden der Änderungen
---------------------

Sobald Sie mit den Änderungen zufrieden sind, können Sie sie senden:

1) Senden (pushen) Sie die Änderungen auf GitHub in Ihren Fork.
2) Senden Sie sie von dort an das Nette-Repository, indem Sie einen [Pull Request|https://help.github.com/articles/creating-a-pull-request] (PR) erstellen.
3) Geben Sie in der Beschreibung [ausreichend Informationen|#Beschreibung des Pull Requests] an.


Einarbeitung von Anmerkungen
----------------------------

Ihre Commits werden nun auch von anderen gesehen. Es ist üblich, dass Sie Kommentare mit Anmerkungen erhalten:

1) Verfolgen Sie die vorgeschlagenen Änderungen.
2) Arbeiten Sie sie als neue Commits ein oder [fügen Sie sie mit den vorherigen zusammen |https://help.github.com/en/github/using-git/about-git-rebase].
3) Senden Sie die Commits erneut auf GitHub, und sie erscheinen automatisch im Pull Request.

Erstellen Sie niemals einen neuen Pull Request, um einen bestehenden zu bearbeiten.


Dokumentation
-------------

Wenn Sie die Funktionalität geändert oder eine neue hinzugefügt haben, vergessen Sie nicht, sie auch [zur Dokumentation hinzuzufügen |documentation].


Neuer Branch
============

Wenn möglich, führen Sie Änderungen gegenüber der letzten veröffentlichten Version durch, d.h. dem letzten Tag in diesem Branch. Für den Tag `v3.2.1` erstellen Sie einen Branch mit diesem Befehl:

```shell
git checkout -b neuer_branch_name v3.2.1
```


Coding Standards
================

Ihr Code muss dem [Coding Standard] entsprechen, der im Nette Framework verwendet wird. Zur Überprüfung und Korrektur des Codes steht ein automatisches Werkzeug zur Verfügung. Es kann über Composer **global** in einem von Ihnen gewählten Ordner installiert werden:

```shell
composer create-project nette/coding-standard /pfad/zu/nette-coding-standard
```

Nun sollten Sie das Werkzeug im Terminal starten können. Mit dem ersten Befehl überprüfen Sie und mit dem zweiten korrigieren Sie den Code in den Ordnern `src` und `tests` im aktuellen Verzeichnis:

```shell
/pfad/zu/nette-coding-standard/ecs check
/pfad/zu/nette-coding-standard/ecs check --fix
```


Commit-Beschreibung
===================

In Nette haben die Betreffzeilen von Commits das Format: `Presenter: fixed AJAX detection [Closes #69]`

- Bereich gefolgt von einem Doppelpunkt
- Zweck des Commits in der Vergangenheitsform, wenn möglich, beginnen Sie mit dem Wort: "added .(neue Eigenschaft hinzugefügt)", "fixed .(Korrektur)", "refactored .(Codeänderung ohne Verhaltensänderung)", changed, removed
- wenn der Commit die Abwärtskompatibilität unterbricht, fügen Sie "BC break" hinzu
- mögliche Verknüpfung zum Issue Tracker wie `(#123)` oder `[Closes #69]`
- nach dem Betreff kann eine Leerzeile folgen und dann eine detailliertere Beschreibung einschließlich z.B. Links zum Forum


Beschreibung des Pull Requests
==============================

Beim Erstellen eines Pull Requests ermöglicht Ihnen die GitHub-Oberfläche die Eingabe eines Titels und einer Beschreibung. Geben Sie einen aussagekräftigen Titel an und liefern Sie in der Beschreibung so viele Informationen wie möglich über die Gründe für Ihre Änderung.

Es wird auch eine Kopfzeile angezeigt, in der Sie angeben, ob es sich um eine neue Funktion oder eine Fehlerbehebung handelt und ob die Abwärtskompatibilität beeinträchtigt werden könnte (BC break). Wenn ein zugehöriges Problem (Issue) vorhanden ist, verweisen Sie darauf, damit es nach Genehmigung des Pull Requests geschlossen wird.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/de/writing -->
```


{{priority: -1}}
