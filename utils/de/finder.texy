Finder: Dateisystem-Suche
*************************

.[perex]
Müssen Sie Verzeichnisse auf der Festplatte durchsuchen? Suchen Sie nach Dateien in ihnen? Die Klasse [api:Nette\Utils\Finder] macht es Ihnen so einfach wie möglich.


Installation:

```shell
composer require nette/utils
```

Alle Beispiele gehen davon aus, dass der folgende Klassenalias definiert ist:

```php
use Nette\Utils\Finder;
```


Suche nach Dateien .[#toc-searching-for-files]
----------------------------------------------

Wie finde ich alle `*.txt` Dateien im Verzeichnis `$dir` und allen Unterverzeichnissen?

```php
foreach (Finder::findFiles('*.txt')->from($dir) as $key => $file) {
	// $key is a string containing absolute filename with path
	// $file is an instance of Nette\Utils\FileInfo
}
```

Die Dateien in der Variablen `$file` sind Instanzen der Klasse [Nette\Utils\FileInfo |api:].

Wenn das Verzeichnis nicht existiert, wird ein `Nette\UnexpectedValueException` ausgelöst.

Und was ist mit der Suche nach Dateien in einem Verzeichnis ohne Unterverzeichnisse? Verwenden Sie anstelle von `from()` die Variable `in()`:

```php
Finder::findFiles('*.txt')->in($dir)
```

Suchen Sie nach mehreren Masken und sogar nach mehreren Verzeichnissen auf einmal:

```php
Finder::findFiles('*.txt', '*.php')
	->in($dir1, $dir2) // or from($dir1, $dir2)
```

Parameter können auch Arrays sein:

```php
Finder::findFiles(['*.txt', '*.php'])
	->in([$dir1, $dir2]) // or from([$dir1, $dir2])
```

Die Suchtiefe kann mit der Methode `limitDepth()` begrenzt werden.


Suche nach Verzeichnissen .[#toc-searching-for-directories]
-----------------------------------------------------------

Neben Dateien kann man mit `Finder::findDirectories('subdir*')` auch nach Verzeichnissen suchen.

Oder mit `Finder::find('*.txt')` gemeinsam nach Dateien und Verzeichnissen zu suchen, wobei die Maske in diesem Fall nur für Dateien gilt. Bei der rekursiven Suche mit `from()` wird zuerst das Unterverzeichnis und dann die darin befindlichen Dateien zurückgegeben, was mit `childFirst()` auch umgekehrt werden kann.


Maske .[#toc-mask]
------------------

Die Maske muss nicht nur den Dateinamen beschreiben, sondern auch den Pfad. Beispiel: Suche nach `*.jpg` Dateien, die sich in einem Unterverzeichnis befinden, das mit `imag` beginnt:

```php
Finder::findFiles('imag*/*.jpg')
```

Die bekannten Platzhalter `*` and `?` stehen also für beliebige Zeichen außer dem Verzeichnistrennzeichen `/`. The double `**` für beliebige Zeichen, einschließlich des Verzeichnistrennzeichens:

```php
Finder::findFiles('imag**/*.jpg')
// finds also image/subdir/file.jpg
```

Außerdem können Sie in den Maskenbereichen `[...]` oder negative Bereiche `[!...]` die von regulären Ausdrücken bekannt sind. Suche nach `*.txt` Dateien, die eine Ziffer im Namen enthalten:

```php
Finder::findFiles('*[0-9]*.txt')
```


Ausschluss von .[#toc-excluding]
--------------------------------

Verwenden Sie `exclude()`, um Masken zu übergeben, denen die Datei nicht entsprechen darf. Suche nach `*.txt` Dateien, außer denen, die "X" im Namen enthalten:

```php
Finder::findFiles('*.txt')
	->exclude('*X*')
```

Und verwenden Sie `exclude()`, um gecrawlte Unterverzeichnisse zu überspringen:

```php
Finder::findFiles('*.php')
	->from($dir)
	->exclude('temp', '.git')
```


Filtern von .[#toc-filtering]
-----------------------------

Sie können die Ergebnisse auch filtern, zum Beispiel nach Dateigröße. So finden Sie Dateien mit einer Größe zwischen 100 und 200 Byte:

```php
Finder::findFiles('*.php')
	->size('>=', 100)
	->size('<=', 200)
	->from($dir)
```

Filtern nach dem Datum der letzten Änderung. Beispiel: Suche nach Dateien, die in den letzten zwei Wochen geändert wurden:

```php
Finder::findFiles('*.php')
	->date('>', '- 2 weeks')
	->from($dir)
```

Beide Funktionen verstehen die Operatoren `>`, `>=`, `<`, `<=`, `=`, `!=`.

Hier durchlaufen wir PHP-Dateien mit einer Zeilenzahl von mehr als 1000. Als Filter verwenden wir einen benutzerdefinierten Callback:

```php
$hasMoreThan100Lines = fn(Nette\Utils\FileInfo $file) => count(file($file->getPathname())) > 1000;

Finder::findFiles('*.php')
	->filter($hasMoreThan100Lines)
```

Praktisch, nicht wahr? Sie werden sicher eine Verwendung für Finder in Ihren Anwendungen finden.
