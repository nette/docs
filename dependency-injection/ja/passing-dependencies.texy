依存関係の受け渡し
*********
<div class=perex>


引数（DI用語では「依存関係」）は、主に次のような方法でクラスに渡すことができます。

* コンストラクタによる引数渡し
* メソッド（セッターと呼ばれる）による引数渡し
* プロパティの設定によるもの
* メソッド、アノテーション、属性によるもの * インジェクションによるもの

</div>

最初の3つの方法は、すべてのオブジェクト指向言語で一般的に適用されます。4番目の方法は、Nette プレゼンターに特有の方法なので、[別の |best-practices:en:inject-method-attribute]章で説明します。これから、これらのオプションのそれぞれを詳しく見て、具体的な例で紹介します。


コンストラクタ・インジェクション .[#toc-constructor-injection]
==============================================

依存関係は、オブジェクトが作成されるときにコンストラクタに引数として渡されます。

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

この形式は、クラスが機能するために絶対に必要な必須の依存関係を指定するのに便利です。なぜなら、その依存関係がなければインスタンスを作成することができないからです。

PHP 8.0 以降、機能的に同等な短い形式の記法を使用することができます。

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

PHP 8.1 以降では、プロパティにフラグ`readonly` を指定して、 そのプロパティの内容を変更しないことを宣言することができます。

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

DI コンテナは、[自動配線によって |autowiring]依存関係をコンストラクタに渡します。この方法で渡すことができない引数（文字列、数値、ブール値など）は、[設定に書きます |services#Arguments]。


セッター・インジェクション .[#toc-setter-injection]
======================================

依存関係は、プライベートプロパティに格納するメソッドを呼び出すことで渡されます。これらのメソッドの通常の命名規則は、`set*()` という形式であり、これがセッターと呼ばれる所以です。

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

このメソッドは、オブジェクトが実際にそれを受け取る（つまり、ユーザーがメソッドを呼び出す）ことが保証されていないため、クラス機能に必要のないオプションの依存関係に対して便利です。

同時に、このメソッドによって、依存関係を変更するためにセッターを繰り返し呼び出すことができます。これが望ましくない場合は、メソッドにチェックを加えるか、 PHP 8.1 以降は`readonly` フラグでプロパティ`$cache` をマークします。

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

setter の呼び出しは、DI コンテナの設定[セクション setup |services#Setup] で定義します。また、ここでも autowiring による依存関係の自動的な受け渡しが行われています。

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


プロパティ・インジェクション .[#toc-property-injection]
=========================================

依存関係は直接プロパティに渡されます。

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

なぜなら、プロパティは`public` として宣言されなければならないからです。 したがって、渡された依存関係が実際に指定された型になるかどうかを制御することはできませんし (これは PHP 7.4 以前も同様でした)、新しく割り当てられた依存関係に独自のコードで対応する能力、 たとえばその後の変更を防止する能力も失われています。同時に、このプロパティはクラスのパブリックインターフェイスの一部となり、 望ましくないかもしれません。

変数の設定は、[setupセクションの |services#Setup]DIコンテナ構成で定義されます。

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


どの方法を選択するか？ .[#toc-which-way-to-choose]
=======================================

- コンストラクタは、クラスが機能するために必要な必須の依存関係に対して適しています。
- 一方、セッターはオプションの依存関係、または変更可能な依存関係に適しています。
- パブリック変数は推奨しません。
