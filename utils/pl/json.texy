Praca z JSON
************

.[perex]
[api:Nette\Utils\Json] jest klasą statyczną zawierającą funkcje do kodowania i dekodowania formatu JSON. Obsługuje luki w różnych wersjach PHP i rzuca wyjątki w przypadku wystąpienia błędów.

Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Json;
```


Korzystanie z .[#toc-usage]
===========================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Konwertuje stronę `$value` na format JSON.

Po ustawieniu na `$pretty`, formatuje JSON dla łatwiejszego czytania i przejrzystości:

```php
Json::encode($value); // zwraca JSON
Json::encode($value, pretty: true); // zwraca bardziej przejrzysty JSON
```

Na stronie `$asciiSafe` generuje wyjście w ASCII, tzn. zastępuje znaki unicode ciągiem `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Parametr `$htmlSafe` zapewnia, że wyjście nie zawiera znaków, które mają specjalne znaczenie w HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Dzięki `$forceObjects` nawet pola z kluczami numerycznymi będą kodowane jako obiekty JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Rzuca wyjątek na błąd `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Obsługa wyjątków
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parsuje JSON do PHP.

Ustawienie `$forceArray` wymusza zwracanie tablic zamiast obiektów:

```php
Json::decode('{"variable": true}'); // zwraca obiekt typu stdClass
Json::decode('{"variable": true}', forceArray: true); // zwraca tablicę
```

Rzuca wyjątek w przypadku wystąpienia błędu `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Obsługa wyjątków
}
```


Jak wysłać JSON z prezentera? .[#toc-how-to-send-a-json-from-a-presenter]
=========================================================================

Możesz użyć do tego metody `$this->sendJson($data)`, którą można wywołać w metodzie `action*()`, na przykład zobacz [Wysyłanie odpowiedzi |application:presenters#Sending-a-Response].
