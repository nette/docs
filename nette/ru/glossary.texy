Глоссарий
*********


AJAX
----
Асинхронный JavaScript и XML — технология взаимодействия клиента и сервера по протоколу HTTP без необходимости перезагрузки всей страницы при каждом запросе. Несмотря на аббревиатуру, формат [#JSON] часто используется вместо XML.


Действие презентера
-------------------
Логическая часть [#presenter], выполняющая одно действие, например, показать страницу продукта, выписать пользователя и т. д. У одного презентера может быть несколько действий.


BOM
---
Так называемая *маска порядка байтов* — это специальный первый символ файла, который указывает порядок байтов в кодировке. Некоторые редакторы включают его автоматически, он практически незаметен, но он вызывает проблемы с заголовками и отправкой вывода из PHP. Для массового удаления можно использовать [Code Checker|code-checker:].


Контроллер
----------
Контроллер обрабатывает запросы от пользователя и на их основе вызывает определенную логику приложения (т. е. [#Модель]), затем он вызывает [#Вид] для рендеринга данных. Аналогом контроллеров в фреймворке Nette являются [презентеры|#Презентер].


Экранирование
-------------
Экранирование — это преобразование символов, имеющих особое значение в данном контексте, в другие эквивалентные последовательности. Пример: Мы хотим записать кавычки в заключенную в кавычки строку. Поскольку кавычки имеют особое значение в контексте заключенной в кавычки строки, необходимо использовать другую эквивалентную последовательность. Конкретная последовательность определяется правилами контекста (например, `\"` в заключенной в кавычки строке PHP, `&quot;` в атрибутах HTML и т. д.).


Фильтр (ранее Helper)
---------------------
Функция фильтрации. В шаблонах [filter |latte:syntax#filters] — это функция, которая помогает изменить или отформатировать данные в выходную форму. В шаблонах предопределено несколько [стандартных фильтров |latte:filters].


Инвалидация
-----------
Уведомление о [сниппете |#Сниппет] для повторного рендеринга. В другом контексте также очистка кэша.


JSON
----
Формат обмена данными, основанный на синтаксисе JavaScript (это его подмножество). Точную спецификацию можно найти на сайте www.json.org.


Компонент
---------
Многократно используемая часть приложения. Это может быть визуальная часть страницы, как описано в главе [application:components], или этот термин может также обозначать класс [Component |api:Nette\ComponentModel\Component] (такой компонент не обязательно должен быть визуальным).


Управляющие символы
-------------------
Управляющие символы — это невидимые символы, которые могут встречаться в тексте и в конечном итоге вызывать некоторые проблемы. Для их массового удаления из файлов можно использовать [Code Checker|code-checker:], для удаления из переменной — функцию [Strings::normalize()|utils:strings#normalize].


События
-------
Событие — это ожидаемая ситуация в объекте, и когда оно происходит, вызываются так называемые обработчики, то есть функции, которые реагируют на событие. Событием может быть отправка формы, вход пользователя в систему и т. д. Например, вход пользователя в систему происходит в методе `Nette\Security\User::login()`.
Объект `User` имеет публичную переменную `$onLoggedIn`, представляющую собой массив, в который каждый может добавить обратный вызов. Как только пользователь входит в систему, метод `login()` вызывает все обратные вызовы в массиве. Имя переменной в форме `onXyz` — это соглашение, используемое во всем Nette.


Latte
-----
Одна из самых инновационных [систем шаблонирования |latte:] за всю историю.


Модель
------
Модель представляет собой данные и функциональную основу всего приложения. Она включает в себя всю логику приложения (иногда также называемую «бизнес-логикой»). Это **M** из **M**VC или MPV. Любое действие пользователя (вход в систему, помещение товара в корзину, изменение значения базы данных) представляет собой действие модели.

Модель управляет своим внутренним состоянием и предоставляет публичный интерфейс. Вызывая этот интерфейс, мы можем принимать или изменять его состояние. Модель не знает о существовании [Вида |#Вид] или [Контроллера |#Контроллер], она полностью независима от них.


Модель-Вид-Контроллер (MVC)
---------------------------
Архитектура программного обеспечения, возникшая при разработке GUI-приложений для отделения кода управления потоком ([#Контроллер]) от кода логики приложения ([#Модель]) и от кода рендеринга данных ([#Вид]). Таким образом, код становится более понятным, это облегчает будущую разработку и позволяет тестировать отдельные части отдельно.


Модель-Вид-Презентер (MVP)
--------------------------
Архитектура, основанная на [#Модель-Вид-Контроллер (MVC)].


Модуль
------
Модуль в фреймворке Nette представляет собой набор презентеров и шаблонов, в конечном итоге также компонентов и моделей, которые служат данными для презентера. Таким образом, это определенная логическая часть приложения.

Например, электронный магазин может состоять из трех модулей:
1) Каталог товаров с корзиной.
2) Администрирование для клиента.
3) Администрирование для владельца магазина.


Пространство имен
-----------------
Пространство имен является особенностью языка PHP, начиная с версии 5.3, а также некоторых других языков программирования. Это помогает избежать столкновений имен (например, два класса с одинаковым именем) при совместном использовании различных библиотек. Более подробную информацию смотрите в [документации PHP |https://www.php.net/manual/ru/language.namespaces.rationale.php].


Презентер
---------
Презентер — это объект, который принимает [запрос |api:Nette\Application\Request], переведенный маршрутизатором из HTTP-запроса, и генерирует [ответ |api:Nette\Application\Response]. Ответом может быть HTML-страница, картинка, XML-документ, файл, JSON, перенаправление или всё, что вы придумаете.

Под презентером обычно подразумевается потомок класса [api:Nette\Application\UI\Presenter]. По запросам он выполняет соответствующие [действия |application:presenters#Жизненный цикл презентера] и рендерит шаблоны.


Роутер
------
Двунаправленный переводчик между HTTP-запросом / URL и действием презентера. Двунаправленность означает, что можно не только получить [#Действие презентера] из HTTP-запроса, но и сгенерировать соответствующий URL для действия. См. подробнее в главе об [URL-маршрутизации |application:routing].


Сниппет
-------
Фрагмент страницы, который может быть отдельно повторно отображен во время запроса [#AJAX].


Вид
---
Вид (или Представление) — это слой приложения, который отвечает за отрисовку результатов запроса. Обычно он использует систему шаблонов и знает, как отобразить свои компоненты или результаты, взятые из модели.



/--comment
Инструкции для авторов:
- объяснение должно быть кратким, около 1 абзаца (если краткого объяснения недостаточно, необходимо сделать ссылку на другое место в документации)
- на приведенные здесь термины можно ссылаться в других частях документации или на форуме
\--

{{leftbar: www:@menu-common}}
{{priority: -2}}
