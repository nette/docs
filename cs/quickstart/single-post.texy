Stránka s příspěvkem
********************

.[perex]
Nyní si vytvoříme další stránku blogu, která bude obsahovat jeden konkrétní příspěvek.

Musíme si vytvořit novou *render* metodu, která získá data z databáze o jednom konkrétním článku a předá je do šablony. Mít tuto tuto metodu v `HomepagePresenter` není moc hezké, protože se bavíme o příspěvku a ne úvodní stránce. Vytvořme si tedy `PostPresenter` v `app/presenters/PostPresenter.php`. Tento presenter se také potřebuje připojit k databázi, takže zde napíšeme konstruktor opět podle principu vkládání závislostí.

`PostPresenter` by mohl tedy vypadat takto:

/--php
class PostPresenter extends BasePresenter
{
        /** @var Nette\Database\Connection */
        private $database;

        public function __construct(Nette\Database\Connection $database)
        {
                $this->database = $database;
        }

        public function renderShow($postId)
        {
                $this->template->post = $this->database->table('posts')->get($postId);
        }
}
\--

Metoda `renderShow` vyžaduje jeden argument - ID jednoho konkrétního článku, který má být zobrazen. Poté tento článek načte z databáze a předá ho do šablony.

V šabloně `app/templates/Homepage/default.latte` již máme odkaz na akci `Post:show`, pro kterou však ještě neexituje šablona. Můžete si vyzkoušet otevřít odkaz na tento příspěvek. [Tracy | /debugging] zobrazí error, protože šablona `app/templates/Post/show.latte` ještě neexistuje. Vytvořte je tedy například s tímto obsahem:

/--html
{block #content}

<p><a n:href="Homepage:default">← zpět na výpis příspěvků</a></p>

<div class="date">{$post->created_at|date:'F j, Y'}</div>

<h1 n:block="title">{$post->title}</h1>

<div class="post">{$post->content}</div>
\--

Nyní se podíváme na jednotlivé části šablony.

První řádka začíná definici bloku s názvem "content" stejně jako tomu bylo na úvodní stránce. Tento blog bude opět zobrazen v hlavní šabloně.

Na další řádce je odkaz zpět na vípis článků blogu, takže se uživatel může jednoduše pohybovat mezi výpisem článků a jedním konkrétním. Opět poučíváme makro `n:href`. Nette se o samotné generování adkazů posará samo. Odkaz odkazuje na akci `default` presenteru `Homepage` (také můžete napsat `n:href="Homepage:"`, protože akce s názvem `default` může být vynechána, doplní se automaticky).

Třetí řádka formátuje výpis data, stejně tak jako tomu již bylo u výpisu na hlavní stránce.

Čtvrtá řádka zobrazuje *titulek* blogu v HTML tagu `<h1>`. Tento tag obsahuje atribut, který možná neznáte (`n:block="title"`) dokážete odhadnout co dělá? Pokud jste čatli předchozí část pozorně, tak již víte, že se jedná o `n:makro`. Toto je jejich další příklad a je ekvivaletní k  následujícímu zápisu:

/--html
{block #title}<h1>{$post->title}</h1>{/block}
\--

Jednoduše řečeno, tanto blok předefinuje blok s názvem `title`. Tento blok je již definován v hlavní *layout* šabloně (`/app/templates/@layout.latte:8`). Je to stejné jako přepisování v OOP, stejně tak se tento blok v hlavní šabloně také přepíše. Takže `<title>` stránky nyní obsahuje titulek zobrazeného příspěvku a stačilo nám k tomu použít pouze jedno jednoduché makro `n:block="title"`. Skvělé, že?

Pátá a poslední řádka šablony zobrazuje celý obsah článku jednoho konkrétního příspěvku.



Konktrola ID příspěvku
================

Co se stane, kdyý někdo změní ID v URL a vloží najké neexistující `postId`? Měli bychom uživateli nabídnout pěknou chybu typu "stránka nebyla nalezena". Pozměníme tedy tročku render metodu:

/--php
        public function renderShow($postId)
        {
                $post = $this->database->table('posts')->get($postId);
                if (!$post) {
                        $this->error('Stránka nebyla nalezena');
                }

                $this->template->post = $post;
        }
\--

Pokud nemůže být příspěvek nalezen, zavoláním `$this->error(...)` zobrazíme chybovou stránku 404 se srozumitelnou hláškou. Pozor na to, že je vývojářském módu (localhost) tuto stránku neuvidíte. Místo toho Tracy zobrazí výjimku. To je docela výhodné pro vývoj. Můžete si nechat zobrazit oba módy. Stačí pouze změnit hodnotu funkce `setDebugMode` v souboru `bootstrap.php`.


Shrnutí
=======

Máme databázi z příspěvky blogu a webovou aplikaci, která má dvě stránky. Prní zobrazuje přehled všech příspěvků a druhá zobrazuje jeden konkrétní příspěvek.
