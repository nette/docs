Funkcije datotečnega sistema
****************************

.[perex]
[api:Nette\Utils\FileSystem] je statični razred, ki vsebuje uporabne funkcije za delo z datotečnim sistemom. Ena od prednosti v primerjavi z izvornimi funkcijami PHP je, da v primeru napak mečejo izjeme.


Namestitev:

```shell
composer require nette/utils
```

Naslednji primeri predpostavljajo, da je definiran naslednji vzdevek razreda:

```php
use Nette\Utils\FileSystem;
```


Manipulacija .[#toc-manipulation]
=================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Kopira datoteko ali celoten imenik. Privzeto prepiše obstoječe datoteke in imenike. Če je `$overwrite` nastavljen na `false` in `$target` že obstaja, vrže izjemo `Nette\InvalidStateException`. Ob pojavu napake vrže izjemo `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Ustvari imenik, če ne obstaja, vključno z nadrejenimi imeniki. Ob pojavu napake vrže izjemo `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Izbriše datoteko ali celoten imenik, če obstaja. Če imenik ni prazen, najprej izbriše njegovo vsebino. Ob pojavu napake vrže izjemo `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Nastavi dovoljenja datotek na `$fileMode` ali dovoljenja imenikov na `$dirMode`. Rekurzivno preleti in nastavi dovoljenja tudi za celotno vsebino imenika.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Odpre datoteko in vrne vir. Parameter `$mode` deluje enako kot izvirna funkcija `fopen()`:https://www.php.net/manual/en/function.fopen.php. Če pride do napake, se sproži izjema `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Prebere vsebino zapisa `$file`. Ob pojavu napake vrže izjemo `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Prebere vsebino datoteke vrstico za vrstico. Za razliko od izvorne funkcije `file()` ne prebere celotne datoteke v pomnilnik, temveč jo bere neprekinjeno, tako da lahko prebere datoteke, ki so večje od razpoložljivega pomnilnika. Funkcija `$stripNewLines` določa, ali se odstranijo znaki za prekinitev vrstic `\r` in `\n`.
V primeru napake sproži izjemo `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Preimenuje ali premakne datoteko ali imenik, ki ga določa `$origin`, v `$target`. Privzeto prepiše obstoječe datoteke in imenike. Če je `$overwrite` nastavljen na `false` in `$target` že obstaja, vrže izjemo `Nette\InvalidStateException`. Ob pojavu napake vrže izjemo `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Zapiše `$content` v `$file`. Ob pojavu napake vrže izjemo `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Poti .[#toc-paths]
==================


isAbsolute(string $path): bool .[method]
----------------------------------------

Določi, ali je `$path` absoluten.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Poveže vse segmente poti in normalizira rezultat.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizira `..` in `.` ter ločevalnike imenikov v poti.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Pretvarja poševnice v `/`, ki se uporabljajo v sistemih Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Pretvarja poševnice v znake, značilne za trenutno platformo, tj. `\` v sistemu Windows in `/` drugje.

```php
$path = FileSystem::platformSlashes($path);
```
