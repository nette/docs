Podajanje odvisnosti
********************
<div class=perex>


Argumente ali "odvisnosti" v terminologiji DI lahko razredom posredujete na naslednje glavne načine:

* posredovanje s konstruktorjem
* posredovanje z metodo (imenovano setter)
* z nastavitvijo lastnosti
* z metodo, anotacijo ali atributom *inject*

</div>

Prve tri metode veljajo na splošno v vseh objektno usmerjenih jezikih, četrta pa je specifična za predstavnike Nette, zato je obravnavana v [posebnem poglavju |best-practices:inject-method-attribute]. Zdaj si bomo podrobneje ogledali vsako od teh možnosti in jih prikazali s konkretnimi primeri.


Vbrizgavanje konstruktorjev .[#toc-constructor-injection]
=========================================================

Odvisnosti se konstruktorju ob ustvarjanju predmeta posredujejo kot argumenti:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Ta oblika je uporabna za obvezne odvisnosti, ki jih razred nujno potrebuje za delovanje, saj brez njih primerka ni mogoče ustvariti.

Od različice PHP 8.0 lahko uporabimo krajšo obliko zapisa, ki je funkcionalno enakovredna:

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

Od PHP 8.1 lahko lastnost označimo z zastavico `readonly`, ki izjavlja, da se vsebina lastnosti ne bo spremenila:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Kontejner DI samodejno posreduje odvisnosti konstruktorju z uporabo [samodejnega povezovanja |autowiring]. Argumente, ki jih ni mogoče posredovati na ta način (npr. nize, številke, logične vrednosti), [zapiše v konfiguracijo |services#Arguments].


Vbrizgavanje množice .[#toc-setter-injection]
=============================================

Odvisnosti se posredujejo s klicem metode, ki jih shrani v zasebne lastnosti. Običajno je poimenovanje teh metod v obliki `set*()`, zato jih imenujemo setterji.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Ta metoda je uporabna za neobvezne odvisnosti, ki niso potrebne za delovanje razreda, saj ni zagotovljeno, da jih bo objekt dejansko prejel (tj. da bo uporabnik poklical metodo).

Hkrati ta metoda omogoča, da se setter večkrat pokliče za spremembo odvisnosti. Če to ni zaželeno, metodi dodajte preverjanje ali pa od različice PHP 8.1 označite lastnost `$cache` z zastavico `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

Klic setterja je opredeljen v konfiguraciji vsebnika DI v [razdelku setup |services#Setup]. Tudi tu se uporablja samodejno posredovanje odvisnosti s pomočjo funkcije autowiring:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Vbrizgavanje lastnosti .[#toc-property-injection]
=================================================

Odvisnosti se posredujejo neposredno lastnosti:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

 `public`Tako nimamo nadzora nad tem, ali bo posredovana odvisnost dejansko določenega tipa (to je veljalo pred PHP 7.4), in izgubimo možnost, da bi se na novo dodeljeno odvisnost odzvali z lastno kodo, na primer da bi preprečili nadaljnje spremembe. Hkrati lastnost postane del javnega vmesnika razreda, kar morda ni zaželeno.

Nastavitev spremenljivke je opredeljena v konfiguraciji vsebnika DI v [razdelku nastavitev |services#Setup]:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Kateri način izbrati? .[#toc-which-way-to-choose]
=================================================

- konstruktor je primeren za obvezne odvisnosti, ki jih razred potrebuje za delovanje
- setter pa je po drugi strani primeren za neobvezne odvisnosti ali odvisnosti, ki jih je mogoče spremeniti
- javne spremenljivke niso priporočljive
