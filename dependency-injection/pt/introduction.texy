O que é Injeção de Dependência?
*******************************

.[perex]
Este capítulo lhe apresenta as práticas básicas de programação que sustentam toda a estrutura da Nette e que você deve seguir ao escrever suas próprias aplicações. Estas são as bases necessárias para escrever um código limpo, compreensível e de fácil manutenção.

Se você aprender e seguir estas regras, a estrutura estará lá para você a cada passo do caminho. Ela cuidará das tarefas de rotina para você e o deixará o mais confortável possível para que você possa se concentrar na própria lógica.

Os princípios que vamos mostrar aqui são bastante simples. Você não tem nada com que se preocupar.


Lembra-se de seu primeiro programa? .[#toc-remember-your-first-program]
-----------------------------------------------------------------------

Não temos idéia em que linguagem você a escreveu, mas se fosse PHP, provavelmente se pareceria algo assim:

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // impressões 24
```

Algumas linhas triviais de código, mas tantos conceitos-chave estão escondidos nelas. Vemos que existem variáveis. Esse código é dividido em unidades menores, que são funções, por exemplo. Que nós as passamos argumentos de entrada e elas retornam resultados. Tudo o que está faltando são condições e loops.

O fato de passarmos a entrada para uma função e ela retornar um resultado é um conceito perfeitamente compreensível que é usado em outros campos, como a matemática.

Uma função tem uma assinatura, que consiste em seu nome, uma lista de parâmetros e seus tipos e, finalmente, o tipo de valor de retorno. Como usuários, estamos interessados na assinatura; normalmente não precisamos saber nada sobre a implementação interna.

Agora imagine que a assinatura de uma função se parece com isto:

```php
function addition(float $x): float
```

Uma adição com um parâmetro? Isso é estranho... Que tal isto?

```php
function addition(): float
```

Isso é realmente estranho, não é? Como você acha que a função é usada?

```php
echo addition(); // o que imprime?
```

Olhando para tal código, ficamos confusos. Não só um iniciante não o entenderia, nem mesmo um programador hábil entenderia tal código.

Imaginando como seria realmente uma função desse tipo por dentro? Onde obteria os adendos? Provavelmente os obteria *somente* por si só, assim:

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Acontece que existem ligações ocultas a outras funções (ou métodos estáticos) no corpo da função, e para descobrir de onde vêm os adendos de fato, temos que cavar mais.


Não desta maneira! .[#toc-not-this-way]
---------------------------------------

O projeto que acabamos de mostrar é a essência de muitas características negativas:

- a assinatura da função fingia que não precisava de adendos, o que nos confundia
- não temos idéia de como fazer o cálculo da função com dois outros números
- tivemos que olhar para o código para ver onde ele leva os adendos
- descobrimos encadernações ocultas
- para compreender plenamente, precisamos explorar também estas ligações

E é mesmo o trabalho da função de adição a aquisição de insumos? É claro que não é.  Sua responsabilidade é apenas a de acrescentar.


Não queremos encontrar tal código, e certamente não queremos escrevê-lo. O remédio é simples: voltar ao básico e usar apenas parâmetros:


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Regra #1: Parâmetros de uso .[#toc-rule-1-use-parameters]
---------------------------------------------------------

A regra mais importante é: **todos os dados que funcionam ou classes precisam ser passados a eles***.

Se quebrarmos esta regra, será impossível fazer com que o código seja compreensível, limpo e sustentável.

Se o seguirmos, estaremos a caminho de codificar sem restrições ocultas. Rumo a um código que seja compreensível não só para o autor, mas para qualquer um que o leia depois. Onde tudo é compreensível a partir das assinaturas de funções e classes e não há necessidade de buscar segredos ocultos na implementação.

Esta técnica de passar argumentos é tecnicamente chamada **injeção de dependência***.

(Não confunda injeção de dependência com "recipiente de injeção de dependência"; é algo radicalmente diferente, e nós cobriremos os recipientes no [próximo capítulo |container]).


Das funções às aulas .[#toc-from-functions-to-classes]
------------------------------------------------------

E como as aulas se relacionam com isso? Uma classe é uma entidade mais complexa do que uma simples função, mas a regra nº 1 também se aplica aqui. Há apenas [mais maneiras de passar argumentos |passing-dependencies]. Por exemplo, bem parecido com o caso de uma função:

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

Ou usando outros métodos, ou diretamente o construtor:

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Ambos os exemplos estão completamente de acordo com a injeção de dependência.


Exemplos da vida real .[#toc-real-life-examples]
------------------------------------------------

No mundo real, você não vai escrever aulas para adicionar números. Passemos aos exemplos da vida real.

Vamos ter uma aula `Article` representando um artigo de blog:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// salvar o artigo no banco de dados
	}
}
```

e a utilização será a seguinte:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

O método `save()` irá armazenar o artigo em uma tabela de banco de dados. Implementá-lo usando o [Nette Database |database:] seria canja, se não fosse por um único engate: onde `Article` obtém a conexão ao banco de dados, ou seja, o objeto de classe `Nette\Database\Connection`?

Parece que temos muitas opções. Pode ser tirado de alguma variável estática. Ou herdá-la da classe que fornecerá a conexão com o banco de dados. Ou tirar vantagem do chamado singleton. Ou as chamadas fachadas que são usadas em Laravel:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Ótimo, nós resolvemos o problema.

Ou temos?

[Regra de |#rule #1: use parameters] recall [nº 1: usar parâmetros |#rule #1: use parameters]: temos que passar todos os dados que a classe precisa para eles. Porque se não o fizermos, e quebrarmos a regra, iniciamos o caminho para o código sujo cheio de encadernações ocultas, incompreensibilidade, e o resultado será uma aplicação que é uma dor para manter e desenvolver.

O usuário da classe `Article` não tem idéia de onde o método `save()` armazena o artigo. Em uma tabela de banco de dados? Em qual delas, produção ou desenvolvimento? E como isso pode ser mudado?

O usuário tem que olhar como o método `save()` é implementado para encontrar o uso do método `DB::insert()`. Portanto, ele tem que pesquisar mais para descobrir como este método provê uma conexão de banco de dados. E as amarrações ocultas podem formar uma cadeia bastante longa.

Ligações ocultas, fachadas de Laravel ou variáveis estáticas nunca estão presentes em código limpo e bem desenhado. Em código limpo e bem desenhado, os argumentos são passados:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Ainda mais prático, como veremos a seguir, é usar um construtor:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Se você vai escrever uma classe que requer um banco de dados, por exemplo, não descubra de onde obtê-lo, mas deixe-o ser passado para você. Talvez como um parâmetro para um construtor ou outro método. Declare as dependências. Exponha-as na API de sua classe. Você obterá um código compreensível e previsível.

Que tal esta classe que registra mensagens de erro:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

O que você acha, nós seguimos a [regra nº 1: usar parâmetros |#rule #1: use parameters]?

Nós não o fizemos.

A classe *obriga* as informações-chave, o diretório contendo o arquivo de log, a partir de uma constante.

Veja um exemplo de uso:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Sem conhecer a implementação, você poderia responder à pergunta onde as mensagens são escritas? Sugerir-lhe-ia que a existência da constante LOG_DIR é necessária para que ela funcione? E você seria capaz de criar uma segunda instância que escreva para um local diferente? Certamente que não.

Vamos consertar a classe:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

A classe é agora muito mais clara, mais configurável e, portanto, mais útil.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Mas eu não me importo! .[#toc-but-i-don-t-care]
-----------------------------------------------

*"Quando eu crio um objeto de Artigo e chamo salvar(), não quero lidar com o banco de dados, apenas quero que ele seja salvo para aquele que eu defini na configuração. "*

*"Quando uso o Logger, só quero que a mensagem seja escrita, e não quero lidar com onde. Deixe que as configurações globais sejam usadas. "*

Estes são os comentários corretos.

Como exemplo, vamos dar uma aula que envia boletins informativos e registros de como isso foi feito:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Entretanto, a nova `Logger`, que não usa mais a constante `LOG_DIR`, requer o caminho para o arquivo no construtor. Como resolver isso? A classe `NewsletterDistributor` não se importa onde as mensagens são escritas, ela só quer escrevê-las.

A solução é novamente a [regra nº 1: usar parâmetros |#rule #1: use parameters]: passar todos os dados que a classe precisa para ela.

Então passamos o caminho para o tronco para o construtor, que depois usamos ao criar o objeto `Logger`? Não. Porque o caminho não são os dados que a classe `NewsletterDistributor` precisa; é o que `Logger` precisa. A classe precisa do próprio logger. E nós vamos passar isso:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Agora fica claro a partir das assinaturas da classe `NewsletterDistributor` que a extração de madeira é parte de sua funcionalidade. E você tem a opção de substituir o madeireiro por outro.

Enquanto em toda a aplicação podemos ficar satisfeitos com uma única instância do madeireiro e passá-la onde quer que algo esteja registrado, é diferente no caso da classe `Article`. Vamos querer criar múltiplas instâncias dela. Como lidar com a dependência do banco de dados no construtor? Como exemplo, tomemos um controlador que deve salvar um artigo no banco de dados após o envio de um formulário:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Uma possível solução é sugerida: passar o objeto do banco de dados para o `UserController` pelo construtor e usar `$article = new Article($this->db)`.

Como no caso anterior, esta não é a prática correta. O banco de dados não é uma dependência `UserController`, mas uma dependência `Article`. Além disso, no momento em que o construtor da classe `Article` for modificado de alguma forma (um novo parâmetro é adicionado), teremos que modificar o código em todos os lugares onde as instâncias são criadas.

A solução são as fábricas.


Regra # 2: Usar Fábricas .[#toc-rule-2-use-factories]
-----------------------------------------------------

Ao remover as ligações ocultas e passar todos os dados como argumentos, obtemos classes mais configuráveis e flexíveis. Portanto, ainda precisamos de algo para criar e configurar essas classes mais flexíveis. Vamos chamar isso de fábrica.

A regra básica é: se uma classe tem dependências, deixar a criação de suas instâncias para a fábrica.

As fábricas são um substituto mais inteligente para o operador `new` no mundo da injeção de dependência.


Fábrica .[#toc-factory]
-----------------------

Uma fábrica é uma classe que cria e configura objetos. A fábrica que produz `Article` será chamada `ArticleFactory` e sua utilização no controlador será a seguinte:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// deixar a fábrica criar um objeto
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

A implementação de uma fábrica pode se parecer com isto:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Neste ponto, quando a assinatura do construtor da classe `Article` muda, a única parte do código que precisa reagir a isso é a fábrica `ArticleFactory`. Qualquer outro código que funcione com objetos `Article`, como `UserController`, não é afetado.

Você pode estar batendo a testa agora mesmo e se perguntando como nós realmente nos ajudamos. A quantidade de código cresceu e passou do controlador para uma classe separada. Entretanto, a Nette DI tem um ás escondido na manga. Ela compreende o conceito de fábricas e pode até mesmo [escrever um serviço desse tipo para nós |factory]. Assim, ao invés da classe `ArticleFactory`, poderíamos apenas criar uma interface:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Mas estamos nos adiantando um pouco agora, chegaremos a isso em um minuto.


Sumário .[#toc-summary]
-----------------------

No início deste capítulo, prometemos demonstrar um princípio simples de como projetar aplicações. Embora o princípio em si seja simples (dar às classes os dados que elas precisam), o que se segue requer mais reflexão. Sinta-se à vontade para ler este capítulo várias vezes.

Os programadores que expulsaram velhos hábitos e começaram a usar a injeção de dependência consideram isto um momento crucial em suas vidas profissionais. Abriu um mundo de aplicações claras e sustentáveis.

Agora veremos o que é o [Recipiente de Injeção de Dependência |container].
