Funciones auxiliares
********************

.[perex]
[api:Nette\Utils\Helpers] es una clase estática con funciones útiles.


Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que se ha creado un alias:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Ejecuta el callback y devuelve la salida capturada como una cadena.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Limita el valor al rango inclusivo dado de min y max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Compara dos valores de la misma manera que lo hace PHP. Distingue los operadores `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
La función es útil en situaciones donde el operador es variable.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Convierte `false` a `null`, no cambia otros valores.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Devuelve el último error en PHP o una cadena vacía si no ocurrió ningún error. A diferencia de `error_get_last()`, no se ve afectado por la directiva `html_errors` de PHP y siempre devuelve texto, no HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

De las opciones ofrecidas en `$possibilities`, busca la cadena que sea más similar a `$value`, pero no idéntica. Solo admite codificación de 8 bits.

Es útil cuando una opción determinada no es válida y queremos sugerir al usuario una similar (pero diferente, por eso se ignora la cadena idéntica). De esta manera, Nette crea los mensajes `¿quisiste decir ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', no 'baz'
```
