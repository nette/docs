Float Fonksiyonları
*******************

.[perex]
[api:Nette\Utils\Floats] float sayıları karşılaştırmak için kullanışlı fonksiyonlara sahip statik bir sınıftır.


Kurulum:

```shell
composer require nette/utils
```

Tüm örnekler aşağıdaki sınıf takma adının tanımlandığını varsayar:

```php
use Nette\Utils\Floats;
```


Motivasyon .[#toc-motivation]
=============================

Float karşılaştırma sınıfının ne işe yaradığını merak ediyor musunuz? Operatörleri kullanabilirsiniz `<`, `>`, `===`, diye düşünüyorsunuz.
Bu tamamen doğru değil. Sizce bu kodu ne yazdıracak?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Kodu çalıştırırsanız, bazılarınız programın `not same` adresini yazdırmasına şaşıracaktır.

Float sayılarla yapılan matematiksel işlemler, ondalık ve ikili sistemler arasındaki dönüşüm nedeniyle hatalara neden olur. Örneğin `0.1 + 0.2` eşittir `0.300000000000000044…`. Bu nedenle, kayan sayıları karşılaştırırken, belirli bir ondalık basamaktan küçük bir farkı tolere etmeliyiz.

Ve `Floats` sınıfının yaptığı da budur. Aşağıdaki karşılaştırma beklendiği gibi çalışacaktır:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

`NAN` adresini karşılaştırmaya çalışırken `\LogicException` istisnası atar.


Şamandıra Karşılaştırması .[#toc-float-comparison]
==================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

`$a` = `$b` ise `true` döndürür.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

`$a` < `$b` ise `true` döndürür.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

`$a` <= `$b` ise `true` döndürür.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

`$a` > `$b` ise `true` döndürür.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

`$a` >= `$b` ise `true` döndürür.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

`$a` < `$b` ise `-1` döndürür, eşitlerse `0` and if `$a` > `$b` `1` döndürür.

Örneğin `usort` işleviyle birlikte kullanılabilir.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr is [-3.5, 1, 2, 5]
```


Yardımcı Fonksiyonlar .[#toc-helpers-functions]
===============================================


isZero(float $value): bool .[method]
------------------------------------

Değer sıfırsa `true` döndürür.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Değer tamsayı ise `true` döndürür.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
