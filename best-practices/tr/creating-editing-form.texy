Kayıt Oluşturma ve Düzenleme Formu
**********************************

.[perex]
Her ikisi için de aynı formu kullanarak Nette'de kayıt ekleme ve düzenleme nasıl düzgün bir şekilde uygulanır?

Birçok durumda, kayıt ekleme ve düzenleme formları aynıdır, sadece düğme üzerindeki etiket farklıdır. Formu önce bir kayıt eklemek, sonra düzenlemek ve son olarak iki çözümü birleştirmek için kullandığımız basit sunum örneklerini göstereceğiz.


Kayıt Ekleme .[#toc-adding-a-record]
------------------------------------

Kayıt eklemek için kullanılan bir sunum örneği. Gerçek veritabanı işini, kodu örnekle ilgili olmayan `Facade` sınıfına bırakacağız.


```php
use Nette\Application\UI\Form;

class RecordPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentRecordForm(): Form
	{
		$form = new Form;

		// ... add form fields ...

		$form->onSuccess[] = [$this, 'recordFormSucceeded'];
		return $form;
	}

	public function recordFormSucceeded(Form $form, array $data): void
	{
		$this->facade->add($data); // add record to database
		$this->flashMessage('Successfully added');
		$this->redirect('...');
	}

	public function renderAdd(): void
	{
		// ...
	}
}
```


Bir Kaydı Düzenleme .[#toc-editing-a-record]
--------------------------------------------

Şimdi bir kaydı düzenlemek için kullanılan bir sunucunun nasıl görüneceğini görelim:


```php
use Nette\Application\UI\Form;

class RecordPresenter extends Nette\Application\UI\Presenter
{
	private $record;

	public function __construct(
		private Facade $facade,
	) {
	}

	public function actionEdit(int $id): void
	{
		$record = $this->facade->get($id);
		if (
			!$record // verify the existence of the record
			|| !$this->facade->isEditAllowed(/*...*/) // check permissions
		) {
			$this->error(); // 404 error
		}

		$this->record = $record;
	}

	protected function createComponentRecordForm(): Form
	{
		// verify that the action is 'edit'
		if ($this->getAction() !== 'edit') {
			$this->error();
		}

		$form = new Form;

		// ... add form fields ...

		$form->setDefaults($this->record); // set default values
		$form->onSuccess[] = [$this, 'recordFormSucceeded'];
		return $form;
	}

	public function recordFormSucceeded(Form $form, array $data): void
	{
		$this->facade->update($this->record->id, $data); // update record
		$this->flashMessage('Successfully updated');
		$this->redirect('...');
	}
}
```

 [Sunucu yaşam döngüsünün |application:presenters#Life Cycle of Presenter] hemen başında çağrılan *action* yönteminde, kaydın varlığını ve kullanıcının düzenleme iznini doğrularız.

Kaydı `$record` özelliğinde saklarız, böylece varsayılan değerleri ayarlamak için `createComponentRecordForm()` yönteminde ve kimlik için `recordFormSucceeded()` yönteminde kullanılabilir. Alternatif bir çözüm, varsayılan değerleri doğrudan `actionEdit()` ve ID değerinde ayarlamak olabilir,
URL'nin bir parçası olan `getParameter('id')` kullanılarak alınır:


```php
	public function actionEdit(int $id): void
	{
		$record = $this->facade->get($id);
		if (
			// verify existence and check permissions
		) {
			$this->error();
		}

		// set default form values
		$this->getComponent('recordForm')
			->setDefaults($record);
	}

	public function recordFormSucceeded(Form $form, array $data): void
	{
		$id = (int) $this->getParameter('id');
		$this->facade->update($id, $data);
		// ...
	}
}
```

Ancak, **tüm kodlardan çıkarılacak en önemli sonuç** bu olmalıdır, formu oluştururken eylemin gerçekten `edit` olduğundan emin olmamız gerekir. Çünkü aksi takdirde `actionEdit()` yöntemindeki doğrulama hiç gerçekleşmez!


Ekleme ve Düzenleme için Aynı Form .[#toc-same-form-for-adding-and-editing]
---------------------------------------------------------------------------

Ve şimdi her iki sunucuyu bir araya getireceğiz. Ya `createComponentRecordForm()` yönteminde hangi eylemin yer aldığını ayırt edip formu buna göre yapılandırabiliriz ya da doğrudan eylem yöntemlerine bırakıp koşuldan kurtulabiliriz:


```php
class RecordPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function actionAdd(): void
	{
		$form = $this->getComponent('recordForm');
		$form->onSuccess[] = [$this, 'addingFormSucceeded'];
	}

	public function actionEdit(int $id): void
	{
		$record = $this->facade->get($id);
		if (
			!$record // verify the existence of the record
			|| !$this->facade->isEditAllowed(/*...*/) // check permissions
		) {
			$this->error(); // 404 error
		}

		$form = $this->getComponent('recordForm');
		$form->setDefaults($record); // set defaults
		$form->onSuccess[] = [$this, 'editingFormSucceeded'];
	}

	protected function createComponentRecordForm(): Form
	{
		// verify that the action is 'add' or 'edit'
		if (!in_array($this->getAction(), ['add', 'edit'])) {
			$this->error();
		}

		$form = new Form;

		// ... add form fields ...

		return $form;
	}

	public function addingFormSucceeded(Form $form, array $data): void
	{
		$this->facade->add($data); // add record to database
		$this->flashMessage('Successfully added');
		$this->redirect('...');
	}

	public function editingFormSucceeded(Form $form, array $data): void
	{
		$id = (int) $this->getParameter('id');
		$this->facade->update($id, $data); // update record
		$this->flashMessage('Successfully updated');
		$this->redirect('...');
	}
}
```

{{priority: -1}}
{{sitename: Best Practices}}
