Respuesta HTTP
**************

.[perex]
Nette encapsula la respuesta HTTP en objetos con una API comprensible.

La respuesta HTTP está representada por el objeto [api:Nette\Http\Response]. Si trabaja con Nette, este objeto es creado automáticamente por el framework y puede solicitar que se le pase mediante [inyección de dependencias |dependency-injection:passing-dependencies]. En los presenters, basta con llamar al método `$this->getHttpResponse()`.

→ [Instalación y requisitos |@home#Instalace]


Nette\Http\Response
===================

El objeto, a diferencia de [Nette\Http\Request|request], es mutable, es decir, puede cambiar el estado mediante setters, por ejemplo, enviar cabeceras. No olvide que todos los setters deben ser llamados **antes de enviar cualquier salida.** Si ya se ha enviado la salida lo indica el método `isSent()`. Si devuelve `true`, cualquier intento de enviar una cabecera lanzará una excepción `Nette\InvalidStateException`.


setCode(int $code, ?string $reason=null) .[method]
--------------------------------------------------
Cambia el [código de estado de la respuesta |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. Para una mejor legibilidad del código fuente, se recomienda utilizar [constantes predefinidas |api:Nette\Http\IResponse] en lugar de números para el código.

```php
$httpResponse->setCode(Nette\Http\Response::S404_NotFound);
```


getCode(): int .[method]
------------------------
Devuelve el código de estado de la respuesta.


isSent(): bool .[method]
------------------------
Devuelve si las cabeceras ya han sido enviadas desde el servidor al navegador, por lo que ya no es posible enviar cabeceras ni cambiar el código de estado.


setHeader(string $name, string $value) .[method]
------------------------------------------------
Envía una cabecera HTTP y **sobrescribe** una cabecera enviada previamente con el mismo nombre.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```


addHeader(string $name, string $value) .[method]
------------------------------------------------
Envía una cabecera HTTP y **no sobrescribe** una cabecera enviada previamente con el mismo nombre.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```


deleteHeader(string $name) .[method]
------------------------------------
Elimina una cabecera HTTP enviada previamente.


getHeader(string $header): ?string .[method]
--------------------------------------------
Devuelve la cabecera HTTP enviada o `null` si no existe. El parámetro es insensible a mayúsculas/minúsculas.

```php
$pragma = $httpResponse->getHeader('Pragma');
```


getHeaders(): array .[method]
-----------------------------
Devuelve todas las cabeceras HTTP enviadas como un array asociativo.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```


setContentType(string $type, ?string $charset=null) .[method]
-------------------------------------------------------------
Cambia la cabecera `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```


redirect(string $url, int $code=self::S302_Found): void .[method]
-----------------------------------------------------------------
Redirige a otra URL. No olvide terminar el script después.

```php
$httpResponse->redirect('http://example.com');
exit;
```


setExpiration(?string $time) .[method]
--------------------------------------
Establece la expiración del documento HTTP utilizando las cabeceras `Cache-Control` y `Expires`. El parámetro es un intervalo de tiempo (como texto) o `null`, lo que deshabilita el almacenamiento en caché.

```php
// la caché del navegador expirará en una hora
$httpResponse->setExpiration('1 hour');
```


sendAsFile(string $fileName) .[method]
--------------------------------------
La respuesta se descargará mediante el cuadro de diálogo *Guardar como* con el nombre especificado. El archivo en sí no se envía.

```php
$httpResponse->sendAsFile('faktura.pdf');
```


setCookie(string $name, string $value, $time, ?string $path=null, ?string $domain=null, ?bool $secure=null, ?bool $httpOnly=null, ?string $sameSite=null) .[method]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Envía una cookie. Valores por defecto de los parámetros:

| `$path`     | `'/'`   | la cookie tiene alcance a todas las rutas en el (sub)dominio *(configurable)*
| `$domain`   | `null`  | lo que significa con alcance al (sub)dominio actual, pero no a sus subdominios *(configurable)*
| `$secure`   | `true`  | si el sitio web se ejecuta en HTTPS, de lo contrario `false` *(configurable)*
| `$httpOnly` | `true`  | la cookie no es accesible para JavaScript
| `$sameSite` | `'Lax'` | la cookie puede no ser enviada al [acceder desde otro dominio|nette:glossary#SameSite cookie]

Puede cambiar los valores predeterminados de los parámetros `$path`, `$domain` y `$secure` en la [configuración|configuration#HTTP cookie].

El tiempo se puede especificar como un número de segundos o una cadena:

```php
$httpResponse->setCookie('lang', 'cs', '100 days');
```

El parámetro `$domain` determina qué dominios pueden aceptar la cookie. Si no se especifica, la cookie es aceptada por el mismo (sub)dominio que la estableció, pero no por sus subdominios. Si se especifica `$domain`, también se incluyen los subdominios. Por lo tanto, especificar `$domain` es menos restrictivo que omitirlo. Por ejemplo, con `$domain = 'nette.org'`, las cookies también están disponibles en todos los subdominios como `doc.nette.org`.

Para el valor `$sameSite`, puede usar las constantes `Response::SameSiteLax`, `SameSiteStrict` y `SameSiteNone`.


deleteCookie(string $name, ?string $path=null, ?string $domain=null, ?bool $secure=null): void .[method]
--------------------------------------------------------------------------------------------------------
Elimina una cookie. Los valores por defecto de los parámetros son:
- `$path` con alcance a todos los directorios (`'/'`)
- `$domain` con alcance al (sub)dominio actual, pero no a sus subdominios
- `$secure` se rige por la configuración en [configuración|configuration#HTTP cookie]

```php
$httpResponse->deleteCookie('lang');
```
