Perché usare i modelli?
***********************


Perché usare un sistema di template in PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
-----------------------------------------------------------------------------------------------

Innanzitutto, ricordiamo brevemente la storia di PHP, ricca di interessanti colpi di scena. Uno dei primi linguaggi di programmazione utilizzati per la creazione di template HTML è stato il C. Tuttavia, il suo utilizzo per questo scopo si è rivelato inadatto. Rasmus Lerdorf creò PHP per facilitare la generazione dinamica di HTML con C sul backend. Inizialmente PHP era stato concepito come linguaggio di template, ma con il tempo ha acquisito ulteriori funzionalità ed è diventato un linguaggio di programmazione a tutti gli effetti.

Tuttavia, funziona ancora come linguaggio di template. I file PHP possono essere utilizzati come pagine HTML, in cui è possibile generare una variabile utilizzando il comando `<?= $foo ?>`.

All'inizio della storia di PHP, il sistema di template Smarty è stato introdotto per separare rigorosamente l'aspetto (HTML/CSS) dalla logica dell'applicazione. Le sue capacità erano volutamente limitate rispetto a PHP, per cui uno sviluppatore non poteva, ad esempio, interrogare un database da un template. Tuttavia, questi sistemi introducevano ulteriori dipendenze, aumentavano la complessità del progetto e richiedevano l'apprendimento di un nuovo linguaggio Smarty. I loro vantaggi sono stati controversi e per i template si è continuato a usare il semplice PHP.

Col tempo, i sistemi di template sono diventati più utili. Un numero crescente di programmatori e di aziende ha capito l'importanza della sicurezza. Hanno riconosciuto l'esistenza di [vulnerabilità come gli XSS |safety-first]. Il modo corretto di visualizzare una variabile non è `<?= $foo ?>` ma `<?= htmlspecialchars($foo) ?>`e l'omissione dell'escape, cioè l'uso della funzione `htmlspecialchars()`, può causare una grave violazione della sicurezza. I sistemi di template hanno introdotto l'auto-escaping, per cui bastava scrivere `{$foo}`, e la variabile sarebbe stata visualizzata con l'escape incluso.

I sistemi di template hanno introdotto il supporto per l'ereditarietà, il sandboxing e altre utili funzionalità, rendendo la scrittura dei template molto più semplice rispetto al PHP. A un certo punto, i vantaggi dei sistemi di template superarono in modo significativo le preoccupazioni sull'introduzione di nuove dipendenze.


Perché dovrei usare il sistema di template Latte? .[#toc-why-should-i-use-the-latte-templating-system]
------------------------------------------------------------------------------------------------------

Le ragioni principali sono la sicurezza e la sintassi.

Tutti i sistemi di template, come Twig, Blade o Smarty, hanno introdotto una protezione XSS sotto forma di escape automatico. Tuttavia, Latte si è spinto oltre, rendendosi conto che, affinché l'escape automatico fosse veramente funzionale, il sistema doveva comprendere l'HTML. Doveva riconoscere non solo una stringa di caratteri, ma anche tag, attributi e così via. Questo perché sono richiesti diversi metodi di escape all'interno del testo HTML, all'interno dei tag HTML, all'interno di JavaScript, ecc. Latte ha imparato a capire l'HTML e a fare l'escape in ognuno di questi contesti [in modo appropriato |safety-first#Context-Aware Escaping]. È diventato così il primo e finora unico sistema di template PHP con escape sensibile al contesto.

Latte rappresenta un sistema di template veramente sicuro, mentre altri sistemi tendono a creare un falso senso di sicurezza.

Un altro vantaggio significativo di Latte è l'uso della sintassi PHP, per cui il programmatore/codificatore non deve imparare un nuovo linguaggio, ma può utilizzare quello che già conosce bene.


Quali sono le principali differenze tra i sistemi di template come Latte, Twig e Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Le differenze tra i sistemi di template come Latte, Twig e Blade risiedono principalmente nella sintassi, nella sicurezza e nell'integrazione con i framework:

- Latte: utilizza la sintassi del linguaggio PHP, che lo rende più facile da imparare e da usare. Offre una protezione di alto livello contro gli attacchi XSS.
- Twig: utilizza una sintassi simile a quella di Python, molto diversa da quella di PHP. Esegue l'escape senza distinzione di contesto. È ben integrato con il framework Symfony.
- Blade: utilizza un mix di sintassi PHP e personalizzata. Esegue l'escape senza distinzione di contesto. È strettamente integrato con le funzionalità e l'ecosistema Laravel.


Vale la pena per le aziende utilizzare un sistema di template? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
------------------------------------------------------------------------------------------------------------------------------

Innanzitutto, i costi associati alla formazione, all'utilizzo e ai vantaggi complessivi variano notevolmente a seconda del sistema. Il sistema di template Latte, grazie all'uso della sintassi PHP, semplifica notevolmente l'apprendimento per i programmatori che hanno già familiarità con questo linguaggio. Di solito bastano poche ore perché un programmatore prenda confidenza con Latte, riducendo i costi di formazione e accelerando l'adozione della tecnologia e, soprattutto, l'efficienza nell'uso quotidiano.

Inoltre, Latte offre un alto livello di protezione contro le vulnerabilità XSS grazie alla sua esclusiva tecnologia di escape context-aware. Questa protezione è fondamentale per garantire la sicurezza delle applicazioni web e ridurre al minimo il rischio di attacchi che potrebbero mettere in pericolo gli utenti o i dati aziendali. La sicurezza delle applicazioni web è importante anche per mantenere la buona reputazione di un'azienda. I problemi di sicurezza possono portare alla perdita di fiducia da parte dei clienti e danneggiare la reputazione dell'azienda sul mercato.

L'uso di Latte riduce anche i costi complessivi di sviluppo e di manutenzione, rendendo entrambi più semplici. Pertanto, l'uso di un sistema di template vale sicuramente la pena.


Come influisce Latte sulle prestazioni dell'applicazione web e sulle risorse del server? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Anche se i modelli di Latte vengono elaborati rapidamente, questo aspetto non ha molta importanza. Il motivo è che il parsing dei file avviene solo una volta durante la prima visualizzazione. Vengono poi compilati in codice PHP, memorizzati su disco ed eseguiti a ogni richiesta successiva senza bisogno di ricompilazione.

Questo è il modo in cui funziona in un ambiente di produzione. Durante lo sviluppo, i modelli Latte vengono ricompilati ogni volta che il loro contenuto viene modificato, in modo che lo sviluppatore veda sempre la versione corrente.
