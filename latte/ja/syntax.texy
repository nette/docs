構文
***

.[perex]
Syntax Latteは、ウェブデザイナーの実用的な要求から生まれました。私たちは、最も使いやすい構文を探していました。この構文を使えば、他の方法では本当に難しい構文をエレガントに書くことができます。
同時に、すべての表現はPHPと全く同じに記述されるので、新しい言語を学ぶ必要はありません。すでに知っていることを最大限に活用すればいいのです。

以下に、基本的な要素であるタグ、n:属性、コメント、フィルタを説明する最小限のテンプレートを示します。

```latte
{* this is a comment *}
<ul n:if="$items">                {* n:if is n:atribut *}
{foreach $items as $item}         {* tag representing foreach loop *}
	<li>{$item|capitalize}</li>   {* tag that prints a variable with a filter *}
{/foreach}                        {* end of cycle *}
```

これらの重要な要素を詳しく見て、それらがどのように素晴らしいテンプレートを構築するのに役立つかを見てみましょう。


タグ .[#toc-tags]
===============

テンプレートには、テンプレートのロジック（例えば、*foreach*ループ）や出力式を制御するタグが含まれています。どちらも一つの区切り文字`{ ... }` が使われますので、他のシステムのように、どの場面でどの区切り文字を使うか考える必要はありません。
また、`{`文字の後に引用符やスペースが続く場合、Latteはそれをタグの先頭とは見なさないので、テンプレート内でJavaScriptの構成要素やJSON、CSSルールを問題なく使用することができます。

[全タグの概要を |tags]見るさらに、[カスタムタグを |extending-latte#tags]作成することも可能です。


ラテはPHPを理解する .[#toc-latte-understands-php]
=========================================

タグの中によく知っているPHPの表現を使うことができます。

- 変数
- 文字列 (HEREDOC および NOWDOC を含む), 配列, 数値, など。
- [演算子 |https://www.php.net/manual/en/language.operators.php]
- 関数やメソッドの呼び出し ([サンドボックスで |sandbox]制限されることがあります)
- [マッチ |https://www.php.net/manual/en/control-structures.match.php]
- [無名関数 |https://www.php.net/manual/en/functions.arrow.php]
- [コールバック |https://www.php.net/manual/en/functions.first_class_callable_syntax.php]
- 複数行コメント`/* ... */`
- など

さらに、LatteはPHPの文法にいくつかの[素晴らしい拡張を加えて |#Syntactic Sugar]います。


n:属性 .[#toc-n-attributes]
=========================

一つのHTML要素に作用する`{if} … {/if}` のような各ペアタグは、[n:attribute |#n:attribute]記法で書くことができます。例えば、上の例の`{foreach}` は、次のように書くこともできる。

```latte
<ul n:if="$items">
	<li n:foreach="$items as $item">{$item|capitalize}</li>
</ul>
```

この場合、機能は、それが記述されているHTML要素に対応する。

```latte
{var $items = ['I', '♥', 'Latte']}

<p n:foreach="$items as $item">{$item}</p>
```

プリント

```latte
<p>I</p>
<p>♥</p>
<p>Latte</p>
```

`inner-` プレフィックスを使用することで、その機能が要素の本体のみに適用されるように動作を変更することができます。

```latte
<div n:inner-foreach="$items as $item">
	<p>{$item}</p>
	<hr>
</div>
```

印刷します。

```latte
<div>
	<p>I</p>
	<hr>
	<p>♥</p>
	<hr>
	<p>Latte</p>
	<hr>
</div>
```

また、`tag-` という接頭辞をつけると、HTML タグにのみ機能が適用されます。

```latte
<p><a href="{$url}" n:tag-if="$url">Title</a></p>
```

変数`$url` の値によって、このように表示されます。

```latte
// when $url is empty
<p>Title</p>

// when $url equals 'https://nette.org'
<p><a href="https://nette.org">Title</a></p>
```

しかし、n:attributesはペアタグのショートカットであるだけでなく、純粋なn:attributesもあります[。 |tags#n:class]


フィルター .[#toc-filters]
=====================

[標準フィル |filters]タの概要をご覧ください。

Latteでは、パイプ記号を使った記法でフィルタを呼び出すことができます（前方にスペースがあっても可）。

```latte
<h1>{$heading|upper}</h1>
```

フィルターは連結することができ、その場合、左から右の順に適用されます。

```latte
<h1>{$heading|lower|capitalize}</h1>
```

パラメータはコロンまたはカンマで区切られたフィルタ名の後に置かれます。

```latte
<h1>{$heading|truncate:20,''}</h1>
```

フィルタは式に対して適用することができる。

```latte
{var $name = ($title|upper) . ($subtitle|lower)}
```

ブロックの場合。

```latte
<h1>{block |lower}{$heading}{/block}</h1>
```

または直接値（と組み合わせ [`{=expr}` | https://latte.nette.org/ja/tags#printing]タグ)。
```latte
<h1>{='  Hello world  '|trim}<h1>
```


コメント .[#toc-comments]
=====================

コメントはこのように書き、出力には入りません。

```latte
{* this is a comment in Latte *}
```

PHPのコメントはタグの中で動作します。

```latte
{include 'file.info', /* value: 123 */}
```


構文解析シュガー .[#toc-syntactic-sugar]
================================


クォーテーションマークなしの文字列 .[#toc-strings-without-quotation-marks]
---------------------------------------------------------

単純な文字列では、引用符を省略することができます。

```latte
as in PHP:   {var $arr = ['hello', 'btn--default', '€']}

abbreviated: {var $arr = [hello, btn--default, €]}
```

単純文字列とは、文字、数字、アンダースコア、ハイフンのみで構成される文字列のことです。数字で始まったり、ハイフンで始まったり、ハイフンで終わったりしてはいけません。
大文字とアンダースコアだけで構成されてはいけません。そうすると定数とみなされるからです (例:`PHP_VERSION`)。
また、キーワード`and`,`array`,`clone`,`default`,`false`,`in`,`instanceof`,`new`,`null`,`or`,`return`,`true`,`xor` と衝突してはいけません。


短い三項演算子 .[#toc-short-ternary-operator]
--------------------------------------

三項演算子の3番目の値が空であれば、省略可能です。

```latte
as in PHP:   {$stock ? 'In stock' : ''}

abbreviated: {$stock ? 'In stock'}
```


配列における現代的な鍵の表記法 .[#toc-modern-key-notation-in-the-array]
--------------------------------------------------------

配列のキーは、関数を呼び出すときの名前付きパラメータと同じように書くことができます。

```latte
as in PHP:   {var $arr = ['one' => 'item 1', 'two' => 'item 2']}

modern:      {var $arr = [one: 'item 1', two: 'item 2']}
```


フィルター .[#toc-filters]
---------------------

フィルターはどんな式にも使えます。全体を大括弧で囲んでください。

```latte
{var $content = ($text|truncate: 30|upper)}
```


演算子`in` .[#toc-operator-in]
---------------------------

`in` 演算子は`in_array()` 関数の代わりに使用することができます。比較は常に厳密です。

```latte
{* like in_array($item, $items, true) *}
{if $item in $items}
	...
{/if}
```


.{data-version:2.9}
未定義安全演算子によるオプショナルチェーニング .[#toc-optional-chaining-with-undefined-safe-operator]
------------------------------------------------------------------------------

未定義安全演算子`??->` は nullsafe 演算子`?->` と似ていますが、変数、プロパティ、インデックスが全く存在しない場合にもエラーを発生させません。

```latte
{$order??->id}
```

これは、`$order` が定義されていて null でないときは`$order->id` が計算されるが、`$order` が null か存在しないときは、今やっていることをやめて null を返すだけでよい、ということを意味しています。

`?->` を使って、nullっぽいチェックを繰り返し行う多くのコードを置き換えることができるかもしれません。
```latte
{$user??->address??->street}
// roughly means isset($user) && isset($user->address) ? $user->address->street : null
```


歴史への窓 .[#toc-a-window-into-history]
-----------------------------------

Latteはその歴史の中で、数年後にPHP自体に登場する構文上のお菓子をいくつも生み出してきました。例えば、Latteでは、配列を  の代わりに `[1, 2, 3]`の代わりに`array(1, 2, 3)` と書いたり、ヌルセーフ演算子`$obj?->foo` を使ったりすることが、PHPで可能になるずっと以前から可能でした。また、Latteでは配列展開演算子`(expand) $arr` も導入されており、これは現在のPHPの演算子`...$arr` に相当するものです。


LatteにおけるPHPの制限事項 .[#toc-php-limitations-in-latte]
==================================================

Latteで記述できるのはPHPの式のみです。つまり、クラスを宣言したり、`if`,`foreach`,`switch`,`return`,`try`,`throw` などの[制御 |https://www.php.net/manual/en/language.control-structures.php]構造を使用することはできませんが、Latteはその代わりに[タグを |tags]提供しています。
また、[属性や |https://www.php.net/manual/en/language.attributes.php] [バックスティック |https://www.php.net/manual/en/language.operators.execution.php]、[マジック定数も |https://www.php.net/manual/en/language.constants.magic.php]使えません。
`echo`,`include`,`require`,`exit`,`eval`,`unset` は関数ではなく、PHPの特殊な言語構造であり、式ではないので、使うことすらできません。

しかし、[RawPhpExtension |develop#RawPhpExtension]拡張モジュールを有効にすることで、これらの制限を回避することができます。これにより、テンプレートの作者の責任において`{php ...}` タグで任意の PHP コードを使用することができます。
