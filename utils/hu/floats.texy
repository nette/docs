Lebegők Funkciók
****************

.[perex]
[api:Nette\Utils\Floats] egy statikus osztály, amely hasznos függvényeket tartalmaz a lebegőszámok összehasonlítására.


Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi, hogy a következő osztály alias van definiálva:

```php
use Nette\Utils\Floats;
```


Motiváció .[#toc-motivation]
============================

Kíváncsi vagy, hogy mire való egy float összehasonlító osztály? Használhatod az operátorokat `<`, `>`, `===`, gondolja.
Ez nem teljesen igaz. Mit gondolsz, mit fog kiírni ez a kód?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Ha lefuttatjátok a kódot, néhányan meg fognak lepődni, hogy a program a `not same` címet nyomtatta ki.

A lebegőszámokkal végzett matematikai műveletek hibákat okoznak a decimális és a bináris rendszer közötti konverzió miatt. Például `0.1 + 0.2` egyenlő `0.300000000000000044…`. Ezért a lebegőszámok összehasonlításakor el kell tűrnünk egy kis eltérést egy bizonyos tizedesjegyen belül.

És ezt teszi a `Floats` osztály. A következő összehasonlítás az elvárásoknak megfelelően fog működni:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Amikor megpróbálja összehasonlítani a `NAN`, akkor a `\LogicException` kivételt dob.


Lebegő összehasonlítás .[#toc-float-comparison]
===============================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Visszaadja a `true` értéket, ha `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Visszaadja a `true` értéket, ha `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Visszaadja a `true` értéket, ha `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Visszaadja a `true` értéket, ha `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Visszaadja a `true` értéket, ha `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Ha `$a` < `$b`, akkor `-1`, ha egyenlőek, akkor `0` and if `$a` > `$b`, akkor `1`.

Használható például a `usort` függvénnyel.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr is [-3.5, 1, 2, 5]
```


Segédfunkciók .[#toc-helpers-functions]
=======================================


isZero(float $value): bool .[method]
------------------------------------

Visszaadja a `true` értéket, ha az érték nulla.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Visszaadja a `true` értéket, ha az érték egész szám.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
