Функции на Latte
****************

.[perex]
В допълнение към обичайните функции на PHP можете да ги използвате и в шаблони.

.[table-latte-filters]
| `clamp` | [притискане на стойност в диапазон |#clamp]
| `divisibleBy`| [проверява дали дадена променлива се дели на дадено число |#divisibleBy]
| `even` | [проверява дали дадено число е четно число|#even]
| `first` | [връща първия елемент на масив или символен низ |#first]
| `last` | [връща последния елемент на масив или символен низ|#last]
| `odd` | [проверява дали числото е нечетно |#odd]
| `slice` | [извлича фрагмент от масив или низ |#slice]


използване на .[#toc-usage]
===========================

Функциите се използват по същия начин, както обикновените функции на PHP, и могат да се използват във всички изрази:

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

По този начин могат да се регистрират [потребителски функции |extending-latte#Functions]:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

Използваме го в шаблона по следния начин

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Функции .[#toc-functions]
=========================


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]{data-version:2.9}
----------------------------------------------------------------------------------------------
Връща стойността, притисната в обхвата min и max.

```latte
{=clamp($level, 0, 255)}
```

Вижте също [филтърна скоба |filters#clamp]:


divisibleBy(int $value, int $by): bool .[method]{data-version:2.10.2}
---------------------------------------------------------------------
Проверява дали дадена променлива е делима на число.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]{data-version:2.10.2}
-----------------------------------------------------
Проверява дали дадено число е четно число.

```latte
{if even($num)} ... {/if}
```


first(string|array $value): mixed .[method]{data-version:2.10.2}
----------------------------------------------------------------
Връща първия елемент на масив или символен низ:

```latte
{=first([1, 2, 3, 4])}    {* списъци 1 *}
{=first('abcd')}          {* списъци 'a' *}
```

Вижте също [последно |#last], [първо филтриране |filters#first].


last(string|array $value): mixed .[method]{data-version:2.10.2}
---------------------------------------------------------------
Връща последния елемент на масив или символен низ:

```latte
{=last([1, 2, 3, 4])}    {* списъци 4 *}
{=last('abcd')}          {* списъци 'd' *}
```

Вижте също [първи |#first], [последен филтър |filters#last].


odd(int $value): bool .[method]{data-version:2.10.2}
----------------------------------------------------
Проверява дали зададеното число е нечетно.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, int $length=null, bool $preserveKeys=false): string|array .[method]{data-version:2.10.2}
-------------------------------------------------------------------------------------------------------------------------------
Извлича фрагмент от масив или низ.

```latte
{=slice('hello', 1, 2)}           {* списъци 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* списъци ['b', 'c'] *}
```

Филтърът за парчета работи като функцията на PHP `array_slice` за масиви и `mb_substr` за низове, като се връща към `iconv_substr` в режим UTF-8.

Ако start е неотрицателно число, последователността ще започне от това начало в променлива. Ако началната стойност е отрицателна, последователността ще започне на това разстояние от края на променливата.

Ако е зададена дължина и тя е положителна, последователността ще съдържа до този брой елементи. Ако променливата е по-къса от дължината, ще бъдат представени само наличните елементи на променливата. Ако е зададена дължина и тя е отрицателна, последователността ще спре на толкова елемента от края на променливата. Ако не е зададена дължина, последователността ще съдържа всички елементи от отместването до края на променливата.

Филтърът по подразбиране пренарежда и нулира ключовете на масив от цели числа. Това поведение може да бъде променено чрез задаване на preserveKeys на true. Ключовете на низове винаги се запазват, независимо от този параметър.
