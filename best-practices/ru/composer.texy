Советы по использованию Composer
********************************

<div class=perex>

Composer — это инструмент для управления зависимостями в PHP. Он позволяет вам объявить библиотеки, от которых зависит ваш проект, и он будет устанавливать и обновлять их за вас. Мы узнаем:

- как установить Composer
- использовать его в новом или существующем проекте

</div>


Установка .[#toc-installation]
==============================

Composer — это исполняемый файл `.phar`, который вы загружаете и устанавливаете следующим образом.


Windows
-------

Используйте официальную программу установки [Composer-Setup.exe|https://getcomposer.org/Composer-Setup.exe].


Linux, macOS
------------

Всё, что вам нужно, это 4 команды, которые вы можете скопировать с [этой страницы |https://getcomposer.org/download/].

Более того, при копировании в папку, находящуюся в системном `PATH`, Composer становится глобально доступным:

```shell
$ mv ./composer.phar ~/bin/composer # или /usr/local/bin/composer
```


Использование в существующем проекте .[#toc-use-in-project]
===========================================================

Чтобы начать использовать Composer в своем проекте, всё, что вам нужно, это файл `composer.json`. Этот файл описывает зависимости вашего проекта и может содержать другие метаданные. Самый простой `composer.json` может выглядеть следующим образом:

```js
{
	"require": {
		"nette/database": "^3.0"
	}
}
```

Здесь мы говорим, что наше приложение (или библиотека) зависит от пакета `nette/database` (имя пакета состоит из имени поставщика и имени проекта) и ему нужна версия, соответствующая ограничению `^3.0`.

Итак, когда у нас есть файл `composer.json` в корне проекта и мы запускаем:

```shell
composer update
```

Composer загрузит исходные файлы Nette в каталог `vendor`. Он также создает файл `composer.lock`, который содержит информацию о том, какие именно версии библиотек установлены.

Composer генерирует файл `vendor/autoload.php`. Вы можете просто включить этот файл и начать использовать классы, которые предоставляют эти библиотеки, без лишней работы:

```php
require __DIR__ . '/vendor/autoload.php';

$db = new Nette\Database\Connection('sqlite::memory:');
```


Обновление до последней версии .[#toc-update-to-the-latest-version]
===================================================================

Для обновления всех используемых пакетов до последней версии в соответствии с ограничениями версий, определенными в файле `composer.json`, используйте команду `composer update`. Например, для зависимости `"nette/database": "^3.0"` будет установлена последняя версия 3.x.x, но не версия 4.

Чтобы обновить ограничения версии в файле `composer.json` на, например, "nette/database": "^4.1"`, для установки последней версии, используйте команду `composer require nette/database`.

Чтобы обновить все используемые пакеты Nette, необходимо перечислить их все в командной строке, например:

```shell
composer require nette/application nette/forms latte/latte tracy/tracy ...
```

Что непрактично. Поэтому используйте простой сценарий "Composer Frontline":https://gist.github.com/dg/734bebf55cf28ad6a5de1156d3099bff, который сделает это за вас:

```shell
php composer-frontline.php
```


Создание нового проекта .[#toc-creating-new-project]
====================================================

Новый проект Nette можно создать, выполнив простую команду:

```shell
composer create-project nette/web-project name-of-the-project
```

Вместо `name-of-the-project` укажите имя каталога для вашего проекта и выполните команду. Composer получит репозиторий `nette/web-project` с GitHub, который уже содержит файл `composer.json`, и сразу после этого установит сам фреймворк Nette. Осталось только [проверить права на запись |nette:troubleshooting#Setting-Directory-Permissions] для директорий `temp/` и `log/`, и вы готовы к работе.


Версия PHP .[#toc-php-version]
==============================

Composer всегда устанавливает те версии пакетов, которые совместимы с версией PHP, используемой вами в данный момент. Это, конечно, может быть не та версия PHP, которая установлена на вашем хосте. Поэтому полезно добавить информацию о версии PHP на хосте в файл `composer.json`, и тогда будут установлены только версии пакетов, совместимые с хостом:

```js
{
	"require": {
		...
	},
	"config": {
		"platform": {
			"php": "7.2"   # PHP версия сервера
		}
	}
}
```


Packagist.org — глобальный репозиторий .[#toc-packagist-org-global-repository]
==============================================================================

[Packagist |https://packagist.org] — это основное хранилище пакетов, в котором Composer пытается искать пакеты, если не сказано иначе. Вы также можете опубликовать здесь свои собственные пакеты.


Что если нам не нужен центральный репозиторий .[#toc-what-if-we-don-t-want-the-central-repository]
--------------------------------------------------------------------------------------------------

Если в нашей компании есть внутренние приложения или библиотеки, которые не могут быть размещены публично на Packagist, мы можем создать собственные репозитории для этих проектов.

Подробнее о репозиториях в [официальной документации |https://getcomposer.org/doc/05-repositories.md#Репозитории].


Автозагрузка .[#toc-autoloading]
================================

Ключевой особенностью Composer является то, что он обеспечивает автозагрузку для всех устанавливаемых классов, которую вы запускаете путем включения файла `vendor/autoload.php`.

Однако можно также использовать Composer для загрузки других классов вне папки `vendor`. Первый вариант — позволить Composer просканировать определенные папки и подпапки, найти все классы и включить их в автозагрузку. Для этого установите `autoload > classmap` в файле `composer.json`:

```js
{
	"autoload": {
		"classmap": [
			"src/",      #  включает папку src/ со всеми вложенными директориями
		]
	}
}
```

Впоследствии необходимо выполнять команду `composer dumpautoload` при каждом изменении и позволять таблицам автозагрузки регенерироваться. Это крайне неудобно, и гораздо лучше доверить эту задачу [RobotLoader|robot-loader:], который выполняет ту же самую работу автоматически в фоновом режиме и гораздо быстрее.

Второй вариант — следовать [PSR-4 |https://www.php-fig.org/psr/psr-4/]. Проще говоря, это система, в которой пространства имен и имена классов соответствуют структуре каталогов и именам файлов, т. е. `App\Router\RouterFactory` находится в файле `/path/to/App/Router/RouterFactory.php`. Пример конфигурации:

```js
{
	"autoload": {
		"psr-4": {
			"App\\": "app/"   # пространство имён App\ указывает на директорию app/
		}
	}
}
```

Как именно настроить это поведение, смотрите в [документации Composer |https://getcomposer.org/doc/04-schema.md#PSR-4].


Тестирование новых версий .[#toc-testing-new-versions]
======================================================

Вы хотите протестировать новую версию пакета. Как это сделать? Во-первых, добавьте эту пару опций в файл `composer.json`, которая позволит вам устанавливать версии пакетов для разработки, но сделает это только в том случае, если нет стабильной версии, отвечающей требованиям:

```js
{
	"minimum-stability": "dev",
	"prefer-stable": true,
}
```

Мы также рекомендуем удалить файл `composer.lock`, потому что иногда Composer непонятным образом отказывается устанавливаться, и это решит проблему.

Допустим, пакет - `nette/utils` и новая версия - 4.0. Вы устанавливаете его с помощью команды:

```shell
composer require nette/utils:4.0.x-dev
```

Или вы можете установить конкретную версию, например, 4.0.0-RC2:

```shell
composer require nette/utils:4.0.0-RC2
```

Если другой пакет зависит от библиотеки и заблокирован на более старую версию (например, `^3.1`), идеально будет обновить пакет для работы с новой версией.
Однако если вы просто хотите обойти ограничение и заставить Composer установить версию разработки и притвориться, что это старая версия (например, 3.1.6), вы можете использовать ключевое слово ``as``:

```shell
composer require nette/utils "4.0.x-dev as 3.1.6"
```


Команды вызова .[#toc-calling-commands]
=======================================

Вы можете вызывать свои собственные пользовательские команды и сценарии через Composer, как если бы это были родные команды Composer. Скриптам, расположенным в папке `vendor/bin`, не нужно указывать эту папку.

В качестве примера мы определяем сценарий в файле `composer.json`, который использует [Nette Tester |tester:] для запуска тестов:

```js
{
	"scripts": {
		"tester": "tester tests -s"
	}
}
```

Затем мы запускаем тесты с помощью `composer tester`. Мы можем вызвать команду, даже если находимся не в корневой папке проекта, а в подкаталоге.


Отправьте благодарность .[#toc-send-thanks]
===========================================

Мы покажем вам трюк, который порадует авторов открытых исходников. Вы можете легко присвоить звезду на GitHub библиотекам, которые использует ваш проект. Просто установите библиотеку `symfony/thanks`:

```shell
composer global require symfony/thanks
```

А потом наберите:

```shell
composer thanks
```

Попробуйте!


Конфигурация .[#toc-configuration]
==================================

Composer тесно интегрирован с инструментом контроля версий [Git |https://git-scm.com]. Если вы не используете Git, необходимо сообщить об этом Composer:

```shell
composer -g config preferred-install dist
```

{{sitename: Лучшие практики}}
