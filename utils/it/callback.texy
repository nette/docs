Lavorare con i callback
***********************

.[perex]
[api:Nette\Utils\Callback] è una classe statica con funzioni per lavorare con i [callback PHP |https://www.php.net/manual/en/language.types.callable.php].


Installazione:

```shell
composer require nette/utils
```

Tutti gli esempi presuppongono la creazione di un alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Verifica se la variabile `$callable` è un callback valido. Altrimenti, lancia `Nette\InvalidArgumentException`. Se `$syntax` è true, la funzione verifica solo che `$callable` abbia la struttura di un callback, ma non verifica se la classe o il metodo specificato esista effettivamente. Restituisce `$callable`.

```php
Callback::check('trim'); // non lancia eccezione
Callback::check(['NonExistentClass', 'method']); // lancia Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // non lancia eccezione
Callback::check(function () {}); // non lancia eccezione
Callback::check(null); // lancia Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Converte un callback PHP in forma testuale. La classe o il metodo non devono necessariamente esistere.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Restituisce la reflection per il metodo o la funzione nel callback PHP.

```php
$ref = Callback::toReflection('trim');
// $ref è ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref è ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Determina se il callback PHP è una funzione o un metodo statico.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Scompatta all'indietro una Closure creata utilizzando `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
