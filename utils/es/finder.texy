Buscador: Búsqueda en el sistema de archivos
********************************************

.[perex]
¿Necesita recorrer directorios en disco? ¿Buscas archivos en ellos? La clase [api:Nette\Utils\Finder] se lo pondrá lo más fácil posible.

Todos los ejemplos asumen que el siguiente alias de clase está definido:

```php
use Nette\Utils\Finder;
```


Instalación .[#toc-installation]
--------------------------------

Descargue e instale el paquete utilizando [Composer |best-practices:composer]:

```shell
composer require nette/finder
```


Búsqueda de archivos .[#toc-searching-for-files]
------------------------------------------------

¿Cómo encontrar todos los ficheros `*.txt` en el directorio `$dir` y en todos sus subdirectorios?

```php
foreach (Finder::findFiles('*.txt')->from($dir) as $key => $file) {
	// $key is a string containing absolute filename with path
	// $file is an instance of SplFileInfo
}
```

Los ficheros en la variable `$file` son instancias de la clase [SplFileInfo |php:SplFileInfo].

Si el directorio no existe, se lanza un `Nette\UnexpectedValueException`.

¿Y qué pasa con la búsqueda de ficheros en un directorio sin subdirectorios? En lugar de `from()` utilice `in()`:

```php
Finder::findFiles('*.txt')->in($dir)
```

Busca por varias máscaras e incluso por varios directorios a la vez:

```php
Finder::findFiles('*.txt', '*.php')
	->in($dir1, $dir2) // or from($dir1, $dir2)
```

Los parámetros también pueden ser matrices:

```php
Finder::findFiles(['*.txt', '*.php'])
	->in([$dir1, $dir2]) // or from([$dir1, $dir2])
```

La profundidad de búsqueda puede limitarse mediante el método `limitDepth()`.


Búsqueda de directorios .[#toc-searching-for-directories]
---------------------------------------------------------

Además de ficheros, es posible buscar directorios utilizando `Finder::findDirectories('subdir*')`.

O buscar archivos y directorios juntos utilizando `Finder::find('*.txt')`, la máscara en este caso sólo se aplica a los archivos. Cuando se busca recursivamente con `from()`, se devuelve primero el subdirectorio, seguido de los archivos que contiene, lo que puede invertirse con `childFirst()`.


Máscara .[#toc-mask]
--------------------

La máscara no tiene que describir sólo el nombre del fichero, sino también la ruta. Ejemplo: búsqueda de ficheros `*.jpg` situados en un subdirectorio que comienza por `imag`:

```php
Finder::findFiles('imag*/*.jpg')
```

Así, los comodines conocidos `*` and `?` representan cualquier carácter, excepto el separador de directorio `/`. The double `**` representa cualquier carácter, incluido el separador de directorio:

```php
Finder::findFiles('imag**/*.jpg')
// finds also image/subdir/file.jpg
```

Además puede utilizar en la máscara rangos `[...]` o rangos negativos `[!...]` conocidos de las expresiones regulares. Búsqueda de archivos `*.txt` que contengan un dígito en el nombre:

```php
Finder::findFiles('*[0-9]*.txt')
```


Excluyendo .[#toc-excluding]
----------------------------

Utilice `exclude()` para pasar máscaras con las que el fichero no debe coincidir. Buscar archivos `*.txt`, excepto los que contengan "`X`" en el nombre:

```php
Finder::findFiles('*.txt')
	->exclude('*X*')
```

Si se especifica `exclude()` **después** de `from()`, se aplica a los subdirectorios rastreados:

```php
Finder::findFiles('*.php')
	->from($dir)
	->exclude('temp', '.git')
```


Filtrado de .[#toc-filtering]
-----------------------------

También puede filtrar los resultados, por ejemplo, por tamaño de archivo. He aquí cómo encontrar ficheros de tamaño comprendido entre 100 y 200 bytes:

```php
Finder::findFiles('*.php')
	->size('>=', 100)
	->size('<=', 200)
	->from($dir)
```

Filtrar por fecha de la última modificación. Ejemplo: búsqueda de ficheros modificados en las dos últimas semanas:

```php
Finder::findFiles('*.php')
	->date('>', '- 2 weeks')
	->from($dir)
```

Ambas funciones comprenden los operadores `>`, `>=`, `<`, `<=`, `=`, `!=`.

Aquí recorremos archivos PHP con un número de líneas superior a 1000. Como filtro usamos un callback personalizado:

```php
$hasMoreThan100Lines = fn(Nette\Utils\FileInfo $file) => count(file($file->getPathname())) > 1000;

Finder::findFiles('*.php')
	->filter($hasMoreThan100Lines)
```

Práctico, ¿verdad? Seguro que encuentras un uso para Finder en tus aplicaciones.
