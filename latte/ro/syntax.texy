Sintaxă
*******

.[perex]
Sintaxa Latte a apărut din cerințele practice ale webdesignerilor. Am căutat cea mai prietenoasă sintaxă, cu care puteți scrie elegant chiar și construcții care altfel reprezintă o adevărată provocare.
În același timp, toate expresiile se scriu exact la fel ca în PHP, așa că nu trebuie să învățați un nou limbaj. Pur și simplu valorificați ceea ce știți deja.

Mai jos este un șablon minim care ilustrează câteva elemente de bază: tag-uri, n:atribute, comentarii și filtre.

```latte
{* acesta este un comentariu *}
<ul n:if=$items>                  {* n:if este un n:atribut *}
{foreach $items as $item}         {* tag reprezentând bucla foreach *}
	<li>{$item|capitalize}</li>   {* tag afișând variabila cu filtru *}
{/foreach}                        {* sfârșitul buclei *}
</ul>
```

Să aruncăm o privire mai atentă la aceste elemente importante și la modul în care vă pot ajuta să creați un șablon uimitor.


Tag-uri
=======

Șablonul conține tag-uri care controlează logica șablonului (de exemplu, bucle *foreach*) sau afișează expresii. Pentru ambele se folosește un singur delimitator `{ ... }`, astfel încât nu trebuie să vă gândiți ce delimitator să folosiți în ce situație, așa cum se întâmplă în alte sisteme.
Dacă după caracterul `{` urmează ghilimele sau spațiu, Latte nu îl consideră începutul unui tag, datorită căruia puteți folosi fără probleme în șabloane și construcții JavaScript, JSON sau reguli CSS.

Consultați [prezentarea generală a tuturor tag-urilor|tags]. În plus, puteți crea și [propriile tag-uri|custom tags].


Latte înțelege PHP
==================

În interiorul tag-urilor puteți folosi expresii PHP pe care le cunoașteți bine:

- variabile
- șiruri (inclusiv HEREDOC și NOWDOC), array-uri, numere etc.
- [operatori |https://www.php.net/manual/en/language.operators.php]
- apeluri de funcții și metode (care pot fi restricționate prin [sandbox|sandbox])
- [match |https://www.php.net/manual/en/control-structures.match.php]
- [funcții anonime |https://www.php.net/manual/en/functions.arrow.php]
- [callback-uri |https://www.php.net/manual/en/functions.first_class_callable_syntax.php]
- comentarii pe mai multe linii `/* ... */`
- etc…

În plus, Latte completează sintaxa PHP cu câteva [extensii plăcute |#Syntaktický cukr].


n:atribute
==========

Toate tag-urile pereche, de exemplu `{if} … {/if}`, care operează asupra unui singur element HTML, pot fi rescrise sub formă de n:atribute. Astfel ar putea fi scris, de exemplu, și `{foreach}` din exemplul introductiv:

```latte
<ul n:if=$items>
	<li n:foreach="$items as $item">{$item|capitalize}</li>
</ul>
```

Funcționalitatea se aplică apoi elementului HTML în care este plasat:

```latte
{var $items = ['I', '♥', 'Latte']}

<p n:foreach="$items as $item">{$item}</p>
```

afișează:

```latte
<p>I</p>
<p>♥</p>
<p>Latte</p>
```

Folosind prefixul `inner-`, putem modifica comportamentul astfel încât să se aplice doar părții interioare a elementului:

```latte
<div n:inner-foreach="$items as $item">
	<p>{$item}</p>
	<hr>
</div>
```

Se va afișa:

```latte
<div>
	<p>I</p>
	<hr>
	<p>♥</p>
	<hr>
	<p>Latte</p>
	<hr>
</div>
```

Sau folosind prefixul `tag-`, aplicăm funcționalitatea doar asupra tag-urilor HTML în sine:

```latte
<p><a href={$url} n:tag-if="$url">Title</a></p>
```

Ceea ce va afișa în funcție de variabila `$url`:

```latte
{* când $url este gol *}
<p>Title</p>

{* când $url conține 'https://nette.org' *}
<p><a href="https://nette.org">Title</a></p>
```

Cu toate acestea, n:atributele nu sunt doar o prescurtare pentru tag-urile pereche. Există și n:atribute pure, cum ar fi [n:href |application:creating-links#V šabloně presenteru] sau ajutorul extrem de util pentru coderi [n:class |tags#n:class].


Filtre
======

Consultați prezentarea generală a [filtrelor standard |filters].

Filtrele se scriu după bara verticală (poate fi precedată de un spațiu):

```latte
<h1>{$heading|upper}</h1>
```

Filtrele pot fi înlănțuite și apoi se aplică în ordine de la stânga la dreapta:

```latte
<h1>{$heading|lower|capitalize}</h1>
```

Parametrii se specifică după numele filtrului, separați prin două puncte sau virgule:

```latte
<h1>{$heading|truncate:20,''}</h1>
```

Filtrele pot fi aplicate și pe o expresie:

```latte
{var $name = ($title|upper) . ($subtitle|lower)}
```

Pe un bloc:

```latte
<h1>{block |lower}{$heading}{/block}</h1>
```

Sau direct pe valoare (în combinație cu tag-ul [`{=expr}`| https://latte.nette.org/cs/tags#Vypisování]):
```latte
<h1>{='  Hello world  '|trim}<h1>
```


Tag-uri HTML dinamice .{data-version:3.0.9}
===========================================

Latte suportă tag-uri HTML dinamice, care sunt utile când aveți nevoie de flexibilitate în numele tag-urilor:

```latte
<h{$level}>Heading</h{$level}>
```

Codul de mai sus poate genera, de exemplu, `<h1>Heading</h1>` sau `<h2>Heading</h2>` în funcție de valoarea variabilei `$level`. Tag-urile HTML dinamice în Latte trebuie să fie întotdeauna pereche. Alternativa lor este [n:tag |tags#n:tag].

Deoarece Latte este un sistem de șabloane sigur, verifică dacă numele tag-ului rezultat este valid și nu conține valori nedorite sau dăunătoare. De asemenea, asigură că numele tag-ului de închidere va fi întotdeauna același cu numele tag-ului de deschidere.


Comentarii
==========

Comentariile se scriu în acest mod și nu ajung în ieșire:

```latte
{* acesta este un comentariu în Latte *}
```

În interiorul tag-urilor funcționează comentariile PHP:

```latte
{include 'file.info', /* value: 123 */}
```


Zahăr sintactic
===============


Șiruri fără ghilimele
---------------------

Pentru șirurile simple, se pot omite ghilimelele:

```latte
ca în PHP:  {var $arr = ['hello', 'btn--default', '€']}

prescurtat: {var $arr = [hello, btn--default, €]}
```

Șirurile simple sunt cele formate exclusiv din litere, cifre, underscore-uri, cratime și puncte. Nu trebuie să înceapă cu o cifră și nu trebuie să înceapă sau să se termine cu o cratimă.
Nu trebuie să fie compuse doar din litere mari și underscore-uri, deoarece atunci sunt considerate constante (de ex. `PHP_VERSION`).
Și nu trebuie să intre în conflict cu cuvintele cheie: `and`, `array`, `clone`, `default`, `false`, `in`, `instanceof`, `new`, `null`, `or`, `return`, `true`, `xor`.


Constante
---------

Deoarece la șirurile simple se pot omite ghilimelele, recomandăm pentru diferențiere să scrieți constantele globale cu un slash la început:

```latte
{if \PROJECT_ID === 1} ... {/if}
```

Această scriere este complet validă în PHP însuși, slash-ul indică faptul că constanta este în namespace-ul global.


Operator ternar prescurtat
--------------------------

Dacă a treia valoare a operatorului ternar este goală, poate fi omisă:

```latte
ca în PHP:  {$stock ? 'Skladem' : ''}

prescurtat: {$stock ? 'Skladem'}
```


Scriere modernă a cheilor în array
----------------------------------

Cheile în array pot fi scrise similar cu parametrii numiți la apelarea funcțiilor:

```latte
ca în PHP:  {var $arr = ['one' => 'item 1', 'two' => 'item 2']}

modern:     {var $arr = [one: 'item 1', two: 'item 2']}
```


Filtre
------

Filtrele pot fi utilizate pentru orice expresie, este suficient să închideți întregul în paranteze:

```latte
{var $content = ($text|truncate: 30|upper)}
```


Operatorul `in`
---------------

Operatorul `in` poate înlocui funcția `in_array()`. Compararea este întotdeauna strictă:

```latte
{* echivalent cu in_array($item, $items, true) *}
{if $item in $items}
	...
{/if}
```


Fereastră istorică
------------------

Latte a venit de-a lungul istoriei sale cu o serie întreagă de zahăr sintactic, care după câțiva ani au apărut în PHP însuși. De exemplu, în Latte era posibil să scrieți array-uri ca `[1, 2, 3]` în loc de `array(1, 2, 3)` sau să folosiți operatorul nullsafe `$obj?->foo` cu mult înainte ca acest lucru să fie posibil în PHP însuși. Latte a introdus, de asemenea, operatorul pentru despachetarea array-ului `(expand) $arr`, care este echivalentul operatorului actual `...$arr` din PHP.

Operatorul undefined-safe `??->`, care este un echivalent al operatorului nullsafe `?->`, dar care nu generează eroare dacă variabila nu există, a apărut din motive istorice și astăzi recomandăm utilizarea operatorului PHP standard `?->`.


Limitări PHP în Latte
=====================

În Latte se pot scrie doar expresii PHP. Adică nu se pot folosi instrucțiuni terminate cu punct și virgulă. Nu se pot declara clase sau folosi [structuri de control |https://www.php.net/manual/en/language.control-structures.php], de ex. `if`, `foreach`, `switch`, `return`, `try`, `throw` și altele, în locul cărora Latte oferă [tag-urile|tags] sale.
De asemenea, nu se pot folosi [atribute |https://www.php.net/manual/en/language.attributes.php], [backticks |https://www.php.net/manual/en/language.operators.execution.php] sau unele [constante magice |https://www.php.net/manual/en/language.constants.magic.php].
Nu se pot folosi nici `unset`, `echo`, `include`, `require`, `exit`, `eval`, deoarece nu sunt funcții, ci construcții speciale ale limbajului PHP, și nu sunt deci expresii. Comentariile sunt suportate doar cele pe mai multe linii `/* ... */`.

Aceste limitări pot fi totuși ocolite activând extensia [RawPhpExtension |develop#RawPhpExtension], datorită căreia se poate folosi apoi în tag-ul `{php ...}` orice cod PHP pe responsabilitatea autorului șablonului.
