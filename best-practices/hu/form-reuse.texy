Formanyomtatványok újrafelhasználása több helyen
************************************************

.[perex]
Hogyan lehet ugyanazt az űrlapot több helyen újra felhasználni, és nem duplikálni a kódot? A Nette-ben ez nagyon könnyen megoldható, és többféle módszer közül választhat.


Form Factory .[#toc-form-factory]
=================================

Hozzunk létre egy olyan osztályt, amely képes űrlapot létrehozni. Az ilyen osztályt gyárnak nevezzük. Azon a helyen, ahol az űrlapot használni akarjuk (pl. a prezenterben), kérjük a [gyárat függőségként |dependency-injection:passing-dependencies].

A factory része az a kód, amely az űrlap sikeres elküldése után átadja az adatokat a további feldolgozáshoz. Általában a modell rétegnek. Azt is ellenőrzi, hogy minden rendben ment-e, és az esetleges hibákat [visszaadja |forms:validation#Processing-errors] az űrlapnak. A modellt a következő példában a `Facade` osztály képviseli:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* paraméterek */): Form
	{
		$form = new Form;

		// elemek hozzáadása az űrlaphoz

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// űrlap feldolgozása
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

A gyár természetesen lehet parametrikus, azaz kaphat olyan paramétereket, amelyek befolyásolják a létrehozandó űrlap megjelenését.

Most bemutatjuk a factory átadását a prezenternek. Először is írjuk be a konfigurációs fájlba:

```neon
services:
	- EditFormFactory
```

Majd pedig bekérjük a prezenterben. Ott is következik a következő lépés a beküldött űrlap feldolgozása, és ez az átirányítás a következő oldalra:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Mivel az átirányítást a bemutató kezelője kezeli, a komponens több helyen is használható, és mindegyik helyen máshová irányítható át.


Komponens űrlappal .[#toc-component-with-form]
==============================================

Egy másik lehetőség egy új [komponens |application:components] létrehozása, amely egy űrlapot tartalmaz. Ez lehetőséget ad arra, hogy például az űrlapot meghatározott módon rendereljük, mivel a komponens tartalmaz egy sablont.
Vagy használhatunk jeleket az AJAX-kommunikációhoz és az információk betöltéséhez az űrlapba, például az automatikus kitöltéshez stb.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// elemek hozzáadása az űrlaphoz

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// űrlap feldolgozása
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// eseményhívás
		$this->onSave($this, $values);
	}
}
```

Ezután létrehozzuk a gyárat, amely ezt a komponenst fogja előállítani. Csak [írjuk meg az interfészét |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

És adjuk hozzá a konfigurációs fájlhoz:

```neon
services:
	- EditControlFactory
```

És most már igényelhetjük a gyárat, és használhatjuk a prezenterben:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// vagy átirányítás a szerkesztés eredményére, pl.:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Legjobb gyakorlatok}}
