Компонування презентерів із трейтів
***********************************

.[perex]
Якщо нам потрібно реалізувати однаковий код у кількох презентерах (наприклад, перевірка, чи користувач увійшов у систему), пропонується розмістити код у спільному предку. Другим варіантом є створення одноцільових [трейтів|nette:introduction-to-object-oriented-programming#traity].

Перевага цього рішення полягає в тому, що кожен з презентерів може використовувати саме ті трейти, які йому дійсно потрібні, тоді як множинне успадкування в PHP неможливе.

Ці трейти можуть використовувати той факт, що при створенні презентера послідовно викликаються всі [inject-методи|inject-method-attribute#Metody inject]. Потрібно лише переконатися, що назва кожного inject-методу є унікальною.

Трейты можуть навішувати ініціалізаційний код на події [onStartup або onRender |application:presenters#Události].

Приклади:

```php
trait RequireLoggedUser
{
	public function injectRequireLoggedUser(): void
	{
		$this->onStartup[] = function () {
			if (!$this->getUser()->isLoggedIn()) {
				$this->redirect('Sign:in', $this->storeRequest());
			}
		};
	}
}

trait StandardTemplateFilters
{
	public function injectStandardTemplateFilters(TemplateBuilder $builder): void
	{
		$this->onRender[] = function () use ($builder) {
			$builder->setupTemplate($this->template);
		};
	}
}
```

Презентер потім просто використовує ці трейти:

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	use StandardTemplateFilters;
	use RequireLoggedUser;
}
```


{{sitename: Best Practices}}
