Работа с числа с плаваща запетая
********************************

.[perex]
`[api:Nette\Utils\Floats]` е статичен клас с полезни функции за сравняване на десетични числа.


Инсталация:

```shell
composer require nette/utils
```

Всички примери предполагат създаден псевдоним (alias):

```php
use Nette\Utils\Floats;
```


Мотивация
=========

Може би се чудите защо изобщо има клас за сравняване на числа с плаваща запетая? В крайна сметка мога да използвам операторите `<`, `>`, `===` и съм готов.
Това не е съвсем вярно. Какво мислите, че ще изведе този код?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Ако стартирате кода, някои от вас със сигурност ще бъдат изненадани, че програмата изведе `not same`.

При математически операции с десетични числа възникват грешки поради преобразуването между десетична и двоична система. Например `0.1 + 0.2` дава `0.300000000000000044…`. Затова при сравняване трябва да толерираме малка разлика след определен десетичен знак.

И точно това прави класът `Floats`. Следващото сравнение вече ще работи според очакванията:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

При опит за сравняване на `NAN` се хвърля изключение `\LogicException`.

.[tip]
Класът `Floats` толерира разлики, по-малки от `1e-10`. Ако трябва да работите с по-голяма точност, използвайте библиотеката BCMath.


Сравняване на числа с плаваща запетая
=====================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Връща `true`, ако `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Връща `true`, ако е изпълнено `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Връща `true`, ако е изпълнено `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Връща `true`, ако е изпълнено `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Връща `true`, ако е изпълнено `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Ако `$a` < `$b`, връща `-1`, ако са равни, връща `0`, а ако `$a` > `$b`, връща `1`.

Може да се използва например с функцията `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr е сега [-3.5, 1, 2, 5]
```


Помощни функции
===============


isZero(float $value): bool .[method]
------------------------------------

Връща `true`, ако стойността е равна на нула.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Връща `true`, ако стойността е цяло число.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
