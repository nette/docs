Latte Tags
**********

.[perex]
Überblick und Beschreibung aller Tags, die Ihnen standardmäßig im Latte-Templating-System zur Verfügung stehen.

.[table-latte-tags language-latte]
|## Ausgabe
| `{$var}`, `{...}` oder `{=...}`  | [gibt eine maskierte Variable oder einen Ausdruck aus |#Ausgabe]
| `{$var\|filter}`                 | [gibt unter Verwendung von Filtern aus |#Filter]
| `{l}` oder `{r}`                 | gibt das Zeichen `{` oder `}` aus

.[table-latte-tags language-latte]
|## Bedingungen
| `{if}` … `{elseif}` … `{else}` … `{/if}`    | [if-Bedingung |#if elseif else]
| `{ifset}` … `{elseifset}` … `{/ifset}`      | [ifset-Bedingung |#ifset elseifset]
| `{ifchanged}` … `{/ifchanged}`              | [Prüft auf Änderungen |#ifchanged]
| `{switch}` `{case}` `{default}` `{/switch}` | [switch-Bedingung |#switch case default]
| `n:else`                                    | [alternativer Inhalt für Bedingungen |#n:else]

.[table-latte-tags language-latte]
|## Schleifen
| `{foreach}` … `{/foreach}`     | [#foreach]
| `{for}` … `{/for}`             | [#for]
| `{while}` … `{/while}`         | [#while]
| `{continueIf $cond}`           | [mit der nächsten Iteration fortfahren |#continueIf skipIf breakIf]
| `{skipIf $cond}`               | [Iteration überspringen |#continueIf skipIf breakIf]
| `{breakIf $cond}`              | [Schleife unterbrechen |#continueIf skipIf breakIf]
| `{exitIf $cond}`               | [vorzeitige Beendigung |#exitIf]
| `{first}` … `{/first}`         | [ist es der erste Durchlauf? |#first last sep]
| `{last}` … `{/last}`           | [ist es der letzte Durchlauf? |#first last sep]
| `{sep}` … `{/sep}`             | [wird noch ein Durchlauf folgen? |#first last sep]
| `{iterateWhile}` … `{/iterateWhile}` | [strukturierter foreach |#iterateWhile]
| `$iterator`                    | [spezielle Variable innerhalb von foreach |#iterator]

.[table-latte-tags language-latte]
|## Einfügen weiterer Templates
| `{include 'file.latte'}`       | [lädt Template aus einer anderen Datei |#include]
| `{sandbox 'file.latte'}`       | [lädt Template im Sandbox-Modus |#sandbox]

.[table-latte-tags language-latte]
|## Blöcke, Layouts, Template-Vererbung
| `{block}`                      | [anonymer Block |#block]
| `{block blockname}`            | [definiert einen Block |template-inheritance#Blöcke]
| `{define blockname}`           | [definiert einen Block zur späteren Verwendung |template-inheritance#Definition]
| `{include blockname}`          | [Rendern eines Blocks |template-inheritance#Rendern von Blöcken]
| `{include blockname from 'file.latte'}` | [rendert einen Block aus einer Datei |template-inheritance#Rendern von Blöcken]
| `{import 'file.latte'}`        | [lädt Blöcke aus einem Template |template-inheritance#Horizontale Wiederverwendung]
| `{layout 'file.latte'}` / `{extends}` | [bestimmt die Datei mit dem Layout |template-inheritance#Layout-Vererbung]
| `{embed}` … `{/embed}`         | [lädt ein Template oder einen Block und ermöglicht das Überschreiben von Blöcken |template-inheritance#Einheiten-Vererbung]
| `{ifset blockname}` … `{/ifset}`   | [Bedingung, ob ein Block existiert |template-inheritance#Existenzprüfung von Blöcken]

.[table-latte-tags language-latte]
|## Ausnahmebehandlung
| `{try}` … `{else}` … `{/try}`  | [Abfangen von Ausnahmen |#try]
| `{rollback}`                   | [Verwerfen des try-Blocks |#rollback]

.[table-latte-tags language-latte]
|## Variablen
| `{var $foo = value}`           | [erstellt eine Variable |#var default]
| `{default $foo = value}`       | [erstellt eine Variable, falls sie nicht existiert |#var default]
| `{parameters}`                 | [deklariert Variablen, Typen und Standardwerte |#parameters]
| `{capture}` … `{/capture}`     | [fängt einen Block in einer Variablen ab |#capture]

.[table-latte-tags language-latte]
|## Typen
| `{varType}`                    | [deklariert den Typ einer Variablen |type-system#varType]
| `{varPrint}`                   | [schlägt Variablentypen vor |type-system#varPrint]
| `{templateType}`               | [deklariert Variablentypen gemäß einer Klasse |type-system#templateType]
| `{templatePrint}`              | [schlägt eine Klasse mit Variablentypen vor |type-system#templatePrint]

.[table-latte-tags language-latte]
|## Übersetzungen
| `{_...}`                       | [gibt eine Übersetzung aus |#Übersetzungen]
| `{translate}` … `{/translate}` | [übersetzt den Inhalt |#Übersetzungen]

.[table-latte-tags language-latte]
|## Sonstiges
| `{contentType}`                | [schaltet Escaping um und sendet HTTP-Header |#contentType]
| `{debugbreak}`                 | [platziert einen Breakpoint im Code |#debugbreak]
| `{do}`                         | [führt Code aus, gibt aber nichts aus |#do]
| `{dump}`                       | [dumpt Variablen in die Tracy Bar |#dump]
| `{php}`                        | [führt beliebigen PHP-Code aus |#php]
| `{spaceless}` … `{/spaceless}` | [entfernt überflüssige Leerzeichen |#spaceless]
| `{syntax}`                     | [Syntaxänderung zur Laufzeit |#syntax]
| `{trace}`                      | [zeigt den Stack Trace an |#trace]

.[table-latte-tags language-latte]
|## HTML-Coder-Helfer
| `n:class`                      | [dynamische Erstellung des HTML-Attributs class |#n:class]
| `n:attr`                       | [dynamische Erstellung beliebiger HTML-Attribute |#n:attr]
| `n:tag`                        | [dynamische Erstellung des Namens eines HTML-Elements |#n:tag]
| `n:ifcontent`                  | [lässt leeren HTML-Tag aus |#n:ifcontent]

.[table-latte-tags language-latte]
|## Nur im Nette Framework verfügbar
| `n:href`                       | [Link, der in HTML-Elementen `<a>` verwendet wird |application:creating-links#Im Presenter-Template]
| `{link}`                       | [gibt einen Link aus |application:creating-links#Im Presenter-Template]
| `{plink}`                      | [gibt einen Link zu einem Presenter aus |application:creating-links#Im Presenter-Template]
| `{control}`                    | [rendert eine Komponente |application:components#Rendern]
| `{snippet}` … `{/snippet}`     | [Snippet, der per AJAX gesendet werden kann |application:ajax#Snippets in Latte]
| `{snippetArea}`                | [Wrapper für Snippets |application:ajax#Snippet-Bereiche]
| `{cache}` … `{/cache}`         | [cached einen Teil des Templates |caching:#Caching in Latte]

.[table-latte-tags language-latte]
|## Nur mit Nette Forms verfügbar
| `{form}` … `{/form}`           | [rendert Formular-Tags |forms:rendering#form]
| `{label}` … `{/label}`         | [rendert das Label eines Formularelements |forms:rendering#label input]
| `{input}`                      | [rendert ein Formularelement |forms:rendering#label input]
| `{inputError}`                 | [gibt die Fehlermeldung eines Formularelements aus |forms:rendering#inputError]
| `n:name`                       | [belebt ein Formularelement |forms:rendering#n:name]
| `{formContainer}` … `{/formContainer}` | [Rendern eines Formularcontainers |forms:rendering#Spezialfälle]

.[table-latte-tags language-latte]
|## Nur mit Nette Assets verfügbar
| `{asset}` | [rendert ein Asset als HTML-Element oder URL |assets:#asset]
| `{preload}` | [generiert Preload-Hinweise zur Leistungsoptimierung |assets:#preload]
| `n:asset` | [fügt Asset-Attribute zu HTML-Elementen hinzu |assets:#n:asset]


Ausgabe
=======


`{$var}` `{...}` `{=...}`
-------------------------

In Latte wird das Tag `{=...}` verwendet, um einen beliebigen Ausdruck in die Ausgabe zu schreiben. Latte legt Wert auf Ihren Komfort, daher müssen Sie kein Gleichheitszeichen schreiben, wenn der Ausdruck mit einer Variablen oder einem Funktionsaufruf beginnt. Das bedeutet in der Praxis, dass Sie es fast nie schreiben müssen:

```latte
Name: {$name} {$surname}<br>
Alter: {date('Y') - $birth}<br>
```

Als Ausdruck können Sie alles schreiben, was Sie aus PHP kennen. Sie müssen keine neue Sprache lernen. Zum Beispiel:


```latte
{='0' . ($num ?? $num * 3) . ', ' . PHP_VERSION}
```

Bitte suchen Sie im vorherigen Beispiel keinen Sinn, aber wenn Sie einen finden, schreiben Sie uns :-)


Escaping der Ausgabe
--------------------

Was ist die wichtigste Aufgabe eines Templating-Systems? Sicherheitslücken zu verhindern. Und genau das tut Latte immer, wenn Sie etwas ausgeben. Es maskiert es automatisch:

```latte
<p>{='one < two'}</p>   {* gibt aus: '<p>one &lt; two</p>' *}
```

Um genau zu sein, verwendet Latte kontextsensitives Escaping, was eine so wichtige und einzigartige Sache ist, dass wir ihr [ein separates Kapitel |safety-first#Kontextsensitives Escaping] gewidmet haben.

Und was ist, wenn Sie HTML-kodierten Inhalt aus einer vertrauenswürdigen Quelle ausgeben? Dann können Sie das Escaping einfach deaktivieren:

```latte
{$trustedHtmlString|noescape}
```

.[warning]
Eine falsche Verwendung des `noescape`-Filters kann zu einer XSS-Schwachstelle führen! Verwenden Sie ihn niemals, wenn Sie sich nicht **absolut sicher** sind, was Sie tun und dass die ausgegebene Zeichenkette aus einer vertrauenswürdigen Quelle stammt.


Ausgabe in JavaScript
---------------------

Dank des kontextsensitiven Escapings ist es wunderbar einfach, Variablen innerhalb von JavaScript auszugeben, und Latte kümmert sich um das korrekte Escaping.

Die Variable muss keine Zeichenkette sein, jeder Datentyp wird unterstützt und als JSON kodiert:

```latte
{var $foo = ['hello', true, 1]}
<script>
	alert({$foo});
</script>
```

Erzeugt:

```latte
<script>
	alert(["hello", true, 1]);
</script>
```

Dies ist auch der Grund, warum um die Variable **keine Anführungszeichen geschrieben werden**: Latte fügt sie bei Zeichenketten selbst hinzu. Und wenn Sie eine Zeichenkettenvariable in eine andere Zeichenkette einfügen möchten, verbinden Sie sie einfach:

```latte
<script>
	alert('Hello ' + {$name} + '!');  // OK

	alert({="Hello $name!"});         // OK

	alert('Hello {$name} !');         // FEHLER!
</script>
```


Filter
------

Der ausgegebene Ausdruck kann durch einen [Filter |syntax#Filter] modifiziert werden. So konvertieren wir beispielsweise eine Zeichenkette in Großbuchstaben und kürzen sie auf maximal 30 Zeichen:

```latte
{$string|upper|truncate:30}
```

Sie können Filter auch auf Teilausdrücke anwenden:

```latte
{$left . ($middle|upper) . $right}
```


Bedingungen
===========


`{if}` `{elseif}` `{else}`
--------------------------

Bedingungen verhalten sich genauso wie ihre Gegenstücke in PHP. Sie können darin dieselben Ausdrücke verwenden, die Sie aus PHP kennen, Sie müssen keine neue Sprache lernen.

```latte
{if $product->inStock > Stock::Minimum}
	Auf Lager
{elseif $product->isOnWay()}
	Unterwegs
{else}
	Nicht verfügbar
{/if}
```

Wie jedes gepaarte Tag kann auch das Paar `{if} ... {/if}` als [n:Attribut |syntax#n:Attribute] geschrieben werden, zum Beispiel:

```latte
<p n:if="$count > 0">{$count} Stück auf Lager</p>
```

Wussten Sie, dass Sie n:Attributen das Präfix `tag-` hinzufügen können? Dann gilt die Bedingung nur für die Ausgabe der HTML-Tags, und der Inhalt dazwischen wird immer ausgegeben:

```latte
<a href="..." n:tag-if="$clickable">Hallo</a>

{* gibt 'Hallo' aus, wenn $clickable falsch ist *}
{* gibt '<a href="...">Hallo</a>' aus, wenn $clickable wahr ist *}
```

Genial.


`n:else` .{data-version:3.0.11}
-------------------------------

Wenn Sie die Bedingung `{if} ... {/if}` als [n:Attribut |syntax#n:Attribute] schreiben, haben Sie die Möglichkeit, einen alternativen Zweig mit `n:else` anzugeben:

```latte
<strong n:if="$count > 0">{$count} Stück auf Lager</strong>

<em n:else>nicht verfügbar</em>
```

Das Attribut `n:else` kann auch in Verbindung mit [`n:ifset` |#ifset elseifset], [`n:foreach` |#foreach], [`n:try` |#try], [#`n:ifcontent`] und [`n:ifchanged` |#ifchanged] verwendet werden.


`{/if $cond}`
-------------

Vielleicht überrascht es Sie, dass der Ausdruck in der Bedingung `{if}` auch im schließenden Tag angegeben werden kann. Dies ist nützlich in Situationen, in denen wir beim Öffnen der Bedingung ihren Wert noch nicht kennen. Nennen wir es eine aufgeschobene Entscheidung.

Zum Beispiel beginnen wir mit der Ausgabe einer Tabelle mit Datensätzen aus der Datenbank und stellen erst nach Abschluss der Ausgabe fest, dass keine Datensätze in der Datenbank vorhanden waren. Also fügen wir die Bedingung in das schließende Tag `{/if}` ein, und wenn keine Datensätze vorhanden sind, wird nichts davon ausgegeben:

```latte
{if}
	<h1>Auflistung der Zeilen aus der Datenbank</h1>

	<table>
	{foreach $resultSet as $row}
		...
	{/foreach}
	</table>
{/if isset($row)}
```

Praktisch, nicht wahr?

In der aufgeschobenen Bedingung kann auch `{else}` verwendet werden, jedoch nicht `{elseif}`.


`{ifset}` `{elseifset}`
-----------------------

.[note]
Siehe auch [`{ifset block}` |template-inheritance#Existenzprüfung von Blöcken]

Mit der Bedingung `{ifset $var}` prüfen wir, ob eine Variable (oder mehrere Variablen) existiert und einen nicht-*null*-Wert hat. Es ist eigentlich dasselbe wie `if (isset($var))` in PHP. Wie jedes gepaarte Tag kann es auch als [n:Attribut |syntax#n:Attribute] geschrieben werden, also zeigen wir es als Beispiel:

```latte
<meta name="robots" content={$robots} n:ifset="$robots">
```


`{ifchanged}`
-------------

`{ifchanged}` prüft, ob sich der Wert einer Variablen seit der letzten Iteration in einer Schleife (foreach, for oder while) geändert hat.

Wenn wir eine oder mehrere Variablen im Tag angeben, prüft es, ob sich eine von ihnen geändert hat, und gibt den Inhalt entsprechend aus. Zum Beispiel gibt das folgende Beispiel den ersten Buchstaben des Namens als Überschrift aus, wann immer er sich bei der Ausgabe von Namen ändert:

```latte
{foreach ($names|sort) as $name}
	{ifchanged $name[0]} <h2>{$name[0]}</h2> {/ifchanged}

	<p>{$name}</p>
{/foreach}
```

Wenn wir jedoch kein Argument angeben, wird der gerenderte Inhalt mit seinem vorherigen Zustand verglichen. Das bedeutet, dass wir im vorherigen Beispiel das Argument im Tag einfach weglassen können. Und natürlich können wir auch ein [n:Attribut |syntax#n:Attribute] verwenden:

```latte
{foreach ($names|sort) as $name}
	<h2 n:ifchanged>{$name[0]}</h2>

	<p>{$name}</p>
{/foreach}
```

Innerhalb von `{ifchanged}` kann auch eine `{else}`-Klausel angegeben werden.


`{switch}` `{case}` `{default}`
-------------------------------
Vergleicht einen Wert mit mehreren Optionen. Es ist analog zur bedingten Anweisung `switch`, die Sie aus PHP kennen. Latte verbessert sie jedoch:

- verwendet strikten Vergleich (`===`)
- benötigt kein `break`

Es ist also das genaue Äquivalent zur `match`-Struktur, die mit PHP 8.0 eingeführt wurde.

```latte
{switch $transport}
	{case train}
		Mit dem Zug
	{case plane}
		Mit dem Flugzeug
	{default}
		Anderweitig
{/switch}
```

Die `{case}`-Klausel kann mehrere durch Kommas getrennte Werte enthalten:

```latte
{switch $status}
{case $status::New}<b>neuer Eintrag</b>
{case $status::Sold, $status::Unknown}<i>nicht verfügbar</i>
{/switch}
```


Schleifen
=========

In Latte finden Sie alle Schleifen, die Sie aus PHP kennen: foreach, for und while.


`{foreach}`
-----------

Die Schleife wird genauso geschrieben wie in PHP:

```latte
{foreach $langs as $code => $lang}
	<span>{$lang}</span>
{/foreach}
```

Darüber hinaus hat es einige praktische Verbesserungen, über die wir jetzt sprechen werden.

Latte prüft beispielsweise, ob die erstellten Variablen versehentlich globale Variablen gleichen Namens überschreiben. Dies rettet Situationen, in denen Sie davon ausgehen, dass `$lang` die aktuelle Sprache der Seite ist, und nicht erkennen, dass `foreach $langs as $lang` diese Variable überschrieben hat.

Die foreach-Schleife kann auch sehr elegant und sparsam mit einem [n:Attribut |syntax#n:Attribute] geschrieben werden:

```latte
<ul>
	<li n:foreach="$items as $item">{$item->name}</li>
</ul>
```

Wussten Sie, dass Sie n:Attributen das Präfix `inner-` hinzufügen können? Dann wird nur der innere Teil des Elements in der Schleife wiederholt:

```latte
<div n:inner-foreach="$items as $item">
	<h4>{$item->title}</h4>
	<p>{$item->description}</p>
</div>
```

Es wird also etwa Folgendes ausgegeben:

```latte
<div>
	<h4>Foo</h4>
	<p>Lorem ipsum.</p>
	<h4>Bar</h4>
	<p>Sit dolor.</p>
</div>
```


`{else}` .{toc: foreach-else}
-----------------------------

Innerhalb der `foreach`-Schleife kann eine `{else}`-Klausel angegeben werden, deren Inhalt angezeigt wird, wenn die Schleife leer ist:

```latte
<ul>
	{foreach $people as $person}
		<li>{$person->name}</li>
	{else}
		<li><em>Leider befinden sich keine Benutzer in dieser Liste</em></li>
	{/foreach}
</ul>
```


`$iterator`
-----------

Innerhalb der `foreach`-Schleife erstellt Latte die Variable `$iterator`, mit der wir nützliche Informationen über die laufende Schleife abrufen können:

- `$iterator->first` - ist es der erste Durchlauf der Schleife?
- `$iterator->last` - ist es der letzte Durchlauf?
- `$iterator->counter` - der wievielte Durchlauf ist es, gezählt ab eins?
- `$iterator->counter0` - der wievielte Durchlauf ist es, gezählt ab null?
- `$iterator->odd` - ist es ein ungerader Durchlauf?
- `$iterator->even` - ist es ein gerader Durchlauf?
- `$iterator->parent` - der Iterator, der den aktuellen umschließt
- `$iterator->nextValue` - das nächste Element in der Schleife
- `$iterator->nextKey` - der Schlüssel des nächsten Elements in der Schleife


```latte
{foreach $rows as $row}
	{if $iterator->first}<table>{/if}

	<tr id="row-{$iterator->counter}">
		<td>{$row->name}</td>
		<td>{$row->email}</td>
	</tr>

	{if $iterator->last}</table>{/if}
{/foreach}
```

Latte ist schlau und `$iterator->last` funktioniert nicht nur bei Arrays, sondern auch, wenn die Schleife über einen allgemeinen Iterator läuft, bei dem die Anzahl der Elemente nicht im Voraus bekannt ist.


`{first}` `{last}` `{sep}`
--------------------------

Diese Tags können innerhalb der `{foreach}`-Schleife verwendet werden. Der Inhalt von `{first}` wird gerendert, wenn es der erste Durchlauf ist. Der Inhalt von `{last}` wird gerendert … erraten Sie es? Ja, wenn es der letzte Durchlauf ist. Es handelt sich eigentlich um Abkürzungen für `{if $iterator->first}` und `{if $iterator->last}`.

Die Tags können auch elegant als [n:Attribut |syntax#n:Attribute] verwendet werden:

```latte
{foreach $rows as $row}
	{first}<h1>Liste der Namen</h1>{/first}

	<p>{$row->name}</p>

	<hr n:last>
{/foreach}
```

Der Inhalt des Tags `{sep}` wird gerendert, wenn der Durchlauf nicht der letzte ist, er eignet sich also zum Rendern von Trennzeichen, beispielsweise Kommas zwischen den ausgegebenen Elementen:

```latte
{foreach $items as $item} {$item} {sep}, {/sep} {/foreach}
```

Das ist ziemlich praktisch, nicht wahr?


`{iterateWhile}`
----------------

Vereinfacht die Gruppierung linearer Daten während der Iteration in einer foreach-Schleife, indem die Iteration in einer verschachtelten Schleife durchgeführt wird, solange die Bedingung erfüllt ist. [Lesen Sie die detaillierte Anleitung|cookbook/grouping].

Es kann auch elegant `{first}` und `{last}` im obigen Beispiel ersetzen:

```latte
{foreach $rows as $row}
	<table>

	{iterateWhile}
	<tr id="row-{$iterator->counter}">
		<td>{$row->name}</td>
		<td>{$row->email}</td>
	</tr>
	{/iterateWhile true}

	</table>
{/foreach}
```

Siehe auch die Filter [batch |filters#batch] und [group |filters#group].


`{for}`
-------

Die Schleife wird genauso geschrieben wie in PHP:

```latte
{for $i = 0; $i < 10; $i++}
	<span>Element {$i}</span>
{/for}
```

Das Tag kann auch als [n:Attribut |syntax#n:Attribute] verwendet werden:

```latte
<h1 n:for="$i = 0; $i < 10; $i++">{$i}</h1>
```


`{while}`
---------

Die Schleife wird wiederum genauso geschrieben wie in PHP:

```latte
{while $row = $result->fetch()}
	<span>{$row->title}</span>
{/while}
```

Oder als [n:Attribut |syntax#n:Attribute]:

```latte
<span n:while="$row = $result->fetch()">
	{$row->title}
</span>
```

Es ist auch eine Variante mit einer Bedingung im schließenden Tag möglich, die der do-while-Schleife in PHP entspricht:

```latte
{while}
	<span>{$item->title}</span>
{/while $item = $item->getNext()}
```


`{continueIf}` `{skipIf}` `{breakIf}`
-------------------------------------

Zur Steuerung jeder Schleife können die Tags `{continueIf ?}` und `{breakIf ?}` verwendet werden, die zum nächsten Element wechseln bzw. die Schleife beenden, wenn die Bedingung erfüllt ist:

```latte
{foreach $rows as $row}
	{continueIf $row->date < $now}
	{breakIf $row->parent === null}
	...
{/foreach}
```


Das Tag `{skipIf}` ist `{continueIf}` sehr ähnlich, aber es erhöht nicht den Zähler `$iterator->counter`. Wenn wir ihn also ausgeben und gleichzeitig einige Elemente überspringen, entstehen keine Lücken in der Nummerierung. Und auch die Klause `{else}` wird gerendert, wenn wir alle Elemente überspringen.

```latte
<ul>
	{foreach $people as $person}
		{skipIf $person->age < 18}
		<li>{$iterator->counter}. {$person->name}</li>
	{else}
		<li><em>Leider befinden sich keine Erwachsenen in dieser Liste</em></li>
	{/foreach}
</ul>
```


`{exitIf}` .{data-version:3.0.5}
--------------------------------

Beendet das Rendern des Templates oder Blocks, wenn die Bedingung erfüllt ist (sog. "early exit").

```latte
{exitIf !$messages}

<h1>Nachrichten</h1>
<div n:foreach="$messages as $message">
   {$message}
</div>
```


Template einfügen
=================


`{include 'file.latte'}` .{toc: include}
----------------------------------------

.[note]
Siehe auch [`{include block}` |template-inheritance#Rendern von Blöcken]

Das Tag `{include}` lädt und rendert das angegebene Template. Wenn wir in der Sprache unserer Lieblingssprache PHP sprechen würden, wäre das so etwas wie:

```php
<?php include 'header.phtml'; ?>
```

Eingefügte Templates haben keinen Zugriff auf die Variablen des aktiven Kontexts, sie haben nur Zugriff auf globale Variablen.

Sie können Variablen auf diese Weise an das eingefügte Template übergeben:

```latte
{include 'template.latte', foo: 'bar', id: 123}
```

Der Template-Name kann ein beliebiger PHP-Ausdruck sein:

```latte
{include $someVar}
{include $ajax ? 'ajax.latte' : 'not-ajax.latte'}
```

Der eingefügte Inhalt kann mithilfe von [Filtern |syntax#Filter] modifiziert werden. Das folgende Beispiel entfernt sämtliches HTML und passt die Groß-/Kleinschreibung an:

```latte
<title>{include 'heading.latte' |stripHtml|capitalize}</title>
```

Standardmäßig spielt die [Template-Vererbung|template-inheritance] in diesem Fall keine Rolle. Obwohl wir Blöcke im inkludierten Template verwenden können, werden die entsprechenden Blöcke im Template, in das inkludiert wird, nicht ersetzt. Stellen Sie sich inkludierte Templates als separate, abgeschirmte Teile von Seiten oder Modulen vor. Dieses Verhalten kann mit dem Modifikator `with blocks` geändert werden:

```latte
{include 'template.latte' with blocks}
```

Die Beziehung zwischen dem im Tag angegebenen Dateinamen und der Datei auf der Festplatte ist Sache des [Loaders|loaders].


`{sandbox}`
-----------

Beim Einfügen eines vom Endbenutzer erstellten Templates sollten Sie den Sandbox-Modus in Betracht ziehen (weitere Informationen finden Sie in der [Sandbox-Dokumentation |sandbox]):

```latte
{sandbox 'untrusted.latte', level: 3, data: $menu}
```


`{block}`
=========

.[note]
Siehe auch [`{block name}` |template-inheritance#Blöcke]

Blöcke ohne Namen dienen als Möglichkeit, [Filter |syntax#Filter] auf einen Teil des Templates anzuwenden. Zum Beispiel kann so der Filter [strip |filters#spaceless] angewendet werden, der überflüssige Leerzeichen entfernt:

```latte
{block|strip}
<ul>
	<li>Hello World</li>
</ul>
{/block}
```


Ausnahmebehandlung
==================


`{try}`
-------

Dank dieses Tags ist es extrem einfach, robuste Templates zu erstellen.

Wenn beim Rendern des `{try}`-Blocks eine Ausnahme auftritt, wird der gesamte Block verworfen und das Rendern wird nach ihm fortgesetzt:

```latte
{try}
	<ul>
		{foreach $twitter->loadTweets() as $tweet}
  			<li>{$tweet->text}</li>
		{/foreach}
	</ul>
{/try}
```

Der Inhalt in der optionalen `{else}`-Klausel wird nur gerendert, wenn eine Ausnahme auftritt:

```latte
{try}
	<ul>
		{foreach $twitter->loadTweets() as $tweet}
  			<li>{$tweet->text}</li>
		{/foreach}
	</ul>
	{else}
	<p>Es tut uns leid, die Tweets konnten nicht geladen werden.</p>
{/try}
```

Das Tag kann auch als [n:Attribut |syntax#n:Attribute] verwendet werden:

```latte
<ul n:try>
	...
</ul>
```

Es ist auch möglich, einen eigenen [Ausnahme-Handler |develop#Exception Handler] zu definieren, zum Beispiel für die Protokollierung.


`{rollback}`
------------

Der `{try}`-Block kann auch manuell mit `{rollback}` gestoppt und übersprungen werden. Dadurch müssen Sie nicht alle Eingabedaten im Voraus überprüfen, sondern können erst während des Renderns entscheiden, dass Sie das Objekt überhaupt nicht rendern möchten:

```latte
{try}
<ul>
	{foreach $people as $person}
 		{skipIf $person->age < 18}
 		<li>{$person->name}</li>
	{else}
		{rollback}
	{/foreach}
</ul>
{/try}
```


Variablen
=========


`{var}` `{default}`
-------------------

Neue Variablen erstellen wir im Template mit dem Tag `{var}`:

```latte
{var $name = 'John Smith'}
{var $age = 27}

{* Mehrfache Deklaration *}
{var $name = 'John Smith', $age = 27}
```

Das Tag `{default}` funktioniert ähnlich, erstellt Variablen jedoch nur dann, wenn sie nicht existieren. Wenn die Variable bereits existiert und den Wert `null` enthält, wird sie nicht überschrieben:

```latte
{default $lang = 'de'}
```

Sie können auch [Variablentypen|type-system] angeben. Diese sind vorerst informativ und werden von Latte nicht überprüft.

```latte
{var string $name = $article->getTitle()}
{default int $id = 0}
```


`{parameters}`
--------------

So wie eine Funktion ihre Parameter deklariert, kann auch ein Template am Anfang seine Variablen deklarieren:

```latte
{parameters
	$a,
	?int $b,
	int|string $c = 10
}
```

Die Variablen `$a` und `$b` ohne angegebenen Standardwert haben automatisch den Standardwert `null`. Die deklarierten Typen sind vorerst informativ und werden von Latte nicht überprüft.

Andere als die deklarierten Variablen werden nicht an das Template übergeben. Dies unterscheidet sich vom Tag `{default}`.


`{capture}`
-----------

Fängt die Ausgabe in einer Variablen ab:

```latte
{capture $var}
<ul>
	<li>Hello World</li>
</ul>
{/capture}

<p>Abgefangen: {$var}</p>
```

Das Tag kann, wie jedes gepaarte Tag, auch als [n:Attribut |syntax#n:Attribute] geschrieben werden:

```latte
<ul n:capture="$var">
	<li>Hello World</li>
</ul>
```

Die HTML-Ausgabe wird in der Variablen `$var` als Objekt `Latte\Runtime\Html` gespeichert, um [unerwünschtes Escaping |develop#Deaktivieren des automatischen Escapings einer Variablen] bei der Ausgabe zu verhindern.


Sonstiges
=========


`{contentType}`
---------------

Mit diesem Tag geben Sie an, welchen Inhaltstyp das Template darstellt. Die Optionen sind:

- `html` (Standardtyp)
- `xml`
- `javascript`
- `css`
- `calendar` (iCal)
- `text`

Seine Verwendung ist wichtig, da es das [kontextsensitive Escaping |safety-first#Kontextsensitives Escaping] festlegt und nur so korrekt maskieren kann. Zum Beispiel schaltet `{contentType xml}` in den XML-Modus, `{contentType text}` deaktiviert das Escaping vollständig.

Wenn der Parameter ein vollwertiger MIME-Typ ist, wie z. B. `application/xml`, sendet er zusätzlich den HTTP-Header `Content-Type` an den Browser:

```latte
{contentType application/xml}
<?xml version="1.0"?>
<rss version="2.0">
	<channel>
		<title>RSS-Feed</title>
		<item>
			...
		</item>
	</channel>
</rss>
```


`{debugbreak}`
--------------

Markiert eine Stelle, an der die Programmausführung angehalten und der Debugger gestartet wird, damit der Programmierer die Laufzeitumgebung überprüfen und feststellen kann, ob das Programm wie erwartet funktioniert. Unterstützt [Xdebug |https://xdebug.org/]. Es kann eine Bedingung hinzugefügt werden, die bestimmt, wann das Programm angehalten werden soll.

```latte
{debugbreak}                {* hält das Programm an *}

{debugbreak $counter == 1}  {* hält das Programm an, wenn die Bedingung erfüllt ist *}
```


`{do}`
------

Führt PHP-Code aus und gibt nichts aus. Wie bei allen anderen Tags bedeutet PHP-Code ein einzelner Ausdruck, siehe [PHP-Beschränkungen |syntax#Einschränkungen von PHP in Latte].

```latte
{do $num++}
```


`{dump}`
--------

Gibt eine Variable oder den aktuellen Kontext aus.

```latte
{dump $name} {* Gibt die Variable $name aus *}

{dump}       {* Gibt alle aktuell definierten Variablen aus *}
```

.[caution]
Erfordert die Bibliothek [Tracy|tracy:].


`{php}`
-------

Ermöglicht die Ausführung von beliebigem PHP-Code. Das Tag muss mit der Erweiterung [RawPhpExtension |develop#RawPhpExtension] aktiviert werden.


`{spaceless}`
-------------

Entfernt überflüssigen Leerraum aus der Ausgabe. Funktioniert ähnlich wie der Filter [spaceless |filters#spaceless].

```latte
{spaceless}
	<ul>
		<li>Hello</li>
	</ul>
{/spaceless}
```

Erzeugt:

```latte
<ul> <li>Hello</li> </ul>
```

Das Tag kann auch als [n:Attribut |syntax#n:Attribute] geschrieben werden.


`{syntax}`
----------

Latte-Tags müssen nicht nur in einfache geschweifte Klammern eingeschlossen sein. Wir können auch einen anderen Trenner wählen, sogar zur Laufzeit. Dazu dient `{syntax …}`, wobei als Parameter angegeben werden kann:

- double: `{{...}}`
- off: deaktiviert die Verarbeitung von Latte-Tags vollständig

Mit n:Attributen kann Latte beispielsweise nur für einen JavaScript-Block deaktiviert werden:

```latte
<script n:syntax="off">
	var obj = {var: 123}; // dies ist kein Tag mehr
</script>
```

Latte kann sehr bequem innerhalb von JavaScript verwendet werden, man muss nur Konstruktionen wie in diesem Beispiel vermeiden, bei denen ein Buchstabe direkt auf `{` folgt, siehe [Latte innerhalb von JavaScript oder CSS |recipes#Latte innerhalb von JavaScript oder CSS].

Wenn Sie Latte mit `{syntax off}` (d. h. mit dem Tag, nicht mit dem n:Attribut) deaktivieren, werden alle Tags bis `{/syntax}` konsequent ignoriert.


{trace}
-------

Wirft eine `Latte\RuntimeException`, deren Stack Trace im Sinne von Templates aufgebaut ist. Das heißt, anstelle von Funktions- und Methodenaufrufen enthält er Aufrufe von Blöcken und das Einfügen von Templates. Wenn Sie ein Werkzeug zur übersichtlichen Anzeige geworfener Ausnahmen verwenden, wie z. B. [Tracy|tracy:], wird Ihnen der Call Stack einschließlich aller übergebenen Argumente übersichtlich angezeigt.


HTML-Coder-Helfer
=================


n:class
-------

Dank `n:class` ist es sehr einfach, das HTML-Attribut `class` genau nach Ihren Vorstellungen zu generieren.

Beispiel: Ich möchte, dass das aktive Element die Klasse `active` hat:

```latte
{foreach $items as $item}
	<a n:class="$item->isActive() ? active">...</a>
{/foreach}
```

Und außerdem soll das erste Element die Klassen `first` und `main` haben:

```latte
{foreach $items as $item}
	<a n:class="$item->isActive() ? active, $iterator->first ? 'first main'">...</a>
{/foreach}
```

Und alle Elemente sollen die Klasse `list-item` haben:

```latte
{foreach $items as $item}
	<a n:class="$item->isActive() ? active, $iterator->first ? 'first main', list-item">...</a>
{/foreach}
```

Erstaunlich einfach, nicht wahr?


n:attr
------

Das Attribut `n:attr` kann beliebige HTML-Attribute mit der gleichen Eleganz wie [#n:class] generieren.

```latte
{foreach $data as $item}
	<input type="checkbox" n:attr="value: $item->getValue(), checked: $item->isActive()">
{/foreach}
```

Abhängig von den zurückgegebenen Werten gibt es z. B. aus:

```latte
<input type="checkbox">

<input type="checkbox" value="Hello">

<input type="checkbox" value="Hello" checked>
```


n:tag
-----

Das Attribut `n:tag` kann den Namen eines HTML-Elements dynamisch ändern.

```latte
<h1 n:tag="$heading" class="main">{$title}</h1>
```

Wenn `$heading === null` ist, wird das Tag `<h1>` unverändert ausgegeben. Andernfalls wird der Name des Elements in den Wert der Variablen geändert, sodass für `$heading === 'h3'` Folgendes ausgegeben wird:

```latte
<h3 class="main">...</h3>
```

Da Latte ein sicheres Templating-System ist, prüft es, ob der neue Tag-Name gültig ist und keine unerwünschten oder schädlichen Werte enthält.


n:ifcontent
-----------

Verhindert, dass ein leeres HTML-Element ausgegeben wird, d. h. ein Element, das nichts außer Leerzeichen enthält.

```latte
<div>
	<div class="error" n:ifcontent>{$error}</div>
</div>
```

Gibt abhängig vom Wert der Variablen `$error` aus:

```latte
{* $error = '' *}
<div>
</div>

{* $error = 'Erforderlich' *}
<div>
	<div class="error">Erforderlich</div>
</div>
```


Übersetzungen
=============

Damit die Übersetzungs-Tags funktionieren, muss der [Übersetzer aktiviert werden |develop#TranslatorExtension]. Für die Übersetzung können Sie auch den Filter [`translate` |filters#translate] verwenden.


`{_...}`
--------

Übersetzt Werte in andere Sprachen.

```latte
<a href="basket">{_'Warenkorb'}</a>
<span>{_$item}</span>
```

Dem Übersetzer können auch weitere Parameter übergeben werden:

```latte
<a href="basket">{_'Warenkorb', domain: order}</a>
```


`{translate}`
-------------

Übersetzt Teile des Templates:

```latte
<h1>{translate}Bestellung{/translate}</h1>

{translate domain: order}Lorem ipsum ...{/translate}
```

Das Tag kann auch als [n:Attribut |syntax#n:Attribute] geschrieben werden, um den Inhalt des Elements zu übersetzen:

```latte
<h1 n:translate>Bestellung</h1>
```
