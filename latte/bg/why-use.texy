Защо да използвате шаблони?
***************************


Защо трябва да използвам система за шаблониране в PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
----------------------------------------------------------------------------------------------------------

Първо, нека да си припомним накратко историята на PHP, изпълнена с интересни обрати. Един от първите езици за програмиране, използвани за шаблониране на HTML, беше C. Използването му за тази цел обаче се оказа неподходящо. Расмус Лердорф създаде PHP, за да улесни динамичното генериране на HTML с помощта на C на гърба. Първоначално PHP е проектиран като език за шаблониране, но с течение на времето той придобива повече функции и се превръща в пълноценен език за програмиране.

Въпреки това той все още функционира като език за шаблониране. Файловете на PHP могат да се използват като HTML страници, в които можете да изведете променлива с помощта на `<?= $foo ?>`.

В началото на историята на PHP беше въведена системата за шаблониране Smarty, за да се отдели стриктно външният вид (HTML/CSS) от логиката на приложението. Нейните възможности бяха умишлено ограничени в сравнение с PHP, така че разработчикът не можеше например да прави заявки към база данни от шаблон. Тези системи обаче въвеждаха допълнителни зависимости, увеличаваха сложността на проекта и изискваха изучаването на нов език Smarty. Ползите от тях бяха противоречиви и обикновеният PHP продължи да се използва за шаблони.

С течение на времето системите за шаблони станаха по-полезни. Все повече програмисти и компании осъзнаха важността на сигурността. Те признаха съществуването на [уязвимости като XSS |safety-first]. Правилният начин за показване на дадена променлива не е `<?= $foo ?>` а `<?= htmlspecialchars($foo) ?>`, а пренебрегването на извеждането, т.е. използването на функцията `htmlspecialchars()`, може да доведе до сериозен пробив в сигурността. Системите за шаблони въведоха автоматично ескапиране, така че беше достатъчно да се напише само `{$foo}`, и променливата щеше да се покаже с включено ескапиране.

Системите за шаблони донесоха поддръжка на наследяване, sandboxing и други полезни функции, което направи писането на шаблони много по-лесно, отколкото в PHP. В определен момент ползите от системите за шаблониране значително надделяха над опасенията за въвеждане на нови зависимости.


Защо трябва да използвам системата за шаблониране Latte? .[#toc-why-should-i-use-the-latte-templating-system]
-------------------------------------------------------------------------------------------------------------

Основните причини са сигурността и синтаксисът.

Всички системи за шаблониране, като Twig, Blade или Smarty, през цялото си съществуване са въвели защита от XSS под формата на автоматично ескапиране. Latte обаче отиде по-далеч, осъзнавайки, че за да бъде автоматичното ескапиране наистина функционално, системата трябва да разбира HTML. Тя трябваше да разпознава не само поредица от символи, но и тагове, атрибути и т.н. Това е така, защото в HTML текста, в HTML таговете, в JavaScript и т.н. се изискват различни методи за ескапиране. Latte се научи да разбира HTML и да есквапира във всеки от тези контексти по [подходящ начин |safety-first#Context-Aware Escaping]. По този начин тя се превърна в първата и засега единствена система за шаблониране на PHP с контекстно ескапиране.

Latte представлява наистина сигурна система за шаблониране, докато другите системи са склонни да създават фалшиво чувство за сигурност.

Друго значително предимство на Latte е използването на синтаксиса на PHP, така че на програмиста/кодера не му се налага да учи нов език, а може да използва това, което вече познава добре.


Какви са основните разлики между системите за шаблониране като Latte, Twig и Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Разликите между системите за шаблониране като Latte, Twig и Blade се състоят главно в техния синтаксис, сигурност и интеграция с фреймуърки:

- Latte: използва синтаксиса на езика PHP, което я прави по-лесна за научаване и използване. Тя осигурява първокласна защита срещу XSS атаки.
- Twig: използва синтаксис, подобен на този на Python, който е доста различен от този на PHP. Той избягва без разграничаване на контекста. Добре интегриран е с рамката Symfony.
- Blade: използва комбинация от PHP и собствен синтаксис. Той не различава контекста. Тясно интегриран е с функциите и екосистемата на Laravel.


Заслужава ли си компаниите да използват система за шаблониране? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
-------------------------------------------------------------------------------------------------------------------------------

Първо, разходите, свързани с обучението, използването и общите ползи, варират значително в зависимост от системата. Системата за шаблониране Latte, благодарение на използването на синтаксиса на PHP, значително опростява обучението за програмисти, които вече са запознати с този език. Обикновено са необходими няколко часа, за да може програмистът да се запознае в достатъчна степен с Latte, което намалява разходите за обучение и ускорява усвояването на технологията и, което е най-важно, ефективността при ежедневната употреба.

Освен това Latte осигурява високо ниво на защита срещу XSS уязвимост благодарение на уникалната си технология за избягване на контекст. Тази защита е от решаващо значение за гарантиране на сигурността на уеб приложенията и за свеждане до минимум на риска от атаки, които могат да застрашат потребителите или данните на компанията. Сигурността на уеб приложенията е важна и за поддържането на добрата репутация на компанията. Проблемите със сигурността могат да доведат до загуба на доверие от страна на клиентите и да навредят на репутацията на компанията на пазара.

Използването на Latte също така намалява общите разходи за разработка и поддръжка, като улеснява и двете. Следователно използването на система за шаблониране определено си заслужава.


Как Latte влияе върху производителността на уеб приложенията и ресурсите на сървъра? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Въпреки че шаблоните Latte се обработват бързо, този аспект няма особено значение. Причината е, че парсирането на файловете се извършва само веднъж по време на първото показване. След това те се компилират в PHP код, съхраняват се на диска и се изпълняват при всяка следваща заявка, без да се налага повторно компилиране.

Това е начинът, по който се работи в производствена среда. По време на разработката шаблоните Latte се прекомпилират всеки път, когато съдържанието им се промени, така че разработчикът винаги вижда актуалната версия.
