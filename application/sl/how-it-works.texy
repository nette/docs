Kako delujejo aplikacije?
*************************
<div class=perex>


Trenutno berete osnovni dokument dokumentacije Nette. Spoznali boste vsa načela delovanja spletnih aplikacij. Lepo od A do Ž, od trenutka rojstva do zadnjega diha skripte PHP. Po branju boste vedeli:

- kako vse to deluje
- kaj so Bootstrap, Presenter in DI kontejner
- kako je videti struktura imenikov

</div>


Struktura imenika .[#toc-directory-structure]
=============================================

Odprite skeletni primer spletne aplikacije z imenom [WebProject |https://github.com/nette/web-project] in si oglejte datoteke, o katerih se piše.

Struktura imenikov je videti nekako takole:

/--pre
<b>web-project/</b>
├── <b>app/</b>                      ← directory with application
│   ├── <b>Presenters/</b>           ← presenter classes
│   │   ├── <b>HomePresenter.php</b> ← Home presenter class
│   │   └── <b>templates/</b>        ← templates directory
│   │       ├── <b>@layout.latte</b> ← template of shared layout
│   │       └── <b>Home/</b>         ← templates for Home presenter
│   │           └── <b>default.latte</b>  ← template for action `default`
│   ├── <b>Router/</b>               ← configuration of URL addresses
│   └── <b>Bootstrap.php</b>         ← booting class Bootstrap
├── <b>bin/</b>                      ← scripts for the command line
├── <b>config/</b>                   ← configuration files
│   ├── <b>common.neon</b>
│   └── <b>local.neon</b>
├── <b>log/</b>                      ← error logs
├── <b>temp/</b>                     ← temporary files, cache, …
├── <b>vendor/</b>                   ← libraries installed by Composer
│   ├── ...
│   └── <b>autoload.php</b>          ← autoloading of libs installed by Composer
├── <b>www/</b>                      ← public directory, document root of project
│   ├── <b>.htaccess</b>             ← mod_rewrite rules etc
│   └── <b>index.php</b>             ← initial file that launches the application
└── <b>.htaccess</b>                 ← prohibits access to all directories except www
\--

Lahko kakor koli spremenite imeniško strukturo, preimenujete ali premaknete mape, nato pa samo uredite poti do `log/` in `temp/` v datoteki `Bootstrap.php` ter pot do te datoteke v `composer.json` v razdelku `autoload`. Nič več, nobene zapletene ponovne konfiguracije, nobenih stalnih sprememb. Nette ima [pametno samodejno zaznavanje |bootstrap#development-vs-production-mode].

Za nekoliko večje aplikacije lahko mape s predvajalniki in predlogami razdelimo v podimenike (na disku) in v imenske prostore (v kodi), ki jih imenujemo [moduli |modules].

Imenik `www/` je javni imenik ali dokumentni koren projekta. Lahko ga preimenujete, ne da bi vam bilo treba na strani aplikacije nastaviti kar koli drugega. [Gostovanje |nette:troubleshooting#How to change or remove www directory from URL] morate le [konfigurirati |nette:troubleshooting#How to change or remove www directory from URL] tako, da bo korenina dokumentov prešla v ta imenik.

WebProject lahko prenesete tudi neposredno, vključno z Nette, z uporabo [Composerja |best-practices:composer]:

```shell
composer create-project nette/web-project
```

V operacijskem sistemu Linux ali macOS nastavite [dovoljenja za pisanje za |nette:troubleshooting#Setting directory permissions] imenike `log/` in `temp/`.

Aplikacija WebProject je pripravljena za zagon, ničesar več ni treba nastavljati, ogledate pa si jo lahko neposredno v brskalniku z dostopom do mape `www/`.


Zahteva HTTP .[#toc-http-request]
=================================

Vse se začne, ko uporabnik odpre stran v brskalniku in brskalnik z zahtevo HTTP zaklepa strežnik. Zahteva gre v datoteko PHP, ki se nahaja v javnem imeniku `www/`, ki je `index.php`. Predpostavimo, da je to zahteva na naslov `https://example.com/product/123` in se bo izvršil.

Njegova naloga je:

1) inicializacija okolja
2) pridobiti tovarno
3) zagnati aplikacijo Nette, ki obravnava zahtevo

Katere vrste je tovarna? Ne proizvajamo traktorjev, temveč spletne strani! Počakajte, takoj vam bo razloženo.

Z "inicializacijo okolja" mislimo na primer na to, da se aktivira [Tracy, |tracy:] ki je izjemno orodje za beleženje ali vizualizacijo napak. Beleži napake v produkcijskem strežniku in jih prikazuje neposredno v razvojnem strežniku. Zato je treba pri inicializaciji odločiti tudi, ali spletno mesto deluje v produkcijskem ali razvojnem načinu. Za to Nette uporablja samodejno zaznavanje: če zaženete spletno mesto na lokalnem gostitelju, se zažene v razvijalskem načinu. Ničesar vam ni treba konfigurirati in aplikacija je pripravljena tako za razvojno kot produkcijsko namestitev. Ti koraki so izvedeni in podrobno opisani v poglavju o [razredu Bootstrap |bootstrap].

Tretja točka (da, drugo smo preskočili, vendar se bomo k njej vrnili) je zagon aplikacije. Obravnavo zahtevkov HTTP v Nette izvaja razred `Nette\Application\Application` (v nadaljevanju `Application`), zato ko rečemo "zagnati aplikacijo", imamo v mislih klic metode z imenom `run()` na objektu tega razreda.

Nette je mentor, ki vas vodi pri pisanju čistih aplikacij po preverjenih metodologijah. Najbolj preizkušena se imenuje **vbrizgavanje odvisnosti**, skrajšano DI. Trenutno vas ne želimo obremenjevati z razlago DI, saj je za to namenjeno [posebno poglavje |dependency-injection:introduction], pomembno pa je, da bodo ključni objekti običajno ustvarjeni s tovarno za objekte, imenovano **kontejner DI** (skrajšano DIC). Da, to je tista tovarna, ki smo jo omenili pred kratkim. Ta nam ustvari tudi objekt `Application`, zato najprej potrebujemo vsebnik. Dobimo ga z uporabo razreda `Configurator` in mu pustimo, da izdela objekt `Application`, pokličemo metodo `run()` in s tem zaženemo aplikacijo Nette. Natanko to se zgodi v datoteki [index.php |bootstrap#index.php].


Aplikacija Nette .[#toc-nette-application]
==========================================

Razred Application ima eno samo nalogo: odgovoriti na zahtevo HTTP.

Aplikacije, napisane v okolju Nette, so razdeljene na številne tako imenovane predstavnike (v drugih ogrodjih lahko naletite na izraz controller, ki je enak), ki so razredi, ki predstavljajo določeno spletno stran: npr. domača stran; izdelek v e-trgovini; prijavni obrazec; vir zemljevida spletnega mesta itd. Aplikacija ima lahko od enega do več tisoč predstavnikov.

Aplikacija se začne tako, da zahteva od tako imenovanega usmerjevalnika, da se odloči, kateremu od predstavnikov bo posredoval trenutno zahtevo v obdelavo. Usmerjevalnik se odloči, čigava je to odgovornost. Pregleda vhodni naslov URL `https://example.com/product/123`, ki želi `show` izdelek z `id: 123` kot dejanjem. Dobra navada je, da se pari predstavnik + akcija, ločeni z dvopičjem, zapišejo kot `Product:show`.

Usmerjevalnik je torej pretvoril naslov URL v par `Presenter:action` + parametri, v našem primeru `Product:show` + `id: 123`. Kako je videti usmerjevalnik, si lahko ogledate v datoteki `app/Router/RouterFactory.php`, podrobno pa ga bomo opisali v poglavju [Usmerjanje |Routing].

Pojdimo naprej. Aplikacija že pozna ime predavatelja in lahko nadaljuje. Z ustvarjanjem predmeta `ProductPresenter`, ki je koda predstavnika `Product`. Natančneje, za ustvarjanje predstavnika zaprosi vsebnik DI, saj je izdelovanje objektov njegova naloga.

Predstavnik je lahko videti takole:

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private ProductRepository $repository,
	) {
	}

	public function renderShow(int $id): void
	{
		// pridobimo podatke iz modela in jih posredujemo predlogi
		$this->template->product = $this->repository->getProduct($id);
	}
}
```

Zahtevo obravnava predstavnik. In naloga je jasna: izvedite dejanje `show` s `id: 123`. Kar v jeziku predstavnikov pomeni, da se pokliče metoda `renderShow()` in v parametru `$id` dobi `123`.

Predstavnik lahko obravnava več dejanj, tj. ima več metod `render<Action>()`. Vendar priporočamo, da predstavnike oblikujete z eno ali čim manj akcijami.

Tako je bila klicana metoda `renderShow(123)`, katere koda je izmišljen primer, vendar lahko na njej vidite, kako se podatki posredujejo predlogi, tj. z zapisom v `$this->template`.

Nato predstavnik vrne odgovor. To je lahko stran HTML, slika, dokument XML, pošiljanje datoteke z diska, JSON ali preusmeritev na drugo stran. Pomembno je, da če izrecno ne navedemo, kako odgovoriti (kar je primer `ProductPresenter`), bo odgovor prikaz predloge s stranjo HTML. Zakaj? No, ker v 99 % primerov želimo izrisati predlogo, zato predstavnik to vedenje sprejme kot privzeto in nam želi olajšati delo. To je Nettejeva poanta.

Ni nam treba niti navesti, katero predlogo želimo narisati, on pot do nje izpelje po preprosti logiki. V primeru predstavnika `Product` in akcije `show`, poskuša preveriti, ali obstaja ena od teh datotek s predlogami glede na imenik, v katerem se nahaja razred `ProductPresenter`:

- `templates/Product/show.latte`
- `templates/Product.show.latte`

Prav tako poskuša poiskati postavitev v datoteki `@layout.latte` in nato upodobi predlogo. Zdaj je naloga predstavnika in celotne aplikacije končana. Če predloga ne obstaja, se vrne stran z napako 404. Več o predstavitvah si lahko preberete na strani [Predstavitve |Presenters].

[* request-flow.svg *]

Da bi se prepričali, poskusite celoten postopek ponoviti z nekoliko drugačnim naslovom URL:

1) naslov URL bo `https://example.com`
2) zaženemo aplikacijo, ustvarimo vsebnik in zaženemo `Application::run()`
3) usmerjevalnik dekodira naslov URL kot par `Home:default`
4) ustvari se objekt `HomePresenter`
5) kličemo metodo `renderDefault()` (če obstaja)
6) prikaže se predloga `templates/Home/default.latte` z razporeditvijo `templates/@layout.latte`


Morda ste zdaj naleteli na veliko novih konceptov, vendar verjamemo, da so smiselni. Ustvarjanje aplikacij v programu Nette je zelo enostavno.


Predloge .[#toc-templates]
==========================

Pri predlogah Nette uporablja sistem predlog [Latte |latte:]. Zato se datoteke s predlogami končajo s `.latte`. Latte se uporablja, ker je najbolj varen sistem predlog za PHP in hkrati najbolj intuitiven sistem. Ni se vam treba naučiti veliko novega, poznati morate le PHP in nekaj oznak Latte. Vse boste našli v [dokumentaciji |latte:].

V predlogi [ustvarimo povezave do |creating-links] drugih predstavnikov in akcij, kot sledi:

```latte
<a n:href="Product:show $productId">product detail</a>
```

Preprosto zapišite znani par `Presenter:action` namesto pravega URL in vključite vse parametre. Trik je `n:href`, ki pove, da bo ta atribut obdelal program Nette. In ustvaril bo:

```latte
<a href="/product/456">product detail</a>
```

Za generiranje naslova URL je odgovoren prej omenjeni usmerjevalnik. Pravzaprav so usmerjevalniki v Nette edinstveni, saj lahko izvajajo ne le pretvorbe iz naslova URL v par predstavnik:dejanje, temveč tudi obratno, generirajo naslov URL iz imena predstavnika + dejanja + parametrov.
Zahvaljujoč temu lahko v Nette v celoti spremenite obliko URL v celotni dokončani aplikaciji, ne da bi spremenili en sam znak v predlogi ali predstavniku, samo s spremembo usmerjevalnika.
Zahvaljujoč temu pa deluje tudi tako imenovana kanonizacija, ki je še ena edinstvena lastnost sistema Nette, ki izboljša SEO (optimizacijo iskanja v internetu), saj samodejno preprečuje obstoj podvojene vsebine na različnih URL-jih.
Številnim programerjem se to zdi neverjetno.


Interaktivne komponente .[#toc-interactive-components]
======================================================

O predstavitvah vam moramo povedati še nekaj: imajo vgrajen sistem komponent. Starejši med vami se morda spomnite nečesa podobnega iz Delphija ali ASP.NET Web Forms. React ali Vue.js sta zgrajena na nečem zelo podobnem. V svetu ogrodij PHP je to povsem edinstvena lastnost.

Komponente so ločene enote za večkratno uporabo, ki jih namestimo v strani (tj. predstavnike). To so lahko [obrazci |forms:in-presenter], [podatkovne mreže |https://componette.org/contributte/datagrid/], meniji, ankete, pravzaprav vse, kar je smiselno uporabiti večkrat. Ustvarimo lahko lastne komponente ali uporabimo katero od [številnih |https://componette.org] odprtokodnih komponent.

Komponente bistveno spremenijo pristop k razvoju aplikacij. Odprle bodo nove možnosti za sestavljanje strani iz vnaprej določenih enot. In imajo nekaj skupnega s [Hollywoodom |components#Hollywood style].


Kontejner DI in konfiguracija .[#toc-di-container-and-configuration]
====================================================================

Kontejner DI (tovarna predmetov) je srce celotne aplikacije.

Ne skrbite, to ni magična črna škatla, kot se morda zdi iz prejšnjih besed. Pravzaprav gre za en precej dolgočasen razred PHP, ki ga ustvari Nette in je shranjen v imeniku predpomnilnika. Ima veliko metod, poimenovanih kot `createServiceAbcd()`, in vsaka od njih ustvari in vrne objekt. Da, obstaja tudi metoda `createServiceApplication()`, ki ustvari `Nette\Application\Application`, ki smo jo potrebovali v datoteki `index.php` za zagon aplikacije. Obstajajo pa tudi metode za izdelavo posameznih predstavnikov. In tako naprej.

Predmeti, ki jih ustvarja vsebnik DI, se iz nekega razloga imenujejo storitve.

Posebnost tega razreda je, da ga ne programirate vi, temveč ogrodje. Pravzaprav ustvari kodo PHP in jo shrani na disk. Vi samo podate navodila o tem, katere predmete naj bi vsebnik znal ustvariti in kako natančno. Ta navodila so zapisana v [konfiguracijskih datotekah |bootstrap#DI Container Configuration] v [formatu NEON |neon:format] in imajo zato končnico `.neon`.

Konfiguracijske datoteke se uporabljajo izključno za dajanje navodil vsebniku DI. Tako bo na primer, če v razdelku [seje |http:configuration#Session] navedem možnost `expiration: 14 days`, vsebnik DI pri ustvarjanju objekta `Nette\Http\Session`, ki predstavlja sejo, poklical njegovo metodo `setExpiration('14 days')`, s čimer bo konfiguracija postala resničnost.

Za vas je pripravljeno celotno poglavje, v katerem je opisano, kaj je mogoče [konfigurirati |nette:configuring] in kako [opredeliti lastne storitve |dependency-injection:services].

Ko se boste lotili ustvarjanja storitev, boste naleteli na besedo [samodejno povezovanje |dependency-injection:autowiring]. To je pripomoček, ki vam bo neverjetno olajšal življenje. Z njim lahko samodejno posredujete predmete, kjer jih potrebujete (na primer v konstruktorjih vaših razredov), ne da bi vam bilo treba kar koli storiti. Ugotovili boste, da je zabojnik DI v Netteu majhen čudež.


Kaj naprej? .[#toc-what-next]
=============================

Pregledali smo osnovna načela aplikacij v programu Nette. Zaenkrat zelo površno, vendar se boste kmalu poglobili v globino in sčasoma ustvarili čudovite spletne aplikacije. Kje nadaljevati? Ste že poskusili z učbenikom [Ustvarite svojo prvo aplikacijo |quickstart:]?

Poleg zgoraj navedenega ima Nette še cel arzenal [uporabnih razredov |utils:], [sloj podatkovnih zbirk |database:] itd. Poskusite namenoma samo klikniti po dokumentaciji. Ali pa obiščite [blog |https://blog.nette.org]. Odkrili boste veliko zanimivih stvari.

Naj vam ogrodje prinese veliko veselja 💙
