Функції Latte
*************

.[perex]
У шаблонах, крім звичайних функцій PHP, ми можемо використовувати також ці додаткові функції.

.[table-latte-filters]
| `clamp`      | [обмежує значення в заданому діапазоні |#clamp]
| `divisibleBy`| [перевіряє, чи ділиться змінна на число |#divisibleBy]
| `even`       | [перевіряє, чи є дане число парним |#even]
| `first`      | [повертає перший елемент масиву або символ рядка |#first]
| `group`      | [групує дані за різними критеріями |#group]
| `hasBlock`   | [перевіряє існування блоку |#hasBlock]
| `last`       | [повертає останній елемент масиву або символ рядка |#last]
| `odd`        | [перевіряє, чи є дане число непарним |#odd]
| `slice`      | [витягує частину масиву або рядка |#slice]


Використання
============

Функції використовуються так само, як звичайні функції PHP, і їх можна використовувати у всіх виразах:

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

[Власні функції |custom-functions] можна зареєструвати таким чином:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

У шаблоні потім викликається так:

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Функції
=======


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------
Обмежує значення в заданому інклюзивному діапазоні min та max.

```latte
{=clamp($level, 0, 255)}
```

Див. також [фільтр clamp |filters#clamp].


divisibleBy(int $value, int $by): bool .[method]
------------------------------------------------
Перевіряє, чи ділиться змінна на число.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]
--------------------------------
Перевіряє, чи є дане число парним.

```latte
{if even($num)} ... {/if}
```


first(string|iterable $value): mixed .[method]
----------------------------------------------
Повертає перший елемент масиву або символ рядка:

```latte
{=first([1, 2, 3, 4])}    {* виведе 1 *}
{=first('abcd')}          {* виведе 'a' *}
```

Див. також [#last], [фільтр first |filters#first].


group(iterable $data, string|int|\Closure $by): array .[method]{data-version:3.0.16}
------------------------------------------------------------------------------------
Функція групує дані за різними критеріями.

У цьому прикладі рядки в таблиці групуються за стовпцем `categoryId`. Виходом є масив масивів, де ключем є значення у стовпці `categoryId`. [Прочитайте детальний посібник |cookbook/grouping].

```latte
{foreach group($items, categoryId) as $categoryId => $categoryItems}
    <ul>
        {foreach $categoryItems as $item}
            <li>{$item->name}</li>
        {/foreach}
    </ul>
{/foreach}
```

Див. також фільтр [group|filters#group].


hasBlock(string $name): bool .[method]{data-version:3.0.10}
-----------------------------------------------------------
Перевіряє, чи існує блок із зазначеною назвою:

```latte
{if hasBlock(header)} ... {/if}
```

Див. також [перевірка існування блоків |template-inheritance#Kontrola existence bloků].


last(string|array $value): mixed .[method]
------------------------------------------
Повертає останній елемент масиву або символ рядка:

```latte
{=last([1, 2, 3, 4])}    {* виведе 4 *}
{=last('abcd')}          {* виведе 'd' *}
```

Див. також [#first], [фільтр last |filters#last].


odd(int $value): bool .[method]
-------------------------------
Перевіряє, чи є дане число непарним.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, ?int $length=null, bool $preserveKeys=false): string|array .[method]
-----------------------------------------------------------------------------------------------------------
Витягує частину масиву або рядка.

```latte
{=slice('hello', 1, 2)}           {* виведе 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* виведе ['b', 'c'] *}
```

Фільтр працює як функція PHP `array_slice` для масивів або `mb_substr` для рядків з fallback на функцію `iconv_substr` у режимі UTF‑8.

Якщо start додатний, послідовність почнеться зі зміщенням на цю кількість від початку масиву/рядка. Якщо від'ємний, послідовність почнеться зі зміщенням на стільки від кінця.

Якщо вказаний параметр length і він додатний, послідовність міститиме стільки елементів. Якщо до цієї функції передано від'ємний параметр length, послідовність міститиме всі елементи вихідного масиву, починаючи з позиції start і закінчуючи на позиції, меншій на length елементів від кінця масиву. Якщо цей параметр не вказано, послідовність міститиме всі елементи вихідного масиву, починаючи з позиції start.

За замовчуванням фільтр змінює порядок і скидає цілочисельні ключі масиву. Цю поведінку можна змінити, встановивши preserveKeys на true. Рядкові ключі завжди зберігаються, незалежно від цього параметра.
