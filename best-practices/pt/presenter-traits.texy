Composição dos apresentadores a partir de traços
************************************************

.[perex]
Se precisarmos implementar o mesmo código em vários apresentadores (por exemplo, verificação de que o usuário está logado), é tentador colocar o código em um ancestral comum. A segunda opção é criar características de uso único.

A vantagem desta solução é que cada apresentador pode usar apenas os traços de que realmente precisa, enquanto a herança múltipla não é possível em PHP.

Estas características podem aproveitar o fato de que todos os [métodos de injeção |inject-method-attribute#inject methods] são chamados sequencialmente quando o apresentador é criado. Basta ter certeza de que o nome de cada método de injeção é único.

As características podem pendurar o código de inicialização em eventos [onStartup ou onRender |application:presenters#Events].

Exemplos:

```php
trait RequireLoggedUser
{
	public function injectRequireLoggedUser(): void
	{
		$this->onStartup[] = function () {
			if (!$this->getUser()->isLoggedIn()) {
				$this->redirect('Sign:in', $this->storeRequest());
			}
		};
	}
}

trait StandardTemplateFilters
{
	public function injectStandardTemplateFilters(TemplateBuilder $builder): void
	{
		$this->onRender[] = function () use ($builder) {
			$builder->setupTemplate($this->template);
		};
	}
}
```

O apresentador então simplesmente usa estes traços:

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	use StandardTemplateFilters;
	use RequireLoggedUser;
}
```


{{sitename: Melhores Práticas}}
