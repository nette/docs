URL Parser e Builder
********************

.[perex]
As classes [Url |#Url], [UrlImmutable |#UrlImmutable] e [UrlScript |#UrlScript] facilitam o gerenciamento, a análise e a manipulação de URLs.

→ [Instalação e requisitos |@home#Installation]


Url
===

A classe [api:Nette\Http\Url] facilita o trabalho com a URL e seus componentes individuais, que estão delineados neste diagrama:

/--pre
 scheme  user  password  host   port    path        query  fragment
   |      |      |        |      |       |            |       |
 /--\   /--\ /------\ /-------\ /--\/----------\ /--------\ /----\
 <b>http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer</b>
 \______\__________________________/
     |               |
  hostUrl        authority
\--

A geração de URL é intuitiva:

```php
use Nette\Http\Url;

$url = new Url;
$url->setScheme('https')
	->setHost('localhost')
	->setPath('/edit')
	->setQueryParameter('foo', 'bar');

echo $url; // 'https://localhost/edit?foo=bar'
```

Você também pode analisar a URL e depois manipulá-la:

```php
$url = new Url(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);
```

A classe `Url` implementa a interface `JsonSerializable` e fornece o método `__toString()`, possibilitando a impressão do objeto ou seu uso com `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


URL Components .[method]
------------------------

Os métodos a seguir estão disponíveis para obter ou alterar componentes individuais de URL:

.[language-php]
| Setter| Getter| Valor devolvido
|--------------------------------------------------------------------------------------------
| `setScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `setUser(string $user)`| `getUser(): string`| `'john'`
| `setPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `setHost(string $host)`| `getHost(): string`| `'nette.org'`
| `setPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `setPath(string $path)`| `getPath(): string`| `'/en/download'`
| `setQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `setFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | URL completa

Aviso: Ao trabalhar com um URL obtido de uma [solicitação HTTP |request], lembre-se de que ele não conterá o fragmento, pois o navegador não o envia para o servidor.

Também podemos operar com parâmetros de consulta individuais usando:

.[language-php]
| Setter| Getter
|---------------------------------------------------
| `setQuery(string\|array $query)` | `getQueryParameters(): array`
| `setQueryParameter(string $name, $val)`| `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Retorna a parte direita ou esquerda do host. Veja como isso funciona se o host for `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Verifica se dois URLs são idênticos.

```php
$url->isEqual('https://nette.org');
```


Url::isAbsolute(string $url): bool .[method]{data-version:3.3.2}
----------------------------------------------------------------
Verifica se um URL é absoluto. Um URL é considerado absoluto se começar com um esquema (por exemplo, http, https, ftp) seguido de dois pontos.

```php
Url::isAbsolute('https://nette.org');    // true
Url::isAbsolute('//nette.org');          // false
```


Url::removeDotSegments(string $path): string .[method]{data-version:3.3.2}
--------------------------------------------------------------------------
Normaliza um caminho de URL removendo os segmentos especiais `.` e `..`. Esse método remove elementos de caminho redundantes da mesma forma que os navegadores fazem.

```php
Url::removeDotSegments('/path/../subtree/./file.txt');  // '/subtree/file.txt'
Url::removeDotSegments('/../foo/./bar');                // '/foo/bar'
Url::removeDotSegments('./today/../file.txt');          // 'file.txt'
```


UrlImmutável .[#toc-urlimmutable]
=================================

A classe [api:Nette\Http\UrlImmutable] é uma alternativa imutável à classe `Url` (assim como no PHP `DateTimeImmutable` é uma alternativa imutável ao `DateTime`). Ao invés de setters, ela tem os chamados murchadores, que não mudam o objeto, mas retornam novas instâncias com um valor modificado:

```php
use Nette\Http\UrlImmutable;

$url = new UrlImmutable(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);

$newUrl = $url
	->withUser('')
	->withPassword('')
	->withPath('/en/');

echo $newUrl; // 'http://nette.org:8080/en/?name=param#footer'
```

A classe `UrlImmutable` implementa a interface `JsonSerializable` e fornece o método `__toString()`, permitindo que você imprima o objeto ou o use com `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


URL Components .[method]
------------------------

Os métodos a seguir estão disponíveis para obter ou alterar componentes individuais de URL:

.[language-php]
| Wither| Getter| Valor devolvido
|--------------------------------------------------------------------------------------------
| `withScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `withUser(string $user)`| `getUser(): string`| `'john'`
| `withPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `withHost(string $host)`| `getHost(): string`| `'nette.org'`
| `withPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `withPath(string $path)`| `getPath(): string`| `'/en/download'`
| `withQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `withFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | URL completa

O método `withoutUserInfo()` remove `user` e `password`.

Também podemos operar com parâmetros de consulta individuais usando:

.[language-php]
| Wither| Getter
|-----------------------------------------------
| `withQuery(string\|array $query)` | `getQueryParameters(): array`
| `withQueryParameter(string $name, $val)` | `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Retorna a parte direita ou esquerda do host. Veja como isso funciona se o host for `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


resolve(string $reference): UrlImmutable .[method]{data-version:3.3.2}
----------------------------------------------------------------------
Resolve um URL absoluto da mesma forma que um navegador processa links em uma página HTML:
- Se o link for um URL absoluto (contém um esquema), ele será usado sem alterações.
- Se o link começar com `//`, somente o esquema do URL atual será aplicado.
- Se o link começar com `/`, será criado um caminho absoluto a partir da raiz do domínio.
- Em outros casos, o URL é construído em relação ao caminho atual.

```php
$url = new UrlImmutable('https://example.com/path/page');
echo $url->resolve('../foo');           // 'https://example.com/foo'
echo $url->resolve('/bar');             // 'https://example.com/bar'
echo $url->resolve('sub/page.html');    // 'https://example.com/path/sub/page.html'
```


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Verifica se dois URLs são idênticos.

```php
$url->isEqual('https://nette.org');
```


UrlScript .[#toc-urlscript]
===========================

A classe [api:Nette\Http\UrlScript] é descendente de `UrlImmutable` e, além disso, distingue estas partes lógicas da URL:

/--pre
      baseUrl    basePath  relativePath  relativeUrl
         |          |        |               |
 /---------------/-----\/--------\---------------------------\
 <b>http://nette.org/admin/script.php/pathinfo/?name=param#footer</b>
                 \_______________/\________/
                        |              |
                   scriptPath       pathInfo
\--

Os seguintes métodos estão disponíveis para obter estas peças:

.[language-php]
| Getter| Valor devolvido
|------------------------------------------------
| `getScriptPath(): string`| `'/admin/script.php'`
| `getBasePath(): string`| `'/admin/'`
| `getBaseUrl(): string`| `'http://nette.org/admin/'`
| `getRelativePath(): string`| `'script.php'`
| `getRelativeUrl(): string`| `'script.php/pathinfo/?name=param#footer'`
| `getPathInfo(): string`| `'/pathinfo/'`


Não criamos objetos `UrlScript` diretamente, mas o método [Nette\Http\Request::getUrl() |request] o devolve.
