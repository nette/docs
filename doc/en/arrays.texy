Array Functions
***************

Installation:

```shell
composer require nette/utils
```

Arrays
======

[Nette\Utils\Arrays |api:] is a static class, which contains a handful of handy array functions.

Following examples assume the following class alias is defined:

```php
use Nette\Utils\Arrays;
```


every(array $arr, callable $callback): bool .[method]
-----------------------------------------------------

Check if all items of the array go through condition in `$callback`, which has the signature `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
// have only bar???
$res = Arrays::every($array, function ($value): bool { return $value === 'bar'; });
// $res = false
```


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Transform multidimensional array to flat array.

```php
$array = Arrays::flatten([
	2 => ['a', ['b']],
	4 => ['c', 'd'],
	'e',
]);
// $array = ['a', 'b', 'c', 'd', 'e'];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Returns `$array[$key]` item. If it does not exist, `Nette\InvalidArgumentException` is thrown, unless a default return value is set as third argument.

```php
// if $array['foo'] does not exist, throws an exception
$value = Arrays::get($array, 'foo');

// if $array['foo'] does not exist, returns 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Argument `$key` may as well be an array.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// returns 'red'
```



getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Gets reference to given `$array[$key]`. If the index does not exist, new one is created with `null`.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// returns $array['foo'] reference
```

Works with multidimensional arrays as well as [get() |#get()].

```php
$value = & Arrays::get($array, ['color', 'favorite']);
// returns $array['color']['favorite'] reference
```


grep(array $array, string $pattern, int $flags=null): array .[method]
---------------------------------------------------------------------

Returns only those array items, which matches a regular expression `$pattern`. Regex compilation or runtime error throw `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// returns only numerical items
```

Value `PREG_GREP_INVERT` may be set as `$flags`, which inverts the selection.


insertAfter(array &$array, string|int $key, array $inserted): void .[method]
----------------------------------------------------------------------------

Appends array `$inserted` after item with `$key` index. If such a `$key` does not exist, the array is inserted at the end.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int $key, array $inserted): void .[method]
-----------------------------------------------------------------------------

Prepends content of `$inserted` array into `$array` before item with `$key` index. If such a `$key` does not exist, the array is inserted at the beginning.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


isList(array $array): bool .[method]
------------------------------------

Check if the array is indexed by numeric keys in ascending series from zero.

```php
Arrays::isList(['a', 'b', 'c'])); // true
Arrays::isList([4 => 1, 2, 3])); // false
Arrays::isList(['a' => 1, 'b' => 2])); // false
```


map(array $arr, callable $callback): array .[method]
----------------------------------------------------

Apply `$callback` to the all items in array and return results, which has the signature `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, function ($value): string { return $value . $value; });
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Merges two arrays recursively. Useful for combining tree structures. It behaves as the `+` operator applied to arrays, ie. it adds to keys/values of the second array to the the first one. In case of collision, values of first array are used.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Values from second array are always appended to the first. Though the disappearance of value `10` might be confusing, it's fine - both `5` of the first array and the `10` do have same key `0`.


normalize(array $arr, string $filling=null): array .[method]
------------------------------------------------------------

Replace numeric keys in array to the value from variable `$filling`.

```php
$array = Arrays::normalize(['first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize(['first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$arr, string|int $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------

Returns and removes value of the item in array or if not exist throw exception or return filled `$default`.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): void .[method]
--------------------------------------------------------------------------------

Renames a key.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


searchKey(array $array, string|int $key): int .[method]
-------------------------------------------------------

Returns zero-indexed position of given array key. Returns `null` if key is not found.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::searchKey($array, 'first'); // returns 0
```

.[note]
Version 2 returns `false` instead of `null`.


some(array $arr, callable $callback): bool .[method]
----------------------------------------------------

Check if some item of the array go through condition in `$callback`, which has the signature `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
// have some bar???
$res = Arrays::some($array, function ($value): bool { return $value === 'bar'; });
// $res = true
```


ArrayHash
=========

Object [Nette\Utils\ArrayHash |api:] is the descendant of an anonymous stdClass and extends it to the ability to treat it as an array, for example, accessing members using square brackets:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // also works object notation
echo $hash->foo; // 123
```

You can use `count()` and iterate over the object, as in the case of the array:

```php
echo count($hash); // 2

foreach ($hash as $key => $value) ...
```

Existing arrays can be transformed to `ArrayHash` using `from()`:

```php
$array = ['foo' => 123, 'bar' => 456, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
echo $hash->foo; // 123
echo $hash->inner; // ArrayHash('a' => 'b')
echo $hash->inner->a; // 'b'
echo $hash['inner']['a']; // 'b'
```

The transformation is recursive, which can be avoided by the second parameter:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
echo $hash->inner; // array ['a' => 'b']
```


ArrayList
=========

[Nette\Utils\ArrayList |api:] represents a linear array where the indexes are only integers ascending from 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
echo count($list); // 3
```

Over the object you can iterate or call `count()`, as in the case of an array.

Accessing keys beyond the allowed values throws an exception `Nette\OutOfRangeException`:

```php
echo $list[-1]; // throws Nette\OutOfRangeException
unset($list[30]); // throws Nette\OutOfRangeException
```

Removing the key will result in renumbering the elements:

```php
// ArrayList(0 => 'a', 1 => 'c')
unset($list[1]);
```

You can add a new element to the beginning using `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```


{{composer: nette/utils}}
