Ce este injecția de dependență?
*******************************

.[perex]
Acest capitol vă prezintă practicile de programare de bază care stau la baza întregului cadru Nette și pe care ar trebui să le urmați atunci când vă scrieți propriile aplicații. Acestea sunt elementele de bază necesare pentru a scrie un cod curat, ușor de înțeles și de întreținut.

Dacă învățați și urmați aceste reguli, cadrul vă va fi alături la fiecare pas. Se va ocupa de sarcinile de rutină pentru dvs. și vă va face să vă simțiți cât mai confortabil posibil, astfel încât să vă puteți concentra pe logica propriu-zisă.

Principiile pe care le vom arăta aici sunt destul de simple. Nu aveți de ce să vă faceți griji.


Vă amintiți de primul dumneavoastră program? .[#toc-remember-your-first-program]
--------------------------------------------------------------------------------

Nu avem nicio idee în ce limbaj l-ați scris, dar dacă ar fi fost PHP, probabil că ar fi arătat cam așa:

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // amprente 24
```

Câteva linii de cod banale, dar în ele sunt ascunse atât de multe concepte cheie. Vedem că există variabile. Codul este împărțit în unități mai mici, care sunt, de exemplu, funcții. Că le transmitem argumente de intrare și că acestea returnează rezultate. Tot ceea ce lipsește sunt condițiile și buclele.

Faptul că trecem date de intrare unei funcții și că aceasta returnează un rezultat este un concept perfect de înțeles, care este folosit și în alte domenii, cum ar fi matematica.

O funcție are o semnătură, care constă din numele său, o listă de parametri și tipurile acestora și, în final, tipul valorii de retur. În calitate de utilizatori, suntem interesați de semnătură; de obicei, nu trebuie să știm nimic despre implementarea internă.

Acum imaginați-vă că semnătura unei funcții arată astfel:

```php
function addition(float $x): float
```

O adunare cu un singur parametru? Asta e ciudat... Ce zici de asta?

```php
function addition(): float
```

E foarte ciudat, nu-i așa? Cum credeți că este folosită această funcție?

```php
echo addition(); // ce imprimă?
```

Privind un astfel de cod, suntem confuzi. Nu doar un începător nu l-ar înțelege, ci chiar și un programator experimentat nu ar înțelege un astfel de cod.

Vă întrebați cum ar arăta de fapt o astfel de funcție în interior? De unde ar lua adunările? Probabil că le-ar obține *într-un fel* de una singură, astfel:

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Se pare că există legături ascunse către alte funcții (sau metode statice) în corpul funcției, iar pentru a afla de unde provin de fapt addendumurile, trebuie să săpăm mai departe.


Nu pe aici! .[#toc-not-this-way]
--------------------------------

Desenul pe care tocmai l-am prezentat este esența multor caracteristici negative:

- semnătura funcției pretindea că nu are nevoie de adaosuri, ceea ce ne-a derutat.
- nu avem nicio idee despre cum să facem funcția să calculeze cu alte două numere
- a trebuit să ne uităm în cod pentru a vedea unde ia adunările
- am descoperit legături ascunse
- pentru a înțelege pe deplin, trebuie să explorăm și aceste legături

Și chiar este treaba funcției de adunare să procure intrări? Bineînțeles că nu este.  Responsabilitatea sa este doar de a adăuga.


Nu dorim să întâlnim un astfel de cod și cu siguranță nu dorim să-l scriem. Remediul este simplu: reveniți la elementele de bază și folosiți doar parametri:


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Regula #1: Folosiți parametrii .[#toc-rule-1-use-parameters]
------------------------------------------------------------

Cea mai importantă regulă este: **toate datele de care au nevoie funcțiile sau clasele trebuie să le fie transmise**.

Dacă încălcăm această regulă, va fi imposibil să facem codul inteligibil, curat și sustenabil.

Dacă o respectăm, ne îndreptăm spre un cod fără constrângeri ascunse. Spre un cod care să fie ușor de înțeles nu numai pentru autor, ci și pentru oricine îl citește ulterior. Unde totul este de înțeles din semnăturile funcțiilor și claselor și nu este nevoie să căutăm secrete ascunse în implementare.

Această tehnică de transmitere a argumentelor se numește tehnic **injecție de dependență**.

(Nu confundați injectarea dependențelor cu un "container de injectare a dependențelor"; este ceva radical diferit și vom aborda containerele în [capitolul următor |container]).


De la funcții la clase .[#toc-from-functions-to-classes]
--------------------------------------------------------

Și cum se leagă clasele de acest lucru? O clasă este o entitate mai complexă decât o simplă funcție, dar regula nr. 1 se aplică și aici. Există doar [mai multe moduri de a transmite argumente |passing-dependencies]. De exemplu, destul de asemănător cu cazul unei funcții:

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

Sau prin utilizarea altor metode, sau direct a constructorului:

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Ambele exemple sunt în deplină conformitate cu injecția de dependență.


Exemple din viața reală .[#toc-real-life-examples]
--------------------------------------------------

În lumea reală, nu veți scrie clase pentru a adăuga numere. Să trecem la exemple din viața reală.

Să avem o clasă `Article` care să reprezinte un articol de blog:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// salvați articolul în baza de date
	}
}
```

iar utilizarea va fi următoarea:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Metoda `save()` va stoca articolul într-un tabel din baza de date. Implementarea acesteia cu ajutorul [Nette Database |database:en] ar fi floare la ureche, dacă nu ar exista o singură problemă: de unde obține `Article` conexiunea la baza de date, adică obiectul de clasă `Nette\Database\Connection`?

Se pare că avem o mulțime de opțiuni. O poate lua de la o variabilă statică. Sau să moștenească din clasa care va furniza conexiunea la baza de date. Sau să profite de un așa-numit singleton. Sau de așa-numitele fațade care sunt folosite în Laravel:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Minunat, am rezolvat problema.

Sau nu?

Reamintiți-vă [regula nr. 1: folosiți parametri |#rule #1: use parameters]: trebuie să le transmitem toate datele de care clasa are nevoie. Pentru că, dacă nu o facem și încălcăm regula, am pornit pe calea unui cod murdar, plin de legături ascunse, incomprehensibil, iar rezultatul va fi o aplicație care va fi o pacoste de întreținut și dezvoltat.

Utilizatorul clasei `Article` nu are nicio idee despre locul în care metoda `save()` stochează articolul. Într-un tabel din baza de date? În care, în cea de producție sau în cea de dezvoltare? Și cum poate fi schimbat acest lucru?

Utilizatorul trebuie să se uite la modul în care este implementată metoda `save()` pentru a găsi utilizarea metodei `DB::insert()`. Astfel, el trebuie să caute mai departe pentru a afla cum această metodă procură o conexiune la baza de date. Iar legăturile ascunse pot forma un lanț destul de lung.

Legăturile ascunse, fațadele Laravel sau variabilele statice nu sunt niciodată prezente în codul curat și bine conceput. În codul curat și bine conceput, argumentele sunt transmise:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Chiar mai practic, așa cum vom vedea în continuare, este să se folosească un constructor:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Dacă aveți de gând să scrieți o clasă care necesită o bază de date, de exemplu, nu vă gândiți de unde să o obțineți, ci lăsați-o să vă fie transmisă. Poate ca un parametru al unui constructor sau al unei alte metode. Declarați dependențele. Expuneți-le în API-ul clasei dumneavoastră. Veți obține un cod ușor de înțeles și previzibil.

Ce ziceți de această clasă care înregistrează mesaje de eroare:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Ce credeți, am respectat [regula nr. 1: folosiți parametri |#rule #1: use parameters]?

Nu am respectat-o.

Clasa *obține* informația cheie, directorul care conține fișierul jurnal, de la o constantă.

Vedeți un exemplu de utilizare:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Fără a cunoaște implementarea, puteți răspunde la întrebarea unde sunt scrise mesajele? V-aș sugera că existența constantei LOG_DIR este necesară pentru ca aceasta să funcționeze? Și ați putea să creați o a doua instanță care să scrie într-o altă locație? Cu siguranță că nu.

Haideți să reparăm clasa:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Clasa este acum mult mai clară, mai ușor de configurat și, prin urmare, mai utilă.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Dar nu-mi pasă! .[#toc-but-i-don-t-care]
----------------------------------------

*"Când creez un obiect articol și apelez la save(), nu vreau să am de-a face cu baza de date, vreau doar să fie salvat în baza de date pe care am stabilit-o în configurație. "*

*"Când folosesc Logger, vreau doar ca mesajul să fie scris și nu vreau să mă ocup de unde. Să fie folosite setările globale. "*

Acestea sunt comentarii corecte.

Ca exemplu, să luăm o clasă care trimite buletine de știri și să înregistrăm cum a decurs acest lucru:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Cu toate acestea, noua clasă `Logger`, care nu mai utilizează constanta `LOG_DIR`, necesită calea către fișier în constructor. Cum să rezolvăm acest lucru? Clasei `NewsletterDistributor` nu-i pasă unde sunt scrise mesajele, ci vrea doar să le scrie.

Soluția este din nou [regula nr. 1: folosiți parametri |#rule #1: use parameters]: treceți-i toate datele de care clasa are nevoie.

Așadar, transmitem calea către jurnal constructorului, pe care o folosim apoi la crearea obiectului `Logger`? Nu, deoarece calea nu reprezintă datele de care are nevoie clasa `NewsletterDistributor`, ci datele de care are nevoie `Logger`. Clasa are nevoie de loggerul în sine. Iar noi îl vom trece pe acesta:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Acum este clar din semnăturile clasei `NewsletterDistributor` că înregistrarea face parte din funcționalitatea sa. Și aveți opțiunea de a înlocui loggerul cu altul.

În timp ce în întreaga aplicație putem fi mulțumiți cu o singură instanță a loggerului și să o trecem oriunde se înregistrează ceva, este diferit în cazul clasei `Article`. Vom dori să creăm mai multe instanțe ale acesteia. Cum să tratăm dependența de baza de date în constructor? Ca exemplu, să luăm un controler care ar trebui să salveze un articol în baza de date după trimiterea unui formular:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Se sugerează o posibilă soluție: treceți obiectul bazei de date la `UserController` prin constructor și utilizați `$article = new Article($this->db)`.

Ca și în cazul anterior, aceasta nu este o practică corectă. Baza de date nu este o dependență `UserController`, ci o dependență `Article`. În plus, în momentul în care constructorul clasei `Article` este cumva modificat (se adaugă un nou parametru), va trebui să modificăm codul în toate locurile în care sunt create instanțe.

Soluția este reprezentată de fabrici.


Regula nr. 2: Folosiți fabrici .[#toc-rule-2-use-factories]
-----------------------------------------------------------

Prin eliminarea legăturilor ascunse și prin transmiterea tuturor datelor ca argumente, obținem clase mai configurabile și mai flexibile. Prin urmare, avem totuși nevoie de ceva pentru a crea și configura aceste clase mai flexibile. Îl vom numi o fabrică.

Regula de bază este următoarea: dacă o clasă are dependențe, lăsați crearea instanțelor acestora în seama fabricii.

Fabricile sunt un înlocuitor mai inteligent pentru operatorul `new` în lumea injecției de dependență.


Fabrica .[#toc-factory]
-----------------------

O fabrică este o clasă care creează și configurează obiecte. Fabrica care produce `Article` se va numi `ArticleFactory` și va fi utilizată în controler după cum urmează:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// permiteți fabricii să creeze un obiect
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

O implementare a unei fabrici ar putea arăta astfel:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

În acest moment, când semnătura constructorului clasei `Article` se schimbă, singura parte a codului care trebuie să reacționeze la acest lucru este fabrica `ArticleFactory`. Orice alt cod care lucrează cu obiectele `Article`, cum ar fi `UserController`, nu este afectat.

Poate că acum vă bateți în frunte întrebându-vă cum ne-am ajutat de fapt pe noi înșine. Cantitatea de cod a crescut și s-a mutat de la controler la o clasă separată. Cu toate acestea, Nette DI are un as ascuns în mânecă. Înțelege conceptul de fabrici și poate chiar să [scrie un astfel de serviciu pentru noi |factory]. Astfel, în loc de clasa `ArticleFactory`, am putea crea doar o interfață:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Dar acum suntem un pic mai departe de asta, vom ajunge la asta într-un minut.


Rezumat .[#toc-summary]
-----------------------

La începutul acestui capitol, am promis să demonstrăm un principiu simplu de proiectare a aplicațiilor. Deși principiul în sine este simplu (dați claselor datele de care au nevoie), ceea ce rezultă din el necesită mai multă gândire. Nu ezitați să citiți acest capitol de mai multe ori.

Programatorii care au renunțat la vechile obiceiuri și au început să folosească injecția de dependență în mod constant consideră că acesta este un moment crucial în viața lor profesională. A deschis o lume de aplicații clare și durabile.

Acum vom vedea ce este [Dependency Injection Container |container].
