Używanie Latte z Slim 4
***********************

.[perex]
Ten artykuł, którego autorem jest "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, opisuje użycie Latte z Slim Framework.

Najpierw "zainstaluj Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html, a następnie Latte za pomocą Composera:

```shell
composer require latte/latte
```


Konfiguracja .[#toc-configuration]
----------------------------------

Utwórz nowy katalog `templates` w katalogu głównym projektu. Wszystkie szablony zostaną w nim umieszczone później.

Dodaj nowy klucz konfiguracyjny `template` do pliku `config/defaults.php`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte kompiluje szablony do natywnego kodu PHP i buforuje je na dysku. Są więc tak szybkie, jakby były napisane w natywnym PHP.

Dodaj nowy klucz konfiguracyjny `template_temp` do pliku `config/defaults.php`: Upewnij się, że katalog `{project}/tmp/templates` istnieje i ma uprawnienia do odczytu i zapisu.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte automatycznie regeneruje pamięć podręczną przy każdej zmianie szablonu, co można wyłączyć w środowisku produkcyjnym, aby zaoszczędzić trochę wydajności:

```php
// zmiana na false w środowisku produkcyjnym
$settings['template_auto_refresh'] = true;
```

Następnie dodaj definicję kontenera DI dla klasy `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Renderowanie samego szablonu Latte technicznie działałoby, ale musimy również zapewnić, że działa on z obiektem odpowiedzi PSR-7.

Aby to zrobić, stworzymy specjalną klasę `TemplateRenderer`, która wykona tę pracę za nas.

Więc następny, utwórz plik `src/Renderer/TemplateRenderer.php` i skopiuj / wklej ten kod:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Korzystanie z .[#toc-usage]
---------------------------

Zamiast używać bezpośrednio obiektu Latte Engine, użyj obiektu `TemplateRenderer`, aby wyrenderować szablon w obiekt zgodny z PSR-7.

Typowa klasa obsługi akcji może wyglądać tak: Renderuje szablon o nazwie `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Aby to zadziałało, utwórz plik szablonu w `templates/home.latte` o takiej treści:

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Jeśli wszystko jest skonfigurowane poprawnie, powinieneś zobaczyć następujące wyjście:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
