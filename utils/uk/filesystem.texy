Функції файлової системи
************************

.[perex]
[api:Nette\Utils\FileSystem] це статичний клас, який містить корисні функції для роботи з файловою системою. Однією з переваг над нативними функціями PHP є те, що вони генерують виключення у випадку помилок.


Встановлення:

```shell
composer require nette/utils
```

Наступні приклади припускають, що визначено наступний псевдонім класу:

```php
use Nette\Utils\FileSystem;
```


Маніпуляція .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копіює файл або цілий каталог. За замовчуванням перезаписує існуючі файли і каталоги. Якщо `$overwrite` встановлено на `false` і вже існує `$target`, згенерує виключення `Nette\InvalidStateException`. Згенерує виключення `Nette\IOException` у разі виникнення помилки.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Створює каталог, якщо він не існує, включаючи батьківські каталоги. Згенерує виключення `Nette\IOException` у разі виникнення помилки.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Видаляє файл або весь каталог, якщо він існує. Якщо каталог не порожній, спочатку видаляється його вміст. Згенерує виключення `Nette\IOException` у разі виникнення помилки.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Встановлює права доступу до файлу `$fileMode` або до каталогу `$dirMode`. Рекурсивно переглядає і встановлює дозволи на весь вміст каталогу.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Відкриває файл і повертає ресурс. Параметр `$mode` працює так само, як і рідна функція `fopen()`:https://www.php.net/manual/en/function.fopen.php. Якщо виникає помилка, згенерує виключення `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Читає вміст `$file`. При виникненні помилки генерує виключення `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Читає вміст файлу рядок за рядком. На відміну від стандартної функції `file()`, вона не зчитує весь файл у пам'ять, а читає його безперервно, що дає змогу читати файли, розмір яких перевищує обсяг доступної пам'яті. Функція `$stripNewLines` визначає, чи потрібно вилучати символи переходу на новий рядок `\r` і `\n`.
У разі помилки вона згенерує виключення `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Перейменовує або переміщує файл або каталог, вказаний командою `$origin`, до `$target`. За замовчуванням перезаписує існуючі файли і каталоги. Якщо `$overwrite` задано як `false`, а `$target` вже існує, згенерує виключення `Nette\InvalidStateException`. Згенерує виняток `Nette\IOException` у разі виникнення помилки.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записує `$content` в `$file`. Згенерує виключення `Nette\IOException` про виникнення помилки.

```php
FileSystem::write('/path/to/file', $content);
```


Шляхи .[#toc-paths]
===================


isAbsolute(string $path): bool .[method]
----------------------------------------

Визначає, чи є `$path` абсолютним.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Об'єднує всі відрізки шляху і нормалізує результат.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормалізує `..` і `.` та роздільники каталогів у шляху.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Перетворює слеші на `/`, що використовується у системах Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Перетворює косі риски на символи, характерні для поточної платформи, наприклад, `\` у Windows і `/` в інших системах.

```php
$path = FileSystem::platformSlashes($path);
```
