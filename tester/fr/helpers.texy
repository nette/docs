Classes d'aide
**************


DomQuery
--------
`Tester\DomQuery` est une classe étendant `SimpleXMLElement` avec une recherche facile dans HTML ou XML à l'aide de sélecteurs CSS.

```php
# création de DomQuery à partir d'une chaîne HTML
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Titre</h1>
		<div class="content">Texte</div>
	</article>
');

# test d'existence d'éléments à l'aide de sélecteurs CSS
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# recherche d'éléments sous forme de tableau d'objets DomQuery
$headings = $dom->find('h1');
Assert::same('Titre', (string) $headings[0]);

# test si l'élément correspond au sélecteur (depuis la version 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# recherche de l'ancêtre le plus proche correspondant au sélecteur (depuis 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock
--------
`Tester\FileMock` émule des fichiers en mémoire et facilite ainsi le test de code qui utilise les fonctions `fopen()`, `file_get_contents()`, `parse_ini_file()` et similaires. Exemple d'utilisation :

```php
# Classe testée
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Nouveau fichier vide
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Nous testons le contenu créé
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Ce n'est pas une assertion, mais un assistant pour tester les méthodes et propriétés privées des objets.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // $ent->enabled privé rendu accessible
});
```


Helpers::purge() .[filter]
--------------------------
La méthode `purge()` crée le répertoire spécifié, et s'il existe déjà, supprime tout son contenu. Utile pour créer un répertoire temporaire. Par exemple dans `tests/bootstrap.php` :

```php
@mkdir(__DIR__ . '/tmp');  # @ - le répertoire peut déjà exister

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Les tests s'exécutent en parallèle. Parfois, cependant, nous avons besoin que l'exécution des tests ne se chevauchent pas. Typiquement pour les tests de base de données, il est nécessaire qu'un test prépare le contenu de la base de données et qu'un autre test n'y touche pas pendant son exécution. Dans ces tests, nous utilisons `Tester\Environment::lock($name, $dir)` :

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Le premier paramètre est le nom du verrou, le second est le chemin vers le répertoire pour stocker le verrou. Le test qui obtient le verrou en premier s'exécute, les autres tests doivent attendre sa fin.


Environment::bypassFinals() .[filter]
-------------------------------------
Les classes ou méthodes marquées comme `final` sont difficiles à tester. L'appel `Tester\Environment::bypassFinals()` au début du test fait que les mots-clés `final` sont omis lors du chargement du code.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass n'est plus final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- améliore la lisibilité des affichages d'erreurs (y compris la coloration), sinon la trace de pile PHP par défaut est affichée
- active le contrôle que des assertions ont été appelées dans le test, sinon un test sans assertions (par exemple oubliées) passe également
- lors de l'utilisation de `--coverage`, lance automatiquement la collecte d'informations sur le code exécuté (décrit plus loin)
- affiche l'état OK ou FAILURE à la fin du script


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Crée les fonctions globales `test()`, `testException()`, `setUp()` et `tearDown()`, dans lesquelles vous pouvez structurer les tests.

```php
test('description du test', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Permet de savoir si le test a été lancé directement, ou via Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# lancé par Tester
} else {
	# lancé autrement
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester exécute les tests en parallèle dans un nombre spécifié de threads. Si le numéro du thread nous intéresse, nous le trouvons dans la variable d'environnement :

```php
echo "Je tourne dans le thread numéro " . getenv(Tester\Environment::VariableThread);
```
