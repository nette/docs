Képekkel való munka
*******************

.[perex]
A [api:Nette\Utils\Image] osztály leegyszerűsíti a képekkel való manipulációt, mint például a méretváltoztatás, vágás, élesítés, rajzolás vagy több kép összefűzése.


A PHP kiterjedt funkciókészlettel rendelkezik a képek manipulálására. De az API-juk nem túl kényelmes. Nem lenne a Nette Framework, ha nem jönne elő egy szexi API-val.

Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi a létrehozott aliast:

```php
use Nette\Utils\Image;
use Nette\Utils\ImageColor;
use Nette\Utils\ImageType;
```


Kép létrehozása
===============

Létrehozunk egy új true color képet, például 100×200 méretekkel:

```php
$image = Image::fromBlank(100, 200);
```

Opcionálisan megadhatjuk a háttérszínt (az alapértelmezett a fekete):

```php
$image = Image::fromBlank(100, 200, ImageColor::rgb(125, 0, 0));
```

Vagy betöltjük a képet egy fájlból:

```php
$image = Image::fromFile('nette.jpg');
```


Kép mentése
===========

A képet el lehet menteni egy fájlba:

```php
$image->save('resampled.jpg');
```

Megadhatjuk a tömörítés minőségét 0..100 tartományban JPEG (alapértelmezett 85), WEBP (alapértelmezett 80) és AVIF (alapértelmezett 30) esetén, és 0..9 tartományban PNG (alapértelmezett 9) esetén:

```php
$image->save('resampled.jpg', 80); // JPEG, 80% minőség
```

Ha a fájlkiterjesztésből nem egyértelmű a formátum, megadhatjuk [konstanssal|#Formáty]:

```php
$image->save('resampled.tmp', null, ImageType::JPEG);
```

A képet lemez helyett egy változóba is írhatjuk:

```php
$data = $image->toString(ImageType::JPEG, 80); // JPEG, 80% minőség
```

vagy közvetlenül elküldhetjük a böngészőbe a megfelelő `Content-Type` HTTP fejléccel:

```php
// elküldi a Content-Type: image/png fejlécet
$image->send(ImageType::PNG);
```


Formátumok
==========

A támogatott formátumok a JPEG, PNG, GIF, WebP, AVIF és BMP, azonban a PHP verziójának is támogatnia kell őket, amit a [#isTypeSupported()] függvénnyel ellenőrizhetünk. Az animációk nem támogatottak.

A formátumot az `ImageType::JPEG`, `ImageType::PNG`, `ImageType::GIF`, `ImageType::WEBP`, `ImageType::AVIF` és `ImageType::BMP` konstansok képviselik.

```php
$supported = Image::isTypeSupported(ImageType::JPEG);
```

Szüksége van a kép formátumának észlelésére betöltéskor? A metódus a második paraméterben adja vissza:

```php
$image = Image::fromFile('nette.jpg', $type);
```

Az észlelést magát a kép betöltése nélkül az `Image::detectTypeFromFile()` végzi.


Méretváltoztatás
================

Gyakori művelet a kép méreteinek megváltoztatása. Az aktuális méreteket a `getWidth()` és `getHeight()` metódusok adják vissza.

A változtatáshoz a `resize()` metódus szolgál. Példa az arányos méretváltoztatásra úgy, hogy ne haladja meg az 500x300 pixeles méreteket (vagy a szélesség pontosan 500 px lesz, vagy a magasság pontosan 300 px, az egyik méret úgy kerül kiszámításra, hogy megmaradjon az oldalarány):

```php
$image->resize(500, 300);
```

Lehetséges csak egy méretet megadni, a másik pedig kiszámításra kerül:

```php
$image->resize(500, null); // szélesség 500px, a magasság kiszámításra kerül

$image->resize(null, 300); // a szélesség kiszámításra kerül, magasság 300px
```

Bármelyik méretet százalékban is meg lehet adni:

```php
$image->resize('75%', 300); // 75 % × 300px
```

A `resize` viselkedését a következő jelzőkkel lehet befolyásolni. Az `Image::Stretch` kivételével mindegyik megőrzi az oldalarányt.

|---------------------------------------------------------------------------------------
| Jelző                  | Leírás
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (alapértelmezett) | az eredményül kapott méretek kisebbek vagy egyenlőek lesznek a kívánt méretekkel
| `Image::OrBigger`         | kitölti (és esetleg túllépi az egyik méretben) a célterületet
| `Image::Cover`            | kitölti a célterületet és levágja azt, ami túllóg
| `Image::ShrinkOnly`       | csak kicsinyítés (megakadályozza a kis kép nyújtását)
| `Image::Stretch`          | ne tartsa meg az oldalarányt


A jelzőket a függvény harmadik argumentumaként adjuk meg:

```php
$image->resize(500, 300, Image::OrBigger);
```

A jelzők kombinálhatók:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

A képeket függőlegesen vagy vízszintesen lehet tükrözni úgy, hogy az egyik méretet (esetleg mindkettőt) negatív számként adjuk meg:

```php
$flipped = $image->resize(null, '-100%'); // függőleges tükrözés

$flipped = $image->resize('-100%', '-100%'); // 180°-os forgatás

$flipped = $image->resize(-125, 500); // átméretezés és vízszintes tükrözés
```

A kép kicsinyítése után finom élesítéssel javítható a megjelenése:

```php
$image->sharpen();
```


Vágás
=====

A vágáshoz a `crop()` metódus szolgál:

```php
$image->crop($left, $top, $width, $height);
```

Hasonlóan a `resize()`-hoz, minden érték megadható százalékban. A `$left` és `$top` százalékai a fennmaradó helyből számítódnak, hasonlóan a CSS `background-position` tulajdonságához:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


A képet automatikusan is le lehet vágni, például a fekete szegélyek levágása:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

A `cropAuto()` metódus az `imagecropauto()` függvény objektumorientált helyettesítője, [dokumentációjában|https://www.php.net/manual/en/function.imagecropauto] további információkat talál.


Színek .{data-version:4.0.2}
============================

Az `ImageColor::rgb()` metódus lehetővé teszi a szín meghatározását a piros, zöld és kék (RGB) értékek segítségével. Opcionálisan megadhatja az átlátszósági értéket is 0 (teljesen átlátszó) és 1 (teljesen átlátszatlan) között, tehát ugyanúgy, mint a CSS-ben.

```php
$color = ImageColor::rgb(255, 0, 0); // Piros
$transparentBlue = ImageColor::rgb(0, 0, 255, 0.5); // Félig átlátszó kék
```

Az `ImageColor::hex()` metódus lehetővé teszi a szín meghatározását hexadecimális formátumban, hasonlóan a CSS-hez. Támogatja a `#rgb`, `#rrggbb`, `#rgba` és `#rrggbbaa` formátumokat:

```php
$color = ImageColor::hex("#F00"); // Piros
$transparentGreen = ImageColor::hex("#00FF0080"); // Félig átlátszó zöld
```

A színeket más metódusokban is lehet használni, mint például az `ellipse()`, `fill()` stb.


Rajzolás és szerkesztés
=======================

Rajzolhatsz, írhatsz, de a leveleket ne tépd le. Rendelkezésedre állnak a PHP összes képkezelő függvényei, lásd [#Metódusok áttekintése |#Přehled metod], de objektumorientált köntösben:

```php
$image->filledEllipse($centerX, $centerY, $width, $height, ImageColor::rgb(255, 0, 0));
```

Mivel a PHP téglalaprajzoló függvényei a koordináták megadása miatt nem praktikusak, az `Image` osztály helyettesítőket kínál a [#rectangleWH()] és [#filledRectangleWH()] függvények formájában.


Több kép összefűzése
====================

Egy képbe könnyen beilleszthető egy másik kép:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, ImageColor::rgb(52, 132, 210));

// a koordinátákat ismét százalékban lehet megadni
$blank->place($logo, '80%', '80%'); // beillesztjük a jobb alsó sarok közelébe
```

A beillesztéskor figyelembe veszi az alfakanált, ráadásul befolyásolhatjuk a beillesztett kép átlátszóságát (létrehozunk egy ún. vízjelet):

```php
$blank->place($image, '80%', '80%', 25); // az átlátszóság 25 %
```

Egy ilyen API-t valóban öröm használni!


Metódusok áttekintése
=====================


static fromBlank(int $width, int $height, ?ImageColor $color=null): Image .[method]
-----------------------------------------------------------------------------------
Létrehoz egy új true color képet a megadott méretekkel. Az alapértelmezett szín a fekete.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Betölt egy képet egy fájlból és visszaadja a [típusát|#Formáty] a `$detectedFormat`-ban.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Betölt egy képet egy stringből és visszaadja a [típusát|#Formáty] a `$detectedFormat`-ban.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method][deprecated]
---------------------------------------------------------------------------------------------
Ezt a függvényt az `ImageColor` osztály váltotta fel, lásd [színek|#Barvy].


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Visszaadja a fájlkiterjesztést a megadott [típushoz|#Formáty].


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Visszaadja a MIME típust a megadott [típushoz|#Formáty].


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Visszaadja a kép [típusát|#Formáty] a fájlkiterjesztés alapján.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Visszaadja a kép [típusát|#Formáty] és a `$width` és `$height` paraméterekben a méreteit is.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Visszaadja a kép [típusát|#Formáty] egy stringből és a `$width` és `$height` paraméterekben a méreteit is.


static isTypeSupported(int $type): bool .[method]
-------------------------------------------------
Ellenőrzi, hogy a megadott kép[típus|#Formáty] támogatott-e.


static getSupportedTypes(): array .[method]{data-version:4.0.4}
---------------------------------------------------------------
Visszaadja a támogatott kép[típusok|#Formáty] tömbjét.


static calculateTextBox(string $text, string $fontFile, float $size, float $angle=0, array $options=[]): array .[method]
------------------------------------------------------------------------------------------------------------------------
Kiszámítja egy téglalap méreteit, amely egy adott betűtípusban és méretben lévő szöveget foglal magába. Asszociatív tömböt ad vissza, amely tartalmazza a `left`, `top`, `width`, `height` kulcsokat. A bal margó negatív is lehet, ha a szöveg bal oldali alávágással kezdődik.


affine(array $affine, ?array $clip=null): Image .[method]
---------------------------------------------------------
Visszaad egy képet, amely a forráskép affin transzformált képét tartalmazza egy opcionális vágási területtel. ([több |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Visszaadja két affin transzformációs mátrix összefűzését, ami hasznos, ha több transzformációt kell egyszerre alkalmazni ugyanarra a képre. ([több |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, ?mixed $options=null): array .[method]
-----------------------------------------------------------------
Visszaad egy affin transzformációs mátrixot. ([több |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Két különböző rajzolási módot tesz lehetővé truecolor képeken. Keverési módban a szín alfa csatornájának komponense, amelyet minden rajzolási függvényben, például a `setPixel()`-ben használnak, meghatározza, hogy az alapul szolgáló szín milyen mértékben látszódjon át. Ennek eredményeként az adott ponton a meglévő szín automatikusan keveredik a rajzolt színnel, és az eredmény a képbe kerül mentésre. Az eredményül kapott pixel átlátszatlan. Nem keverési módban a rajzolt szín szó szerint másolódik az alfa csatorna információival együtt, és felülírja a cél pixelt. A keverési mód nem érhető el palettás képekre történő rajzoláskor. ([több |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Aktiválja a simított vonalak és sokszögek rajzolását. Nem támogatja az alfa csatornákat. Csak truecolor képekkel működik.

Az élsimított primitívek használata átlátszó háttérszínnel váratlan eredményekhez vezethet. A keverési módszer a háttérszínt ugyanúgy használja, mint az összes többi színt. ([több |https://www.php.net/manual/en/function.imageantialias])


arc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color): void .[method]
---------------------------------------------------------------------------------------------------------------------------
Rajzol egy körívet a megadott koordinátákon középponttal. ([több |https://www.php.net/manual/en/function.imagearc])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Visszaad egy színazonosítót, amely a megadott RGB komponensekből álló színt képviseli. Minden olyan szín létrehozásához meg kell hívni, amelyet a képben használni kívánnak. ([több |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Ugyanúgy viselkedik, mint a `colorAllocate()`, az átlátszósági paraméter `$alpha` hozzáadásával. ([több |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Visszaadja a kép megadott helyén lévő pixel színindexét. Ha a kép truecolor, ez a függvény a pixel RGB értékét adja vissza egész számként. Használjon biteltolást és bitmaszkolást a piros, zöld és kék komponensek különálló értékeinek eléréséhez: ([több |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Visszaadja a kép palettájában lévő szín indexét, amely a „legközelebb” van a megadott RGB értékhez. A kívánt szín és a paletta minden színe közötti „távolság” úgy kerül kiszámításra, mintha az RGB értékek pontokat jelölnének egy háromdimenziós térben. ([több |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Visszaadja a kép palettájában lévő szín indexét, amely a „legközelebb” van a megadott RGB értékhez és `$alpha` szinthez. ([több |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Megszerzi annak a színnek az indexét, amelynek árnyalata, fehérsége és feketesége a legközelebb áll a megadott színhez. ([több |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Deallokál egy korábban a `colorAllocate()` vagy `colorAllocateAlpha()` segítségével lefoglalt színt. ([több |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Visszaadja a megadott szín indexét a kép palettájában. ([több |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Visszaadja a megadott szín + alfa indexét a kép palettájában. ([több |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Hozzáigazítja a paletta színeit a második képhez. ([több |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Visszaadja a kívánt szín színindexét, vagy a pontos színt, vagy a legközelebbi lehetséges alternatívát. ([több |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Visszaadja a kívánt szín színindexét, vagy a pontos színt, vagy a legközelebbi lehetséges alternatívát. ([több |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Beállítja a paletta megadott indexét a megadott színre. ([több |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Megszerzi a megadott index színét. ([több |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Visszaadja a képpaletta színeinek számát. ([több |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(?int $color=null): int .[method]
-------------------------------------------------
Megszerzi vagy beállítja az átlátszó színt a képben. ([több |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Alkalmaz egy konvolúciós mátrixot a képre, a megadott együtthatót és eltolást használva. ([több |https://www.php.net/manual/en/function.imageconvolution])

.[note]
*Bundled GD extension* jelenlétét igényli, tehát nem biztos, hogy mindenhol működik.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Másolja a `$src` egy részét a képre a `$srcX`, `$srcY` koordinátáktól kezdve `$srcW` szélességgel és `$srcH` magassággal. A definiált rész a `$dstX` és `$dstY` koordinátákra lesz másolva. ([több |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Másolja a `$src` egy részét a képre a `$srcX`, `$srcY` koordinátáktól kezdve `$srcW` szélességgel és `$srcH` magassággal. A definiált rész a `$dstX` és `$dstY` koordinátákra lesz másolva. ([több |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Másolja a `$src` egy részét a képre a `$srcX`, `$srcY` koordinátáktól kezdve `$srcW` szélességgel és `$srcH` magassággal. A definiált rész a `$dstX` és `$dstY` koordinátákra lesz másolva.

Ez a függvény azonos a `copyMerge()` függvénnyel, azzal a kivétellel, hogy az egyesítéskor megőrzi a forrás árnyalatát azáltal, hogy a cél pixeleket szürkeárnyalatosra konvertálja a másolási művelet előtt. ([több |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Másol egy téglalap alakú részt az egyik képről a másikra, simán interpolálva a képpontok értékeit, így különösen a kép méretének csökkentésekor is megmarad a nagy tisztaság.

Más szavakkal, a `copyResampled()` vesz egy téglalap alakú területet a `$src`-ből `$srcW` szélességgel és `$srcH` magassággal a (`$srcX`, `$srcY`) pozícióban, és elhelyezi azt a kép egy téglalap alakú területére `$dstW` szélességgel és `$dstH` magassággal a (`$dstX`, `$dstY`) pozícióban.

Ha a forrás- és célkoordináták, a szélesség és a magasság eltérőek, a képfragmentum megfelelő nyújtása vagy zsugorítása történik. A koordináták a bal felső sarokra vonatkoznak. Ezt a funkciót ugyanazon a képen belüli területek másolására is lehet használni, de ha a területek átfedik egymást, az eredmények nem lesznek kiszámíthatóak. ([több |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Másol egy téglalap alakú részt az egyik képről a másikra. Más szavakkal, a `copyResized()` vesz egy téglalap alakú területet a `$src`-ből `$srcW` szélességgel és `$srcH` magassággal a (`$srcX`, `$srcY`) pozícióban, és elhelyezi azt a kép egy téglalap alakú területére `$dstW` szélességgel és `$dstH` magassággal a (`$dstX`, `$dstY`) pozícióban.

Ha a forrás- és célkoordináták, a szélesség és a magasság eltérőek, a képfragmentum megfelelő nyújtása vagy zsugorítása történik. A koordináták a bal felső sarokra vonatkoznak. Ezt a funkciót ugyanazon a képen belüli területek másolására is lehet használni, de ha a területek átfedik egymást, az eredmények nem lesznek kiszámíthatóak. ([több |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Levágja a képet a megadott téglalap alakú területre. A méreteket meg lehet adni egész számként pixelekben vagy stringként százalékban (például `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, ?ImageColor $color=null): Image .[method]
-------------------------------------------------------------------------------------
Automatikusan levágja a képet a megadott `$mode` szerint. ([több |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------
Rajzol egy ellipszist a megadott koordinátákon középponttal. ([több |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, ImageColor $color): void .[method]
-------------------------------------------------------
Kitölt egy területet a megadott koordinátától kezdve (bal felső sarok 0, 0) a megadott `$color` színnel. ([több |https://www.php.net/manual/en/function.imagefill])


filledArc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------------------------------------------------
Rajzol egy részleges ívet a megadott koordinátákon középponttal. ([több |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------------
Rajzol egy ellipszist a megadott koordinátákon középponttal. ([több |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------------
Létrehoz egy kitöltött sokszöget a képen. ([több |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------
Létrehoz egy `$color` színnel kitöltött téglalapot a képen, a `$x1` & `$y1` ponttól kezdve és a `$x2` & `$y2` ponttal végződve. A 0, 0 pont a kép bal felső sarka. ([több |https://www.php.net/manual/en/function.imagefilledrectangle])


filledRectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------------
Létrehoz egy `$color` színnel kitöltött téglalapot a képen, a `$left` & `$top` ponttól kezdve `$width` szélességgel és `$height` magassággal. A 0, 0 pont a kép bal felső sarka.


fillToBorder(int $x, int $y, int $border, ImageColor $color): void .[method]
----------------------------------------------------------------------------
Kitöltést rajzol, amelynek szegélyszínét a `$border` határozza meg. A kitöltés kezdőpontja `$x`, `$y` (bal felső sarok 0, 0), és a terület a `$color` színnel van kitöltve. ([több |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Alkalmazza a megadott `$filtertype` szűrőt a képre. ([több |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Tükrözi a képet a megadott `$mode` segítségével. ([több |https://www.php.net/manual/en/function.imageflip])


ftText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
----------------------------------------------------------------------------------------------------------------------------------------
Szöveget ír a képbe. ([több |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Gamma korrekciót alkalmaz a képre a bemeneti és kimeneti gamma értékekhez viszonyítva. ([több |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Visszaadja az aktuális vágási területet, azaz azt a területet, amelyen kívül nem rajzolódnak pixelek. ([több |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Visszaadja a kép magasságát.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Visszaadja az eredeti erőforrást.


getWidth(): int .[method]
-------------------------
Visszaadja a kép szélességét.


interlace(?int $interlace=null): int .[method]
----------------------------------------------
Be- vagy kikapcsolja az átlapolt módot. Ha az átlapolt mód be van állítva, és a kép JPEG formátumban van mentve, akkor progresszív JPEG-ként lesz mentve. ([több |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Megállapítja, hogy a kép truecolor-e. ([több |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Beállítja az alfa keverési jelzőt a réteghatások használatához. ([több |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
---------------------------------------------------------------------------
Vonalat rajzol két megadott pont között. ([több |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, ImageColor $color): void .[method]
-------------------------------------------------------------
Nyitott sokszöget rajzol a képre. Ellentétben a `polygon()` függvénnyel, az utolsó és az első pont között nem rajzolódik vonal. ([több |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Másolja a palettát a `$source`-ból a képbe. ([több |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Átalakít egy paletta alapú képet teljes színű képpé. ([több |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Másolja az `$image`-et a képbe a `$left` és `$top` koordinátákra. A koordinátákat meg lehet adni egész számként pixelekben vagy stringként százalékban (például `'50%'`).


polygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------
Sokszöget hoz létre a képen. ([több |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------
Téglalapot hoz létre a megadott koordinátákon. ([több |https://www.php.net/manual/en/function.imagerectangle])


rectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------
Téglalapot hoz létre a megadott koordinátákon.


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Átméretezi a képet, [további információk|#Změna velikosti]. A méreteket meg lehet adni egész számként pixelekben vagy stringként százalékban (például `'50%'`).


resolution(?int $resX=null, ?int $resY=null): mixed .[method]
-------------------------------------------------------------
Beállítja vagy visszaadja a kép felbontását DPI-ben (pont per hüvelyk). Ha egyik opcionális paraméter sincs megadva, az aktuális felbontás indexelt tömbként kerül visszaadásra. Ha csak a `$resX` van megadva, a vízszintes és függőleges felbontás erre az értékre lesz beállítva. Ha mindkét opcionális paraméter meg van adva, a vízszintes és függőleges felbontás ezekre az értékekre lesz beállítva.

A felbontás csak metaadatként használatos, amikor a képeket olyan formátumokban olvassák és írják, amelyek támogatják ezt a fajta információt (jelenleg PNG és JPEG). Nincs hatással semmilyen rajzolási műveletre. Az új képek alapértelmezett felbontása 96 DPI. ([több |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Elforgatja a képet a megadott `$angle` szöggel fokban. A forgatás középpontja a kép közepe, és a forgatott kép méretei eltérhetnek az eredeti kép méreteitől. ([több |https://www.php.net/manual/en/function.imagerotate])

.[note]
*Bundled GD extension* jelenlétét igényli, tehát nem biztos, hogy mindenhol működik.


save(string $file, ?int $quality=null, ?int $type=null): void .[method]
-----------------------------------------------------------------------
Elmenti a képet egy fájlba.

A tömörítés minősége 0..100 tartományban van JPEG (alapértelmezett 85), WEBP (alapértelmezett 80) és AVIF (alapértelmezett 30) esetén, és 0..9 tartományban PNG (alapértelmezett 9) esetén. Ha a típus nem egyértelmű a fájlkiterjesztésből, megadhatja az `ImageType` konstansok egyikével.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Beállítja a jelzőt, hogy a PNG képek mentésekor megőrizze-e a teljes alfa csatorna információt (ellentétben az egyszínű átlátszósággal).

Az alfablendinget ki kell kapcsolni (`alphaBlending(false)`), hogy az alfa csatorna először megmaradjon. ([több |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Méretezi a képet a megadott interpolációs algoritmus segítségével. ([több |https://www.php.net/manual/en/function.imagescale])


send(int $type=ImageType::JPEG, ?int $quality=null): void .[method]
-------------------------------------------------------------------
Kimenti a képet a böngészőbe.

A tömörítés minősége 0..100 tartományban van JPEG (alapértelmezett 85), WEBP (alapértelmezett 80) és AVIF (alapértelmezett 30) esetén, és 0..9 tartományban PNG (alapértelmezett 9) esetén.


setBrush(Image $brush): void .[method]
--------------------------------------
Beállítja az ecset képét, amelyet minden vonalrajzoló funkció (például `line()` és `polygon()`) használni fog, amikor speciális IMG_COLOR_BRUSHED vagy IMG_COLOR_STYLEDBRUSHED színekkel rajzolnak. ([több |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Beállítja az aktuális vágási területet, azaz azt a területet, amelyen kívül nem rajzolódnak pixelek. ([több |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Beállítja az interpolációs módszert, amely befolyásolja a `rotate()` és `affine()` metódusokat. ([több |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, ImageColor $color): void .[method]
-----------------------------------------------------------
Pixelt rajzol a megadott koordinátára. ([több |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Beállítja a stílust, amelyet minden vonalrajzoló funkció (például `line()` és `polygon()`) használni fog, amikor speciális IMG_COLOR_STYLED színnel vagy IMG_COLOR_STYLEDBRUSHED színű képekkel rajzolnak vonalakat. ([több |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Beállítja a vonalak vastagságát téglalapok, sokszögek, ívek stb. rajzolásakor `$thickness` pixelre. ([több |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Beállítja a csempe képét, amelyet minden régiókitöltő funkció (például `fill()` és `filledPolygon()`) használni fog, amikor speciális IMG_COLOR_TILED színnel töltenek ki.

A csempe egy kép, amelyet egy terület ismétlődő mintával való kitöltésére használnak. Bármilyen képet lehet csempeként használni, és a csempe kép átlátszó színindexének a `colorTransparent()` segítségével történő beállításával olyan csempét lehet létrehozni, ahol az alapul szolgáló terület bizonyos részei átlátszanak. ([több |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Élesíti a képet.

.[note]
*Bundled GD extension* jelenlétét igényli, tehát nem biztos, hogy mindenhol működik.


toString(int $type=ImageType::JPEG, ?int $quality=null): string .[method]
-------------------------------------------------------------------------
Elmenti a képet egy stringbe.

A tömörítés minősége 0..100 tartományban van JPEG (alapértelmezett 85), WEBP (alapértelmezett 80) és AVIF (alapértelmezett 30) esetén, és 0..9 tartományban PNG (alapértelmezett 9) esetén.


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Átalakít egy truecolor képet palettás képpé. ([több |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
-----------------------------------------------------------------------------------------------------------------------------------------
Kimenti a megadott szöveget a képbe. ([több |https://www.php.net/manual/en/function.imagettftext])
