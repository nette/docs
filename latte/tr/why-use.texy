Neden Şablon Kullanmalı?
************************


PHP'de neden bir şablonlama sistemi kullanmalıyım? .[#toc-why-should-i-use-a-templating-system-in-php]
------------------------------------------------------------------------------------------------------

Öncelikle, PHP'nin ilginç kıvrımlarla dolu tarihini kısaca hatırlayalım. HTML şablonu oluşturmak için kullanılan ilk programlama dillerinden biri C idi. Rasmus Lerdorf, arka uçta C ile dinamik HTML üretimini kolaylaştırmak için PHP'yi yarattı. PHP başlangıçta bir şablonlama dili olarak tasarlanmıştı, ancak zamanla daha fazla özellik kazandı ve tam teşekküllü bir programlama dili haline geldi.

Bununla birlikte, hala bir şablonlama dili olarak işlev görmektedir. PHP dosyaları HTML sayfaları olarak kullanılabilir, burada bir değişkeni `<?= $foo ?>`.

PHP'nin tarihinin başlarında, Smarty şablonlama sistemi, görünümü (HTML/CSS) uygulama mantığından kesin olarak ayırmak için tanıtıldı. Yetenekleri PHP ile karşılaştırıldığında kasıtlı olarak sınırlıydı, bu nedenle bir geliştirici örneğin bir şablondan bir veritabanını sorgulayamazdı. Ancak bu sistemler ek bağımlılık getirdi, proje karmaşıklığını artırdı ve yeni bir Smarty dilinin öğrenilmesini gerektirdi. Faydaları tartışmalıydı ve şablonlar için düz PHP kullanılmaya devam etti.

Zaman içinde şablon sistemleri daha kullanışlı hale gelmiştir. Giderek artan sayıda programcı ve şirket güvenliğin önemini fark etti. [XSS gibi |safety-first] güvenlik açıklarının varlığının farkına vardılar. Bir değişkeni görüntülemenin doğru yolu `<?= $foo ?>` ama `<?= htmlspecialchars($foo) ?>`ve kaçmayı ihmal etmek, yani `htmlspecialchars()` işlevini kullanmak, ciddi bir güvenlik ihlaline neden olabilir. Şablon sistemleri otomatik kaçış özelliğini tanıttı, bu nedenle sadece `{$foo}` yazmak yeterliydi ve değişken kaçış dahil olarak görüntülenecekti.

Şablon sistemleri kalıtım, sandboxing ve diğer faydalı özellikler için destek getirerek şablon yazmayı PHP'den çok daha basit hale getirdi. Bir noktada, şablonlama sistemlerinin faydaları, yeni bağımlılık getirme konusundaki endişelerden önemli ölçüde ağır bastı.


Neden Latte şablonlama sistemini kullanmalıyım? .[#toc-why-should-i-use-the-latte-templating-system]
----------------------------------------------------------------------------------------------------

Bunun başlıca nedenleri güvenlik ve sözdizimidir.

Twig, Blade ya da Smarty gibi tüm şablon sistemleri, var oldukları süre boyunca otomatik kaçış şeklinde XSS koruması sunmuşlardır. Ancak Latte, otomatik kaçışın gerçekten işlevsel olabilmesi için sistemin HTML'yi anlaması gerektiğini fark ederek daha da ileri gitti. Sadece bir karakter dizisini değil, aynı zamanda etiketleri, nitelikleri vb. de tanıması gerekiyordu. Bunun nedeni, HTML metni içinde, HTML etiketleri içinde ve JavaScript vb. içinde farklı kaçış yöntemlerinin gerekli olmasıdır. Latte HTML'yi anlamayı ve bu bağlamların her birinde [uygun |safety-first#Context-Aware Escaping] şekilde kaçmayı öğrendi. Böylece bağlama duyarlı kaçış yöntemine sahip ilk ve şu ana kadar tek PHP şablonlama sistemi oldu.

Latte gerçekten güvenli bir şablonlama sistemini temsil ederken, diğer sistemler yanlış bir güvenlik hissi yaratma eğilimindedir.

Latte'nin bir diğer önemli avantajı da PHP sözdizimini kullanmasıdır, bu nedenle programcının / kodlayıcının yeni bir dil öğrenmesi gerekmez, ancak zaten iyi bildiklerini kullanabilir.


Latte, Twig ve Blade gibi şablonlama sistemleri arasındaki temel farklar nelerdir? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Latte, Twig ve Blade gibi şablonlama sistemleri arasındaki farklar temel olarak sözdizimleri, güvenlikleri ve çerçevelerle entegrasyonlarında yatmaktadır:

- Latte: PHP dili sözdizimini kullanarak öğrenmeyi ve kullanmayı kolaylaştırır. XSS saldırılarına karşı birinci sınıf koruma sağlar.
- Twig: PHP'den oldukça farklı olan Python benzeri sözdizimi kullanır. Bağlam ayrımı yapmadan kaçar. Symfony çerçevesi ile iyi entegre edilmiştir.
- Blade: PHP ve özel sözdiziminin bir karışımını kullanır. Bağlam ayrımı olmadan kaçış yapar. Laravel özellikleri ve ekosistemi ile sıkı bir şekilde entegre edilmiştir.


Şirketler için bir şablon sistemi kullanmaya değer mi? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
----------------------------------------------------------------------------------------------------------------------

İlk olarak, eğitim, kullanım ve genel faydalarla ilgili maliyetler sisteme bağlı olarak önemli ölçüde değişir. Latte şablonlama sistemi, PHP sözdizimini kullanması sayesinde, bu dile zaten aşina olan programcılar için öğrenmeyi büyük ölçüde kolaylaştırır. Bir programcının Latte ile yeterince tanışması genellikle birkaç saat alır, bu da eğitim maliyetlerini azaltır ve teknolojinin benimsenmesini ve en önemlisi günlük kullanımda verimliliği hızlandırır.

Ayrıca Latte, içeriğe duyarlı benzersiz kaçış teknolojisi sayesinde XSS güvenlik açığına karşı yüksek düzeyde koruma sağlar. Bu koruma, web uygulaması güvenliğini sağlamak ve kullanıcıları veya şirket verilerini tehlikeye atabilecek saldırı riskini en aza indirmek için çok önemlidir. Web uygulaması güvenliği, bir şirketin iyi itibarını korumak için de önemlidir. Güvenlik sorunları müşterilerin güven kaybına yol açabilir ve şirketin pazardaki itibarına zarar verebilir.

Latte kullanmak, her ikisini de kolaylaştırarak genel geliştirme ve bakım maliyetlerini de azaltır. Bu nedenle, bir şablonlama sistemi kullanmak kesinlikle buna değer.


Latte web uygulama performansını ve sunucu kaynaklarını nasıl etkiler? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-----------------------------------------------------------------------------------------------------------------------------------------------------

Latte şablonları hızlı bir şekilde işlense de, bu özellik gerçekten önemli değildir. Bunun nedeni, dosyaların ayrıştırılmasının ilk görüntüleme sırasında yalnızca bir kez gerçekleşmesidir. Daha sonra PHP koduna derlenir, diskte saklanır ve sonraki her istekte yeniden derleme gerektirmeden çalıştırılırlar.

Üretim ortamında bu şekilde çalışır. Geliştirme sırasında, Latte şablonları içerikleri her değiştiğinde yeniden derlenir, böylece geliştirici her zaman geçerli sürümü görür.
