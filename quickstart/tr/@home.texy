İlk Başvurunuzu Oluşturun!
**************************

.[perex]
Yorumlarla basit bir blog oluştururken Nette Framework'ü tanıyın. Hadi başlayalım!

İlk iki bölümden sonra, kendi çalışan blogunuza sahip olacaksınız ve harika gönderilerinizi yayınlamaya hazır olacaksınız, ancak bu iki bölümü tamamladıktan sonra özellikler oldukça sınırlı olacaktır. Kullanıcılarınız için işleri daha güzel hale getirmek için sonraki bölümleri de okumalı ve uygulamanızı geliştirmeye devam etmelisiniz.

[Uygulamanın tamamını GitHub'da |https://github.com/nette-examples/quickstart/tree/v4.0] bulabilirsiniz.

Lütfen [tam özellikli IDE'yi ve gerekli tüm eklentileri |best-practices:editors-and-tools] yükleyin, sizi son derece verimli hale getirecektir.

Bu Hızlı Başlangıç, Nette Framework 3.1 ve PHP 8.0 veya daha yenisi için yazılmıştır.

Nette Framework'ü manuel olarak indirebilirsiniz, ancak yeni bir projeye başlamanın önerilen yolu [Composer |best-practices:composer] kullanmaktır. Composer'ı bilmiyorsanız, kesinlikle bununla başlamalısınız. Gerçekten basit ve kullanışlı bir araçtır, [belgelerine |https://getcomposer.org/doc/] göz atın.

Composer ile Nette Framework içeren Web Projesi olarak bilinen uygulama iskeletini çok kolay bir şekilde indirebilir ve kurabilirsiniz. Bunun için komut satırında webroot dizininizi (örneğin `/var/www` veya `C:\InetPub`) bulun ve aşağıdaki komutu çalıştırın:

```shell
composer create-project nette/web-project nette-blog
```

Web Projesi `nette-blog` dizinine indirilecektir.

.[note]
Composer'ı kullanamadıysanız, arşivi [indirip |https://github.com/nette/web-project/archive/preloaded.zip] ayıklayın ve web sunucusunun kök dizinine kopyalayıp `nette-blog` olarak yeniden adlandırın. Çerçevenin tamamı `vendor` klasöründe bulunur.

MacOS veya Linux (veya Unix tabanlı başka bir sistem) üzerinde geliştirme yapıyorsanız, web sunucusuna [yazma ayrıcalıklarını yapılandırmanız |nette:troubleshooting#Setting directory permissions] gerekir.


Karşılama Sayfası .[#toc-the-welcome-page]
==========================================

Şu anda, Web Projesinin karşılama sayfası çalışıyor olmalıdır. Tarayıcınızı açıp aşağıdaki URL'ye giderek deneyin:

```
http://localhost/nette-blog/www/
```

ve Nette Framework karşılama sayfasını görmelisiniz:

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

Uygulama çalışır ve artık üzerinde değişiklik yapmaya başlayabilirsiniz.

.[note]
Eğer bir sorununuz varsa, [bu birkaç ipucunu deneyin |nette:troubleshooting#Nette Is Not Working, White Page Is Displayed].


Web Projesinin İçeriği .[#toc-web-project-s-content]
====================================================

Web Projesi aşağıdaki yapıya sahiptir:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← application directory
│   ├── <b>Presenters/</b>   ← presenter classes
│   │   └── <b>templates/</b>← templates
│   ├── <b>Router/</b>       ← configuration of URL addresses
│   └── <b>Bootstrap.php</b> ← booting class Bootstrap
├── <b>bin/</b>              ← scripts for the command line
├── <b>config/</b>           ← configuration files
├── <b>log/</b>              ← error logs
├── <b>temp/</b>             ← temporary files, cache, …
├── <b>vendor/</b>           ← libraries installed by Composer
│   └── <b>autoload.php</b>  ← autoloading of libraries installed by Composer
└── <b>www/</b>              ← public folder - the only place accessible from browser
    └── <b>index.php</b>     ← initial file that launches the application
\--

`www` dizini resim, JavaScript, CSS ve diğer herkese açık dosyaları depolamak içindir. Bu, tarayıcıdan doğrudan erişilebilen tek dizindir, bu nedenle web sunucunuzun kök dizinini buraya yönlendirebilirsiniz (Apache'de yapılandırabilirsiniz, ancak şu anda önemli olmadığı için bunu daha sonra yapalım).

Sizin için en önemli dizin `app/`. Orada `Bootstrap.php` dosyasını bulabilirsiniz, içinde çerçeveyi yükleyen ve uygulamayı yapılandıran bir sınıf vardır. [Otomatik yüklemeyi |robot-loader:] etkinleştirir ve [hata ay |tracy:] ıklayıcı ile [rotaları |application:routing] ayarlar.


Temizlik .[#toc-cleanup]
========================

Web Projesi, kaldırabileceğimiz bir karşılama sayfası içerir - `app/Presenters/templates/Homepage/default.latte` dosyasını silmekten ve "Merhaba dünya!" metniyle değiştirmekten çekinmeyin.


[* qs-hello.webp .{url:-} *]


Tracy (Hata Ayıklayıcı) .[#toc-tracy-debugger]
==============================================

Geliştirme için son derece önemli bir araç [Tracy adlı bir hata ayıklayıcıdır |tracy:]. `app/Presenters/HomepagePresenter.php` dosyanızda bazı hatalar yapmaya çalışın (örneğin HomepagePresenter sınıfının tanımından bir küme parantezini kaldırın) ve ne olacağını görün. Anlaşılabilir bir hata açıklamasıyla birlikte kırmızı ekranlı bir sayfa açılacaktır.

[* qs-tracy.webp .{url:-}(debugger screen) *]

Tracy, hataları ararken size önemli ölçüde yardımcı olacaktır. Ayrıca, önemli çalışma zamanı verileri hakkında sizi bilgilendiren sağ alt köşedeki yüzen Tracy Çubuğuna da dikkat edin.

[* qs-tracybar.webp .{url:-} *]

Üretim modunda, Tracy elbette devre dışıdır ve herhangi bir hassas bilgiyi açığa çıkarmaz. Bunun yerine tüm hatalar `log/` dizinine kaydedilir. Sadece deneyin. `app/Bootstrap.php` adresinde, aşağıdaki kod parçasını bulun, satırdaki yorumu kaldırın ve yöntem çağrısı parametresini `false` olarak değiştirin, böylece aşağıdaki gibi görünür:

```php .{file:app/Bootstrap.php}
...
$configurator->setDebugMode(false);
$configurator->enableTracy(__DIR__ . '/../log');
...
```

Web sayfasını yeniledikten sonra, kırmızı ekran sayfasının yerini kullanıcı dostu mesaj alacaktır:

[* qs-fatal.webp .{url:-}(error screen) *]

Şimdi, `log/` dizinine bakın. Orada hata günlüğünü (exception.log dosyasında) ve ayrıca hata mesajını içeren sayfayı (adı `exception` ile başlayan bir HTML dosyasına kaydedilmiş olarak) bulabilirsiniz.

`// $configurator->setDebugMode(false);` satırını tekrar yorumlayın. Tracy, `localhost` ortamında geliştirme modunu otomatik olarak etkinleştirir ve başka yerlerde devre dışı bırakır.

Şimdi hatayı düzeltebilir ve uygulamamızı tasarlamaya devam edebiliriz.


Teşekkür gönderin .[#toc-send-thanks]
=====================================

Size açık kaynak yazarlarını mutlu edecek bir numara göstereceğiz. Projenizin kullandığı kütüphanelere GitHub'da kolayca bir yıldız verebilirsiniz. Sadece çalıştırın:

```shell
composer thanks
```

Dene bakalım!

{{priority: -1}}
{{sitename: Nette Quickstart}}
