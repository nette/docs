Segítők
*******


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` kibővíti a `SimpleXMLElement` oldalt egyszerű HTML vagy XML lekérdezéssel CSS szelektorok segítségével.

```php
# create DomQuery from HTML string
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# test element existence using CSS selectors
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# find elements as DomQuery array
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# test if element matches selector (since version 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# find closest ancestor matching selector (since 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` fájlokat emulál a memóriában, hogy segítsen tesztelni egy olyan kódot, amely olyan függvényeket használ, mint a `fopen()`, `file_get_contents()` vagy `parse_ini_file()`. Például:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Ez nem egy állítás, hanem egy segédprogram a privát metódusok és tulajdonságobjektumok teszteléséhez.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // hozzáférhető privát $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
A `purge()` metódus létrehozza a megadott könyvtárat, és ha már létezik, törli annak teljes tartalmát. Ez praktikus az ideiglenes könyvtárak létrehozásához. Például a `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
A tesztek párhuzamosan futnak. Néha nincs szükségünk arra, hogy a tesztek futása ne fedje egymást. Jellemzően az adatbázis-teszteknek elő kell készíteniük az adatbázis tartalmát, és nem kell, hogy a teszt futási ideje alatt semmi ne zavarja őket. Ezekben az esetekben a `Tester\Environment::lock($name, $dir)` címet használjuk:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Az első argumentum a zár neve. A második a zárolás mentésére szolgáló könyvtár elérési útvonala. A zárat megszerző teszt fut le először. A többi tesztnek meg kell várnia, amíg a lezárás befejeződik.


Environment::bypassFinals() .[filter]
-------------------------------------
A `final` címmel jelölt osztályokat vagy metódusokat nehéz tesztelni. A `Tester\Environment::bypassFinals()` meghívása egy teszt kezdetén azt okozza, hogy a `final` kulcsszavak a kód betöltése során eltávolításra kerülnek.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- javítja a hibadump olvashatóságát (színezéssel együtt), egyébként alapértelmezett PHP stack trace kerül kiírásra.
- lehetővé teszi annak ellenőrzését, hogy az állítások meg lettek-e hívva a tesztben, különben a (pl. elfelejtett) állítások nélküli tesztek is átmennek.
- automatikusan elindítja a kódlefedettségi gyűjtőt, ha a `--coverage` címet használja (később ismertetjük).
- kiírja az OK vagy FAILURE állapotot a szkript végén.


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Létrehozza a `test()`, `testException()`, `setUp()` és `tearDown()` globális függvényeket, amelyekre a teszteket feloszthatja.

```php
test('test description', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Lehetővé teszi, hogy megtudja, hogy a tesztet közvetlenül vagy a Tester segítségével futtatták-e.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# run by Tester
} else {
	# another way
}
```


Environment::VariableThread .[filter]
-------------------------------------
A Tester párhuzamosan futtatja a teszteket adott számú szálon. A szálszámot egy környezeti változóban találjuk meg, ha érdekel minket:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::VariableThread);
```
