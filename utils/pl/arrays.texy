Praca w terenie
***************

.[perex]
Ta strona jest poświęcona klasom [Nette\Utils\Arrays |#Arrays], [ArrayHash |#ArrayHash] i [ArrayList |#ArrayList], które są związane z tablicami.


Instalacja:

```shell
composer require nette/utils
```


Tablice .[#toc-arrays]
======================

[api:Nette\Utils\Arrays] jest klasą statyczną zawierającą przydatne funkcje do pracy z tablicami.

Poniższe przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Arrays;
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Sprawdza tablicę pod kątem obecności wartości. Stosuje porównanie ścisłe (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(iterable $array, callable $callback): bool .[method]
----------------------------------------------------------

Testuje czy wszystkie elementy w tablicy przechodzą test zaimplementowany w `$callback` z podpisem `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Zobacz [some() |#some].


first(array $array): mixed .[method]
------------------------------------

Zwraca pierwszy wpis z tablicy lub null jeśli tablica jest pusta. Nie zmienia wewnętrznego wskaźnika w przeciwieństwie do `reset()`.

```php
Arrays::first([1, 2, 3]); // 1
Arrays::first([]);        // null
```


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Konsoliduje wielopoziomową tablicę w jedną płaską.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Zwraca element `$array[$key]`. Jeśli nie istnieje, to albo rzuca wyjątek `Nette\InvalidArgumentException`, albo jeśli podano trzeci parametr `$default`, to zwraca to.

```php
// jeśli $array['foo'] nie istnieje, rzuca wyjątek
$value = Arrays::get($array, 'foo');

// jeśli $array['foo'] nie istnieje, zwróć 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Klucz `$key` może być również tablicą.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrátí 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Uzyskuje referencję do określonego elementu tablicy. Jeśli element nie istnieje, zostanie utworzony z wartością null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// zwraca odwołanie do $array['foo']
```

Podobnie jak funkcja [get() |#get], może ona pracować z tablicami wielowymiarowymi.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// vrátí referenci na $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Zwraca tylko te elementy tablicy, których wartość pasuje do wyrażenia regularnego `$pattern`. Jeśli `$invert` jest `true`, to z drugiej strony zwraca elementy, które nie pasują. Błąd kompilacji lub przetwarzania wyrażeń rzuca wyjątek `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// zwraca tylko elementy tablicy składające się z cyfr
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Wstawia zawartość pola `$inserted` do pola `$array` bezpośrednio za elementem o kluczu `$key`. Jeśli `$key` jest `null` (lub nie ma go w polu), to jest wstawiany na końcu.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Wstawia zawartość pola `$inserted` do pola `$array` przed elementem o kluczu `$key`. Jeśli `$key` jest `null` (lub nie ma go w polu), jest wstawiany na początku.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Wywołuje wszystkie wywołania zwrotne i zwraca tablicę wyników.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Wywołuje metodę na każdym obiekcie w tablicy i zwraca tablicę wyników.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Sprawdza, czy tablica jest indeksowana przez rosnącą serię kluczy numerycznych zaczynających się od zera, a.k.a. lista.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array): mixed .[method]
-----------------------------------

Zwraca ostatni wpis tablicy lub null jeśli tablica jest pusta. Nie zmienia wewnętrznego wskaźnika w przeciwieństwie do `end()`.

```php
Arrays::last([1, 2, 3]); // 3
Arrays::last([]);        // null
```


map(iterable $array, callable $callback): array .[method]
---------------------------------------------------------

Wywołuje `$callback` na wszystkich elementach tablicy i zwraca tablicę wartości zwrotnych. Callback ma podpis `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Rekursywnie łączy dwa pola. Jest to przydatne na przykład do łączenia struktur drzewiastych. Przy scalaniu kieruje się tymi samymi zasadami co operator `+` stosowany do tablic, czyli dodaje parę klucz/wartość z drugiej tablicy do pierwszej i pozostawia wartość z pierwszej tablicy w przypadku kolizji kluczy.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Wartości z drugiej tablicy są zawsze dodawane do końca pierwszej. Zniknięcie wartości `10` z drugiego pola może wydawać się nieco mylące. Zauważ, że ta wartość, podobnie jak wartość `5` v poli prvním mají přiřazený stejný numerický klíč `0`, dlatego w tablicy wynikowej znajduje się tylko element z pierwszego pola.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Normalizuje tablicę do tablicy asocjacyjnej. Zastępuje klawisze numeryczne ich wartościami, nowa wartość będzie miała postać `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Zwraca i usuwa wartość elementu z tablicy. Jeśli nie istnieje, rzuca wyjątek lub zwraca wartość `$default`, jeśli jest obecny.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// rzuca Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Zmienia nazwę klucza w tablicy. Zwraca `true`, jeśli klucz został znaleziony w tablicy.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Zwraca pozycję podanego klucza w tablicy. Pozycja jest numerowana od 0. Jeśli klucz nie zostanie znaleziony, funkcja zwraca `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // vrátí 0
$position = Arrays::getKeyOffset($array, 'second'); // vrátí 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // vrátí null
```


some(iterable $array, callable $callback): bool .[method]
---------------------------------------------------------

Testuje czy przynajmniej jeden element w tablicy przechodzi test zaimplementowany w `$callback` z podpisem `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Zobacz [every() |#every].


toKey(mixed $key): string|int .[method]
---------------------------------------

Konwertuje wartość na klucz tablicy, który jest albo liczbą całkowitą albo łańcuchem.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Kopiuje elementy tablicy `$array` do obiektu `$object`, który następnie zwraca.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // nastaví $obj->foo = 1; $obj->bar = 2;
```


wrap(iterable $array, string $prefix='', string $suffix=''): array .[method]
----------------------------------------------------------------------------

Wypisuje każdy element tablicy do łańcucha i opakowuje go prefiksem `$prefix` i sufiksem `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

Obiekt [api:Nette\Utils\ArrayHash] jest potomkiem generycznej klasy stdClass i rozszerza ją o możliwość traktowania jej jako tablicy, czyli np. dostępu do członków poprzez nawiasy kwadratowe:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // notacja obiektowa działa jednocześnie
$hash->foo; // 123
```

Możesz użyć funkcji `count($hash)`, aby uzyskać liczbę członków.

Możesz iterować nad obiektem, jak w przypadku tablicy, nawet z referencją:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'nowa wartość';
}
```

Istniejącą tablicę możemy przekształcić w `ArrayHash` za pomocą metody `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Konwersja ma charakter rekurencyjny:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // objekt ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Można temu zapobiec za pomocą drugiego parametru:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // biegun
```

Przekształć z powrotem do tablicy:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] reprezentuje tablicę liniową, w której indeksy są tylko liczbami całkowitymi rosnącymi od 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Istniejące tablice mogą być przekształcone na `ArrayList` za pomocą metody `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Możesz użyć funkcji `count($list)`, aby uzyskać liczbę elementów.

Możesz iterować nad obiektem, jak w przypadku tablicy, nawet z referencją:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'nowa wartość';
}
```

Uzyskanie dostępu do kluczy poza dozwolonymi wartościami rzuca wyjątek `Nette\OutOfRangeException`:

```php
echo $list[-1]; // throws Nette\OutOfRangeException
unset($list[30]); // throws Nette\OutOfRangeException
```

Usunięcie klucza powoduje zmianę numeracji elementów:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Nowy element można dodać do początku za pomocą metody `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
