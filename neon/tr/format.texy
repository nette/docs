NEON Formatı
************

.[perex]
NEON, insan tarafından okunabilir yapılandırılmış bir veri formatıdır. Nette'de yapılandırma dosyaları için kullanılır. Ayrıca ayarlar, dil çevirileri vb. gibi yapılandırılmış veriler için de kullanılır. [Deneyin |https://ne-on.org].

NEON, *Nette Object Notation*'ın kısaltmasıdır. XML veya JSON'dan daha az karmaşık ve hantaldır, ancak benzer işlevler sunar. YAML'ye çok benzer. Ana avantajı, NEON'un DI servislerinin yapılandırılmasını [çok seksi |https://gist.github.com/dg/26baf3ce8f29d0f751e9dddfaa06504f] yapan sözde [#Varlıklar (Entities)]'a sahip olmasıdır. Ve sekmelerle girintilemeye izin verir.

NEON, kullanımı kolay olacak şekilde sıfırdan oluşturulmuştur.


Entegrasyon
===========

- NetBeans (yerleşik desteği vardır)
- PhpStorm ([eklenti |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([Nette Latte + Neon |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte]) veya [Nette for VS Code |https://marketplace.visualstudio.com/items?itemName=franken-ui.nette-for-vscode])
- Sublime Text 3 ([eklenti |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([eklenti |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([eklenti |https://github.com/fpob/nette.vim])
- Emacs ([eklenti |https://github.com/Fuco1/neon-mode])
- Prism.js ([entegre dil |https://prismjs.com/#supported-languages])


- [PHP için NEON |@home]
- [JavaScript için NEON |https://github.com/matej21/neon-js]
- [Python için NEON |https://github.com/paveldedik/neon-py].


Sözdizimi
=========

NEON'da yazılmış bir dosya genellikle bir dizi veya bir eşleme temsil eder.


Eşleme (Mapping)
----------------
Eşleme, anahtar-değer çiftleri kümesidir, PHP'de ilişkisel dizi denir. Her çift `key: value` olarak yazılır, `:` işaretinden sonraki boşluk gereklidir. Değer herhangi bir şey olabilir: karakter dizisi, sayı, boolean, null, dizi (sequence) veya başka bir eşleme.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

PHP'de aynı yapı şu şekilde yazılırdı:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Bu gösterim blok gösterimi olarak adlandırılır, çünkü tüm öğeler ayrı bir satırdadır ve aynı girintiye sahiptir (bu durumda hiçbiri). NEON ayrıca, parantez içine alınmış, girintinin rol oynamadığı ve tek tek öğelerin ayırıcısının virgül veya yeni satır olduğu eşlemelerin satır içi temsilini de destekler:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

Aynı şey birden çok satırda yazılmıştır (girintinin önemi yoktur):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

<code>: </code> yerine alternatif olarak hem blok hem de satır içi gösterimde `=` kullanılabilir:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Diziler (Sequences)
-------------------
Diziler PHP'de indekslenmiş dizilerdir. Tire `-` ile başlayıp boşlukla devam eden satırlar olarak yazılırlar. Değer yine herhangi bir şey olabilir: karakter dizisi, sayı, boolean, null, dizi veya başka bir eşleme.

```neon
- Cat
- Dog
- Goldfish
```

PHP'de aynı yapı şu şekilde yazılırdı:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Bu gösterim blok gösterimi olarak adlandırılır, çünkü tüm öğeler ayrı bir satırdadır ve aynı girintiye sahiptir (bu durumda hiçbiri). NEON ayrıca, parantez içine alınmış, girintinin rol oynamadığı ve tek tek öğelerin ayırıcısının virgül veya yeni satır olduğu dizilerin satır içi temsilini de destekler:

```neon
[Cat, Dog, Goldfish]
```

Aynı şey birden çok satırda yazılmıştır (girintinin önemi yoktur):

```neon
[
	Cat, Dog
		Goldfish
]
```

Satır içi gösterimde girintili madde işaretleri kullanılamaz.


Kombinasyonlar
--------------
Eşlemelerin ve dizilerin değerleri başka eşlemeler ve diziler olabilir. Ana rolü girinti seviyesi oynar. Aşağıdaki örnekte, dizi öğelerini belirtmek için kullanılan tire işareti, `pets` anahtarından daha büyük bir girintiye sahiptir, bu nedenle öğeler ilk satırın değeri haline gelir:

```neon
pets:
   - Cat
   - Dog
cars:
   - Volvo
   - Skoda
```

PHP'de aynı yapı şu şekilde yazılırdı:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Blok ve satır içi gösterimi birleştirmek mümkündür:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

Satır içi gösterim içinde artık blok gösterimi kullanılamaz, bu çalışmaz:

```neon
item: [
	pets:
	 - Cat     # BU MÜMKÜN DEĞİL!!!
	 - Dog
]
```

Önceki durumda, öğeleri dizi olan bir eşleme yazdık, şimdi tersini deneyelim ve eşlemeler içeren bir dizi oluşturalım:

```neon
-
	name: John
	age: 35
-
	name: Peter
	age: 28
```

Madde işaretlerinin ayrı satırlarda olması gerekmez, şu şekilde de yerleştirilebilirler:

```neon
- name: John
  age: 35
- name: Peter
  age: 28
```

Anahtarları boşluklarla bir sütuna hizalamak veya sekme kullanmak size kalmış.

PHP'de hem eşlemeler hem de diziler için aynı yapı, yani dizi kullanıldığından, her ikisi de birleştirilebilir. Girinti bu sefer aynıdır:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

PHP'de aynı yapı şu şekilde yazılırdı:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Karakter Dizileri (Strings)
---------------------------
NEON'daki karakter dizileri tek veya çift tırnak içine alınabilir. Ancak gördüğünüz gibi, tırnak işaretleri olmadan da olabilirler.

```neon
- NEON'da tırnak işareti olmayan karakter dizisi
- 'NEON'da tek tırnak işaretli karakter dizisi'
- "NEON'da çift tırnak işaretli karakter dizisi"
```

Bir karakter dizisi `# " ' , : = - [ ] { } ( )` karakterlerini içeriyorsa, bunlar NEON sözdizimi ile karıştırılabileceğinden tırnak içine alınmalıdır. Tek tırnak işaretleri kullanmanızı öneririz, çünkü bunlarda kaçış kullanılmaz. Böyle bir karakter dizisinde tırnak işareti yazmanız gerekiyorsa, çiftleyin:

```neon
'Tek tırnak işaretli karakter dizisi içinde tırnak işareti '''
```

Çift tırnak işaretleri, ters eğik çizgiler `\` kullanarak özel karakterleri yazmak için kaçış dizilerini kullanmanıza olanak tanır. JSON formatındaki tüm kaçış dizileri desteklenir ve ek olarak `\_`, yani bölünemez boşluk, yani `\u00A0` desteklenir.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Karakter dizilerini tırnak içine almanız gereken başka durumlar da vardır:
- boşluklarla başlar veya biterler
- sayılar, booleanlar veya null gibi görünürler
- NEON onları [#tarih] olarak anlardı


Çok Satırlı Karakter Dizileri
-----------------------------

Çok satırlı bir karakter dizisi, ayrı satırlarda üçlü tırnak işaretiyle başlar ve biter. İlk satırın girintisi tüm satırlar için yok sayılır:

```neon
'''
	ilk satır
		ikinci satır
	üçüncü satır
	'''
```

PHP'de aynı şeyi şu şekilde yazardık:

```php
"ilk satır\n\tikinci satır\nüçüncü satır" // PHP
```

Kaçış dizileri yalnızca tırnak yerine çift tırnak içine alınmış karakter dizilerinde çalışır:

```neon
"""
	Telif Hakkı \u00A9
"""
```


Sayılar
-------
NEON, bilimsel gösterimde yazılmış sayıları ve ayrıca ikili, sekizlik ve onaltılık tabandaki sayıları anlar:

```neon
- 12         # tamsayı
- 12.3       # float
- +1.2e-34   # üstel sayı

- 0b11010    # ikili sayı
- 0o666      # sekizlik sayı
- 0x7A       # onaltılık sayı
```


Null Değerler
-------------
Null, NEON'da `null` kullanılarak veya değer belirtmeyerek ifade edilebilir. İlk harfi büyük veya tüm harfleri büyük olan varyantlara da izin verilir.

```neon
a: null
b:
```


Boolean Değerler
----------------
Mantıksal değerler NEON'da `true` / `false` veya `yes` / `no` kullanılarak ifade edilir. İlk harfi büyük veya tüm harfleri büyük olan varyantlara da izin verilir.

```neon
[true, TRUE, True, false, yes, no]
```


Tarih
-----
NEON, tarihleri ifade etmek için aşağıdaki formatları kullanır ve bunları otomatik olarak `DateTimeImmutable` nesnelerine dönüştürür:

```neon
- 2016-06-03                  # tarih
- 2016-06-03 19:00:00         # tarih & saat
- 2016-06-03 19:00:00.1234    # tarih & mikrosaniye
- 2016-06-03 19:00:00 +0200   # tarih & saat & bölge
- 2016-06-03 19:00:00 +02:00  # tarih & saat & bölge
```


Varlıklar (Entities)
--------------------
Varlık, bir fonksiyon çağrısını andıran bir yapıdır:

```neon
Column(type: int, nulls: yes)
```

PHP'de [api:Nette\Neon\Entity] nesnesi olarak ayrıştırılır:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Varlıklar zincirlenebilir de:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Bu, PHP'de şu şekilde ayrıştırılır:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

Parantez içinde, eşlemeler ve diziler için kullanılan satır içi gösterim kuralları geçerlidir, yani birden çok satırlı olabilir ve o zaman virgül belirtmek gerekli değildir:

```neon
Column(
	type: int
	nulls: yes
)
```


Yorumlar
--------
Yorumlar `#` karakteriyle başlar ve sağdaki tüm sonraki karakterler yok sayılır:

```neon
# bu satır yorumlayıcı tarafından yok sayılacak
street: 742 Evergreen Terrace
city: Springfield  # bu da yok sayılır
country: USA
```


Neon vs JSON
============
JSON, NEON'un bir alt kümesidir. Bu nedenle her JSON, NEON olarak ayrıştırılabilir:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

Ya tırnak işaretlerini çıkarsaydık?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

Ve süslü parantezler ve virgüller?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

Madde işaretli listeler daha okunaklı değil mi?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Yorum ekleyelim mi?

```neon
# web uygulamamın yapılandırması

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # gzip kullan

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Yaşasın, şimdi NEON sözdizimini biliyorsunuz!


{{description: NEON, verileri serileştirmek için okunması kolay bir formattır. YAML'ye benzer. Ana fark, NEON'un "varlıkları" desteklemesi ve girintileme için hem boşlukları hem de sekmeleri kullanabilmemizdir.}}
