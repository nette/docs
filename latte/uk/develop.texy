Практика для розробників
************************


Установка .[#toc-installation]
==============================

Найкращий спосіб встановлення Latte - це використання Composer:

```shell
composer require latte/latte
```

Підтримувані версії PHP (застосовується до останніх версій патча Latte):

| версія | сумісна з PHP
|-----------------|-------------------
| Latte 3.0 | PHP 8.0 - 8.2
| Latte 2.11 | PHP 7.1 - 8.2
| Latte 2.8 - 2.10| PHP 7.1 - 8.1


Як рендерити шаблон .[#toc-how-to-render-a-template]
====================================================

Як відобразити шаблон? Просто використовуйте цей простий код:

```php
$latte = new Latte\Engine;
// cache directory
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* template variables */ ];
// or $params = new TemplateParameters(/* ... */);

// render to output
$latte->render('template.latte', $params);
// or render to variable
$output = $latte->renderToString('template.latte', $params);
```

Параметрами можуть бути масиви або ще краще [об'єкти |#Parameters-as-a-Class], що забезпечить перевірку типів і пропозицію в редакторі.

.[note]
Приклади використання ви також можете знайти в репозиторії [Latte examples |https://github.com/nette-examples/latte].


Продуктивність і кешування .[#toc-performance-and-caching]
==========================================================

Шаблони Latte надзвичайно швидкі, оскільки Latte компілює їх безпосередньо в PHP-код і кешує на диску. Таким чином, вони не мають додаткових накладних витрат порівняно з шаблонами, написаними на чистому PHP.

Кеш автоматично оновлюється щоразу, коли ви змінюєте вихідний файл. Таким чином, ви можете зручно редагувати шаблони Latte під час розробки і відразу ж бачити зміни в браузері. Ви можете вимкнути цю функцію у виробничому середовищі та заощадити трохи продуктивності:

```php
$latte->setAutoRefresh(false);
```

Під час розгортання на робочому сервері початкова генерація кешу, особливо для великих додатків, може зайняти деякий час. Latte має вбудований захист від "cache stampede":https://en.wikipedia.org/wiki/Cache_stampede.
Це ситуація, коли сервер отримує велику кількість одночасних запитів, і оскільки кеш Latte ще не існує, всі вони будуть генерувати його одночасно. Що призводить до стрибків процесора.
Latte розумна, і коли є кілька одночасних запитів, тільки перший потік генерує кеш, інші чекають і потім використовують його.


Параметри як клас .[#toc-parameters-as-a-class]
===============================================

Краще, ніж передавати змінні в шаблон у вигляді масивів, створити клас. Ви отримуєте [безпечну для типів нотацію |type-system], [приємну пропозицію в IDE |recipes#Editors-and-IDE]
і спосіб [реєстрації фільтрів |extending-latte#Filters-Using-the-Class] і [функцій |extending-latte#Functions-Using-the-Class].

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Вимкнення автоматичного видалення змінної .[#toc-disabling-auto-escaping-of-variable]
=====================================================================================

Якщо змінна містить HTML-рядок, ви можете позначити її так, щоб Latte автоматично (і, отже, двічі) не екранувала її. Це дає змогу уникнути необхідності вказувати `|noescape` у шаблоні.

Найпростіший спосіб - обернути рядок в об'єкт `Latte\Runtime\Html`:

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

Latte також не екранує всі об'єкти, що реалізують інтерфейс `Latte\HtmlStringable`. Тому ви можете створити свій власний клас, метод якого `__toString()` повертатиме HTML-код, який не буде екрануватися автоматично:

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
Метод `__toString` повинен повертати коректний HTML і забезпечувати екранування параметрів, інакше може виникнути XSS-вразливість!


Як розширити Latte за допомогою фільтрів, тегів тощо. .[#toc-how-to-extend-latte-with-filters-tags-etc]
=======================================================================================================

Як додати в Latte користувацький фільтр, функцію, тег тощо? Дізнайтеся про це в розділі [Розширення Latte |extending Latte].
Якщо ви хочете повторно використовувати свої зміни в різних проєктах або поділитися ними з іншими, вам слід [створити розширення |creating-extension].


Будь-який код у шаблоні `{php ...}` .{data-version:3.0}{toc: RawPhpExtension}
=============================================================================

Всередині тега [`{do}` |tags#do] тому ви не можете, наприклад, вставляти такі конструкції, як `if ... else` або твердження, що завершуються крапкою з комою.

Однак ви можете зареєструвати розширення `RawPhpExtension`, яке додає тег `{php ...}`, який може бути використаний для вставки будь-якого PHP-коду на страх і ризик автора шаблону.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Переклад у шаблонах .{data-version:3.0}{toc: TranslatorExtension}
=================================================================

Використовуйте розширення `TranslatorExtension`, щоб додати [`{_...}` |tags#_], [`{translate}` |tags#translate] і фільтр [`translate` |filters#translate] у шаблон. Вони використовуються для перекладу значень або частин шаблону іншими мовами. Параметр - це метод (що викликається PHP), який виконує переклад:

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// create $translated from $original according to $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] in PHP 8.0
);
$latte->addExtension($extension);
```

Перекладач викликається під час виконання, коли шаблон відображається. Однак Latte може перекласти всі статичні тексти під час компіляції шаблону. Це економить продуктивність, оскільки кожен рядок перекладається тільки один раз, а отриманий переклад записується в скомпільований файл. Таким чином, у каталозі кеша створюється кілька скомпільованих версій шаблону, по одній для кожної мови. Для цього достатньо вказати мову як другий параметр:

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

Під статичним текстом мається на увазі, наприклад, `{_'hello'}` або `{translate}hello{/translate}`. Нестатичний текст, такий як `{_$foo}`, буде продовжувати перекладатися під час виконання.

Шаблон також може передавати перекладачеві додаткові параметри через `{_$original, foo: bar}` або `{translate foo: bar}`, які він отримує у вигляді масиву `$params`:

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


Налагодження та трасування .[#toc-debugging-and-tracy]
======================================================

Latte намагається зробити розробку якомога приємнішою. Для цілей налагодження існує три теги [`{dump}` |tags#dump], [`{debugbreak}` |tags#debugbreak] и [`{trace}` |tags#trace].

Ви отримаєте максимальний комфорт, якщо встановите чудовий [інструмент налагодження Tracy |tracy:] і активуєте плагін Latte:

```php
// enables Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// activates Tracy's extension
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);

```

Тепер ви бачитимете всі помилки на акуратному червоному екрані, включно з помилками в шаблонах із підсвічуванням рядків і стовпців ([відео |https://github.com/nette/tracy/releases/tag/v2.9.0]).
Водночас у правому нижньому кутку, у так званій панелі Tracy, з'явиться вкладка для Latte, де ви зможете наочно побачити всі намальовані шаблони та їхні взаємозв'язки (включно з можливістю клацнути в шаблон або скомпільований код), а також змінні:

[* latte-debugging.webp *]

Оскільки Latte компілює шаблони в читабельний PHP-код, ви можете зручно переглядати їх у вашій IDE.


Linter: Перевірка синтаксису шаблону .{data-version:2.11}{toc: Linter}
======================================================================

Інструмент Linter допоможе вам переглянути всі шаблони та перевірити їх на наявність синтаксичних помилок. Він запускається з консолі:

```shell
vendor/bin/latte-lint <path>
```

Якщо ви використовуєте користувацькі теги, також створіть свій користувацький Linter, наприклад, `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// enter the actual path to the autoload.php file
require __DIR__ . '/vendor/autoload.php';

$linter = new Latte\Tools\Linter($engine);
$linter->scanDirectory($path);

$engine = new Latte\Engine;
// registers individual extensions here
$engine->addExtension(/* ... */);

$path = $argv[1];
$linter = new Latte\Tools\Linter(engine: $engine);
$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```


Завантаження шаблонів із рядка .[#toc-loading-templates-from-a-string]
======================================================================

Вам потрібно завантажити шаблони з рядків, а не з файлів, можливо, з метою тестування? [StringLoader |extending-latte#StringLoader] допоможе вам:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Обробник винятків .[#toc-exception-handler]
===========================================

Ви можете визначити свій власний обробник очікуваних винятків. Винятки, що виникають усередині [`{try}` |tags#try] і в [пісочниці |sandbox], передаються в нього.

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Автоматичний пошук макета .[#toc-automatic-layout-lookup]
=========================================================

Використовуючи тег [`{layout}` |template-inheritance#Layout-Inheritance] шаблон визначає свій батьківський шаблон. Також можливий автоматичний пошук макета, що спростить написання шаблонів, оскільки в них не потрібно буде включати тег `{layout}`.

Це досягається таким чином:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// it returns the path to the parent template file
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

Якщо шаблон не повинен мати макета, він вкаже на це за допомогою тега `{layout none}`.
