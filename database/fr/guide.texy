Nette Database
**************

.[perex]
Nette Database est une couche de base de données puissante et élégante pour PHP, mettant l'accent sur la simplicité et les fonctionnalités intelligentes. Elle offre deux façons de travailler avec la base de données - [Explorer |Explorer] pour un développement rapide d'applications, ou [l'accès SQL |SQL way] pour travailler directement avec les requêtes.

<div class="grid gap-3">
<div>


[Accès SQL |SQL way]
====================
- Requêtes paramétrées sécurisées
- Contrôle précis sur la forme des requêtes SQL
- Lorsque vous écrivez des requêtes complexes avec des fonctionnalités avancées
- Vous optimisez les performances en utilisant des fonctions SQL spécifiques

</div>

<div>


[Explorer |Explorer]
====================
- Vous développez rapidement sans écrire de SQL
- Travail intuitif avec les relations entre les tables
- Vous apprécierez l'optimisation automatique des requêtes
- Convient pour un travail rapide et confortable avec la base de données

</div>

</div>


Installation
============

Téléchargez et installez la bibliothèque à l'aide de l'[outil Composer|best-practices:composer] :

```shell
composer require nette/database
```


Bases de données supportées
===========================

Nette Database supporte les bases de données suivantes :

|* Serveur de base de données |* Nom DSN    |* Support dans Explorer
|---------------------|-------------|-----------------------
| MySQL (>= 5.1)      | mysql       | OUI
| PostgreSQL (>= 9.0) | pgsql       | OUI
| Sqlite 3 (>= 3.8)   | sqlite      | OUI
| Oracle              | oci         | -
| MS SQL (PDO_SQLSRV) | sqlsrv      | OUI
| MS SQL (PDO_DBLIB)  | mssql       | -
| ODBC                | odbc        | -


Deux approches de la base de données
====================================

Nette Database vous donne le choix : vous pouvez soit écrire directement des requêtes SQL (accès SQL), soit les laisser générer automatiquement (Explorer). Voyons comment les deux approches résolvent les mêmes tâches :

[Accès SQL|sql way] - Requêtes SQL

```php
// insérer un enregistrement
$database->query('INSERT INTO books', [
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// obtenir les enregistrements : auteurs de livres
$result = $database->query('
	SELECT authors.*, COUNT(books.id) AS books_count
	FROM authors
	LEFT JOIN books ON authors.id = books.author_id
	WHERE authors.active = 1
	GROUP BY authors.id
');

// affichage (non optimal, génère N requêtes supplémentaires)
foreach ($result as $author) {
	$books = $database->query('
		SELECT * FROM books
		WHERE author_id = ?
		ORDER BY published_at DESC
	', $author->id);

	echo "Autor $author->name napsal $author->books_count knih:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

[Approche Explorer|explorer] - Génération automatique de SQL

```php
// insérer un enregistrement
$database->table('books')->insert([
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// obtenir les enregistrements : auteurs de livres
$authors = $database->table('authors')
	->where('active', 1);

// affichage (génère automatiquement seulement 2 requêtes optimisées)
foreach ($authors as $author) {
	$books = $author->related('books')
		->order('published_at DESC');

	echo "Autor $author->name napsal {$books->count()} knih:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

L'approche Explorer génère et optimise automatiquement les requêtes SQL. Dans l'exemple donné, l'accès SQL génère N+1 requêtes (une pour les auteurs, puis une pour les livres de chaque auteur), tandis que l'Explorer optimise automatiquement les requêtes et n'en exécute que deux - une pour les auteurs et une pour tous leurs livres.

Les deux approches peuvent être combinées librement dans l'application selon les besoins.


Connexion et configuration
==========================

Pour vous connecter à la base de données, il suffit de créer une instance de la classe [api:Nette\Database\Connection] :

```php
$database = new Nette\Database\Connection($dsn, $user, $password);
```

Le paramètre `$dsn` (data source name) est le même que celui [utilisé par PDO |https://www.php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters], par exemple `host=127.0.0.1;dbname=test`. En cas d'échec, une exception `Nette\Database\ConnectionException` est levée.

Cependant, une méthode plus pratique est offerte par la [configuration de l'application |configuration], où il suffit d'ajouter une section `database` et les objets nécessaires seront créés, ainsi que le panneau de base de données dans la barre [Tracy |tracy:].

```neon
database:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: password
```

Ensuite, nous [obtenons en tant que service depuis le conteneur DI |dependency-injection:passing-dependencies] l'objet de connexion, par exemple :

```php
class Model
{
	public function __construct(
		// ou Nette\Database\Explorer
		private Nette\Database\Connection $database,
	) {
	}
}
```

Plus d'informations sur la [configuration de la base de données|configuration].


Création manuelle de l'Explorer
-------------------------------

Si vous n'utilisez pas le conteneur Nette DI, vous pouvez créer manuellement une instance de `Nette\Database\Explorer` :

```php
// connexion à la base de données
$connection = new Nette\Database\Connection('mysql:host=127.0.0.1;dbname=mydatabase', 'user', 'password');
// stockage pour le cache, implémente Nette\Caching\Storage, par ex. :
$storage = new Nette\Caching\Storages\FileStorage('/path/to/temp/dir');
// s'occupe de la réflexion de la structure de la base de données
$structure = new Nette\Database\Structure($connection, $storage);
// définit les règles de mappage des noms de tables, colonnes et clés étrangères
$conventions = new Nette\Database\Conventions\DiscoveredConventions($structure);
$explorer = new Nette\Database\Explorer($connection, $structure, $conventions, $storage);
```


Gestion de la connexion
=======================

Lors de la création de l'objet `Connection`, la connexion est établie automatiquement. Si vous souhaitez différer la connexion, utilisez le mode lazy - activez-le dans la [configuration|configuration] en définissant `lazy`, ou comme ceci :

```php
$database = new Nette\Database\Connection($dsn, $user, $password, ['lazy' => true]);
```

Pour gérer la connexion, utilisez les méthodes `connect()`, `disconnect()` et `reconnect()`.
- `connect()` crée la connexion si elle n'existe pas encore, et peut lever une exception `Nette\Database\ConnectionException`.
- `disconnect()` déconnecte la connexion actuelle à la base de données.
- `reconnect()` effectue une déconnexion puis une reconnexion à la base de données. Cette méthode peut également lever une exception `Nette\Database\ConnectionException`.

De plus, vous pouvez surveiller les événements liés à la connexion en utilisant l'événement `onConnect`, qui est un tableau de callbacks appelés après l'établissement de la connexion à la base de données.

```php
// s'exécute après la connexion à la base de données
$database->onConnect[] = function($database) {
	echo "Connecté à la base de données";
};
```


Barre de débogage Tracy
=======================

Si vous utilisez [Tracy |tracy:], le panneau Database s'active automatiquement dans la barre de débogage, affichant toutes les requêtes exécutées, leurs paramètres, leur temps d'exécution et l'endroit dans le code où elles ont été appelées.

[* db-panel.webp *]
