Практики розробки
*****************


Встановлення
============

Найкращий спосіб встановити Latte — за допомогою Composer:

```shell
composer require latte/latte
```

Підтримувані версії PHP (стосується останніх мінорних версій Latte):

| версія           | сумісна з PHP
|-----------------|-------------------
| Latte 3.0       | PHP 8.0 – 8.2


Як відобразити шаблон
=====================

Як відобразити шаблон? Для цього достатньо цього простого коду:

```php
$latte = new Latte\Engine;
// каталог для кешу
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* змінні шаблону */ ];
// or $params = new TemplateParameters(/* ... */);

// відобразити у вивід
$latte->render('template.latte', $params);
// відобразити у змінну
$output = $latte->renderToString('template.latte', $params);
```

Параметри можуть бути масивом або, ще краще, [об'єктом|#Parametry jako třída], який забезпечить перевірку типів та підказки в редакторах.

.[note]
Приклади використання ви знайдете також у репозиторії [Latte examples |https://github.com/nette-examples/latte].


Продуктивність та кеш
=====================

Шаблони в Latte надзвичайно швидкі, оскільки Latte компілює їх безпосередньо в PHP-код і зберігає в кеші на диску. Тому вони не мають жодних додаткових витрат порівняно з шаблонами, написаними на чистому PHP.

Кеш автоматично регенерується щоразу, коли ви змінюєте вихідний файл. Таким чином, під час розробки ви зручно редагуєте шаблони в Latte, і зміни одразу бачите в браузері. Цю функцію можна вимкнути в робочому середовищі та заощадити трохи продуктивності:

```php
$latte->setAutoRefresh(false);
```

При розгортанні на робочому сервері початкове генерування кешу, особливо для великих програм, зрозуміло, може зайняти деякий час. Latte має вбудований захист від "cache stampede":https://en.wikipedia.org/wiki/Cache_stampede.
Це ситуація, коли збігається велика кількість одночасних запитів, які запускають Latte, і оскільки кеш ще не існує, всі вони почали б генерувати його одночасно. Що непропорційно навантажило б сервер.
Latte розумне і при кількох одночасних запитах генерує кеш лише перший потік, інші чекають, а потім використовують його.


Параметри як клас .[#toc-parameters-as-a-class]
===============================================

Краще, ніж передавати змінні до шаблону як масив, — створити клас. Ви отримаєте [типобезпечний запис|type-system], [зручні підказки в IDE|recipes#Editory a IDE] та спосіб [реєстрації фільтрів|custom-filters#Filters Using the Class] і [функцій|custom-functions#Functions Using the Class].

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Вимкнення автоекранування змінної
=================================

Якщо змінна містить рядок у HTML, ви можете позначити її так, щоб Latte автоматично (і, отже, подвійно) не екранував її. Таким чином ви уникнете необхідності вказувати в шаблоні `|noescape`.

Найпростіший спосіб — обернути рядок в об'єкт `Latte\Runtime\Html`:

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

Latte далі не екранує всі об'єкти, які реалізують інтерфейс `Latte\HtmlStringable`. Ви можете створити власний клас, метод `__toString()` якого повертатиме HTML-код, який не буде автоматично екрануватися:

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
Метод `__toString` повинен повертати коректний HTML і забезпечувати екранування параметрів, інакше може виникнути вразливість XSS!


Як розширити Latte фільтрами, тегами тощо.
==========================================

Як додати до Latte власний фільтр, функцію, тег тощо? Про це йдеться в розділі [розширюємо Latte |extending-latte].
Якщо ви хочете повторно використовувати свої зміни в різних проєктах або ділитися ними з іншими, вам слід [створити розширення |extending-latte#latte-extension].


Довільний код у шаблоні `{php ...}` .{toc: RawPhpExtension}
===========================================================

Всередині тегу [`{do}`|tags#do] можна записувати лише PHP-вирази, тому ви не можете, наприклад, вставити конструкції типу `if ... else` або оператори, що закінчуються крапкою з комою.

Однак ви можете зареєструвати розширення `RawPhpExtension`, яке додає тег `{php ...}`. За допомогою нього можна вставляти будь-який PHP-код. На нього не поширюються жодні правила режиму sandbox, тому використання здійснюється на відповідальність автора шаблону.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Перевірка згенерованого коду .{data-version:3.0.7}
==================================================

Latte компілює шаблони в PHP-код. Звичайно, він дбає про те, щоб згенерований код був синтаксично валідним. Однак при використанні розширень третіх сторін або `RawPhpExtension` Latte не може гарантувати правильність згенерованого файлу.
Також можна написати в PHP код, який хоч і синтаксично правильний, але заборонений (наприклад, присвоєння значення змінній `$this`) і спричинить PHP Compile Error.
Якщо ви запишете таку операцію в шаблоні, вона потрапить і в згенерований PHP-код. Оскільки в PHP існує близько двох сотень різних заборонених операцій, Latte не має на меті їх виявляти. На них вкаже саме PHP лише під час відображення, що зазвичай нічому не заважає.

Але є ситуації, коли ви хочете знати вже під час компіляції шаблону, що він не містить жодної PHP Compile Error. Особливо якщо шаблони можуть редагувати користувачі, або ви використовуєте [Sandbox]. У такому випадку перевіряйте шаблони вже під час компіляції.
Цю функціональність вмикаєте методом `Engine::enablePhpLint()`. Оскільки для перевірки потрібно викликати бінарний файл PHP, передайте шлях до нього як параметр:

```php
$latte = new Latte\Engine;
$latte->enablePhpLinter('/path/to/php');

try {
	$latte->compile('home.latte');
} catch (Latte\CompileException $e) {
	// перехопить помилки в Latte, а також Compile Error в PHP
	echo 'Error: ' . $e->getMessage();
}
```


Національне середовище .{data-version:3.0.18}{toc: Locale}
==========================================================

Latte дозволяє встановити національне середовище, яке впливає на форматування чисел, дат та сортування. Воно налаштовується за допомогою методу `setLocale()`. Ідентифікатор середовища відповідає стандарту IETF language tag, який використовує розширення PHP `intl`. Він складається з коду мови та, можливо, коду країни, напр. `en_US` для англійської в Сполучених Штатах, `de_DE` для німецької в Німеччині тощо.

```php
$latte = new Latte\Engine;
$latte->setLocale('cs');
```

Налаштування середовища впливає на фільтри [localDate|filters#localDate], [sort|filters#sort], [number|filters#number] та [bytes|filters#bytes].

.[note]
Вимагає PHP-розширення `intl`. Налаштування в Latte не впливає на глобальні налаштування locale в PHP.


Строгий режим .{data-version:3.0.8}
===================================

У строгому режимі парсингу Latte перевіряє, чи не відсутні закриваючі HTML-теги, а також забороняє використання змінної `$this`. Вмикаєте його так:

```php
$latte = new Latte\Engine;
$latte->setStrictParsing();
```

Генерування шаблонів із заголовком `declare(strict_types=1)` вмикаєте так:

```php
$latte = new Latte\Engine;
$latte->setStrictTypes();
```


Переклад у шаблонах .{toc: TranslatorExtension}
===============================================

За допомогою розширення `TranslatorExtension` ви додасте до шаблону теги [`{_...}`|tags#_], [`{translate}`|tags#translate] та фільтр [`translate`|filters#translate]. Вони служать для перекладу значень або частин шаблону на інші мови. Як параметр вказуємо метод (PHP callable), що виконує переклад:

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// з $original створимо $translated відповідно до $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] в PHP 8.0
);
$latte->addExtension($extension);
```

Перекладач викликається під час виконання при відображенні шаблону. Однак Latte може перекладати всі статичні тексти вже під час компіляції шаблону. Це заощаджує продуктивність, оскільки кожен рядок перекладається лише один раз, і результат перекладу записується в скомпільовану форму. У каталозі кешу таким чином створюється кілька скомпільованих версій шаблону, по одній для кожної мови. Для цього достатньо лише вказати мову як другий параметр:

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

Статичним текстом мається на увазі, наприклад, `{_'hello'}` або `{translate}hello{/translate}`. Нестатичні тексти, наприклад, `{_$foo}`, надалі перекладатимуться під час виконання.

Перекладачу можна також передавати додаткові параметри з шаблону за допомогою `{_$original, foo: bar}` або `{translate foo: bar}`, які він отримає як масив `$params`:

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


Налагодження та Tracy
=====================

Latte намагається зробити розробку якомога приємнішою. Безпосередньо для цілей налагодження існує трійка тегів [`{dump}`|tags#dump], [`{debugbreak}`|tags#debugbreak] та [`{trace}`|tags#trace].

Найбільший комфорт ви отримаєте, якщо ще встановите чудовий [інструмент налагодження Tracy|tracy:] та активуєте доповнення для Latte:

```php
// вмикає Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// активує розширення для Tracy
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);
```

Тепер усі помилки відображатимуться на зрозумілому червоному екрані, включаючи помилки в шаблонах з підсвічуванням рядка та стовпця ([відео|https://github.com/nette/tracy/releases/tag/v2.9.0]).
Водночас у правому нижньому куті в так званому Tracy Bar з'явиться вкладка для Latte, де чітко видно всі відображувані шаблони та їхні взаємні зв'язки (включаючи можливість перейти до шаблону або скомпільованого коду), а також змінні:

[* latte-debugging.webp *]

Оскільки Latte компілює шаблони в зрозумілий PHP-код, ви можете зручно крокувати по них у своєму IDE.


Linter: валідація синтаксису шаблонів .{toc: Linter}
====================================================

Пройти всі шаблони та перевірити, чи не містять вони синтаксичних помилок, вам допоможе інструмент Linter. Він запускається з консолі:

```shell
vendor/bin/latte-lint <шлях>
```

Параметр `--strict` активує [строгий режим|#striktní režim].

Якщо ви використовуєте власні теги, створіть також власну версію Linter, напр. `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// вкажіть реальний шлях до файлу autoload.php
require __DIR__ . '/vendor/autoload.php';

$path = $argv[1] ?? '.';

$linter = new Latte\Tools\Linter;
$latte = $linter->getEngine();
// тут додайте окремі свої розширення
$latte->addExtension(/* ... */);

$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```

Альтернативно ви можете передати власний об'єкт `Latte\Engine` в Linter:

```php
$latte = new Latte\Engine;
// тут ми конфігуруємо об'єкт $latte
$linter = new Latte\Tools\Linter(engine: $latte);
```


Завантаження шаблонів з рядка
=============================

Вам потрібно завантажувати шаблони з рядків замість файлів, наприклад, для цілей тестування? Вам допоможе [StringLoader|loaders#stringloader]:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Обробник винятків
=================

Ви можете визначити власний обробник для очікуваних винятків. Йому передаються винятки, що виникли всередині [`{try}`|tags#try] та в [sandbox|sandbox].

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Автоматичний пошук layout
=========================

За допомогою тегу [`{layout}`|template-inheritance#layoutova-dedicnost] шаблон визначає свій батьківський шаблон. Також можливо дозволити автоматичний пошук layout, що спростить написання шаблонів, оскільки в них не потрібно буде вказувати тег `{layout}`.

Цього можна досягти наступним чином:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// повертає шлях до файлу з layout
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

Якщо шаблон не повинен мати layout, він повідомить про це тегом `{layout none}`.
