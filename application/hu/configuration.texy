Alkalmazás konfigurálása
************************

.[perex]
A Nette alkalmazás konfigurációs lehetőségeinek áttekintése.


Alkalmazás .[#toc-application]
==============================

```neon
application:
	# shows "Nette Application" panel in Tracy BlueScreen?
	debugger: ...           # (bool) defaults to true

	# will error-presenter be called on error?
	catchExceptions: ...    # (bool) defaults to true in production mode

	# name of error-presenter
	errorPresenter: Error   # (string) defaults to 'Nette:Error'

	# defines the rules for resolving the presenter name to a class
	mapping: ...

	# do bad links generate warnings?
	# has effect only in developer mode
	silentLinks: ...        # (bool) defaults to false
```

Mivel a hiba-bemutatókat alapértelmezés szerint nem hívja meg a program fejlesztési módban, és a hibákat a Tracy jeleníti meg, a `catchExceptions` érték `true` -re történő módosítása segít ellenőrizni, hogy a hiba-bemutatók helyesen működnek-e a fejlesztés során.

A `silentLinks` opció határozza meg, hogy a Nette hogyan viselkedjen fejlesztői módban, ha a linkgenerálás sikertelen (például mert nincs prezenter stb.). Az alapértelmezett `false` érték azt jelenti, hogy a Nette a `E_USER_WARNING` opciót váltja ki. A `true` beállítása elnyomja ezt a hibaüzenetet. Gyártási környezetben a `E_USER_WARNING` mindig meghívásra kerül. Ezt a viselkedést a [$invalidLinkMode |creating-links#Invalid Links] prezenter változó beállításával is befolyásolhatjuk.

A [leképezés meghatározza azokat a szabályokat |modules#mapping], amelyek alapján az osztály neve a prezenter nevéből származik.


Az előadók automatikus regisztrációja .[#toc-automatic-registration-of-presenters]
----------------------------------------------------------------------------------

A Nette automatikusan hozzáadja az előadókat szolgáltatásként a DI konténerhez, ami jelentősen felgyorsítja a létrehozásukat. Az, hogy a Nette hogyan találja meg az előadókat, konfigurálható:

```neon
application:
	# to look for presenters in Composer class map?
	scanComposer: ...      # (bool) defaults to true

	# a mask that must match the class and file name
	scanFilter: ...        # (string) defaults to '*Presenter'

	# in which directories to look for presenters?
	scanDirs:              # (string[]|false) defaults to '%appDir%'
		- %vendorDir%/mymodule
```

A `scanDirs` alatt felsorolt könyvtárak nem írják felül a `%appDir%` alapértelmezett értékét, hanem kiegészítik azt, így a `scanDirs` tartalmazza a `%appDir%` és a `%vendorDir%/mymodule` elérési utakat is. Ha felül akarjuk írni az alapértelmezett könyvtárat, akkor használjunk [felkiáltójelet |dependency-injection:configuration#Merging]:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

A false beállításával kikapcsolhatjuk a könyvtárak beolvasását. Nem javasoljuk a bemutatók automatikus hozzáadásának teljes elnyomását, különben az alkalmazás teljesítménye csökken.


Latte .[#toc-latte]
===================

Ez a beállítás globálisan befolyásolja a Latte viselkedését a komponensekben és a prezenterekben.

```neon
latte:
	# shows Latte panel in the Tracy Bar for the main template (true) or for all components (all)?
	debugger: ...        # (true|false|'all') defaults to true

	# generates templates with declare(strict_types=1)
	strictTypes: ...     # (bool) defaults to false

	# class of $this->template
	templateClass: App\MyTemplateClass # defaults to Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Ha a Latte 3. verzióját használja, akkor új [bővítményt |latte:creating-extension] adhat hozzá a következőkkel:

```neon
latte:
	extensions:
		- Latte\Essential\TranslatorExtension
```


Routing .[#toc-routing]
=======================

Alapbeállítások:

```neon
routing:
	# shows routing panel in Tracy Bar?
	debugger: ...   # (bool) defaults to true

	# to serialize router to DI container?
	cache: ...      # (bool) defaults to false
```

A Router általában a [RouterFactory |routing#Route Collection] osztályban van definiálva. Alternatívaként a konfigurációban is definiálhatók útvonalak a `mask: action` párok segítségével, de ez a módszer nem kínál olyan széleskörű variációs lehetőséget a beállítások terén:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Állandók .[#toc-constants]
==========================

PHP konstansok létrehozása.

```neon
constants:
	Foobar: 'baz'
```

A `Foobar` konstans az indítás után jön létre.

.[note]
A konstansok nem szolgálhatnak globálisan elérhető változóként. Ha értékeket akarsz átadni objektumoknak, használd a [függőségi injektálást |dependency-injection:passing-dependencies].


PHP
===

PHP irányelveket állíthat be. Az összes direktíva áttekintése megtalálható a [php.net |https://www.php.net/manual/en/ini.list.php] oldalon.

```neon
php:
	date.timezone: Europe/Prague
```
