Dlaczego warto używać szablonów?
********************************


Dlaczego warto używać systemu szablonów w PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
--------------------------------------------------------------------------------------------------

Na początek przypomnijmy krótko historię PHP, pełną ciekawych zwrotów akcji. Jednym z pierwszych języków programowania wykorzystywanych do szablonowania HTML był C. Jednak jego zastosowanie do tego celu okazało się nieprzydatne. Rasmus Lerdorf stworzył PHP, aby ułatwić dynamiczne generowanie HTML z C na backendzie. PHP został początkowo zaprojektowany jako język szablonów, ale z czasem zyskał więcej funkcji i stał się pełnoprawnym językiem programowania.

Mimo to, nadal funkcjonuje jako język szablonów. Pliki PHP mogą być używane jako strony HTML, gdzie można wypisać zmienną za pomocą `<?= $foo ?>`.

Na początku historii PHP wprowadzono system szablonów Smarty, aby ściśle oddzielić wygląd (HTML/CSS) od logiki aplikacji. Jego możliwości były celowo ograniczone w stosunku do PHP, więc programista nie mógł np. wykonać zapytania do bazy danych z poziomu szablonu. Systemy te wprowadzały jednak dodatkowe zależności, zwiększały złożoność projektu i wymagały nauki nowego języka Smarty. Ich zalety były kontrowersyjne, a do szablonów nadal używano zwykłego PHP.

Z czasem systemy szablonów stały się bardziej przydatne. Coraz większa liczba programistów i firm zdała sobie sprawę z wagi bezpieczeństwa. Dostrzegli istnienie [podatności takich jak XSS |safety-first]. Poprawny sposób wyświetlania zmiennej to nie `<?= $foo ?>` ale `<?= htmlspecialchars($foo) ?>`, a zaniedbanie ucieczki, czyli użycie funkcji `htmlspecialchars()`, może spowodować poważne naruszenie bezpieczeństwa. Systemy szablonowe wprowadziły auto-escaping, więc wystarczyło napisać tylko `{$foo}`, a zmienna zostałaby wyświetlona z włączonym escapingiem.

Systemy szablonów wprowadziły wsparcie dla dziedziczenia, sandboxingu i innych przydatnych funkcji, dzięki czemu pisanie szablonów stało się znacznie prostsze niż w PHP. W pewnym momencie korzyści płynące z systemów szablonów znacznie przeważyły nad obawami o wprowadzenie nowych zależności.


Dlaczego powinienem używać systemu szablonów Latte? .[#toc-why-should-i-use-the-latte-templating-system]
--------------------------------------------------------------------------------------------------------

Główne powody to bezpieczeństwo i składnia.

Wszystkie systemy templatek, jak Twig, Blade czy Smarty, przez cały czas swojego istnienia wprowadzały ochronę przed XSS w postaci automatycznej ucieczki. Jednak Latte poszło dalej, zdając sobie sprawę, że aby automatyczna ucieczka była naprawdę funkcjonalna, system musi rozumieć HTML. Musiał rozpoznać nie tylko ciąg znaków, ale także znaczniki, atrybuty itp. Dzieje się tak dlatego, że różne metody ucieczki są wymagane w tekście HTML, wewnątrz znaczników HTML, w JavaScript itp. Latte nauczył się rozumieć HTML i uciekać w każdym z tych kontekstów [odpowiednio |safety-first#Context-Aware Escaping]. W ten sposób stał się pierwszym i jak dotąd jedynym systemem templatek PHP z kontekstową ucieczką.

Latte reprezentuje prawdziwie bezpieczny system szablonów, podczas gdy inne systemy mają tendencję do tworzenia fałszywego poczucia bezpieczeństwa.

Kolejną istotną zaletą Latte jest użycie składni PHP, dzięki czemu programista/koder nie musi uczyć się nowego języka, lecz może wykorzystać to, co już dobrze zna.


Jakie są główne różnice pomiędzy systemami templatkowania takimi jak Latte, Twig i Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Różnice pomiędzy systemami templatkowania takimi jak Latte, Twig i Blade polegają głównie na ich składni, bezpieczeństwie i integracji z frameworkami:

- Latte: wykorzystuje składnię języka PHP, dzięki czemu jest łatwiejszy do nauczenia i użycia. Zapewnia najwyższej klasy ochronę przed atakami XSS.
- Twig: używa składni podobnej do Pythona, która jest zupełnie inna niż PHP. Ucieka bez rozróżniania kontekstu. Jest dobrze zintegrowany z frameworkiem Symfony.
- Blade: używa mieszanki PHP i własnej składni. Ucieka bez rozróżniania kontekstu. Jest ściśle zintegrowany z funkcjami i ekosystemem Laravel.


Czy warto, aby firmy korzystały z systemu szablonowania? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
------------------------------------------------------------------------------------------------------------------------

Po pierwsze, koszty związane ze szkoleniem, użytkowaniem i ogólnymi korzyściami różnią się znacznie w zależności od systemu. System szablonów Latte, dzięki wykorzystaniu składni PHP, znacznie ułatwia naukę programistom znającym już ten język. Zazwyczaj wystarczy kilka godzin, aby programista w wystarczającym stopniu zapoznał się z Latte, co zmniejsza koszty szkolenia i przyspiesza przyswajanie technologii, a co najważniejsze - efektywność w codziennym użytkowaniu.

Dodatkowo Latte zapewnia wysoki poziom ochrony przed podatnością XSS dzięki unikalnej technologii context-aware escaping. Ochrona ta jest kluczowa dla zapewnienia bezpieczeństwa aplikacji internetowych i zminimalizowania ryzyka ataków, które mogłyby zagrozić użytkownikom lub danym firmowym. Bezpieczeństwo aplikacji internetowych jest również ważne dla utrzymania dobrej reputacji firmy. Problemy z bezpieczeństwem mogą prowadzić do utraty zaufania klientów i zniszczenia reputacji firmy na rynku.

Korzystanie z Latte zmniejsza również ogólne koszty rozwoju i utrzymania aplikacji poprzez ułatwienie obu tych czynności. Dlatego korzystanie z systemu szablonowania jest zdecydowanie warte zachodu.


Jak Latte wpływa na wydajność aplikacji internetowej i zasoby serwera? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-----------------------------------------------------------------------------------------------------------------------------------------------------

Chociaż szablony Latte są przetwarzane szybko, ten aspekt nie ma większego znaczenia. Powodem jest to, że parsowanie plików występuje tylko raz podczas pierwszego wyświetlenia. Następnie są one kompilowane do kodu PHP, przechowywane na dysku i uruchamiane przy każdym kolejnym żądaniu bez konieczności ponownej kompilacji.

Tak właśnie działa to w środowisku produkcyjnym. Podczas rozwoju szablony Latte są rekompilowane za każdym razem, gdy zmienia się ich zawartość, więc programista zawsze widzi aktualną wersję.
