İnteraktif Bileşenler
*********************
<div class=perex>


Bileşenler, sayfalara yerleştirdiğimiz ayrı yeniden kullanılabilir nesnelerdir. Bunlar formlar, datagridler, anketler, aslında tekrar tekrar kullanılması mantıklı olan her şey olabilir. Göstereceğiz:

- bileşenler nasıl kullanılır?
- nasıl yazılır?
- sinyaller nedir?

</div>

Nette yerleşik bir bileşen sistemi vardır. Daha yaşlılarınız Delphi veya ASP.NET Web Forms'dan benzer bir şeyi hatırlayabilir. React veya Vue.js uzaktan benzer bir şey üzerine inşa edilmiştir. Ancak, PHP çerçeveleri dünyasında bu tamamen benzersiz bir özelliktir.

Aynı zamanda bileşenler, uygulama geliştirme yaklaşımını temelden değiştirir. Önceden hazırlanmış birimlerden sayfalar oluşturabilirsiniz. Yönetimde datagrid'e mi ihtiyacınız var? Nette için açık kaynaklı eklentilerin (sadece bileşenlerin değil) bir deposu olan [Componette'de |https://componette.org/search/component] bulabilir ve basitçe sunucuya yapıştırabilirsiniz.

Sunucuya istediğiniz sayıda bileşen ekleyebilirsiniz. Ve bazı bileşenlerin içine başka bileşenler ekleyebilirsiniz. Bu, kök olarak sunum yapan bir bileşen ağacı oluşturur.


Fabrika Yöntemleri .[#toc-factory-methods]
==========================================

Bileşenler sunucuya nasıl yerleştirilir ve daha sonra nasıl kullanılır? Genellikle fabrika yöntemleri kullanılarak.

Bileşen fabrikası, bileşenleri yalnızca gerçekten ihtiyaç duyulduklarında (tembel / isteğe bağlı) oluşturmanın zarif bir yoludur. Tüm sihir, aşağıdaki gibi adlandırılan bir yöntemin uygulanmasındadır `createComponent<Name>()`, nerede `<Name>` oluşturacak ve geri dönecek bileşenin adıdır.

```php .{file:DefaultPresenter.php}
class DefaultPresenter extends Nette\Application\UI\Presenter
{
	protected function createComponentPoll(): PollControl
	{
		$poll = new PollControl;
		$poll->items = $this->item;
		return $poll;
	}
}
```

Tüm bileşenler ayrı yöntemlerle oluşturulduğu için kod daha temizdir ve okunması daha kolaydır.

.[note]
Bileşen adları her zaman küçük harfle başlar, ancak yöntem adında büyük harfle yazılır.

Fabrikaları asla doğrudan çağırmayız, bileşenleri ilk kez kullandığımızda otomatik olarak çağrılırlar. Bu sayede, bir bileşen doğru zamanda ve yalnızca gerçekten ihtiyaç duyulduğunda oluşturulur. Bileşeni kullanmayacaksak (örneğin sayfanın yalnızca bir kısmını döndürdüğümüz bazı AJAX isteklerinde veya parçalar önbelleğe alındığında), bileşen oluşturulmaz bile ve sunucunun performansından tasarruf ederiz.

```php .{file:DefaultPresenter.php}
// bileşene erişiyoruz ve eğer bu ilk sefer ise,
// oluşturmak için createComponentPoll() işlevini çağırır
$poll = $this->getComponent('poll');
// alternatif sözdizimi: $poll = $this['poll'];
```

Şablonda, [{control} |#Rendering] etiketini kullanarak bir bileşen oluşturabilirsiniz. Böylece bileşenleri şablona manuel olarak geçirmeye gerek kalmaz.

```latte
<h2>Please Vote</h2>

{control poll}
```


Hollywood Tarzı .[#toc-hollywood-style]
=======================================

Bileşenler genellikle Hollywood tarzı olarak adlandırdığımız harika bir teknik kullanır. Oyuncu seçmelerinde oyuncuların sık sık duyduğu klişeyi biliyorsunuzdur: "Siz bizi aramayın, biz sizi ararız." İşte bu da bununla ilgili.

Nette, sürekli soru sormak zorunda kalmak yerine ("form gönderildi mi?", "geçerli miydi?" veya "bu düğmeye basan oldu mu?"), framework'e "bu olduğunda, bu yöntemi çağır" der ve daha fazla çalışmayı bırakırsınız. JavaScript'te programlama yapıyorsanız, bu tarz programlamaya aşinasınızdır. Belirli bir olay gerçekleştiğinde çağrılan fonksiyonlar yazarsınız. Ve motor bunlara uygun parametreleri aktarır.

Bu, uygulama yazma şeklinizi tamamen değiştirir. Framework'e ne kadar çok görev devredebilirseniz, o kadar az işiniz olur. Ve o kadar az unutabilirsiniz.


Bir Bileşen Nasıl Yazılır .[#toc-how-to-write-a-component]
==========================================================

Bileşen derken genellikle [api:Nette\Application\UI\Control] sınıfının torunlarını kastediyoruz. Sunucu [api:Nette\Application\UI\Presenter] 'un kendisi de `Control` sınıfının bir torunudur.

```php .{file:PollControl.php}
use Nette\Application\UI\Control;

class PollControl extends Control
{
}
```


Rendering .[#toc-rendering]
===========================

`{control componentName}` etiketinin bir bileşeni çizmek için kullanıldığını zaten biliyoruz. Aslında `render()` bileşeninin render işlemini gerçekleştirdiğimiz metodunu çağırır. Tıpkı sunucuda olduğu gibi, parametreleri aktardığımız `$this->template` değişkeninde bir [Latte |latte:] şablonumuz var. Sunucudaki kullanımdan farklı olarak, bir şablon dosyası belirtmeli ve render edilmesine izin vermeliyiz:

```php .{file:PollControl.php}
public function render(): void
{
	// şablona bazı parametreler koyacağız
	$this->template->param = $value;
	// ve çiz
	$this->template->render(__DIR__ . '/poll.latte');
}
```

`{control}` etiketi, `render()` yöntemine parametre aktarılmasına olanak tanır:

```latte
{control poll $id, $message}
```

```php .{file:PollControl.php}
public function render(int $id, string $message): void
{
	// ...
}
```

Bazen bir bileşen, ayrı ayrı render etmek istediğimiz birkaç parçadan oluşabilir. Her biri için kendi render yöntemini oluşturacağız, örneğin `renderPaginator()`:

```php .{file:PollControl.php}
public function renderPaginator(): void
{
	// ...
}
```

Ve şablonda daha sonra bunu kullanarak çağırıyoruz:

```latte
{control poll:paginator}
```

Daha iyi anlamak için etiketin PHP koduna nasıl derlendiğini bilmek iyi olacaktır.

```latte
{control poll}
{control poll:paginator 123, 'hello'}
```

Bu şu anlama geliyor:

```php
$control->getComponent('poll')->render();
$control->getComponent('poll')->renderPaginator(123, 'hello');
```

`getComponent()` yöntemi `poll` bileşenini döndürür ve ardından bu bileşen üzerinde sırasıyla `render()` veya `renderPaginator()` yöntemi çağrılır.

.[caution]
Parametre kısmının herhangi bir yerinde **`=>`** kullanılırsa, tüm parametreler bir dizi ile sarılır ve ilk bağımsız değişken olarak geçirilir:

```latte
{control poll, id: 123, message: 'hello'}
```

derlenir:

```php
$control->getComponent('poll')->render(['id' => 123, 'message' => 'hello']);
```

Alt bileşenin render edilmesi:

```latte
{control cartControl-someForm}
```

derlenir:

```php
$control->getComponent("cartControl-someForm")->render();
```

Sunucular gibi bileşenler de şablonlara otomatik olarak çeşitli yararlı değişkenler aktarır:

- `$basePath` kök dizine giden mutlak bir URL yoludur (örneğin `/CD-collection`)
- `$baseUrl` kök dizine mutlak bir URL'dir (örneğin `http://localhost/CD-collection`)
- `$user` [kullanıcıyı temsil eden bir nesnedir|security:authentication]
- `$presenter` şu anki sunucu
- `$control` mevcut bileşendir
- `$flashes` yöntem tarafından gönderilen [mesajların |#flash-messages] listesi `flashMessage()`


Sinyal .[#toc-signal]
=====================

Nette uygulamasında gezinmenin `Presenter:action` çiftlerine bağlantı vermek veya yönlendirmekten oluştuğunu zaten biliyoruz. Peki ya sadece **mevcut sayfa** üzerinde bir eylem gerçekleştirmek istiyorsak? Örneğin, tablodaki sütunun sıralama düzenini değiştirmek; öğeyi silmek; aydınlık/karanlık modunu değiştirmek; formu göndermek; ankette oy kullanmak vb.

Bu tür isteklere sinyal adı verilir. Ve eylemlerin yöntemleri çağırması gibi `action<Action>()` veya `render<Action>()`, sinyaller yöntemleri çağırır `handle<Signal>()`. Eylem (veya görünüm) kavramı yalnızca sunum yapanlarla ilgiliyken, sinyaller tüm bileşenler için geçerlidir. Ve dolayısıyla sunucular için de geçerlidir, çünkü `UI\Presenter`, `UI\Control`'un soyundan gelmektedir.

```php
public function handleClick(int $x, int $y): void
{
	// ... sinyalin işlenmesi ...
}
```

Sinyali çağıran bağlantı olağan şekilde oluşturulur, yani şablonda `n:href` niteliği veya `{link}` etiketi ile, kodda `link()` yöntemi ile. Daha fazlası [URL bağlantıları oluşturma |creating-links#Links to Signal] bölümünde.

```latte
<a n:href="click! $x, $y">click here</a>
```

Sinyal her zaman geçerli sunumcu ve görünümde çağrılır, bu nedenle farklı sunumcu / eylemde sinyale bağlanmak mümkün değildir.

Böylece sinyal, sayfanın orijinal istekle tamamen aynı şekilde yeniden yüklenmesine neden olur, sadece ek olarak sinyal işleme yöntemini uygun parametrelerle çağırır. Yöntem mevcut değilse, kullanıcıya 403 Forbidden hata sayfası olarak görüntülenen [api:Nette\Application\UI\BadSignalException] istisnası atılır.


Snippet'ler ve AJAX .[#toc-snippets-and-ajax]
=============================================

Sinyaller size biraz AJAX'ı hatırlatabilir: mevcut sayfada çağrılan işleyiciler. Ve haklısınız, sinyaller genellikle AJAX kullanılarak çağrılır ve daha sonra sayfanın yalnızca değişen kısımlarını tarayıcıya iletiriz. Bunlara snippet adı verilir. [AJAX ile ilgili sayfada |ajax] daha fazla bilgi bulabilirsiniz.


Flaş Mesajlar .[#toc-flash-messages]
====================================

Bir bileşen, sunum yapan kişiden bağımsız olarak kendi flaş mesaj deposuna sahiptir. Bunlar, örneğin işlemin sonucu hakkında bilgi veren mesajlardır. Flaş mesajların önemli bir özelliği, yeniden yönlendirmeden sonra bile şablonda mevcut olmalarıdır. Görüntülendikten sonra bile 30 saniye daha canlı kalırlar - örneğin, kullanıcının istemeden sayfayı yenilemesi durumunda - mesaj kaybolmaz.

Gönderme işlemi [flashMessage |api:Nette\Application\UI\Control::flashMessage()] yöntemi ile yapılır. İlk parametre mesaj metni veya mesajı temsil eden `stdClass` nesnesidir. İsteğe bağlı ikinci parametre mesajın türüdür (hata, uyarı, bilgi, vb.). `flashMessage()` yöntemi, bilgi aktarabileceğiniz stdClass nesnesi olarak bir flash message örneği döndürür.

```php
$this->flashMessage('Item was deleted.');
$this->redirect(/* ... */); // ve yeniden yönlendir
```

Şablonda, bu mesajlar `$flashes` değişkeninde `message` (mesaj metni), `type` (mesaj türü) özelliklerini içeren ve daha önce bahsedilen kullanıcı bilgilerini içerebilen `stdClass` nesneleri olarak mevcuttur. Bunları aşağıdaki gibi çiziyoruz:

```latte
{foreach $flashes as $flash}
	<div class="flash {$flash->type}">{$flash->message}</div>
{/foreach}
```


Kalıcı Parametreler .[#toc-persistent-parameters]
=================================================

Genellikle bir bileşenle çalıştığınız süre boyunca bazı parametreleri bileşende tutmanız gerekir. Örneğin sayfalamadaki sayfanın numarası olabilir. Bu parametre `@persistent` ek açıklaması kullanılarak kalıcı olarak işaretlenmelidir.

```php
class PollControl extends Control
{
	/** @persistent */
	public $page = 1;
}
```

Bu parametre, kullanıcı bu bileşenle sayfadan ayrılana kadar her bağlantıda `GET` parametresi olarak otomatik olarak geçirilecektir.

.[caution]
Kalıcı parametrelere asla körü körüne güvenmeyin çünkü kolayca taklit edilebilirler (URL'nin üzerine yazarak). Örneğin, sayfa numarasının doğru aralıkta olup olmadığını doğrulayın.

PHP 8'de, kalıcı değiştirgeleri işaretlemek için öznitelikleri de kullanabilirsiniz:

```php
use Nette\Application\Attributes\Persistent;

class PollControl extends Control
{
	#[Persistent]
	public $page = 1;
}
```


Kalıcı Bileşenler .[#toc-persistent-components]
===============================================

Sadece parametreler değil, bileşenler de kalıcı olabilir. Kalıcı parametreleri de farklı eylemler arasında veya farklı sunucular arasında aktarılır. Kalıcı bileşenleri sunum yapan sınıf için bu ek açıklamalarla işaretleriz. Örneğin burada `calendar` ve `poll` bileşenlerini aşağıdaki gibi işaretliyoruz:

```php
/**
 * @persistent(calendar, poll)
 */
class DefaultPresenter extends Nette\Application\UI\Presenter
{
}
```

Alt bileşenleri kalıcı olarak işaretlemenize gerek yoktur, otomatik olarak kalıcı olurlar.

PHP 8'de, kalıcı bileşenleri işaretlemek için öznitelikleri de kullanabilirsiniz:

```php
use Nette\Application\Attributes\Persistent;

#[Persistent('calendar', 'poll')]
class DefaultPresenter extends Nette\Application\UI\Presenter
{
}
```


Bağımlılıkları Olan Bileşenler .[#toc-components-with-dependencies]
===================================================================

Bağımlılıkları olan bileşenleri, bunları kullanacak sunumcuları "karıştırmadan" nasıl oluşturabiliriz? Nette'deki DI konteynerinin akıllı özellikleri sayesinde, geleneksel servisleri kullanırken olduğu gibi, işin çoğunu çerçeveye bırakabiliriz.

Örnek olarak `PollFacade` hizmetine bağımlılığı olan bir bileşeni ele alalım:

```php
class PollControl extends Control
{
	public function __construct(
		private int $id, // Bileşenin oluşturulduğu anketin kimliği
		private PollFacade $facade,
	) {
	}

	public function handleVote(int $voteId): void
	{
		$this->facade->vote($id, $voteId);
		// ...
	}
}
```

Klasik bir hizmet yazıyor olsaydık, endişelenecek bir şey olmazdı. DI konteyneri görünmez bir şekilde tüm bağımlılıkları aktarmakla ilgilenirdi. Ancak bileşenleri genellikle [fabrika yöntemleriyle |#factory methods] doğrudan sunucuda yeni bir örneğini oluşturarak ele alırız `createComponent...()`. Ancak tüm bileşenlerin tüm bağımlılıklarını sunucuya aktarmak ve daha sonra bunları bileşenlere aktarmak zahmetlidir. Ve yazılan kod miktarı...

Mantıklı soru şu: Neden bileşeni klasik bir hizmet olarak kaydetmiyor, sunucuya aktarmıyor ve ardından `createComponent...()` yönteminde döndürmüyoruz? Ancak bu yaklaşım uygun değildir çünkü bileşeni birden çok kez oluşturabilmek istiyoruz.

Doğru çözüm, bileşen için bir fabrika, yani bileşeni bizim için oluşturan bir sınıf yazmaktır:

```php
class PollControlFactory
{
	public function __construct(
		private PollFacade $facade,
	) {
	}

	public function create(int $id): PollControl
	{
		return new PollControl($id, $this->facade);
	}
}
```

Şimdi servisimizi DI konteynerine yapılandırma için kaydediyoruz:

```neon
services:
	- PollControlFactory
```

Son olarak, bu fabrikayı sunucumuzda kullanacağız:

```php
class PollPresenter extends Nette\UI\Application\Presenter
{
	public function __construct(
		private PollControlFactory $pollControlFactory,
	) {
	}

	protected function createComponentPollControl(): PollControl
	{
		$pollId = 1; // parametremizi geçebiliriz
		return $this->pollControlFactory->create($pollId);
	}
}
```

İşin en güzel yanı, Nette DI'nın bu kadar basit fabrikalar [üretebilmesidir |dependency-injection:factory], bu nedenle tüm kodu yazmak yerine sadece arayüzünü yazmanız yeterlidir:

```php
interface PollControlFactory
{
	public function create(int $id): PollControl;
}
```

Hepsi bu kadar. Nette bu arayüzü dahili olarak uygular ve onu kullanabileceğimiz sunucumuza enjekte eder. Ayrıca `$id` parametremizi ve `PollFacade` sınıfının örneğini sihirli bir şekilde bileşenimize aktarır.


Derinlemesine Bileşenler .[#toc-components-in-depth]
====================================================

Bir Nette Uygulamasındaki bileşenler, bu bölümün konusu olan sayfalara gömdüğümüz bir web uygulamasının yeniden kullanılabilir parçalarıdır. Böyle bir bileşenin yetenekleri tam olarak nelerdir?

1) bir şablon içinde oluşturulabilir
2) [AJAX isteği |ajax#invalidation] sırasında hangi bölümünün işleneceğini bilir (snippet'ler)
3) durumunu bir URL'de saklama yeteneğine sahiptir (kalıcılık parametreleri)
4) kullanıcı eylemlerine (sinyallere) yanıt verme yeteneğine sahiptir
5) hiyerarşik bir yapı oluşturur (kökün sunum yapan kişi olduğu)

Bu işlevlerin her biri kalıtım soyu sınıflarından biri tarafından yerine getirilir. Oluşturma (1 + 2) [api:Nette\Application\UI\Control] tarafından, [yaşam döngüsüne |presenters#life-cycle-of-presenter] dahil etme (3, 4) [api:Nette\Application\UI\Component] sınıfı tarafından ve hiyerarşik yapının oluşturulması (5) [Container ve Component |component-model:] sınıfları tarafından gerçekleştirilir.

```
Nette\ComponentModel\Component  { IComponent }
|
+- Nette\ComponentModel\Container  { IContainer }
	|
	+- Nette\Application\UI\Component  { SignalReceiver, StatePersistent }
		|
		+- Nette\Application\UI\Control  { Renderable }
			|
			+- Nette\Application\UI\Presenter  { IPresenter }
```


Bileşenin Yaşam Döngüsü .[#toc-life-cycle-of-component]
-------------------------------------------------------

[* lifecycle-component.svg *] *** *Bileşenin yaşam döngüsü* .<>


Derinlemesine Sinyaller .[#toc-signals-in-depth]
------------------------------------------------

Bir sinyal, orijinal istek gibi bir sayfanın yeniden yüklenmesine neden olur (AJAX hariç) ve `Nette\Application\UI\Component` sınıfındaki varsayılan uygulaması `handle{Signal}` sözcüklerinden oluşan bir yöntemi çağırmaya çalışan `signalReceived($signal)` yöntemini çağırır. Daha sonraki işlemler verilen nesneye dayanır. `Component` 'un torunları olan nesneler (yani `Control` ve `Presenter`) `handle{Signal}` 'u ilgili parametrelerle çağırmaya çalışır.

Başka bir deyişle: `handle{Signal}` metodunun tanımı alınır ve istekte alınan tüm parametreler metodun parametreleriyle eşleştirilir. Yani URL'den gelen `id` parametresi metodun `$id` parametresiyle, `something` parametresi `$something` parametresiyle eşleştirilir ve bu böyle devam eder. Ve eğer metot mevcut değilse, `signalReceived` metodu [bir istisna |api:Nette\Application\UI\BadSignalException] atar.

Sinyal, bileşen ağacına bağlıysa `SignalReceiver` arayüzünü uygulayan herhangi bir bileşen, nesne sunucusu tarafından alınabilir.

Sinyallerin ana alıcıları `Presenters` ve `Control` adresini genişleten görsel bileşenlerdir. Sinyal, bir nesne için bir şey yapması gerektiğine dair bir işarettir - anket kullanıcıdan gelen bir oyu sayar, haber kutusu açılmalıdır, form gönderilmiştir ve verileri işlemelidir vb.

Sinyal için URL [Component::link() |api:Nette\Application\UI\Component::link()] yöntemi kullanılarak oluşturulur. `$destination` parametresi olarak `{signal}!` dizesini ve `$args` olarak sinyal işleyicisine iletmek istediğimiz argümanların bir dizisini iletiriz. Sinyal parametreleri geçerli sunucunun/görüntünün URL'sine eklenir. **URL'deki `?do` parametresi çağrılan sinyali belirler.**

Biçimi `{signal}` veya `{signalReceiver}-{signal}` şeklindedir. `{signalReceiver}`, sunum programındaki bileşenin adıdır. Bu nedenle bileşenlerin adında kısa çizgi (yanlış olarak tire) bulunamaz - bileşenin adını ve sinyali bölmek için kullanılır, ancak birkaç bileşen oluşturmak mümkündür.

[isSignalReceiver() |api:Nette\Application\UI\Presenter::isSignalReceiver()] yöntemi, bir bileşenin (ilk bağımsız değişken) bir sinyalin (ikinci bağımsız değişken) alıcısı olup olmadığını doğrular. İkinci bağımsız değişken atlanabilir - o zaman bileşenin herhangi bir sinyalin alıcısı olup olmadığını bulur. İkinci parametre `true` ise, bileşenin veya torunlarının bir sinyalin alıcısı olup olmadığını doğrular.

`handle{Signal}` adresinden önceki herhangi bir aşamada, sinyal yürütme sorumluluğunu üstlenen [processSignal() |api:Nette\Application\UI\Presenter::processSignal()] yöntemi çağrılarak manuel olarak sinyal gerçekleştirilebilir. Alıcı bileşeni alır (ayarlanmamışsa sunucunun kendisidir) ve sinyali gönderir.

Örnek:

```php
if ($this->isSignalReceiver($this, 'paging') || $this->isSignalReceiver($this, 'sorting')) {
	$this->processSignal();
}
```

Sinyal zamanından önce yürütülür ve bir daha çağrılmaz.
