Verwendung von Latte mit Slim 4
*******************************

.[perex]
Dieser Artikel, dessen Autor "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html ist, beschreibt die Verwendung von Latte mit dem Slim Framework.

Installieren Sie zuerst das "Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html und anschließend Latte mit Composer:

```shell
composer require latte/latte
```


Konfiguration
-------------

Erstellen Sie im Stammverzeichnis des Projekts ein neues Verzeichnis `templates`. Alle Templates werden später darin abgelegt.

Fügen Sie zur Datei `config/defaults.php` einen neuen Konfigurationsschlüssel `template` hinzu:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte kompiliert Templates in nativen PHP-Code und speichert sie im Cache auf der Festplatte. Sie sind also genauso schnell, als wären sie in nativem PHP geschrieben.

Fügen Sie zur Datei `config/defaults.php` einen neuen Konfigurationsschlüssel `template_temp` hinzu: Stellen Sie sicher, dass das Verzeichnis `{project}/tmp/templates` existiert und Lese- und Schreibrechte hat.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte regeneriert den Cache automatisch bei jeder Änderung des Templates, was in einer Produktionsumgebung deaktiviert werden kann, um etwas Leistung zu sparen:

```php
// in Produktionsumgebung auf false ändern
$settings['template_auto_refresh'] = true;
```

Fügen Sie als Nächstes eine DI-Container-Definition für die Klasse `Latte\Engine` hinzu.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Das eigentliche Rendern des Latte-Templates würde technisch funktionieren, aber wir müssen auch sicherstellen, dass es mit dem PSR-7-Response-Objekt funktioniert.

Zu diesem Zweck erstellen wir eine spezielle Klasse `TemplateRenderer`, die diese Arbeit für uns erledigt.

Erstellen Sie als Nächstes die Datei `src/Renderer/TemplateRenderer.php` und kopieren/fügen Sie diesen Code ein:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Verwendung
----------

Anstatt das Latte Engine-Objekt direkt zu verwenden, verwenden wir das `TemplateRenderer`-Objekt, um das Template in ein PSR-7-kompatibles Objekt zu rendern.

Eine typische Action-Handler-Klasse könnte so aussehen: Sie rendert ein Template mit dem Namen `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Damit dies funktioniert, erstellen Sie eine Template-Datei in `templates/home.latte` mit diesem Inhalt:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Wenn alles korrekt konfiguriert ist, sollte folgende Ausgabe angezeigt werden:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
