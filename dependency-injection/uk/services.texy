Визначення сервісів
*******************

.[perex]
Конфігурація - це місце, де ми розміщуємо визначення користувацьких сервісів. Робиться це в секції `services`.

Наприклад, ось як ми створюємо сервіс з іменем `database`, який буде екземпляром класу `PDO`:

```neon
services:
	database: PDO('sqlite::memory:')
```

Іменування служб використовується для того, щоб ми могли [посилатися |#Referencing-Services] на них. Якщо на сервіс не посилаються, немає необхідності давати йому ім'я. Тому замість імені ми просто використовуємо двокрапку:

```neon
services:
	- PDO('sqlite::memory:') # анонімний сервіс
```

Однорядковий запис може бути розбитий на кілька рядків, щоб можна було додати додаткові ключі, наприклад [setup |#setup]. Псевдонім для ключа `create:` - `factory:`.

```neon
services:
	database:
		create: PDO('sqlite::memory:')
		setup: ...
```

Потім ми отримуємо сервіс із контейнера DI, використовуючи метод `getService()` за ім'ям, або, що ще краще, метод `getByType()` за типом:

```php
$database = $container->getService('database');
$database = $container->getByType(PDO::class);
```


Створення сервісу .[#toc-creating-a-service]
============================================

Найчастіше ми створюємо сервіс, просто створюючи екземпляр класу:

```neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, secret)
```

Що створить фабричний метод у [DI-контейнері |container]:

```php
public function createServiceDatabase(): PDO
{
	return new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'secret');
}
```

Альтернативно, ключ `arguments` може бути використаний для передачі [аргументів |#Arguments]:

```neon
services:
	database:
		create: PDO
		arguments: ['mysql:host=127.0.0.1;dbname=test', root, secret]
```

Статичний метод також може створити сервіс:

```neon
services:
	database: My\Database::create(root, secret)
```

Це еквівалентно коду PHP:

```php
public function createServiceDatabase(): PDO
{
	return My\Database::create('root', 'secret');
}
```

Передбачається, що статичний метод `My\Database::create()` має певне значення, що повертається, яке повинен знати контейнер DI. Якщо у нього його немає, ми записуємо тип у конфігурацію:

```neon
services:
	database:
		create: My\Database::create(root, secret)
		type: PDO
```

Nette DI надає вам надзвичайно потужні засоби вираження, що дозволяють написати практично все, що завгодно. Наприклад, щоб [звернутися |#Referencing-Services] до іншої служби і викликати її метод. Для простоти замість `->` використовується `::`.

```neon
services:
	routerFactory: App\Router\Factory
	router: @routerFactory::create()
```

Це еквівалентно коду PHP:

```php
public function createServiceRouterFactory(): App\Router\Factory
{
	return new App\Router\Factory;
}

public function createServiceRouter(): Router
{
	return $this->getService('routerFactory')->create();
}
```

Виклики методів можна об'єднувати в ланцюжки, як у PHP:

```neon
services:
	foo: FooFactory::build()::get()
```

Це еквівалентно коду PHP:

```php
public function createServiceFoo()
{
	return FooFactory::build()->get();
}
```


Аргументи .[#toc-arguments]
===========================

Іменовані параметри також можуть використовуватися для передачі аргументів:

```neon
services:
	database: PDO(
		'mysql:host=127.0.0.1;dbname=test' # позиційний
		username: root                     # іменований
		password: secret                   # іменований
	)
```

Використання ком необов'язкове при розбитті аргументів на кілька рядків.

Звичайно, ми також можемо використовувати [інші сервіси |#Referencing-Services] або [параметри |configuration#Parameters] як аргументи:

```neon
services:
	- Foo(@anotherService, %appDir%)
```

Відповідає коду PHP:

```php
public function createService01(): Foo
{
	return new Foo($this->getService('anotherService'), '...');
}
```

Якщо перший аргумент - [автомонтований |autowiring], а ви хочете вказати другий, опустіть перший за допомогою символу `_`, например `Foo(_, %appDir%)`. Або, що ще краще, передавайте тільки другий аргумент як іменований параметр, наприклад: `Foo(path: %appDir%)`.

Nette DI і формат NEON дають вам надзвичайно потужні виразні засоби, що дозволяють написати практично все, що завгодно. Таким чином, аргументом може бути новостворений об'єкт, ви можете викликати статичні методи, методи інших сервісів або навіть глобальні функції, використовуючи спеціальну нотацію:

```neon
services:
	analyser: My\Analyser(
		FilesystemIterator(%appDir%)        # створюємо об'єкт
		DateTime::createFromFormat('Y-m-d') # викликаємо статичний метод
		@anotherService                     # передаємо інший сервіс
		@http.request::getRemoteAddress()   # викликаємо метод іншого сервісу
		::getenv(NetteMode)                 # викликаємо глобальну функцію
	)
```

Відповідає коду PHP:

```php
public function createServiceAnalyser(): My\Analyser
{
	return new My\Analyser(
		new FilesystemIterator('...'),
		DateTime::createFromFormat('Y-m-d'),
		$this->getService('anotherService'),
		$this->getService('http.request')->getRemoteAddress(),
		getenv('NetteMode')
	);
}
```


Спеціальні функції .[#toc-special-functions]
--------------------------------------------

Ви також можете використовувати спеціальні функції в аргументах для приведення або заперечення значень:

- `not(%arg%)` заперечення
- `bool(%arg%)` приведення до bool без втрат
- `int(%arg%)` приведення до int без втрат
- `float(%arg%)` приведення до плаваючого стану без втрат
- `string(%arg%)` приведення до рядка без втрат

```neon
services:
	- Foo(
		id: int(::getenv('ProjectId'))
		productionMode: not(%debugMode%)
	)
```

Переписування без втрат відрізняється від звичайного переписування в PHP, наприклад використовуючи `(int)`, у тому, що воно викидає виняток для нечислових значень.

Як аргументи можна передавати кілька сервісів. Масив усіх сервісів певного типу (тобто класу або інтерфейсу) створюється функцією `typed()`. Функція буде опускати сервіси, у яких відключено автопідключення, при цьому можна вказати кілька типів, розділених комою.

```neon
services:
	- BarsDependent( typed(Bar) )
```

Ви також можете передати масив сервісів автоматично, використовуючи [автозв'язування |autowiring#Collection-of-Services].

Масив усіх сервісів із певним [тегом |#Tags] створюється функцією `tagged()`. Можна вказати кілька тегів, розділених комою.

```neon
services:
	- LoggersDependent( tagged(logger) )
```


Посилання на сервіси .[#toc-referencing-services]
=================================================

Посилання на окремі сервіси використовуються за допомогою символу `@` и имени, например `@database`:

```neon
services:
	- create: Foo(@database)
	  setup:
			- setCacheStorage(@cache.storage)
```

Відповідає коду PHP:

```php
public function createService01(): Foo
{
	$service = new Foo($this->getService('database'));
	$service->setCacheStorage($this->getService('cache.storage'));
	return $service;
}
```

Навіть на анонімні сервіси можна посилатися за допомогою зворотного виклику, просто вкажіть їхній тип (клас або інтерфейс) замість імені. Однак зазвичай у цьому немає потреби через [автозв'язування |autowiring].

```neon
services:
	- create: Foo(@Nette\Database\Connection)  # или @\PDO
	  setup:
			- setCacheStorage(@cache.storage)
```


Setup .[#toc-setup]
===================

У секції `setup` ми перераховуємо методи, які будуть викликатися під час створення сервісу:

```neon
services:
	database:
		create: PDO(%dsn%, %user%, %password%)
		setup:
			- setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)
```

Відповідає коду PHP:

```php
public function createServiceDatabase(): PDO
{
	$service = new PDO('...', '...', '...');
	$service->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	return $service;
}
```

Також можна встановити властивості. Додавання елемента в масив також підтримується, і його слід писати в лапках, щоб не конфліктувати із синтаксисом NEON:


```neon
services:
	foo:
		create: Foo
		setup:
			- $value = 123
			- '$onClick[]' = [@bar, clickHandler]
```

Відповідає коду PHP:

```php
public function createServiceFoo(): Foo
{
	$service = new Foo;
	$service->value = 123;
	$service->onClick[] = [$this->getService('bar'), 'clickHandler'];
	return $service;
}
```

Однак статичні методи або методи інших сервісів також можуть бути викликані в налаштуванні. Ми передаємо їм фактичний сервіс як `@self`:


```neon
services:
	foo:
		create: Foo
		setup:
			- My\Helpers::initializeFoo(@self)
			- @anotherService::setFoo(@self)
```

Відповідає коду PHP:

```php
public function createServiceFoo(): Foo
{
	$service = new Foo;
	My\Helpers::initializeFoo($service);
	$this->getService('anotherService')->setFoo($service);
	return $service;
}
```


Автозв'язування .[#toc-autowiring]
==================================

Ключ `autowired` можна використовувати для виключення сервісу з автозв'язування або для впливу на його поведінку. Детальнішу інформацію див. у розділі [Автозв'язування |autowiring].

```neon
services:
	foo:
		create: Foo
		autowired: false # foo видаляється з автозв'язування
```


Теги .[#toc-tags]
=================

Інформація про користувача може бути додана до окремих сервісів у вигляді тегів:

```neon
services:
	foo:
		create: Foo
		tags:
			- cached
```

Теги також можуть мати значення:

```neon
services:
	foo:
		create: Foo
		tags:
			logger: monolog.logger.event
```

Масив сервісів з певними тегами може бути переданий як аргумент за допомогою функції `tagged()`. Можна також вказати кілька тегів, розділених комою.

```neon
services:
	- LoggersDependent( tagged(logger) )
```

Імена служб можна отримати з контейнера DI за допомогою методу `findByTag()`:

```php
$names = $container->findByTag('logger');
// $names - масив, що містить ім'я сервісу і значення тега
// наприклад ['foo' => 'monolog.logger.event', ...]
```


Режим впровадження .[#toc-inject-mode]
======================================

Прапор `inject: true` використовується для активації передавання залежностей через публічні змінні за допомогою анотації [inject |best-practices:inject-method-attribute#Inject Annotations] і методів [inject*() |best-practices:inject-method-attribute#inject Methods].

```neon
services:
	articles:
		create: App\Model\Articles
		inject: true
```

За замовчуванням `inject` активується тільки для презентерів.


Модифікація сервісів .[#toc-modification-of-services]
=====================================================

У контейнері DI є низка сервісів, які були додані вбудованим або [вашим розширенням |#di-extension]. Визначення цих сервісів можуть бути змінені в конфігурації. Наприклад, для сервісу `application.application`, який за замовчуванням є об'єктом `Nette\Application\Application`, ми можемо змінити клас:

```neon
services:
	application.application:
		create: MyApplication
		alteration: true
```

Прапор `alteration` є інформативним і говорить про те, що ми просто змінюємо існуючий сервіс.

Ми також можемо додати `setup`:

```neon
services:
	application.application:
		create: MyApplication
		alteration: true
		setup:
			- '$onStartup[]' = [@resource, init]
```

Під час перезапису сервісу ми можемо видалити вихідні аргументи, елементи `setup` або теги, для яких `reset` є:

```neon
services:
	application.application:
		create: MyApplication
		alteration: true
		reset:
			- arguments
			- setup
			- tags
```

Сервіс, доданий розширенням, також може бути видалено з контейнера:

```neon
services:
	cache.journal: false
```
