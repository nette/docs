Práce s poli
************

Instalace:

```shell
composer require nette/utils
```

Arrays
======

[Nette\Utils\Arrays |api:] je statická třída obsahující užitečné funkce pro práci s poli.

Následující příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Arrays;
```


every(array $arr, callable $callback): bool .[method]
-----------------------------------------------------

Otestuje, zda-li všechny prvky v poli odpovídají podmínce v `$callback`, která má signaturu `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
// have only bar?
$res = Arrays::every($array, function ($value): bool { return $value === 'bar'; });
// $res = false
```


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Sjednotí víceúrovňové pole do plochého.

```php
$array = Arrays::flatten([
	2 => ['a', ['b']],
	4 => ['c', 'd'],
	'e',
]);
// $array = ['a', 'b', 'c', 'd', 'e'];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Vrací prvek `$array[$key]`. Pokud neexistuje, vyhodí buď výjimku `Nette\InvalidArgumentException`, nebo je-li uveden třetí parametr `$default`, vrátí ten.

```php
// pokud $array['foo'] neexistuje, vyhodí výjimku
$value = Arrays::get($array, 'foo');

// pokud $array['foo'] neexistuje, vrátí 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Klíčem `$key` může být i pole.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrátí 'red'
```



getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Získá referenci na zadaný prvek pole. Pokud prvek neexistuje, bude vytvořen s hodnotou null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// vrátí referenci na $array['foo']
```

Stejně jako funkce [get() |#get()] umí pracovat s vícerozměrnými poli.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// vrátí referenci na $array['color']['favorite']
```


grep(array $array, string $pattern, int $flags=null): array .[method]
---------------------------------------------------------------------

Vrátí pouze ty prvky pole, jejichž hodnota odpovídá regulárnímu výrazu `$pattern`. Chyba při kompilaci nebo zpracování výrazu vyhodí výjimku `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// vrátí pouze prvky pole tvořené číslicemi
```

Jako příznak `$flags` můžeme uvést konstantu `PREG_GREP_INVERT`, což invertuje výběr.


insertAfter(array &$array, string|int $key, array $inserted): void .[method]
----------------------------------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` hned za prvek s klíčem `$key`. Pokud klíč v poli není, vkládá se na konec.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int $key, array $inserted): void .[method]
-----------------------------------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` před prvek s klíčem `$key`. Pokud klíč v poli není, vkládá se na začátek.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


isList(array $array): bool .[method]
------------------------------------

Ověří, zda-li je pole indexované podle vzestupné řady numerických klíčů od nuly, a.k.a list.

```php
Arrays::isList(['a', 'b', 'c'])); // true
Arrays::isList([4 => 1, 2, 3])); // false
Arrays::isList(['a' => 1, 'b' => 2])); // false
```


map(array $arr, callable $callback): array .[method]
----------------------------------------------------

Aplikuje `$callback` na všechny prvky v poli a vrátí pole s vrácenými hodnotami, která má signaturu `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, function ($value): string { return $value . $value; });
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Rekurzivně sloučí dvě pole. Hodí se např. ke slučování stromových struktur. Při slučování se řídí stejnými pravidly jako operátor&nbsp;`+` aplikovaný na pole, tj. k prvnímu poli přidává dvojice klíč/hodnota z druhého pole a v případě kolize klíčů ponechá hodnotu z prvního pole.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Hodnoty z druhého pole jsou vždy přidány na konec prvního. Jako trošku matoucí se může zdát zmizení hodnoty `10` z druhého pole. Je třeba si uvědomit, že tato hodnota a stejně tak hodnota `5` v poli prvním mají přiřazený stejný numerický klíč `0`, proto ve výsledném poli je jen prvek z prvního pole.


normalize(array $arr, string $filling=null): array .[method]
------------------------------------------------------------

Nahradí numerické klíče v poli za hodnotu v proměnné `$filling`.

```php
$array = Arrays::normalize(['first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize(['first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$arr, string|int $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------

Vrátí hodnotu prvku v poli, pokud neexistuje vyhazuje výjimku nebo vrací vyplněnou hodnotu v `$default`.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): void .[method]
--------------------------------------------------------------------------------

Přejmenuje klíč v poli.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


searchKey(array $array, string|int $key): int .[method]
-------------------------------------------------------

Vrátí pozici daného klíče v poli. Pozice je číslována od 0. V případě, že klíč nebude nalezen, vrátí funkce `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::searchKey($array, 'first'); // vrátí 0
```

.[note]
Verze 2 vracela `false` místo `null`.


some(array $arr, callable $callback): bool .[method]
----------------------------------------------------

Otestuje, zda-li nějaký prvek v poli odpovídá podmínce v `$callback`, která má signaturu `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
// have some bar???
$res = Arrays::some($array, function ($value): bool { return $value === 'bar'; });
// $res = true
```


ArrayHash
=========

Objekt [Nette\Utils\ArrayHash |api:] je potomkem anonymního objektu stdClass a rozšiřuje jej o schopnost zacházet s ním jako s polem, tedy například přistupovat ke členům přes hranaté závorky:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // zároveň funguje i objektový zápis
echo $hash->foo; // 123
```

Lze používat funkci `count()` a nad objektem iterovat, stejně jako v případě pole:

```php
echo count($hash); // 2

foreach ($hash as $key => $value) ...
```

Existující pole můžeme tranformovat na `ArrayHash` metodou `from()`:

```php
$array = ['foo' => 123, 'bar' => 456, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
echo $hash->foo; // 123
echo $hash->inner; // ArrayHash('a' => 'b')
echo $hash->inner->a; // 'b'
echo $hash['inner']['a']; // 'b'
```

Převod je rekurzivní, čemuž lze zabránit druhým parametrem:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
echo $hash->inner; // pole ['a' => 'b']
```


ArrayList
=========

[Nette\Utils\ArrayList |api:] představuje lineární pole, kde indexy jsou pouze celá čísla vzestupně od 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
echo count($list); // 3
```

Nad objektem lze iterovat nebo volat `count()`, stejně jako v případě pole.

Přístup ke klíčům mimo povolené hodnoty vyhodí výjimku `Nette\OutOfRangeException`:

```php
echo $list[-1]; // vyhodí Nette\OutOfRangeException
unset($list[30]); // vyhodí Nette\OutOfRangeException
```

Odstranění klíče způsobí přečíslování prvků:

```php
// ArrayList(0 => 'a', 1 => 'c')
unset($list[1]);
```

Nový prvek lze přidat na začátek metodou `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```


{{composer: nette/utils}}
