Configurazione dell'applicazione
********************************

.[perex]
Panoramica delle opzioni di configurazione dell'applicazione Nette.


Applicazione .[#toc-application]
================================

```neon
application:
	# shows "Nette Application" panel in Tracy BlueScreen?
	debugger: ...           # (bool) defaults to true

	# will error-presenter be called on error?
	catchExceptions: ...    # (bool) defaults to true in production mode

	# name of error-presenter
	errorPresenter: Error   # (string) defaults to 'Nette:Error'

	# defines the rules for resolving the presenter name to a class
	mapping: ...

	# do bad links generate warnings?
	# has effect only in developer mode
	silentLinks: ...        # (bool) defaults to false
```

Poiché i presentatori di errori non vengono richiamati per impostazione predefinita in modalità di sviluppo e gli errori vengono visualizzati da Tracy, la modifica del valore `catchExceptions` a `true` aiuta a verificare che i presentatori di errori funzionino correttamente durante lo sviluppo.

L'opzione `silentLinks` determina il comportamento di Nette in modalità sviluppatore quando la generazione dei collegamenti fallisce (ad esempio, perché non c'è un presentatore, ecc.). Il valore predefinito `false` significa che Nette attiva `E_USER_WARNING`. L'impostazione di `true` sopprime questo messaggio di errore. In un ambiente di produzione, `E_USER_WARNING` viene sempre invocato. Si può anche influenzare questo comportamento impostando la variabile del presentatore [$invalidLinkMode |creating-links#Invalid Links].

La [mappatura definisce le regole |modules#mapping] con cui il nome della classe viene derivato dal nome del presentatore.


Registrazione automatica dei presentatori .[#toc-automatic-registration-of-presenters]
--------------------------------------------------------------------------------------

Nette aggiunge automaticamente i presentatori come servizi al contenitore DI, velocizzando notevolmente la loro creazione. Il modo in cui Nette trova i presentatori può essere configurato:

```neon
application:
	# to look for presenters in Composer class map?
	scanComposer: ...      # (bool) defaults to true

	# a mask that must match the class and file name
	scanFilter: ...        # (string) defaults to '*Presenter'

	# in which directories to look for presenters?
	scanDirs:              # (string[]|false) defaults to '%appDir%'
		- %vendorDir%/mymodule
```

Le directory elencate in `scanDirs` non sovrascrivono il valore predefinito `%appDir%`, ma lo integrano, quindi `scanDirs` conterrà entrambi i percorsi `%appDir%` e `%vendorDir%/mymodule`. Se si vuole sovrascrivere la directory predefinita, si usa il [punto esclamativo |dependency-injection:configuration#Merging]:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

La scansione delle directory può essere disattivata impostando false. Non si consiglia di sopprimere completamente l'aggiunta automatica dei presentatori, altrimenti le prestazioni dell'applicazione saranno ridotte.


Latte .[#toc-latte]
===================

Questa impostazione influenza globalmente il comportamento di Latte nei componenti e nei presentatori.

```neon
latte:
	# shows Latte panel in the Tracy Bar for the main template (true) or for all components (all)?
	debugger: ...        # (true|false|'all') defaults to true

	# generates templates with declare(strict_types=1)
	strictTypes: ...     # (bool) defaults to false

	# class of $this->template
	templateClass: App\MyTemplateClass # defaults to Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Se si utilizza la versione 3 di Latte, è possibile aggiungere nuove [estensioni |latte:creating-extension] utilizzando:

```neon
latte:
	extensions:
		- Latte\Essential\TranslatorExtension
```


Instradamento .[#toc-routing]
=============================

Impostazioni di base:

```neon
routing:
	# shows routing panel in Tracy Bar?
	debugger: ...   # (bool) defaults to true

	# to serialize router to DI container?
	cache: ...      # (bool) defaults to false
```

Il router è solitamente definito nella classe [RouterFactory |routing#Route Collection]. In alternativa, i router possono essere definiti nella configurazione usando le coppie `mask: action`, ma questo metodo non offre un'ampia gamma di impostazioni:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Costanti .[#toc-constants]
==========================

Creare costanti PHP.

```neon
constants:
	Foobar: 'baz'
```

La costante `Foobar` viene creata dopo l'avvio.

.[note]
Le costanti non dovrebbero servire come variabili disponibili a livello globale. Per passare valori agli oggetti, usare l'[iniezione di dipendenza |dependency-injection:passing-dependencies].


PHP
===

È possibile impostare le direttive PHP. Una panoramica di tutte le direttive si trova su [php.net |https://www.php.net/manual/en/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```
