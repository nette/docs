Как внести вклад в код
**********************

.[perex]
Вы собираетесь внести свой вклад в Nette Framework и вам нужно разобраться в правилах и процедурах? Это руководство для начинающих шаг за шагом покажет вам, как эффективно вносить вклад в код, работать с репозиториями и внедрять изменения.


Процедура
=========

Для внесения вклада в код необходимо иметь учетную запись на [GitHub|https://github.com] и быть знакомым с основами работы с системой контроля версий Git. Если вы не владеете работой с Git, вы можете ознакомиться с руководством [git - the simple guide |https://rogerdudler.github.io/git-guide/] и, при необходимости, использовать один из множества [графических клиентов |https://git-scm.com/downloads/guis].


Подготовка среды и репозитория
------------------------------

1) на GitHub создайте [форк |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] репозитория [пакета |www:packages], который вы собираетесь изменить
2) этот репозиторий [клонируйте |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] на свой компьютер
3) установите зависимости, включая [Nette Tester |tester:], с помощью команды `composer install`
4) проверьте, что тесты работают, запустив `composer tester`
5) создайте [новую ветку |#Nová větev], основанную на последней выпущенной версии


Внедрение собственных изменений
-------------------------------

Теперь вы можете внести свои собственные изменения в код:

1) запрограммируйте необходимые изменения и не забудьте про тесты
2) убедитесь, что тесты успешно проходят, с помощью `composer tester`
3) проверьте, соответствует ли код [стандартам кодирования|#Coding Standards]
4) сохраните изменения (сделайте коммит) с описанием в [этом формате|#Popis komitu]

Вы можете создать несколько коммитов, по одному для каждого логического шага. Каждый коммит должен быть осмысленным сам по себе.


Отправка изменений
------------------

Как только вы будете удовлетворены изменениями, вы можете их отправить:

1) отправьте (push) изменения на GitHub в ваш форк
2) оттуда отправьте их в репозиторий Nette, создав [pull request|https://help.github.com/articles/creating-a-pull-request] (PR)
3) укажите в описании [достаточно информации|#popis pull requestu]


Учет замечаний
--------------

Ваши коммиты теперь увидят и другие. Обычно вы получаете комментарии с замечаниями:

1) следите за предлагаемыми изменениями
2) внесите их как новые коммиты или [объедините с предыдущими |https://help.github.com/en/github/using-git/about-git-rebase]
3) снова отправьте коммиты на GitHub, и они автоматически появятся в pull request

Никогда не создавайте новый pull request для изменения существующего.


Документация
------------

Если вы изменили функциональность или добавили новую, не забудьте также [добавить ее в документацию |documentation].


Новая ветка
===========

Если возможно, вносите изменения относительно последней выпущенной версии, т.е. последнего тега в данной ветке. Для тега `v3.2.1` вы создадите ветку этой командой:

```shell
git checkout -b new_branch_name v3.2.1
```


Coding Standards
================

Ваш код должен соответствовать [стандарту кодирования|coding standard], используемому в Nette Framework. Для проверки и исправления кода доступен автоматический инструмент. Его можно установить через Composer **глобально** в выбранную вами папку:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Теперь вы должны иметь возможность запустить инструмент в терминале. Первой командой вы проверите, а второй — исправите код в папках `src` и `tests` в текущем каталоге:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Описание коммита
================

В Nette темы коммитов имеют формат: `Presenter: fixed AJAX detection [Closes #69]`

- область, за которой следует двоеточие
- цель коммита в прошедшем времени, если возможно, начните со слова: "added .(добавлено новое свойство)", "fixed .(исправление)", "refactored .(изменение в коде без изменения поведения)", changed, removed
- если коммит нарушает обратную совместимость, добавьте "BC break"
- возможная связь с трекером проблем, например `(#123)` или `[Closes #69]`
- за темой может следовать одна пустая строка, а затем более подробное описание, включая, например, ссылки на форум


Описание pull request
=====================

При создании pull request интерфейс GitHub позволит вам указать название и описание. Укажите информативное название и в описании предоставьте как можно больше информации о причинах вашего изменения.

Также отобразится заголовок, где укажите, является ли это новой функцией или исправлением ошибки, и может ли произойти нарушение обратной совместимости (BC break). Если есть связанная проблема (issue), ссылайтесь на нее, чтобы она была закрыта после одобрения pull request.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
