Настройка на HTTP
*****************

.[perex]
Преглед на опциите за конфигуриране на Nette HTTP.

Ако не използвате цялата рамка, а само тази библиотека, прочетете [как да изтеглите конфигурацията |bootstrap:].


HTTP хедъри .[#toc-http-headers]
================================

```neon
http:
	# заголовки, которые отправляются с каждым запросом
	headers:
		X-Powered-By: MyCMS
		X-Content-Type-Options: nosniff
		X-XSS-Protection: '1; mode=block'

	# affects header X-Frame-Options
	frames: ...      # (string|bool) defaults to 'SAMEORIGIN'
```

От съображения за сигурност рамката изпраща заглавието `X-Frame-Options: SAMEORIGIN`, което гласи, че дадена страница може да бъде визуализирана само вътре в друга страница (в елемента `<iframe>`) само ако е в същия домейн. Това може да не е желателно в някои ситуации (например ако разработвате приложение за Facebook), затова поведението може да се промени чрез задаване на рамки `frames: http://allowed-host.com`.


Политика за сигурност на съдържанието .[#toc-content-security-policy]
---------------------------------------------------------------------

Заглавията на `Content-Security-Policy` (наричани по-нататък CSP) могат лесно да бъдат сглобени, като тяхното описание може да бъде намерено в [описанието на CSP |https://content-security-policy.com]. Директивите на CSP (като например `script-src`) могат да бъдат записани или като низове съгласно спецификацията, или като масиви от стойности за по-добра четимост. Тогава не е необходимо да пишете кавички около ключови думи като `'self'`. Nette също така автоматично генерира стойността `nonce`, така че `'nonce-y4PopTLM=='` ще бъде изпратен в заглавието.

```neon
http:
	# Content Security Policy
	csp:
		# строка в соответствии со спецификацией CSP
		default-src: "'self' https://example.com"

		# массив значений
		script-src:
			- nonce
			- strict-dynamic
			- self
			- https://example.com

		# bool в случае переключателей
		upgrade-insecure-requests: true
		block-all-mixed-content: false
```

Използвайте `<script n:nonce>...</script>` в шаблоните, а стойността nonce ще бъде попълнена автоматично. Създаването на сигурни уебсайтове в Nette е лесно.

По същия начин можете да добавите заглавия `Content-Security-Policy-Report-Only` (които можете да използвате паралелно с CSP) и [Feature Policy |https://developers.google.com/web/updates/2018/06/feature-policy]:

```neon
http:
	# Content Security Policy Report-Only
	cspReportOnly:
		default-src: self
		report-uri: 'https://my-report-uri-endpoint'

	# Feature Policy
	featurePolicy:
		unsized-media: none
		geolocation:
			- self
			- https://example.com
```


Бисквитка HTTP .[#toc-http-cookie]
----------------------------------

Можете да промените стойностите по подразбиране на някои параметри на методите [Nette\Http\Response::setCookie( |response#setCookie] ) и session.

```neon
http:
	# область применения cookie по пути
	cookiePath: ...        # (строка) по умолчанию '/'

	# каким хостам разрешено получать куки
	cookieDomain: 'example.com' # (строка|домен) по умолчанию unset

	# отправлять куки только через HTTPS?
	cookieSecure: ...      # (bool|auto) по умолчанию auto

	# отключает отправку куки, которые Nette использует в качестве защиты от CSRF
	disableNetteCookie: ...  # (bool) по умолчанию false
```

Параметърът `cookieDomain` определя кои домейни (произход) могат да приемат "бисквитката". Ако не е посочено, "бисквитката" се приема от същия (под)домейн, за който е зададена, *изключвайки* техните поддомейни. Ако е посочен `cookieDomain`, поддомейните също ще бъдат включени. Така че посочването на `cookieDomain` е по-малко ограничаващо, отколкото пропускането му.

Например, ако е посочен `cookieDomain: nette.org`, "бисквитката" е достъпна и за всички поддомейни, например `doc.nette.org`. Това може да се постигне и чрез посочване на `domain`, т.е. `cookieDomain: domain`.

Стойността по подразбиране на `cookieSecure` е `auto`, което означава, че ако сайтът работи на HTTPS, бисквитката ще бъде изпратена с флаг `Secure` и следователно ще бъде достъпна само през HTTPS.


HTTP проксито е .[#toc-http-proxy]
----------------------------------

Ако сайтът работи зад HTTP прокси сървър, въведете IP адреса на прокси сървъра, за да работи правилно откриването на HTTPS връзката, както и IP адреса на клиента. Това означава, че [Nette\Http\Request::getRemoteAddress() |request#getRemoteAddress] и [isSecured() |request#isSecured] връщат правилните стойности и връзките с протокол `https:` се генерират в шаблоните.

```neon
http:
	# IP-адрес, диапазон (т.е. 127.0.0.1/8) или массив этих значений
	proxy: 127.0.0.1 # (string|string[]) по умолчанию none
```


Сесия .[#toc-session]
=====================

Основни настройки на [сесията |sessions]:

```neon
session:
	# показывает панель сеанса в панели трейси?
	debugger: ...        # (bool) по умолчанию false

	# время бездействия, по истечении которого сессия завершается
	expiration: 14 days  # (string) по умолчанию '3 часа'

	# когда начинать сессию?
	autoStart: ...       # (smart|always|never) по умолчанию 'smart'

	# обработчик, служба, реализующая интерфейс SessionHandlerInterface
	handler: @handlerService
```

Параметърът `autoStart` определя кога да започне сесията. Стойността `always` означава, че сесията ще се стартира винаги при стартиране на приложението. Стойността `smart` означава, че сесията ще се стартира само при стартиране на приложението, ако вече съществува, или когато искаме да четем от нея или да записваме в нея. И накрая, `never` деактивира автоматичното стартиране на сесията.

Можете също така да посочите всички [директиви на |https://www.php.net/manual/en/session.configuration.php] PHP [сесията |https://www.php.net/manual/en/session.configuration.php] (във формат camelCase), както и [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters]. Пример:

```neon
session:
	# 'session.name' written as 'name'
	name: MYID

	# 'session.save_path' written as 'savePath'
	savePath: "%tempDir%/sessions"
```


Бисквитка за сесия .[#toc-session-cookie]
-----------------------------------------

Сесийната "бисквитка" се изпраща със същите параметри като [другите "бисквитки" |#HTTP-Cookie], но можете да ги промените за нея:

```neon
session:
	# каким хостам разрешено получать cookie-файл
	cookieDomain: 'example.com'   # (string|domain)

	# ограничения при доступе к кросс-оригинальному запросу
	cookieSamesite: None          # (Strict|Lax|None) defaults to Lax
```

Опцията `cookieSamesite` влияе върху това дали се изпраща бисквитка при [заявки от различни сайтове |nette:glossary#SameSite-Cookie], което осигурява известна защита срещу атаки [Cross-Site Request Forgery |nette:glossary#Cross-Site-Request-Forgery-CSRF].
