Práce s callbacky
*****************

.[perex]
[api:Nette\Utils\Callback] je statická třída s funkcemi pro práci s [PHP callbacky |https://php.net/manual/en/language.types.callable.php].


Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax = false): callable .[method]
----------------------------------------------------------

Zkontroluje, zda proměnná `$callable` je platný callback. Jinak vyhodí `Nette\InvalidArgumentException`. Pokud `$syntax` je true, funkce jen ověří, že `$callable` má strukturu callbacku, ale neověřuje, zda daná třída nebo metoda skutečně existuje.

```php
Callback::check('trim'); // nevyhodí výjimku
Callback::check(['NonExistentClass', 'method']); // vyhodí Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // nevyhodí výjimku
Callback::check(function () {}); // nevyhodí výjimku
Callback::check(null); // vyhodí Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Převede PHP callback do textové formy.

```php
echo Callback::toString('trim'); // trim
echo Callback::toString(['MyClass', 'method']); // MyClass::method
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Vrací reflexi pro metodu nebo funkci v PHP callbacku.

```php
$ref = Callback::toReflection('trim');
// $ref je ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref je ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Zjišťuje, zda je PHP callback funkcí nebo statickou metodou.

```php
echo Callback::isStatic('trim'); // true
echo Callback::isStatic(['MyClass', 'method']); // true
echo Callback::isStatic([$obj, 'method']); // false
echo Callback::isStatic(function () {}); // false
```


closure($callable): Closure .[method deprecated]
------------------------------------------------

(nebo `closure($classOrObject, $method): Closure`)

Převede PHP callback na objekt "Closure":https://php.net/manual/en/class.closure.php.

```php
$trimmer = Callback::closure('trim');
echo $trimmer(' hello '); // 'hello'
```

.[note]
Od PHP 7.1 používejte nativní `Closure::fromCallable`:https://php.net/manual/en/closure.fromcallable.php.


invoke($callable, ...$args): mixed .[method deprecated]
-------------------------------------------------------

Zavolá `$callable` a předá mu následující parametery jako argumenty a vrátí jím vrácenou hodnotu..

Pokud není callback platný, vyhodí `Nette\InvalidArgumentException`, na rozdíl od `call_user_func`, který jen vygeneruje varování.

```php
$callback = 'trim';
echo Callback::invoke($callback, ' hello '); // 'hello'
```

.[note]
Od PHP 7.0 používejte nativní `$callback($arg, ...)`.


invokeArgs($callable, array $args = []): mixed .[method deprecated]
-------------------------------------------------------------------

Zavolá `$callable` s argumenty `$args` a vrátí jím vrácenou hodnotu..

Pokud není callback platný, vyhodí `Nette\InvalidArgumentException`, na rozdíl od `call_user_func`, který jen vygeneruje varování.

```php
$callback = 'trim';
echo Callback::invoke($callback, [' hello ']); // 'hello'
```

.[note]
Od PHP 7.0 používejte nativní `$callback(...$args)`.


{{composer: nette/utils}}
