Finder : Recherche dans les systèmes de fichiers
************************************************

.[perex]
Vous avez besoin de parcourir des répertoires sur le disque ? Vous recherchez des fichiers dans ceux-ci ? Le cours [api:Nette\Utils\Finder] vous facilitera la tâche.


Installation :

```shell
composer require nette/utils
```

Tous les exemples supposent que l'alias de classe suivant est défini :

```php
use Nette\Utils\Finder;
```


Recherche de fichiers .[#toc-searching-for-files]
-------------------------------------------------

Comment trouver tous les fichiers `*.txt` dans le répertoire `$dir` et tous ses sous-répertoires ?

```php
foreach (Finder::findFiles('*.txt')->from($dir) as $key => $file) {
	// $key is a string containing absolute filename with path
	// $file is an instance of Nette\Utils\FileInfo
}
```

Les fichiers de la variable `$file` sont des instances de la classe [Nette\Utils\FileInfo |api:].

Si le répertoire n'existe pas, un message d'erreur est émis à l'adresse `Nette\UnexpectedValueException`.

Et qu'en est-il de la recherche de fichiers dans un répertoire sans sous-répertoires ? Au lieu de `from()`, utilisez `in()`:

```php
Finder::findFiles('*.txt')->in($dir)
```

Recherchez par plusieurs masques et même plusieurs répertoires à la fois :

```php
Finder::findFiles('*.txt', '*.php')
	->in($dir1, $dir2) // or from($dir1, $dir2)
```

Les paramètres peuvent également être des tableaux :

```php
Finder::findFiles(['*.txt', '*.php'])
	->in([$dir1, $dir2]) // or from([$dir1, $dir2])
```

La profondeur de la recherche peut être limitée en utilisant la méthode `limitDepth()`.


Recherche de répertoires .[#toc-searching-for-directories]
----------------------------------------------------------

En plus des fichiers, il est possible de rechercher des répertoires en utilisant `Finder::findDirectories('subdir*')`.

Il est également possible de rechercher des fichiers et des répertoires à l'aide de `Finder::find('*.txt')`, le masque ne s'appliquant dans ce cas qu'aux fichiers. Lors d'une recherche récursive avec `from()`, le sous-répertoire est retourné en premier, suivi des fichiers qu'il contient, ce qui peut être inversé avec `childFirst()`.


Masque .[#toc-mask]
-------------------

Le masque ne doit pas seulement décrire le nom du fichier, mais aussi le chemin. Exemple : recherche des fichiers `*.jpg` situés dans un sous-répertoire commençant par `imag`:

```php
Finder::findFiles('imag*/*.jpg')
```

Ainsi, les caractères génériques connus `*` and `?` représentent tous les caractères, sauf le séparateur de répertoire `/`. The double `**` représente tous les caractères, y compris le séparateur de répertoire :

```php
Finder::findFiles('imag**/*.jpg')
// finds also image/subdir/file.jpg
```

En outre, vous pouvez utiliser dans les plages de masques `[...]` ou des plages négatives `[!...]` connues des expressions régulières. Recherche de fichiers `*.txt` contenant un chiffre dans le nom :

```php
Finder::findFiles('*[0-9]*.txt')
```


Excluant .[#toc-excluding]
--------------------------

Utilisez `exclude()` pour passer des masques auxquels le fichier ne doit pas correspondre. Recherche des fichiers `*.txt`, à l'exception de ceux dont le nom contient "X" :

```php
Finder::findFiles('*.txt')
	->exclude('*X*')
```

Et utilisez `exclude()` pour sauter les sous-répertoires explorés :

```php
Finder::findFiles('*.php')
	->from($dir)
	->exclude('temp', '.git')
```


Filtrage de .[#toc-filtering]
-----------------------------

Vous pouvez également filtrer les résultats, par exemple par taille de fichier. Voici comment trouver les fichiers dont la taille est comprise entre 100 et 200 octets :

```php
Finder::findFiles('*.php')
	->size('>=', 100)
	->size('<=', 200)
	->from($dir)
```

Filtrage par la date de la dernière modification. Exemple : recherche des fichiers modifiés au cours des deux dernières semaines :

```php
Finder::findFiles('*.php')
	->date('>', '- 2 weeks')
	->from($dir)
```

Les deux fonctions comprennent les opérateurs `>`, `>=`, `<`, `<=`, `=`, `!=`.

Ici, nous parcourons les fichiers PHP dont le nombre de lignes est supérieur à 1000. Comme filtre, nous utilisons un callback personnalisé :

```php
$hasMoreThan100Lines = fn(Nette\Utils\FileInfo $file) => count(file($file->getPathname())) > 1000;

Finder::findFiles('*.php')
	->filter($hasMoreThan100Lines)
```

Pratique, non ? Vous trouverez certainement une utilité au Finder dans vos applications.
