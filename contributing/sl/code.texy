Prispevek h kodi
****************

.[perex]
Ali nameravate prispevati k ogrodju Nette in se morate seznaniti s pravili in postopki? Ta priročnik za začetnike vas bo popeljal skozi korake za učinkovito prispevanje h kodi, delo z repozitoriji in izvajanje sprememb.


Postopek .[#toc-procedure]
==========================

Če želite prispevati h kodi, morate imeti račun na [GitHubu |https://github.com] in poznati osnove dela s sistemom za nadzor različic Git. Če sistema Git ne poznate, si lahko ogledate priročnik [git - the simple guide |https://rogerdudler.github.io/git-guide/] in razmislite o uporabi enega od številnih [grafičnih odjemalcev |https://git-scm.com/downloads/guis].


Priprava okolja in skladišča .[#toc-preparing-the-environment-and-repository]
-----------------------------------------------------------------------------

1) Na spletnem mestu GitHub ustvarite [vilico |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] [skladišča paketov |www:packages], ki ga nameravate spremeniti
2) [Klonirate |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] to shrambo v svoj računalnik
3) Z ukazom `composer install` namestite odvisnosti, vključno s [programom Nette Tester |tester:].
4) Preverite, ali testi delujejo, tako da zaženete `composer tester`
5) Ustvarite [novo vejo, ki |#New Branch] temelji na zadnji izdani različici


Izvajanje lastnih sprememb .[#toc-implementing-your-own-changes]
----------------------------------------------------------------

Zdaj lahko izvedete lastne prilagoditve kode:

1) Izvedite želene spremembe in ne pozabite na teste
2) Poskrbite, da se testi uspešno izvedejo z uporabo `composer tester`
3) Preverite, ali koda ustreza [standardom kodiranja |#coding standards]
4) Shranite (commit) spremembe z opisom v [tej |#Commit Description]obliki

Ustvarite lahko več zavez, po eno za vsak logični korak. Vsaka oddaja mora biti smiselna sama po sebi.


Oddaja sprememb .[#toc-submitting-changes]
------------------------------------------

Ko ste s spremembami zadovoljni, jih lahko predložite:

1) Spremembe prenesite na GitHub v svojo vilico
2) Od tam jih predložite v skladišče Nette tako, da ustvarite [pull request|https://help.github.com/articles/creating-a-pull-request] (PR)
3) V opisu navedite [dovolj informacij |#pull request description]


Vključevanje povratnih informacij .[#toc-incorporating-feedback]
----------------------------------------------------------------

Vaše oddaje so zdaj vidne drugim. Pogosto prejmete komentarje s predlogi:

1) Spremljajte predlagane spremembe
2) Vključite jih kot nove spremembe ali [jih združite s prejšnjimi |https://help.github.com/en/github/using-git/about-git-rebase]
3) Ponovno pošljite spremembe v GitHub in samodejno se bodo pojavile v zahtevi za povlečenje.

Nikoli ne ustvarjajte nove zahteve za prenos, da bi spremenili obstoječo zahtevo.


Dokumentacija .[#toc-documentation]
-----------------------------------

Če ste spremenili funkcionalnost ali dodali novo, ne pozabite [tega dodati tudi v dokumentacijo |documentation].


Nova veja .[#toc-new-branch]
============================

Če je mogoče, spremembe izvedite glede na zadnjo izdano različico, tj. zadnjo oznako v veji. Za oznako v3.2.1 ustvarite vejo s tem ukazom:

```shell
git checkout -b new_branch_name v3.2.1
```


Standardi kodiranja .[#toc-coding-standards]
============================================

Vaša koda mora ustrezati [standardom kodiranja, |coding standard] ki se uporabljajo v okviru Nette. Za preverjanje in popravljanje kode je na voljo samodejno orodje. Namestite ga lahko **globalno** prek programa Composer v izbrano mapo:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Orodje lahko zaženete v terminalu. Prvi ukaz preveri, drugi pa popravi kodo v mapah `src` in `tests` v trenutnem imeniku:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Obveznost Opis .[#toc-commit-description]
=========================================

V sistemu Nette imajo predmeti sprememb naslednjo obliko: `Presenter: fixed AJAX detection [Closes #69]`

- sledi dvopičje
- namen zaveze v preteklem času; če je mogoče, začnite z besedami, kot so: added, fixed, refactored, changed, removed
- če oddaja krši združljivost za nazaj, dodajte "BC break"
- kakršno koli povezavo s programom za sledenje težavam, na primer `(#123)` ali `[Closes #69]`
- za temo je lahko ena prazna vrstica, ki ji sledi podrobnejši opis, na primer vključno s povezavami do foruma


Opis zahtevka za izvleček .[#toc-pull-request-description]
==========================================================

Pri ustvarjanju zahteve za prenos vam vmesnik GitHub omogoča vnos naslova in opisa. Navedite jedrnat naslov in v opis vključite čim več informacij o razlogih za vašo spremembo.

V naslovu navedite tudi, ali gre za novo funkcijo ali popravek napake in ali lahko povzroči težave s povratno združljivostjo (BC break). Če obstaja povezana težava, se nanjo povežite, tako da bo po odobritvi zahteve za spremembo zaprta.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
