Практики за разработчици
************************


Инсталиране .[#toc-installation]
================================

Най-добрият начин за инсталиране на Latte е да се използва Composer:

```shell
composer require latte/latte
```

Поддържани версии на PHP (важи за последните версии на Latte):

| версия | съвместима с PHP
|-----------------|-------------------
| Latte 3.0 | PHP 8.0 - 8.2
| Latte 2.11 | PHP 7.1 - 8.2
| Latte 2.8 - 2.10 | PHP 7.1 - 8.1


Как да визуализирате шаблон .[#toc-how-to-render-a-template]
============================================================

Как да визуализираме шаблон? Просто използвайте този прост код:

```php
$latte = new Latte\Engine;
// директория за кеш
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* template variables */ ];
// или $params = new TemplateParameters(/* ... */);

// визуализиране на изхода
$latte->render('template.latte', $params);
// или извеждане на променлива
$output = $latte->renderToString('template.latte', $params);
```

Параметрите могат да бъдат масиви или още по-добре [обекти |#Parameters as a class], което ще осигури проверка на типа и предлагане в редактора.

.[note]
Можете да намерите и примери за използване в хранилището [Latte examples |https://github.com/nette-examples/latte].


Производителност и кеширане .[#toc-performance-and-caching]
===========================================================

Шаблоните на Latte са изключително бързи, тъй като Latte ги компилира директно в PHP код и ги кешира на диска. По този начин те нямат допълнителни разходи в сравнение с шаблоните, написани на чист PHP.

Кешът се възстановява автоматично при всяка промяна на изходния файл. Така че можете удобно да редактирате своите Latte шаблони по време на разработката и да виждате промените веднага в браузъра. Можете да деактивирате тази функция в производствена среда и да спестите малко производителност:

```php
$latte->setAutoRefresh(false);
```

Когато се внедрява в производствен сървър, първоначалното генериране на кеш, особено за по-големи приложения, може да отнеме известно време. Latte има вградена превенция срещу "препускане на кеша:https://en.wikipedia.org/wiki/Cache_stampede".
Това е ситуация, при която сървърът получава голям брой едновременни заявки и тъй като кешът на Latte все още не съществува, всички те ще го генерират едновременно. Което води до скок на процесора.
Latte е умен и когато има няколко едновременни заявки, само първата нишка генерира кеша, а останалите изчакват и след това го използват.


Параметри като клас .[#toc-parameters-as-a-class]
=================================================

По-добре от подаването на променливи към шаблона като масиви е да се създаде клас. Получавате [безопасен за типа запис |type-system], [хубаво предложение в IDE |recipes#Editors and IDE] и начин да [регистрирате филтри |extending-latte#Filters Using the Class] и [функции |extending-latte#Functions Using the Class].

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Деактивиране на автоматичното избягване на променлива .[#toc-disabling-auto-escaping-of-variable]
=================================================================================================

Ако променливата съдържа HTML низ, можете да я маркирате така, че Latte да не я извежда автоматично (и следователно двойно). По този начин се избягва необходимостта от посочване на `|noescape` в шаблона.

Най-лесният начин е да обвиете низа в обект `Latte\Runtime\Html`:

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

Latte също така не избягва всички обекти, които имплементират интерфейса `Latte\HtmlStringable`. Така че можете да създадете свой собствен клас, чийто метод `__toString()` ще връща HTML код, който няма да бъде ескапиран автоматично:

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
Методът `__toString` трябва да връща коректен HTML код и да осигурява ескапиране на параметрите, в противен случай може да възникне XSS уязвимост!


Как да разширим Latte с помощта на филтри, етикети и др. .[#toc-how-to-extend-latte-with-filters-tags-etc]
==========================================================================================================

Как да добавите потребителски филтър, функция, таг и т.н. в Latte? Научете това в главата [Разширяване на Latte |extending Latte].
Ако искате да използвате повторно промените си в различни проекти или ако искате да ги споделите с други хора, тогава трябва да [създадете разширение |creating-extension].


Всеки код в шаблона `{php ...}` .{data-version:3.0}{toc: RawPhpExtension}
=========================================================================

Във вътрешността на символа могат да се записват само PHP изрази [`{do}` |tags#do] таг, така че не можете например да вмъквате конструкции като `if ... else` или изречения, завършващи с точка и запетая.

Можете обаче да регистрирате разширението `RawPhpExtension`, което добавя тага `{php ...}`. Можете да го използвате, за да вмъкнете какъвто и да е PHP код. То не подлежи на никакви правила за режим на пясъчник, така че използването му е отговорност на автора на шаблона.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Превод в шаблони .{data-version:3.0}{toc: TranslatorExtension}
==============================================================

Използвайте разширението `TranslatorExtension`, за да добавите [`{_...}` |tags#_], [`{translate}` |tags#translate] и да филтрирате [`translate` |filters#translate] към шаблона. Те се използват за превод на стойности или части от шаблона на други езици. Параметърът е методът (извикващ се на PHP), който извършва превода:

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// създаване на $translated от $original в съответствие с $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] в PHP 8.0
);
$latte->addExtension($extension);
```

Преводачът се извиква по време на изпълнение, когато шаблонът се визуализира. Въпреки това Latte може да превежда всички статични текстове по време на компилирането на шаблона. Това спестява производителност, тъй като всеки низ се превежда само веднъж и полученият превод се записва в компилирания файл. По този начин се създават няколко компилирани версии на шаблона в кеш директорията, по една за всеки език. За да направите това, трябва само да посочите езика като втори параметър:

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

Под статичен текст разбираме например `{_'hello'}` или `{translate}hello{/translate}`. Нестатичният текст, като например `{_$foo}`, ще продължи да се превежда по време на изпълнение.

Шаблонът може също така да предава допълнителни параметри на преводача чрез `{_$original, foo: bar}` или `{translate foo: bar}`, които той получава като масив `$params`:

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


Отстраняване на грешки и Tracy .[#toc-debugging-and-tracy]
==========================================================

Latte се опитва да направи разработката възможно най-приятна. За целите на отстраняването на грешки има три тага [`{dump}` |tags#dump], [`{debugbreak}` |tags#debugbreak] и [`{trace}` |tags#trace].

Най-голямо удобство ще получите, ако инсталирате чудесния [инструмент за отстраняване на грешки Tracy |tracy:] и активирате приставката Latte:

```php
// дава възможност на Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// активира разширението на Трейси
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);
```

Сега ще виждате всички грешки в чист червен екран, включително грешки в шаблони с подчертаване на редове и колони[(видео) |https://github.com/nette/tracy/releases/tag/v2.9.0].
В същото време в долния десен ъгъл в така наречения Tracy Bar се появява таб за Latte, в който можете ясно да видите всички визуализирани шаблони и техните връзки (включително възможност за щракване в шаблона или компилирания код), както и променливите:

[* latte-debugging.webp *]

Тъй като Latte компилира шаблоните в четлив PHP код, можете удобно да ги преглеждате във вашата IDE.


Linter: Проверяване на синтаксиса на шаблона .{data-version:2.11}{toc: Linter}
==============================================================================

Инструментът Linter ще ви помогне да преминете през всички шаблони и да проверите за грешки в синтаксиса. Той се стартира от конзолата:

```shell
vendor/bin/latte-lint <path>
```

Ако използвате потребителски тагове, създайте и свой персонализиран Linter, например `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// въведете действителния път до файла autoload.php
require __DIR__ . '/vendor/autoload.php';

$linter = new Latte\Tools\Linter($engine);
$linter->scanDirectory($path);

$engine = new Latte\Engine;
// регистрира отделни разширения тук
$engine->addExtension(/* ... */);

$path = $argv[1];
$linter = new Latte\Tools\Linter(engine: $engine);
$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```


Зареждане на шаблони от низ .[#toc-loading-templates-from-a-string]
===================================================================

Трябва да зареждате шаблони от низове вместо от файлове, може би за целите на тестването? [StringLoader |extending-latte#stringloader] ще ви помогне:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Обработчик на изключения .[#toc-exception-handler]
==================================================

Можете да дефинирате свой собствен манипулатор за очакваните изключения. Изключенията, повдигнати вътре [`{try}` |tags#try] и в [пясъчника |sandbox] се предават към него.

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Автоматично търсене на оформление .[#toc-automatic-layout-lookup]
=================================================================

Използване на тага [`{layout}` |template-inheritance#layout-inheritance], шаблонът определя своя родителски шаблон. Възможно е също така макетът да се търси автоматично, което ще опрости писането на шаблони, тъй като няма да е необходимо те да включват тага `{layout}`.

Това се постига по следния начин:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// връща пътя до родителския файл на шаблона
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

Ако шаблонът не трябва да има оформление, той ще посочи това с тага `{layout none}`.
