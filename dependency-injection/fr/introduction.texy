Qu'est-ce que l'injection de dépendances ?
******************************************

.[perex]
Ce chapitre vous présente les pratiques de programmation de base qui sous-tendent l'ensemble du framework Nette et que vous devriez suivre lorsque vous écrivez vos propres applications. Ce sont les bases nécessaires pour écrire un code propre, compréhensible et facile à maintenir.

Si vous apprenez et suivez ces règles, le framework sera là pour vous à chaque étape du processus. Il s'occupera des tâches de routine pour vous et vous mettra le plus à l'aise possible pour que vous puissiez vous concentrer sur la logique elle-même.

Les principes que nous allons présenter ici sont assez simples. Vous n'avez aucun souci à vous faire.


Vous vous souvenez de votre premier programme ? .[#toc-remember-your-first-program]
-----------------------------------------------------------------------------------

Nous n'avons aucune idée du langage dans lequel vous l'avez écrit, mais s'il s'agissait de PHP, il ressemblerait probablement à quelque chose comme ceci :

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // imprime 24
```

Quelques lignes de code insignifiantes, et pourtant tant de concepts clés y sont cachés. Nous voyons qu'il y a des variables. Que le code est décomposé en unités plus petites, qui sont des fonctions, par exemple. Que nous leur passons des arguments d'entrée et qu'elles renvoient des résultats. Il ne manque que les conditions et les boucles.

Le fait de passer des arguments à une fonction et qu'elle renvoie un résultat est un concept parfaitement compréhensible et utilisé dans d'autres domaines, comme les mathématiques.

Une fonction a une signature, qui se compose de son nom, d'une liste de paramètres et de leurs types, et enfin du type de valeur de retour. En tant qu'utilisateurs, nous sommes intéressés par la signature ; nous n'avons généralement pas besoin de savoir quoi que ce soit sur l'implémentation interne.

Imaginons maintenant que la signature d'une fonction ressemble à ceci :

```php
function addition(float $x): float
```

Une addition avec un seul paramètre ? C'est bizarre... Que penses-tu de ça ?

```php
function addition(): float
```

C'est vraiment bizarre, n'est-ce pas ? Comment pensez-vous que la fonction est utilisée ?

```php
echo addition(); // qu'est-ce que ça imprime ?
```

En regardant un tel code, nous sommes confus. Non seulement un débutant ne le comprendrait pas, mais même un programmeur compétent ne comprendrait pas un tel code.

On se demande à quoi ressemblerait une telle fonction à l'intérieur ? Où trouverait-elle les additions ? Elle les obtiendrait probablement d'une manière ou d'une autre par elle-même, comme ceci :

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Il s'avère qu'il y a des liens cachés vers d'autres fonctions (ou méthodes statiques) dans le corps de la fonction, et pour trouver d'où viennent réellement les addends, nous devons creuser davantage.


Pas par là ! .[#toc-not-this-way]
---------------------------------

La conception que nous venons de montrer est l'essence même de nombreuses caractéristiques négatives :

- la signature de la fonction prétendait qu'elle n'avait pas besoin d'addition, ce qui nous a déconcertés
- nous n'avons aucune idée de la façon de faire calculer la fonction avec deux autres nombres
- nous avons dû regarder dans le code pour voir où il prend les additions
- nous avons découvert des liaisons cachées
- pour bien comprendre, nous devons également explorer ces liaisons.

Et est-ce même le rôle de la fonction d'addition de se procurer des entrées ? Bien sûr que non.  Sa responsabilité est uniquement d'ajouter.


Nous ne voulons pas rencontrer un tel code, et nous ne voulons certainement pas l'écrire. Le remède est simple : revenez à l'essentiel et utilisez simplement des paramètres :


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Règle n° 1 : utiliser des paramètres .[#toc-rule-1-use-parameters]
------------------------------------------------------------------

La règle la plus importante est la suivante : **toutes les données dont les fonctions ou les classes ont besoin doivent leur être transmises**.

Si nous enfreignons cette règle, il sera impossible de rendre le code compréhensible, propre et durable.

Si nous la suivons, nous nous dirigeons vers un code sans contraintes cachées. Vers un code compréhensible non seulement pour l'auteur, mais aussi pour toute personne qui le lira par la suite. Où tout est compréhensible à partir des signatures des fonctions et des classes et où il n'est pas nécessaire de chercher des secrets cachés dans l'implémentation.

Cette technique de passage d'arguments est techniquement appelée **injection de dépendance**.

(Ne confondez pas l'injection de dépendance avec un "conteneur d'injection de dépendance" ; c'est quelque chose de radicalement différent, et nous couvrirons les conteneurs dans le [chapitre suivant |container]).


Des fonctions aux classes .[#toc-from-functions-to-classes]
-----------------------------------------------------------

Et quel est le rapport avec les classes ? Une classe est une entité plus complexe qu'une simple fonction, mais la règle n° 1 s'applique ici aussi. Il y a simplement [plus de façons de passer des arguments |passing-dependencies]. Par exemple, tout comme dans le cas d'une fonction :

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

Ou en utilisant d'autres méthodes, ou le constructeur directement :

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Ces deux exemples sont tout à fait conformes à l'injection de dépendances.


Exemples concrets .[#toc-real-life-examples]
--------------------------------------------

Dans le monde réel, vous n'écrirez pas de classes pour additionner des nombres. Passons maintenant aux exemples de la vie réelle.

Ayons une classe `Article` représentant un article de blog :

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// sauvegarde l'article dans la base de données
	}
}
```

et l'utilisation sera la suivante :

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

La méthode `save()` stockera l'article dans une table de base de données. L'implémenter en utilisant [Nette Database |database:] serait un jeu d'enfant, s'il n'y avait pas un problème : où `Article` obtient-il la connexion à la base de données, c'est-à-dire l'objet de classe `Nette\Database\Connection`?

Il semble que nous ayons beaucoup d'options. Elle peut la prendre dans une variable statique. Ou hériter de la classe qui fournira la connexion à la base de données. Ou tirer parti de ce que l'on appelle un singleton. Ou encore les "façades" utilisées dans Laravel :

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Super, nous avons résolu le problème.

Ou bien l'avons-nous fait ?

Rappelez-vous la [règle n° 1 : utiliser des paramètres |#rule #1: use parameters]: nous devons leur transmettre toutes les données dont la classe a besoin. Parce que si nous ne le faisons pas, et que nous enfreignons la règle, nous nous engageons sur la voie d'un code sale, plein de liaisons cachées, incompréhensible, et le résultat sera une application difficile à maintenir et à développer.

L'utilisateur de la classe `Article` n'a aucune idée de l'endroit où la méthode `save()` stocke l'article. Dans une table de la base de données ? Dans laquelle, celle de production ou celle de développement ? Et comment cela peut-il être modifié ?

L'utilisateur doit regarder comment la méthode `save()` est mise en œuvre pour trouver l'utilisation de la méthode `DB::insert()`. Il doit donc chercher plus loin pour savoir comment cette méthode permet d'obtenir une connexion à la base de données. Et les liaisons cachées peuvent former une chaîne assez longue.

Les liaisons cachées, les façades Laravel ou les variables statiques ne sont jamais présentes dans un code propre et bien conçu. Dans un code propre et bien conçu, les arguments sont passés :

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Encore plus pratique, comme nous le verrons ensuite, est d'utiliser un constructeur :

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Si vous devez écrire une classe qui nécessite une base de données, par exemple, ne cherchez pas à savoir où la trouver, mais laissez-la vous être transmise. Peut-être en tant que paramètre d'un constructeur ou d'une autre méthode. Déclarez les dépendances. Exposez-les dans l'API de votre classe. Vous obtiendrez un code compréhensible et prévisible.

Que pensez-vous de cette classe qui enregistre les messages d'erreur ?

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Qu'en pensez-vous, avons-nous suivi la [règle n°1 : utiliser des paramètres |#rule #1: use parameters]?

On ne l'a pas fait.

La classe *obtient* l'information clé, le répertoire contenant le fichier journal, à partir d'une constante.

Voir un exemple d'utilisation :

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Sans connaître l'implémentation, pourriez-vous répondre à la question de savoir où sont écrits les messages ? Cela vous suggérerait-il que l'existence de la constante LOG_DIR est nécessaire pour que cela fonctionne ? Et seriez-vous en mesure de créer une seconde instance qui écrirait à un endroit différent ? Certainement pas.

Réparons la classe :

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

La classe est maintenant beaucoup plus claire, plus configurable et donc plus utile.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Mais je m'en fiche ! .[#toc-but-i-don-t-care]
---------------------------------------------

*"Lorsque je crée un objet Article et que j'appelle save(), je ne veux pas m'occuper de la base de données, je veux juste qu'il soit enregistré dans celle que j'ai définie dans la configuration. "*

*"Quand j'utilise Logger, je veux juste que le message soit écrit, et je ne veux pas m'occuper de l'endroit. Laissez les paramètres globaux être utilisés. "*

Ces commentaires sont corrects.

À titre d'exemple, prenons une classe qui envoie des bulletins d'information et enregistre comment cela s'est passé :

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Cependant, la nouvelle classe `Logger`, qui n'utilise plus la constante `LOG_DIR`, requiert le chemin d'accès au fichier dans le constructeur. Comment résoudre ce problème ? La classe `NewsletterDistributor` ne se soucie pas de l'endroit où les messages sont écrits, elle veut simplement les écrire.

La solution est à nouveau la [règle n°1 : utiliser des paramètres |#rule #1: use parameters]: passer toutes les données dont la classe a besoin.

Nous passons donc le chemin d'accès au journal au constructeur, que nous utilisons ensuite pour créer l'objet `Logger`? Non. Parce que le chemin n'est pas la donnée dont la classe `NewsletterDistributor` a besoin ; c'est ce dont `Logger` a besoin. La classe a besoin du logger lui-même. Et nous allons passer cela :


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Maintenant, il est clair d'après les signatures de la classe `NewsletterDistributor` que la journalisation fait partie de ses fonctionnalités. Et vous avez la possibilité de remplacer le logger par un autre.

Alors que dans l'ensemble de l'application, nous pouvons nous contenter d'une seule instance du logger et la passer partout où quelque chose est enregistré, il en va autrement dans le cas de la classe `Article`. Nous voudrons créer plusieurs instances de cette classe. Comment gérer la dépendance de la base de données dans le constructeur ? Prenons l'exemple d'un contrôleur qui est censé enregistrer un article dans la base de données après avoir soumis un formulaire :

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Une solution possible est suggérée : passer l'objet base de données au `UserController` par le constructeur et utiliser `$article = new Article($this->db)`.

Comme dans le cas précédent, ce n'est pas la bonne pratique. La base de données n'est pas une dépendance de `UserController`, mais une dépendance de `Article`. De plus, dès que le constructeur de la classe `Article` est modifié d'une manière ou d'une autre (un nouveau paramètre est ajouté), nous devrons modifier le code à tous les endroits où des instances sont créées.

La solution est celle des fabriques.


Règle n° 2 : utiliser des fabriques .[#toc-rule-2-use-factories]
----------------------------------------------------------------

En supprimant les liaisons cachées et en passant toutes les données en argument, nous obtenons des classes plus configurables et plus flexibles. Par conséquent, nous avons toujours besoin de quelque chose pour créer et configurer ces classes plus flexibles. Nous l'appellerons une fabrique.

La règle de base est la suivante : si une classe a des dépendances, laissez la création de leurs instances à la fabrique.

Les factory sont un remplacement plus intelligent de l'opérateur `new` dans le monde de l'injection de dépendances.


Usine .[#toc-factory]
---------------------

Une fabrique est une classe qui crée et configure des objets. La fabrique qui produit `Article` sera appelée `ArticleFactory` et son utilisation dans le contrôleur sera la suivante :

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// laissons la fabrique créer un objet
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Une implémentation de factory pourrait ressembler à ceci :


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

À ce stade, lorsque la signature du constructeur de la classe `Article` change, la seule partie du code qui doit réagir à ce changement est la fabrique `ArticleFactory`. Tout autre code qui travaille avec les objets `Article`, comme `UserController`, n'est pas affecté.

Vous vous tapez peut-être le front en ce moment en vous demandant comment nous avons pu nous aider. La quantité de code a augmenté et s'est déplacée du contrôleur vers une classe séparée. Cependant, Nette DI a un atout caché dans sa manche. Il comprend le concept des fabriques et peut même [écrire un tel service pour nous |factory]. Ainsi, au lieu de la classe `ArticleFactory`, nous pouvons simplement créer une interface :

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Mais nous prenons un peu d'avance maintenant, nous y reviendrons dans une minute.


Résumé .[#toc-summary]
----------------------

Au début de ce chapitre, nous avons promis de démontrer un principe simple de conception d'applications. Bien que le principe en lui-même soit simple (donner aux classes les données dont elles ont besoin), ce qui en découle demande plus de réflexion. N'hésitez pas à lire ce chapitre plusieurs fois.

Les programmeurs qui se sont débarrassés de leurs vieilles habitudes et ont commencé à utiliser l'injection de dépendances considèrent systématiquement qu'il s'agit d'un moment charnière dans leur vie professionnelle. Cela leur a ouvert un monde d'applications claires et durables.

Nous allons maintenant voir ce qu'est le [conteneur d'injection de dépendances |container].
