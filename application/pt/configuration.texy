Configuração da aplicação
*************************

.[perex]
Visão geral das opções de configuração para a Aplicação Nette.


Aplicação .[#toc-application]
=============================

```neon
application:
	# mostra painel "Aplicação Nette" em Tracy BlueScreen?
	debugger: ...           # (bool) por omissão

	# será que o apresentador de erro será chamado por erro?
	catchExceptions: ...    # (bool) é o padrão verdadeiro no modo de produção

	# nome do apresentador de erro
	errorPresenter: Error   # (string) padrão para 'Nette:Erro'.

	# define as regras para resolver o nome do apresentador para uma classe
	mapping: ...

	# os links ruins geram avisos?
	# tem efeito somente no modo desenvolvedor
	silentLinks: ...        # (bool) falha em falso
```

Como os apresentadores de erros não são chamados por padrão no modo de desenvolvimento e os erros são exibidos por Tracy, alterar o valor `catchExceptions` para `true` ajuda a verificar se os apresentadores de erros funcionam corretamente durante o desenvolvimento.

A opção `silentLinks` determina como Nette se comporta em modo desenvolvedor quando a geração de links falha (por exemplo, porque não há apresentador, etc.). O valor padrão `false` significa que a Nette aciona `E_USER_WARNING`. A configuração para `true` suprime esta mensagem de erro. Em um ambiente de produção, `E_USER_WARNING` é sempre invocado. Também podemos influenciar este comportamento definindo a variável apresentadora [$invalidLinkMode |creating-links#Invalid Links].

O [mapeamento define as regras |modules#mapping] pelas quais o nome da classe é derivado do nome do apresentador.


Registro automático dos apresentadores .[#toc-automatic-registration-of-presenters]
-----------------------------------------------------------------------------------

A Nette adiciona automaticamente apresentadores como serviços ao contêiner DI, o que acelera significativamente sua criação. Como Nette descobre que os apresentadores podem ser configurados:

```neon
application:
	# para procurar apresentadores no mapa da classe Composer?
	scanComposer: ...      # (bool) por omissão

	# uma máscara que deve corresponder à classe e ao nome do arquivo
	scanFilter: ...        # (string) default to '*Presenter' (string)

	# em quais diretórios procurar apresentadores?
	scanDirs:              # (string[]|false) padrão a '%appDir%'.
		- %vendorDir%/mymodule
```

Os diretórios listados em `scanDirs` não substituem o valor padrão `%appDir%`, mas o complementam, portanto `scanDirs` conterá ambos os caminhos `%appDir%` e `%vendorDir%/mymodule`. Se quisermos sobrescrever o diretório padrão, usamos [ponto de exclamação |dependency-injection:configuration#Merging]:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

A digitalização de diretórios pode ser desativada definindo falso. Não recomendamos a supressão completa da adição automática de apresentadores, caso contrário, o desempenho da aplicação será reduzido.


Latte .[#toc-latte]
===================

Este cenário afeta globalmente o comportamento do Latte em componentes e apresentadores.

```neon
latte:
	# mostra o painel Latte no Tracy Bar para o modelo principal (true) ou para todos os componentes (all)?
	debugger: ...        # (true|false|'all') padrão para true

	# gera modelos com declare(strict_types=1)
	strictTypes: ...     # (bool) falha em falso

	# classe de $this->template
	templateClass: App\MyTemplateClass # defaults to Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Se você estiver usando Latte versão 3, você pode adicionar uma nova [extensão |latte:creating-extension] usando:

```neon
latte:
	extensions:
		- Latte\Essential\TranslatorExtension
```


Roteiro .[#toc-routing]
=======================

Configurações básicas:

```neon
routing:
	# mostra painel de roteamento em Tracy Bar?
	debugger: ...   # (bool) por omissão

	# para seriar o roteador para o contêiner DI?
	cache: ...      # (bool) falha em falso
```

O roteador é normalmente definido na classe [RouterFactory |routing#Route Collection]. Alternativamente, as rotinas também podem ser definidas na configuração usando `mask: action` pares, mas este método não oferece uma variação tão grande nas configurações:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Constantes .[#toc-constants]
============================

Criação de constantes PHP.

```neon
constants:
	Foobar: 'baz'
```

A constante `Foobar` será criada após o início das operações.

.[note]
As constantes não devem servir como variáveis disponíveis globalmente. Para passar valores a objetos, use a [injeção de dependência |dependency-injection:passing-dependencies].


PHP
===

Você pode definir diretrizes PHP. Uma visão geral de todas as diretivas pode ser encontrada em [php.net |https://www.php.net/manual/en/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```
