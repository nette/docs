Βοηθητικές κλάσεις
******************


DomQuery
--------
Η `Tester\DomQuery` είναι μια κλάση που επεκτείνει την `SimpleXMLElement` με εύκολη αναζήτηση σε HTML ή XML χρησιμοποιώντας CSS selectors.

```php
# δημιουργία DomQuery από συμβολοσειρά HTML
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# έλεγχος ύπαρξης στοιχείων με χρήση CSS selectors
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# εύρεση στοιχείων ως πίνακας αντικειμένων DomQuery
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# έλεγχος αν το στοιχείο ταιριάζει με τον selector (από την έκδοση 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# εύρεση του πλησιέστερου προγόνου που ταιριάζει με τον selector (από 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock
--------
Η `Tester\FileMock` εξομοιώνει αρχεία στη μνήμη και διευκολύνει έτσι τον έλεγχο κώδικα που χρησιμοποιεί συναρτήσεις όπως `fopen()`, `file_get_contents()`, `parse_ini_file()` και παρόμοιες. Παράδειγμα χρήσης:

```php
# Ελεγχόμενη κλάση
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Νέο κενό αρχείο
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Ελέγχουμε το δημιουργημένο περιεχόμενο
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Δεν πρόκειται για assertion, αλλά για βοηθό για τον έλεγχο ιδιωτικών μεθόδων και ιδιοτήτων αντικειμένων.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // προσβάσιμη ιδιωτική $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Η μέθοδος `purge()` δημιουργεί τον καθορισμένο κατάλογο, και αν υπάρχει ήδη, διαγράφει ολόκληρο το περιεχόμενό του. Είναι χρήσιμη για τη δημιουργία ενός προσωρινού καταλόγου. Για παράδειγμα στο `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - ο κατάλογος μπορεί ήδη να υπάρχει

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Οι δοκιμές εκτελούνται παράλληλα. Μερικές φορές όμως χρειαζόμαστε η εκτέλεση των δοκιμών να μην επικαλύπτεται. Τυπικά σε δοκιμές βάσεων δεδομένων είναι απαραίτητο η δοκιμή να προετοιμάσει το περιεχόμενο της βάσης δεδομένων και άλλη δοκιμή να μην παρεμβαίνει στη βάση δεδομένων κατά τη διάρκεια της εκτέλεσής της. Σε αυτές τις δοκιμές χρησιμοποιούμε το `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Η πρώτη παράμετρος είναι το όνομα του κλειδώματος, η δεύτερη είναι η διαδρομή προς τον κατάλογο για την αποθήκευση του κλειδώματος. Η δοκιμή που αποκτά το κλείδωμα πρώτη εκτελείται, οι υπόλοιπες δοκιμές πρέπει να περιμένουν την ολοκλήρωσή της.


Environment::bypassFinals() .[filter]
-------------------------------------
Κλάσεις ή μέθοδοι που έχουν σημανθεί ως `final` είναι δύσκολο να ελεγχθούν. Η κλήση `Tester\Environment::bypassFinals()` στην αρχή της δοκιμής προκαλεί την παράλειψη των λέξεων-κλειδιών `final` κατά τη φόρτωση του κώδικα.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- Η NormallyFinalClass δεν είναι πλέον final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- βελτιώνει την αναγνωσιμότητα της εξόδου σφαλμάτων (συμπεριλαμβανομένου του χρωματισμού), διαφορετικά εκτυπώνεται το προεπιλεγμένο PHP stack trace
- ενεργοποιεί τον έλεγχο ότι κλήθηκαν assertions στη δοκιμή, διαφορετικά μια δοκιμή χωρίς assertions (για παράδειγμα ξεχασμένες) περνάει επίσης
- κατά τη χρήση του `--coverage` ξεκινά αυτόματα τη συλλογή πληροφοριών για τον εκτελεσμένο κώδικα (περιγράφεται παρακάτω)
- εκτυπώνει την κατάσταση OK ή FAILURE στο τέλος του script


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Δημιουργεί τις καθολικές συναρτήσεις `test()`, `testException()`, `setUp()` και `tearDown()`, στις οποίες μπορείτε να διαρθρώσετε τις δοκιμές.

```php
test('περιγραφή δοκιμής', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Επιτρέπει να διαπιστωθεί αν η δοκιμή εκτελέστηκε απευθείας ή μέσω του Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# εκτελέστηκε από τον Tester
} else {
	# εκτελέστηκε διαφορετικά
}
```


Environment::VariableThread .[filter]
-------------------------------------
Ο Tester εκτελεί τις δοκιμές παράλληλα στον καθορισμένο αριθμό νημάτων. Αν μας ενδιαφέρει ο αριθμός του νήματος, τον βρίσκουμε από τη μεταβλητή περιβάλλοντος:

```php
echo "Τρέχω στο νήμα νούμερο " . getenv(Tester\Environment::VariableThread);
```
