Генератор на PHP код
********************

<div class=perex>

- Трябва ли да генерирате PHP код за класове, функции, PHP файлове и т.н.?
- Поддържа всички най-нови функции на PHP, като изброявания, атрибути и др.
- Позволява лесно модифициране на съществуващи класове
- PSR-12 съвместим изход
- Високоразвита, стабилна и широко използвана библиотека

</div>


Инсталация .[#toc-installation]
-------------------------------

Изтеглете и инсталирайте пакета с помощта на [Composer |best-practices:composer]:

```shell
composer require nette/php-generator
```

Вижте [таблицата за |#Compatibility-Table] съвместимост с PHP.


Класове .[#toc-classes]
-----------------------

Нека започнем с прост пример за генериране на клас с помощта на [ClassType |api:Nette\PhpGenerator\ClassType]:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addComment("Description of class.\nSecond line\n")
	->addComment('@property-read Nette\Forms\Form $form');

// для генерации PHP-кода просто приведите к строке или используйте echo:
echo $class;
```

Това ще доведе до следния резултат:

```php
/**
 * Description of class.
 * Second line
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
	use Nette\SmartObject;
}
```

Можем също така да използваме класа `Printer`, за да генерираме код, който, за разлика от `echo $class`, можем [допълнително |#Printers-and-PSR-Compliance] да [персонализираме |#Printers-and-PSR-Compliance]:

```php
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Можем да добавяме константи ([Constant) |api:Nette\PhpGenerator\Constant] и свойства ([Property |api:Nette\PhpGenerator\Property]):

```php
$class->addConstant('ID', 123)
	->setProtected() // constant visibility
	->setFinal();

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // или setVisibility('private')
	->setStatic()
	->addComment('@var int[]');

$class->addProperty('list')
	->setType('?array')
	->setInitialized(); // prints '= null'
```

Това ще генерира:

```php
final protected const ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];

public ?array $list = null;
```

Можем да добавяме и [методи |#Method-and-Function-Signature]:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int') // method return type
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []
```

Това води до:

```php
/**
 * Count it.
 */
final protected function count(array &$items = []): ?int
{
	return count($items ?: $this->items);
}
```

Промотираните параметри, въведени в PHP 8.0, могат да се предават на конструктора:

```php
$method = $class->addMethod('__construct');
$method->addPromotedParameter('name');
$method->addPromotedParameter('args', [])
	->setPrivate();
```

Това води до:

```php
public function __construct(
	public $name,
	private $args = [],
) {
}
```

Свойствата само за четене, въведени в PHP 8.1, могат да бъдат маркирани с `setReadOnly()`.

------

Ако добавеното свойство, константа, метод или параметър вече съществуват, те ще бъдат презаписани.

Свойствата, константите, методите и параметрите могат да бъдат изтрити, като се използват съответно методите `removeProperty()`, `removeConstant()`, `removeMethod()` или `removeParameter()`.

Можете също така да добавяте съществуващи обекти към класа `Method`, `Property` или `Constant`:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

Можете да клонирате съществуващи методи, свойства и константи с различно име, като използвате `cloneWithName()`:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```


Интерфейс или черти .[#toc-interface-or-trait]
----------------------------------------------

Можете да създавате интерфейси и черти:

```php
$interface = new Nette\PhpGenerator\InterfaceType('MyInterface');
$trait = new Nette\PhpGenerator\TraitType('MyTrait');
```

Използване на черти:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject');
$class->addTrait('MyTrait')
	->addResolution('sayHello as protected')
	->addComment('@use MyTrait<Foo>');
echo $class;
```

Резултат:

```php
class Demo
{
	use SmartObject;
	use MyTrait {
		sayHello as protected;
	}
}
```


Трансфери .[#toc-enums]
-----------------------

Можете лесно да създавате изброявания, както е въведено в PHP 8.1:

```php
$enum = new Nette\PhpGenerator\EnumType('Suit');
$enum->addCase('Clubs');
$enum->addCase('Diamonds');
$enum->addCase('Hearts');
$enum->addCase('Spades');

echo $enum;
```

Резултат:

```php
enum Suit
{
	case Clubs;
	case Diamonds;
	case Hearts;
	case Spades;
}
```

Можете също така да създавате типизирани преброявания:

```php
$enum->addCase('Clubs', '♣');
$enum->addCase('Diamonds', '♦');
```

Можете да добавяте коментари или [атрибути |#Attributes] към всяка опция, като използвате `addComment()` или `addAttribute()`.


Анонимни класове .[#toc-anonymous-class]
----------------------------------------

Подайте `null` като име и ще получите анонимен клас:

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Резултат:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```


Глобални функции .[#toc-global-function]
----------------------------------------

Класът [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction] отговаря за генерирането на код за нормални функции:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Резултат:

```php
function foo($a, $b)
{
	return $a + $b;
}
```


Къси съединения .[#toc-closure]
-------------------------------

Класът [Closure |api:Nette\PhpGenerator\Closure] ще ви помогне да генерирате код за затваряния:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Резултат:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```


Функции на стрелките .[#toc-arrow-function]
-------------------------------------------

Можете също така да генерирате функции със стрелки:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('$a + $b');
$closure->addParameter('a');
$closure->addParameter('b');

echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Резултат:

```php
fn($a, $b) => $a + $b
```


Подпис на метод и функция .[#toc-method-and-function-signature]
---------------------------------------------------------------

Методите са представени от класа [Method |api:Nette\PhpGenerator\Method]. Можете да задавате видимост, връщана стойност, да добавяте коментари, [атрибути |#Attributes] и т.н:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int');
```

Всеки параметър е представен с клас [Parameter |api:Nette\PhpGenerator\Parameter]. Отново можете да зададете всички възможни свойства:

```php
$method->addParameter('items', []) // $items = []
	->setReference() // &$items = []
	->setType('array'); // array &$items = []

// function count(&$items = [])
```

За дефиниране на т.нар. променливи параметри (както и на операторите splat, spread, ellipsis, unpacking или three dots) използвайте `setVariadics()`:

```php
$method = $class->addMethod('count');
$method->setVariadics(true);
$method->addParameter('items');
```

Генерира:

```php
function count(...$items)
{
}
```


Метод и функционално тяло .[#toc-method-and-function-body]
----------------------------------------------------------

Съдържанието на функция или метод може да се предаде на метода `setBody()` наведнъж или последователно (ред по ред) чрез многократно извикване на `addBody()`:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('$a = rand(10, 20);');
$function->addBody('return $a;');
echo $function;
```

Резултат:

```php
function foo()
{
	$a = rand(10, 20);
	return $a;
}
```

За лесно въвеждане на променливи могат да се използват специални пълнители.

Обикновена заместваща информация `?

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return substr(?, ?);', [$str, $num]);
echo $function;
```

Резултат:

```php
function foo()
{
	return substr('any string', 3);
}
```

Променлив пълнител `...?`

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Резултат:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

Можете също така да използвате именувани параметри на PHP 8, като използвате заместителя `...?:`

```php
$items = ['foo' => 1, 'bar' => true];
$function->setBody('myfunc(...?:);', [$items]);

// myfunc(foo: 1, bar: true);
```

Избягвайте заместващите символи с наклонена черта: `\?`

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Резултат:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```


Принтери и съответствие с PSR .[#toc-printers-and-psr-compliance]
-----------------------------------------------------------------

PHP кодът се генерира от `Printer` обекти . Има `PsrPrinter`, чийто изход съответства на PSR-2 и PSR-12 и използва интервали за отстъпите, и `Printer`, който използва табулатори за отстъпите.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class); // 4 spaces indentation
```

Трябва да персонализирате поведението на принтера? Създайте свой собствен, като наследите класа `Printer`. Можете да промените конфигурацията на тези променливи:

```php
class MyPrinter extends Nette\PhpGenerator\Printer
{
	public int $wrapLength = 120;
	public string $indentation = "\t";
	public int $linesBetweenProperties = 0;
	public int $linesBetweenMethods = 2;
	public int $linesBetweenUseTypes = 0;
	public bool $bracesOnNextLine = true;
	public string $returnTypeColon = ': ';
}
```


Видове .[#toc-types]
--------------------

Всеки тип или тип съюз/съединение може да бъде предаден като низ. Можете също така да използвате предварително дефинирани константи за собствените си типове:

```php
use Nette\PhpGenerator\Type;

$member->setType('array'); // или Type::Array;
$member->setType('array|string'); // или Type::union('array', 'string')
$member->setType('Foo&Bar'); // или Type::intersection(Foo::class, Bar::class)
$member->setType(null); // удаляет тип
```

Същото важи и за метода `setReturnType()`.


Литерали .[#toc-literals]
-------------------------

С помощта на `Literal` можете да предавате произволен PHP код, например стойности на свойства, параметри по подразбиране и т.н:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Резултат:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

Можете също така да предавате параметри на `Literal` и да ги форматирате в правилен PHP код, като използвате [специални вмъквания |#Method-and-Function-Body]:

```php
new Literal('substr(?, ?)', [$a, $b]);
// генерирует, например: substr('hello', 5);
```


Атрибути .[#toc-attributes]
---------------------------

Можете да добавяте атрибути на PHP 8 към всички класове, методи, свойства, константи, изброявания, функции, затваряния и параметри. [Литералите |#Literals] могат да се използват и като стойности на параметрите.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addAttribute('Deprecated');

$class->addProperty('list')
	->addAttribute('WithArguments', [1, 2]);

$method = $class->addMethod('count')
	->addAttribute('Foo\Cached', ['mode' => true]);

$method->addParameter('items')
	->addAttribute('Bar');

echo $class;
```

Резултат:

```php
#[Deprecated]
class Demo
{
	#[WithArguments(1, 2)]
	public $list;


	#[Foo\Cached(mode: true)]
	public function count(#[Bar] $items)
	{
	}
}
```


Пространство от имена .[#toc-namespace]
---------------------------------------

Класовете, функциите, интерфейсите и изброяванията (наричани по-нататък класове) могат да бъдат групирани в пространства от имена ([PhpNamespace) |api:Nette\PhpGenerator\PhpNamespace]:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

// создаем новые классы в пространстве имен
$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// или добавляем существующий класс в пространство имен
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Ако даден клас вече съществува, той ще бъде презаписан.

Можете да добавяте класове, черти и функции, използвани с конструкцията `use`:

```php
// use Http\Request;
$namespace->addUse(Http\Request::class);
// use Http\Request as HttpReq;
$namespace->addUse(Http\Request::class, 'HttpReq');
// use function iter\range;
$namespace->addUseFunction('iter\range');
```

За да опростите пълното име на клас, функция или константа според дефинираните псевдоними, използвайте метода `simplifyName`:

```php
echo $namespace->simplifyName('Foo\Bar'); // 'Bar', потому что 'Foo' является текущим пространством имен
echo $namespace->simplifyName('iter\range', $namespace::NameFunction); // 'range', из-за определенного положения об использовании
```

И обратното, можете да преобразувате опростеното име на клас, функция или константа в пълно име, като използвате метода `resolveName`:

```php
echo $namespace->resolveName('Bar'); // 'Foo\Bar'
echo $namespace->resolveName('range', $namespace::NameFunction); // 'iter\range'
```


Разпознаване на имената на класовете .[#toc-class-names-resolving]
------------------------------------------------------------------

**Когато даден клас е част от пространство от имена, той се показва по малко по-различен начин**: всички типове (т.е. подсказки за тип, типове връщане, име на родителския клас,
използваните имплементирани интерфейси, черти и атрибути) се разрешават автоматично (освен ако не забраните тази функция, вижте по-долу).
Това означава, че трябва да **използвате пълните имена на класовете** в дефинициите и те ще бъдат заменени с
с псевдоними (както е в `use`) или с напълно квалифицирани имена в получения код:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // упростится до A
	->addTrait('Bar\AliasedClass'); // упростится до AliasedClass

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->simplifyName('Foo\D')); // в комментариях упрощаем вручную
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // это разрешится до \Bar\OtherClass

echo $namespace;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Резултат:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

Автоматичният дисплей може да бъде деактивиран по следния начин:

```php
$printer = new Nette\PhpGenerator\Printer; // или PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```


Файлове на PHP .[#toc-php-files]
--------------------------------

Класовете, функциите и пространствата от имена могат да бъдат групирани във файлове на PHP, представени чрез класа [PhpFile |api:Nette\PhpGenerator\PhpFile]:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('This file is auto-generated.');
$file->setStrictTypes(); // добавляет declare(strict_types=1)

$class = $file->addClass('Foo\A');
$function = $file->addFunction('Foo\foo');

// или
// $namespace = $file->addNamespace('Foo');
// $class = $namespace->addClass('A');
// $function = $namespace->addFunction('foo');

echo $file;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Резултат:

```php
<?php

/**
 * This file is auto-generated.
 */

declare(strict_types=1);

namespace Foo;

class A
{
}

function foo()
{
}
```


Генериране с помощта на отразяване .[#toc-generating-according-to-existing-ones]
--------------------------------------------------------------------------------

Друг често срещан случай на употреба е създаването на клас или функция въз основа на съществуващи такива:

```php
// создает класс, идентичный классу PDO
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

// создает функцию, идентичную trim()
$function = Nette\PhpGenerator\GlobalFunction::from('trim');

// создает закрытие, как указано
$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {},
);
```

По подразбиране телата на функциите и методите са празни. Ако искате да заредите и тях, използвайте следния метод
(трябва да зададете `nikic/php-parser`):

```php
$class = Nette\PhpGenerator\ClassType::from(Foo::class, withBodies: true);

$function = Nette\PhpGenerator\GlobalFunction::from('foo', withBody: true);
```


Изтегляне на клас от файл .[#toc-loading-from-php-file]
-------------------------------------------------------

Можете също така да зареждате класове директно от PHP файл, който все още не е зареден, или от ред от PHP кода:

```php
$class = Nette\PhpGenerator\ClassType::fromCode(<<<XX
	<?php

	class Demo
	{
		public $foo;
	}
	XX);
```

Зареждане на цял PHP файл, който може да съдържа множество класове или дори множество пространства от имена:

```php
$file = Nette\PhpGenerator\PhpFile::fromCode(file_get_contents('classes.php'));
```

За да направите това, инсталирайте `nikic/php-parser`.


Изхвърляне на променливи .[#toc-variables-dumper]
-------------------------------------------------

Класът `Dumper` връща анализираното символно представяне на променлива в PHP формат. Осигурява по-добър и по-ясен изход от родната функция `var_export()`.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // prints ['a', 'b', 123]
```


Таблица за съвместимост .[#toc-compatibility-table]
---------------------------------------------------

PhpGenerator 4.0 е съвместим с PHP 8.0 - 8.2

{{leftbar: nette:@menu-topics}}
