URL Bağlantıları Oluşturma
**************************
<div class=perex>


Nette'de bağlantı oluşturmak parmakla işaret etmek kadar kolaydır. Sadece işaret edin ve çerçeve sizin için tüm işi yapacaktır. Biz göstereceğiz:

- şablonlarda ve başka yerlerde nasıl bağlantı oluşturulur
- mevcut sayfaya bir bağlantı nasıl ayırt edilir
- geçersiz bağlantılar ne olacak

</div>


[Çift yönlü yönlendirme |routing] sayesinde, daha sonra değişebilecek veya oluşturulması karmaşık olabilecek uygulama URL'lerini şablonlarda veya kodda sabit kodlamak zorunda kalmazsınız. Sadece bağlantıdaki sunucuyu ve eylemi belirtin, herhangi bir parametre geçirin ve çerçeve URL'yi kendisi oluşturacaktır. Aslında, bir fonksiyon çağırmaya çok benzer. Bunu seveceksiniz.


Sunucu Şablonunda .[#toc-in-the-presenter-template]
===================================================

Çoğu zaman şablonlarda bağlantılar oluştururuz ve `n:href` niteliği harika bir yardımcıdır:

```latte
<a n:href="Product:show">detail</a>
```

`href` HTML özniteliği yerine `n:href`[n: |latte:syntax#n:attributes] özniteliğini kullandığımıza dikkat edin. Değeri, `href` özniteliğinde alıştığınız gibi bir URL değil, sunum yapan kişinin ve eylemin adıdır.

Bir bağlantıya tıklamak, basitçe söylemek gerekirse, bir metodu çağırmak gibidir `ProductPresenter::renderShow()`. Ve eğer imzasında parametreler varsa, onu argümanlarla çağırabiliriz:

```latte
<a n:href="Product:show $product->id, $product->slug">detail</a>
```

Adlandırılmış parametreleri geçmek de mümkündür. Aşağıdaki bağlantı `lang` parametresini `en` değeriyle geçirir:

```latte
<a n:href="Product:show $product->id, lang: en">detail</a>
```

`ProductPresenter::renderShow()` yönteminin imzasında `$lang` yoksa, parametrenin değerini `$lang = $this->getParameter('lang')` kullanarak okuyabilir.

Parametreler bir dizide saklanıyorsa, `...` operatörü (veya Latte 2.x'te `(expand)` operatörü) ile genişletilebilirler:

```latte
{var $args = [$product->id, lang => en]}
<a n:href="Product:show ...$args">detail</a>
```

[Kalıcı parametreler |presenters#persistent parameters] olarak adlandırılan [parametreler |presenters#persistent parameters] de bağlantılarda otomatik olarak aktarılır.

Öznitelik `n:href` HTML etiketleri için çok kullanışlıdır `<a>`. Bağlantıyı başka bir yere, örneğin metnin içine yazdırmak istiyorsak `{link}` adresini kullanırız:

```latte
URL is: {link Homepage:default}
```


Kod'da .[#toc-in-the-code]
==========================

Sunucuda bir bağlantı oluşturmak için `link()` yöntemi kullanılır:

```php
$url = $this->link('Product:show', $product->id);
```

Parametreler, adlandırılmış parametrelerin de belirtilebildiği bir dizi olarak da aktarılabilir:

```php
$url = $this->link('Product:show', [$product->id, 'lang' => 'cs']);
```

[Linkler, LinkGenerator |#LinkGenerator] ve onun `link()` yöntemi kullanılarak bir sunucu olmadan da oluşturulabilir.


Sunucu Bağlantıları .[#toc-links-to-presenter]
==============================================

Bağlantının hedefi sunum yapan ve eylem ise, bu sözdizimine sahiptir:

```
[//] [[[[:]module:]presenter:]action | this] [#fragment]
```

Bu format tüm Latte etiketleri ve bağlantılarla çalışan tüm sunum yöntemleri tarafından desteklenmektedir, yani `n:href`, `{link}`, `{plink}`, `link()`, `lazyLink()`, `isLinkCurrent()`, `redirect()`, `redirectPermanent()`, `forward()`, `canonicalize()` ve ayrıca [LinkGenerator |#LinkGenerator]. Yani örneklerde `n:href` kullanılmış olsa bile, fonksiyonlardan herhangi biri olabilir.

Bu nedenle temel form `Presenter:action` şeklindedir:

```latte
<a n:href="Homepage:default">homepage</a>
```

Geçerli sunucunun eylemine bağlantı verirsek, adını atlayabiliriz:

```latte
<a n:href="default">homepage</a>
```

Eylem `default` ise, bunu atlayabiliriz, ancak iki nokta üst üste kalmalıdır:

```latte
<a n:href="Homepage:">homepage</a>
```

Bağlantılar diğer [modüllere |modules] de işaret edebilir. Burada, bağlantılar alt modüllere göreli veya mutlak olarak ayırt edilir. Prensip disk yollarına benzer, sadece eğik çizgiler yerine iki nokta üst üste vardır. Gerçek sunucunun `Front` modülünün bir parçası olduğunu varsayalım, o zaman yazacağız:

```latte
<a n:href="Shop:Product:show">link to Front:Shop:Product:show</a>
<a n:href=":Admin:Product:show">link to Admin:Product:show</a>
```

Özel bir durum, [kendine bağlantı |#Links to Current Page] vermektir. Burada hedef olarak `this` yazacağız.

```latte
<a n:href="this">refresh</a>
```

HTML sayfasının belirli bir bölümüne `#` hash sembolünden sonra gelen fragment adı verilen bir parça aracılığıyla bağlantı verebiliriz:

```latte
<a n:href="Homepage:#main">link to Homepage:default and fragment #main</a>
```


Mutlak Yollar .[#toc-absolute-paths]
====================================

`link()` veya `n:href` tarafından oluşturulan bağlantılar her zaman mutlak yollardır (yani `/` ile başlarlar), ancak `https://domain` gibi bir protokol ve etki alanı içeren mutlak URL'ler değildir.

Mutlak bir URL oluşturmak için başına iki eğik çizgi ekleyin (örneğin, `n:href="//Homepage:"`). Ya da `$this->absoluteUrls = true` adresini ayarlayarak sunucuyu yalnızca mutlak bağlantılar oluşturacak şekilde değiştirebilirsiniz.


Güncel Sayfaya Bağlantı .[#toc-link-to-current-page]
====================================================

Hedef `this` geçerli sayfaya bir bağlantı oluşturacaktır:

```latte
<a n:href="this">refresh</a>
```

Aynı zamanda, imzasında belirtilen tüm parametreler `render<View>()` veya `action<Action>()` yöntemi aktarılır. Yani `Product:show` ve `id:123` sayfalarındaysak, `this` bağlantısı da bu parametreyi geçirecektir.

Elbette parametreleri doğrudan belirtmek de mümkündür:

```latte
<a n:href="this refresh: 1">refresh</a>
```

İşlev `isLinkCurrent()` bağlantının hedefinin geçerli sayfayla aynı olup olmadığını belirler. Bu, örneğin bir şablonda bağlantıları vb. ayırt etmek için kullanılabilir.

Parametreler `link()` yöntemiyle aynıdır, ancak belirli bir eylem yerine `*` joker karakterini kullanmak da mümkündür, bu da sunum yapan kişinin herhangi bir eylemi anlamına gelir.

```latte
{if !isLinkCurrent('Admin:login')}
	<a n:href="Admin:login">Přihlaste se</a>
{/if}

<li n:class="isLinkCurrent('Product:*') ? active">
	<a n:href="Product:">...</a>
</li>
```

Kısaltılmış bir form, tek bir öğede `n:href` ile birlikte kullanılabilir:

```latte
<a n:class="isLinkCurrent() ? active" n:href="Product:detail">...</a>
```

Joker karakter `*` yalnızca sunum yapan kişinin eylemini değiştirir, sunum yapan kişinin kendisini değiştirmez.

Belirli bir modülde mi yoksa onun alt modülünde mi olduğumuzu öğrenmek için `isModuleCurrent(moduleName)` fonksiyonunu kullanabiliriz.

```latte
<li n:class="isModuleCurrent('MyEshop:Users') ? active">
	<a n:href="Product:">...</a>
</li>
```


Sinyal Bağlantıları .[#toc-links-to-signal]
===========================================

Bağlantının hedefi yalnızca sunum yapan kişi ve eylem değil, aynı zamanda [sinyal |components#Signal] de olabilir (metodu çağırırlar `handle<Signal>()`). Sözdizimi aşağıdaki gibidir:

```
[//] [sub-component:]signal! [#fragment]
```

Bu nedenle sinyal ünlem işareti ile ayırt edilir:

```latte
<a n:href="click!">signal</a>
```

Ayrıca alt bileşenin (veya alt alt bileşenin) sinyaline bir bağlantı da oluşturabilirsiniz:

```latte
<a n:href="componentName:click!">signal</a>
```


Bileşendeki Bağlantılar .[#toc-links-in-component]
==================================================

[Bileşenler |components], çevrelerindeki sunucularla hiçbir ilişkisi olmaması gereken ayrı yeniden kullanılabilir birimler olduğundan, bağlantılar biraz farklı çalışır. Latte niteliği `n:href` ve etiketi `{link}` ve `link()` ve diğerleri gibi bileşen yöntemleri her zaman hedefi **sinyal adı** olarak kabul eder. Bu nedenle ünlem işareti kullanmak gerekli değildir:

```latte
<a n:href="click">signal, not an action</a>
```

Bileşen şablonunda sunum yapanlara bağlantı vermek istiyorsak `{plink}` etiketini kullanırız:

```latte
<a href="{plink Homepage:default}">homepage</a>
```

veya kodda

```php
$this->getPresenter()->link('Homepage:default')
```


Geçersiz Bağlantılar .[#toc-invalid-links]
==========================================

Geçersiz bir bağlantı oluşturabiliriz - ya mevcut olmayan bir sunucuya atıfta bulunduğu için ya da hedef yöntemin imzasında aldığından daha fazla parametre geçtiği için ya da hedeflenen eylem için oluşturulmuş bir URL olamadığında. Geçersiz bağlantılarla ne yapılacağı `Presenter::$invalidLinkMode` statik değişkeni tarafından belirlenir. Bu değerlerden (sabitler) birine sahip olabilir:

- `Presenter::InvalidLinkSilent` - sessiz mod, URL olarak `#` sembolünü döndürür
- `Presenter::InvalidLinkWarning` - E_USER_WARNING üretilecektir
- `Presenter::InvalidLinkTextual` - görsel uyarı, hata metni bağlantıda görüntülenir
- `Presenter::InvalidLinkException` - InvalidLinkException fırlatılacaktır

Üretim modunda varsayılan kurulum `InvalidLinkWarning` ve geliştirme modunda `InvalidLinkWarning | InvalidLinkTextual` şeklindedir. `InvalidLinkWarning` üretim ortamında betiği öldürmez, ancak uyarı günlüğe kaydedilir. Geliştirme ortamında, [Tracy |tracy:] uyarıyı kesecek ve hata mavi ekranını görüntüleyecektir. Eğer `InvalidLinkTextual` ayarlanmışsa, sunucu ve bileşenler hata mesajını `#error:` ile başlayan URL olarak döndürür. Bu tür bağlantıları görünür kılmak için stil sayfamıza bir CSS kuralı ekleyebiliriz:

```css
a[href^="#error:"] {
	background: red;
	color: white;
}
```

Geliştirme ortamında uyarıların üretilmesini istemiyorsak, [yapılandırmada |configuration] sessiz geçersiz bağlantı modunu açabiliriz.

```neon
application:
	silentLinks: true
```


LinkGenerator .[#toc-linkgenerator]
===================================

`link()` comfort yöntemiyle, ancak bir sunum yapan kişi olmadan nasıl bağlantı oluşturulur? İşte bu yüzden [api:Nette\Application\LinkGenerator].

LinkGenerator, kurucudan geçirebileceğiniz ve ardından `link()` yöntemini kullanarak bağlantılar oluşturabileceğiniz bir hizmettir.

Sunuculara kıyasla bir fark vardır. LinkGenerator tüm bağlantıları mutlak URL'ler olarak oluşturur. Ayrıca, "geçerli sunucu" yoktur, bu nedenle yalnızca `link('default')` eyleminin adını veya [modüllere |modules] göreli yolları belirtmek mümkün değildir.

Geçersiz bağlantılar her zaman `Nette\Application\UI\InvalidLinkException` adresini atar.
