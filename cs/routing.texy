Routování
*********

<div class=perex>

Routování je obousměrné překládání mezi URL a akcí presenteru. Obousměrným myslíme možnost z URL odvodit akci presenteru, ale také obráceně, k akci vygenerovat odpovídající URL. Ukážeme si:

- jak zapisovat routy a vytvářet odkazy
- povíme si o SEO přesměrování
- jak routy debugovat
- jak napsat vlastní router

</div>



Co je routování?
================

Routování je obousměrné překládání mezi URL a **polem parametrů**.

- `Nette\Http\IRequest` (obsahuje URL) -> pole
- pole -> absolutní URL

Díky obousměrnému routování už nemusíme do šablon natvrdo zapisovat URL, odkazujeme se pouze na [akce presenterů |presenters#zpracovani-akce-presenteru] a framework nám už URL vygeneruje sám:

```html
{* vytvoří odkaz na presenter presenter 'Product' a jeho akci 'detail' *}
<a n:href="Product:detail $productId">detail produktu</a>
```

Více se dozvíte na stránce o [vytváření odkazů |link-generation].

Routování představuje **samostatnou vrstvu aplikace**. Tvar URL můžeme vymýšlet klidně až ve chvíli, když je celá aplikace hotová. Stejně tak je velmi snadné je kdykoliv změnit. A přitom nejen zachovat původní adresy v platnosti, ale automaticky je nechat přesměrovávat na URL nová. Ruku na srdce, kdo z vás to má? :-)


SimpleRouter
============

Požadovaný tvar URL adres určuje *router*. Nejjednodušším případem routeru je [SimpleRouter |api:Nette\Application\Routers\SimpleRouter]. Použijeme jej tehdy, pokud nemáme zvláštní nároky na tvar URL, pokud není k dispozici `mod_rewrite` (nebo jeho alternativy) nebo pokud zatím nechceme řešit *hezké* URL.

Generované adresy budou zhruba v tomto tvaru:

```
http://example.com/?presenter=Product&action=detail&id=123
```

Prvním parametrem konstruktoru SimpleRouteru je výchozí akce presenteru, tj. akce, která se má provést, pokud otevřeme stránku např. `http://example.com/` bez dalších parametrů.

```php
// výchozím presenterem bude 'Homepage' a akcí 'default'
$router = new Nette\Application\Routers\SimpleRouter('Homepage:default');
```

Doporučovaným způsobem konfigurace rout v aplikaci je zaregistrování SimpleRouteru v [konfiguračním souboru |configuring#sluzby]:

```neon
services:
	application.router: Nette\Application\Routers\SimpleRouter('Homepage:default')
```


Route: za hezčí URL .{toc: Route}
=================================

Lidštější URL (nebo taky cool, pretty či user-friendly URL) bývají použitelnější a zapamatovatelnější a pozitivně přispívají k SEO((optimalizaci nalezitelnosti na internetu)). Nette Framework na současné trendy myslí a vychází v tomto vývojářům plně vstříc.

Všechny požadavky musí být zpracovávány souborem `index.php`. Toho můžeme dosáhnout napříkad konfigurací mod_rewrite při použití Apache nebo direktivou `try_files` pokud používáme Nginx (viz [jak nastavit server pro hezká URL |troubleshooting#jak-nastavit-server-pro-hezka-url]) .

Třídu [Route |api:Nette\Application\Routers\Route] je možné použít k vytváření adres takřka libovolného tvaru. Začněme příkladem, který bude generovat pro akci `Product:detail` s `id = 123` URL v tomto tvaru:

```
http://example.com/product/detail/123
```

Vytvoříme objekt `Route` (tzv. routu), jehož prvním parametrem je maska cesty a druhým výchozí akce presenteru zapsaná jako řetězec nebo pole. Třetím parametrem mohou být dodatečné příznaky.

```php
// výchozí akcí bude presenter Homepage a akce default
$route = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');

// alternativně zapsáno polem
$route = new Route('<presenter>/<action>[/<id>]', [
	'presenter' => 'Homepage',
	'action'    => 'default'
]);
```

Uvedená routa je použitelná pro libovolné presentery a akce. Akceptuje cestu např. ve tvaru `/article/edit/10` nebo také `/catalog/list`, protože část s parameterem `id` je uzavřena do hranatých závorek, čímž říkáme, že je nepovinná.

Protože i ostatní parametry (presenter, action) mají výchozí hodnotu (tj. `Homepage` a `default`), jsou volitelné. Pokud jejich hodnota bude shodná s výchozí, v URL se vynechají. Takže odkaz na `Product:default` vygeneruje cestu `http://example.com/product`, odkaz na výchozí `Homepage:default` cestu `http://example.com/`.

Maska cesty
-----------

Nejjednodušší maskou je **statická URL** s uvedenou cílovou akcí presenteru.

```php
$route = new Route('products', 'Products:default');
```

Většina reálných masek však obsahuje proměnlivé **parametry**. Ty jsou uvedeny ve špičatých závorkách (např. `<year>`) a jsou předány do cílového presenteru.

```php
$route = new Route('history/<year>', 'History:view');
```

Masky mohou také obsahovat tradiční GET parametry (parametry za otazníkem v URL). Pro tyto však nelze použít validační (např. regulární výraz) a další složitější struktury, nicméně můžeme určit, který parametr bude použit pod jakým názvem v aplikaci:

```php
// říkáme, že GET parameter "cat" chceme v aplikaci použít pod názvem "categoryId"
$route = new Route('<presenter>/<action> ? id=<productId> & cat=<categoryId>', ...);
```

Parametry, které se v URL nachází před otazníkem, nazýváme parametry cesty, parametry za otazníkem jako parametry dotazu.

Maska může popisovat nejen relativní cestu od kořenového adresáře webu, ale také absolutní cestu (pokud začíná lomítkem) nebo dokonce celé absolutní URL (začíná-li dvěma lomítky):

```php
// relativně k document rootu (složka www)
$route = new Route('<presenter>/<action>', ...);

// absolutní cesta (relativní k doméně)
$route = new Route('/<presenter>/<action>', ...);

// absolutní URL včetně domény (relativní k schématu)
$route = new Route('//<subdomain>.example.com/<presenter>/<action>', ...);

// absolutní URL včetně schématu
$route = new Route('https://<subdomain>.example.com/<presenter>/<action>', ...);
```

Zástupné znaky
--------------

V masce absolutní cesty můžeme použít následující proměnné:
- `%tld%` = top level domain, např. `com` nebo `org`
- `%sld%` = second level domain, např. u `example.com` vrací `example`
- `%domain%` = doména bez subdomény, např. `example.com`
- `%host%` = celý host, např. `www.example.com`
- `%basePath%` = absolutní URL cesta ke kořenovému adresáři

```php
$route = new Route('//www.%domain%/%basePath%/<presenter>/<action>', ...);
$route = new Route('//www.%sld%.%tld%/%basePath%/<presenter>/<action', ...);
```


Výchozí hodnoty
---------------

Jednotlivým parametrům můžeme určit výchozí hodnotu přímo v masce:

```php
$route = new Route('<presenter=Homepage>/<action=default>/<id=>');
```

Nebo pomocí pole:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => null,
]);

// je ekvivalentní s touto delší notací
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => [
		Route::VALUE => 'Homepage',
	],
	'action' => [
		Route::VALUE => 'default',
	],
	'id' => [
		Route::VALUE => null,
	],
]);
```

Výchozí hodnoty pro `<presenter>` a `<action>` mohou být také zapsány jako řetězec v druhém parametru konstruktoru:

```php
$route = new Route('<presenter>/<action>/<id=>', 'Homepage:default');
```


Validační výrazy
----------------

Dále lze určit validační podmínku pomocí regulárního výrazu. Například parametru `id` určíme, že může nabývat pouze číslic pomocí validační podmínky `[0-9]+`:

```php
// regexp lze definovat přímo v masce cesty po názvu parametru
$route = new Route('<presenter>/<action>[/<id \d+>]', 'Homepage:default');

// je ekvivalentní s touto delší notací
$route = new Route('<presenter>/<action>[/<id>]', [
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => [
		Route::PATTERN => '\d+',
	],
]);
```

.[note]
Výchozí validační podmínkou je `[^/]+`, tj. vše kromě lomítka. Pokud má parametr přijímat i lomítka, uvedeme podmínku `.+`.

Volitelné sekvence
------------------

V masce lze označovat volitelné části pomocí hranatých závorek. Volitelná může být libovolná část masky, mohou se v ní nacházet i parametry:

```php
$route = new Route('[<lang [a-z]{2}>/]<name>', 'Article:view');

// Akceptuje cesty:
//    /cs/download  => lang => cs, name => download
//    /download     => lang => null, name => download
```

Když je parametr součásti volitelné sekvence, stává se pochopitelně také volitelným s výchozí hodnotou null. Sekvence zároveň definuje jeho okolí, v tomto případě znak lomítka, které musí za parametrem, je-li uveden, následovat. Této techniky lze využít například u volitelných subdomén s jazykem:

```php
$route = new Route('//[<lang=en>.]example.com/<presenter>/<action>', ...);
```

Sekvence je možné libovolně zanořovat a kombinovat:

```php
$route = new Route(
	'[<lang [a-z]{2}>[-<sublang>]/]<name>[/page-<page=0>]',
	'Homepage:default'
);

// Akceptuje cesty:
// 	/cs/hello
// 	/en-us/hello
// 	/hello
// 	/hello/page-12
```


Při generování URL se usiluje o nejkratší URL, takže všechno, co lze vynechat, se vynechá. Proto třeba routa `index[.html]` generuje cestu `/index`. Obrátit chování je možné uvedením vykřičníku za levou hranatou závorkou:

```php
// akceptuje /hello i /hello.html, generuje /hello
$route = new Route('<name>[.html]');

// akceptuje /hello i /hello.html, generuje /hello.html
$route = new Route('<name>[!.html]');
```


Volitelné parametry (tj. parametry mající výchozí hodnotu) bez hranatých závorek se chovají v podstatě tak, jako by byly uzávorkovány následujícím způsobem:

```php
$route = new Route('<presenter=Homepage>/<action=default>/<id=>');

// odpovídá tomuto:
$route = new Route('[<presenter=Homepage>/[<action=default>/[<id>]]]');
```

Pokud bychom chtěli ovlivnit chování koncového lomítka, aby se např. místo `/homepage/` generovalo jen `/homepage`, lze toho docílit takto:

```php
$route = new Route('[<presenter=Homepage>[/<action=default>[/<id>]]]');
```


Foo parametry
-------------

Foo parametry jsou podobné volitelným sekvencím, slouží však k tomu, aby bylo možné do masky přidat regulární výraz. Příkladem je routa akceptující `/index`, `/index.html`, `/index.htm` a `/index.php`:

```php
$route = new Route('index<? \.html?|\.php|>', 'Homepage:default');
```

Lze také explicitně definovat řetězec, který bude při generování cesty použit (obdoba výchozí hodnoty u skutečných parametrů). Řetězec musí být umístěn přímo za otazníkem. Následující routa je podobná předchozí, ale generuje `/index.html` namísto `/index`, protože řetězec `.html` je nastaven jako výchozí hodnota:

```php
$route = new Route('index<?.html \.html?|\.php|>', 'Homepage:default');
```


Transformace a překlady
-----------------------

Je záhodno psát zdrojové kódy v angličtině, ale co když má web běžet v českém prostředí? Pak jednoduché routování typu:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => null,
]);
```

bude generovat anglické URL, jako třeba `/product/123`, `/cart` nebo `/catalog/view` apod. Pokud chceme mít presentery a akce v URL reprezentované českými slovy (např. `/produkt/123` nebo `/kosik`), můžeme využít překladového slovníku. Definice v poli rozšíříme:

```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => [
		Route::VALUE => 'Homepage',
		Route::FILTER_TABLE => [
			// řetězec v URL => presenter
			'produkt' => 'Product',
			'kosik' => 'Cart',
			'katalog' => 'Catalog',
		],
	],
	'action' => [
		Route::VALUE => 'default',
		Route::FILTER_TABLE => [
			'sehen' => 'view',
		],
	],
	'id' => null,
]);
```


.[tip]
Jeden presenter může být uveden pod více různými klíči. Pak k němu povedou všechny varianty (tedy vytvoří se aliasy) s tím, že za kanonickou se považuje ta poslední.

Překladovou tabulku lze tímto způsobem aplikovat na jakýkoliv parametr. Přičemž nefunguje jako filtr, tj. pokud překlad existuje, přeloží se, a pokud neexistuje, bere se původní hodnota.

Pokud chceme u parametru použít pouze překladový slovník, přídáme `FILTER_STRICT => true`. Tím docílíme toho, že se budou akceptovat pouze hodnoty ve slovníku.

Kromě překladového slovníku v podobě pole lze nasadit i vlastní překladové funkce a filtry.


```php
$route = new Route('<presenter>/<action>/<id>', [
	'presenter' => [
		Route::VALUE => 'Homepage',
		Route::FILTER_IN => 'filterInFunc',
		Route::FILTER_OUT => 'filterOutFunc',
	],
	'action' => 'default',
	'id' => null,
]);
```

Kde `filterInFunc` a `filterOutFunc` jsou funkce či metody, jenž převádí mezi parametrem v URL a tvarem, který se předává do presenteru. Každá z nich zajišťuje převod opačným směrem.

Implicitním in-filterem je funkce [rawurldecode |php:rawurldecode] a out-filterem je funkce, která escapuje speciální znaky (například lomítko či mezeru) pro použití v URL.

Jsou situace, kdy toto chování budeme chtít změnit, například pokud použijeme parametr `path`, který může obsahovat i lomítka. Aby se nekonvertovala na sekvence `%2F`, zrušíme filtry:

```php
// akceptuje http://files.example.com/path/to/my/file

$route = new Route('//files.example.com/<path .+>', [
	'presenter' => 'File',
	'action' => 'default',
	'path' => [
		Route::VALUE => null,
		Route::FILTER_IN => null,
		Route::FILTER_OUT => null,
	],
]);
```

Globální filtry
---------------
Vedle filtrů určených pro konkrétní parametry (`<presenter>`, `<action>`, ...) můžeme definovat též **globální filtry**, které akceptují asociativní pole se všemi parametry a vrací pole vyfiltrovaných parametrů. Globální filtry definujeme pod klíčem `null`.

```php
$route = new Route('<presenter>/<action>', [
	'presenter' => 'Homepage',
	'action' => 'default',
	null => [
		Route::FILTER_IN => function (array $params): array {
			// ...
			return $params;
		},
		Route::FILTER_OUT => function (array $params): array {
			// ...
			return $params;
		},
	],
]);
```

.[tip]
Globální filtry můžeme použít též pro filtrování parametrů na základě jiných parametrů. Například přeložení `<presenter>` a `<action>` na základě parametru `<lang>`.


Moduly
------

Presentery v Nette se mohou dělit do modulů. A proto potřebujeme i v routách pracovat s moduly. Pro to můžeme využít parametr `module` u třídy `Route`:

```php
// URL manage/dashboard/default se mapuje na presenter Admin:Dashboard
new Route('manage/<presenter>/<action>', [
	'module' => 'Admin'
]);
```



Kolekce rout
============

Protože rout budeme zpravidla definovat více než jednu, spojíme je do [RouteList |api:Nette\Application\Routers\RouteList]. Routy nemusíme nijak pojmenovávat.

```php
use Nette\Application\Routers\Route;

$router = new Nette\Application\Routers\RouteList;
$router->add(new Route('rss.xml', 'Feed:rss'));
$router->add(new Route('<presenter>/<action>', 'Homepage:default'));
```

Kód můžeme zjednodušit díky metodě `addRoute()`, která přidává do kolekce objekty `Nette\Application\Routers\Route`.

```php
$router = new Nette\Application\Routers\RouteList;
$router->addRoute('rss.xml', 'Feed:rss');
$router->addRoute('<presenter>/<action>', 'Homepage:default');
```

.[caution]
Je důležité, v jakém pořadí jsou routy definovány, protože se zkouší postupně odshora dolů. Platí pravidlo, že **routy deklarujeme od specifických po obecné**.

Pamatujte na to, že počet rout má vliv na rychlost aplikace, zejména při generování odkazů. Proto se vyplatí routovací tabulku zjednodušit.


Jednosměrky ONE_WAY
-------------------

Jednosměrné routy se používají zejména pro zachování funkčnosti starých URL, když tvar URL v aplikaci předěláme do novější podoby. Příznakem `ONE_WAY` tedy označíme routy, které se už nepoužívají pro generování URL.

```php
// staré URL /product-info?id=123
$router->addRoute('product-info', 'Product:detail', $router::ONE_WAY);
// nové URL /product/123
$router->addRoute('product/<id>', 'Product:detail');
```

Navíc dojde k automatickému přesměrování na nový tvar URL, takže vám tyto stránky vyhledávače nezaindexují dvakrát (viz [#SEO a kanonizace]).


Moduly
------

Pokud máme více rout, které chceme zařadit do modulu, můžeme využít `withModule()`:

```php
$router = new RouteList;
$router->withModule('Forum') // následující routy jsou součástí modulu Forum
	->addRoute('rss', 'Feed:rss') // presenter bude Forum:Feed
	->addRoute('<presenter>/<action>')

	->withModule('Admin') // následující routy jsou součástí modulu Forum:Admin
		->addRoute('sign:in', 'Sign:in');
```

Subdomény
---------

Kolekce rout můžeme členit podle subdomén:

```php
$router = new RouteList;
$router->withDomain('example.com')
	->addRoute('rss', 'Feed:rss')
	->addRoute('<presenter>/<action>');
```

V názvu domény lze použít i [#zástupné znaky]:

```php
$router = new RouteList;
$router->withDomain('example.%tld%')
	...
```

Prefix cesty
------------

Kolekce rout můžeme členit podle cesty v URL:

```php
$router = new RouteList;
$router->withPath('/eshop')
	->addRoute('rss', 'Feed:rss') // chytá URL /eshop/rss
	->addRoute('<presenter>/<action>'); // chytá URL /eshop/<presenter>/<action>
```

Kombinace
---------

Výše uvedené členění můžeme vzájemně kombinovat:

```php
$router = (new RouteList)
	->withDomain('admin.example.com')
		->withModule('Admin')
			->addRoute(...)
			->addRoute(...)
		->end()
		->withModule('Images')
			->addRoute(...)
		->end()
	->end()
	->withDomain('example.com')
		->withPath('export')
			->addRoute(...)
			...
```


Router Factory
==============

Doporučenou cestou pro konfiguraci rout aplikace je si napsat továrnu (například třídu `RouterFactory`) a zaregistrovat ji do [systémového DI containeru |configuring#sluzby] v konfiguračním souboru:

```php
namespace App\Router;

use Nette;
use Nette\Application\Routers\RouteList;

class RouterFactory
{
	use Nette\StaticClass;

	public static function createRouter(): RouteList
	{
		$router = new RouteList;
		$router->addRoute('article/<id>', 'Article:view');
		$router->addRoute('rss.xml', 'Feed:rss');
		$router->addRoute('<presenter>/<action>', 'Homepage:default');
		return $router;
	}
}
```

Konfigurační soubor:

```neon
services:
	router: App\Router\RouterFactory::createRouter
```

V případě nenalezení routy se vyhodí výjimka [BadRequestException |api:Nette\Application\BadRequestException], která se uživateli zobrazí jako stránka 404 Not Found.

Jakékoliv závislosti, třeba na databázi, nebo příznak, lze předat do továrny routeru jako parametry:

```php
class RouterFactory
{
	public static function createRouter(Nette\Database\Connection $db, bool $debugMode = false): RouteList
	{
		$router = new RouteList;
		$router->add(...);
		return $router;
	}
}
```


SEO a kanonizace
================

Framework přispívá k SEO (optimalizaci nalezitelnosti na internetu) tím, že zabraňuje existenci duplicitních URL vedoucích na stejný obsah. Pokud k určitému cíli vede více adres, např. `/index` a `/index.html`, framework první z nich určí za výchozí (kanonickou) a ostatní na ni přesměruje pomocí HTTP kódu 301. Díky tomu vám vyhledávače stránky nezaindexují dvakrát a nerozmělní jejich page rank.

Tomuto procesu se říká kanonizace. Výchozí (kanonickou) URL je ta, kterou vygeneruje router, tj. první routa v kolekci bez příznaku ONE_WAY.

Kanonizaci provádí [Presenter |api:Nette\Application\UI\Presenter] a ve výchozím nastavení je zapnutá. Lze ji vypnout přes `$presenter->autoCanonicalize = false`.

.[note]
K přesměrování nedojde při AJAXovém nebo POST požadavku, protože by došlo ke ztrátě dat nebo by to nemělo přidanou hodnotu z hlediska SEO.


HTTPS
=====

Abychom mohli používat HTTPS protokol, je nutné si správně nakonfigurovat server.

Přesměrování všech adres u již zaběhnuté aplikace lze docílit pomocí souboru .htaccess v kořenovém adresáři naší aplikace za použití permanentního přesměrování s kódem 301. (Nastavení se může lišit podle hostingu.)

```php
<IfModule mod_rewrite.c>
	RewriteEngine On
	...
	RewriteCond %{HTTPS} off
	RewriteRule .* https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
	...
</IfModule>
```

Routy generují URL se stejným protokolem, s jakým byla stránka načtena, takže nic víc není obvykle pořeba nastavovat.

Pokud ale potřebujeme, aby jednotlivé routy běžely pod různými protokoly, uvedeme ho v masce routy:

```php
// Bude generovat adresu s HTTP
$route = new Route('http://%host%/<presenter>/<action>','Homepage:default');

// Bude generovat adresu s HTTPs
$route = new Route('https://%host%/<presenter>/<action>','Admin:default');
```

.[caution]
HTTPS musíte aktivovat u svého hostingu.


Routing Debugger
================

Nebudeme před vámi tajit, že routování je do jisté míry magie a než ji pokoříte, bude vám dobrým pomocníkem Routing Debugger. Jde o panel do [Debugger bar |tracy:], poskytující přehledný seznam parametrů, které router získal z URL, a také seznamem jednotlivých definovaných rout. Zapíná se automaticky.

Zobrazí, na kterém presenteru & view se aktuálně nacházíte, jaké mu byly předány parametry a také zobrazí tabulku s přehledem všech definovaných cest včetně příznaků, jestli pasují i na aktuální URL:

[* routing-debugger.png *]

Routing debugger je ve výchozím nastavení povolen, pokud aplikace běží v režimu ladění. Můžete ji však vypnout v konfiguračním souboru:

```neon
routing:
	debugger: false # on by default
```


Cachování rout
==============

Pokud router nemá žádné závislosti, například na databázi, a jeho továrna nepřijímá žádné argumenty, můžeme jeho sestavenou podobu nakešovat (konkrétně serializovat jej) přímo do DI kontejneru a tím aplikaci trochu zrychlit.

```neon
routing:
	cache: true
```


Vlastní router
==============

Pokud vám nabízené routery nedostačují, můžete si vytvořit router vlastní a zcela přirozeně ho začlenit do kolekce rout. Router je implementací rozhraní [Router |api:Nette\Routing\Router] se dvěma metodami:

```php
use Nette\Http\IRequest as HttpRequest;
use Nette\Http\UrlScript;

class MyRouter implements Nette\Routing\Router
{
	public function match(HttpRequest $httpRequest): ?array
	{
		// ...
	}

	public function constructUrl(array $params, UrlScript $refUrl): ?string
	{
		// ...
	}
}
```

Metoda `match` zpracuje aktuální požadavek [$httpRequest |api:Nette\Http\Request] (ze kterého lze získat nejen URL) do pole obsahující jméno presenteru a jeho parametry. Pokud požadavek zpracovat neumí, vrátí null.

Metoda `constructUrl` naopak sestaví z pole parametrů výsledné absolutní URL. K tomu může využít informace z parametru `$refUrl`.

Možnosti vlastního routeru jsou prakticky neomezené, lze třeba implementovat router, který bude routovat na základě databázové tabulky.

{{composer: nette/application}}
