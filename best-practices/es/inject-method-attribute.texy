Métodos y atributos de inyección
********************************

.[perex]
Utilizando ejemplos concretos, veremos las posibilidades de pasar dependencias a los presentadores y explicaremos los métodos y atributos/anotaciones de `inject`.


`inject*()` Métodos .[#toc-inject-methods]
==========================================

En el presentador, como en cualquier otro código, la forma preferida de pasar dependencias es utilizando el [constructor |dependency-injection:passing-dependencies#Constructor Injection]. Sin embargo, si el presentador hereda de un ancestro común (por ejemplo, `BasePresenter`), es mejor utilizar los métodos de `inject*()` en ese ancestro. Es un caso especial de un setter, donde el método comienza con un prefijo `inject`. Esto se debe a que mantenemos el constructor libre para los descendientes:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

La diferencia básica con un setter es que Nette DI llama automáticamente a los métodos así nombrados en los presentadores en cuanto se crea la instancia, pasándoles todas las dependencias necesarias. Un presentador puede contener múltiples métodos `inject*()` y cada método puede tener cualquier número de parámetros.

Si pasáramos dependencias a los ancestros a través de sus constructores, tendríamos que obtener sus dependencias en todos los descendientes y pasarlas a `parent::__construct()`, lo que complica el código:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // esto es una complicación
		$this->bar = $bar;
	}
}
```

Los métodos de `inject*()` también son útiles en los casos en los que el presentador está [compuesto por traits |presenter-traits] y cada uno de ellos requiere su propia dependencia.

También es posible utilizar la anotación `@inject`, pero es importante tener en cuenta que se rompe la encapsulación.


`Inject` Anotaciones .[#toc-inject-annotations]
===============================================

Esto es un paso automático de la dependencia a la variable miembro pública del presentador, que está anotada con `@inject` en el comentario de la documentación. El tipo también puede ser especificado en el comentario de la documentación si está utilizando PHP inferior a 7.4.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

Desde PHP 8.0, una propiedad puede ser marcada con un atributo `Inject`:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

De nuevo, Nette DI pasará automáticamente las dependencias a las propiedades anotadas de esta manera en el presentador tan pronto como se cree la instancia.

Este método tiene las mismas deficiencias que pasar dependencias a una propiedad pública. Se utiliza en el presentador porque no complica el código y sólo requiere un mínimo de escritura.


{{sitename: Buenas prácticas}}
