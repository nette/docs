Работа с массивами
******************

.[perex]
Эта страница посвящена классам [Nette\Utils\Arrays|#Arrays], [#ArrayHash] и [#ArrayList], которые относятся к массивам.


Установка:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] — это статический класс, содержащий полезные функции для работы с массивами. Ее аналогом для итераторов является [Nette\Utils\Iterables|iterables].

Следующие примеры предполагают созданный псевдоним (alias):

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Функция гибко преобразует массив `$array` в ассоциативный массив или объекты в соответствии с указанным путем `$path`. Путь может быть строкой или массивом. Он состоит из имен ключей входного массива и операторов, таких как '[]', '->', '=', и '|'. Выбрасывает `Nette\InvalidArgumentException` в случае, если путь недействителен.

```php
// преобразование в ассоциативный массив по простому ключу
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// присвоение значений из одного ключа другому с использованием оператора =
$result = Arrays::associate($arr, 'name=age'); // или ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// создание объекта с использованием оператора ->
$result = Arrays::associate($arr, '->name'); // или ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// комбинация ключей с помощью оператора |
$result = Arrays::associate($arr, 'name|age'); // или ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// добавление в массив с использованием []
$result = Arrays::associate($arr, 'name[]'); // или ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Проверяет массив на наличие значения. Использует строгое сравнение (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Проверяет, проходят ли все элементы массива тест, реализованный в `$predicate` с сигнатурой `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

См. [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Возвращает новый массив, содержащий все пары ключ-значение, соответствующие указанному предикату. Callback имеет сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Возвращает первый элемент (соответствующий предикату, если он указан). Если такого элемента не существует, возвращает результат вызова `$else` или null.
Параметр `$predicate` имеет сигнатуру `function ($value, int|string $key, array $array): bool`.

Не изменяет внутренний указатель в отличие от `reset()`. Параметры `$predicate` и `$else` существуют с версии 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

См. [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Возвращает ключ первого элемента (соответствующий предикату, если он указан) или null, если такого элемента не существует. Предикат `$predicate` имеет сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

См. [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Объединяет многоуровневый массив в плоский.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

Возвращает элемент `$array[$key]`. Если он не существует, выбрасывает либо исключение `Nette\InvalidArgumentException`, либо, если указан третий параметр `$default`, возвращает его.

```php
// если $array['foo'] не существует, выбрасывает исключение
$value = Arrays::get($array, 'foo');

// если $array['foo'] не существует, возвращает 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Ключом `$key` может быть и массив.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// возвращает 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Получает ссылку на указанный элемент массива. Если элемент не существует, он будет создан со значением null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// возвращает ссылку на $array['foo']
```

Так же, как функция [get() |#get()], умеет работать с многомерными массивами.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// возвращает ссылку на $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Возвращает только те элементы массива, значение которых соответствует регулярному выражению `$pattern`. Если `$invert` равно `true`, наоборот, возвращает элементы, которые не соответствуют. Ошибка при компиляции или обработке выражения выбрасывает исключение `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// возвращает только элементы массива, состоящие из цифр
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Вставляет содержимое массива `$inserted` в массив `$array` сразу после элемента с ключом `$key`. Если `$key` равен `null` (или его нет в массиве), вставляется в конец.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Вставляет содержимое массива `$inserted` в массив `$array` перед элементом с ключом `$key`. Если `$key` равен `null` (или его нет в массиве), вставляется в начало.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Вызывает все callback'и и возвращает массив результатов.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Вызывает метод для каждого объекта в массиве и возвращает массив результатов.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Проверяет, является ли массив индексированным по возрастающей последовательности числовых ключей от нуля, т.е. списком (list).

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Возвращает последний элемент (соответствующий предикату, если он указан). Если такого элемента не существует, возвращает результат вызова `$else` или null.
Параметр `$predicate` имеет сигнатуру `function ($value, int|string $key, array $array): bool`.

Не изменяет внутренний указатель в отличие от `end()`. Параметры `$predicate` и `$else` существуют с версии 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

См. [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Возвращает ключ последнего элемента (соответствующий предикату, если он указан) или null, если такого элемента не существует. Предикат `$predicate` имеет сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

См. [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Вызывает `$transformer` для всех элементов массива и возвращает массив возвращенных значений. Callback имеет сигнатуру `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Создает новый массив путем преобразования значений и ключей исходного массива. Функция `$transformer` имеет сигнатуру `function ($value, $key, array $array): ?array{$newKey, $newValue}`. Если `$transformer` возвращает `null`, элемент пропускается. Для сохраненных элементов первый элемент возвращенного массива используется как новый ключ, а второй элемент - как новое значение.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Этот метод полезен в ситуациях, когда вам нужно изменить структуру массива (ключи и значения одновременно) или отфильтровать элементы при преобразовании (возвращая null для нежелательных элементов).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Рекурсивно объединяет два массива. Подходит, например, для объединения древовидных структур. При объединении руководствуется теми же правилами, что и оператор `+`, применяемый к массивам, т.е. к первому массиву добавляет пары ключ/значение из второго массива и в случае коллизии ключей оставляет значение из первого массива.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Значения из второго массива всегда добавляются в конец первого. Немного сбивающим с толку может показаться исчезновение значения `10` из второго массива. Необходимо понимать, что этому значению, а также значению `5` в первом массиве, присвоен один и тот же числовой ключ `0`, поэтому в результирующем массиве есть только элемент из первого массива.


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

Нормализует массив в ассоциативный массив. Числовые ключи заменяет их значениями, новым значением будет `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

Возвращает и удаляет значение элемента из массива. Если он не существует, выбрасывает исключение или возвращает значение `$default`, если оно указано.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Переименовывает ключ в массиве. Возвращает `true`, если ключ был найден в массиве.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Возвращает позицию данного ключа в массиве. Позиция нумеруется с 0. В случае, если ключ не будет найден, функция вернет `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // возвращает 0
$position = Arrays::getKeyOffset($array, 'second'); // возвращает 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // возвращает null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Проверяет, проходит ли хотя бы один элемент массива тест, реализованный в `$predicate` с сигнатурой `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

См. [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Преобразует значение в ключ массива, который является либо целым числом (integer), либо строкой.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Копирует элементы массива `$array` в объект `$object`, который затем возвращает.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // устанавливает $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Каждый элемент массива преобразует в строку и обрамляет префиксом `$prefix` и суффиксом `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

Объект [api:Nette\Utils\ArrayHash] является потомком универсального класса stdClass и расширяет его возможностью обращаться с ним как с массивом, то есть, например, получать доступ к членам через квадратные скобки:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // одновременно работает и объектная запись
$hash->foo; // 123
```

Можно использовать функцию `count($hash)` для определения количества элементов.

По объекту можно итерировать так же, как и по массиву, в том числе и по ссылке:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Существующий массив можно преобразовать в `ArrayHash` с помощью метода `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Преобразование рекурсивно:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // объект ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Это можно предотвратить вторым параметром:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // массив
```

Преобразование обратно в массив:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] представляет собой линейный массив, где индексами являются только целые числа по возрастанию от 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Существующий массив можно преобразовать в `ArrayList` с помощью метода `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Можно использовать функцию `count($list)` для определения количества элементов.

По объекту можно итерировать так же, как и по массиву, в том числе и по ссылке:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

Доступ к ключам вне допустимых значений выбросит исключение `Nette\OutOfRangeException`:

```php
echo $list[-1]; // выбросит Nette\OutOfRangeException
unset($list[30]); // выбросит Nette\OutOfRangeException
```

Удаление ключа вызывает перенумерацию элементов:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Новый элемент можно добавить в начало с помощью метода `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
