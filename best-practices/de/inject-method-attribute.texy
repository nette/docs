Injektionsmethoden und -attribute
*********************************

.[perex]
Anhand konkreter Beispiele werden wir die Möglichkeiten der Übergabe von Abhängigkeiten an Presenter betrachten und die `inject` Methoden und Attribute/Anmerkungen erläutern.


`inject*()` Methoden .[#toc-inject-methods]
===========================================

In Presenter, wie in jedem anderen Code auch, ist die bevorzugte Art der Übergabe von Abhängigkeiten die Verwendung von [Konstruktoren |dependency-injection:passing-dependencies#Constructor Injection]. Wenn der Präsentator jedoch von einem gemeinsamen Vorgänger erbt (z. B. `BasePresenter`), ist es besser, die Methoden von `inject*()` in diesem Vorgänger zu verwenden. Es handelt sich um einen Spezialfall eines Setters, bei dem die Methode mit einem Präfix `inject` beginnt. Dies liegt daran, dass wir den Konstruktor für Nachkommen frei halten:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

Der grundlegende Unterschied zu einem Setter besteht darin, dass Nette DI die so benannten Methoden in Presentern automatisch aufruft, sobald die Instanz erzeugt wird, und ihnen alle erforderlichen Abhängigkeiten übergibt. Ein Presenter kann mehrere Methoden enthalten `inject*()` und jede Methode kann eine beliebige Anzahl von Parametern haben.

Würden wir die Abhängigkeiten an die Vorfahren über deren Konstruktoren übergeben, müssten wir ihre Abhängigkeiten in allen Nachkommen abrufen und an `parent::__construct()` übergeben, was den Code verkompliziert:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // dies ist eine Komplikation
		$this->bar = $bar;
	}
}
```

Die Methoden von `inject*()` sind auch in Fällen nützlich, in denen der Präsentator [aus Traits |presenter-traits] besteht und jeder von ihnen seine eigene Abhängigkeit benötigt.

Es ist auch möglich, die Annotation `@inject` zu verwenden, aber es ist wichtig zu bedenken, dass die Kapselung bricht.


`Inject` Annotationen .[#toc-inject-annotations]
================================================

Dies ist eine automatische Übergabe der Abhängigkeit an die öffentliche Member-Variable des Präsentators, die im Dokumentationskommentar mit `@inject` kommentiert ist. Der Typ kann auch im Dokumentationskommentar angegeben werden, wenn Sie PHP kleiner als 7.4 verwenden.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

Seit PHP 8.0 kann eine Eigenschaft mit einem Attribut `Inject` gekennzeichnet werden:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Auch hier wird Nette DI automatisch Abhängigkeiten zu Eigenschaften, die auf diese Weise im Presenter annotiert sind, übergeben, sobald die Instanz erstellt wird.

Diese Methode hat die gleichen Mängel wie die Übergabe von Abhängigkeiten an eine öffentliche Eigenschaft. Sie wird im Presenter verwendet, weil sie den Code nicht verkompliziert und nur ein Minimum an Tipparbeit erfordert.


{{sitename: Bewährte Praktiken}}
