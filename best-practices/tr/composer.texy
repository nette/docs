Composer Kullanım İpuçları
**************************
<div class=perex>


Composer PHP'de bağımlılık yönetimi için bir araçtır. Projenizin bağlı olduğu kütüphaneleri bildirmenize olanak tanır ve bunları sizin için yükler ve günceller. Öğreneceğiz:

- Composer nasıl kurulur
- yeni veya mevcut projede kullanın

</div>


Kurulum .[#toc-installation]
============================

Composer, aşağıdaki şekilde indirip kurduğunuz çalıştırılabilir bir `.phar` dosyasıdır.


Pencereler .[#toc-windows]
--------------------------

[Composer-Setup.exe |https://getcomposer.org/Composer-Setup.exe] resmi yükleyicisini kullanın.


Linux, macOS .[#toc-linux-macos]
--------------------------------

İhtiyacınız olan tek şey [bu sayfadan |https://getcomposer.org/download/] kopyalayabileceğiniz 4 komuttur.

Dahası, sistemin `PATH` adresindeki klasöre kopyalandığında Composer global olarak erişilebilir hale gelir:

```shell
$ mv ./composer.phar ~/bin/composer # or /usr/local/bin/composer
```


Projede Kullanım .[#toc-use-in-project]
=======================================

Projenizde Composer'ı kullanmaya başlamak için tek ihtiyacınız olan bir `composer.json` dosyasıdır. Bu dosya projenizin bağımlılıklarını tanımlar ve başka meta veriler de içerebilir. En basit `composer.json` şu şekilde görünebilir:

```js
{
	"require": {
		"nette/database": "^3.0"
	}
}
```

Burada, uygulamamızın (veya kütüphanemizin) `nette/database` paketine bağlı olduğunu (paket adı bir satıcı adı ve proje adından oluşur) ve `^3.0` sürüm kısıtlamasına uyan sürümü istediğini söylüyoruz.

Yani, proje kökünde `composer.json` dosyası olduğunda ve çalıştırdığımızda:

```shell
composer update
```

Composer Nette Veritabanını `vendor` dizinine indirecektir. Ayrıca, tam olarak hangi kütüphane sürümlerini yüklediği hakkında bilgi içeren bir `composer.lock` dosyası oluşturur.

Composer bir `vendor/autoload.php` dosyası oluşturur. Bu dosyayı kolayca dahil edebilir ve bu kütüphanelerin sağladığı sınıfları herhangi bir ekstra çalışma yapmadan kullanmaya başlayabilirsiniz:

```php
require __DIR__ . '/vendor/autoload.php';

$db = new Nette\Database\Connection('sqlite::memory:');
```


En Son Sürüme Güncelleyin .[#toc-update-to-the-latest-version]
==============================================================

Kullanılan tüm paketleri `composer.json` adresinde tanımlanan sürüm kısıtlamalarına göre en son sürüme güncellemek için `composer update` komutunu kullanın. Örneğin `"nette/database": "^3.0"` bağımlılığı için en son 3.x.x sürümünü yükleyecek, ancak sürüm 4'ü yüklemeyecektir.

`composer.json` dosyasındaki sürüm kısıtlamalarını örneğin `"nette/database": "^4.1"` olarak güncellemek ve en son sürümü yüklemeyi etkinleştirmek için `composer require nette/database` komutunu kullanın.

Kullanılan tüm Nette paketlerini güncellemek için, hepsini komut satırında listelemek gerekir, örn:

```shell
composer require nette/application nette/forms latte/latte tracy/tracy ...
```

Bu da pratik değildir. Bu nedenle, bunu sizin için yapacak basit bir komut dosyası "Composer Frontline":https://gist.github.com/dg/734bebf55cf28ad6a5de1156d3099bff kullanın:

```shell
php composer-frontline.php
```


Yeni Proje Oluşturma .[#toc-creating-new-project]
=================================================

Yeni Nette projesi basit bir komut çalıştırılarak oluşturulabilir:

```shell
composer create-project nette/web-project name-of-the-project
```

Bunun yerine `name-of-the-project` adresine projenizin dizininin adını girmeli ve komutu çalıştırmalısınız. Composer, `composer.json` dosyasını zaten içeren GitHub'dan `nette/web-project` deposunu getirecek ve hemen ardından Nette Framework'ün kendisini yükleyecektir. Geriye kalan tek şey `temp/` ve `log/` dizinleri üzerindeki [yazma izinlerini kontrol |nette:troubleshooting#setting-directory-permissions] etmektir ve artık hazırsınız.


PHP Sürümü .[#toc-php-version]
==============================

Composer her zaman kullanmakta olduğunuz PHP sürümü ile uyumlu olan paket sürümlerini yükler. Elbette bu, web barındırıcınızdaki PHP ile aynı sürüm olmayabilir. Bu nedenle, `composer.json` dosyasına ana bilgisayardaki PHP sürümü hakkında bilgi eklemek yararlıdır ve ardından yalnızca ana bilgisayarla uyumlu paket sürümleri yüklenecektir:

```js
{
	"require": {
		...
	},
	"config": {
		"platform": {
			"php": "7.2"   # PHP version on host
		}
	}
}
```


Packagist.org - Küresel Depo .[#toc-packagist-org-global-repository]
====================================================================

[Packagist |https://packagist.org], aksi söylenmediği takdirde Composer'ın paketleri aramaya çalıştığı ana paket deposudur. Kendi paketlerinizi de burada yayınlayabilirsiniz.


Ya Merkezi Depoyu İstemiyorsak .[#toc-what-if-we-don-t-want-the-central-repository]
-----------------------------------------------------------------------------------

Şirketimizde Packagist'te herkese açık olarak barındırılamayan dahili uygulamalarımız veya kütüphanelerimiz varsa, bu projeler için kendi depolarımızı oluşturabiliriz.

[Resmi belgelerde |https://getcomposer.org/doc/05-repositories.md#repositories] depolar hakkında daha fazla bilgi bulabilirsiniz.


Otomatik Yükleme .[#toc-autoloading]
====================================

Composer'ın önemli bir özelliği, yüklediği tüm sınıflar için otomatik yükleme sağlamasıdır; bunu `vendor/autoload.php` dosyasını ekleyerek başlatırsınız.

Ancak, Composer'ı `vendor` klasörü dışındaki diğer sınıfları yüklemek için kullanmak da mümkündür. İlk seçenek, Composer'ın tanımlı klasörleri ve alt klasörleri taramasına, tüm sınıfları bulmasına ve bunları otomatik yükleyiciye dahil etmesine izin vermektir. Bunu yapmak için `autoload > classmap` adresini `composer.json` olarak ayarlayın:

```js
{
	"autoload": {
		"classmap": [
			"src/",      #  includes the src/ folder and its subfolders
		]
	}
}
```

Daha sonra, her değişiklikte `composer dumpautoload` komutunu çalıştırmak ve otomatik yükleme tablolarının yeniden oluşturulmasına izin vermek gerekir. Bu son derece zahmetlidir ve bu görevi, aynı etkinliği arka planda otomatik olarak ve çok daha hızlı gerçekleştiren [RobotLoader'a |robot-loader:] emanet etmek çok daha iyidir.

İkinci seçenek [PSR-4'ü |https://www.php-fig.org/psr/psr-4/] takip etmektir. Basitçe söylemek gerekirse, ad alanlarının ve sınıf adlarının dizin yapısına ve dosya adlarına karşılık geldiği bir sistemdir, yani `App\Router\RouterFactory`, `/path/to/App/Router/RouterFactory.php` dosyasında bulunur. Yapılandırma örneği:

```js
{
	"autoload": {
		"psr-4": {
			"App\\": "app/"   # the App\ namespace is in the app/ directory
		}
	}
}
```

Bu davranışın tam olarak nasıl yapılandırılacağını öğrenmek için [Composer Belgelerine |https://getcomposer.org/doc/04-schema.md#psr-4] bakın.


Yeni Sürümlerin Test Edilmesi .[#toc-testing-new-versions]
==========================================================

Bir paketin yeni bir geliştirme sürümünü test etmek istiyorsunuz. Bunu nasıl yapabilirsiniz? Öncelikle, `composer.json` dosyasına paketlerin geliştirme sürümlerini yüklemenize izin verecek, ancak bunu yalnızca gereksinimleri karşılayan kararlı sürüm kombinasyonu yoksa yapacak olan bu seçenek çiftini ekleyin:

```js
{
	"minimum-stability": "dev",
	"prefer-stable": true,
}
```

Ayrıca `composer.lock` dosyasını silmenizi öneririz, çünkü bazen Composer anlaşılmaz bir şekilde yüklemeyi reddeder ve bu sorunu çözecektir.

Paketin `nette/utils` olduğunu ve yeni sürümün 4.0 olduğunu varsayalım. Şu komut ile yüklüyorsunuz:

```shell
composer require nette/utils:4.0.x-dev
```

Ya da 4.0.0-RC2 gibi belirli bir sürümü yükleyebilirsiniz:

```shell
composer require nette/utils:4.0.0-RC2
```

Başka bir paket kütüphaneye bağlıysa ve eski bir sürüme kilitliyse (örn. `^3.1`), paketi yeni sürümle çalışacak şekilde güncellemek idealdir.
Ancak, sınırlamayı aşmak ve Composer'ı geliştirme sürümünü yüklemeye ve eski bir sürümmüş gibi davranmaya zorlamak istiyorsanız (örneğin, 3.1.6), `as` anahtar sözcüğünü kullanabilirsiniz:

```shell
composer require nette/utils "4.0.x-dev as 3.1.6"
```


Çağrı Komutları .[#toc-calling-commands]
========================================

Kendi özel komutlarınızı ve komut dosyalarınızı Composer aracılığıyla yerel Composer komutlarıymış gibi çağırabilirsiniz. `vendor/bin` klasöründe bulunan komut dosyalarının bu klasörü belirtmesine gerek yoktur.

Örnek olarak, `composer.json` dosyasında testleri çalıştırmak için [Nette Tester |tester:] 'ı kullanan bir komut dosyası tanımlıyoruz:

```js
{
	"scripts": {
		"tester": "tester tests -s"
	}
}
```

Daha sonra testleri `composer tester` ile çalıştırıyoruz. Projenin kök klasöründe değil, bir alt dizinde olsak bile komutu çağırabiliriz.


Teşekkür Gönder .[#toc-send-thanks]
===================================

Size açık kaynak yazarlarını mutlu edecek bir numara göstereceğiz. Projenizin kullandığı kütüphanelere GitHub'da kolayca bir yıldız verebilirsiniz. Sadece `symfony/thanks` kütüphanesini yükleyin:

```shell
composer global require symfony/thanks
```

Ve sonra koş:

```shell
composer thanks
```

Dene bakalım!


Konfigürasyon .[#toc-configuration]
===================================

Composer, sürüm kontrol aracı [Git |https://git-scm.com] ile yakından entegre edilmiştir. Eğer Git kullanmıyorsanız bunu Composer'a söylemeniz gerekmektedir:

```shell
composer -g config preferred-install dist
```

{{sitename: En İyi Uygulamalar}}
