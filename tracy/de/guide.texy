Erste Schritte mit Tracy
************************
<div class=perex>


Die Tracy-Bibliothek ist ein nützliches Hilfsmittel für PHP-Programmierer. Sie hilft Ihnen dabei:

- Fehler schnell zu erkennen und zu korrigieren
- Fehler zu protokollieren
- Variablen auszulagern
- die Ausführungszeit von Skripten/Abfragen zu messen
- Speicherverbrauch anzeigen

</div>


PHP ist eine perfekte Sprache, um kaum erkennbare Fehler zu machen, weil sie Programmierern große Flexibilität bietet. Tracy\Debugger ist deshalb besonders wertvoll. Er ist ein ultimatives Werkzeug unter den Diagnosewerkzeugen.
Wenn Sie Tracy zum ersten Mal treffen, glauben Sie mir, Ihr Leben wird sich in ein Leben vor Tracy und ein Leben mit ihr aufteilen. Willkommen zum guten Teil!


Installation und Anforderungen .[#toc-installation-and-requirements]
====================================================================

Der beste Weg, Tracy zu installieren, ist, [das neueste Paket herunterzuladen](https://github.com/nette/tracy/releases) oder Composer zu verwenden:

```shell
composer require tracy/tracy
```

Alternativ können Sie auch das gesamte Paket oder die Datei [tracy.phar |https://github.com/nette/tracy/releases] herunterladen.


Verwendung .[#toc-usage]
========================

Die Aktivierung von Tracy ist einfach. Fügen Sie einfach diese beiden Codezeilen ein, vorzugsweise direkt nach dem Laden der Bibliothek (wie `require 'vendor/autoload.php'`) und bevor eine Ausgabe an den Browser gesendet wird:

```php
use Tracy\Debugger;

Debugger::enable();
```

Das erste, was Sie auf der Website sehen werden, ist eine Tracy-Leiste.

(Wenn Sie nichts sehen, bedeutet das, dass Tracy im Produktionsmodus läuft. Aus Sicherheitsgründen ist Tracy nur auf localhost sichtbar.
Sie können die Ausführung von Tracy im Entwicklungsmodus erzwingen, indem Sie die `Debugger::Development` als ersten Parameter der Methode `enable()` übergeben).

Bei `enable()` wird die Fehlerberichtsebene auf E_ALL geändert.


Tracy Bar .[#toc-tracy-bar]
===========================

Die Tracy-Leiste ist ein schwebendes Panel. Sie wird in der rechten unteren Ecke einer Seite angezeigt. Sie können sie mit der Maus verschieben. Sie merkt sich ihre Position nach dem Neuladen der Seite.

[* tracy-bar.webp *]:https://nette.github.io/tracy/tracy-debug-bar.html

Sie können der Tracy Bar weitere nützliche Panels hinzufügen. Sie können interessante in [Addons |https://componette.org] finden oder [Ihre eigenen erstellen |extensions].

Wenn Sie die Tracy Bar nicht anzeigen möchten, setzen Sie:

```php
Debugger::$showBar = false;
```


Visualisierung von Fehlern und Ausnahmen .[#toc-visualization-of-errors-and-exceptions]
=======================================================================================

Sicherlich wissen Sie, wie PHP Fehler meldet: Im Quellcode der Seite steht etwas Ähnliches:

/--pre .{font-size: 90%}
<b>Parse error</b>:  syntax error, unexpected '}' in <b>HomepagePresenter.php</b> on line <b>15</b>
\--

oder nicht gefangene Ausnahme:

/--pre .{font-size: 90%}
<b>Fatal error</b>:  Uncaught Nette\MemberAccessException: Call to undefined method Nette\Application\UI\Form::addTest()? in /sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php:100
Stack trace:
#0 /sandbox/vendor/nette/utils/src/Utils/Object.php(75): Nette\Utils\ObjectMixin::call(Object(Nette\Application\UI\Form), 'addTest', Array)
#1 /sandbox/app/forms/SignFormFactory.php(32): Nette\Object->__call('addTest', Array)
#2 /sandbox/app/presenters/SignPresenter.php(21): App\Forms\SignFormFactory->create()
#3 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(181): App\Presenters\SignPresenter->createComponentSignInForm('signInForm')
#4 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(139): Nette\ComponentModel\Container->createComponent('signInForm')
#5 /sandbox/temp/cache/latte/15206b353f351f6bfca2c36cc.php(17): Nette\ComponentModel\Co in <b>/sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php</b> on line <b>100</b><br />
\--

Es ist nicht so einfach, durch diese Ausgabe zu navigieren. Wenn Sie Tracy aktivieren, werden sowohl Fehler als auch Ausnahmen in einer völlig anderen Form angezeigt:

[* tracy-exception.webp .{url:-} *]

Die Fehlermeldungen schreien förmlich. Sie können einen Teil des Quellcodes mit der hervorgehobenen Zeile sehen, in der der Fehler aufgetreten ist. Eine Meldung erklärt den Fehler deutlich. Die gesamte Website ist [interaktiv, versuchen Sie es](https://nette.github.io/tracy/tracy-exception.html).

Und wissen Sie was? Fatale Fehler werden auf die gleiche Weise erfasst und angezeigt. Es ist nicht nötig, eine Erweiterung zu installieren (klicken Sie für ein Live-Beispiel):

[* tracy-error.webp .{url:-} *]

Fehler wie ein Tippfehler in einem Variablennamen oder der Versuch, eine nicht existierende Datei zu öffnen, erzeugen Berichte der Stufe E_NOTICE oder E_WARNING. Diese können leicht übersehen werden und/oder in einem grafischen Layout einer Webseite völlig versteckt sein. Überlassen Sie Tracy die Verwaltung dieser Meldungen:

[* tracy-notice2.webp *]:https://nette.github.io/tracy/tracy-debug-bar.html

Oder sie können wie Fehler angezeigt werden:

```php
Debugger::$strictMode = true; // display all errors
Debugger::$strictMode = E_ALL & ~E_DEPRECATED & ~E_USER_DEPRECATED; // all errors except deprecated notices
```

[* tracy-notice.webp .{url:-} *]

Um Rechtschreibfehler bei der Zuweisung zu einem Objekt zu erkennen, verwenden wir die [Eigenschaft Nette\SmartObject |utils:smartobject].


Produktionsmodus und Fehlerprotokollierung .[#toc-production-mode-and-error-logging]
====================================================================================

Wie Sie sehen können, ist Tracy ziemlich wortgewandt. In einer Entwicklungsumgebung ist dies zu begrüßen, aber auf einem Produktionsserver würde es zu einer Katastrophe führen. Alle Debugging-Informationen können dort nicht angezeigt werden. Daher verfügt Tracy über eine automatische Umgebungserkennung und Protokollierungsfunktion. Anstatt sich selbst anzuzeigen, speichert Tracy Informationen in einer Protokolldatei und zeigt dem Besucher eine für den Benutzer verständliche Server-Fehlermeldung an:

[* tracy-error2.webp .{url:-} *]

Der Produktionsausgabemodus unterdrückt alle Debugging-Informationen, die über [dump() |dumper] ausgegeben werden, und natürlich alle von PHP erzeugten Fehlermeldungen. Selbst wenn Sie also `dump($obj)` im Quellcode vergessen, müssen Sie sich auf Ihrem Produktionsserver keine Gedanken darüber machen. Es wird nichts zu sehen sein.

Der Ausgabemodus wird durch den ersten Parameter von `Debugger::enable()` festgelegt. Sie können entweder eine Konstante `Debugger::Production` oder `Debugger::Development` angeben. Eine andere Möglichkeit besteht darin, den Entwicklungsmodus so einzustellen, dass er aktiviert wird, wenn von einer bestimmten IP-Adresse mit einem bestimmten Wert des Cookies `tracy-debug` auf die Anwendung zugegriffen wird. Die dafür verwendete Syntax lautet `cookie-value@ip-address`.

Wird er nicht angegeben, wird der Standardwert `Debugger::Detect` verwendet. In diesem Fall erkennt das System einen Server anhand der IP-Adresse. Der Produktionsmodus wird gewählt, wenn eine Anwendung über eine öffentliche IP-Adresse aufgerufen wird. Eine lokale IP-Adresse führt zum Entwicklungsmodus. In den meisten Fällen ist es nicht notwendig, den Modus einzustellen. Der Modus wird korrekt erkannt, wenn Sie die Anwendung auf Ihrem lokalen Server oder im Produktionsmodus starten.

Im Produktionsmodus zeichnet Tracy automatisch alle Fehler und Ausnahmen in einem Textprotokoll auf. Wenn Sie nichts anderes angeben, wird es in log/error.log gespeichert. Diese Fehlerprotokollierung ist äußerst nützlich. Stellen Sie sich vor, dass alle Benutzer Ihrer Anwendung eigentlich Betatester sind. Sie leisten kostenlos Spitzenarbeit bei der Fehlersuche und Sie wären dumm, wenn Sie ihre wertvollen Berichte unbemerkt in den Papierkorb werfen würden.

Wenn Sie Ihre eigenen Meldungen oder abgefangenen Ausnahmen protokollieren müssen, verwenden Sie die Methode `log()`:

```php
Debugger::log('Unexpected error'); // text message

try {
	criticalOperation();
} catch (Exception $e) {
	Debugger::log($e); // log exception
	// or
	Debugger::log($e, Debugger::ERROR); // also sends an email notification
}
```

Ein Verzeichnis für die Fehlerprotokollierung kann über den zweiten Parameter der Methode enable() festgelegt werden:

```php
Debugger::enable(Debugger::Detect, __DIR__ . '/mylog');
```

Wenn Sie möchten, dass Tracy PHP-Fehler wie `E_NOTICE` oder `E_WARNING` mit detaillierten Informationen (HTML-Bericht) protokolliert, setzen Sie `Debugger::$logSeverity`:

```php
Debugger::$logSeverity = E_NOTICE | E_WARNING;
```

Für einen echten Profi ist das Fehlerprotokoll eine wichtige Informationsquelle, und er oder sie möchte über jeden neuen Fehler sofort informiert werden. Tracy hilft ihm dabei. Sie ist in der Lage, für jeden neuen Fehlereintrag eine E-Mail zu versenden. Die Variable $email gibt an, wohin diese E-Mails zu senden sind:

```php
Debugger::$email = 'admin@example.com';
```

Wenn Sie das gesamte Nette Framework verwenden, können Sie diese und andere Einstellungen in der [Konfigurationsdatei |nette:configuring] vornehmen.

Um Ihr E-Mail-Postfach vor Überflutung zu schützen, sendet Tracy **nur eine Nachricht** und erstellt eine Datei `email-sent`. Wenn ein Entwickler die E-Mail-Benachrichtigung erhält, überprüft er das Protokoll, korrigiert seine Anwendung und löscht die Überwachungsdatei `email-sent`. Dadurch wird der E-Mail-Versand wieder aktiviert.


Öffnen von Dateien im Editor .[#toc-opening-files-in-the-editor]
================================================================

Wenn die Fehlerseite angezeigt wird, können Sie auf Dateinamen klicken und sie werden in Ihrem Editor geöffnet, wobei der Cursor auf der entsprechenden Zeile steht. Es können auch Dateien erstellt werden (Aktion `create file`) oder Fehler in ihnen behoben werden (Aktion `fix it`). Hierfür müssen Sie [den Browser und das System konfigurieren |open-files-in-ide].


Unterstützte PHP-Versionen .[#toc-supported-php-versions]
=========================================================

| Tracy ist kompatibel mit PHP
|-----------|--------------------
| Tracy 2.10 – 3.0 | PHP 8.0 - 8.2
| Tracy 2.9 | PHP 7.2 - 8.2
| Tracy 2.8 | PHP 7.2 - 8.1
| Tracy 2.6 - 2.7 | PHP 7.1 - 8.0
| Tracy 2.5 | PHP 5.4 - 7.4
| Tracy 2.4 | PHP 5.4 - 7.2

Gilt für die neuesten Patch-Versionen.


Ports .[#toc-ports]
===================

Dies ist eine Liste von inoffiziellen Portierungen auf andere Frameworks und CMS:

- [Drupal 7](https://www.drupal.org/project/traced)
- Laravel framework: [recca0120/laravel-tracy](https://github.com/recca0120/laravel-tracy), [whipsterCZ/laravel-tracy](https://github.com/whipsterCZ/laravel-tracy)
- [OpenCart](https://github.com/BurdaPraha/oc_tracy)
- [ProcessWire CMS/CMF](https://github.com/adrianbj/TracyDebugger)
- [Slim Framework](https://github.com/runcmf/runtracy)
- Symfony framework: [kutny/tracy-bundle](https://github.com/kutny/tracy-bundle), [VasekPurchart/Tracy-Blue-Screen-Bundle](https://github.com/VasekPurchart/Tracy-Blue-Screen-Bundle)
- [Wordpress](https://github.com/ktstudio/WP-Tracy)
