Formato NEON
************

.[perex]
NEON es un formato de datos estructurados legible por humanos. En Nette se utiliza para archivos de configuración. También se utiliza para datos estructurados, como configuraciones, traducciones de idiomas, etc. [Pruébalo|https://ne-on.org].

NEON es la abreviatura de *Nette Object Notation*. Es menos complejo y torpe que XML o JSON, pero proporciona funciones similares. Es muy similar a YAML. La principal ventaja es que NEON tiene las llamadas [#entity], gracias a las cuales la configuración de los servicios DI es [tan sexy |https://gist.github.com/dg/26baf3ce8f29d0f751e9dddfaa06504f]. Y permite la indentación con tabuladores.

NEON está construido desde cero para ser fácil de usar.


Integración
===========

- NetBeans (tiene soporte incorporado)
- PhpStorm ([plugin |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([Nette Latte + Neon |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte]) o [Nette for VS Code |https://marketplace.visualstudio.com/items?itemName=franken-ui.nette-for-vscode])
- Sublime Text 3 ([plugin |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([plugin |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([plugin |https://github.com/fpob/nette.vim])
- Emacs ([plugin |https://github.com/Fuco1/neon-mode])
- Prism.js ([lenguaje integrado |https://prismjs.com/#supported-languages])


- [NEON for PHP |@home]
- [NEON for JavaScript |https://github.com/matej21/neon-js]
- [NEON for Python |https://github.com/paveldedik/neon-py].


Sintaxis
========

Un archivo escrito en NEON generalmente representa un array o un mapeo.


Mapeo
-----
Un mapeo es un conjunto de pares clave-valor, en PHP se diría un array asociativo. Cada par se escribe como `key: value`, el espacio después de `:` es necesario. El valor puede ser cualquier cosa: cadena, número, booleano, null, secuencia u otro mapeo.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Esta notación se llama de bloque, porque todos los elementos están en una línea separada y tienen la misma indentación (en este caso, ninguna). NEON también admite una representación en línea para mapeos, que está encerrada entre llaves, la indentación no juega ningún papel y el separador de elementos individuales es una coma o una nueva línea:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

Lo mismo escrito en varias líneas (la indentación no importa):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

En lugar de <code>: </code> también se puede usar `=` alternativamente, tanto en la notación de bloque como en línea:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Secuencia
---------
Las secuencias son arrays indexados en PHP. Se escriben como líneas que comienzan con un guión `-` seguido de un espacio. El valor nuevamente puede ser cualquier cosa: cadena, número, booleano, null, secuencia u otro mapeo.

```neon
- Cat
- Dog
- Goldfish
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Esta notación se llama de bloque, porque todos los elementos están en una línea separada y tienen la misma indentación (en este caso, ninguna). NEON también admite una representación en línea para secuencias, que está encerrada entre corchetes, la indentación no juega ningún papel y el separador de elementos individuales es una coma o una nueva línea:

```neon
[Cat, Dog, Goldfish]
```

Lo mismo escrito en varias líneas (la indentación no importa):

```neon
[
	Cat, Dog
		Goldfish
]
```

En la representación en línea no se pueden usar guiones de indentación.


Combinaciones
-------------
Los valores de mapeos y secuencias pueden ser otros mapeos y secuencias. El nivel de indentación juega un papel principal. En el siguiente ejemplo, el guión utilizado para indicar los elementos de la secuencia tiene una indentación mayor que la clave `pets`, por lo que los elementos se convierten en el valor de la primera línea:

```neon
pets:
   - Cat
   - Dog
cars:
   - Volvo
   - Skoda
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

Se puede combinar la notación de bloque y en línea:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

Dentro de la notación en línea ya no se puede usar la notación de bloque, esto no funciona:

```neon
item: [
	pets:
	 - Cat     # ¡¡¡ESTO NO SE PUEDE!!!
	 - Dog
]
```

En el caso anterior, escribimos un mapeo cuyos elementos eran secuencias, ahora intentaremos lo contrario y crearemos una secuencia que contenga mapeos:

```neon
-
	name: John
	age: 35
-
	name: Peter
	age: 28
```

No es necesario que los guiones estén en líneas separadas, también se pueden colocar de esta manera:

```neon
- name: John
  age: 35
- name: Peter
  age: 28
```

Depende de usted si alinea las claves en una columna usando espacios o usa un tabulador.

Dado que en PHP se utiliza la misma estructura para mapeos y secuencias, es decir, arrays, se pueden fusionar ambos. La indentación esta vez es la misma:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

En PHP, la misma estructura se escribiría como:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Cadenas
-------
Las cadenas en NEON se pueden encerrar entre comillas simples o dobles. Pero como puede ver, también pueden estar sin comillas.

```neon
- Cadena en NEON sin comillas
- 'Cadena en NEON en comillas simples'
- "Cadena en NEON en comillas dobles"
```

Si la cadena contiene los caracteres `# " ' , : = - [ ] { } ( )`, que pueden confundirse con la sintaxis NEON, debe encerrarse entre comillas. Recomendamos usar comillas simples, ya que en ellas no se usa el escapado. Si necesita escribir una comilla en dicha cadena, duplíquela:

```neon
'Comilla '' dentro de una cadena en comillas simples'
```

Las comillas dobles permiten usar secuencias de escape para escribir caracteres especiales usando barras invertidas `\`. Se admiten todas las secuencias de escape como en el formato JSON y además `\_`, que es un espacio indivisible, es decir, `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Hay otros casos en los que es necesario encerrar las cadenas entre comillas:
- comienzan o terminan con espacios
- parecen números, booleanos o null
- NEON las entendería como [#fecha]


Cadenas multilínea
------------------

Una cadena multilínea comienza y termina con comillas triples en líneas separadas. La indentación de la primera línea se ignora para todas las líneas:

```neon
'''
	primera línea
		segunda línea
	tercera línea
	'''
```

En PHP escribiríamos lo mismo como:

```php
"primera línea\n\tsegunda línea\ntercera línea" // PHP
```

Las secuencias de escape solo funcionan en cadenas encerradas entre comillas dobles en lugar de apóstrofes:

```neon
"""
	Copyright \u00A9
"""
```


Números
-------
NEON entiende los números escritos en la llamada notación científica y también los números en sistemas binario, octal y hexadecimal:

```neon
- 12         # entero
- 12.3       # float
- +1.2e-34   # número exponencial

- 0b11010    # número binario
- 0o666      # número octal
- 0x7A       # número hexadecimal
```


Nulos
-----
Null se puede expresar en NEON usando `null` o no especificando un valor. También se permiten variantes con la primera letra en mayúscula o todas las letras en mayúscula.

```neon
a: null
b:
```


Booleanos
---------
Los valores lógicos se expresan en NEON usando `true` / `false` o `yes` / `no`. También se permiten variantes con la primera letra en mayúscula o todas las letras en mayúscula.

```neon
[true, TRUE, True, false, yes, no]
```


Fecha
-----
NEON utiliza los siguientes formatos para expresar fechas y los convierte automáticamente en objetos `DateTimeImmutable`:

```neon
- 2016-06-03                  # fecha
- 2016-06-03 19:00:00         # fecha y hora
- 2016-06-03 19:00:00.1234    # fecha y microsegundos
- 2016-06-03 19:00:00 +0200   # fecha y hora y zona
- 2016-06-03 19:00:00 +02:00  # fecha y hora y zona
```


Entidades
---------
Una entidad es una estructura que se asemeja a una llamada a función:

```neon
Column(type: int, nulls: yes)
```

En PHP se analiza como un objeto [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Las entidades también se pueden encadenar:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Lo cual se analiza en PHP de esta manera:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

Dentro de los paréntesis se aplican las reglas para la notación en línea utilizada para mapeos y secuencias, por lo que también puede ser multilínea y entonces no es necesario indicar comas:

```neon
Column(
	type: int
	nulls: yes
)
```


Comentarios
-----------
Los comentarios comienzan con el carácter `#` y todos los caracteres siguientes a la derecha son ignorados:

```neon
# esta línea será ignorada por el intérprete
street: 742 Evergreen Terrace
city: Springfield  # esto también se ignora
country: USA
```


Neon versus JSON
================
JSON es un subconjunto de NEON. Por lo tanto, cada JSON se puede analizar como NEON:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

¿Qué pasaría si omitiéramos las comillas?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

¿Y las llaves y las comas?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

¿No son las listas con guiones más legibles?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

¿Añadimos comentarios?

```neon
# mi configuración de aplicación web

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # usar gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

¡Hurra, ahora conoces la sintaxis de NEON!


{{description: NEON es un formato fácil de leer para la serialización de datos. Es similar a YAML. La principal diferencia es que NEON admite "entidades" y podemos usar tanto espacios como tabuladores para la indentación.}}
{{leftbar: utils:@left-menu}}
