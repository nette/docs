Tracy Konfiguration
*******************

Alle Beispiele gehen von einem erstellten Alias aus:

```php
use Tracy\Debugger;
```


Fehlerprotokollierung
---------------------

```php
$logger = Debugger::getLogger();

// E-Mail, an die Benachrichtigungen über aufgetretene Fehler gesendet werden
$logger->email = 'dev@example.com';      // (string|string[]) Standard ist nicht festgelegt

// Absender der E-Mail
$logger->fromEmail = 'me@example.com';   // (string) Standard ist nicht festgelegt

// Routine, die das Senden der E-Mail sicherstellt
$logger->mailer = /* ... */;             // (callable) Standard ist das Senden mit der mail()-Funktion

// nach welcher kürzesten Zeit die nächste E-Mail senden?
$logger->emailSnooze = /* ... */;        // (string) Standard ist '2 days'

// für welche Fehlerebenen wird auch der BlueScreen protokolliert?
Debugger::$logSeverity = E_WARNING | E_NOTICE;  // Standard ist 0 (keine Fehlerebenen)
```


Verhalten von `dump()`
----------------------

```php
// maximale Länge der Zeichenkette
Debugger::$maxLength = 150;              // (int) Standard gemäß Tracy-Version

// maximale Verschachtelungstiefe
Debugger::$maxDepth = 10;                // (int) Standard gemäß Tracy-Version

// Werte dieser Schlüssel ausblenden (ab Tracy 2.8)
Debugger::$keysToHide = ['password', /* ... */];  // (string[]) Standard ist []

// visuelles Thema (ab Tracy 2.8)
Debugger::$dumpTheme = 'dark';           // (light|dark) Standard ist 'light'

// Ort anzeigen, an dem die dump()-Funktion aufgerufen wurde?
Debugger::$showLocation = /* ... */;     // (bool) Standard gemäß Tracy-Version
```


Sonstiges
---------

```php
// im Entwicklungsmodus werden Fehler vom Typ Notice oder Warning als BlueScreen angezeigt
Debugger::$strictMode = /* ... */;       // (bool|int) Standard ist false, es können nur bestimmte Fehlerebenen ausgewählt werden (z.B. E_USER_DEPRECATED | E_DEPRECATED)

// unterdrückte (@) Fehlermeldungen anzeigen?
Debugger::$scream = /* ... */;           // (bool|int) Standard ist false, ab Version 2.9 können nur bestimmte Fehlerebenen ausgewählt werden (z.B. E_USER_DEPRECATED | E_DEPRECATED)

// Linkformat zum Öffnen im Editor
Debugger::$editor = /* ... */;           // (string|null) Standard ist 'editor://open/?file=%file&line=%line'

// Pfad zum Template mit einer benutzerdefinierten Seite für Fehler 500
Debugger::$errorTemplate = /* ... */;    // (string) Standard ist nicht festgelegt

// Tracy Bar anzeigen?
Debugger::$showBar = /* ... */;          // (bool) Standard ist true

Debugger::$editorMapping = [
	// original => neu
	'/var/www/html' => '/data/web',
	'/home/web' => '/srv/html',
];
```


Nette Framework
---------------

Wenn Sie das Nette Framework verwenden, können Sie Tracy konfigurieren und neue Panels zur Tracy Bar auch über die Konfigurationsdatei hinzufügen.
In der Konfiguration können Parameter eingestellt und auch neue Panels zur Tracy Bar hinzugefügt werden. Diese Einstellungen werden erst nach der Erstellung des DI-Containers angewendet, sodass Fehler, die davor auftreten, diese nicht widerspiegeln können.

Konfiguration der Fehlerprotokollierung:

```neon
tracy:
	# E-Mail, an die Benachrichtigungen über aufgetretene Fehler gesendet werden
	email: dev@example.com           # (string|string[]) Standard ist nicht festgelegt

	# Absender der E-Mail
	fromEmail: robot@example.com     # (string) Standard ist nicht festgelegt

	# Verzögerungszeit für den E-Mail-Versand (ab Tracy 2.8.8)
	emailSnooze: ...                 # (string) Standard ist '2 days'

	# Nette Mailer zum Senden von E-Mails verwenden? (ab Tracy 2.5)
	netteMailer: ...                 # (bool) Standard ist true

	# für welche Fehlerebenen wird auch der BlueScreen protokolliert?
	logSeverity: [E_WARNING, E_NOTICE]  # Standard ist []
```

Konfiguration des Verhaltens der `dump()`-Funktion:

```neon
tracy:
	# maximale Länge der Zeichenkette
	maxLength: 150                # (int) Standard gemäß Tracy-Version

	# maximale Verschachtelungstiefe
	maxDepth: 10                  # (int) Standard gemäß Tracy-Version

	# Werte dieser Schlüssel ausblenden (ab Tracy 2.8)
	keysToHide: [password, pass]  # (string[]) Standard ist []

	# visuelles Thema (ab Tracy 2.8)
	dumpTheme: dark               # (light|dark) Standard ist 'light'

	# Ort anzeigen, an dem die dump()-Funktion aufgerufen wurde?
	showLocation: ...             # (bool) Standard gemäß Tracy-Version
```

Installation von Tracy-Erweiterungen:

```neon
tracy:
	# fügt Panels zur Tracy Bar hinzu
	bar:
		- Nette\Bridges\DITracy\ContainerPanel
		- IncludePanel
		- XDebugHelper('myIdeKey')
		- MyPanel(@MyService)

	# fügt Panels zum BlueScreen hinzu
	blueScreen:
		- DoctrinePanel::renderException
```

Andere Optionen:

```neon
tracy:
	# im Entwicklungsmodus werden Fehler vom Typ Notice oder Warning als BlueScreen angezeigt
	strictMode: ...           # Standard ist true

	# unterdrückte (@) Fehlermeldungen anzeigen?
	scream: ...               # Standard ist false

	# Linkformat zum Öffnen im Editor
	editor: ...               # (string) Standard ist 'editor://open/?file=%file&line=%line'

	# Pfad zum Template mit einer benutzerdefinierten Seite für Fehler 500
	errorTemplate: ...        # (string) Standard ist nicht festgelegt

	# Tracy Bar anzeigen?
	showBar: ...              # (bool) Standard ist true

	editorMapping:
		# original: neu
		/var/www/html: /data/web
		/home/web: /srv/html
```

Die Werte der Optionen `logSeverity`, `strictMode` und `scream` können als Array von Fehlerebenen (z.B. `[E_WARNING, E_NOTICE]`) oder als in PHP verwendeter Ausdruck (z.B. `E_ALL & ~E_NOTICE`) geschrieben werden.


DI-Dienste
----------

Diese Dienste werden dem DI-Container hinzugefügt:

| Name           | Typ                        | Beschreibung
|----------------------------------------------------------
| `tracy.logger`  | [api:Tracy\ILogger]        |  Logger
| `tracy.blueScreen` | [api:Tracy\BlueScreen]  |  BlueScreen
| `tracy.bar`     | [api:Tracy\Bar]            |  Tracy Bar
