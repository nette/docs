Framework Configuration
***********************

.[perex]
An overview of all configuration options in Nette Framework.

Nette application is easily configured using [configuration files |bootstrap#Configuration files]. They are usually written in NEON format. Have fun [trying out |https://ne-on.org] the syntax.


Sessions
========

Here you can set all [directives |php:session.configuration] (in camelCase format).

/-- neon
	session:
		autoStart: true  # default is smart
		expiration: 10 days
		name: ...
		...
\--

`autoStart: smart` is recommended. It automatically starts the session only if it already exists.

Read more on [session configuration |sessions#Session configuration].


Application
===========

/--neon
	application:
		debugger: true  # debugger bar panel
		catchExceptions: %productionMode%
		errorPresenter: Front:Error

		# mapping between presenter name and presenter class
		mapping:
			Front: App\*Module\*Presenter
\--


HTTP headers
============

/--neon
	http:
		frames: ...               # header X-Frame-Options

	headers:
		X-Powered-By: MyCMS       # custom HTTP header

    csp:                          # Content Security Policy
        script-src: [
            nonce                 # for browsers that support CSP2
            self, unsafe-inline   # for browsers that support CSP1
        ]
\--

For security reasons Nette Framework sends HTTP header `X-Frame-Options: SAMEORIGIN` by default, so that the page can be embedded in iframe only from pages on the same domain. This behavior may be unwanted in certain situations (for example if you are developing a facebook application). You can override this setting by `frames: yes`, `frames: http://allowed-host.com` or `frames: no`.


HTTP proxies
============

You can define your HTTP proxy, so that HTTP request's remote address and remote host will be correct.

/--neon
	http:
		proxy: 127.0.0.1  # IP address, range, hostname or array of these values
\--


Access Control
==============

By filling in `users` option you create `SimpleAuthenticator`, by defining `roles` or `resources` you create `Nette\Security\Permission` authorizator. More in [User Authorization and Privileges |access-control].

/--neon
	security:
		debugger: true  # debugger bar panel

		users:
			johndoe: secretpassword

		roles:
			guest:
			member:
			admin: [member]  # admin extends member

		resources:
			file:
\--


Mailing
=======

Default mailer is `SendmailMailer`. By setting `smtp` you activate `SmtpMailer`.

/--neon
	mail:
		smtp: true  # use SmtpMailer instead of SendmailMailer
		# optional settings
		host: ...
		port: ...
		username: ...
		password: ...
		secure: # possible values are ssl, tls or null
		timeout: ...
\--


Database
========

You can define multiple database connections, if you do so you can set which one will be [automatically injected |di-configuration#autowiring] to your services by the `autowired` option. The following code shows how to set up one connection called `default`.

/--neon
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false  # debugger bar panel
			explain: false   # explain queries in debugger bar
			reflection: discovered  # or static or classname, default is discovered
			autowired: true
\--

This creates service `@nette.database.default` and sets reflection and cache for you.


Forms
=====

You can change default validation error messages.

/--neon
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
\--


Latte
=====

You can turn on and off XHTML rendering mode and register custom macros. Custom macros may be passed either as a class name or as a service reference. The default called method is `install`, you may change it by appending a double colon and a custom method name.

/--neon
	latte:
		xhtml: yes  # default is no
		macros:
			- App\MyLatteMacros::register  # static method, classname or callable
			- @App\MyLatteMacrosFactory    # service with install method
			- @App\MyLatteMacrosFactory::register # service with register method

	services:
		- App\MyLatteMacrosFactory
\--


DI container
============

/--neon
	di:
		debugger: false  # disables DI panel
\--


Tracy debugger
==============

/--neon
	tracy:
		email: webmaster@example.com  # for sending error logs
		strictMode: true
		editor: ...
		browser: ...

		bar:  # debugger bar panels
			- Nette\Bridges\DITracy\ContainerPanel  # alias of DI container bar
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)

		blueScreen:  # blue screen panels
			- DoctrinePanel::renderException
\--


Low-level modifications
=======================

All these settings affect the contents of the DI container and the system services it creates. All these services can still be changed to a low-level. For instance, we can change class of service `application.application`, which is by default `Nette\Application\Application`:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
\--

The `alteration 'flag is informative and says we only modify an existing service.

We can also add setup:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
		setup:
			- $onStartup = [@resource::init]
\--



Services
========

The configuration file is place where we add definitions of our own services in section `services`. See the [DI: Services Configuration |di-configuration] chapter for a detailed description.

For example, this is definition of service named `database` which is `PDO` instance:

/--neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
\--
