Помощни класове
***************


DomQuery
--------
`Tester\DomQuery` е клас, разширяващ `SimpleXMLElement` с лесно търсене в HTML или XML с помощта на CSS селектори.

```php
# създаване на DomQuery от HTML низ
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# тест за съществуване на елементи с помощта на CSS селектори
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# намиране на елементи като масив от DomQuery обекти
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# тест дали елементът отговаря на селектора (от версия 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# намиране на най-близкия предшественик, отговарящ на селектора (от 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock
--------
`Tester\FileMock` емулира файлове в паметта и така улеснява тестването на код, който използва функции `fopen()`, `file_get_contents()`, `parse_ini_file()` и подобни. Пример за употреба:

```php
# Тестван клас
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Нов празен файл
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Тестваме създаденото съдържание
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Не е assertion, а помощник за тестване на частни методи и свойства на обекти.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // достъпно частно $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Методът `purge()` създава зададената директория и ако вече съществува, изтрива цялото й съдържание. Полезен е за създаване на временна директория. Например в `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - директорията вече може да съществува

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Тестовете се стартират паралелно. Понякога обаче се нуждаем изпълнението на тестовете да не се припокрива. Типично при тестове на бази данни е необходимо тестът да подготви съдържанието на базата данни и друг тест да не я докосва по време на изпълнението му. В тези тестове използваме `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Първият параметър е името на заключването, вторият е пътят до директорията за съхранение на заключването. Тестът, който получи заключването първи, ще се изпълни, останалите тестове трябва да изчакат неговото завършване.


Environment::bypassFinals() .[filter]
-------------------------------------
Класове или методи, означени като `final`, се тестват трудно. Извикването на `Tester\Environment::bypassFinals()` в началото на теста кара ключовите думи `final` да бъдат пропуснати по време на зареждане на кода.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass вече не е final
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- подобрява четимостта на извеждането на грешки (включително оцветяване), иначе се изписва стандартният PHP stack trace
- включва проверка дали в теста са извикани assertion-и, иначе тест без assertion-и (например забравени) също ще премине
- при използване на `--coverage` стартира автоматично събиране на информация за изпълнения код (описано по-нататък)
- изписва състояние OK или FAILURE в края на скрипта


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Създава глобални функции `test()`, `testException()`, `setUp()` и `tearDown()`, в които можете да структурирате тестовете.

```php
test('описание на теста', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Позволява да се установи дали тестът е стартиран директно, или чрез Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# стартирано от Tester
} else {
	# стартирано по друг начин
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester стартира тестовете паралелно в зададения брой нишки. Ако ни интересува номерът на нишката, ще го установим от променливата на средата:

```php
echo "Изпълнявам се в нишка номер " . getenv(Tester\Environment::VariableThread);
```
