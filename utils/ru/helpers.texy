Вспомогательные функции
***********************

.[perex]
[api:Nette\Utils\Helpers] — это статический класс с полезными функциями.


Установка:

```shell
composer require nette/utils
```

Все примеры предполагают созданный псевдоним (alias):

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Выполняет callback и возвращает захваченный вывод в виде строки.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Ограничивает значение заданным включительным диапазоном min и max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Сравнивает два значения так же, как это делает PHP. Различает операторы `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
Функция полезна в ситуациях, когда оператор является переменной.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Преобразует `false` в `null`, другие значения не изменяет.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Возвращает последнюю ошибку в PHP или пустую строку, если ошибки не произошло. В отличие от `error_get_last()`, не подвержен влиянию директивы PHP `html_errors` и всегда возвращает текст, а не HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Из предложенных вариантов `$possibilities` ищет строку, которая наиболее похожа на `$value`, но не совпадает с ней. Поддерживает только 8-битную кодировку.

Подходит в случае, если определенный вариант недействителен, и мы хотим посоветовать пользователю похожий (но другой, поэтому одинаковая строка игнорируется). Таким образом Nette формирует сообщения `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', не 'baz'
```
