Dosya Sistemi İşlevleri
***********************

.[perex]
[api:Nette\Utils\FileSystem] bir dosya sistemi ile çalışmak için yararlı işlevler içeren duruk bir sınıftır. Yerel PHP işlevlerine göre bir avantajı, hata durumunda istisnalar atmasıdır.


Kurulum:

```shell
composer require nette/utils
```

Aşağıdaki örneklerde, aşağıdaki sınıf takma adının tanımlandığı varsayılmaktadır:

```php
use Nette\Utils\FileSystem;
```


Manipülasyon .[#toc-manipulation]
=================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Bir dosyayı veya tüm dizini kopyalar. Varsayılan olarak mevcut dosya ve dizinlerin üzerine yazar. `$overwrite` öğesi `false` olarak ayarlanmışsa ve bir `$target` zaten mevcutsa, bir `Nette\InvalidStateException` istisnası atar. Hata oluştuğunda `Nette\IOException` istisnası atar.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Üst dizinler de dahil olmak üzere, mevcut değilse bir dizin oluşturur. Hata oluştuğunda `Nette\IOException` şeklinde bir istisna atar.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Bir dosyayı veya varsa bir dizinin tamamını siler. Dizin boş değilse, önce içeriğini siler. Hata oluştuğunda `Nette\IOException` şeklinde bir istisna atar.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Dosya izinlerini `$fileMode` veya dizin izinlerini `$dirMode` olarak ayarlar. Özyinelemeli olarak dizinin tüm içeriğini dolaşır ve izinleri de ayarlar.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Dosya açar ve kaynak döndürür. `$mode` parametresi, yerel `fopen()`:https://www.php.net/manual/en/function.fopen.php işleviyle aynı şekilde çalışır. Bir hata oluşursa, `Nette\IOException` istisnasını yükseltir.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Bir `$file` içeriğini okur. Hata oluştuğunda `Nette\IOException` istisnası atar.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Dosya içeriğini satır satır okur. Yerel `file()` işlevinden farklı olarak, dosyanın tamamını belleğe okumaz, ancak mevcut bellekten daha büyük dosyaların okunabilmesi için sürekli olarak okur. `$stripNewLines` , `\r` ve `\n` satır sonu karakterlerinin çıkarılıp çıkarılmayacağını belirtir.
Hata durumunda, bir `Nette\IOException` istisnası yükseltir.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

 `$origin` tarafından belirtilen bir dosyayı veya dizini `$target` adresine yeniden adlandırır veya taşır. Varsayılan olarak mevcut dosya ve dizinlerin üzerine yazar. `$overwrite` öğesi `false` olarak ayarlanmışsa ve `$target` zaten mevcutsa, bir `Nette\InvalidStateException` istisnası atar. Hata oluştuğunda `Nette\IOException` istisnası atar.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

 `$content` adresini bir `$file` adresine yazar. Hata oluştuğunda bir `Nette\IOException` istisnası atar.

```php
FileSystem::write('/path/to/file', $content);
```


Yollar .[#toc-paths]
====================


isAbsolute(string $path): bool .[method]
----------------------------------------

 `$path` adresinin mutlak olup olmadığını belirler.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Yolun tüm segmentlerini birleştirir ve sonucu normalleştirir.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
 `..` ve `.` adreslerini ve yol içindeki dizin ayırıcılarını normalleştirir.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Eğik çizgileri Unix sistemlerinde kullanılan `/` adresine dönüştürür.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Eğik çizgileri geçerli platforma özgü karakterlere dönüştürür, yani Windows'ta `\` ve başka yerlerde `/`.

```php
$path = FileSystem::platformSlashes($path);
```
