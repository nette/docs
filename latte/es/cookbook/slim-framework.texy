Uso de Latte con Slim 4
***********************

.[perex]
Este artículo, cuyo autor es "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, describe el uso de Latte con Slim Framework.

Primero, "instalar Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html y luego Latte usando Composer:

```shell
composer require latte/latte
```


Configuración
-------------

En el directorio raíz del proyecto, cree un nuevo directorio `templates`. Todas las plantillas se ubicarán allí más tarde.

En el archivo `config/defaults.php`, agregue una nueva clave de configuración `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte compila las plantillas en código PHP nativo y las almacena en caché en el disco. Por lo tanto, son tan rápidas como si estuvieran escritas en lenguaje PHP nativo.

En el archivo `config/defaults.php`, agregue una nueva clave de configuración `template_temp`: Asegúrese de que el directorio `{project}/tmp/templates` exista y tenga permisos de lectura y escritura.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte regenera automáticamente la caché cada vez que se cambia la plantilla, lo que se puede desactivar en el entorno de producción para ahorrar un poco de rendimiento:

```php
// en entorno de producción cambiar a false
$settings['template_auto_refresh'] = true;
```

A continuación, agregue la definición del contenedor DI para la clase `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

La renderización de la plantilla Latte en sí funcionaría técnicamente, pero también debemos asegurarnos de que funcione con el objeto de respuesta PSR-7.

Para ello, crearemos una clase especial `TemplateRenderer` que hará este trabajo por nosotros.

A continuación, cree el archivo `src/Renderer/TemplateRenderer.php` y copie/pegue este código:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Uso
---

En lugar de usar directamente el objeto Latte Engine, usaremos el objeto `TemplateRenderer` para renderizar la plantilla en un objeto compatible con PSR-7.

Una clase típica de manejador de acciones puede verse así: Renderiza la plantilla llamada `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Para que esto funcione, cree el archivo de plantilla en `templates/home.latte` con este contenido:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Si todo está configurado correctamente, debería mostrarse la siguiente salida:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
