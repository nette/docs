Cum să contribuiți la cod
*************************

.[perex]
Vă pregătiți să contribuiți la Nette Framework și aveți nevoie să vă orientați în reguli și proceduri? Acest ghid pentru începători vă va arăta pas cu pas cum să contribuiți eficient la cod, să lucrați cu repository-uri și să implementați modificări.


Procedura
=========

Pentru a contribui la cod este necesar să aveți un cont pe [GitHub |https://github.com] și să fiți familiarizat cu elementele de bază ale lucrului cu sistemul de versionare Git. Dacă nu stăpâniți lucrul cu Git, puteți consulta ghidul [git - the simple guide |https://rogerdudler.github.io/git-guide/] și eventual să utilizați unul dintre multele [clienți grafici |https://git-scm.com/downloads/guis].


Pregătirea mediului și a repository-ului
----------------------------------------

1) pe GitHub creați un [fork |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] al repository-ului [pachetului |www:packages], pe care urmează să-l modificați
2) [clonați |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] acest repository pe computerul dvs.
3) instalați dependențele, inclusiv [Nette Tester |tester:], folosind comanda `composer install`
4) verificați dacă testele funcționează, rulând `composer tester`
5) creați o [nouă ramură |#Nová větev] bazată pe ultima versiune lansată


Implementarea propriilor modificări
-----------------------------------

Acum puteți efectua propriile modificări de cod:

1) programați modificările dorite și nu uitați de teste
2) asigurați-vă că testele rulează cu succes, folosind `composer tester`
3) verificați dacă codul respectă [standardul de codificare |#Coding Standards]
4) salvați modificările (commit) cu o descriere în [acest format |#Popis komitu]

Puteți crea mai multe commit-uri, unul pentru fiecare pas logic. Fiecare commit ar trebui să aibă sens de sine stătător.


Trimiterea modificărilor
------------------------

Odată ce sunteți mulțumit de modificări, le puteți trimite:

1) trimiteți (push) modificările pe GitHub în fork-ul dvs.
2) de acolo le trimiteți către repository-ul Nette creând un [pull request |https://help.github.com/articles/creating-a-pull-request] (PR)
3) furnizați în descriere [suficiente informații |#popis pull requestu]


Incorporarea comentariilor
--------------------------

Commit-urile dvs. vor fi acum vizibile și pentru alții. Este obișnuit să primiți comentarii cu observații:

1) urmăriți modificările propuse
2) încorporați-le ca noi commit-uri sau [combinați-le cu cele anterioare |https://help.github.com/en/github/using-git/about-git-rebase]
3) retrimiteți commit-urile pe GitHub și acestea vor apărea automat în pull request

Nu creați niciodată un nou pull request pentru a modifica unul existent.


Documentație
------------

Dacă ați modificat funcționalitatea sau ați adăugat una nouă, nu uitați să o [adăugați și în documentație |documentation].


Ramură nouă
===========

Dacă este posibil, efectuați modificările față de ultima versiune lansată, adică ultimul tag din ramura respectivă. Pentru tag-ul `v3.2.1` creați o ramură cu această comandă:

```shell
git checkout -b new_branch_name v3.2.1
```


Standarde de codificare
=======================

Codul dvs. trebuie să respecte [standardul de codificare |coding standard] utilizat în Nette Framework. Pentru verificarea și corectarea codului este disponibil un instrument automat. Acesta poate fi instalat prin Composer **global** în directorul ales de dvs.:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Acum ar trebui să puteți rula instrumentul în terminal. Prima comandă verifică și a doua corectează codul din directoarele `src` și `tests` din directorul curent:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Descrierea commit-ului
======================

În Nette, subiectele commit-urilor au formatul: `Presenter: fixed AJAX detection [Closes #69]`

- zona urmată de două puncte
- scopul commit-ului la timpul trecut, dacă este posibil, începeți cu cuvântul: "added .(proprietate nouă adăugată)", "fixed .(corecție)", "refactored .(modificare în cod fără schimbarea comportamentului)", changed, removed
- dacă commit-ul întrerupe compatibilitatea inversă, adăugați "BC break"
- eventuală legătură cu issue tracker-ul precum `(#123)` sau `[Closes #69]`
- după subiect poate urma o linie goală și apoi o descriere mai detaliată, inclusiv, de exemplu, linkuri către forum


Descrierea pull request-ului
============================

La crearea unui pull request, interfața GitHub vă permite să introduceți un titlu și o descriere. Furnizați un titlu descriptiv și în descriere oferiți cât mai multe informații despre motivele modificării dvs.

Se va afișa și un antet, unde specificați dacă este vorba despre o nouă funcție sau o corecție de eroare și dacă poate apărea o întrerupere a compatibilității inverse (BC break). Dacă există o problemă (issue) asociată, faceți referire la ea, astfel încât să fie închisă după aprobarea pull request-ului.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
