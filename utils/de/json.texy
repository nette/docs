Arbeiten mit JSON
*****************

.[perex]
[api:Nette\Utils\Json] ist eine statische Klasse mit Funktionen zum Kodieren und Dekodieren des JSON-Formats. Sie behandelt Schwachstellen verschiedener PHP-Versionen und wirft Ausnahmen bei Fehlern.


Installation:

```shell
composer require nette/utils
```

Alle Beispiele setzen voraus, dass ein Alias erstellt wurde:

```php
use Nette\Utils\Json;
```


Verwendung
==========


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Konvertiert `$value` in das JSON-Format.

Bei Einstellung `$pretty` formatiert es JSON für leichtere Lesbarkeit und Übersichtlichkeit:

```php
Json::encode($value); // gibt JSON zurück
Json::encode($value, pretty: true); // gibt übersichtlicheres JSON zurück
```

Bei `$asciiSafe` wird die Ausgabe in ASCII generiert, d.h. Unicode-Zeichen werden durch `\uxxxx`-Sequenzen ersetzt:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Der Parameter `$htmlSafe` stellt sicher, dass die Ausgabe keine Zeichen enthält, die in HTML eine besondere Bedeutung haben:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Mit `$forceObjects` werden auch Arrays mit numerischen Schlüsseln als JavaScript-Objekte kodiert:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Bei einem Fehler wird eine Ausnahme `Nette\Utils\JsonException` geworfen.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Behandlung der Ausnahme
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parst JSON in PHP.

Die Einstellung `$forceArray` erzwingt die Rückgabe von Arrays anstelle von Objekten:

```php
Json::decode('{"variable": true}'); // gibt ein Objekt vom Typ stdClass zurück
Json::decode('{"variable": true}', forceArrays: true); // gibt ein Array zurück
```

Bei einem Fehler wird eine Ausnahme `Nette\Utils\JsonException` geworfen.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Behandlung der Ausnahme
}
```


Wie sendet man JSON aus einem Presenter?
========================================

Dazu kann die Methode `$this->sendJson($data)` verwendet werden, die wir z.B. in der Methode `action*()` aufrufen können, siehe [Senden der Antwort|application:presenters#Odeslání odpovědi].
