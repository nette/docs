Multiplier: componentes dinámicos
*********************************

Herramienta para la creación dinámica de componentes interactivos .[perex]

Partamos de un ejemplo típico: tenemos una lista de productos en una tienda online, y para cada uno queremos mostrar un formulario para añadir el producto al carrito. Una de las posibles variantes es envolver todo el listado en un único formulario. Sin embargo, un método mucho más cómodo nos lo ofrece [api:Nette\Application\UI\Multiplier].

Multiplier permite definir cómodamente una pequeña fábrica para múltiples componentes. Funciona según el principio de componentes anidados: cada componente que hereda de [api:Nette\ComponentModel\Container] puede contener otros componentes.

Vea el capítulo sobre el [modelo de componentes|components#komponenty-do-hloubky] en la documentación o la [charla de Honza Tvrdík|https://www.youtube.com/watch?v=8y3LLexWu-I]. .[tip]

La esencia de Multiplier es que actúa en la posición de padre, que puede crear dinámicamente a sus descendientes mediante un callback pasado en el constructor. Vea el ejemplo:

```php
protected function createComponentShopForm(): Multiplier
{
	return new Multiplier(function () {
		$form = new Nette\Application\UI\Form;
		$form->addInteger('count', 'Cantidad de productos:')
			->setRequired();
		$form->addSubmit('send', 'Añadir al carrito');
		return $form;
	});
}
```

Ahora podemos simplemente, en la plantilla, hacer que se renderice un formulario para cada producto, y cada uno será realmente un componente único.

```latte
{foreach $items as $item}
	<h2>{$item->title}</h2>
	{$item->description}

	{control "shopForm-$item->id"}
{/foreach}
```

El argumento pasado en la etiqueta `{control}` está en un formato que dice:

1. obtén el componente `shopForm`
2. y de él obtén el descendiente `$item->id`

En la primera llamada al punto **1.** `shopForm` aún no existe, por lo que se llama a su fábrica `createComponentShopForm`. Sobre el componente obtenido (instancia de Multiplier) se llama entonces a la fábrica del formulario concreto, que es la función anónima que le pasamos a Multiplier en el constructor.

En la siguiente iteración del foreach, el método `createComponentShopForm` ya no será llamado (el componente existe), pero como buscamos a su otro descendiente (`$item->id` será diferente en cada iteración), se volverá a llamar a la función anónima y nos devolverá un nuevo formulario.

Lo único que queda es asegurar que el formulario nos añada al carrito realmente el producto que debe; actualmente, el formulario es completamente idéntico para cada producto. Nos ayudará una propiedad de Multiplier (y en general de cada fábrica de componentes en Nette Framework), y es que cada fábrica recibe como primer argumento el nombre del componente que se está creando. En nuestro caso, será `$item->id`, que es exactamente el dato que necesitamos. Basta con modificar ligeramente la creación del formulario:

```php
protected function createComponentShopForm(): Multiplier
{
	return new Multiplier(function ($itemId) {
		$form = new Nette\Application\UI\Form;
		$form->addInteger('count', 'Cantidad de productos:')
			->setRequired();
		$form->addHidden('itemId', $itemId);
		$form->addSubmit('send', 'Añadir al carrito');
		return $form;
	});
}
```
