Bootstrap
*********

<div class=perex>

Bootstrap is boot code that initializes the environment, creates a Dependency Injection (DI) container, and starts the application. Let's say:

- how to configure your application using NEON files
- how to handle production and development modes
- how to create the DI container

</div>


The [api:Nette\Configurator] class will help us set up the environment and create a Dependency Injection (DI) container. We use it in the user class `Bootstrap` located in the `app/Bootstrap.php` file. For example, it might look like this:

```php
use Nette\Configurator;

class Bootstrap
{
	public static function boot(): Configurator
	{
		$configurator = new Configurator;
		//$configurator->setDebugMode('secret@23.75.345.200');
		$configurator->enableTracy(__DIR__ . '/../log');
		$configurator->setTempDirectory(__DIR__ . '/../temp');
		$configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
		$configurator->addConfig(__DIR__ . '/config/common.neon');
		return $configurator;
	}
}
```


Development Mode
================

If the application is running on *localhost*, the developement mode is automatically activated. Otherwise it runs in production mode. Therefore, there is usually no need to configure or switch manually between development and production modes.

If you want to enable developement mode in other cases, for example, for programmers accessing from a specific IP address, you can use `setDebugMode()`:

```php
$configurator->setDebugMode('23.75.345.200'); // one or more IP addresses
```

We definitely recommend combining an IP address with a cookie. We will store a secret token into the `nette-debug' cookie, e.g. `secret1234`, and the development mode will be activated for programmers with this combination of IP and cookie.

```php
$configurator->setDebugMode('secret1234@23.75.345.200');
```

We can also turn off developer mode completely, even for localhost:

```php
$configurator->setDebugMode(false);
```


Debugging Tool Tracy
====================

For easy debugging, we will turn on the great tool [Tracy |tracy:]. In developer mode it visualizes errors and in production mode it logs errors to the specified directory:

```php
$configurator->enableTracy(__DIR__ . '/../log');
```


Caching
=======

Nette uses the cache for DI container, RobotLoader, templates, etc. Therefore it is necessary to set the path to the directory where the cache will be stored:

```php
$configurator->setTempDirectory(__DIR__ . '/../temp');
```


RobotLoader
===========

Usually, we will want to automatically load the classes using [RobotLoader |robotloader], so we have to start it up and let it load classes from the directory where `Bootstrap.php` is located (i.e. `__DIR__`) and all its subdirectories:

```php
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

An alternative way is to only use [Composer |composer] PSR-4 autoloading.


Timezone
========

Configurator allows you to specify a timezone for your application.

```php
$configurator->setTimeZone('Europe/Prague');
```


DI Container Configuration
==========================

Part of the boot process is the creation of a DI container, which is the heart of the entire application. It is configured primarily using configuration files that are written in the [NEON |https://ne-on.org] format. In a separate chapter, you can read [everything about configuration |configuring].

.[tip]
In the development mode, the container is automatically updated each time you change the code or configuration files. In production mode, it is generated only once and file changes are not checked to maximize performance.

We load the configuration files using `addConfig()`:

```php
$configurator->addConfig(__DIR__ . '/config/common.neon');
```

The method `addConfig()` can be called multiple times to add multiple files.

```php
$configurator->addConfig(__DIR__ . '/config/common.neon');
$configurator->addConfig(__DIR__ . '/config/local.neon');
if (PHP_SAPI === 'cli') {
	$configurator->addConfig(__DIR__ . '/config/cli.neon');
}
```

Alternatively, we can use the `includes` section to load more configuration files.

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

If items with the same keys appear within configuration files, they will be [overwritten or merged |di-services#Multiple configuration files] in the case of arrays. Each subsequent file has a higher priority in merging. The file containing the `includes` section has a higher priority than the included files.


Static Parameters
-----------------

Parameters can be passed to the DI container by the `addParameters()` method; their values must be known at compile time. The container is always generated for the different values of these parameters.

```php
$configurator->addParameters([
	'foo' => 'bar',
	'baz' => 123,
]);
```

In configuration files, we can write `%foo%` to access the parameter named `foo`. By default, the Configurator populates the following parameters: `appDir`, `wwwDir`, `tempDir`, `debugMode` and `consoleMode`.


Dynamic Parameters
------------------

We can also feed dynamic parameters to the DI container. Their values needn't be known at compile time: they are used at run time. Different values don't regenerate the container.

```php
$configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

Environment variables could be easily made available using dynamic parameters. We can access them via `%env.variable%` in configuration files.

```php
$configurator->addDynamicParameters([
	'env' => $_ENV,
]);
```


External Services
-----------------

We can insert an instance of a class into the DI container directly before the DI container creates it for us. The service must be defined with the `imported: true` attribute.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Create a new instance and insert it in bootstrap:

```php
$configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Creating a Container and index.php
==================================

The method `createContainer()` generates the container class and returns its instance:

```php
$container = $configurator->createContainer();
```

If we are creating a web application, all requests come via the PHP file `index.php`, which is located in the public directory `www/`. It lets the `Bootstrap` class to initialize the environment and return the `$configurator` which creates DI container. Then it obtains the `Application` service, that runs the web application:

```php
// initialize the environment + get Nette\Configurator object
$configurator = App\Bootstrap::boot();
// create a DI container
$container = $configurator->createContainer();
// DI container creates a Nette\Application\Application object
$application = $container->getByType(Nette\Application\Application::class);
// start Nette application
$application->run();
```


{{composer: nette/bootstrap}}
