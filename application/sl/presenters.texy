Predavatelji
************
<div class=perex>


Naučili se bomo pisati predstavnike in predloge v Nette. Po branju boste vedeli:

- kako deluje predstavnik
- kaj so trajni parametri
- kako izrisati predlogo

</div>

[Vemo že, |how-it-works#nette-application] da je predstavnik razred, ki predstavlja določeno stran spletne aplikacije, na primer domačo stran, izdelek v e-trgovini, obrazec za prijavo, vir zemljevida spletne strani itd. Aplikacija ima lahko od enega do več tisoč predstavnikov. V drugih ogrodjih so znani tudi kot krmilniki.

Običajno se izraz presenter nanaša na potomca razreda [api:Nette\Application\UI\Presenter], ki je primeren za spletne vmesnike in ga bomo obravnavali v nadaljevanju tega poglavja. V splošnem smislu je predstavnik vsak objekt, ki implementira vmesnik [api:Nette\Application\IPresenter].


Življenjski cikel predstavnika .[#toc-life-cycle-of-presenter]
==============================================================

Naloga predstavnika je obdelati zahtevo in vrniti odgovor (ki je lahko stran HTML, slika, preusmeritev itd.).

Na začetku je torej zahteva. To ni neposredno zahteva HTTP, temveč predmet [api:Nette\Application\Request], v katerega je bila zahteva HTTP pretvorjena s pomočjo usmerjevalnika. S tem objektom običajno ne pridemo v stik, saj predstavnik obdelavo zahteve spretno prenese na posebne metode, ki si jih bomo zdaj ogledali.

[* lifecycle.svg *] ***Življenjski cikel predstavnika* .<>

Na sliki je prikazan seznam metod, ki se kličejo zaporedno od zgoraj navzdol, če obstajajo. Nobeni od njih ni treba obstajati, lahko imamo popolnoma prazen predstavnik brez ene same metode in na njem zgradimo preprost statični splet.


`__construct()`
---------------

Konstruktor ne sodi ravno v življenjski cikel predstavnika, saj se pokliče v trenutku ustvarjanja predmeta. Vendar ga omenjamo zaradi njegove pomembnosti. Konstruktor (skupaj z [metodo inject |best-practices:inject-method-attribute]) se uporablja za posredovanje odvisnosti.

Predstavnik ne sme skrbeti za poslovno logiko aplikacije, pisati in brati iz podatkovne zbirke, izvajati izračunov itd. To je naloga za razrede iz plasti, ki jo imenujemo model. Na primer, razred `ArticleRepository` je lahko odgovoren za nalaganje in shranjevanje člankov. Da bi ga lahko predstavnik uporabljal, ga [posredujemo z uporabo vbrizgavanja odvisnosti |dependency-injection:passing-dependencies]:


```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private ArticleRepository $articles,
	) {
	}
}
```


`startup()`
-----------

Takoj po prejemu zahteve se sproži metoda `startup ()`. Uporabite jo lahko za inicializacijo lastnosti, preverjanje uporabniških pravic itd. Vedno je treba poklicati prednika `parent::startup()`.


`action<Action>(args...)` .{toc: action<Action>()}
--------------------------------------------------

Podobno kot pri metodi `render<View>()`. Medtem ko `render<View>()` je namenjena pripravi podatkov za določeno predlogo, ki se nato izriše, v `action<Action>()` se zahteva obdela brez naknadnega upodabljanja predloge. Tako se na primer obdelajo podatki, uporabnik se prijavi ali odjavi in podobno, nato pa [se preusmeri drugam |#Redirection].

Pomembno je, da `action<Action>()` se pokliče pred `render<View>()`, tako da lahko znotraj njega morebiti spremenimo naslednji potek življenjskega cikla, tj. spremenimo predlogo, ki se bo izrisala, in tudi metodo `render<View>()` ki bo poklicana, z uporabo `setView('otherView')`.

Parametri iz zahteve se posredujejo metodi. Za parametre je mogoče in priporočljivo določiti tipe, npr. `actionShow(int $id, string $slug = null)` - če parameter `id` manjka ali če ni celo število, predstavnik vrne [napako 404 |#Error 404 etc.] in zaključi operacijo.


`handle<Signal>(args...)` .{toc: handle<Signal>()}
--------------------------------------------------

Ta metoda obdeluje tako imenovane signale, ki jih bomo obravnavali v poglavju o [komponentah |components#Signal]. Namenjena je predvsem komponentam in obdelavi zahtevkov AJAX.

Metodi se posredujejo parametri, tako kot v primeru `action<Action>()`, vključno s preverjanjem tipa.


`beforeRender()`
----------------

Metoda `beforeRender`, kot pove že ime, se pokliče pred vsako metodo `render<View>()`. Uporablja se za skupno konfiguracijo predloge, posredovanje spremenljivk za postavitev in tako naprej.


`render<View>(args...)` .{toc: render<View>()}
----------------------------------------------

Mesto, kjer pripravimo predlogo za nadaljnje upodabljanje, ji posredujemo podatke itd.

Parametri se posredujejo metodi, kot v primeru `action<Action>()`, vključno s preverjanjem tipa.

```php
public function renderShow(int $id): void
{
	// pridobimo podatke iz modela in jih posredujemo predlogi
	$this->template->article = $this->articles->getById($id);
}
```


`afterRender()`
---------------

Metoda `afterRender`, kot je razvidno iz imena, se pokliče po vsakem `render<View>()` metodi. Uporablja se precej redko.


`shutdown()`
------------

Pokliče se na koncu življenjskega cikla predstavnika.


**Dober nasvet, preden se premaknemo naprej**. Kot lahko vidite, lahko predstavnik obdeluje več akcij/ogledov, tj. ima več metod `render<View>()`. Vendar priporočamo, da predstavnike oblikujete z enim dejanjem ali čim manjšim številom dejanj.


Pošiljanje odziva .[#toc-sending-a-response]
============================================

Odziv predstavnika je običajno [prikaz predloge s stranjo HTML |templates], lahko pa je tudi pošiljanje datoteke, JSON ali celo preusmeritev na drugo stran.

Kadar koli med življenjskim ciklom lahko uporabite katero koli od naslednjih metod za pošiljanje odziva in hkratni izhod iz predstavitvenega programa:

- `redirect()`, `redirectPermanent()`, `redirectUrl()` in `forward()` [preusmeritve |#Redirection]
- `error()` [zaradi napake |#Error 404 etc.] zaključi predstavitveni program
- `sendJson($data)` zapusti predstavitveno orodje in [pošlje podatke |#Sending JSON] v obliki JSON
- `sendTemplate()` zapusti predstavitveno orodje in takoj [izriše predlogo |templates].
- `sendResponse($response)` zaključi predstavitev in pošlje [lasten odgovor |#Responses]
- `terminate()` brez odgovora zapusti predstavitveni program

Če ne pokličete nobene od teh metod, bo predstavitveni program samodejno nadaljeval z upodabljanjem predloge. Zakaj? No, ker v 99 % primerov želimo izrisati predlogo, zato predstavnik to obnašanje vzame kot privzeto in nam želi olajšati delo.


Ustvarjanje povezav .[#toc-creating-links]
==========================================

Presenter ima metodo `link()`, ki se uporablja za ustvarjanje povezav URL do drugih presenterjev. Prvi parameter je ciljni predstavnik in dejanje, sledijo pa mu argumenti, ki so lahko posredovani kot polje:

```php
$url = $this->link('Product:show', $id);

$url = $this->link('Product:show', [$id, 'lang' => 'en']);
```

V predlogi ustvarimo povezave do drugih predstavnikov in akcij na naslednji način:

```latte
<a n:href="Product:show $id">product detail</a>
```

Preprosto zapišite znani par `Presenter:action` namesto pravega URL in vključite vse parametre. Trik je `n:href`, ki pove, da bo ta atribut obdelal Latte in ustvaril pravi URL. V programu Nette vam sploh ni treba razmišljati o naslovih URL, temveč le o predstavnikih in akcijah.

Za več informacij glejte [Ustvarjanje povezav |Creating Links].


Preusmeritev .[#toc-redirection]
================================

Metodi `redirect()` in `forward()` se uporabljata za preskok na drug predvajalnik in imata zelo podobno sintakso kot metoda [link() |#Creating Links].

Metoda `forward()` takoj preklopi na novi predstavnik brez preusmeritve HTTP:

```php
$this->forward('Product:show');
```

Primer začasne preusmeritve s kodo HTTP 302 ali 303:

```php
$this->redirect('Product:show', $id);
```

Za trajno preusmeritev s kodo HTTP 301 uporabite:

```php
$this->redirectPermanent('Product:show', $id);
```

Z metodo `redirectUrl()` lahko preusmerite na drug URL zunaj aplikacije:

```php
$this->redirectUrl('https://nette.org');
```

Preusmeritev nemudoma prekine življenjski cikel predvajalnika, tako da vrže tako imenovano izjemo tihega zaključka `Nette\Application\AbortException`.

Pred preusmeritvijo je mogoče poslati [bliskovito sporočilo |#Flash Messages], sporočila, ki bodo prikazana v predlogi po preusmeritvi.


Bliskovita sporočila .[#toc-flash-messages]
===========================================

To so sporočila, ki običajno obveščajo o rezultatu operacije. Pomembna lastnost bliskovitih sporočil je, da so v predlogi na voljo tudi po preusmeritvi. Tudi po prikazu bodo ostala živa še 30 sekund - na primer, če bi uporabnik nenamerno osvežil stran - sporočilo se ne bo izgubilo.

Samo pokličite metodo [flashMessage() |api:Nette\Application\UI\Control::flashMessage()] in presenter bo poskrbel za posredovanje sporočila predlogi. Prvi argument je besedilo sporočila, drugi neobvezni argument pa je njegova vrsta (napaka, opozorilo, informacija itd.). Metoda `flashMessage()` vrne primerek sporočila flash, da lahko dodamo več informacij.

```php
$this->flashMessage('Item was removed.');
$this->redirect(/* ... */);
```

V predlogi so ta sporočila na voljo v spremenljivki `$flashes` kot objekti `stdClass`, ki vsebujejo lastnosti `message` (besedilo sporočila), `type` (vrsta sporočila) in lahko vsebujejo že omenjene podatke o uporabniku. Narišemo jih na naslednji način:

```latte
{foreach $flashes as $flash}
	<div class="flash {$flash->type}">{$flash->message}</div>
{/foreach}
```


Napaka 404 itd. .[#toc-error-404-etc]
=====================================

Kadar ne moremo izpolniti zahteve, ker na primer članek, ki ga želimo prikazati, ne obstaja v zbirki podatkov, bomo z metodo `error(string $message = null, int $httpCode = 404)`, ki predstavlja napako HTTP 404, vrgli napako 404:

```php
public function renderShow(int $id): void
{
	$article = $this->articles->getById($id);
	if (!$article) {
		$this->error();
	}
	// ...
}
```

Koda napake HTTP se lahko posreduje kot drugi parameter, privzeta vrednost je 404. Metoda deluje tako, da vrže izjemo `Nette\Application\BadRequestException`, nakar `Application` preda nadzor predstavniku napake. To je predstavnik, katerega naloga je prikazati stran, ki obvešča o napaki.
Predvajalnik napak je nastavljen v [konfiguraciji aplikacije |configuration].


Pošiljanje JSON .[#toc-sending-json]
====================================

Primer akcijske metode, ki pošlje podatke v obliki JSON in zaključi predstavitev:

```php
public function actionData(): void
{
	$data = ['hello' => 'nette'];
	$this->sendJson($data);
}
```


Trajni parametri .[#toc-persistent-parameters]
==============================================

Trajni parametri se v povezavah **prenesejo samodejno**. To pomeni, da nam jih ni treba izrecno navesti v vsakem `link()` ali `n:href` v predlogi, vendar se bodo vseeno prenesli.

Če ima vaša aplikacija več jezikovnih različic, je trenutni jezik parameter, ki mora biti vedno del naslova URL. In bilo bi neverjetno naporno, če bi ga morali navajati v vsaki povezavi. Z Nette to ni potrebno. Parameter `lang` na ta način preprosto označimo kot stalen:

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	/** @persistent */
	public $lang;
}
```

Če je trenutna vrednost parametra `lang` `'en'` , potem bo URL, ustvarjen s `link()` ali `n:href` v predlogi, vseboval `lang=en`. Odlično!

Vendar pa lahko dodamo tudi parameter `lang` in s tem spremenimo njegovo vrednost:

```latte
<a n:href="Product:show $id, lang: en">detail in English</a>
```

Lahko pa ga tudi odstranimo z nastavitvijo vrednosti null:

```latte
<a n:href="Product:show $id, lang: null">click here</a>
```

Trajna spremenljivka mora biti deklarirana kot javna. Določimo lahko tudi privzeto vrednost. Če ima parameter enako vrednost kot privzeta vrednost, ne bo vključen v naslov URL.

Vztrajnost odraža hierarhijo razredov predstavnikov, zato se parameter, opredeljen v določenem predstavniku ali lastnosti, nato samodejno prenese na vsak predstavnik, ki ga podeduje ali uporablja isto lastnost.

V PHP 8 lahko za označevanje trajnih parametrov uporabite tudi atribute:

```php
use Nette\Application\Attributes\Persistent;

class ProductPresenter extends Nette\Application\UI\Presenter
{
	#[Persistent]
	public $lang;
}
```


Interaktivne komponente .[#toc-interactive-components]
======================================================

Predstavitveni programi imajo vgrajen sistem komponent. Komponente so ločene enote za večkratno uporabo, ki jih namestimo v predstavnike. To so lahko [obrazci |forms:in-presenter], podatkovne mreže, meniji, pravzaprav vse, kar je smiselno večkrat uporabiti.

Kako se komponente namestijo in nato uporabljajo v predstavitvenem programu? To je razloženo v poglavju [Komponente |Components]. Izvedeli boste celo, kaj imajo skupnega s Hollywoodom.

Kje lahko dobim komponente? Na strani [Komponente |https://componette.org] lahko najdete nekaj odprtokodnih komponent in drugih dodatkov za Nette, ki jih je izdelala in delila skupnost ogrodja Nette.


Poglobitev .[#toc-going-deeper]
===============================

.[tip]
To, kar smo doslej prikazali v tem poglavju, bo verjetno zadostovalo. Naslednje vrstice so namenjene tistim, ki jih predstavniki zanimajo poglobljeno in želijo vedeti vse.


Zahteve in parametri .[#toc-requirement-and-parameters]
-------------------------------------------------------

Zahteva, ki jo obravnava predstavnik, je objekt [api:Nette\Application\Request] in jo vrne predstavnikova metoda `getRequest()`. Vključuje niz parametrov, vsak od njih pa pripada bodisi kateri od komponent bodisi neposredno predstavniku (ki je pravzaprav tudi komponenta, čeprav posebna). Nette torej prerazporedi parametre in prehaja med posameznimi komponentami (in predstavnikom) tako, da pokliče metodo `loadState(array $params)`, ki je podrobneje opisana v poglavju [Komponente |Components]. Parametre lahko pridobimo z metodo `getParameters(): array`, posamično pa z uporabo `getParameter($name)`. Vrednosti parametrov so nizi ali polja nizov, v bistvu gre za surove podatke, pridobljene neposredno iz naslova URL.


Shranjevanje in obnavljanje zahtevka .[#toc-save-and-restore-the-request]
-------------------------------------------------------------------------

Trenutni zahtevek lahko shranite v sejo ali pa ga obnovite iz seje in omogočite predavatelju, da ga ponovno izvede. To je na primer uporabno, ko uporabnik izpolni obrazec in mu poteče prijava. Da ne bi izgubili podatkov, pred preusmeritvijo na stran za prijavo shranimo trenutno zahtevo v sejo z uporabo `$reqId = $this->storeRequest()`, ki vrne identifikator v obliki kratkega niza in ga kot parameter posreduje predstavniku za prijavo.

Po prijavi pokličemo metodo `$this->restoreRequest($reqId)`, ki prevzame zahtevo iz seje in ji jo posreduje naprej. Metoda preveri, ali je zahtevo ustvaril isti uporabnik, kot je zdaj prijavljeni. Če se prijavi drug uporabnik ali je ključ neveljaven, ne stori ničesar in program se nadaljuje.

Oglejte si kuharsko knjigo [Kako se vrniti na prejšnjo stran |best-practices:restore-request].


Kanonizacija .[#toc-canonization]
---------------------------------

Predstavniki imajo eno res odlično funkcijo, ki izboljšuje SEO (optimizacijo iskanja na internetu). Samodejno preprečujejo obstoj podvojene vsebine na različnih naslovih URL. Če na določen cilj vodi več naslovov URL, npr. `/index` in `/index?page=1`, ogrodje enega od njih označi kot primarnega (kanoničnega) in nanj preusmeri druge z uporabo kode HTTP 301. Zaradi tega iskalniki strani ne indeksirajo dvakrat in ne oslabijo njihovega ranga.

Ta postopek se imenuje kanonizacija. Kanonični URL je URL, ki ga ustvari [usmerjevalnik |routing], običajno prva ustrezna pot v zbirki.

Kanonizacija je privzeto vklopljena in jo lahko izklopite prek spletne strani `$this->autoCanonicalize = false`.

Preusmeritev se ne izvede pri zahtevi AJAX ali POST, ker bi povzročila izgubo podatkov ali ne bi imela dodane vrednosti SEO.

Kanonizacijo lahko sprožite tudi ročno z metodo `canonicalize()`, ki tako kot metoda `link()` kot argumente prejme predstavnika, dejanja in parametre. Ustvari povezavo in jo primerja s trenutnim naslovom URL. Če se razlikuje, preusmeri na ustvarjeno povezavo.

```php
public function actionShow(int $id, string $slug = null): void
{
	$realSlug = $this->facade->getSlugForId($id);
	// preusmeri, če se $slug razlikuje od $realSlug
	$this->canonicalize('Product:show', [$id, $realSlug]);
}
```


Dogodki .[#toc-events]
----------------------

Poleg metod `startup()`, `beforeRender()` in `shutdown()`, ki se kličejo kot del življenjskega cikla predstavitve, lahko določite tudi druge funkcije, ki se kličejo samodejno. Predstavitelj definira tako imenovane [dogodke |nette:glossary#events], njihove izvajalce pa dodate v polja `$onStartup`, `$onRender` in `$onShutdown`.

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	public function __construct()
	{
		$this->onStartup[] = function () {
			// ...
		};
	}
}
```

Obdelovalci v polju `$onStartup` se pokličejo tik pred metodo `startup()`, nato `$onRender` med `beforeRender()` in `render<View>()` in nazadnje `$onShutdown` tik pred `shutdown()`.


Odzivi .[#toc-responses]
------------------------

Odziv, ki ga vrne predstavitelj, je objekt, ki implementira vmesnik [api:Nette\Application\Response]. Na voljo je več pripravljenih odgovorov:

- [api:Nette\Application\Responses\CallbackResponse] - pošlje povratni klic
- [api:Nette\Application\Responses\FileResponse] - pošlje datoteko
- [api:Nette\Application\Responses\ForwardResponse] - posreduje ()
- [api:Nette\Application\Responses\JsonResponse] - pošlje JSON
- [api:Nette\Application\Responses\RedirectResponse] - preusmeri
- [api:Nette\Application\Responses\TextResponse] - pošlje besedilo
- [api:Nette\Application\Responses\VoidResponse] - prazen odgovor

Odgovori se pošljejo z metodo `sendResponse()`:

```php
use Nette\Application\Responses;

// Preprosto besedilo
$this->sendResponse(new Responses\TextResponse('Hello Nette!'));

// Pošlje datoteko
$this->sendResponse(new Responses\FileResponse(__DIR__ . '/invoice.pdf', 'Invoice13.pdf'));

// Pošlje povratni klic
$callback = function (Nette\Http\IRequest $httpRequest, Nette\Http\IResponse $httpResponse) {
	if ($httpResponse->getHeader('Content-Type') === 'text/html') {
		echo '<h1>Hello</h1>';
	}
};
$this->sendResponse(new Responses\CallbackResponse($callback));
```


Nadaljnje branje .[#toc-further-reading]
========================================

- [Vbrizgavanje metod in atributov |best-practices:inject-method-attribute]
- [Sestavljanje predstavnikov iz lastnosti |best-practices:presenter-traits]
- [Posredovanje nastavitev predstavnikom |best-practices:passing-settings-to-presenters]
- [Kako se vrniti na prejšnjo stran |best-practices:restore-request]
