Funciones Callback
******************

.[perex]
[api:Nette\Utils\Callback] es una clase estática, que contiene funciones para trabajar con [retrollamadas PHP |https://www.php.net/manual/en/language.types.callable.php].

Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que el siguiente alias de clase está definido:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Comprueba que `$callable` es una llamada de retorno PHP válida. En caso contrario lanza `Nette\InvalidArgumentException`. Si `$syntax` es verdadero, la función sólo verifica que `$callable` tiene una estructura válida para ser usada como callback, pero no verifica si la clase o método existe realmente. Devuelve `$callable`.

```php
Callback::check('trim'); // no exception
Callback::check(['NonExistentClass', 'method']); // throws Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // no exception
Callback::check(function () {}); // no exception
Callback::check(null); // throws Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Convierte la llamada de retorno PHP a forma textual. La clase o el método pueden no existir.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Devuelve la reflexión para el método o función usado en la llamada de retorno de PHP.

```php
$ref = Callback::toReflection('trim');
// $ref is ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref is ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Comprueba si la llamada de retorno de PHP es una función o un método estático.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Desenvuelve el cierre creado por `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
