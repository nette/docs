Por que usar modelos?
*********************


Por que eu deveria usar um sistema de modelos em PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
---------------------------------------------------------------------------------------------------------

Primeiro, vamos relembrar brevemente a história do PHP, cheia de reviravoltas interessantes. Uma das primeiras linguagens de programação usadas para templates HTML foi C. Entretanto, seu uso para este fim se mostrou inapropriado. Rasmus Lerdorf criou o PHP para facilitar a geração dinâmica do HTML com C no backend. O PHP foi inicialmente projetado como uma linguagem de templating, mas com o tempo ganhou mais características e se tornou uma linguagem de programação completa.

No entanto, ele ainda funciona como uma linguagem de modelo. Os arquivos PHP podem ser usados como páginas HTML, onde você pode emitir uma variável usando `<?= $foo ?>`.

No início da história do PHP, o sistema Smarty templating foi introduzido para separar estritamente a aparência (HTML/CSS) da lógica da aplicação. Suas capacidades eram deliberadamente limitadas em comparação ao PHP, de modo que um desenvolvedor não podia, por exemplo, consultar um banco de dados a partir de um template. Entretanto, estes sistemas introduziram dependência adicional, aumentaram a complexidade do projeto e exigiram o aprendizado de uma nova linguagem Smarty. Seus benefícios foram controversos, e o PHP simples continuou a ser usado para os modelos.

Com o tempo, os sistemas de modelos se tornaram mais úteis. Um número crescente de programadores e empresas tem percebido a importância da segurança. Eles reconheceram a existência de [vulnerabilidades como o XSS |safety-first]. A forma correta de exibir uma variável não é `<?= $foo ?>` mas `<?= htmlspecialchars($foo) ?>`e negligenciar a fuga, ou seja, usando a função `htmlspecialchars()`, pode causar uma grave quebra de segurança. Os sistemas de modelos introduziram a autoescapagem, então bastava escrever apenas `{$foo}`, e a variável seria exibida com a fuga incluída.

Os sistemas de modelos trouxeram suporte para herança, sandboxing e outras características úteis, tornando a escrita de modelos muito mais simples do que com PHP. Em algum momento, os benefícios dos sistemas de template compensaram significativamente as preocupações com a introdução de novas dependências.


Por que eu deveria usar o sistema de modelos Latte? .[#toc-why-should-i-use-the-latte-templating-system]
--------------------------------------------------------------------------------------------------------

As principais razões são a segurança e a sintaxe.

Todos os sistemas de modelos, como Twig, Blade, ou Smarty, introduziram a proteção XSS na forma de fuga automática ao longo de sua existência. Entretanto, Latte foi além, percebendo que para que a fuga automática fosse verdadeiramente funcional, o sistema precisava entender HTML. Ele tinha que reconhecer não apenas uma seqüência de caracteres, mas também tags, atributos, etc. Isto porque são necessários diferentes métodos de escape dentro do texto HTML, dentro das tags HTML, e dentro do JavaScript, etc. Latte aprendeu a entender o HTML e escapar em cada um destes contextos [apropriadamente |safety-first#Context-Aware Escaping]. Assim, tornou-se o primeiro e até agora o único sistema de templates PHP com escape sensível ao contexto.

O Latte representa um sistema de modelos genuinamente seguro, enquanto outros sistemas tendem a criar uma falsa sensação de segurança.

Outra vantagem significativa do Latte é o uso da sintaxe PHP, de modo que o programador/codificador não precisa aprender uma nova linguagem, mas pode utilizar o que já conhece bem.


Quais são as principais diferenças entre sistemas de gabaritos como Latte, Twig e Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

As diferenças entre sistemas de modelos como Latte, Twig e Blade residem principalmente em sua sintaxe, segurança e integração com as estruturas:

- Latte: utiliza a sintaxe da linguagem PHP, facilitando a aprendizagem e o uso. Ele oferece proteção de primeira linha contra ataques XSS.
- Twig: utiliza uma sintaxe parecida com a do Python, que é bem diferente do PHP. Ele escapa sem distinção de contexto. Está bem integrado com a estrutura Symfony.
- Blade: utiliza uma mistura de PHP e sintaxe personalizada. Ela escapa sem distinção de contexto. Está bem integrado com as características de Laravel e o ecossistema.


Vale a pena para as empresas usar um sistema de modelos? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
------------------------------------------------------------------------------------------------------------------------

Em primeiro lugar, os custos associados ao treinamento, ao uso e aos benefícios gerais variam significativamente dependendo do sistema. O sistema de modelos Latte, graças ao seu uso da sintaxe PHP, simplifica muito o aprendizado para programadores já familiarizados com esta linguagem. Normalmente leva algumas horas para que um programador se familiarize suficientemente com o Latte, reduzindo os custos de treinamento e acelerando a adoção da tecnologia e, o mais importante, a eficiência no uso diário.

Além disso, Latte oferece um alto nível de proteção contra a vulnerabilidade XSS, graças a sua tecnologia de escape sensível ao contexto único. Esta proteção é crucial para garantir a segurança das aplicações web e minimizar o risco de ataques que possam colocar em risco os usuários ou os dados da empresa. A segurança das aplicações web também é importante para manter a boa reputação de uma empresa. As questões de segurança podem levar à perda de confiança dos clientes e prejudicar a reputação da empresa no mercado.

O uso do Latte também reduz os custos gerais de desenvolvimento e manutenção, tornando ambos mais fáceis. Portanto, o uso de um sistema de modelos vale definitivamente a pena.


Como o Latte afeta o desempenho das aplicações web e os recursos do servidor? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
------------------------------------------------------------------------------------------------------------------------------------------------------------

Embora os modelos Latte sejam processados rapidamente, este aspecto realmente não importa. A razão é que os arquivos de análise ocorrem apenas uma vez durante a primeira exibição. Eles são então compilados em código PHP, armazenados em disco e executados em cada solicitação subseqüente sem necessidade de recompilação.

É assim que funciona em um ambiente de produção. Durante o desenvolvimento, os modelos Latte são recompilados cada vez que seu conteúdo muda, de modo que o desenvolvedor sempre vê a versão atual.
