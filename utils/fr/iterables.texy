Fonctions de l'itérateur
************************

.[perex]{data-version:4.0.4}
[api:Nette\Utils\Iterables] est une classe statique contenant des fonctions permettant de travailler avec des itérateurs. Son équivalent pour les tableaux est [Nette\Utils\Arrays |arrays].


L'installation :

```shell
composer require nette/utils
```

Tous les exemples supposent la création d'un alias :

```php
use Nette\Utils\Iterables;
```


contains(iterable $iterable, $value): bool .[method]
----------------------------------------------------

Teste la présence d'une valeur dans l'itérateur. Il utilise une comparaison stricte (`===`).

```php
Iterables::contains(new ArrayIterator([1, 2, 3]), 1);    // true
Iterables::contains(new ArrayIterator([1, 2, 3]), '1');  // false
```


containsKey(iterable $iterable, $value): bool .[method]
-------------------------------------------------------

Teste la présence d'une clé dans l'itérateur. Il utilise la comparaison stricte (`===`).

```php
Iterables::containsKey(new ArrayIterator([1, 2, 3]), 0);  // true
Iterables::containsKey(new ArrayIterator([1, 2, 3]), 4);  // false
```


every(iterable $iterable, callable $predicate): bool .[method]
--------------------------------------------------------------

Teste si tous les éléments de l'itérateur passent un test implémenté dans `$predicate` avec la signature `function ($value, $key, iterable $iterable): bool`.

```php
$iterator = new ArrayIterator([1, 30, 39, 29, 10, 13]);
$isBelowThreshold = fn($value) => $value < 40;
$res = Iterables::every($iterator, $isBelowThreshold); // true
```

Voir [some() |#some()].


filter(iterable $iterable, callable $predicate): Generator .[method]
--------------------------------------------------------------------

Itérateur qui filtre les éléments en fonction d'un prédicat. Le prédicat a la signature `function ($value, $key, iterable $iterable): bool`. Maintient les clés d'origine.

```php
$iterator = new ArrayIterator([1, 2, 3]);
$iterator = Iterables::filter($iterator, fn($v) => $v < 3);
// 1, 2
```


first(iterable $iterable, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------------

Renvoie le premier élément (correspondant au prédicat, s'il est spécifié). Si aucun élément de ce type n'existe, il renvoie le résultat de l'appel à `$else` ou null.
Le paramètre `$predicate` a la signature `function ($value, $key, iterable $iterable): bool`.

```php
Iterables::first(new ArrayIterator([1, 2, 3]));                   // 1
Iterables::first(new ArrayIterator([1, 2, 3]), fn($v) => $v > 2); // 3
Iterables::first(new ArrayIterator([]));                          // null
Iterables::first(new ArrayIterator([]), else: fn() => false);     // false
```


firstKey(iterable $iterable, ?callable $predicate=null, ?callable $else=null): mixed .[method]
----------------------------------------------------------------------------------------------

Renvoie la clé du premier élément (correspondant au prédicat, s'il est spécifié). Si aucun élément de ce type n'existe, il renvoie le résultat de l'appel à `$else` ou null. Le prédicat a la signature `function ($value, $key, iterable $iterable): bool`.

```php
Iterables::firstKey(new ArrayIterator([1, 2, 3]));                   // 0
Iterables::firstKey(new ArrayIterator([1, 2, 3]), fn($v) => $v > 2); // 2
Iterables::firstKey(new ArrayIterator(['a' => 1, 'b' => 2]));        // 'a'
Iterables::firstKey(new ArrayIterator([]));                          // null
```


map(iterable $iterable, callable $transformer): array .[method]
---------------------------------------------------------------

Itérateur qui transforme les valeurs en appelant `$transformer`. Il porte la signature `function ($value, $key, iterable $iterable): bool`. Il conserve les clés d'origine.

```php
$iterator = new ArrayIterator([1, 2, 3]);
$iterator = Iterables::map($iterator, fn($v) => $v * 2);
// 2, 4, 6
```


some(iterable $iterable, callable $predicate): bool .[method]
-------------------------------------------------------------

Teste si au moins un élément de l'itérateur passe un test implémenté dans `$predicate` avec la signature `function ($value, $key, iterable $iterable): bool`.

```php
$iterator = new ArrayIterator([1, 30, 39, 29, 10, 13]);
$isEven = fn($value) => $value % 2 === 0;
$res = Iterables::some($iterator, $isEven); // true
```

Voir [every() |#every()].
