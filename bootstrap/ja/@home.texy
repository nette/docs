Nette Bootstrap
***************

.[perex]
Nette の個々のコンポーネントは設定ファイルを使用して設定します。これらのファイルを読み込む方法を示します。

.[tip]
フレームワーク全体を使用している場合、追加の作業は必要ありません。プロジェクトには設定ファイル用の `config/` ディレクトリが用意されており、それらの読み込みは[アプリケーションブートローダー |application:bootstrapping#DIコンテナの設定]が担当します。 この記事は、Nette のライブラリを 1 つだけ使用し、設定ファイルの機能を利用したいユーザー向けです。

設定ファイルは通常[NEON 形式|neon:format]で記述され、[サポートされているエディタ |best-practices:editors-and-tools#IDEエディタ]で編集するのが最適です。これらはオブジェクトを**作成および設定**する方法の指示として理解できます。したがって、設定の読み込み結果はいわゆるファクトリであり、これはリクエストに応じて使用したい他のオブジェクト（データベース接続など）を作成するオブジェクトです。

このファクトリは*依存関係注入コンテナ*（DI コンテナ）とも呼ばれ、詳細に興味がある場合は[依存関係注入 |dependency-injection:]に関する章をお読みください。

設定の読み込みとコンテナの作成は[api:Nette\Bootstrap\Configurator]クラスが行うため、まずそのパッケージ `nette/bootstrap` をインストールします：

```shell
composer require nette/bootstrap
```

そして `Configurator` クラスのインスタンスを作成します。生成されたDIコンテナはディスクにキャッシュされるため、保存先のディレクトリパスを設定する必要があります：

```php
$configurator = new Nette\Bootstrap\Configurator;
$configurator->setTempDirectory(__DIR__ . '/temp');
```

LinuxまたはmacOSでは、`temp/` ディレクトリに[書き込み権限を設定 |nette:troubleshooting#ディレクトリ権限の設定]してください。

そして、設定ファイル自体に移ります。これらは `addConfig()` を使用して読み込みます：

```php
$configurator->addConfig(__DIR__ . '/database.neon');
```

複数の設定ファイルを追加したい場合は、`addConfig()` 関数を複数回呼び出すことができます。ファイル内に同じキーを持つ要素が現れた場合、それらは上書きされます（または配列の場合は[マージされます |dependency-injection:configuration#マージ]）。後から読み込まれたファイルは前のファイルよりも高い優先度を持ちます。

最後のステップはDIコンテナの作成です：

```php
$container = $configurator->createContainer();
```

そして、それは必要なオブジェクトを作成します。たとえば、[Nette Database|database:configuration]の設定を使用している場合、データベース接続の作成をリクエストできます：

```php
$db = $container->getByType(Nette\Database\Connection::class);
// または
$explorer = $container->getByType(Nette\Database\Explorer::class);
// または複数の接続を作成する場合
$db = $container->getByName('database.main.connection');
```

これでデータベースを操作できます！


開発モード vs プロダクションモード
-------------------

開発モードでは、設定ファイルが変更されるたびにコンテナが自動的に更新されます。プロダクションモードでは、一度だけ生成され、変更はチェックされません。 したがって、開発モードはプログラマの最大限の利便性に焦点を当てており、プロダクションモードはパフォーマンスと本番展開に焦点を当てています。

モードの選択は自動検出によって行われるため、通常は何も設定したり手動で切り替えたりする必要はありません。アプリケーションがlocalhost（つまりIPアドレス `127.0.0.1` または `::1`）で実行され、プロキシが存在しない（つまりそのHTTPヘッダーがない）場合、モードは開発モードになります。それ以外の場合はプロダクションモードで実行されます。

特定のIPアドレスからアクセスするプログラマなど、他の場合に開発モードを有効にしたい場合は、`setDebugMode()` を使用します：

```php
$configurator->setDebugMode('23.75.345.200');
// IPアドレスの配列も指定できます
```

IPアドレスとCookieを組み合わせることを強くお勧めします。`nette-debug` Cookieに秘密のトークン（例：`secret1234`）を保存し、この方法で特定のIPアドレスからアクセスし、かつCookieに言及されたトークンを持つプログラマに対して開発モードを有効にします：

```php
$configurator->setDebugMode('secret1234@23.75.345.200');
```

localhostに対しても、開発モードを完全に無効にすることもできます：

```php
$configurator->setDebugMode(false);
```


パラメータ
-----

設定ファイルでは、[`parameters` セクション |dependency-injection:configuration#パラメータ]で定義されるパラメータも使用できます。

これらは `addDynamicParameters()` メソッドを使用して外部から挿入することもできます：

```php
$configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

パラメータ `projectId` は、設定内で `%projectId%` と記述することで参照できます。
