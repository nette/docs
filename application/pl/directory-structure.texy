Struktura katalogów aplikacji
*****************************

<div class=perex>

Jak zaprojektować przejrzystą i skalowalną strukturę katalogów dla projektów w Nette Framework? Pokażemy Ci sprawdzone praktyki, które pomogą Ci zorganizować kod. Dowiesz się:

- jak **logicznie zorganizować** aplikację w katalogi
- jak zaprojektować strukturę, aby **dobrze się skalowała** wraz z rozwojem projektu
- jakie są **możliwe alternatywy** i ich zalety lub wady

</div>


Ważne jest, aby wspomnieć, że sam Nette Framework nie nalega na żadną konkretną strukturę. Został zaprojektowany tak, aby można go było łatwo dostosować do wszelkich potrzeb i preferencji.


Podstawowa struktura projektu .[#toc-basic-project-structure]
=============================================================

Chociaż Nette Framework nie narzuca żadnej stałej struktury katalogów, istnieje sprawdzony domyślny układ w postaci [Web Project |https://github.com/nette/web-project]:

/--pre
<b>web-project/</b>
├── <b>app/</b>              ← katalog aplikacji
├── <b>assets/</b>           ← SCSS, pliki JS, obrazy..., alternatywnie resources/
├── <b>bin/</b>              ← skrypty wiersza poleceń
├── <b>config/</b>           ← konfiguracja
├── <b>log/</b>              ← zarejestrowane błędy
├── <b>temp/</b>             ← pliki tymczasowe, pamięć podręczna
├── <b>tests/</b>            ← testy
├── <b>vendor/</b>           ← biblioteki zainstalowane przez Composer
└── <b>www/</b>              ← katalog publiczny (document-root)
\--

Możesz dowolnie modyfikować tę strukturę zgodnie ze swoimi potrzebami - zmieniać nazwy lub przenosić foldery. Następnie wystarczy dostosować względne ścieżki do katalogów w `Bootstrap.php` i ewentualnie `composer.json`. Nic więcej nie jest potrzebne, żadnej skomplikowanej rekonfiguracji, żadnych ciągłych zmian. Nette posiada inteligentne automatyczne wykrywanie i automatycznie rozpoznaje lokalizację aplikacji, w tym jej bazę URL.


Zasady organizacji kodu .[#toc-code-organization-principles]
============================================================

Kiedy po raz pierwszy odkrywasz nowy projekt, powinieneś być w stanie szybko się zorientować. Wyobraź sobie, że klikasz na katalog `app/Model/` i widzisz następującą strukturę:

/--pre
<b>app/Model/</b>
├── <b>Services/</b>
├── <b>Repositories/</b>
└── <b>Entities/</b>
\--

Z tego dowiesz się tylko, że projekt korzysta z niektórych usług, repozytoriów i encji. Nie dowiesz się niczego o rzeczywistym celu aplikacji.

Przyjrzyjmy się innemu podejściu - **organizacji według domen**:

/--pre
<b>app/Model/</b>
├── <b>Cart/</b>
├── <b>Payment/</b>
├── <b>Order/</b>
└── <b>Product/</b>
\--

Jest inaczej - na pierwszy rzut oka widać, że jest to witryna e-commerce. Same nazwy katalogów zdradzają, co potrafi aplikacja - działa z płatnościami, zamówieniami i produktami.

Pierwsze podejście (organizacja według typu klasy) przynosi kilka problemów w praktyce: kod, który jest logicznie powiązany, jest rozproszony w różnych folderach i trzeba między nimi przeskakiwać. Dlatego będziemy organizować według domen.


Przestrzenie nazw .[#toc-namespaces]
------------------------------------

Konwencjonalne jest, że struktura katalogów odpowiada przestrzeniom nazw w aplikacji. Oznacza to, że fizyczna lokalizacja plików odpowiada ich przestrzeni nazw. Na przykład, klasa znajdująca się w `app/Model/Product/ProductRepository.php` powinna mieć przestrzeń nazw `App\Model\Product`. Zasada ta pomaga w orientacji kodu i upraszcza automatyczne ładowanie.


Liczba pojedyncza a mnoga w nazwach .[#toc-singular-vs-plural-in-names]
-----------------------------------------------------------------------

Zauważ, że używamy liczby pojedynczej dla głównych katalogów aplikacji: `app`, `config`, `log`, `temp`, `www`. To samo dotyczy wewnątrz aplikacji: `Model`, `Core`, `Presentation`. Dzieje się tak, ponieważ każdy z nich reprezentuje jedną ujednoliconą koncepcję.

Podobnie, `app/Model/Product` reprezentuje wszystko o produktach. Nie nazywamy go `Products`, ponieważ nie jest to folder pełen produktów (który zawierałby pliki takie jak `iphone.php`, `samsung.php`). Jest to przestrzeń nazw zawierająca klasy do pracy z produktami - `ProductRepository.php`, `ProductService.php`.

Folder `app/Tasks` ma liczbę mnogą, ponieważ zawiera zestaw samodzielnych skryptów wykonywalnych - `CleanupTask.php`, `ImportTask.php`. Każdy z nich jest niezależną jednostką.

Dla zachowania spójności zalecamy używanie:
- Singular dla przestrzeni nazw reprezentujących jednostkę funkcjonalną (nawet w przypadku pracy z wieloma jednostkami)
- Liczba mnoga dla zbiorów niezależnych jednostek
- W przypadku niepewności lub jeśli nie chcesz o tym myśleć, wybierz liczbę pojedynczą


Katalog publiczny `www/` .[#toc-public-directory-www]
=====================================================

Ten katalog jest jedynym dostępnym z sieci (tzw. document-root). Często można spotkać się z nazwą `public/` zamiast `www/` - jest to tylko kwestia konwencji i nie ma wpływu na funkcjonalność. Katalog zawiera:
- [Punkt wejścia |bootstrap#index.php] aplikacji `index.php`
- Plik `.htaccess` z regułami mod_rewrite (dla Apache)
- Pliki statyczne (CSS, JavaScript, obrazy)
- Przesłane pliki

Dla prawidłowego bezpieczeństwa aplikacji kluczowe znaczenie ma poprawnie [skonfigurowany document-root |nette:troubleshooting#how-to-change-or-remove-www-directory-from-url].

.[note]
Nigdy nie umieszczaj folderu `node_modules/` w tym katalogu - zawiera on tysiące plików, które mogą być wykonywalne i nie powinny być publicznie dostępne.


Katalog aplikacji `app/` .[#toc-application-directory-app]
==========================================================

Jest to główny katalog z kodem aplikacji. Podstawowa struktura:

/--pre
<b>app/</b>
├── <b>Core/</b>               ← Infrastruktura ma znaczenie
├── <b>Model/</b>              ← logika biznesowa
├── <b>Presentation/</b>       ← prezentery i szablony
├── <b>Tasks/</b>              ← skrypty poleceń
└── <b>Bootstrap.php</b>       ← klasa bootstrap aplikacji
\--

`Bootstrap.php` to [klasa startowa aplikacji |bootstrap], która inicjalizuje środowisko, ładuje konfigurację i tworzy kontener DI.

Przyjrzyjmy się teraz szczegółowo poszczególnym podkatalogom.


Prezentery i szablony .[#toc-presenters-and-templates]
======================================================

Część prezentacyjna aplikacji znajduje się w katalogu `app/Presentation`. Alternatywą jest krótki `app/UI`. Jest to miejsce dla wszystkich prezenterów, ich szablonów i wszelkich klas pomocniczych.

Organizujemy tę warstwę według domen. W złożonym projekcie, który łączy e-commerce, blog i API, struktura wyglądałaby następująco:

/--pre
<b>app/Presentation/</b>
├── <b>Shop/</b>              ← frontend e-commerce
│   ├── <b>Product/</b>
│   ├── <b>Cart/</b>
│   └── <b>Order/</b>
├── <b>Blog/</b>              ← blog
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← administracja
│   ├── <b>Dashboard/</b>
│   └── <b>Products/</b>
└── <b>Api/</b>               ← Punkty końcowe API
	└── <b>V1/</b>
\--

I odwrotnie, dla prostego bloga użylibyśmy tej struktury:

/--pre
<b>app/Presentation/</b>
├── <b>Front/</b>             ← frontend strony
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← administracja
│   ├── <b>Dashboard/</b>
│   └── <b>Posts/</b>
├── <b>Error/</b>
└── <b>Export/</b>            ← RSS, mapy witryn itp.
\--

Foldery takie jak `Home/` lub `Dashboard/` zawierają prezentery i szablony. Foldery takie jak `Front/`, `Admin/` lub `Api/` nazywane są **modułami**. Z technicznego punktu widzenia są to zwykłe katalogi, które służą do logicznej organizacji aplikacji.

Każdy folder z prezenterem zawiera podobnie nazwany prezenter i jego szablony. Na przykład folder `Dashboard/` zawiera:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← prezenter
└── <b>default.latte</b>              ← szablon
\--

Ta struktura katalogów jest odzwierciedlona w przestrzeniach nazw klas. Na przykład `DashboardPresenter` znajduje się w przestrzeni nazw `App\Presentation\Admin\Dashboard` (zobacz [mapowanie prezentera |#presenter mapping]):

```php
namespace App\Presentation\Admin\Dashboard;

class DashboardPresenter extends Nette\Application\UI\Presenter
{
	//...
}
```

Odnosimy się do prezentera `Dashboard` wewnątrz modułu `Admin` w aplikacji używając notacji dwukropka jako `Admin:Dashboard`. Do jego akcji `default` następnie jako `Admin:Dashboard:default`. W przypadku modułów zagnieżdżonych używamy więcej dwukropków, na przykład `Shop:Order:Detail:default`.


Elastyczny rozwój struktury .[#toc-flexible-structure-development]
------------------------------------------------------------------

Jedną z największych zalet tej struktury jest to, jak elegancko dostosowuje się ona do rosnących potrzeb projektu. Jako przykład weźmy część generującą kanały XML. Początkowo mamy prosty formularz:

/--pre
<b>Export/</b>
├── <b>ExportPresenter.php</b>   ← Jeden prezenter dla wszystkich eksportów
├── <b>sitemap.latte</b>         ← szablon dla mapy strony
└── <b>feed.latte</b>            ← szablon dla kanału RSS
\--

Z czasem dodajemy więcej typów feedów i potrzebujemy dla nich więcej logiki... Żaden problem! Folder `Export/` staje się po prostu modułem:

/--pre
<b>Export/</b>
├── <b>Sitemap/</b>
│   ├── <b>SitemapPresenter.php</b>
│   └── <b>sitemap.latte</b>
└── <b>Feed/</b>
	├── <b>FeedPresenter.php</b>
	├── <b>amazon.latte</b>         ← kanał dla Amazon
	└── <b>ebay.latte</b>           ← kanał dla eBay
\--

Transformacja ta jest całkowicie bezproblemowa - wystarczy utworzyć nowe podfoldery, podzielić na nie kod i zaktualizować odnośniki (np. z `Export:feed` na `Export:Feed:amazon`). Dzięki temu możemy stopniowo rozbudowywać strukturę w miarę potrzeb, poziom zagnieżdżenia nie jest w żaden sposób ograniczony.

Przykładowo, jeśli w administracji mamy wiele prezenterów związanych z zarządzaniem zamówieniami, takich jak `OrderDetail`, `OrderEdit`, `OrderDispatch` itp. to dla lepszej organizacji możemy utworzyć moduł (folder) `Order`, który będzie zawierał (foldery dla) prezenterów `Detail`, `Edit`, `Dispatch` i innych.


Lokalizacja szablonu .[#toc-template-location]
----------------------------------------------

W poprzednich przykładach widzieliśmy, że szablony znajdują się bezpośrednio w folderze z prezenterem:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← prezenter
├── <b>DashboardTemplate.php</b>      ← opcjonalna klasa szablonu
└── <b>default.latte</b>              ← szablon
\--

Ta lokalizacja okazuje się najwygodniejsza w praktyce - masz wszystkie powiązane pliki pod ręką.

Alternatywnie można umieścić szablony w podfolderze `templates/`. Nette obsługuje oba warianty. Można nawet umieścić szablony całkowicie poza folderem `Presentation/`. Wszystko na temat opcji lokalizacji szablonów można znaleźć w rozdziale [Template Lookup |templates#Template Lookup].


Klasy pomocnicze i komponenty .[#toc-helper-classes-and-components]
-------------------------------------------------------------------

Prezentery i szablony często są dostarczane z innymi plikami pomocniczymi. Umieszczamy je logicznie zgodnie z ich zakresem:

1. **Bezpośrednio z prezenterem** w przypadku specyficznych komponentów dla danego prezentera:

/--pre
<b>Product/</b>
├── <b>ProductPresenter.php</b>
├── <b>ProductGrid.php</b>        ← komponent dla listy produktów
└── <b>FilterForm.php</b>         ← formularz do filtrowania
\--

2. **Dla modułu** - zalecamy korzystanie z folderu `Accessory`, który jest umieszczony na początku alfabetu:

/--pre
<b>Front/</b>
├── <b>Accessory/</b>
│   ├── <b>NavbarControl.php</b>    ← komponenty dla frontendu
│   └── <b>TemplateFilters.php</b>
├── <b>Product/</b>
└── <b>Cart/</b>
\--

3. **Dla całej aplikacji** - w folderze `Presentation/Accessory/`:
/--pre
<b>app/Presentation/</b>
├── <b>Accessory/</b>
│   ├── <b>LatteExtension.php</b>
│   └── <b>TemplateFilters.php</b>
├── <b>Front/</b>
└── <b>Admin/</b>
\--

Można też umieścić klasy pomocnicze, takie jak `LatteExtension.php` lub `TemplateFilters.php` w folderze infrastruktury `app/Core/Latte/`. A komponenty w `app/Components`. Wybór zależy od konwencji zespołu.


Model - serce aplikacji .[#toc-model-heart-of-the-application]
==============================================================

Model zawiera całą logikę biznesową aplikacji. Dla jego organizacji obowiązuje ta sama zasada - strukturyzujemy według domen:

/--pre
<b>app/Model/</b>
├── <b>Payment/</b>                   ← wszystko o płatnościach
│   ├── <b>PaymentFacade.php</b>      ← główny punkt wejścia
│   ├── <b>PaymentRepository.php</b>
│   ├── <b>Payment.php</b>            ← podmiot
├── <b>Order/</b>                     ← wszystko o zamówieniach
│   ├── <b>OrderFacade.php</b>
│   ├── <b>OrderRepository.php</b>
│   ├── <b>Order.php</b>
└── <b>Shipping/</b>                  ← wszystko o wysyłce
\--

W modelu zazwyczaj spotyka się następujące typy klas:

**Facades**: reprezentują główny punkt wejścia do określonej domeny w aplikacji. Działają jako orkiestrator, który koordynuje współpracę między różnymi usługami w celu wdrożenia kompletnych przypadków użycia (takich jak "utwórz zamówienie" lub "przetwarzaj płatność"). Pod warstwą orkiestracji fasada ukrywa szczegóły implementacji przed resztą aplikacji, zapewniając w ten sposób czysty interfejs do pracy z daną domeną.

```php
class OrderFacade
{
	public function createOrder(Cart $cart): Order
	{
		// walidacja
		// tworzenie zamówień wysyłanie wiadomości
		// wysyłanie wiadomości e-mail
		// zapis do statystyk
	}
}
```

**Usługi**: koncentrują się na konkretnych operacjach biznesowych w domenie. W przeciwieństwie do fasad, które orkiestrują całe przypadki użycia, usługa implementuje określoną logikę biznesową (np. obliczenia cen lub przetwarzanie płatności). Usługi są zazwyczaj bezstanowe i mogą być używane przez fasady jako bloki konstrukcyjne dla bardziej złożonych operacji lub bezpośrednio przez inne części aplikacji do prostszych zadań.

```php
class PricingService
{
	public function calculateTotal(Order $order): Money
	{
		// kalkulacja ceny
	}
}
```

**Repozytoria**: obsługują całą komunikację z magazynem danych, zazwyczaj bazą danych. Ich zadaniem jest ładowanie i zapisywanie encji oraz implementacja metod ich wyszukiwania. Repozytorium chroni resztę aplikacji przed szczegółami implementacji bazy danych i zapewnia obiektowy interfejs do pracy z danymi.

```php
class OrderRepository
{
	public function find(int $id): ?Order
	{
	}

	public function findByCustomer(int $customerId): array
	{
	}
}
```

**Entities**: obiekty reprezentujące główne koncepcje biznesowe w aplikacji, które mają swoją tożsamość i zmieniają się w czasie. Zazwyczaj są to klasy mapowane do tabel bazy danych przy użyciu ORM (takich jak Nette Database Explorer lub Doctrine). Podmioty mogą zawierać reguły biznesowe dotyczące ich danych i logiki walidacji.

```php
// Podmiot zmapowany do tabeli zamówień bazy danych
class Order extends Nette\Database\Table\ActiveRow
{
	public function addItem(Product $product, int $quantity): void
	{
		$this->related('order_items')->insert([
			'product_id' => $product->id,
			'quantity' => $quantity,
			'unit_price' => $product->price,
		]);
	}
}
```

**Obiekty wartości**: niezmienne obiekty reprezentujące wartości bez własnej tożsamości - na przykład kwota pieniędzy lub adres e-mail. Dwie instancje obiektu wartości z tymi samymi wartościami są uważane za identyczne.


Kod infrastruktury .[#toc-infrastructure-code]
==============================================

Folder `Core/` (lub również `Infrastructure/`) jest domem dla technicznych podstaw aplikacji. Kod infrastruktury zazwyczaj zawiera:

/--pre
<b>app/Core/</b>
├── <b>Router/</b>               ← routing i zarządzanie adresami URL
│   └── <b>RouterFactory.php</b>
├── <b>Security/</b>             ← uwierzytelnianie i autoryzacja
│   ├── <b>Authenticator.php</b>
│   └── <b>Authorizator.php</b>
├── <b>Logging/</b>              ← rejestrowanie i monitorowanie
│   ├── <b>SentryLogger.php</b>
│   └── <b>FileLogger.php
├── <b>Cache/</b>                ← warstwa buforowania
│   └── <b>FullPageCache.php</b>
└── <b>Integration/</b>          ← integracja z dodatkowymi usługami
	├── <b>Slack/</b>
	└── <b>Stripe/</b>
\--

W przypadku mniejszych projektów płaska struktura jest naturalnie wystarczająca:

/--pre
<b>Core/</b>
├── <b>RouterFactory.php</b>
├── <b>Authenticator.php</b>
└── <b>QueueMailer.php</b>
\--

To jest kod, który:

- obsługuje infrastrukturę techniczną (routing, logowanie, buforowanie)
- Integruje usługi zewnętrzne (Sentry, Elasticsearch, Redis)
- Zapewnia podstawowe usługi dla całej aplikacji (poczta, baza danych)
- Jest w większości niezależny od konkretnej domeny - cache lub logger działa tak samo dla e-commerce lub bloga.

Zastanawiasz się, czy dana klasa należy do tego miejsca, czy do modelu? Kluczową różnicą jest to, że kod w `Core/`:

- Nie wie nic o domenie (produkty, zamówienia, artykuły)
- Zazwyczaj może być przeniesiony do innego projektu
- Rozwiązuje "jak to działa" (jak wysłać pocztę), a nie "co to robi" (jaką pocztę wysłać)

Przykład dla lepszego zrozumienia:

- `App\Core\MailerFactory` - tworzy instancje klasy wysyłającej e-maile, obsługuje ustawienia SMTP
- `App\Model\OrderMailer` - używa `MailerFactory` do wysyłania e-maili o zamówieniach, zna ich szablony i wie, kiedy powinny zostać wysłane.


Skrypty poleceń .[#toc-command-scripts]
=======================================

Aplikacje często muszą wykonywać zadania poza zwykłymi żądaniami HTTP - niezależnie od tego, czy jest to przetwarzanie danych w tle, konserwacja czy zadania okresowe. Proste skrypty w katalogu `bin/` są używane do wykonania, podczas gdy rzeczywista logika implementacji jest umieszczona w `app/Tasks/` (lub `app/Commands/`).

Przykład:

/--pre
<b>app/Tasks/</b>
├── <b>Maintenance/</b>               ← skrypty konserwacyjne
│   ├── <b>CleanupCommand.php</b>     ← usuwanie starych danych
│   └── <b>DbOptimizeCommand.php</b>  ← optymalizacja bazy danych
├── <b>Integration/</b>               ← integracja z systemami zewnętrznymi
│   ├── <b>ImportProducts.php</b>     ← import z systemu dostawcy
│   └── <b>SyncOrders.php</b>         ← synchronizacja zamówień
└── <b>Scheduled/</b>                 ← regularne zadania
	├── <b>NewsletterCommand.php</b>  ← wysyłanie newsletterów
	└── <b>ReminderCommand.php</b>    ← powiadomienia dla klientów
\--

Co należy do modelu, a co do skryptów poleceń? Na przykład logika wysyłania jednej wiadomości e-mail jest częścią modelu, masowe wysyłanie tysięcy wiadomości e-mail należy do `Tasks/`.

Zadania są zwykle uruchamiane [z wiersza poleceń |https://blog.nette.org/en/cli-scripts-in-nette-application] lub przez cron. Mogą być również uruchamiane za pośrednictwem żądania HTTP, ale należy wziąć pod uwagę bezpieczeństwo. Prezenter, który uruchamia zadanie, musi być zabezpieczony, na przykład tylko dla zalogowanych użytkowników lub z silnym tokenem i dostępem z dozwolonych adresów IP. W przypadku długich zadań konieczne jest zwiększenie limitu czasu skryptu i użycie `session_write_close()`, aby uniknąć blokowania sesji.


Inne możliwe katalogi .[#toc-other-possible-directories]
========================================================

Oprócz wspomnianych podstawowych katalogów, można dodać inne wyspecjalizowane foldery zgodnie z potrzebami projektu. Przyjrzyjmy się najpopularniejszym z nich i ich zastosowaniu:

/--pre
<b>app/</b>
├── <b>Api/</b>              ← Logika API niezależna od warstwy prezentacji
├── <b>Database/</b>         ← skrypty migracyjne i siewniki danych testowych
├── <b>Components/</b>       ← współdzielone komponenty wizualne w całej aplikacji
├── <b>Event/</b>            ← przydatne w przypadku korzystania z architektury sterowanej zdarzeniami
├── <b>Mail/</b>             ← szablony wiadomości e-mail i powiązana logika
└── <b>Utils/</b>            ← klasy pomocnicze
\--

W przypadku współdzielonych komponentów wizualnych używanych w prezenterach w całej aplikacji można użyć folderu `app/Components` lub `app/Controls`:

/--pre
<b>app/Components/</b>
├── <b>Form/</b>                 ← współdzielone komponenty formularzy
│   ├── <b>SignInForm.php</b>
│   └── <b>UserForm.php</b>
├── <b>Grid/</b>                 ← komponenty dla list danych
│   └── <b>DataGrid.php</b>
└── <b>Navigation/</b>           ← elementy nawigacyjne
	├── <b>Breadcrumbs.php</b>
	└── <b>Menu.php</b>
\--

To tutaj znajdują się komponenty z bardziej złożoną logiką. Jeśli chcesz współdzielić komponenty między wieloma projektami, dobrze jest oddzielić je w samodzielnym pakiecie kompozytora.

W katalogu `app/Mail` można umieścić zarządzanie komunikacją e-mail:

/--pre
<b>app/Mail/</b>
├── <b>templates/</b>            ← szablony wiadomości e-mail
│   ├── <b>order-confirmation.latte</b>
│   └── <b>welcome.latte</b>
└── <b>OrderMailer.php</b>
\--


Mapowanie prezentera .[#toc-presenter-mapping]
==============================================

Mapowanie definiuje zasady wyprowadzania nazw klas z nazw prezenterów. Określamy je w [konfiguracji |configuration] pod kluczem `application › mapping`.

Na tej stronie pokazaliśmy, że umieszczamy prezenterów w folderze `app/Presentation` (lub `app/UI`). Musimy poinformować Nette o tej konwencji w pliku konfiguracyjnym. Wystarczy jedna linijka:

```neon
application:
	mapping: App\Presentation\*\**Presenter
```

Jak działa mapowanie? Aby lepiej to zrozumieć, wyobraźmy sobie najpierw aplikację bez modułów. Chcemy, aby klasy prezenterów należały do przestrzeni nazw `App\Presentation`, tak aby prezenter `Home` był mapowany na klasę `App\Presentation\HomePresenter`. Można to osiągnąć za pomocą tej konfiguracji:

```neon
application:
	mapping: App\Presentation\*Presenter
```

Mapowanie działa poprzez zastąpienie gwiazdki w masce `App\Presentation\*Presenter` nazwą prezentera `Home`, w wyniku czego otrzymujemy ostateczną nazwę klasy `App\Presentation\HomePresenter`. Proste!

Jednakże, jak widać w przykładach w tym i innych rozdziałach, umieszczamy klasy prezenterów w podkatalogach o tej samej nazwie, na przykład prezenter `Home` mapuje się na klasę `App\Presentation\Home\HomePresenter`. Osiągamy to poprzez podwojenie dwukropka (wymaga Nette Application 3.2):

```neon
application:
	mapping: App\Presentation\**Presenter
```

Teraz przejdziemy do mapowania prezenterów na moduły. Możemy zdefiniować specyficzne mapowanie dla każdego modułu:

```neon
application:
	mapping:
		Front: App\Presentation\Front\**Presenter
		Admin: App\Presentation\Admin\**Presenter
		Api: App\Api\*Presenter
```

Zgodnie z tą konfiguracją, prezenter `Front:Home` mapuje do klasy `App\Presentation\Front\Home\HomePresenter`, podczas gdy prezenter `Api:OAuth` mapuje do klasy `App\Api\OAuthPresenter`.

Ponieważ moduły `Front` i `Admin` mają podobną metodę mapowania i prawdopodobnie będzie więcej takich modułów, można utworzyć ogólną regułę, która je zastąpi. Nowa gwiazdka dla modułu zostanie dodana do maski klasy:

```neon
application:
	mapping:
		*: App\Presentation\*\**Presenter
		Api: App\Api\*Presenter
```

Działa to również w przypadku głębiej zagnieżdżonych struktur katalogów, takich jak prezenter `Admin:User:Edit`, gdzie segment z gwiazdką powtarza się dla każdego poziomu i skutkuje klasą `App\Presentation\Admin\User\Edit\EditPresenter`.

Alternatywnym zapisem jest użycie tablicy składającej się z trzech segmentów zamiast ciągu znaków. Ten zapis jest równoważny poprzedniemu:

```neon
application:
	mapping:
		*: [App\Presentation, *, **Presenter]
		Api: [App\Api, '', *Presenter]
```
