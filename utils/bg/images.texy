Работа с изображения
********************

.[perex]
Класът [api:Nette\Utils\Image] улеснява манипулирането на изображения, например промяна на размера, изрязване, изостряне, рисуване или обединяване на няколко изображения.

PHP разполага с богат набор от функции за манипулиране на изображения. Но техният API не е много удобен за потребителите. Това нямаше да е Nette Framework, ако не бяха предложили секси API.

Монтаж:

```shell
composer require nette/utils
```

Всички примери предполагат, че псевдонимът вече е създаден:

```php
use Nette\Utils\Image;
```


Създаване на изображение .[#toc-creating-an-image]
==================================================

Създайте ново истинско цветно изображение, напр. 100×200:

```php
$image = Image::fromBlank(100, 200);
```

По желание можете да зададете цвят на фона (по подразбиране е черен):

```php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
```

Или да качите изображение от файл:

```php
$image = Image::fromFile('nette.jpg');
```

Трябва ли да определям формата на изображението при качване? Методът го връща във втория параметър:

```php
$image = Image::fromFile('nette.jpg', $type);
// $type ще Image::JPEG, Image::PNG, Image::GIF, Image::WEBP или Image::BMP
```

Откриването на разтоварване се извършва на адрес `Image::detectTypeFromFile()`.


Запазване на изображения .[#toc-save-the-image]
===============================================

Изображението може да бъде записано във файл:

```php
$image->save('resampled.jpg');
```

Можем да зададем качеството на компресията в диапазона 0...100 за JPEG (по подразбиране 85) и WEBP (по подразбиране 80) и 0...9 за PNG (по подразбиране 9):

```php
$image->save('resampled.jpg', 80); // JPEG, 80% качество
```

Ако форматът не е очевиден от разширението на файла, той може да бъде посочен чрез една от константите `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` и `Image::BMP`:

```php
$image->save('resampled.tmp', null, Image::JPEG);
```

Изображението може да бъде записано на променлива вместо на диск:

```php
$data = $image->toString(Image::JPEG, 80); // JPEG, 80% качество
```

или се изпраща директно на браузъра със съответния HTTP хедър `Content-Type`:

```php
// изпраща заглавие Content-Type: image/png
$image->send(Image::PNG);
```


Промяна на размера .[#toc-image-resize]
=======================================

Често срещана операция е промяна на размера на изображението. Действителните размери се връщат чрез методите `getWidth()` и `getHeight()`.

Методът `resize()` се използва за промяна на размера на изображението, така че то да не надвишава 500x300 пиксела (или ширината ще бъде точно 500 px, или височината точно 300 px, като едно от измеренията се изчислява, за да се запази съотношението на страните):

```php
$image->resize(500, 300);
```

Може да се зададе само едно измерение, а другото ще бъде изчислено:

```php
$image->resize(500, null); // ширина 500px, височина се изчислява

$image->resize(null, 300); // изчислена ширина, височина 300px
```

Всяко измерение може да бъде зададено като процент:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Поведението `resize` може да бъде повлияно от следните симптоми. Всички, с изключение на `Image::Stretch`, запазват съотношението на страните.

|---------------------------------------------------------------------------------------
| Флаг | Описание
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (по подразбиране)| получените размери ще бъдат по-малки или равни на заявените размери.
| `Image::OrBigger` | запълва (и евентуално надхвърля в едно измерение) целевата област
| `Image::Cover` | запълва целевата област и подрязва това, което е извън нея.
| `Image::ShrinkOnly` | свиване (избягва разтягане на малко изображение) само
| `Image::Stretch` | не запазвайте съотношението на страните


Флаговете се подават като трети аргумент на функцията:

```php
$image->resize(500, 300, Image::OrBigger);
```

Флаговете могат да се комбинират:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Изображенията могат да бъдат обърнати вертикално или хоризонтално, като се зададе едно от измеренията (или и двете) като отрицателно число:

```php
$flipped = $image->resize(null, '-100%'); // обръщане по вертикала

$flipped = $image->resize('-100%', '-100%'); // завъртане на 180°

$flipped = $image->resize(-125, 500); // промяна на размера и обръщане в хоризонтално положение
```

След като изображението е намалено, можете да подобрите външния му вид, като настроите остротата му:

```php
$image->sharpen();
```


Засаждане .[#toc-cropping]
==========================

Методът, използван за култивиране, е `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Както и при `resize()`, всички стойности могат да бъдат представени като проценти. Процентите за `$left` и `$top` се изчисляват от оставащото пространство, подобно на CSS свойството `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Изображението може също така да бъде автоматично изрязано, напр. черните граници могат да бъдат изрязани:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Методът `cropAuto()` е заместител на обект на функцията `imagecropauto()`, за повече подробности вижте [нейната документация |https://www.php.net/manual/en/function.imagecropauto].


Рисуване и редактиране .[#toc-drawing-and-editing]
==================================================

Можете да рисувате, можете да пишете, но не разкъсвайте страниците.

Всички функции за изображения на PHP, като например [imagefilledellipse |https://www.php.net/manual/en/function.imagefilledellipse.php], са достъпни за вас, но в обектно-ориентиран вид:

```php
$image->filledEllipse($cx, $cy, $width, $height, Image::rgb(255, 0, 0, 63));
```

Вижте [Преглед на методите |#Overview-of-Methods].


Комбиниране на няколко изображения .[#toc-merge-multiple-images]
================================================================

Можете лесно да вмъкнете друго изображение в снимка:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));

// координатите отново могат да бъдат зададени като процент
$blank->place($logo, '80%', '80%'); // вмъкване в долния десен ъгъл
```

Алфа каналът се спазва по време на вмъкването и можем да влияем върху прозрачността на вмъкнатото изображение (създаваме воден знак):

```php
$blank->place($image, '80%', '80%', 25); // прозрачността е 25%
```

Използването на този API е истинско удоволствие!


Преглед на методите .[#toc-overview-of-methods]
===============================================


static fromBlank(int $width, int $height, array $color=null): Image .[method]
-----------------------------------------------------------------------------
Създава ново истинско цветно изображение със зададени размери. Цветът по подразбиране е черен.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Чете изображение от файл и връща типа му като `$detectedFormat`. Поддържани типове: `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` и `Image::BMP`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Чете изображение от низ и връща неговия тип във формат `$detectedFormat`. Поддържани типове: `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` и `Image::BMP`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method]
---------------------------------------------------------------------------------
Създава цвят, който може да се използва в други методи, като например `ellipse()`, `fill()` и т.н.


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Връща разширението на файла за дадената константа `Image::XXX`.


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Връща типа mime за дадената константа `Image::XXX`.


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Връща типа mime като константа `Image::XXX` според разширението на файла.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Връща типа на изображението като константа `Image::XXX`, а размерите му - като `$width` и `$height`.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Връща типа на изображението от символния низ като константа `Image::XXX` и размерите му в параметрите `$width` и `$height`.


affine(array $affine, array $clip=null): Image .[method]
--------------------------------------------------------
Връща изображение, съдържащо афинно-трансформирано src изображение, като се използва опционална област на изрязване. ([повече информация |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Връща конкатенацията на две матрици за афинна трансформация, което е полезно, ако трябва да се приложат няколко трансформации към едно и също изображение. ([повече подробности |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, mixed $options=null): array .[method]
----------------------------------------------------------------
Връща матричната трансформационна матрица. ([повече подробности |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Позволява ви да използвате два различни режима на рисуване в трицветни изображения. В режим на наслагване цветовият компонент на алфа-канала, използван във всички функции за рисуване, като например `setPixel()`, определя каква част от основния цвят трябва да прозира. В резултат на това в този момент съществуващият цвят автоматично се смесва с цвета на чертежа и резултатът се записва в изображението. В резултат на това пикселът става непрозрачен. В режим без смесване цветът на карикатурата се копира дословно с информацията за алфа канала и се заменя с целевия пиксел. Режимът на смесване не е наличен, когато рисувате върху изображения от палитра. ([повече) |https://www.php.net/manual/en/function.imagealphablending]


antialias(bool $on): void .[method]
-----------------------------------
Активиране на изчертаването на изгладени линии и многоъгълници. Не поддържа алфа канали. Работи само с трицветни изображения.

Използването на изгладения примитив с прозрачен цвят на фона може да доведе до неочаквани резултати. Методът на смесване използва цвета на фона като всеки друг цвят. ([повече подробности |https://www.php.net/manual/en/function.imageantialias])


arc(int $x, int $y, int $w, int $h, int $start, int $end, int $color): void .[method]
-------------------------------------------------------------------------------------
Изчертава дъга от окръжност с център в зададените координати. ([повече подробности |https://www.php.net/manual/en/function.imagearc])


char(int $font, int $x, int $y, string $char, int $color): void .[method]
-------------------------------------------------------------------------
Изчертава първия символ `$char` в изображението с горен ляв ъгъл `$x`, `$y` (горният ляв ъгъл е равен на 0, 0), цвят `$color`. ([повече подробности |https://www.php.net/manual/en/function.imagechar])


charUp(int $font, int $x, int $y, string $char, int $color): void .[method]
---------------------------------------------------------------------------
Изчертава символа `$char` вертикално в посочената координата в посоченото изображение. ([повече подробности |https://www.php.net/manual/en/function.imagecharup])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Връща идентификатор на цвят, представляващ цвят, съставен от дадените компоненти RGB. Трябва да се извика, за да се създаде всеки цвят, който ще се използва в изображението. ([повече подробности |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Работи по същия начин като `colorAllocate()`, като се добавя параметърът за прозрачност `$alpha`. ([повече подробности |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Връща цветовия индекс на пиксела на зададеното място в изображението. Ако изображението е truecolor, тази функция връща стойността RGB за този пиксел като цяло число. Използвайте битово изместване и битова маска, за да получите достъп до отделните стойности за червения, зеления и синия компонент. ([повече) |https://www.php.net/manual/en/function.imagecolorat]


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Връща индекса на цвета в палитрата на изображението, който е "най-близък" до зададената стойност RGB. "Разстоянието" между желания цвят и всеки цвят в палитрата се изчислява така, сякаш стойностите RGB са точки в триизмерното пространство. ([повече подробности |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Връща цветовия индекс в палитрата на изображението, който е "най-близък" до зададената RGB стойност и ниво `$alpha`. ([повече) |https://www.php.net/manual/en/function.imagecolorclosestalpha]


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Получаване на цветовия индекс, който има цветовете нюанс, бяло и черно, най-близки до дадения цвят. ([повече подробности |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Премахва цвета, който е бил зададен преди това с помощта на `colorAllocate()` или `colorAllocateAlpha()`. ([повече подробности |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Връща индекса на посочения цвят в палитрата с изображения. ([повече подробности |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Връща индекса на посочения цвят + алфа в палитрата с изображения. ([повече подробности |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Комбинира цветовете от палитрата с тези от друг панел. ([повече подробности |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Връща цветовия индекс за желания цвят - точния цвят или най-близкия възможен алтернативен цвят. ([повече подробности |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Връща цветовия индекс за желания цвят - точния цвят или най-близкия възможен алтернативен цвят. ([повече подробности |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Задава посочения индекс в палитрата на посочения цвят. ([повече подробности |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Получава цвета на посочения индекс. ([повече подробности |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Връща броя на цветовете в палитрата на изображението. ([повече подробности |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(int $color=null): int .[method]
------------------------------------------------
Получава или задава прозрачен цвят за изображението. ([повече подробности |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Прилага конволюционна матрица към изображението, като използва посочените коефициент и отместване. ([повече подробности |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Изисква *Пълен GD разширение*, така че може да не работи навсякъде.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Копира част от `$src` в изображение, започващо от `$srcX`, `$srcY` с ширина `$srcW` и височина `$srcH`. Определената част ще бъде копирана в координатите `$dstX` и `$dstY`. ([повече подробности |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Копира част от `$src` в изображение, започващо от `$srcX`, `$srcY` с ширина `$srcW` и височина `$srcH`. Определената част ще бъде копирана в координатите `$dstX` и `$dstY`. ([повече подробности |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Копира част от `$src` в изображение, започващо от `$srcX`, `$srcY` с ширина `$srcW` и височина `$srcH`. Определената част ще бъде копирана в координатите `$dstX` и `$dstY`.

Тази функция е идентична с `copyMerge()`, с изключение на това, че при сливането запазва оригиналния оттенък, като преобразува целевите пиксели в сива скала преди операцията по копиране. ([повече подробности |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Копира правоъгълна част от едно изображение в друго изображение, като плавно интерполира стойностите на пикселите, така че изображението да запази висока яснота при намаляване на размера.

С други думи, `copyResampled()` взема правоъгълна област от `$src` с ширина `$srcW` и височина `$srcH` на позиция (`$srcX`, `$srcY`) и я поставя в правоъгълна област на изображението с ширина `$dstW` и височина `$dstH` на позиция (`$dstX`, `$dstY`).

Ако координатите на източника и местоназначението, ширината и височината са различни, фрагментът от изображението се разтяга или компресира съответно. Координатите се отнасят за горния ляв ъгъл. Тази функция може да се използва за копиране на области от едно и също изображение, но ако областите се припокриват, резултатите не са предвидими. ([повече подробности |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Копира правоъгълната част на едно изображение върху друго изображение. С други думи, `copyResized()` взема правоъгълната област от `$src` с ширина `$srcW` и височина `$srcH` на позиция (`$srcX`, `$srcY`) и я поставя в правоъгълната област на изображението с ширина `$dstW` ] и височина `$dstH` на позиция (`$dstX`, `$dstY`).

Ако координатите на източника и местоназначението, ширината и височината са различни, фрагментът от изображението се разтяга или компресира съответно. Координатите се отнасят за горния ляв ъгъл. Тази функция може да се използва за копиране на области от едно и също изображение, но ако областите се припокриват, резултатите не са предвидими. ([повече подробности |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Изрязване на изображението до определена правоъгълна област. Размерът може да бъде зададен като цяло число в пиксели или като низ в проценти (напр. `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, int $color=-1): Image .[method]
---------------------------------------------------------------------------
Автоматично изрязване на изображението в съответствие със зададеното `$mode`. ([прочети повече) |https://www.php.net/manual/en/function.imagecropauto]


ellipse(int $cx, int $cy, int $w, int $h, int $color): void .[method]
---------------------------------------------------------------------
Изчертава елипса с център в зададените координати. ([повече подробности |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, int $color): void .[method]
------------------------------------------------
Запълва областта, започваща от зададената координата (горе вляво 0, 0), със зададеното `$color`. ([повече подробности |https://www.php.net/manual/en/function.imagefill])


filledArc(int $cx, int $cy, int $w, int $h, int $s, int $e, int $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------
Изчертава непълна дъга с център в зададените координати. ([повече подробности |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $cx, int $cy, int $w, int $h, int $color): void .[method]
---------------------------------------------------------------------------
Изчертава елипса с център в зададените координати. ([повече подробности |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, int $numPoints, int $color): void .[method]
------------------------------------------------------------------------
Създава запълнен многоъгълник върху изображението. ([повече подробности |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, int $color): void .[method]
-------------------------------------------------------------------------------
Създава правоъгълник, запълнен с `$color` в изображението, като започва от точка 1 и завършва в точка 2. Точка 0, 0 е горният ляв ъгъл на изображението. ([повече подробности |https://www.php.net/manual/en/function.imagefilledrectangle])


fillToBorder(int $x, int $y, int $border, int $color): void .[method]
---------------------------------------------------------------------
Създава запълване, чийто цвят на границата се определя от `$border`. Началната точка на запълването е `$x`, `$y` (горният ляв ъгъл - 0, 0), а областта се запълва с цвета `$color`. ([повече подробности |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Прилага зададения филтър `$filtertype` към изображението. ([повече подробности |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Инвертира изображението на посочения адрес `$mode`. ([прочети повече) |https://www.php.net/manual/en/function.imageflip]


ftText(int $size, int $angle, int $x, int $y, int $col, string $fontFile, string $text, array $extrainfo=null): array .[method]
-------------------------------------------------------------------------------------------------------------------------------
Напишете текст върху изображението, като използвате шрифтове FreeType 2. ([още) |https://www.php.net/manual/en/function.imagefttext]


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Прилагане на гама корекция на изображението спрямо входната и изходната гама. ([повече подробности |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Връща текущото изрязване, т.е. областта, извън която няма да бъдат изчертавани пиксели. ([повече подробности |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Връща височината на изображението.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Връща ресурса източник.


getWidth(): int .[method]
-------------------------
Връща ширината на изображението.


interlace(int $interlace=null): int .[method]
---------------------------------------------
Включва или изключва режима с преливане. Ако е зададен режим с преплитане и изображението е записано във формат JPEG, изображението ще бъде записано като прогресивен JPEG. ([повече подробности |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Определете дали изображението е истинскоцветно. ([прочети повече) |https://www.php.net/manual/en/function.imageistruecolor]


layerEffect(int $effect): void .[method]
----------------------------------------
Задайте флага за алфа смесване, за да използвате ефекти на наслояване. ([повече подробности |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, int $color): void .[method]
--------------------------------------------------------------------
Начертава линия между две дадени точки. ([повече подробности |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, int $numPoints, int $color): void .[method]
----------------------------------------------------------------------
Начертава отворен многоъгълник в изображението. За разлика от `polygon()`, между последната и първата точка не се прокарва линия. ([повече подробности |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Копира палитрата от `$source` в изображението. ([повече подробности |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Преобразува изображение, базирано на палитра, в пълноцветно изображение. ([повече подробности |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Копира `$image` в изображението с координати `$left` и `$top`. Координатите могат да бъдат зададени като цели числа в пиксели или като низове в проценти (напр. `'50%'`).


polygon(array $points, int $numPoints, int $color): void .[method]
------------------------------------------------------------------
Създава многоъгълник в изображението. ([повече подробности |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, int $col): void .[method]
-----------------------------------------------------------------------
Създава правоъгълник със зададени координати. ([повече подробности |https://www.php.net/manual/en/function.imagerectangle])


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Промяна на размера на изображението, [допълнителна информация |#Image-Resize]. Размерите могат да бъдат зададени като цели числа в пиксели или като низове в проценти (напр. `'50%'`).


resolution(int $resX=null, int $resY=null): mixed .[method]
-----------------------------------------------------------
Задава или връща разделителната способност на изображението в DPI (точки на инч). Ако не е посочен нито един от незадължителните параметри, текущата резолюция се връща като индексирано поле. Ако е посочен само `$resX`, хоризонталната и вертикалната разделителна способност се задава на тази стойност. Ако са зададени и двата незадължителни параметъра, хоризонталната и вертикалната разделителна способност се настройват на тези стойности.

Разделителната способност се използва като метаинформация само при четене и запис на изображения във формати, които поддържат такава информация (понастоящем PNG и JPEG). Тя не оказва влияние върху операциите по боядисване. Разделителната способност по подразбиране за нови изображения е 96 DPI. ([прочети повече) |https://www.php.net/manual/en/function.imageresolution]


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Завърта изображението със зададената стойност `$angle` в градуси. Центърът на завъртане е центърът на изображението и завъртяното изображение може да има различен размер от оригиналното изображение. ([повече подробности |https://www.php.net/manual/en/function.imagerotate])

.[note]
Изисква *Пълен GD разширение*, така че може да не работи навсякъде.


save(string $file, int $quality=null, int $type=null): void .[method]
---------------------------------------------------------------------
Записва изображението във файл.

Качеството на компресията е между 0...100 за JPEG (по подразбиране 85) и WEBP (по подразбиране 80) и 0...9 за PNG (по подразбиране 9). Ако типът не е очевиден от разширението на файла, можете да го посочите, като използвате една от константите `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` и `Image::BMP`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Задава флага за запазване на пълната информация за алфа канала (за разлика от монохромната прозрачност) при запазване на PNG изображения.

За да запазите алфа канала, алфа квантуването трябва да е деактивирано (`alphaBlending(false)`). ([още) |https://www.php.net/manual/en/function.imagesavealpha]


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Мащабирайте изображението, като използвате зададения алгоритъм за интерполация. ([повече подробности |https://www.php.net/manual/en/function.imagescale])


send(int $type=Image::JPEG, int $quality=null): void .[method]
--------------------------------------------------------------
Извежда изображението в браузъра.

Качеството на компресията е между 0...100 за JPEG (по подразбиране 85) и WEBP (по подразбиране 80) и 0...9 за PNG (по подразбиране 9). Типът е една от константите `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` и `Image::BMP`.


setBrush(Image $brush): void .[method]
--------------------------------------
Задава изображението на четката, което да се използва във всички функции за рисуване на линии (напр. `line()` и `polygon()`) при рисуване със специални цветове IMG_COLOR_BRUSHED или IMG_COLOR_STYLEDBRUSHED. ([още) |https://www.php.net/manual/en/function.imagesetbrush]


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Задава текущото изрязване, т.е. областта, извън която няма да бъдат изчертавани пиксели. ([повече подробности |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Задава метода на интерполация, който влияе на методите `rotate()` и `affine()`. ([повече подробности |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, int $color): void .[method]
----------------------------------------------------
Изчертава пиксел в зададена координата. ([повече подробности |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Задава стила, който да се използва от всички функции за рисуване на линии (например `line()` и `polygon()`) при рисуване на линии със специален цвят IMG_COLOR_STYLED или линии на изображения с цвят IMG_COLOR_STYLEDBRUSHED. ([още |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Задава дебелината на линията при чертане на правоъгълници, многоъгълници, дъги и др. В `$thickness` пиксела. ([повече подробности |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Задава изображението на плочките, което да се използва във всички функции за запълване на региони (напр. `fill()` и `filledPolygon()`), когато е запълнено със специалния цвят IMG_COLOR_TILED.

Плочка е изображение, което се използва за запълване на област с повтарящ се модел. Всяко изображение може да бъде използвано като плочка и чрез посочване на индекса на прозрачния цвят на изображението на плочката с `colorTransparent()`, можете да създадете плочка, в която определени части от основния регион ще прозират. ([повече подробности |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Увеличава рязкостта на изображението.

.[note]
Изисква *Пълен GD разширение*, така че може да не работи навсякъде.


string(int $font, int $x, int $y, string $str, int $col): void .[method]
------------------------------------------------------------------------
Извежда низ в зададените координати. ([повече подробности |https://www.php.net/manual/en/function.imagestring])


stringUp(int $font, int $x, int $y, string $s, int $col): void .[method]
------------------------------------------------------------------------
Извежда низ по вертикала в зададените координати. ([повече подробности |https://www.php.net/manual/en/function.imagestringup])


toString(int $type=Image::JPEG, int $quality=null): string .[method]
--------------------------------------------------------------------
Записва изображението в низ.

Качеството на компресията е в диапазона 0...100 за JPEG (по подразбиране 85) и WEBP (по подразбиране 80) и 0...9 за PNG (по подразбиране 9). Типът е една от константите `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` и `Image::BMP`.


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Преобразува истинско цветно изображение в палитра. ([прочети повече) |https://www.php.net/manual/en/function.imagetruecolortopalette]


ttfText(int $size, int $angle, int $x, int $y, int $color, string $fontfile, string $text): array .[method]
-----------------------------------------------------------------------------------------------------------
Отпечатва зададен текст в изображение, като използва шрифтове TrueType. ([повече подробности |https://www.php.net/manual/en/function.imagettftext])
