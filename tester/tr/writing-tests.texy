Test Yazma
**********

.[perex]
Nette Tester için test yazmak benzersizdir çünkü her test ayrı ayrı çalıştırılabilen bir PHP betiğidir. Bu büyük bir potansiyel barındırır.
Testi yazarken bile, onu kolayca çalıştırabilir ve doğru çalışıp çalışmadığını öğrenebilirsiniz. Çalışmıyorsa, IDE'de kolayca adım adım ilerleyebilir ve hatayı arayabilirsiniz.

Testi tarayıcıda bile açabilirsiniz. Ama en önemlisi - onu çalıştırarak testi gerçekleştirirsiniz. Geçip geçmediğini veya başarısız olup olmadığını hemen öğrenirsiniz.

Giriş bölümünde, diziyle çalışmanın gerçekten basit bir testini [gösterdik|guide#Čím je Tester unikátní?]. Şimdi test edeceğimiz kendi sınıfımızı oluşturacağız, ancak o da basit olacak.

Bir kütüphane veya proje için tipik bir dizin yapısıyla başlayalım. Testleri kodun geri kalanından ayırmak önemlidir, örneğin dağıtım için, çünkü testleri canlı sunucuya yüklemek istemeyiz. Yapı örneğin şöyle olabilir:

```
├── src/           # test edeceğimiz kod
│   ├── Rectangle.php
│   └── ...
├── tests/         # testler
│   ├── bootstrap.php
│   ├── RectangleTest.php
│   └── ...
├── vendor/
└── composer.json
```

Ve şimdi bireysel dosyaları oluşturacağız. Test edilen sınıfla başlayacağız, onu `src/Rectangle.php` dosyasına yerleştireceğiz

```php .{file:src/Rectangle.php}
<?php
class Rectangle
{
	private float $width;
	private float $height;

	public function __construct(float $width, float $height)
	{
		if ($width < 0 || $height < 0) {
			throw new InvalidArgumentException('Boyut negatif olmamalıdır.');
		}
		$this->width = $width;
		$this->height = $height;
	}

	public function getArea(): float
	{
		return $this->width * $this->height;
	}

	public function isSquare(): bool
	{
		return $this->width === $this->height;
	}
}
```

Ve onun için bir test oluşturacağız. Test dosyasının adı `*Test.php` veya `*.phpt` maskesine uymalıdır, örneğin `RectangleTest.php` varyantını seçeceğiz:


```php .{file:tests/RectangleTest.php}
<?php
use Tester\Assert;

require __DIR__ . '/bootstrap.php';

// genel dikdörtgen
$rect = new Rectangle(10, 20);
Assert::same(200.0, $rect->getArea());  # beklenen sonuçları doğrula
Assert::false($rect->isSquare());
```

Gördüğünüz gibi, `Assert::same()` gibi sözde [doğrulama ifadesi metotları|assertions], gerçek değerin beklenen değere karşılık geldiğini onaylamak için kullanılır.

Geriye kalan son adım `bootstrap.php` dosyasıdır. Bu, tüm testler için ortak olan kodu içerir, örneğin sınıfların otomatik yüklenmesi, ortam yapılandırması, geçici bir dizin oluşturma, yardımcı fonksiyonlar vb. Tüm testler bootstrap'ı yükler ve ardından yalnızca test etmeye odaklanır. Bootstrap şöyle görünebilir:

```php .{file:tests/bootstrap.php}
<?php
require __DIR__ . '/vendor/autoload.php';   # Composer autoloader'ını yükler

Tester\Environment::setup();                # Nette Tester'ı başlatır

// ve diğer yapılandırmalar (bu sadece bir örnektir, bizim durumumuzda gerekli değildir)
date_default_timezone_set('Europe/Prague');
define('TmpDir', '/tmp/app-tests');
```

.[note]
Belirtilen bootstrap, Composer autoloader'ının `Rectangle.php` sınıfını da yükleyebileceğini varsayar. Bu, örneğin `composer.json` içinde [autoload bölümünü ayarlayarak|best-practices:composer#autoloading] vb. başarılabilir.

Testi şimdi komut satırından herhangi bir başka bağımsız PHP betiği gibi çalıştırabiliriz. İlk çalıştırma olası sözdizimi hatalarını ortaya çıkaracak ve hiçbir yerde yazım hatası yoksa, şunları yazdıracaktır:

/--pre .[terminal]
$ php RectangleTest.php

<span style="color:#FFF; background-color:#090">OK</span>
\--

Eğer testteki iddiayı yanlış `Assert::same(123, $rect->getArea());` olarak değiştirirsek, şu olur:

/--pre .[terminal]
$ php RectangleTest.php

<span style="color: #FFF">Başarısız: </span><span style="color: #FF0">200.0</span><span style="color: #FFF"> olmalı </span><span style="color: #FF0">123</span>

<span style="color: #CCC">içinde </span><span style="color: #FFF">RectangleTest.php(5)</span><span style="color: #808080"> Assert::same(123, $rect->getArea());</span>

<span style="color: #FFF; background-color: #900">BAŞARISIZLIK</span>
\--


Test yazarken tüm uç durumları yakalamak iyidir. Örneğin, girdi sıfır, negatif bir sayı olduğunda, diğer durumlarda örneğin boş bir dize, null vb. olduğunda. Aslında sizi düşünmeye ve bu tür durumlarda kodun nasıl davranması gerektiğine karar vermeye zorlar. Testler daha sonra davranışı sabitler.

Bizim durumumuzda, negatif bir değer bir istisna atmalıdır, bunu [Assert::exception()|Assertions#Assert::exception] kullanarak doğrularız:

```php .{file:tests/RectangleTest.php}
// genişlik negatif olmamalıdır
Assert::exception(
	fn() => new Rectangle(-1, 20),
	InvalidArgumentException::class,
	'Boyut negatif olmamalıdır.',
);
```

Ve yükseklik için benzer bir test ekleriz. Son olarak, her iki boyut da aynıysa `isSquare()`'in `true` döndürdüğünü test ederiz. Alıştırma olarak bu tür testleri yazmayı deneyin.


Daha Okunabilir Testler
=======================

Test dosyasının boyutu büyüyebilir ve hızla okunaksız hale gelebilir. Bu nedenle, bireysel test edilen alanları ayrı fonksiyonlarda gruplamak pratiktir.

Önce daha basit, ancak zarif bir varyantı göstereceğiz, yani global `test()` fonksiyonunu kullanarak. Tester bunu otomatik olarak oluşturmaz, böylece kodunuzda aynı ada sahip bir fonksiyonunuz varsa çakışma olmaz. Onu, `bootstrap.php` dosyasında çağıracağınız `setupFunctions()` metodu oluşturur:

```php .{file:tests/bootstrap.php}
Tester\Environment::setup();
Tester\Environment::setupFunctions();
```

Bu fonksiyonu kullanarak, test dosyasını adlandırılmış birimlere güzelce bölebiliriz. Çalıştırıldığında, açıklamalar sırayla yazdırılacaktır.

```php .{file:tests/RectangleTest.php}
<?php
use Tester\Assert;

require __DIR__ . '/bootstrap.php';

test('genel dikdörtgen', function () {
	$rect = new Rectangle(10, 20);
	Assert::same(200.0, $rect->getArea());
	Assert::false($rect->isSquare());
});

test('genel kare', function () {
	$rect = new Rectangle(5, 5);
	Assert::same(25.0, $rect->getArea());
	Assert::true($rect->isSquare());
});

test('boyutlar negatif olmamalıdır', function () {
	Assert::exception(
		fn() => new Rectangle(-1, 20),
        InvalidArgumentException::class,
	);

	Assert::exception(
		fn() => new Rectangle(10, -1),
        InvalidArgumentException::class,
	);
});
```

Her testten önce veya sonra kod çalıştırmanız gerekiyorsa, onu `setUp()` veya `tearDown()` fonksiyonuna aktarın:

```php
setUp(function () {
	// her test() öncesinde çalışacak başlatma kodu
});
```

İkinci varyant nesne yönelimlidir. Sözde bir TestCase oluştururuz, bu, bireysel birimlerin test– ile başlayan adlara sahip metotları temsil ettiği bir sınıftır.

```php .{file:tests/RectangleTest.php}
class RectangleTest extends Tester\TestCase
{
	public function testGeneralOblong()
	{
		$rect = new Rectangle(10, 20);
		Assert::same(200.0, $rect->getArea());
		Assert::false($rect->isSquare());
	}

	public function testGeneralSquare()
	{
		$rect = new Rectangle(5, 5);
		Assert::same(25.0, $rect->getArea());
		Assert::true($rect->isSquare());
	}

	/** @throws InvalidArgumentException */
	public function testWidthMustNotBeNegative()
	{
		$rect = new Rectangle(-1, 20);
	}

	/** @throws InvalidArgumentException */
	public function testHeightMustNotBeNegative()
	{
		$rect = new Rectangle(10, -1);
	}
}

// Test metotlarını çalıştırma
(new RectangleTest)->run();
```

İstisnaları test etmek için bu sefer `@throw` ek açıklamasını kullandık. Daha fazlasını [TestCase] bölümünde öğreneceksiniz.


Yardımcı Fonksiyonlar
=====================

Nette Tester, örneğin HTML belgesinin içeriğini test etme, dosyalarla çalışan fonksiyonları test etme vb. konularda size yardımcı olabilecek birkaç sınıf ve fonksiyon içerir.

Açıklamalarını [Yardımcı Sınıflar|helpers] sayfasında bulabilirsiniz.


Ek Açıklamalar ve Testleri Atlama
=================================

Testlerin çalıştırılması, dosyanın başındaki phpDoc yorumu şeklindeki ek açıklamalarla etkilenebilir. Örneğin şöyle görünebilir:

```php .{file:tests/RectangleTest.php}
/**
 * @phpExtension pdo, pdo_pgsql
 * @phpVersion >= 7.2
 */
```

Belirtilen ek açıklamalar, testin yalnızca PHP sürüm 7.2 veya üstüyle ve pdo ve pdo_pgsql PHP uzantıları mevcutsa çalıştırılması gerektiğini söyler. Bu ek açıklamalar [komut satırı test çalıştırıcısı|running-tests] tarafından yönetilir, bu da koşullar karşılanmazsa testi atlar ve çıktıda `s` - skipped harfiyle işaretler. Ancak, testin manuel olarak çalıştırılmasında hiçbir etkileri yoktur.

Ek açıklamaların açıklamalarını [Test Ek Açıklamaları|test-annotations] sayfasında bulabilirsiniz.

Test, `Environment::skip()` kullanarak kendi koşulunun karşılanmasına bağlı olarak da atlanabilir. Örneğin, bu Windows'taki testleri atlar:

```php
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
	Tester\Environment::skip('UNIX gerektirir.');
}
```


Dizin Yapısı
============

Biraz daha büyük kütüphanelerde veya projelerde, test dizinini test edilen sınıfın ad alanına göre alt dizinlere ayırmanızı öneririz:

```
└── tests/
	├── NamespaceOne/
	│   ├── MyClass.getUsers.phpt
	│   ├── MyClass.setUsers.phpt
	│   └── ...
	│
	├── NamespaceTwo/
	│   ├── MyClass.creating.phpt
	│   ├── MyClass.dropping.phpt
	│   └── ...
	│
	├── bootstrap.php
	└── ...
```

Böylece testleri tek bir ad alanından, yani alt dizinden çalıştırabileceksiniz:

/--pre .[terminal]
tester tests/NamespaceOne
\--


Özel Durumlar
=============

Tek bir doğrulama ifadesi metodu bile çağırmayan bir test şüphelidir ve hatalı olarak değerlendirilir:

/--pre .[terminal]
<span style="color: #FFF; background-color: #900">Hata: Bu test bir doğrulama ifadesi yürütmeyi unutuyor.</span>
\--

Eğer testin gerçekten doğrulama ifadesi çağrısı olmadan geçerli kabul edilmesi gerekiyorsa, örneğin `Assert::true(true)` çağırın.

Ayrıca, testi bir hata mesajıyla sonlandırmak için `exit()` ve `die()` kullanmak da yanıltıcı olabilir. Örneğin, `exit('Bağlantıda hata')` testi 0 dönüş koduyla sonlandırır, bu da başarıyı gösterir. `Assert::fail('Bağlantıda hata')` kullanın.
