Şablonlar
*********

.[perex]
Nette [Latte |latte:] şablon sistemini kullanır. Latte, PHP için en güvenli şablon sistemi ve aynı zamanda en sezgisel sistem olduğu için kullanılır. Yeni bir şey öğrenmenize gerek yok, sadece PHP ve birkaç Latte etiketi bilmeniz yeterli.

Sayfanın düzen şablonu + eylem şablonundan tamamlanması olağandır. Bir düzen şablonu böyle görünebilir, `{block}` bloklarına ve `{include}` etiketine dikkat edin:

```latte
<!DOCTYPE html>
<html>
<head>
	<title>{block title}My App{/block}</title>
</head>
<body>
	<header>...</header>
	{include content}
	<footer>...</footer>
</body>
</html>
```

Bu da eylem şablonu olabilir:

```latte
{block title}Homepage{/block}

{block content}
<h1>Homepage</h1>
...
{/block}
```

Düzende `{include content}` yerine eklenen `content` bloğunu tanımlar ve ayrıca düzende `{block title}` 'un üzerine yazılan `title` bloğunu yeniden tanımlar. Sonucu hayal etmeye çalışın.


Şablon Arama .[#toc-search-for-templates]
-----------------------------------------

Şablonların yolu basit bir mantığa göre çıkarılır. Sunucu sınıfının bulunduğu dizine göre bu şablon dosyalarından birinin var olup olmadığına bakılır, burada `<Presenter>` geçerli sunum yapan kişinin adı ve `<view>` geçerli eylemin adıdır:

- `templates/<Presenter>/<view>.latte`
- `templates/<Presenter>.<view>.latte`

Şablonu bulamazsa, yanıt [404 hatası |presenters#Error 404 etc.] olur.

Ayrıca `$this->setView('otherView')` adresini kullanarak görünümü değiştirebilirsiniz. Ya da arama yapmak yerine `$this->template->setFile('/path/to/template.latte')` adresini kullanarak şablon dosyasının adını doğrudan belirtin.

.[note]
Olası dosya yollarından oluşan bir dizi döndüren [formatTemplateFiles |api:Nette\Application\UI\Presenter::formatTemplateFiles()] yöntemini geçersiz kılarak şablonların arandığı yolları değiştirebilirsiniz.

Düzen aşağıdaki dosyalarda beklenmektedir:

- `templates/<Presenter>/@<layout>.latte`
- `templates/<Presenter>.@<layout>.latte`
- `templates/@<layout>.latte` birden fazla sunumcu için ortak düzen

`<Presenter>` geçerli sunum yapan kişinin adı ve `<layout>` varsayılan olarak `'layout'` olan düzenin adıdır. İsim `$this->setLayout('otherLayout')` ile değiştirilebilir, böylece `@otherLayout.latte` dosyaları denenecektir.

Düzen şablonunun dosya adını `$this->setLayout('/path/to/template.latte')` adresini kullanarak doğrudan da belirtebilirsiniz. `$this->setLayout(false)` adresini kullanmak düzen aramayı devre dışı bırakacaktır.

.[note]
Olası dosya yollarından oluşan bir dizi döndüren [formatLayoutTemplateFiles |api:Nette\Application\UI\Presenter::formatLayoutTemplateFiles()] yöntemini geçersiz kılarak şablonların arandığı yolları değiştirebilirsiniz.


Şablondaki Değişkenler .[#toc-variables-in-the-template]
--------------------------------------------------------

Değişkenler `$this->template` adresine yazılarak şablona aktarılır ve daha sonra yerel değişkenler olarak şablonda kullanılabilir:

```php
$this->template->article = $this->articles->getById($id);
```

Bu şekilde herhangi bir değişkeni şablonlara kolayca aktarabiliriz. Ancak, sağlam uygulamalar geliştirirken, kendimizi sınırlamak genellikle daha yararlıdır. Örneğin, şablonun beklediği değişkenlerin ve türlerinin bir listesini açıkça tanımlayarak. Bu, PHP'nin tip kontrolü yapmasına, IDE'nin doğru şekilde otomatik tamamlama yapmasına ve statik analizin hataları tespit etmesine olanak tanıyacaktır.

Peki böyle bir numaralandırmayı nasıl tanımlarız? Basitçe bir sınıf ve onun özellikleri şeklinde. Bunu presenter'a benzer şekilde adlandırıyoruz, ancak sonunda `Template` var:

```php
/**
 * @property-read ArticleTemplate $template
 */
class ArticlePresenter extends Nette\Application\UI\Presenter
{
}

class ArticleTemplate extends Nette\Bridges\ApplicationLatte\Template
{
	public Model\Article $article;
	public Nette\Security\User $user;

	// ve diğer değişkenler
}
```

Sunucudaki `$this->template` nesnesi artık `ArticleTemplate` sınıfının bir örneği olacaktır. Böylece PHP, yazıldıklarında bildirilen türleri kontrol edecektir. PHP 8.2'den başlayarak, varolmayan bir değişkene yazma konusunda da uyaracaktır, önceki sürümlerde aynı şey [Nette\SmartObject |utils:smartobject] özelliği kullanılarak elde edilebilir.

`@property-read` ek açıklaması IDE ve statik analiz içindir, otomatik tamamlamanın çalışmasını sağlar, "PhpStorm ve $this->template için kod tamamlama":https://blog.nette.org/en/phpstorm-and-code-completion-for-this-template bölümüne bakın.

[* phpstorm-completion.webp *]

Şablonlarda da fısıldama lüksünün tadını çıkarabilirsiniz, sadece PhpStorm'da Latte eklentisini kurun ve şablonun başında sınıf adını belirtin, "Latte: sistem nasıl yazılır":https://blog.nette.org/tr/latte-tip-sistemi-nasil-kullanilir makalesine bakın:

```latte
{templateType App\Presenters\ArticleTemplate}
...
```

Şablonlar bileşenlerde de bu şekilde çalışır, sadece adlandırma kuralını takip edin ve bileşen için bir şablon sınıfı `FifteenTemplate` oluşturun, örneğin `FifteenControl`.

Başka bir sınıfın örneği olarak bir `$template` oluşturmanız gerekiyorsa, `createTemplate()` yöntemini kullanın:

```php
public function renderDefault(): void
{
	$template = $this->createTemplate(SpecialTemplate::class);
	$template->foo = 123;
	// ...
	$this->sendTemplate($template);
}
```


Varsayılan Değişkenler .[#toc-default-variables]
------------------------------------------------

Sunucular ve bileşenler çeşitli faydalı değişkenleri şablonlara otomatik olarak aktarır:

- `$basePath` kök dizine giden mutlak bir URL yoludur (örneğin `/CD-collection`)
- `$baseUrl` kök dizine mutlak bir URL'dir (örneğin `http://localhost/CD-collection`)
- `$user` [kullanıcıyı temsil eden bir nesnedir|security:authentication]
- `$presenter` şu anki sunucu
- `$control` geçerli bileşen veya sunum yapan kişidir
- `$flashes` yöntem tarafından gönderilen [mesajların |presenters#flash-messages] listesi `flashMessage()`

Özel bir şablon sınıfı kullanıyorsanız, bu değişkenler için bir özellik oluşturduğunuzda bu değişkenler geçirilir.


Bağlantı Oluşturma .[#toc-creating-links]
-----------------------------------------

Şablonda diğer sunumculara ve eylemlere aşağıdaki gibi bağlantılar oluşturuyoruz:

```latte
<a n:href="Product:show">detail</a>
```

Öznitelik `n:href` HTML etiketleri için çok kullanışlıdır `<a>`. Bağlantıyı başka bir yere, örneğin metnin içine yazdırmak istiyorsak `{link}` adresini kullanırız:

```latte
URL is: {link Homepage:default}
```

Daha fazla bilgi için [Bağlantı Oluşturma |Creating Links] bölümüne bakın.


Özel Filtreler, Etiketler vb. .[#toc-custom-filters-tags-etc]
-------------------------------------------------------------

Latte şablonlama sistemi özel filtreler, fonksiyonlar, etiketler vb. ile genişletilebilir. Bu işlem doğrudan `render<View>` veya `beforeRender()` yöntemini kullanabilirsiniz:

```php
public function beforeRender(): void
{
	// bir filtre ekleme
	$this->template->addFilter('foo', /* ... */);

	// veya Latte\Engine nesnesini doğrudan yapılandırın
	$latte = $this->template->getLatte();
	$latte->addFilterLoader(/* ... */);
}
```

Latte sürüm 3, her web projesi için bir [uzantı |latte:creating-extension] oluşturarak daha gelişmiş bir yol sunar. İşte böyle bir sınıfın kabaca bir örneği:

```php
namespace App\Templating;

final class LatteExtension extends Latte\Extension
{
	public function __construct(
		private App\Model\Facade $facade,
		private Nette\Security\User $user,
		// ...
	) {
	}

	public function getFilters(): array
	{
		return [
			'timeAgoInWords' => $this->filterTimeAgoInWords(...),
			'money' => $this->filterMoney(...),
			// ...
		];
	}

	public function getFunctions(): array
	{
		return [
			'canEditArticle' =>
				fn($article) => $this->facade->canEditArticle($article, $this->user->getId()),
			// ...
		];
	}

	// ...
}
```

[configuration |configuration#Latte] kullanarak kaydediyoruz:

```neon
latte:
	extensions:
		- App\Templating\LatteExtension
```
