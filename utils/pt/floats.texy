Trabalhando com floats
**********************

.[perex]
[api:Nette\Utils\Floats] é uma classe estática com funções úteis para comparar números de ponto flutuante.


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos pressupõem a criação de um alias:

```php
use Nette\Utils\Floats;
```


Motivação
=========

Você pode se perguntar, por que uma classe para comparar floats? Afinal, posso usar os operadores `<`, `>`, `===` e está tudo resolvido.
Não é bem verdade. O que você acha que este código imprimirá?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Se você executar o código, alguns de vocês certamente ficarão surpresos que o programa imprimiu `not same`.

Operações matemáticas com números decimais podem levar a erros devido à conversão entre os sistemas decimal e binário. Por exemplo, `0.1 + 0.2` resulta em `0.300000000000000044…`. Portanto, ao comparar, devemos tolerar uma pequena diferença a partir de uma certa casa decimal.

E é exatamente isso que a classe `Floats` faz. A seguinte comparação agora funcionará como esperado:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Tentar comparar `NAN` lançará uma exceção `\LogicException`.

.[tip]
A classe `Floats` tolera diferenças menores que `1e-10`. Se você precisar trabalhar com maior precisão, use a biblioteca BCMath.


Comparando floats
=================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Retorna `true` se `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Retorna `true` se `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Retorna `true` se `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Retorna `true` se `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Retorna `true` se `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Se `$a` < `$b`, retorna `-1`; se forem iguais, retorna `0`; e se `$a` > `$b`, retorna `1`.

Pode ser usado, por exemplo, com a função `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr agora é [-3.5, 1, 2, 5]
```


Funções auxiliares
==================


isZero(float $value): bool .[method]
------------------------------------

Retorna `true` se o valor for igual a zero.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Retorna `true` se o valor for um número inteiro.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
