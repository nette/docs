Erste Schritte mit Tester
*************************
<div class=perex>


Auch gute Programmierer machen Fehler. Der Unterschied zwischen einem guten und einem schlechten Programmierer besteht darin, dass ein guter Programmierer den Fehler nur einmal macht und ihn beim nächsten Mal mit Hilfe automatisierter Tests entdeckt.

- "Wer nicht testet, ist dazu verdammt, seine eigenen Fehler zu wiederholen." (weises Sprichwort)
- "Wenn wir einen Fehler beseitigt haben, taucht ein neuer auf." (Murphy's Law)
- "Wann immer Sie in Versuchung kommen, eine Anweisung zu drucken, schreiben Sie sie stattdessen als Test." (Martin Fowler)

</div>

Haben Sie jemals den folgenden Code in PHP geschrieben?

```php
$obj = new MyClass;
$result = $obj->process($input);

var_dump($result);
```

Haben Sie schon einmal das Ergebnis eines Funktionsaufrufs ausgegeben, nur um mit dem Auge zu prüfen, ob er das liefert, was er liefern sollte? Sie tun das sicherlich viele Male am Tag. Hand aufs Herz, wenn alles funktioniert, löschen Sie dann diesen Code und erwarten, dass die Klasse in Zukunft nicht mehr kaputt geht? Murphy's Law garantiert das Gegenteil :-)

Tatsächlich haben Sie den Test geschrieben. Er muss nur geringfügig geändert werden, damit er nicht von uns überprüft werden muss, sondern sich einfach selbst überprüfen kann. Und wenn Sie ihn nicht gelöscht haben, können wir ihn jederzeit in der Zukunft ausführen, um zu überprüfen, ob alles noch so funktioniert, wie es sollte. Möglicherweise erstellen Sie im Laufe der Zeit eine große Anzahl dieser Tests, so dass es schön wäre, wenn wir sie automatisch ausführen könnten.

Und genau dabei hilft Nette Tester.


Was macht Tester so einzigartig? .[#toc-what-makes-tester-unique]
=================================================================

Das Schreiben von Tests für Nette Tester ist einzigartig, da **jeder Test ein Standard-PHP-Skript ist, das eigenständig ausgeführt werden kann**.

Wenn Sie also einen Test schreiben, können Sie ihn einfach ausführen, um zu sehen, ob es einen Programmierfehler gibt. Wenn er richtig funktioniert. Wenn nicht, können Sie das Programm einfach in Ihrer IDE durchgehen und nach einem Fehler suchen. Sie können es sogar in einem Browser öffnen.

Und das Wichtigste - wenn Sie es ausführen, führen Sie den Test durch. Sie werden sofort erfahren, ob er bestanden hat oder nicht. Wie das geht? Schauen wir uns das an. Schreiben wir einen trivialen Test für die Verwendung eines PHP-Arrays und speichern wir ihn in der Datei `ArrayTest.php`:

```php .{file:ArrayTest.php}
<?php
use Tester\Assert;

require __DIR__ . '/vendor/autoload.php';  # load Composer autoloader
Tester\Environment::setup();               # initialization of Nette Tester

$stack = [];
Assert::same(0, count($stack));   # we expect count() to return zero

$stack[] = 'foo';
Assert::same(1, count($stack));   # we expect count() to return one
Assert::contains('foo', $stack);  # verify that the $stack contains the item 'foo'
```

Wie Sie sehen können, werden [Assertion-Methoden |Assertions] wie `Assert::same()` verwendet, um zu bestätigen, dass ein tatsächlicher Wert mit einem erwarteten Wert übereinstimmt.

Der Test ist geschrieben, wir können ihn über die Befehlszeile ausführen. Beim ersten Durchlauf werden alle Syntaxfehler aufgedeckt, und wenn Sie keinen Tippfehler gemacht haben, werden Sie sehen:

/--pre .[terminal]
$ php ArrayTest.php

<span style="color:#FFF; background-color:#090">OK</span>
\--

Versuchen Sie, die Anweisung im Test in `Assert::contains('XXX', $stack);` zu ändern und beobachten Sie, was bei der Ausführung passiert:

/--pre .[terminal]
$ php ArrayTest.php

<span style="color: #FFF">Failed: </span><span style="color: #FF0">['foo']</span><span style="color: #FFF"> should contain </span><span style="color: #FF0">'XXX'</span>

<span style="color: #CCC">in </span><span style="color: #FFF">ArrayTest.php(17)</span><span style="color: #808080"> Assert::contains('XXX', $stack);</span>

<span style="color: #FFF; background-color: #900">FAILURE</span>
\--

Wir fahren mit dem Kapitel Schreiben [von Tests |Writing Tests] fort.


Installation und Anforderungen .[#toc-installation-and-requirements]
====================================================================

Die minimal erforderliche PHP-Version für Tester ist 7.1 (weitere Details finden Sie in der Tabelle der [unterstützten PHP-Versionen |#supported PHP versions] ). Die bevorzugte Art der Installation ist die über [Composer |best-practices:composer]:

/--pre .[terminal]
composer require --dev nette/tester
\--

Versuchen Sie, den Nette Tester von der Kommandozeile aus zu starten (ohne Argumente wird nur eine Hilfezusammenfassung angezeigt):

/--pre .[terminal]
vendor/bin/tester
\--


Tests ausführen .[#toc-running-tests]
=====================================

Wenn unsere Anwendung wächst, wächst auch die Anzahl der Tests. Es wäre unpraktisch, die Tests einzeln auszuführen. Daher verfügt der Tester über einen Bulk-Test-Runner, den wir über die Befehlszeile aufrufen. Der Parameter ist das Verzeichnis, in dem sich die Tests befinden. Der Punkt zeigt das aktuelle Verzeichnis an.

/--pre .[terminal]
vendor/bin/tester .
\--

Der Nette-Tester-Läufer durchsucht das angegebene Verzeichnis und alle Unterverzeichnisse und sucht nach Tests, d. h. nach den Dateien `*.phpt` und `*Test.php`. Er findet auch unseren Test `ArrayTest.php`, da er der Maske entspricht.

Dann beginnt er mit dem Testen. Jeder Test wird als neuer PHP-Prozess ausgeführt, so dass er völlig isoliert von den anderen läuft. Er wird parallel in mehreren Threads ausgeführt, was ihn extrem schnell macht. Und er führt zuerst die Tests aus, die beim vorherigen Durchlauf fehlgeschlagen sind, so dass Sie sofort wissen, ob Sie den Fehler behoben haben.

Für jeden durchgeführten Test gibt der Läufer ein Zeichen aus, um den Fortschritt anzuzeigen:

- <code style="color: #CCC; background-color: #000">.</code> - Test bestanden
- <code style="color: #CCC; background-color: #000">s</code> - Test wurde übersprungen
- <code style="color: #FFF; background-color: #900">F</code> - Test fehlgeschlagen

Die Ausgabe kann wie folgt aussehen:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Note: No php.ini is used.
PHP 7.4.8 (cli) | php -n | 8 threads

........s................<span style="color: #FFF; background-color: #900">F</span>.........

<span style="color: #F00">-- FAILED: greeting.phpt</span>
<span style="color: #CCC">   </span><span style="color: #FFF">Failed: </span><span style="color: #FF0">'Hello John'</span><span style="color: #FFF"> should be</span>
<span style="color: #FFF">       ... </span><span style="color: #FF0">'Hello Peter'</span>

<span style="color: #CCC">   in </span><span style="color: #FFF">greeting.phpt(19)</span><span style="color: #808080"> Assert::same('Hello Peter', $o->say('John'));</span>

<span style="color: #FFF; background-color: #900">FAILURES! (35 tests, 1 failures, 1 skipped, 1.7 seconds)</span>
\--

35 Tests wurden durchgeführt, einer ist fehlgeschlagen, einer wurde übersprungen.

Wir fahren im Kapitel [Tests durchführen |Running tests] fort.


Überwachungsmodus .[#toc-watch-mode]
====================================

Refaktorieren Sie den Code? Oder entwickeln Sie gar nach der TDD-Methodik (Test Driven Development)? Dann wird Ihnen der Watch Mode gefallen. Der Tester überwacht den Quellcode und führt sich selbst aus, wenn er geändert wird.

Während der Entwicklung haben Sie ein Terminal in der Ecke des Monitors, auf dem die grüne Statusleiste aufleuchtet, und wenn sie plötzlich rot wird, wissen Sie, dass Sie gerade etwas Unerwünschtes getan haben. Es ist eigentlich ein tolles Spiel, bei dem man programmiert und versucht, sich an die Farbe zu halten.

Der Watch-Modus wird mit dem Parameter [--watch |running-tests#w-watch-path] gestartet.


CodeCoverage Berichte .[#toc-codecoverage-reports]
==================================================

Der Tester kann Berichte erstellen, die einen Überblick darüber geben, wie viel Quellcode die Tests abdecken. Der Bericht kann entweder im menschenlesbaren HTML-Format oder im Clover-XML-Format für die maschinelle Weiterverarbeitung erstellt werden.

Siehe den "Beispiel-HTML-Bericht":https://files.nette.org/tester/coverage.html mit Code-Abdeckung.


Unterstützte PHP-Versionen .[#toc-supported-php-versions]
=========================================================

| Version | kompatibel mit PHP
|------------------|-------------------
| Tester 2.4 | PHP 7.2 - 8.2
| Tester 2.3 | PHP 7.1 - 8.0
| Tester 2.1 - 2.2 | PHP 7.1 - 7.3
| Tester 2.0 | PHP 5.6 - 7.3
| Tester 1.7 | PHP 5.3 - 7.3 + HHVM 3.3+
| Tester 1.6 | PHP 5.3 - 7.0 + HHVM
| Tester 1.3 - 1.5 | PHP 5.3 - 5.6 + HHVM
| Tester 0.9 - 1.2 | PHP 5.3 - 5.6

Gilt für die neuesten Patch-Versionen.

Bis Version 1.7 unterstützte Tester [HHVM |https://hhvm.com] 3.3.0 oder neuer (mit `tester -p hhvm`). Die Unterstützung wurde seit Tester 2.0 eingestellt. Die Verwendung war einfach:
