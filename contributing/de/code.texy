Zum Code beitragen
******************

.[perex]
Planen Sie, zum Nette Framework beizutragen, und müssen Sie sich mit den Regeln und Verfahren vertraut machen? Dieser Leitfaden für Anfänger führt Sie durch die Schritte, um effektiv zum Code beizutragen, mit Repositories zu arbeiten und Änderungen zu implementieren.


Verfahren .[#toc-procedure]
===========================

Um zum Code beizutragen, ist es wichtig, ein Konto auf [GitHub |https://github.com] zu haben und mit den Grundlagen der Arbeit mit dem Versionskontrollsystem Git vertraut zu sein. Wenn Sie mit Git nicht vertraut sind, können Sie sich den [Leitfaden "Git - die einfache Anleitung |https://rogerdudler.github.io/git-guide/] " ansehen und die Verwendung eines der vielen [grafischen Clients |https://git-scm.com/downloads/guis] in Betracht ziehen.


Vorbereiten der Umgebung und des Repositorys .[#toc-preparing-the-environment-and-repository]
---------------------------------------------------------------------------------------------

1) Erstellen Sie auf GitHub einen [Fork |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] des [Paket-Repositorys |www:packages], das Sie ändern möchten.
2) [Klonen |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] Sie dieses Repository auf Ihren Computer
3) Installieren Sie die Abhängigkeiten, einschließlich [Nette Tester |tester:], mit dem Befehl `composer install`
4) Überprüfen Sie, ob die Tests funktionieren, indem Sie den Befehl `composer tester`
5) Erstellen Sie eine [neue Verzweigung |#New Branch] auf der Grundlage der letzten veröffentlichten Version


Eigene Änderungen implementieren .[#toc-implementing-your-own-changes]
----------------------------------------------------------------------

Jetzt können Sie Ihre eigenen Code-Anpassungen vornehmen:

1) Implementieren Sie die gewünschten Änderungen und vergessen Sie dabei nicht die Tests
2) Stellen Sie sicher, dass die Tests erfolgreich laufen. `composer tester`
3) Prüfen Sie, ob der Code den [Kodierungsstandards |#coding standards]entspricht
4) Speichern (Commit) Sie die Änderungen mit einer Beschreibung in [diesem Format |#Commit Description]

Sie können mehrere Übertragungen erstellen, eine für jeden logischen Schritt. Jeder Commit sollte für sich genommen sinnvoll sein.


Einreichen von Änderungen .[#toc-submitting-changes]
----------------------------------------------------

Wenn Sie mit den Änderungen zufrieden sind, können Sie sie übermitteln:

1) Verschieben Sie die Änderungen auf GitHub in Ihren Fork
2) Übermitteln Sie sie von dort aus an das Nette-Repository, indem Sie einen [pull request|https://help.github.com/articles/creating-a-pull-request] (PR) erstellen
3) Geben Sie [ausreichende Informationen |#pull request description] in der Beschreibung an


Feedback einbeziehen .[#toc-incorporating-feedback]
---------------------------------------------------

Ihre Übertragungen sind nun für andere sichtbar. Es ist üblich, dass Sie Kommentare mit Vorschlägen erhalten:

1) Behalten Sie die vorgeschlagenen Änderungen im Auge
2) Fügen Sie sie als neue Commits ein oder [fügen Sie sie mit früheren zusammen |https://help.github.com/en/github/using-git/about-git-rebase]
3) Senden Sie die Commits erneut an GitHub, und sie erscheinen automatisch in der Pull-Anfrage

Erstellen Sie niemals einen neuen Pull Request, um einen bestehenden zu ändern.


Dokumentation .[#toc-documentation]
-----------------------------------

Wenn Sie eine Funktion geändert oder eine neue hinzugefügt haben, vergessen Sie nicht, [diese auch in die Dokumentation aufzunehmen |documentation].


Neuer Zweig .[#toc-new-branch]
==============================

Wenn möglich, nehmen Sie Änderungen an der letzten veröffentlichten Version vor, d.h. am letzten Tag im Zweig. Für das Tag v3.2.1 erstellen Sie einen Zweig mit diesem Befehl:

```shell
git checkout -b new_branch_name v3.2.1
```


Kodierungsstandards .[#toc-coding-standards]
============================================

Ihr Code muss den im Nette Framework verwendeten [Kodierungsstandards |coding standard] entsprechen. Es gibt ein automatisches Tool zur Überprüfung und Korrektur des Codes. Sie können es **global** über Composer in einen Ordner Ihrer Wahl installieren:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Nun sollten Sie in der Lage sein, das Tool im Terminal auszuführen. Der erste Befehl überprüft und der zweite korrigiert den Code in den Ordnern `src` und `tests` im aktuellen Verzeichnis:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Commit Beschreibung .[#toc-commit-description]
==============================================

In Nette haben Commit-Themen das folgende Format: `Presenter: fixed AJAX detection [Closes #69]`

- Bereich, gefolgt von einem Doppelpunkt
- Zweck des Commits in der Vergangenheitsform; wenn möglich, beginnen Sie mit Worten wie: added, fixed, refactored, changed, removed
- wenn der Commit die Abwärtskompatibilität bricht, fügen Sie "BC break" hinzu
- jede Verbindung zum Issue Tracker, wie `(#123)` oder `[Closes #69]`
- nach dem Betreff kann eine Leerzeile folgen, gefolgt von einer detaillierteren Beschreibung, z.B. mit Links zum Forum


Pull Request Beschreibung .[#toc-pull-request-description]
==========================================================

Wenn Sie eine Pull-Anfrage erstellen, können Sie über die GitHub-Schnittstelle einen Titel und eine Beschreibung eingeben. Geben Sie einen prägnanten Titel an und fügen Sie in der Beschreibung so viele Informationen wie möglich über die Gründe für Ihre Änderung ein.

Geben Sie außerdem in der Kopfzeile an, ob es sich um eine neue Funktion oder eine Fehlerbehebung handelt und ob sie zu Problemen mit der Abwärtskompatibilität führen kann (BC-Break). Falls es ein verwandtes Problem gibt, verlinken Sie es, damit es bei Genehmigung des Pull Requests geschlossen wird.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
