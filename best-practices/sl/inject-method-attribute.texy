Metode in atributi injiciranja
******************************

.[perex]
Na konkretnih primerih si bomo ogledali možnosti posredovanja odvisnosti predstavnikom in razložili metode in atribute/anotacije `inject`.


`inject*()` Metode .[#toc-inject-methods]
=========================================

V programu presenter, tako kot v kateri koli drugi kodi, je najprimernejši način posredovanja odvisnosti uporaba [konstruktorja |dependency-injection:passing-dependencies#Constructor Injection]. Če pa presenter deduje od skupnega prednika (npr. `BasePresenter`), je bolje uporabiti metode `inject*()` v tem predniku. Gre za poseben primer setterja, kjer se metoda začne s predpono `inject`. To je zato, ker ohranjamo konstruktor prost za potomce:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

Osnovna razlika od setterja je v tem, da Nette DI samodejno pokliče tako poimenovane metode v predstavnikih takoj, ko je primerek ustvarjen, in jim posreduje vse zahtevane odvisnosti. Predstavnik lahko vsebuje več metod `inject*()` in vsaka metoda ima lahko poljubno število parametrov.

Če bi odvisnosti prednikom posredovali prek njihovih konstruktorjev, bi morali pridobiti njihove odvisnosti v vseh potomcih in jih posredovati `parent::__construct()`, kar zaplete kodo:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // to je zaplet
		$this->bar = $bar;
	}
}
```

Metode `inject*()` so uporabne tudi v primerih, ko je predstavnik [sestavljen iz lastnosti |presenter-traits] in vsaka od njih zahteva svojo odvisnost.

Mogoče je uporabiti tudi anotacijo `@inject`, vendar je treba upoštevati, da se pri tem prekine enkapsulacija.


`Inject` Anotacije .[#toc-inject-annotations]
=============================================

To je samodejni prenos odvisnosti v javno člansko spremenljivko predstavnika, ki je v komentarju dokumentacije anotirana s `@inject`. Če uporabljate PHP, ki je nižji od različice 7.4, lahko v komentarju dokumentacije navedete tudi tip.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

Od različice PHP 8.0 lahko lastnost označimo z atributom `Inject`:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Tudi v tem primeru bo Nette DI samodejno posredoval odvisnosti tako označenim lastnostim v predstavniku, takoj ko bo primerek ustvarjen.

Ta metoda ima enake pomanjkljivosti kot posredovanje odvisnosti javni lastnosti. V predstavniku se uporablja, ker ne zapleta kode in zahteva le minimalno tipkanje.


{{sitename: Best Practices}}
