Стандарт за кодиране
********************

Този документ описва правилата и насоките за разработване на Nette. Когато предоставяте код за Nette, трябва да ги спазвате. Най-лесният начин да направите това е да имитирате съществуващ код.
Идеята е целият код да изглежда така, сякаш го е написал един човек.

Стандартът за кодиране на Nette следва [разширения стил на кодиране PSR-12 |https://www.php-fig.org/psr/psr-12/] с две основни изключения: използва [табулации вместо интервали |#tabs вместо пробелов] за отстъпите и използва [PascalCase за константите на класовете |https://blog.nette.org/en/for-less-screaming-in-the-code].


Общи правила .[#toc-general-rules]
==================================

- Всеки PHP файл трябва да съдържа `declare(strict_types=1)`.
- Два празни реда се използват за разделяне на методите с цел по-добра четливост.
- Причината за използването на декларация за потискане на грешки трябва да бъде документирана: `@mkdir($dir); // @ - директория может существовать`
- Ако се използва слабо типизирано изявление за сравнение (напр. `==`, `!=`, ...), намерението трябва да бъде документирано: `// == для принятия null`
- В един и същи файл могат да се съхраняват няколко изключения. `exceptions.php`
- Интерфейсите не определят видимостта на методите, защото те винаги са публични.
- Всички свойства, методи и параметри трябва да са от документиран тип. Нативно или чрез анотация.
- Масивите трябва да се записват с кратък запис.
- За отделяне на низ трябва да се използва единична кавичка, освен ако низът не съдържа апострофи.


Конвенции за именуване .[#toc-naming-conventions]
=================================================

- Избягвайте да използвате съкращения, освен ако пълното име не е прекомерно.
- Използвайте главни букви за двубуквени съкращения и CamelCase за по-дълги съкращения.
- Използвайте съществително име или словосъчетание за името на класа.
- Имената на класовете трябва да съдържат не само специфичност (`Array`), но и общовалидност (`ArrayIterator`). Изключение правят атрибутите на PHP.
- Интерфейсите и абстрактните класове не трябва да съдържат префикси или постфикси като `Abstract`, `Interface` или `I`.


Обвивки и скоби .[#toc-wrapping-and-braces]
===========================================

Стандартът за кодиране на Nette съответства на PSR-12 (или PER Coding Style), като в някои точки той го усъвършенства повече или го променя:

- Функциите със стрелки се записват без интервал преди скобата, т.е. `fn($a) => $b`.
- не се изисква празен ред между различните видове оператори за внос `use`
- типът на връщане на функцията/метода и отварящата скоба трябва да са на отделни редове за по-добра четливост:

```php
	public function find(
		string $dir,
		array $options,
	): array
	{
		// тело метода
	}
```


Блокове за документация (phpDoc) .[#toc-documentation-blocks-phpdoc]
====================================================================

Основно правило: никога не дублирайте информация за сигнатурата, като например тип на параметъра или тип на връщане, без допълнителна цел.

Блок за документация на дефиницията на класа:

- Започва с описание на класа.
- След това се поставя празен ред.
- След това се добавят една след друга анотациите `@property` (или `@property-read`, `@property-write`). Синтаксисът е: annotation, space, type, space, $name.
- След това се добавят една след друга анотациите `@method`. Синтаксисът е следният: annotation, space, return type, space, name(type $param, ...).
- Анотацията `@author` е пропусната. Авторството се съхранява в историята на изходния код.
- Можете да използвате анотации `@internal` или `@deprecated`.

```php
/**
 * MIME message part.
 *
 * @property string $encoding
 * @property-read array $headers
 * @method string getSomething(string $name)
 * @method static bool isEnabled()
 */
```

Блокът с документация за свойство, съдържащ само анотацията `@var`, трябва да бъде на един ред:

```php
/** @var string[] */
private array $name;
```

Блок за документация за дефиниция на метод:

- Започва с кратко описание на метода.
- Няма празен ред.
- Анотации `@param`, една след друга.
- Анотация `@return`.
- Анотации `@throws`, една след друга.
- Можете да използвате анотациите `@internal` или `@deprecated`.

Всяка анотация е последвана от един интервал, с изключение на `@param`, последван от два интервала за по-добра четливост.

```php
/**
 * Finds a file in directory.
 * @param  string[]  $options
 * @return string[]
 * @throws DirectoryNotFoundException
 */
public function find(string $dir, array $options): array
```


Табулация вместо интервали .[#toc-tabs-instead-of-spaces]
=========================================================

Таблиците имат редица предимства пред пространствата:

- размерът на отстъпа може да се конфигурира в редакторите и в "уеб:https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size"
- те не налагат размер на отстъпите в кода, така че кодът е по-преносим.
- могат да се въвеждат с едно натискане на клавиш (навсякъде, а не само в редактори, които превръщат табулаторите в интервали).
- отстъпът е тяхната цел
- да зачитат нуждите на незрящите и слепите колеги.

Използвайки табове в нашите проекти, ние ви позволяваме да регулирате ширината, което може да изглежда ненужно за повечето хора, но е от съществено значение за хората със зрителни увреждания.

За незрящите програмисти, които използват брайлови дисплеи, всеки интервал е представен с брайлова клетка и заема ценно място. Така че, докато отстъпът по подразбиране е 4 интервала, отстъпът от трето ниво отнема 12 брайлови клетки преди началото на кода.
При 40-клетъчния дисплей, който най-често се използва в лаптопите, това означава, че повече от една четвърт от наличните клетки се губят без никаква информация.


{{priority: -1}}
