Pourquoi utiliser des modèles ?
*******************************


Pourquoi utiliser un système de templates en PHP ? .[#toc-why-should-i-use-a-templating-system-in-php]
------------------------------------------------------------------------------------------------------

Tout d'abord, rappelons brièvement l'histoire de PHP, pleine de rebondissements intéressants. L'un des premiers langages de programmation utilisés pour créer des modèles HTML était le C. Cependant, son utilisation à cette fin s'est avérée inadaptée. Rasmus Lerdorf a créé PHP pour faciliter la génération dynamique de HTML avec le C en arrière-plan. Initialement conçu comme un langage de création de modèles, PHP s'est enrichi au fil du temps de nouvelles fonctionnalités et est devenu un langage de programmation à part entière.

Néanmoins, il fonctionne toujours comme un langage de création de modèles. Les fichiers PHP peuvent être utilisés comme des pages HTML, où il est possible d'afficher une variable à l'aide de la commande `<?= $foo ?>`.

Au début de l'histoire de PHP, le système de templates Smarty a été introduit pour séparer strictement l'apparence (HTML/CSS) de la logique de l'application. Ses capacités étaient délibérément limitées par rapport à PHP, de sorte qu'un développeur ne pouvait pas, par exemple, interroger une base de données à partir d'un modèle. Cependant, ces systèmes introduisaient des dépendances supplémentaires, augmentaient la complexité des projets et nécessitaient l'apprentissage d'un nouveau langage Smarty. Leurs avantages ont été controversés, et le PHP simple a continué à être utilisé pour les modèles.

Au fil du temps, les systèmes de modèles sont devenus plus utiles. Un nombre croissant de programmeurs et d'entreprises ont pris conscience de l'importance de la sécurité. Ils ont reconnu l'existence de [vulnérabilités telles que XSS |safety-first]. La manière correcte d'afficher une variable n'est pas `<?= $foo ?>` mais `<?= htmlspecialchars($foo) ?>`et le fait de négliger l'échappement, c'est-à-dire d'utiliser la fonction `htmlspecialchars()`, peut entraîner une grave violation de la sécurité. Les systèmes de modèles ont introduit l'échappement automatique, de sorte qu'il suffisait d'écrire `{$foo}`, pour que la variable soit affichée avec l'échappement inclus.

Les systèmes de templates ont apporté la prise en charge de l'héritage, du sandboxing et d'autres fonctionnalités utiles, rendant l'écriture de templates beaucoup plus simple qu'avec PHP. À un moment donné, les avantages des systèmes de templates l'ont emporté de manière significative sur les préoccupations liées à l'introduction de nouvelles dépendances.


Pourquoi devrais-je utiliser le système de templates Latte ? .[#toc-why-should-i-use-the-latte-templating-system]
-----------------------------------------------------------------------------------------------------------------

Les principales raisons sont la sécurité et la syntaxe.

Tous les systèmes de templates, comme Twig, Blade, ou Smarty, ont introduit une protection XSS sous la forme d'un échappement automatique tout au long de leur existence. Cependant, Latte est allé plus loin, réalisant que pour que l'échappement automatique soit vraiment fonctionnel, le système devait comprendre le HTML. Il devait reconnaître non seulement une chaîne de caractères, mais aussi les balises, les attributs, etc. En effet, différentes méthodes d'échappement sont nécessaires dans le texte HTML, à l'intérieur des balises HTML, dans JavaScript, etc. Latte a appris à comprendre le HTML et à s'échapper dans chacun de ces contextes de [manière appropriée |safety-first#Context-Aware Escaping]. Latte a appris à comprendre HTML et à s'échapper dans chacun de ces contextes de manière appropriée. Il est ainsi devenu le premier et jusqu'à présent le seul système de templates PHP avec un échappement contextuel.

Latte représente un système de création de modèles véritablement sûr, alors que les autres systèmes tendent à créer un faux sentiment de sécurité.

Un autre avantage significatif de Latte est l'utilisation de la syntaxe PHP, de sorte que le programmeur/codeur n'a pas besoin d'apprendre un nouveau langage mais peut utiliser ce qu'il connaît déjà bien.


Quelles sont les principales différences entre les systèmes de templates tels que Latte, Twig et Blade ? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Les différences entre les systèmes de templating tels que Latte, Twig et Blade résident principalement dans leur syntaxe, leur sécurité et leur intégration avec les frameworks :

- Latte : utilise la syntaxe du langage PHP, ce qui facilite son apprentissage et son utilisation. Il offre une protection de premier ordre contre les attaques XSS.
- Twig : utilise une syntaxe semblable à celle de Python, qui est assez différente de celle de PHP. Il s'échappe sans distinction de contexte. Il est bien intégré au framework Symfony.
- Blade : utilise un mélange de PHP et de syntaxe personnalisée. Il s'échappe sans distinction de contexte. Il est étroitement intégré aux fonctionnalités et à l'écosystème de Laravel.


Cela vaut-il la peine pour les entreprises d'utiliser un système de templating ? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
------------------------------------------------------------------------------------------------------------------------------------------------

Tout d'abord, les coûts associés à la formation, à l'utilisation et aux avantages globaux varient considérablement en fonction du système. Le système de templates Latte, grâce à son utilisation de la syntaxe PHP, simplifie grandement l'apprentissage des programmeurs déjà familiarisés avec ce langage. Il suffit généralement de quelques heures pour qu'un programmeur se familiarise suffisamment avec Latte, ce qui réduit les coûts de formation et accélère l'adoption de la technologie et, surtout, l'efficacité dans l'utilisation quotidienne.

En outre, Latte offre un haut niveau de protection contre les vulnérabilités XSS grâce à sa technologie unique d'échappement contextuel. Cette protection est cruciale pour assurer la sécurité des applications web et minimiser le risque d'attaques qui pourraient mettre en danger les utilisateurs ou les données de l'entreprise. La sécurité des applications web est également importante pour maintenir la bonne réputation d'une entreprise. Les problèmes de sécurité peuvent entraîner une perte de confiance de la part des clients et nuire à la réputation de l'entreprise sur le marché.

L'utilisation de Latte permet également de réduire les coûts globaux de développement et de maintenance en les facilitant. Par conséquent, l'utilisation d'un système de templates en vaut vraiment la peine.


Comment Latte affecte-t-il les performances des applications web et les ressources du serveur ? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bien que les modèles Latte soient traités rapidement, cet aspect n'a pas vraiment d'importance. En effet, l'analyse des fichiers n'a lieu qu'une seule fois lors du premier affichage. Ils sont ensuite compilés en code PHP, stockés sur le disque et exécutés à chaque demande ultérieure sans nécessiter de recompilation.

C'est ainsi que cela fonctionne dans un environnement de production. Pendant le développement, les modèles Latte sont recompilés chaque fois que leur contenu est modifié, de sorte que le développeur voit toujours la version actuelle.
