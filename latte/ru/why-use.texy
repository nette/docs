Зачем использовать шаблоны?
***************************


Почему я должен использовать систему шаблонов в PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
--------------------------------------------------------------------------------------------------------

Для начала давайте кратко вспомним историю PHP, полную интересных поворотов. Одним из первых языков программирования, использовавшихся для шаблонизации HTML, был C. Однако его использование для этой цели оказалось непригодным. Расмус Лердорф создал PHP для облегчения динамической генерации HTML с использованием языка C на задней панели. Изначально PHP был разработан как язык шаблонов, но со временем он приобрел больше возможностей и стал полноценным языком программирования.

Тем не менее, он по-прежнему функционирует как язык шаблонов. Файлы PHP можно использовать как HTML-страницы, где вы можете вывести переменную с помощью функции `<?= $foo ?>`.

В начале истории PHP была введена система шаблонов Smarty, чтобы строго отделить внешний вид (HTML/CSS) от логики приложения. Ее возможности были намеренно ограничены по сравнению с PHP, поэтому разработчик не мог, например, запросить базу данных из шаблона. Однако эти системы вводили дополнительную зависимость, увеличивали сложность проекта и требовали изучения нового языка Smarty. Их преимущества были спорными, и для шаблонов по-прежнему использовался обычный PHP.

Со временем системы шаблонов стали более полезными. Все большее число программистов и компаний осознают важность безопасности. Они признали существование [уязвимостей, таких как XSS |safety-first]. Правильным способом отображения переменной является не `<?= $foo ?>` а `<?= htmlspecialchars($foo) ?>`, и пренебрежение экранированием, т.е. использование функции `htmlspecialchars()`, может привести к серьезному нарушению безопасности. В системах шаблонов введено автоматическое экранирование, поэтому достаточно написать просто `{$foo}`, и переменная будет отображаться с включенным экранированием.

Системы шаблонов обеспечили поддержку наследования, "песочницы" и других полезных функций, что сделало написание шаблонов намного проще, чем в PHP. В какой-то момент преимущества систем шаблонизации значительно перевесили опасения по поводу введения новых зависимостей.


Почему я должен использовать систему шаблонов Latte? .[#toc-why-should-i-use-the-latte-templating-system]
---------------------------------------------------------------------------------------------------------

Основными причинами являются безопасность и синтаксис.

Все системы шаблонов, такие как Twig, Blade или Smarty, на протяжении своего существования внедряли защиту от XSS в виде автоматического экранирования. Однако Latte пошла дальше, поняв, что для того, чтобы автоматическое экранирование было действительно функциональным, система должна понимать HTML. Она должна распознавать не только строку символов, но и теги, атрибуты и т.д. Это связано с тем, что в тексте HTML, внутри тегов HTML, в JavaScript и т.д. требуются различные методы экранирования. Latte научился понимать HTML и выполнять экранирование в каждом из этих контекстов [соответствующим образом |safety-first#Context-Aware Escaping]. Таким образом, она стала первой и пока единственной системой шаблонов PHP с контекстно-зависимым экранированием.

Latte представляет собой действительно безопасную систему шаблонов, в то время как другие системы склонны создавать ложное чувство безопасности.

Еще одним существенным преимуществом Latte является использование синтаксиса PHP, поэтому программисту/кодеру не нужно изучать новый язык, а можно использовать то, что он уже хорошо знает.


Каковы основные различия между такими системами шаблонов, как Latte, Twig и Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Различия между такими системами шаблонов, как Latte, Twig и Blade, в основном заключаются в их синтаксисе, безопасности и интеграции с фреймворками:

- Latte: использует синтаксис языка PHP, что делает его более простым в изучении и использовании. Он обеспечивает первоклассную защиту от XSS-атак.
- Twig: использует Python-подобный синтаксис, который значительно отличается от PHP. Он экранирует без различия контекста. Хорошо интегрирован с фреймворком Symfony.
- Blade: использует смесь PHP и пользовательского синтаксиса. Не различает контекст. Он тесно интегрирован с функциями и экосистемой Laravel.


Стоит ли компаниям использовать систему шаблонов? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
-----------------------------------------------------------------------------------------------------------------

Во-первых, затраты, связанные с обучением, использованием и общими преимуществами, существенно различаются в зависимости от системы. Система шаблонов Latte, благодаря использованию синтаксиса PHP, значительно упрощает обучение для программистов, уже знакомых с этим языком. Обычно программисту требуется несколько часов, чтобы достаточно хорошо освоить Latte, что позволяет снизить затраты на обучение и ускорить освоение технологии и, что самое главное, эффективность в повседневном использовании.

Кроме того, Latte обеспечивает высокий уровень защиты от XSS-уязвимостей благодаря уникальной технологии контекстно-зависимого экранирования. Эта защита имеет решающее значение для обеспечения безопасности веб-приложений и минимизации риска атак, которые могут поставить под угрозу пользователей или данные компании. Безопасность веб-приложений также важна для поддержания хорошей репутации компании. Проблемы с безопасностью могут привести к потере доверия со стороны клиентов и нанести ущерб репутации компании на рынке.

Использование Latte также снижает общие затраты на разработку и сопровождение, упрощая и то, и другое. Поэтому использование системы шаблонов определенно стоит того.


Как Latte влияет на производительность веб-приложения и ресурсы сервера? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-------------------------------------------------------------------------------------------------------------------------------------------------------

Хотя шаблоны Latte обрабатываются быстро, этот аспект не имеет особого значения. Причина в том, что парсинг файлов происходит только один раз во время первого показа. Затем они компилируются в PHP-код, сохраняются на диске и запускаются при каждом последующем запросе, не требуя повторной компиляции.

Вот как это работает в производственной среде. Во время разработки шаблоны Latte перекомпилируются каждый раз, когда меняется их содержимое, поэтому разработчик всегда видит актуальную версию.
