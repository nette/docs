Fonctions utilitaires
*********************

.[perex]
[api:Nette\Utils\Helpers] est une classe statique avec des fonctions utiles.


Installation :

```shell
composer require nette/utils
```

Tous les exemples supposent qu'un alias a été créé :

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Exécute le callback et retourne la sortie capturée sous forme de chaîne.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Borne la valeur dans l'intervalle inclusif donné min et max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Compare deux valeurs de la même manière que PHP le fait. Distingue les opérateurs `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
La fonction est utile dans les situations où l'opérateur est variable.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Convertit `false` en `null`, ne modifie pas les autres valeurs.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Retourne la dernière erreur en PHP ou une chaîne vide si aucune erreur ne s'est produite. Contrairement à `error_get_last()`, n'est pas soumis à l'influence de la directive PHP `html_errors` et retourne toujours du texte, pas du HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Parmi les options proposées `$possibilities`, recherche la chaîne qui est la plus similaire à `$value`, mais pas identique. Supporte uniquement l'encodage 8 bits.

Est utile dans le cas où une certaine option n'est pas valide et nous voulons conseiller à l'utilisateur une option similaire (mais différente, c'est pourquoi la chaîne identique est ignorée). De cette manière, Nette crée les messages `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', pas 'baz'
```
