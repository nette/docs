Funciones JSON
**************

.[perex]
[api:Nette\Utils\Json] es una clase estática con funciones de codificación y decodificación JSON. Maneja vulnerabilidades en diferentes versiones de PHP y lanza excepciones en caso de error.

Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que el siguiente alias de clase está definido:

```php
use Nette\Utils\Json;
```


Uso .[#toc-usage]
=================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Convierte `$valor` a formato JSON.

Cuando `$pretty` está activado, formatea JSON para facilitar la lectura y la claridad:

```php
Json::encode($valor); // devuelve JSON
Json::encode($valor, pretty: true); // devuelve un JSON más claro
```

Cuando `$asciiSafe` está activado, genera una salida ASCII, es decir, sustituye los caracteres unicode por secuencias `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

El parámetro `$htmlSafe` garantiza que la salida no contenga caracteres con significado especial en HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Con `$forceObjects`, incluso las matrices con claves numéricas se codificarán como objetos JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Lanza una excepción `Nette\Utils\JsonException` en caso de error.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Manejo de excepciones
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Analiza JSON en PHP.

Establecer `$forceArray` fuerza la devolución de arrays en lugar de objetos:

```php
Json::decode('{"variable": true}'); // devuelve un objeto de tipo stdClass
Json::decode('{"variable": true}', forceArray: true); // devuelve un array
```

Lanza una excepción `Nette\Utils\JsonException` en caso de error.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Manejo de excepciones
}
```


¿Cómo enviar un JSON desde un presentador? .[#toc-how-to-send-a-json-from-a-presenter]
======================================================================================

Puede utilizar el método `$this->sendJson($data)`, que puede llamarse, por ejemplo, en el método `action*()`, véase [Envío de una respuesta |application:presenters#Sending a Response].
