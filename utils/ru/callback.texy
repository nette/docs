Работа с обратными вызовами
***************************

.[perex]
[api:Nette\Utils\Callback] это статический класс с функциями для работы с [обратными вызовами PHP |https://www.php.net/manual/en/language.types.callable.php].


Установка:

```shell
composer require nette/utils
```

Во всех примерах предполагается, что псевдоним уже создан:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Проверяет, является ли переменная `$callable` допустимым обратным вызовом. В противном случае выбрасывается `Nette\InvalidArgumentException`. Если `$syntax` истина, функция только проверяет, что `$callable` имеет структуру обратного вызова, но не проверяет, существует ли класс или метод на самом деле. Он возвращает `$callable`.

```php
Callback::check('trim'); // не выбрасывает исключение
Callback::check(['NonExistentClass', 'method']); // бросает Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // не выбрасывает исключение
Callback::check(function () {}); // не выбрасывает исключение
Callback::check(null); // бросает Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Преобразует обратный вызов PHP в текстовую форму. Класс или метод не обязательно должен существовать.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Возвращает отражение для метода или функции в обратном вызове PHP.

```php
$ref = Callback::toReflection('trim');
// $ref je ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref je ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Определяет, является ли обратный вызов PHP функцией или статическим методом.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Распаковывает закрытие, созданное с помощью `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
