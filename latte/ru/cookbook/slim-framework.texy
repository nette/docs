Использование Latte со Slim 4
*****************************

.[perex]
Эта статья, автором которой является "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, описывает использование Latte со Slim Framework.

Сначала "установите Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html, а затем Latte с помощью Composer:

```shell
composer require latte/latte
```


Конфигурация
------------

В корневом каталоге проекта создайте новый каталог `templates`. Все шаблоны будут размещены в нем позже.

В файл `config/defaults.php` добавьте новый ключ конфигурации `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte компилирует шаблоны в нативный PHP-код и сохраняет их в кеше на диске. Поэтому они так же быстры, как если бы были написаны на нативном PHP.

В файл `config/defaults.php` добавьте новый ключ конфигурации `template_temp`: Убедитесь, что каталог `{project}/tmp/templates` существует и имеет права на чтение и запись.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte автоматически регенерирует кеш при каждом изменении шаблона, что можно отключить в production-среде и сэкономить немного производительности:

```php
// в production-среде измените на false
$settings['template_auto_refresh'] = true;
```

Далее добавьте определение DI-контейнера для класса `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Сам рендеринг шаблона Latte технически работал бы, но нам нужно также обеспечить, чтобы он работал с объектом response PSR-7.

Для этой цели мы создадим специальный класс `TemplateRenderer`, который сделает эту работу за нас.

Далее создайте файл `src/Renderer/TemplateRenderer.php` и скопируйте/вставьте этот код:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Использование
-------------

Вместо прямого использования объекта Latte Engine мы будем использовать для рендеринга шаблона в объект, совместимый с PSR-7, объект `TemplateRenderer`.

Типичный класс обработчика действия может выглядеть так: Он рендерит шаблон с именем `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Чтобы это работало, создайте файл шаблона в `templates/home.latte` с этим содержимым:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Если все правильно сконфигурировано, должен отобразиться следующий вывод:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
