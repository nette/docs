Terimler Sözlüğü
****************


AJAX
----
Asynchronous JavaScript and XML - istemci ve sunucu arasında her istekte tüm sayfanın yeniden yüklenmesine gerek kalmadan HTTP protokolü üzerinden bilgi alışverişi teknolojisi. Adından yalnızca XML formatında veri gönderdiği anlaşılsa da, yaygın olarak [#JSON] formatı da kullanılır.


Presenter Eylemi
----------------
Bir eylemi gerçekleştiren presenter'ın mantıksal bölümü. Örneğin, bir ürün sayfasını görüntüler, kullanıcının oturumunu kapatır vb. Bir presenter birden fazla eyleme sahip olabilir.


BOM
---
Sözde *byte order mark*, kodlamada bayt sırasının bir göstergesi olarak kullanılan dosyadaki özel ilk karakterdir. Bazı düzenleyiciler bunu dosyalara ekler. Pratik olarak görünmezdir, ancak PHP'den çıktı ve başlıkların gönderilmesinde sorunlara neden olur. Toplu olarak kaldırmak için [Code Checker |code-checker:] kullanabilirsiniz.


Controller
----------
Kullanıcı isteklerini işleyen ve bunlara dayanarak uygun uygulama mantığını (yani [#model]) çağıran ve ardından verileri işlemek için [#view]'den isteyen denetleyici. Nette Framework'teki denetleyicilerin benzeri [presenter'lar |#presenter]'dır.


Cross-Site Scripting (XSS)
--------------------------
Cross-Site Scripting, işlenmemiş çıktıları kötüye kullanan web sitelerini ihlal etme yöntemidir. Saldırgan daha sonra sayfaya kendi kodunu ekleyebilir ve böylece sayfayı değiştirebilir veya hatta ziyaretçiler hakkında hassas veriler elde edebilir. XSS'e karşı yalnızca tüm karakter dizilerinin tutarlı ve doğru bir şekilde işlenmesiyle savunulabilir.

Nette Framework, sizi Cross-Site Scripting riskinden sonsuza dek kurtaracak devrim niteliğinde bir [Bağlama Duyarlı Kaçış |latte:safety-first#Kontextově sensitivní escapování] teknolojisi ile birlikte gelir. Tüm çıktıları otomatik olarak işler ve böylece kodlayıcının bir şeyi unutması mümkün olmaz.


Cross-Site Request Forgery (CSRF)
---------------------------------
Cross-Site Request Forgery saldırısı, saldırganın kurbanı, kurbanın oturum açtığı sunucuya kurbanın tarayıcısında gizlice bir istek yürüten bir sayfaya çekmesi ve sunucunun isteğin kurban tarafından kendi isteğiyle yapıldığına inanmasıdır. Ve böylece kurbanın kimliği altında, kurbanın haberi olmadan belirli bir eylemi gerçekleştirir. Bu, verilerin değiştirilmesi veya silinmesi, bir mesaj gönderilmesi vb. olabilir.

Nette Framework **formları ve presenter'lardaki sinyalleri otomatik olarak** bu tür saldırılara karşı korur. Ve bunu, başka bir alan adından gönderilmelerini veya çağrılmalarını engelleyerek yapar.


Dependency Injection
--------------------
Dependency Injection (DI), nesnelerin oluşturulmasını bağımlılıklarından nasıl ayıracağımızı söyleyen bir tasarım desenidir. Yani, sınıf bağımlılıklarını oluşturmaktan veya başlatmaktan sorumlu değildir, bunun yerine bu bağımlılıklar ona harici kod tarafından sağlanır (bu [DI konteyner |#Dependency Injection kontejner] de olabilir). Avantajı, bağımlılıkların kolayca değiştirilebilir ve kodun diğer bölümlerinden izole edilmiş olması nedeniyle daha fazla kod esnekliği, daha iyi anlaşılırlık ve uygulamanın daha kolay test edilmesini sağlamasıdır. Daha fazla bilgi [Dependency Injection Nedir? |dependency-injection:introduction] bölümünde.


Dependency Injection Konteyner
------------------------------
Dependency Injection konteyner (ayrıca DI konteyner veya IoC konteyner), uygulamadaki bağımlılıkların (veya [servislerin |#služba]) oluşturulmasını ve yönetimini sağlayan bir araçtır. Konteyner genellikle hangi sınıfların diğer sınıflara bağımlı olduğunu, hangi belirli bağımlılık uygulamalarının kullanılacağını ve bu bağımlılıkların nasıl oluşturulacağını tanımlayan bir yapılandırmaya sahiptir. Ardından konteyner bu nesneleri oluşturur ve onlara ihtiyaç duyan sınıflara sağlar. Daha fazla bilgi [DI Konteyner Nedir? |dependency-injection:container] bölümünde.


Kaçış (Escaping)
----------------
Kaçış, belirli bir bağlamda özel anlamı olan karakterlerin karşılık gelen diğer dizilere dönüştürülmesidir. Örnek: tırnak işaretleriyle sınırlanmış bir karakter dizisine tırnak işaretleri yazmak istiyoruz. Tırnak işaretlerinin karakter dizisi bağlamında özel bir anlamı olduğundan ve basitçe yazılmaları karakter dizisinin sonu olarak anlaşılacağından, başka bir karşılık gelen diziyle yazılmaları gerekir. Tam olarak hangisi olduğunu bağlamın kuralları belirler.


Filtre (Filter) (eskiden helper)
--------------------------------
Şablonlarda, [filtre |latte:syntax#filtry] terimi genellikle verileri nihai forma dönüştürmeye veya yeniden biçimlendirmeye yardımcı olan bir fonksiyon anlamına gelir. Şablonlar birkaç [standart filtreler |latte:filters] içerir.


Geçersiz Kılma (Invalidation)
-----------------------------
[Snippet'in |#snippet] yeniden çizilmesi gerektiğinin bildirilmesi. Başka bir anlamda, önbellek içeriğinin silinmesi.


JSON
----
JavaScript sözdizimine dayanan (onun bir alt kümesidir) veri alışverişi formatı. Kesin belirtimi www.json.org sayfasında bulabilirsiniz.


Bileşen (Component)
-------------------
Uygulamanın yeniden kullanılabilir bir parçası. [Bileşen Yazma |application:components] bölümünde açıklandığı gibi sayfanın görsel bir parçası olabilir veya bileşen terimi altında [Component |component-model:] sınıfı da anlaşılır (böyle bir bileşen görsel olmak zorunda değildir).


Kontrol Karakterleri
--------------------
Kontrol karakterleri, metinde bulunabilen ve muhtemelen sorunlara neden olabilen görünmez karakterlerdir. Bunları dosyalardan toplu olarak kaldırmak için [Code Checker |code-checker:] ve bir değişkenden kaldırmak için [Strings::normalize() |utils:strings#normalize] fonksiyonunu kullanabilirsiniz.


Olaylar (Events)
----------------
Olay, bir nesnede beklenen bir durumdur ve gerçekleştiğinde, olaya tepki veren geri çağrılar (callback) olan sözde işleyiciler (handler) çağrılır ("örnek":https://gist.github.com/dg/332cdd51bdf7d66a6d8003b134508a38). Olay, örneğin bir formun gönderilmesi, bir kullanıcının oturum açması vb. olabilir. Olaylar bu nedenle bir *Inversion of Control* biçimidir.

Örneğin, kullanıcı girişi `Nette\Security\User::login()` metodunda gerçekleşir. `User` nesnesinin genel bir değişkeni `$onLoggedIn` vardır, bu herkesin bir geri çağrı ekleyebileceği bir dizidir. Kullanıcı oturum açtığı anda, `login()` metodu dizideki tüm geri çağrıları çağırır. `onXyz` biçimindeki değişken adı, tüm Nette'de kullanılan bir kuraldır.


Latte
-----
En gelişmiş [şablon sistemlerinden |latte:] biri.


Model
-----
Model, tüm uygulamanın veri ve özellikle işlevsel temelidir. Tüm uygulama mantığını (iş mantığı terimi de kullanılır) içerir. **M**VC veya MVP'deki **M**'dir. Herhangi bir kullanıcı eylemi (oturum açma, sepete ürün ekleme, veritabanındaki değeri değiştirme) bir model eylemini temsil eder.

Model kendi iç durumunu yönetir ve dışarıya sabit bir arayüz sunar. Bu arayüzün fonksiyonlarını çağırarak durumunu sorgulayabilir veya değiştirebiliriz. Model, [#view] veya [controller'ın |#controller] varlığından haberdar değildir.


Model-View-Controller
---------------------
Grafik arayüzlü uygulamalarda işleme kodunu ([#controller]) uygulama mantığı kodundan ([#model]) ve veri görüntüleme kodundan ([#view]) ayırma ihtiyacından doğan yazılım mimarisi. Bu, uygulamayı daha anlaşılır hale getirir, gelecekteki geliştirmeyi kolaylaştırır ve tek tek parçaların ayrı ayrı test edilmesini sağlar.


Model-View-Presenter
--------------------
[#Model-View-Controller]'dan türetilen mimari.


Modül
-----
Modül, uygulamanın mantıksal bir bölümünü temsil eder. Tipik bir düzende, belirli bir işlevsellik alanını ele alan bir grup presenter ve şablondur. Modülleri [ayrı dizinlere |application:directory-structure#Presentery a šablony] yerleştiririz, örneğin `Front/`, `Admin/` veya `Shop/`.

Örneğin, bir e-mağazayı şunlara ayırırız:
- Ürünleri görüntülemek ve satın almak için Frontend (`Shop/`)
- Siparişleri yönetmek için Müşteri bölümü (`Customer/`)
- Operatör için Yönetim (`Admin/`)

Teknik olarak bunlar sıradan dizinlerdir, ancak net bölümleme sayesinde uygulamanın ölçeklenmesine yardımcı olurlar. `Admin:Product:List` presenter'ı fiziksel olarak örneğin `app/Presentation/Admin/Product/List/` dizininde bulunur (bkz. [presenter eşlemesi |application:directory-structure#mapování presenterů]).


Namespace (Ad Alanı)
--------------------
PHP sürüm 5.3'ten ve diğer bazı programlama dillerinden itibaren dilin bir parçası olan ad alanı, farklı kütüphanelerde aynı şekilde adlandırılmış sınıfların ad çakışması olmadan kullanılmasını sağlar. Bkz. [PHP belgeleri |https://www.php.net/manual/en/language.namespaces.rationale.php].


Presenter
---------
Presenter, yönlendirici tarafından HTTP isteğinden çevrilen [isteği |api:Nette\Application\Request] alan ve bir [yanıt |api:Nette\Application\Response] oluşturan bir nesnedir. Yanıt bir HTML sayfası, bir resim, bir XML belgesi, diskteki bir dosya, JSON, bir yönlendirme veya aklınıza gelebilecek herhangi bir şey olabilir.

Genellikle presenter terimi altında [api:Nette\Application\UI\Presenter] sınıfının bir alt sınıfı anlaşılır. Gelen isteklere göre ilgili [eylemleri |application:presenters#zivotni-cyklus-presenteru] çalıştırır ve şablonları işler.


Yönlendirici (Router)
---------------------
HTTP isteği / URL ile presenter eylemi arasında çift yönlü bir çevirmen. Çift yönlü, HTTP isteğinden [presenter eylemini |#akce presenteru] türetmenin mümkün olduğu, ancak tersine eyleme karşılık gelen URL'yi oluşturmanın da mümkün olduğu anlamına gelir. Daha fazla bilgi [URL yönlendirme |application:routing] bölümünde.


SameSite Çerezi
---------------
SameSite çerezleri, sayfanın yüklenmesine neyin yol açtığını tanımak için bir mekanizma sağlar. Üç değeri olabilir: `Lax`, `Strict` ve `None` (bu HTTPS gerektirir). Sayfa isteği doğrudan web sitesinden geliyorsa veya kullanıcı sayfayı doğrudan adres çubuğuna yazarak veya bir yer imine tıklayarak açarsa, tarayıcı sunucuya tüm çerezleri gönderir (yani `Lax`, `Strict` ve `None` bayraklarıyla). Kullanıcı başka bir web sitesinden bir bağlantı aracılığıyla web sitesine tıklarsa, sunucuya `Lax` ve `None` bayraklarına sahip çerezler iletilir. İstek başka bir şekilde, örneğin başka bir web sitesinden bir POST formu göndererek, bir iframe içinde yükleyerek, JavaScript kullanarak vb. ortaya çıkarsa, yalnızca `None` bayrağına sahip çerezler gönderilir.


Servis (Service)
----------------
Dependency Injection bağlamında, servis terimi DI konteyner tarafından oluşturulan ve yönetilen bir nesneyi ifade eder. Servis, örneğin test amacıyla veya servisi kullanan kodu değiştirmeye gerek kalmadan uygulamanın davranışını değiştirmek için başka bir uygulamayla kolayca değiştirilebilir.


Snippet (Kod Parçacığı)
-----------------------
AJAX isteği sırasında ayrı ayrı yeniden çizilebilen sayfanın bir parçası olan kesit.


View (Görünüm)
--------------
View, yani görünüm, isteğin sonucunu görüntülemekten sorumlu olan uygulama katmanıdır. Genellikle bir şablon sistemi kullanır ve hangi bileşenin veya modelden elde edilen sonucun nasıl görüntüleneceğini bilir.



/--comment
Yazarlar için talimatlar:
- açıklama kısa olmalı, yaklaşık 1 paragraf (kısa açıklamanın yeterli olmadığı durumlarda, belgelerin başka bir yerine bir bağlantı olmalıdır)
- terimlere daha sonra belgelerin diğer bölümlerinden veya forumdan başvurulabilir
\--

{{leftbar: www:@menu-common}}
{{priority: -2}}
