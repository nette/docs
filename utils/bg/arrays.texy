Работа с полето
***************

.[perex]
Тази страница е посветена на класовете [Nette\Utils\Arrays |#Arrays], [ArrayHash |#ArrayHash] и [ArrayList |#ArrayList], които са свързани с масиви.


Монтаж:

```shell
composer require nette/utils
```


Масиви .[#toc-arrays]
=====================

[api:Nette\Utils\Arrays] е статичен клас, който съдържа полезни функции за работа с масиви.

Следващите примери предполагат, че псевдонимът вече е създаден:

```php
use Nette\Utils\Arrays;
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Проверява масива за стойност. Използва стриктно сравнение (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(iterable $array, callable $callback): bool .[method]
----------------------------------------------------------

Проверява дали всички елементи в масива са преминали теста, реализиран в `$callback` с подпис `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Вижте [some( |#some]).


first(array $array): mixed .[method]
------------------------------------

Връща първия запис в масива или null, ако масивът е празен. Не променя вътрешния указател, за разлика от `reset()`.

```php
Arrays::first([1, 2, 3]); // 1
Масиви::first([]); // null
```


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Консолидира масив от няколко нива в плосък масив.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Връща елемент `$array[$key]`. Ако той не съществува, се изписва изключение `Nette\InvalidArgumentException` или, ако е зададен трети параметър `$default`, се връща този параметър.

```php
// ако $array['foo'] не съществува, се хвърля изключение
$value = Arrays::get($array, 'foo');

// ако $array['foo'] не съществува, върнете 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Ключът `$key` може да бъде и масив.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrátí 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Получава референция към посочения елемент на масива. Ако елементът не съществува, той ще бъде създаден със стойност null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// връща препратка към $array['foo']
```

Подобно на функцията [get() |#get], тя може да обработва многомерни масиви.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// vrátí referenci na $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Връща само елементите на масива, чиято стойност отговаря на регулярния израз `$pattern`. Ако `$invert` е равно на `true`, се връщат елементи, които не съвпадат. Грешка при компилиране или изразяване хвърля изключение `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// връща само елементи на масива, състоящи се от цифри
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Вмъква съдържанието на полето `$inserted` в полето `$array` веднага след елемента с ключ `$key`. Ако `$key` е `null` (или не е в полето), той се вмъква в края.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Вмъква съдържанието на полето `$inserted` в полето `$array` преди елемента с ключ `$key`. Ако `$key` е `null` (или не е в полето), той се вмъква в началото.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Извиква всички обратни повиквания и връща масив от резултати.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Извиква метод за всеки обект в масива и връща масив от резултати.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Проверява се дали масивът е индексиран с нарастващ брой числови ключове, започвайки от нула, т.е. списък.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array): mixed .[method]
-----------------------------------

Връща последния запис на масива или null, ако масивът е празен. Не променя вътрешния указател, за разлика от `end()`.

```php
Arrays::last([1, 2, 3]); // 3
Arrays::last([]);        // null
```


map(iterable $array, callable $callback): array .[method]
---------------------------------------------------------

Извиква `$callback` върху всички елементи на масив и връща масив от върнати стойности. Обратното извикване има сигнатура `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Рекурсивно комбинира две полета. Това е полезно например за обединяване на дървовидни структури. При сливането той следва същите правила като оператора `+`, прилаган за масиви, т.е. добавя двойката ключ/стойност от втория масив към първия масив и оставя стойността от първия масив в случай на сблъсък на ключове.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Стойностите от втория масив винаги се добавят към края на първия масив. Изчезването на стойността `10` от второто поле може да изглежда малко объркващо. Обърнете внимание, че тази стойност е същата като стойността `5` v poli prvním mají přiřazený stejný numerický klíč `0`, така че само елементът от първото поле влиза в получения масив.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Нормализира масива до асоциативен масив. Заменя ключовете с числа с техните стойности, като новата стойност е `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Връща и премахва стойността на елемент от масива. Ако не съществува, се хвърля изключение или се връща стойността `$default`, ако съществува.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// хвърля Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Преименуване на ключ в масив. Връща `true`, ако ключът е намерен в масива.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Връща позицията на посочения ключ в масива. Позицията се номерира от 0. Ако не е намерен ключ, функцията връща `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::searchKey($array, 'first'); // vrátí 0
$position = Arrays::searchKey($array, 'second'); // vrátí 1
$position = Arrays::searchKey($array, 'not-exists'); // vrátí null
```


some(iterable $array, callable $callback): bool .[method]
---------------------------------------------------------

Проверява се дали поне един елемент от масива е преминал теста, реализиран в `$callback`, с подпис `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Вижте [Every() |#every].


toKey(mixed $key): string|int .[method]
---------------------------------------

Конвертира стойността в ключ на масив, който е цяло число или низ.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Копира елементите на масива `$array` в обект `$object`, който след това връща.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // nastaví $obj->foo = 1; $obj->bar = 2;
```


wrap(iterable $array, string $prefix='', string $suffix=''): array .[method]
----------------------------------------------------------------------------

Извежда всеки елемент от масива в низ и го обвива с префикс `$prefix` и суфикс `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

Обектът [api:Nette\Utils\ArrayHash] е наследник на общия клас stdClass и го разширява с възможността да се третира като масив, т.е. да се отнася към членовете му например чрез квадратни скоби:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // записът на обекти работи едновременно
$hash->foo; // 123
```

Можете да използвате функцията `count($hash)`, за да получите броя на членовете.

Можете да итерирате над обект, както при масив, дори при референция:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'нова стойност';
}
```

Можем да преобразуваме съществуващ масив в `ArrayHash`, като използваме метода `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Преобразуването е рекурсивно:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // обект ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Това може да се предотврати чрез използване на втори параметър:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // полюс
```

Преобразуване обратно в масив:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] е линеен масив, в който като индекси се използват само цели числа, нарастващи от 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Съществуващите масиви могат да бъдат преобразувани в `ArrayList` с помощта на метода `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Можете да използвате функцията `count($list)`, за да получите броя на елементите.

Можете да итерирате над обект, както в случая с масив, дори с референция:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'нова стойност';
}
```

Достъпът до ключове извън разрешените стойности води до изключение `Nette\OutOfRangeException`:

```php
echo $list[-1]; // предизвиква Nette\OutOfRangeException
unset($list[30]); // предизвиква Nette\OutOfRangeException
```

Премахването на клавиш ще доведе до промяна на номерацията на елементите:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Нов елемент може да бъде добавен в началото чрез метода `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
