PHP reflexió
************

.[perex]
[api:Nette\Utils\Reflection] egy statikus osztály, amely hasznos funkciókat tartalmaz a PHP reflexióhoz. Célja a natív osztályok hibáinak kijavítása és a viselkedés egységesítése a PHP különböző verzióiban.

Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi, hogy a következő osztály alias van definiálva:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Kideríti, hogy a reflection hozzáfér-e a PHPdoc megjegyzésekhez. Előfordulhat, hogy a megjegyzések nem állnak rendelkezésre az opcode cache miatt, lásd például az [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments] direktívát.


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Kibővíti a `$name` az osztály teljes nevére a `$context`, azaz a névtér és a definiált aliasok kontextusában. Így azt adja vissza, ahogyan a PHP-elemző értelmezné a `$name` -t, ha az a `$context` testében lenne leírva.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Visszaadja egy olyan metódus tükörképét, amely tartalmazza a `$method` deklarációját. Általában minden metódus saját deklaráció, de a metódus teste is lehet a traitben és más néven.

Mivel a PHP nem ad elég információt a tényleges deklaráció meghatározásához, a Nette a saját heurisztikáját használja, amelynek **megbízhatónak** kell lennie.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Visszaadja egy olyan osztály vagy tulajdonság tükörképét, amely tartalmazza a `$prop` tulajdonság deklarációját. A tulajdonság a tulajdonságban is deklarálható.

Mivel a PHP nem ad elég információt a tényleges deklaráció meghatározásához, a Nette a saját heurisztikáját használja, amely **nem** megbízható.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Megállapítja, hogy a `$type` PHP beépített típus-e. Ellenkező esetben az osztály neve.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Használja a [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType] függvényt.


toString($reflection): string .[method]
---------------------------------------

A tükrözést emberi olvasásra alkalmas karakterlánccá alakítja.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
