スリム4でラテを使う
**********

.[perex]
この記事は「Daniel Opitz」によって書かれたもので、Slim FrameworkでLatteを使用する方法について書かれています。

まず、「Slim Frameworkをインストール」し、「Composerを使ってLatteをインストール」します。

```shell
composer require latte/latte
```


コンフィギュレーション .[#toc-configuration]
---------------------------------

プロジェクトのルート・ディレクトリに新しいディレクトリ`templates` を作成します。すべてのテンプレートは、後でそこに配置されます。

`config/defaults.php` ファイルに、新しい`template` 設定キーを追加します。

```php
$settings['template'] = __DIR__ . '/../templates';
```

LatteはテンプレートをネイティブのPHPコードにコンパイルし、ディスク上のキャッシュに保存します。そのため、あたかもネイティブのPHPで書かれたように高速に動作します。

`config/defaults.php` ファイルに新しい`template_temp` 設定キーを追加してください。`{project}/tmp/templates` ディレクトリが存在し、読み取りと書き込みのアクセス権があることを確認します。

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latteはテンプレートを変更するたびに自動的にキャッシュを再生成しますが、本番環境ではこれをオフにすることで、パフォーマンスを少し抑えることができます。

```php
// change to false in the production environment
$settings['template_auto_refresh'] = true;
```

次に、`Latte\Engine` クラスの DI コンテナ定義を追加します。

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

これだけでも技術的には Latte テンプレートをレンダリングすることができますが、PSR-7 レスポンスオブジェクトと連動させる必要があります。

この目的のために、特別な`TemplateRenderer` クラスを作成し、この作業を代行させます。

では次に、`src/Renderer/TemplateRenderer.php` にファイルを作成し、このコードをコピー＆ペーストしてください。

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


使用方法 .[#toc-usage]
------------------

Latte Engineオブジェクトを直接使用するのではなく、`TemplateRenderer` オブジェクトを使用して、テンプレートをPSR-7互換のオブジェクトにレンダリングします。

典型的なActionハンドラクラスは次のようなもので、`home.latte` という名前のテンプレートをレンダリングします。

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

これを動作させるには、この内容で`templates/home.latte` にテンプレートファイルを作成します。

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

すべてが正しく設定されている場合、次のような出力が表示されます。

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
