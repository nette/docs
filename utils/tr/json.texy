JSON ile Çalışma
****************

.[perex]
[api:Nette\Utils\Json], JSON formatını kodlamak ve kodunu çözmek için fonksiyonlar içeren statik bir sınıftır. Farklı PHP sürümlerinin güvenlik açıklarını ele alır ve hatalarda istisnalar fırlatır.


Kurulum:

```shell
composer require nette/utils
```

Tüm örnekler, bir takma ad oluşturulduğunu varsayar:

```php
use Nette\Utils\Json;
```


Kullanım
========


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

`$value` değerini JSON formatına dönüştürür.

`$pretty` ayarı yapıldığında, JSON'u daha kolay okunabilirlik ve netlik için biçimlendirir:

```php
Json::encode($value); // JSON döndürür
Json::encode($value, pretty: true); // daha okunaklı JSON döndürür
```

`$asciiSafe` ile çıktı ASCII olarak üretilir, yani unicode karakterler `\uxxxx` dizileriyle değiştirilir:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

`$htmlSafe` parametresi, çıktının HTML'de özel anlamı olan karakterler içermemesini sağlar:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

`$forceObjects` ile sayısal anahtarlara sahip diziler bile JavaScript nesneleri olarak kodlanır:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Hata durumunda `Nette\Utils\JsonException` istisnası fırlatır.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// İstisna işleme
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

JSON'u PHP'ye ayrıştırır.

`$forceArray` ayarı, nesneler yerine dizilerin döndürülmesini zorlar:

```php
Json::decode('{"variable": true}'); // stdClass türünde bir nesne döndürür
Json::decode('{"variable": true}', forceArrays: true); // bir dizi döndürür
```

Hata durumunda `Nette\Utils\JsonException` istisnası fırlatır.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// İstisna işleme
}
```


Presenter'dan JSON nasıl gönderilir?
====================================

Bunun için `$this->sendJson($data)` metodunu kullanabilirsiniz, örneğin `action*()` metodunda çağırabilirsiniz, bkz. [Yanıt Gönderme|application:presenters#Odeslání odpovědi].
