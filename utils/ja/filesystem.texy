ファイルシステム
********

.[perex]
[api:Nette\Utils\FileSystem] は、ファイルシステムを操作するための便利な関数を持つクラスです。ネイティブPHP関数に対する利点の1つは、エラーの場合に例外をスローすることです。


ディスク上のファイルを検索する必要がある場合、[Finder|finder] を使用してください。

インストール：

```shell
composer require nette/utils
```

以下の例では、エイリアスが作成されていることを前提としています：

```php
use Nette\Utils\FileSystem;
```


操作
==========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

ファイルまたはディレクトリ全体をコピーします。デフォルトでは、既存のファイルとディレクトリを上書きします。`$overwrite` パラメータが `false` に設定されている場合、ターゲットのファイルまたはディレクトリ `$target` が存在する場合、例外 `Nette\InvalidStateException` をスローします。エラー時に例外 `Nette\IOException` をスローします。

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

ディレクトリが存在しない場合に、親ディレクトリを含めて作成します。エラー時に例外 `Nette\IOException` をスローします。

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

ファイルまたはディレクトリ全体が存在する場合に削除します。ディレクトリが空でない場合、まずその内容を削除します。エラー時に例外 `Nette\IOException` をスローします。

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

ファイルの権限を `$fileMode` に、またはディレクトリに `$dirMode` を設定します。再帰的に処理し、ディレクトリの全内容にも権限を設定します。

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

ファイルを開き、リソースを返します。パラメータ `$mode` はネイティブ関数 `fopen()`:https://www.php.net/manual/en/function.fopen.php と同様に機能します。エラーの場合、例外 `Nette\IOException` をスローします。

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

ファイル `$file` の内容を返します。エラー時に例外 `Nette\IOException` をスローします。

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

ファイルの内容を行ごとに読み取ります。ネイティブ関数 `file()` とは異なり、ファイル全体をメモリに読み込まず、継続的に読み取ります。そのため、利用可能なメモリよりも大きなファイルを読み取ることも可能です。`$stripNewLines` は、行末文字 `\r` と `\n` を削除するかどうかを示します。
エラーの場合、例外 `Nette\IOException` をスローします。

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

ファイルまたはディレクトリ `$origin` の名前を変更または移動します。デフォルトでは、既存のファイルとディレクトリを上書きします。`$overwrite` パラメータが `false` に設定されている場合、ターゲットのファイルまたはディレクトリ `$target` が存在する場合、例外 `Nette\InvalidStateException` をスローします。エラー時に例外 `Nette\IOException` をスローします。

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

文字列 `$content` をファイル `$file` に書き込みます。エラー時に例外 `Nette\IOException` をスローします。

```php
FileSystem::write('/path/to/file', $content);
```


パス
=====


isAbsolute(string $path): bool .[method]
----------------------------------------

パス `$path` が絶対パスかどうかを判定します。

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
パスのすべてのセグメントを結合し、結果を正規化します。

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
パス内の `..` と `.` およびディレクトリ区切り文字をシステムのものに正規化します。

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

スラッシュをUnixシステムで使用される `/` に変換します。

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

スラッシュを現在のプラットフォーム固有の文字に変換します。つまり、Windowsでは `\`、それ以外では `/`。

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

パス `$path` からベースディレクトリ `$basePath` を基準として最終的なパスを導き出します。絶対パス (`/foo`, `C:/foo`) は変更せずに保持します（スラッシュのみ正規化します）。相対パスはベースパスに結合します。

```php
// Windowsでは、出力のスラッシュは逆になります（\）
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


静的アクセス vs 非静的アクセス
=================

例えばテスト目的のために、クラスを簡単に別のもの（モック）に置き換えられるように、非静的に使用してください：

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
