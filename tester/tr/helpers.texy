Yardımcılar
***********


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` CSS seçicileri kullanarak kolay HTML veya XML sorgulama ile `SimpleXMLElement` adresini genişletir.

```php
# create DomQuery from HTML string
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# test element existence using CSS selectors
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# find elements as DomQuery array
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# test if element matches selector (since version 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# find closest ancestor matching selector (since 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` `fopen()` , `file_get_contents()` veya `parse_ini_file()` gibi işlevleri kullanan bir kodu test etmenize yardımcı olmak için bellekteki dosyaları taklit eder. Örneğin:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Bu bir iddia değil, özel yöntemleri ve özellik nesnelerini test etmek için bir yardımcıdır.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // erişilebilir özel $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
`purge()` yöntemi belirtilen dizini oluşturur ve zaten mevcutsa tüm içeriğini siler. Geçici dizin oluşturmak için kullanışlıdır. Örneğin `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Testler paralel olarak çalışır. Bazen çalışan testlerin çakışmaması gerekir. Genellikle veritabanı testlerinin veritabanı içeriğini hazırlaması gerekir ve testin çalışma süresi boyunca hiçbir şeyin onları rahatsız etmemesi gerekir. Bu durumlarda `Tester\Environment::lock($name, $dir)` adresini kullanırız:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

İlk bağımsız değişken bir kilit adıdır. İkincisi ise kilidin kaydedileceği dizine giden yoldur. İlk olarak kilidi alan test çalışır. Diğer testler tamamlanana kadar beklemelidir.


Environment::bypassFinals() .[filter]
-------------------------------------
`final` olarak işaretlenen sınıfların veya yöntemlerin test edilmesi zordur. Bir test başlangıcında `Tester\Environment::bypassFinals()` adresinin çağrılması, kod yüklemesi sırasında `final` anahtar sözcüklerinin kaldırılmasına neden olur.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- hata dökümünün okunabilirliğini artırır (renklendirme dahil), aksi takdirde varsayılan PHP yığın izi yazdırılır
- assertion'ların testte çağrıldığını kontrol etmeyi sağlar, aksi takdirde assertion'ları olmayan (örneğin unutulmuş) testler de geçer
- `--coverage` kullanıldığında kod kapsamı toplayıcısını otomatik olarak başlatır (daha sonra açıklanacaktır)
- kodun sonunda OK veya FAILURE durumunu yazdırır


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Testleri bölebileceğiniz `test()`, `testException()`, `setUp()` ve `tearDown()` global fonksiyonlarını oluşturur.

```php
test('test açıklaması', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Testin doğrudan mı yoksa Tester aracılığıyla mı çalıştırıldığını öğrenmenizi sağlar.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# run by Tester
} else {
	# another way
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester, testleri belirli sayıda iş parçacığında paralel olarak çalıştırır. İlgilendiğimizde çevresel bir değişkende bir iş parçacığı numarası bulacağız:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::VariableThread);
```
