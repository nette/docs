Začínáme
########

.[perex]
V první kapitole si stáhneme **Nette Framework**, seznámíme se s obsahem distribuce a připravíme si adresářovou strukturu
naší aplikace.

--------

Stažení a instalace
*******************

.[note]
Návod je psán pro aktuální vývojovou verzi. V době psaní této kapitoly se jedná o verzi `a1b5427` ze dne 23. 12. 2011.

Nejprve si vytvoříme na místě, které bude přístupné z našeho vývojového webového serveru, prázdný adresář, do kterého
umístíme náš projekt. Pojmenujeme ho například `quickstart`. Při nahrávání na produkční server je výhodné některé soubory
oddělit od prostoru, který je přístupný z webu, ale prozatím se tím nebudeme zabývat. Všechny bezpečnostní tipy a triky
naleznete v poslední kapitole návodu.

Nyní si stáhneme "Nette Framework":[http://nette.org/cs/download]. Archiv rozbalíme (prozatím je jedno kam) a podíváme se
na jeho obsah. Nejvíce nás budou zajímat složky `Nette` a `sandbox`. Složka `Nette`, jak již název napovídá, obsahuje
samotný Nette Framework. Složka `sandbox` obsahuje předpřipravenou kostru aplikace založené na Nette. Tato kostra nám
usnadní mnoho práce a tak jí ihned zneužijeme. Obsah této složky rozbalíme do naší složky projektu.
Adresářová struktura bude vypadat nějak takto:

/---
quickstart/
+-- app/
+-- libs/
+-- log/
+-- temp/
+-- tests/
+-- www/
\---

Připraveno!
***********

Nyní by mělo být vše připraveno a pokud zadáme do prohlížeče adresu našeho webového serveru a odkážeme se na adresář
`www` z našeho quickstartu, měla by nás uvítat následující stránka:

[* 02-skeleton-start.png *]

Podívejme se nyní podívat na jednotlivé složky:

- Složka `app` bude obsahovat samotné zdrojové kódy a šablony naší aplikace. Většina naší práce se bude odehrávatprávě v této složce.
- `libs` složí k umístění knihoven třetích stran, které bude naše aplikace využívat. Jednou (a prozatím jedinou) takovou knihovnou bude právě Nette Framework. Při použití již připravené kostry z distribuce je Nette Framework již připraven k použití.
- Do adresáře `log`, jak již název napovídá, se ukládají informace o běhu aplikace, například chybová hlášení. Nette toto ukládání chybových hlášení používá ve výchouím nastavení pouze v produkčním prostředí, takže nás tato složka nebude zatím zajímat.
- Adresář `temp` slouží na dočasné soubory, převážně cache a data sezení.
- Do složky `tests` budeme ukládat unit testy naší aplikace. Protože je to naše první aplikace, nebudeme se psaním testů zatím zatěžovat, nicméně je výhodné testy psát. Proto bude psaní testů v prostředí Nette popsáno v jednom z navazujících návodů.
- Složka `www` by měla být jediná složka, která je veřejně přístupná z webu. Právě do ní by měl v produkčním prostředí ukazovat `document_root` webového serveru. Budeme do ní ukládat obrázky, JavaScripty, CSS a další data, na která se budeme odkazovat z aplikace.

.[note]
Pokud používáte operační systém GNU/Linux (případně jiný nix-like systém), budete potřebovat nastavit oprávnění pro zápis
do složek `log` a `temp`. Nejjednodušší je použít příkaz `chmod -R a+rwX temp log`, ten ale nebývá vždy nejvhodnější.
Pečlivě zvažte, jaká oprávnění je potřeba nastavit.

Pojďme se na složku `app` nyní podívat podrobněji...

Složka `app`
************

Jak již bylo řečeno, jedná se nejdůležitější adresář naší aplikace a budeme v něm trávit většinu času.
Adresářová struktura této složky vypadá následovně:

/---
app/
+-- models/
    +-- Authenticator.php
    +-- Model.php
+-- presenters/
	+-- BasePresenter.php
	+-- ErrorPresenter.php
	+-- HomepagePresenter.php
	+-- SignPresenter.php
+-- templates/
	+-- Error/
	    ...
	+-- Homepage/
	    ...
	+-- Sign/
	    ...
	+-- @layout.latte
	+-- maintenance.phtml
+-- bootstrap.php
+-- config.neon
\---


Adresář `models`
================

V adresáři `models` jsou umístěny datové modely aplikace. Jsou to třídy, které zapouzdřují a zajišťují komunikaci
aplikace s datovými úložišti, typicky databází. Modely si pořádně představíme později a ukážeme si pravidla,
kterých bychom se při navrhování datové vrstvy měli řídit.


Adresář `presenters`
====================

V adresáři `presenters` se nacházejí tzv. presentery. Jedná se o třídy, které zajišťují správné propojení jednotlivých
částí aplikace - šablon, komponent a modelů. Toto oddělení prezentační vrstvy od datové je velmi výhodné, jak si ukážeme
později. Více se o presenterech dozvíte v další kapitole.


Adresář `templates`
===================

V této složce jsou šablony naší aplikace. Každý presenter (kromě `BasePresenter`) zde má vlastní složku se šablonami.
Jednotlivé šablony pak představují "pohledy" presenteru a jsou kombinací HTML a šablonovacího jazyka Latte.


`bootstrap.php`
===============

Přímo v této složce si povšimněte souborů `bootstrap.php` a `config.neon`. Soubor `bootstrap.php` představuje "zavaděč"
aplikace. Stará se o správné načtení Nette, načtení konfigurace z `config.neon`, nastavení routování a nakonec samotné
spuštění aplikace. Pojďme si je oba nyní ve stručnosti představit.

Soubor `bootstrap.php` vypadá následovně:

/---php
<?php

/**
 * My Application bootstrap file.
 */
use Nette\Diagnostics\Debugger,
	Nette\Application\Routers\Route;


// Load Nette Framework
require LIBS_DIR . '/Nette/loader.php';


// Enable Nette Debugger for error visualisation & logging
Debugger::$logDirectory = __DIR__ . '/../log';
Debugger::$strictMode = TRUE;
Debugger::enable();


// Configure application
$configurator = new Nette\Config\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');

// Enable RobotLoader - this will load all classes automatically
$configurator->createRobotLoader()
	->addDirectory(APP_DIR)
	->addDirectory(LIBS_DIR)
	->register();

// Create Dependency Injection container from config.neon file
$configurator->addConfig(__DIR__ . '/config.neon');
$container = $configurator->createContainer();

// Opens already started session
if ($container->session->exists()) {
	$container->session->start();
}

// Setup router
$router = $container->router;
$router[] = new Route('index.php', 'Homepage:default', Route::ONE_WAY);
$router[] = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');


// Configure and run the application!
$application = $container->application;
//$application->catchExceptions = TRUE;
$application->errorPresenter = 'Error';
$application->run();
\---

Na začátku je pouze výchozí hlavička souboru a `use` direktivy, které nám říkají, že se chceme na třídy `Nette\Diagnostics\Debugger`
a `Nette\Application\Routers\Route` odkazovat pouze krátkými jmény.

.[note]
Pokud nevíte, k čemu direktiva `use` slouží, konzultujte PHP manuál na téma "jmenné prostory":[http://cz2.php.net/manual/en/language.namespaces.php].
Kapitola zatím bohužel nebyla přeložena do češtiny.


Řádkem
/---php
require LIBS_DIR . '/Nette/loader.php';
\---
provedeme načtení Nette. Soubor `loader.php` načte některé základní soubory a nastaví mechanismus automatického
načítání jednotlivých částí Nette v případě jejich potřeby, takže se nemusíme starat o další `require` do Nette.

Řádky
/---php
Debugger::$logDirectory = __DIR__ . '/../log';
Debugger::$strictMode = TRUE;
Debugger::enable();
\---
Povolí "laděnku":[cs/debugging]. Ta nám usnadní práci při hledání chyb, a to jak při vývoji, tak na produkčním serveru.
Nastavení `Debugger::$logDirectory` totiž určuje adresář, do kterého se v produkčním režimu budou ukládat chybová hlášení.

/---php
$configurator = new Nette\Config\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');

$configurator->createRobotLoader()
	->addDirectory(APP_DIR)
	->addDirectory(LIBS_DIR)
	->register();

$configurator->addConfig(__DIR__ . '/config.neon');
$container = $configurator->createContainer();
\---

Načte konfigurační soubor `config.neon`. Tento soubor obsahuje nastavení naší aplikace, hlavně připojení k databázi.
Také si povšimněte volání `$configurator->createRobotLoader()`. `RobotLoader` je služba Nette, která indexuje
soubory v zadaných složkách a stará se o [automatické načítání tříd | cs/auto-loading] v případě jejich potřeby. Protože
jedna ze zadaných složek je naše složka `app`, budou se nám veškeré třídy načítat automaticky bez nutnosti jejich `require`ování.

/---php
if ($container->session->exists()) {
	$container->session->start();
}
\---

Spustí v případě potřeby session. Jedná se v podstatě o náhradu za volání `session_start()`, akorát je ošetřeno tak,
aby se session startovala pouze v případě potřeby.

/---php
$router = $container->router;
$router[] = new Route('index.php', 'Homepage:default', Route::ONE_WAY);
$router[] = new Route('<presenter>/<action>[/<id>]', 'Homepage:default');
\---

Nastaví [routování | cs/routing]. Jedná se o mechanismus, který se stará o správný překlad URL adresy na vnitřní požadavek aplikace a opačně.
To nám umožní používat hezké URL adresy a kdykoliv je bez jediné změny ve zbytku aplikace upravit.
Routování si podrobněji představíme v jedné posledních kapitol, prozatím si vystačíme s těmito routami, které jsou
dostatečné pro většinu aplikací.

/---php
$application = $container->application;
$application->errorPresenter = 'Error';
$application->run();
\---

Nastaví jméno presenteru, který se bude vykonávat v případě chyby a konečně spustí aplikaci. Volání `$application->run()`
zajistí vytvoření presenteru a vyřízení požadavku od klienta.

Nyní, vyzbrojeni základními znalostmi, se můžeme pustit do samotného programování naší aplikace.
