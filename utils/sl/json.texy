Delo z JSON
***********

.[perex]
[api:Nette\Utils\Json] je statični razred s funkcijami za kodiranje in dekodiranje formata JSON. Obravnava ranljivosti različnih različic PHP in vrže izjeme pri napakah.


Namestitev:

```shell
composer require nette/utils
```

Vsi primeri predpostavljajo ustvarjen alias:

```php
use Nette\Utils\Json;
```


Uporaba
=======


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Pretvori `$value` v format JSON.

Pri nastavitvi `$pretty` formatira JSON za lažje branje in preglednost:

```php
Json::encode($value); // vrne JSON
Json::encode($value, pretty: true); // vrne preglednejši JSON
```

Pri `$asciiSafe` generira izhod v ASCII, tj. unicode znake nadomesti z zaporedji `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Parameter `$htmlSafe` zagotovi, da izhod ne bo vseboval znakov, ki imajo v HTML poseben pomen:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Z `$forceObjects` se bodo tudi polja s številskimi ključi kodirala kot JavaScript objekti:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Pri napaki vrže izjemo `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Obravnava izjeme
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Razčleni JSON v PHP.

Nastavitev `$forceArray` vsili vračanje polj namesto objektov:

```php
Json::decode('{"variable": true}'); // vrne objekt tipa stdClass
Json::decode('{"variable": true}', forceArrays: true); // vrne polje
```

Pri napaki vrže izjemo `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Obravnava izjeme
}
```


Kako poslati JSON iz presenterja?
=================================

Za to lahko uporabimo metodo `$this->sendJson($data)`, ki jo lahko pokličemo na primer v metodi `action*()`, glejte [Pošiljanje odgovora|application:presenters#Odeslání odpovědi].
