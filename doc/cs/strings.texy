Práce s řetězci - Nette\Utils\Strings
**********************************

.[perex]
[Nette\Utils\Strings |api:] je statická třída s užitečnými funkcemi pro práci s řetězci převážně v kódování UTF-8.


Všechny příklady předpokládají vytvořený alias:

/--php
use Nette\Utils\Strings;
\--


lower($s)
---------

Převede UTF-8 řetězec na malá písmena.

/--php
echo Strings::lower('Dobrý den'); // dobrý den
\--


upper($s)
---------

Převede UTF-8 řetězec na velká písmena.

/--php
echo Strings::upper('Dobrý den'); // DOBRÝ DEN
\--


firstUpper($s)
--------------

Převede první písmeno UTF-8 řetězce na velké, ostatní nemění.

/--php
echo Strings::firstUpper('dobrý den'); // Dobrý den
\--


capitalize($s)
--------------

Převede první písmeno každého slova v UTF-8 řetězci na velké, ostatní na malé.

/--php
echo Strings::capitalize('Dobrý den'); // Dobrý Den
\--


normalize($s) .{toc: normalize()}
---------------------------------

Odstraní z textu pravostranné mezery, řídící znaky a sjednotí oddělovače řádků na `\n`.


webalize($s, $charlist=NULL, $lower=TRUE) .{toc: webalize()}
------------------------------------------------------------

Upraví UTF-8 řetězec do tvaru používaného v URL, tj. odstraní diakritiku a všechny znaky kromě písmen anglické abecedy a číslic nahradí spojovníkem.

/--php
echo Strings::webalize('náš produkt'); // nas-produkt
\--

Mají-li být zachovány i jiné znaky, lze je uvést v druhém parametru funkce.

/--php
echo Strings::webalize('10. obrázek_id', '._'); // 10.-obrazek_id
\--

Třetím parametrem lze potlačit převádění na malá písmenka.

/--php
echo Strings::webalize('Dobrý den', NULL, FALSE); // Dobry-den
\--


toAscii($s)
-----------

Odstraní z UTF-8 řetězce diakritiku.

/--php
echo Strings::toAscii('žluťoučký kůň'); // zlutoucky kun
\--


trim($s, $charlist=NULL) .{toc: trim()}
----------------------------------------

Ořízne mezery (nebo jiné znaky určené druhým parametrem) ze začátku a konce UTF-8 řetězce.

/--php
echo Strings::trim('  Hello  '); // 'Hello'
\--


truncate($s, $maxLen, $append=`'…'`) .{toc: truncate()}
---------------------------------------------------------

Ořízne UTF-8 řetězec na uvedenou maximální délku, přičemž se snaží zachovávat celá slova. Pokud dojde ke zkrácení řetězce, přidá nakonec trojtečku (lze změnit třetím parametrem).

/--php
$text = 'Řekněte, jak se máte?';
echo Strings::truncate($text, 5); // 'Řekn…'
echo Strings::truncate($text, 20); // 'Řekněte, jak se…'
echo Strings::truncate($text, 30); // 'Řekněte, jak se máte?'
echo Strings::truncate($text, 20, '~'); // 'Řekněte, jak se~'
\--



indent($s, $level=1, $indentationChar=`"\t"`) .{toc: indent()}
---------------------------------------------------------------

Odsadí víceřádkový text zleva. Počet odsazení určuje druhý parametr, čím odsazovat parametr třetí (výchozí hodnotou je tabulátor).

/--php
echo Strings::indent('Nette'); // '	Nette'
echo Strings::indent('Nette', 2, '+'); // '++Nette'
\--


padLeft($s, $length, $pad=`' '`) .{toc: padLeft()}
--------------------------------------------------

Doplní UTF-8 řetězec na zadanou délku opakováním řetězce `$pad` zleva.

/--php
echo Strings::padLeft('Nette', 6); // ' Nette'
echo Strings::padLeft('Nette', 8, '+'); // '+++Nette'
echo Strings::padLeft(' Nette', 11, 'WOW'); // 'WOWWO Nette'
\--


padRight($s, $length, $pad=`' '`) .{toc: padRight()}
---------------------------------------------------

Doplní UTF-8 řetězec na zadanou délku opakováním řetězce `$pad` zprava.

/--php
echo Strings::padRight('Nette', 6); // 'Nette '
echo Strings::padRight('Nette', 8, '+'); // 'Nette+++'
echo Strings::padRight('Nette is ', 16, 'great'); // 'Nette is greatgr'
\--


fixEncoding($s, $encoding=`'UTF-8'`) .{toc: fixEncoding()}
------------------------------------------------------

Odstraní z řetězce neplatné znaky v daném kódování.

/--php
$correctStrings = Strings::fixEncoding($string);
\--


*bool* checkEncoding($s, $encoding=`'UTF-8'`) .{toc: checkEncoding()}
-----------------------------------------------------------------

Zjistí, jestli jde o řetězec platný v daném kódování.

/--php
$isUtf8 = Strings::checkEncoding($string);
\--


*int* length($s)
----------

Vrací délku UTF-8 řetězce.

/--php
echo Strings::length('Nette'); // '5'
echo Strings::length('červená'); // '7'
\--


*bool* startsWith($haystack, $needle) .{toc: startsWith()}
----------------------------------------------------------

Vrací `TRUE` v případě, že řetězec `$haystack` začíná řetězcem `$needle`.

/--php
$haystack = 'Začíná';
$needle = 'Za';
Strings::startsWith($haystack, $needle); // TRUE
\--

*bool* endsWith($haystack, $needle) .{toc: endsWith()}
------------------------------------------------------

Vrací `TRUE` v případě, že řetězec `$haystack` končí řetězcem `$needle`.

/--php
$haystack = 'Končí';
$needle = 'čí';
Strings::endsWith($haystack, $needle); // TRUE
\--


*bool* compare($left, $right, $len=NULL) .{toc: compare()}
---------------------------------------------------------

Porovnání dvou UTF-8 řetězců nebo jejich částí bez ohledu na velikost písmen. Pokud je `$len` větší než nula, porovnává se příslušný počet znaků na začátku řetězců, pokud je menší než nula, porovnává se příslušný počet posledních znaků řetězců a pokud je argument roven nule, porovnávají se celé řetězce.

/--php
echo Strings::compare('Nette', 'nette'); // TRUE
echo Strings::compare('Nette', 'next', 2); // TRUE - shoda prvních 2 znaků
echo Strings::compare('Nette', 'Latte', -2); // TRUE - shoda posledních 2 znaků
\--


chr($code, $encoding=`'UTF-8'`) .{toc: chr()}
-----------------------------------------

Vytvoří znak dle zadaného Unicode kódu a vrátí ho v požadovaném kódování.

/--php
echo Strings::chr(0xA9); // vytvoří znak '©' v kódování UTF-8
echo Strings::chr(0x2026, 'CP1250'); // trojtečka v kódování CP1250
\--


random($length=10, $charlist=`'0-9a-z'`) .{toc: random()}
---------------------------------------------------------

Vygeneruje náhodný řetězec o dané délce ze znaků specifikovaných parametrem `$charlist`. Lze používat i intervaly zapsané jako třeba `0-9`.

/--php
echo Strings::random(); // '6zq3a1nl8n'
echo Strings::random(5, 'A-Z'); // 'HLKUR'
\--



Regulární výrazy
----------------

Třída Strings zapouzdřuje několik funkcí pro práci s regulárními výrazy. Na rozdíl od nativních PHP funkcí disponuje čitelnějším API a především jakákoliv chyba při kompilaci nebo zpracování výrazu vyhodí výjimku `Nette\RegexpException`.


*array* split($subject, $pattern, $flags=NULL) .{toc: split()}
--------------------------------------------------------------

Rozdělí řetězec do pole podle regulárního výrazu. Jako `$flag` je možné uvést stejné příznaky jako u funkce [php:preg_split], s tím, že příznak `PREG_SPLIT_DELIM_CAPTURE` je nastaven vždy.

/--php
$res = Strings::split('Prvni,  druhy,treti', '~,\s*~');
// array('Prvni', 'druhy', 'treti')
$res = Strings::split('Prvni,  druhy,treti', '~(,)\s*~');
// array('Prvni', ',', 'druhy', ',', 'treti')
\--


*array* match($subject, $pattern, $flags=NULL, $offset=0) .{toc: match()}
-------------------------------------------------------------------------

Zjistí, jestli zadaný řetězec odpovídá regulárnímu výrazu, a vrátí pole s nalezeným výrazem a jednotlivými podvýrazy. Jako `$flag` je možné uvést stejné příznaky jako u funkce [php:preg_match].

/--php
list($res) = Strings::match('Prvni,  druhy,treti', '~[a-z]+~i'); // 'Prvni'
list($res) = Strings::match('Prvni,  druhy,treti', '~\d+~'); // NULL
\--


*array* matchAll($subject, $pattern, $flags=NULL, $offset=0) .{toc: matchAll()}
-------------------------------------------------------------------------------

Hledá v řetězci všechny výskyty odpovídající regulárnímu výrazu a vrátí je jako dvourozměrné pole. Jako `$flag` je možné uvést stejné příznaky jako u funkce [php:preg_match_all], s tím rozdílem, že příznak `PREG_SET_ORDER` je výchozí hodnotou.

/--php
$res = Strings::matchAll('Prvni,  druhy,treti', '~[a-z]+~i');
/*
array(
	0 => array('Prvni'),
	1 => array('druhy'),
	2 => array('treti'),
)
*/

$res = Strings::matchAll('Prvni,  druhy,treti', '~\d+~'); // array()
\--


replace($subject, $pattern, $replacement=NULL, $limit=-1) .{toc: replace()}
-----------------------------------------------------------------------------

Provede v řetězci záměny dle regulárního výrazu. Ten je určen druhým parametrem metody a nemusí být pouze textovým řetězcem, ale může být i asociativním polem ve tvaru `pattern` => `replacement`. Jako třetí parametr lze uvést nahrazovací callback a čtvrtým parametrem lze limitovat počet nahrazení.

/--php
echo Strings::replace('Prvni,  druhy,treti', '~[a-z]+~i', '*');
// '*,  *,*'

echo Strings::replace('Prvni,  druhy,treti', array(
	'~[a-z]+~i' => '*',
	'~\s+~' => '+',
));
// '*,+*,*'

echo Strings::replace('Prvni,  druhy,treti', '~[a-z]+~i', function ($m) {
	return strrev($m[0]);
});
// 'invrP,  yhurd,itert'
\--

{{tags: nette\utils\strings}}
