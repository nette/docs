コールバックの操作
*********

.[perex]
[api:Nette\Utils\Callback] は、[PHPコールバック |https://www.php.net/manual/en/language.types.callable.php] を操作するための関数を持つ静的クラスです。


インストール：

```shell
composer require nette/utils
```

以下の例では、エイリアスが作成されていることを前提としています：

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

変数 `$callable` が有効なコールバックであるかどうかをチェックします。そうでない場合は `Nette\InvalidArgumentException` をスローします。`$syntax` が true の場合、関数は単に `$callable` がコールバックの構造を持っていることを検証しますが、指定されたクラスやメソッドが実際に存在するかどうかは検証しません。`$callable` を返します。

```php
Callback::check('trim'); // 例外をスローしません
Callback::check(['NonExistentClass', 'method']); // Nette\InvalidArgumentException をスローします
Callback::check(['NonExistentClass', 'method'], true); // 例外をスローしません
Callback::check(function () {}); // 例外をスローしません
Callback::check(null); // Nette\InvalidArgumentException をスローします
```


toString($callable): string .[method]
-------------------------------------

PHPコールバックをテキスト形式に変換します。クラスやメソッドは存在する必要はありません。

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

PHPコールバック内のメソッドまたは関数のリフレクションを返します。

```php
$ref = Callback::toReflection('trim');
// $ref は ReflectionFunction('trim') です

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref は ReflectionMethod('MyClass', 'method') です
```


isStatic($callable): bool .[method]
-----------------------------------

PHPコールバックが関数または静的メソッドであるかどうかを判定します。

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

`Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php を使用して作成されたClosureを逆展開します。

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
