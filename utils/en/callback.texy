Callback Functions
******************

.[perex]
[api:Nette\Utils\Callback] is a static class containing functions for working with [PHP callbacks |https://www.php.net/manual/en/language.types.callable.php].


Installation:

```shell
composer require nette/utils
```

All examples assume the following class alias is defined:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Checks if `$callable` is a valid PHP callback. Otherwise, it throws `Nette\InvalidArgumentException`. If `$syntax` is set to `true`, the function only verifies that `$callable` has a valid callback structure but does not check if the class or method actually exists. Returns the original `$callable`.

```php
Callback::check('trim'); // no exception
Callback::check(['NonExistentClass', 'method']); // throws Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // no exception
Callback::check(function () {}); // no exception
Callback::check(null); // throws Nette\InvalidArgumentException
```


toString(callable $callable): string .[method]
----------------------------------------------

Converts a PHP callback to its textual representation. The class or method does not need to exist.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection(callable $callable): \ReflectionMethod|\ReflectionFunction .[method]
---------------------------------------------------------------------------------

Returns a reflection for the method or function used in the PHP callback. Throws `Nette\InvalidArgumentException` if the callback is not valid or does not reference an existing method/function.

```php
$ref = Callback::toReflection('trim');
// $ref is ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref is ReflectionMethod('MyClass', 'method')
```


isStatic(callable $callable): bool .[method]
--------------------------------------------

Checks whether the PHP callback is a global function or a static method. Throws `Nette\InvalidArgumentException` if the callback is not valid or does not reference an existing method/function.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(\Closure $closure): callable|array .[method]
---------------------------------------------------

Unwraps a closure created by `Closure::fromCallable()`. Returns the original callable array or string.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```


closure($callable): Closure .[method deprecated]
------------------------------------------------

(or `closure($classOrObject, $method): Closure`)

Converts PHP callback to object "Closure":https://www.php.net/manual/en/class.closure.php.

```php
$trimmer = Callback::closure('trim');
$trimmer(' hello '); // 'hello'
```

.[note]
Since PHP 7.1 you should use native `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.


invoke($callable, ...$args): mixed .[method deprecated]
-------------------------------------------------------

Calls the `$callable`, passes the remaining parameters as arguments and returns the returned value.

When is not callable, it throws `Nette\InvalidArgumentException` unlike `call_user_func` which only triggers a warning.

```php
$callback = 'trim';
Callback::invoke($callback, ' hello '); // 'hello'
```

.[note]
Since PHP 7.0 you should use native `$callback($arg, ...)`.


invokeArgs($callable, array $args = []): mixed .[method deprecated]
-------------------------------------------------------------------

Calls the `$callable` with `$args` arguments and return its value.

When is not callable, it throws `Nette\InvalidArgumentException` unlike `call_user_func` which only triggers a warning.

```php
$callback = 'trim';
Callback::invoke($callback, [' hello ']); // 'hello'
```

.[note]
Since PHP 7.0 you should use native `$callback(...$args)`.
