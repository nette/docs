Configurazione delle Applicazioni
*********************************

.[perex]
Panoramica delle opzioni di configurazione per le Applicazioni Nette.


Application
===========

```neon
application:
	# mostrare il pannello "Nette Application" in Tracy BlueScreen?
	debugger: ...           # (bool) predefinito è true

	# verrà chiamato l'error-presenter in caso di errore?
	# ha effetto solo in modalità sviluppo
	catchExceptions: ...    # (bool) predefinito è true

	# nome dell'error-presenter
	errorPresenter: Error   # (string|array) predefinito è 'Nette:Error'

	# definisce alias per presenter e azioni
	aliases: ...

	# definisce regole per la traduzione del nome del presenter in classe
	mapping: ...

	# i link errati non generano avvisi?
	# ha effetto solo in modalità sviluppo
	silentLinks: ...        # (bool) predefinito è false
```

Dalla versione `nette/application` 3.2 è possibile definire una coppia di error-presenter:

```neon
application:
	errorPresenter:
		4xx: Error4xx   # per l'eccezione Nette\Application\BadRequestException
		5xx: Error5xx   # per le altre eccezioni
```

L'opzione `silentLinks` determina come Nette si comporta in modalità sviluppo quando la generazione di un link fallisce (ad esempio perché il presenter non esiste, ecc.). Il valore predefinito `false` significa che Nette lancerà un errore `E_USER_WARNING`. Impostandolo su `true` si sopprime questo messaggio di errore. Nell'ambiente di produzione, `E_USER_WARNING` viene sempre lanciato. Questo comportamento può essere influenzato anche impostando la variabile del presenter [$invalidLinkMode|creating-links#link-non-validi].

Gli [Alias semplificano il collegamento |creating-links#alias] ai presenter usati frequentemente.

La [Mappatura definisce le regole |directory-structure#mappatura-dei-presenter], secondo le quali dal nome del presenter si deriva il nome della classe.


Registrazione automatica dei presenter
--------------------------------------

Nette aggiunge automaticamente i presenter come servizi al container DI, il che accelera notevolmente la loro creazione. Come Nette trova i presenter può essere configurato:

```neon
application:
	# cercare i presenter nella mappa delle classi di Composer?
	scanComposer: ...      # (bool) predefinito è true

	# maschera a cui devono corrispondere il nome della classe e del file
	scanFilter: ...        # (string) predefinito è '*Presenter'

	# in quali directory cercare i presenter?
	scanDirs:              # (string[]|false) predefinito è '%appDir%'
		- %vendorDir%/mymodule
```

Le directory specificate in `scanDirs` non sovrascrivono il valore predefinito `%appDir%`, ma lo completano, quindi `scanDirs` conterrà entrambi i percorsi `%appDir%` e `%vendorDir%/mymodule`. Se volessimo omettere la directory predefinita, useremmo un [punto esclamativo |dependency-injection:configuration#Unione], che sovrascrive il valore:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

La scansione delle directory può essere disattivata specificando il valore false. Non consigliamo di sopprimere completamente l'aggiunta automatica dei presenter, perché altrimenti le prestazioni dell'applicazione diminuiranno.


Template Latte
==============

Con questa impostazione è possibile influenzare globalmente il comportamento di Latte nei componenti e nei presenter.

```neon
latte:
	# mostrare il pannello Latte nella Barra di Tracy per il template principale (true) o tutti i componenti (all)?
	debugger: ...        # (true|false|'all') predefinito è true

	# genera template con l'intestazione declare(strict_types=1)
	strictTypes: ...     # (bool) predefinito è false

	# attiva la modalità [parser rigoroso |latte:develop#modalità rigorosa]
	strictParsing: ...   # (bool) predefinito è false

	# attiva il [controllo del codice generato |latte:develop#Controllo del codice generato]
	phpLinter: ...       # (string) predefinito è null

	# imposta la locale
	locale: cs_CZ        # (string) predefinito è null

	# classe dell'oggetto $this->template
	templateClass: App\MyTemplateClass # predefinito è Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Se usi Latte versione 3, puoi aggiungere nuove [estensioni |latte:extending-latte#latte-extension] usando:

```neon
latte:
	extensions:
		- Latte\Essential\TranslatorExtension(@Nette\Localization\Translator)
```

Se usi Latte versione 2, puoi registrare nuovi tag specificando il nome della classe o un riferimento a un servizio. Per impostazione predefinita, viene chiamato il metodo `install()`, ma questo può essere modificato specificando il nome di un altro metodo:

```neon
latte:
	# registrazione di tag Latte personalizzati
	macros:
		- App\MyLatteMacros::register         # metodo statico, nomeclasse o callable
		- @App\MyLatteMacrosFactory           # servizio con metodo install()
		- @App\MyLatteMacrosFactory::register # servizio con metodo register()

services:
	- App\MyLatteMacrosFactory
```


Routing
=======

Impostazioni di base:

```neon
routing:
	# mostrare il pannello di routing nella Barra di Tracy?
	debugger: ...   # (bool) predefinito è true

	# serializza il router nel container DI
	cache: ...      # (bool) predefinito è false
```

Il routing viene solitamente definito nella classe [RouterFactory |routing#Collezione di route]. In alternativa, le route possono essere definite anche nella configurazione utilizzando coppie `maschera: azione`, ma questo metodo non offre una così ampia variabilità nelle impostazioni:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Costanti
========

Creazione di costanti PHP.

```neon
constants:
	Foobar: 'baz'
```

Dopo l'avvio dell'applicazione, verrà creata la costante `Foobar`.

.[note]
Le costanti non dovrebbero servire come una sorta di variabili globalmente disponibili. Per passare valori agli oggetti, utilizza la [dependency injection |dependency-injection:passing-dependencies].


PHP
===

Impostazione delle direttive PHP. Una panoramica di tutte le direttive si trova su [php.net |https://www.php.net/manual/en/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```


Servizi DI
==========

Questi servizi vengono aggiunti al container DI:

| Nome            | Tipo                         | Descrizione
|----------------------------------------------------------
| `application.application`	     | [api:Nette\Application\Application]      |  [avviatore dell'intera applicazione |how-it-works#Nette Application]
| `application.linkGenerator`    | [api:Nette\Application\LinkGenerator]    |  [LinkGenerator |creating-links#LinkGenerator]
| `application.presenterFactory` | [api:Nette\Application\PresenterFactory] |  factory per i presenter
| `application.###`              | [api:Nette\Application\UI\Presenter]     |  singoli presenter
| `latte.latteFactory`           | [api:Nette\Bridges\ApplicationLatte\LatteFactory] | factory dell'oggetto `Latte\Engine`
| `latte.templateFactory`        | [api:Nette\Application\UI\TemplateFactory] | factory per [`$this->template` |templates]
