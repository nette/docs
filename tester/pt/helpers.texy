Ajudantes
*********


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` é uma classe que se estende `SimpleXMLElement` com métodos que facilitam o teste de conteúdo HTML ou XML.

```php
# let's have an HTML document in $html that we load
$dom = Tester\DomQuery::fromHtml($html);

# we can test the presence of elements using CSS selectors
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[type="submit"]'));

# or select elements as array of DomQuery
$elems = $dom->find('input[data-autocomplete]');
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` emula arquivos em memória para ajudá-lo a testar um código que utiliza funções como `fopen()`, `file_get_contents()` ou `parse_ini_file()`. Por exemplo:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Isto não é uma afirmação, mas uma ajuda para testar métodos privados e objetos de propriedade.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // acessível privado $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
O método `purge()` cria o diretório especificado e, se ele já existir, apaga todo o seu conteúdo. Ele é útil para a criação de diretórios temporários. Por exemplo, em `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Os testes são realizados em paralelo. Às vezes, não precisamos sobrepor o teste em execução. Normalmente, os testes de banco de dados precisam preparar o conteúdo do banco e nada os perturba durante o tempo de execução do teste. Nesses casos, usamos `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

O primeiro argumento é o nome de um cadeado. O segundo é um caminho para o diretório para salvar o cadeado. O teste que adquire a eclusa é o primeiro. Outros testes devem esperar até que seja concluído.


Environment::bypassFinals() .[filter]
-------------------------------------
As classes ou métodos marcados como `final` são difíceis de serem testados. Chamar o `Tester\Environment::bypassFinals()` em um início de teste faz com que as palavras-chave `final` sejam removidas durante o carregamento do código.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- melhora a legibilidade de erros de despejo (coloração incluída), caso contrário, o traço padrão da pilha PHP é impresso
- permite verificar se as afirmações foram chamadas em teste, caso contrário, testes sem (por exemplo, esquecidos) as afirmações passam também
- inicia automaticamente o coletor de código de cobertura quando `--coverage` é utilizado (descrito mais tarde)
- imprime o status OK ou FAILURE no final do roteiro


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Cria as funções globais `test()`, `setUp()` e `tearDown()`, nas quais é possível dividir os testes.

```php
test('test description', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Permite descobrir se o teste foi realizado diretamente ou através do Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# run by Tester
} else {
	# another way
}
```


Environment::VariableThread .[filter]
-------------------------------------
O testador realiza testes em paralelo em um determinado número de roscas. Encontraremos um número de roscas em uma variável ambiental quando estivermos interessados:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::VariableThread);
```
