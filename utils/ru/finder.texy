Finder: Поиск в файловой системе
********************************

.[perex]
Нужно просматривать каталоги на диске? Вы ищете в них файлы? Класс [api:Nette\Utils\Finder] максимально упростит эту задачу.


Установка:

```shell
composer require nette/finder
```

Все примеры предполагают, что определен следующий псевдоним класса:

```php
use Nette\Utils\Finder;
```


Поиск файлов
------------

Как найти все файлы `*.txt` в каталоге `$dir` и всех его подкаталогах?

```php
foreach (Finder::findFiles('*.txt')->from($dir) as $key => $file) {
	// $key — строка, содержащая абсолютное имя файла с путем
	// $file is an instance of SplFileInfo
}
```

Файлы в переменной `$file` являются экземплярами класса [SplFileInfo |php:SplFileInfo].

Если директория не существует, будет выброшено исключение `Nette\UnexpectedValueException`.

А как насчет поиска файлов в каталоге без подкаталогов? Вместо `from()` используйте `in()`:

```php
Finder::findFiles('*.txt')->in($dir)
```

Поиск по нескольким маскам и даже по нескольким каталогам одновременно:

```php
Finder::findFiles('*.txt', '*.php')
	->in($dir1, $dir2) // или from($dir1, $dir2)
```

Параметры также могут быть массивами:

```php
Finder::findFiles(['*.txt', '*.php'])
	->in([$dir1, $dir2]) // или from([$dir1, $dir2])
```

Глубина поиска может быть ограничена с помощью метода `limitDepth()`.


Поиск каталогов
---------------

Помимо файлов, можно искать каталоги, используя `Finder::findDirectories('subdir*')`.

Или для поиска файлов и каталогов вместе с помощью `Finder::find('*.txt')`, маска в этом случае применяется только к файлам. При рекурсивном поиске с помощью `from()` сначала возвращается подкаталог, а затем файлы в нем, что можно изменить с помощью `childFirst()`.


Маска
-----

Маска не обязательно должна описывать только имя файла, но и путь. Пример: поиск файлов `*.jpg`, расположенных в подкаталоге, начинающемся с `imag`:

```php
Finder::findFiles('imag*/*.jpg')
```

Таким образом, известные подстановочные знаки `*` и `?` представляют любые символы, кроме разделителя каталогов `/`. Двойное `**` представляет любые символы, включая разделитель каталогов:

```php
Finder::findFiles('imag**/*.jpg')
// finds also image/subdir/file.jpg
```

Дополнительно вы можете использовать в маске диапазоны `[...]` или отрицательные диапазоны `[!..]`, известные из регулярных выражений. Поиск файлов `*.txt`, содержащих цифру в имени:

```php
Finder::findFiles('*[0-9]*.txt')
```


Исключение
----------

Используйте `exclude()` для передачи масок, которым файл не должен соответствовать. Поиск файлов `*.txt`, кроме тех, которые содержат '`X' в имени:

```php
Finder::findFiles('*.txt')
	->exclude('*X*')
```

Если `exclude()` указан **после** `from()`, он применяется к подкаталогам, которые были просмотрены:

```php
Finder::findFiles('*.php')
	->from($dir)
	->exclude('temp', '.git')
```


Фильтрация
----------

Вы также можете отфильтровать результаты, например, по размеру файла. Вот как найти файлы размером от 100 до 200 байт:

```php
Finder::findFiles('*.php')
	->size('>=', 100)
	->size('<=', 200)
	->from($dir)
```

Фильтрация по дате последнего изменения. Пример: поиск файлов, измененных за последние две недели:

```php
Finder::findFiles('*.php')
	->date('>', '- 2 weeks')
	->from($dir)
```

Обе функции понимают операторы `>`, `>=`, `<`, `<=`, `=`, `!=`.

Здесь мы просматриваем файлы PHP с количеством строк более 1000. В качестве фильтра мы используем пользовательский обратный вызов:

```php
$hasMoreThan100Lines = function (SplFileInfo $file): bool {
	return count(file($file->getPathname())) > 1000;
};

Finder::findFiles('*.php')
	->filter($hasMoreThan100Lines)
```

Удобно, правда? Вы обязательно найдете применение Finder в своих приложениях.
