SQL Yolu
********

.[perex]
Nette Veritabanı ile iki şekilde çalışabilirsiniz: SQL sorguları yazarak (SQL yolu) veya SQL'in otomatik olarak oluşturulmasına izin vererek[(Explorer yolu |explorer]). SQL yolu, yapıları üzerinde tam kontrol sahibi olurken güvenli bir şekilde sorgular oluşturmanıza olanak tanır.

.[note]
Veritabanı bağlantısı kurulumu hakkında ayrıntılar için [Bağlantı ve Yapılandırma |guide#Connection and Configuration] bölümüne bakın.


Temel Sorgulama .[#toc-basic-querying]
======================================

 `query()` yöntemi veritabanı sorgularını yürütür ve sonucu temsil eden bir [ResultSet | api:Nette\Database\ResultSet] nesnesi döndürür. Sorgu başarısız olursa, yöntem [bir istisna atar | exceptions].
Bir `foreach` döngüsü kullanarak sorgu sonucu boyunca döngü yapabilir veya [yardımcı fonksiyonlardan | #Fetching Data] birini kullanabilirsiniz.

```php
$result = $database->query('SELECT * FROM users');

foreach ($result as $row) {
	echo $row->id;
	echo $row->name;
}
```

SQL sorgularına güvenli bir şekilde değer eklemek için parametrelendirilmiş sorgular kullanın. Nette Database bunu çok basit hale getirir: SQL sorgusuna virgül ve değer eklemeniz yeterlidir.

```php
$database->query('SELECT * FROM users WHERE name = ?', $name);
```

Birden fazla parametre için SQL sorgusunu parametrelerle iç içe geçirebilirsiniz:

```php
$database->query('SELECT * FROM users WHERE name = ?', $name, 'AND age > ?', $age);
```

Ya da önce tüm SQL sorgusunu yazın ve ardından tüm parametreleri ekleyin:

```php
$database->query('SELECT * FROM users WHERE name = ? AND age > ?', $name, $age);
```


SQL Enjeksiyonuna Karşı Koruma .[#toc-protection-against-sql-injection]
=======================================================================

Parametrelendirilmiş sorgular kullanmak neden önemlidir? Çünkü sizi, saldırganların veritabanı verilerini manipüle etmek veya bunlara erişmek için kötü niyetli SQL komutları enjekte edebildiği SQL enjeksiyon saldırılarından korurlar.

.[warning]
**Asla değişkenleri doğrudan bir SQL sorgusuna eklemeyin! SQL enjeksiyonuna karşı kendinizi korumak için her zaman parametrelendirilmiş sorgular kullanın.

```php
// ❌ GÜVENLİ OLMAYAN KOD - SQL enjeksiyonuna karşı savunmasız
$database->query("SELECT * FROM users WHERE name = '$name'");

// ✅ Güvenli parametrelendirilmiş sorgu
$database->query('SELECT * FROM users WHERE name = ?', $name);
```

 [Potansiyel güvenlik riskleri | security] hakkında bilgi sahibi olduğunuzdan emin olun.


Sorgu Teknikleri .[#toc-query-techniques]
=========================================


NEREDE Koşullar .[#toc-where-conditions]
----------------------------------------

 `WHERE` koşullarını, anahtarların sütun adları ve değerlerin karşılaştırılacak veriler olduğu bir ilişkisel dizi olarak yazabilirsiniz. Nette Database, değer türüne göre en uygun SQL operatörünü otomatik olarak seçer.

```php
$database->query('SELECT * FROM users WHERE', [
	'name' => 'John',
	'active' => true,
]);
// WHERE `name` = 'John' AND `active` = 1
```

Operatörü anahtarda açıkça da belirtebilirsiniz:

```php
$database->query('SELECT * FROM users WHERE', [
	'age >' => 25,           // > operatörünü kullanır
	'name LIKE' => '%John%', // LIKE operatörünü kullanır
	'email NOT LIKE' => '%example.com%', // NOT LIKE işlecini kullanır
]);
// WHERE `age` > 25 AND `name` LIKE '%John%' AND `email` NOT LIKE '%example.com%'
```

 `null` değerleri veya diziler gibi özel durumlar otomatik olarak ele alınır:

```php
$database->query('SELECT * FROM products WHERE', [
	'name' => 'Laptop',         // = operatörünü kullanır
	'category_id' => [1, 2, 3], // IN kullanır
	'description' => null,      // kullanır IS NULL
]);
// WHERE `name` = 'Laptop' AND `category_id` IN (1, 2, 3) AND `description` IS NULL
```

Negatif koşullar için `NOT` operatörünü kullanın:

```php
$database->query('SELECT * FROM products WHERE', [
	'name NOT' => 'Laptop',         // <> operatörünü kullanır
	'category_id NOT' => [1, 2, 3], // NOT IN kullanır
	'description NOT' => null,      // uses IS NOT NULL
	'id' => [],                     // atlandı
]);
// WHERE `name` <> 'Laptop' AND `category_id` NOT IN (1, 2, 3) AND `description` IS NOT NULL
```

Varsayılan olarak, koşullar `AND` operatörü kullanılarak birleştirilir. Bu davranışı [?or yer tutucusunu | #SQL Construction Hints] kullanarak değiştirebilirsiniz.


ORDER BY Kurallar .[#toc-order-by-rules]
----------------------------------------

 `ORDER BY` cümlesi, anahtarların sütunları temsil ettiği ve değerlerin artan sırayı gösteren boolean'lar olduğu bir dizi olarak tanımlanabilir:

```php
$database->query('SELECT id FROM author ORDER BY', [
	'id' => true,  // artan
	'name' => false, // azalan
]);
// SELECT id FROM author ORDER BY `id`, `name` DESC
```


Veri Ekleme (INSERT) .[#toc-inserting-data-insert]
--------------------------------------------------

Kayıt eklemek için SQL `INSERT` deyimini kullanın.

```php
$values = [
	'name' => 'John Doe',
	'email' => 'john@example.com',
];
$database->query('INSERT INTO users ?', $values);
$userId = $database->getInsertId();
```

 `getInsertId()` yöntemi, son eklenen satırın kimliğini döndürür. Bazı veritabanları için (örneğin PostgreSQL), `$database->getInsertId($sequenceId)` adresini kullanarak sıra adını belirtmeniz gerekir.

Dosyalar, DateTime nesneleri veya enum türleri gibi [özel değerleri |#special values] de parametre olarak aktarabilirsiniz.

Aynı anda birden fazla kayıt ekleme:

```php
$database->query('INSERT INTO users ?', [
	['name' => 'User 1', 'email' => 'user1@mail.com'],
	['name' => 'User 2', 'email' => 'user2@mail.com'],
]);
```

Toplu INSERT gerçekleştirmek çok daha hızlıdır çünkü birden fazla ayrı sorgu yerine yalnızca tek bir veritabanı sorgusu yürütülür.

**Güvenlik Notu:** Doğrulanmamış verileri asla `$values` olarak kullanmayın. [Olası riskler |security#safe-work-with-columns] hakkında bilgi edinin.


Veri Güncelleme (UPDATE) .[#toc-updating-data-update]
-----------------------------------------------------

Kayıtları güncellemek için SQL `UPDATE` deyimini kullanın.

```php
// Tek bir kaydı güncelleme
$values = [
	'name' => 'John Smith',
];
$result = $database->query('UPDATE users SET ? WHERE id = ?', $values, 1);
```

Etkilenen satır sayısını `$result->getRowCount()` adresini kullanarak kontrol edebilirsiniz.

 `+=` ve `-=` operatörlerini `UPDATE` adresinde kullanabilirsiniz:

```php
$database->query('UPDATE users SET ? WHERE id = ?', [
	'login_count+=' => 1, // increment login_count
], 1);
```

Zaten mevcut olan bir kaydı eklemek veya güncellemek için `ON DUPLICATE KEY UPDATE` tekniğini kullanın:

```php
$values = [
	'name' => $name,
	'year' => $year,
];
$database->query('INSERT INTO users ? ON DUPLICATE KEY UPDATE ?',
	$values + ['id' => $id],
	$values,
);
// INSERT INTO users (`id`, `name`, `year`) VALUES (123, 'Jim', 1978)
//  ON DUPLICATE KEY UPDATE `name` = 'Jim', `year` = 1978
```

Nette Database'in dizi içeren bir parametrenin kullanıldığı SQL komutunun bağlamını tanıdığını ve SQL kodunu buna göre oluşturduğunu unutmayın. Örneğin, ilk diziden `(id, name, year) VALUES (123, 'Jim', 1978)` oluştururken, ikincisini `name = 'Jim', year = 1978`'a dönüştürür. Bu konu [SQL oluşturmak için ipuçları |#SQL Construction Hints] bölümünde daha ayrıntılı olarak ele alınmaktadır.


Veri Silme (DELETE) .[#toc-deleting-data-delete]
------------------------------------------------

Kayıtları silmek için SQL `DELETE` deyimini kullanın. Silinen satır sayısı ile örnek:

```php
$count = $database->query('DELETE FROM users WHERE id = ?', 1)
	->getRowCount();
```


SQL Oluşturma İpuçları .[#toc-sql-construction-hints]
-----------------------------------------------------

SQL yer tutucuları, parametre değerlerinin SQL ifadelerine nasıl dahil edileceğini kontrol etmenize olanak tanır:

| İpucu | Açıklama | Otomatik Olarak Şunun İçin Kullanılır
|------------|-------------------------------------------------|-----------------------------
| `?name` | Tablo veya sütun adları için kullanılır | -
| `?values` | `(key, ...) VALUES (value, ...)` | `INSERT ... ?` oluşturur, `REPLACE ... ?`
| `?set` | Atamaları oluşturur `key = value, ...` | `SET ?`, `KEY UPDATE ?`
| `?and` | Bir dizideki koşulları `AND` | `WHERE ?` ile birleştirir, `HAVING ?`
| `?or` | Bir dizideki koşulları `OR` ile birleştirir | -
| `?order` | `ORDER BY` cümlesini oluşturur | `ORDER BY ?`, `GROUP BY ?`

Tablo veya sütun adlarını dinamik olarak eklemek için `?name` yer tutucusunu kullanın. Nette Veritabanı, veritabanının kurallarına göre uygun kaçış sağlar (örneğin, MySQL için backtick içine alma).

```php
$table = 'users';
$column = 'name';
$database->query('SELECT ?name FROM ?name WHERE id = 1', $column, $table);
// SELECT `name` FROM `users` WHERE id = 1 (MySQL'de)
```

**Uyarı:** `?name` yer tutucusunu yalnızca doğrulanmış tablo ve sütun adları için kullanın. Aksi takdirde, [güvenlik açıkları | security#Dynamic Identifiers] riskiyle karşı karşıya kalırsınız.

Nette SQL sorgularını oluştururken akıllı otomatik algılama kullandığından (tablonun üçüncü sütununa bakın) diğer ipuçlarını belirtmek genellikle gerekli değildir. Ancak, `AND` yerine `OR` kullanarak koşulları birleştirmek istediğiniz durumlarda bunları kullanabilirsiniz:

```php
$database->query('SELECT * FROM users WHERE ?or', [
	'name' => 'John',
	'email' => 'john@example.com',
]);
// SELECT * FROM users WHERE `name` = 'John' OR `email` = 'john@example.com'
```


Özel Değerler .[#toc-special-values]
------------------------------------

Standart skaler tiplere (örneğin, `string`, `int`, `bool`) ek olarak, özel değerleri de parametre olarak aktarabilirsiniz:

- Dosyalar: Bir dosyanın ikili içeriğini eklemek için `fopen('file.png', 'r')` adresini kullanın.
- Tarih ve Saat: `DateTime` nesneleri otomatik olarak veritabanının tarih biçimine dönüştürülür.
- Enum Değerleri: `enum` örnekleri karşılık gelen değerlerine dönüştürülür.
- SQL Literals: `Connection::literal('NOW()')` kullanılarak oluşturulan bunlar doğrudan sorguya eklenir.

```php
$database->query('INSERT INTO articles ?', [
	'title' => 'My Article',
	'published_at' => new DateTime,
	'content' => fopen('image.png', 'r'),
	'state' => Status::Draft,
]);
```

 `datetime` türü için yerel desteği olmayan veritabanları için (örneğin, SQLite ve Oracle), `DateTime` değerleri `formatDateTime` yapılandırma seçeneğine göre dönüştürülür (varsayılan: Unix zaman damgası için `U` ).


SQL Literatürleri .[#toc-sql-literals]
--------------------------------------

Bazı durumlarda, ham SQL kodunu bir dize olarak ele almadan veya kaçış yapmadan bir değer olarak eklemeniz gerekebilir. Bunun için, `Connection::literal()` yöntemi kullanılarak oluşturulabilen `Nette\Database\SqlLiteral` sınıfının nesnelerini kullanın.

```php
$result = $database->query('SELECT * FROM users WHERE', [
	'name' => $name,
	'year >' => $database::literal('YEAR()'),
]);
// SELECT * FROM users WHERE (`name` = 'Jim') AND (`year` > YEAR())
```

Alternatif olarak:

```php
$result = $database->query('SELECT * FROM users WHERE', [
	'name' => $name,
	$database::literal('year > YEAR()'),
]);
// SELECT * FROM users WHERE (`name` = 'Jim') AND (year > YEAR())
```

SQL değişmezleri parametre de içerebilir:

```php
$result = $database->query('SELECT * FROM users WHERE', [
	'name' => $name,
	$database::literal('year > ? AND year &lt; ?', $min, $max),
]);
// SELECT * FROM users WHERE `name` = 'Jim' AND (year > 1978 AND year < 2017)
```

Bu, esnek kombinasyonlara olanak sağlar:

```php
$result = $database->query('SELECT * FROM users WHERE', [
	'name' => $name,
	$database::literal('?or', [
		'active' => true,
		'role' => $role,
	]),
]);
// SELECT * FROM users WHERE `name` = 'Jim' AND (`active` = 1 OR `role` = 'admin')
```


Veri Getirme .[#toc-fetching-data]
==================================


SELECT Sorguları için Kısayollar .[#toc-shortcuts-for-select-queries]
---------------------------------------------------------------------

Veri alımını basitleştirmek için `Connection` sınıfı, `query()` çağrısını sonraki bir `fetch*()` çağrısıyla birleştiren birkaç kısayol sağlar. Bu yöntemler `query()` ile aynı parametreleri, yani bir SQL sorgusu ve isteğe bağlı parametreleri kabul eder.
 `fetch*()` yöntemlerinin ayrıntılı bir açıklaması [aşağıda |#fetch()] bulunabilir.

| `fetch($sql, ...$params): ?Row` | Sorguyu çalıştırır ve ilk satırı bir `Row` nesnesi olarak getirir.
| `fetchAll($sql, ...$params): array` | Sorguyu çalıştırır ve tüm satırları `Row` nesnelerinden oluşan bir dizi olarak getirir.
| `fetchPairs($sql, ...$params): array` | Sorguyu çalıştırır ve ilk sütunun anahtar, ikincisinin değer olduğu bir ilişkisel dizi getirir.
| `fetchField($sql, ...$params): mixed` | Sorguyu çalıştırır ve ilk satırdaki ilk hücrenin değerini getirir.
| `fetchList($sql, ...$params): ?array` | Sorguyu yürütür ve ilk satırı dizinlenmiş bir dizi olarak getirir.

Örnek:

```php
// fetchField() - ilk hücrenin değerini döndürür
$count = $database->query('SELECT COUNT(*) FROM articles')
	->fetchField();
```


`foreach` - Satırlar Üzerinde Yineleme
--------------------------------------

Bir sorgu yürütüldükten sonra, sonuçlar üzerinde çeşitli şekillerde yineleme yapmanıza olanak tanıyan bir [ResultSet |api:Nette\Database\ResultSet] nesnesi döndürülür. Satırları getirmenin en basit ve bellek açısından en verimli yolu, bir `foreach` döngüsünde yinelemektir. Bu yöntem satırları teker teker işler ve tüm verilerin bir kerede bellekte depolanmasını önler.

```php
$result = $database->query('SELECT * FROM users');

foreach ($result as $row) {
	echo $row->id;
	echo $row->name;
	//...
}
```

.[note]
 `ResultSet` yalnızca bir kez yinelenebilir. Üzerinde birden çok kez yineleme yapmanız gerekiyorsa, önce verileri bir diziye yüklemeniz, örneğin `fetchAll()` yöntemini kullanmanız gerekir.


fetch(): ?Row .[method]
-----------------------

Sorguyu çalıştırır ve `Row` nesnesi olarak tek bir satır getirir. Başka satır yoksa `null` döndürür. Bu yöntem dahili işaretçiyi bir sonraki satıra ilerletir.

```php
$result = $database->query('SELECT * FROM users');
$row = $result->fetch(); // ilk satırı getirir
if ($row) {
	echo $row->name;
}
```


fetchAll(): array .[method]
---------------------------

Kalan tüm satırları `ResultSet` adresinden `Row` nesnelerinden oluşan bir dizi olarak getirir.

```php
$result = $database->query('SELECT * FROM users');
$rows = $result->fetchAll(); // tüm satırları getirir
foreach ($rows as $row) {
	echo $row->name;
}
```


fetchPairs(string|int|null $key = null, string|int|null $value = null): array .[method]
---------------------------------------------------------------------------------------

Sonuçları ilişkisel bir dizi olarak getirir. İlk bağımsız değişken anahtar olarak kullanılacak sütunu, ikincisi ise değer olarak kullanılacak sütunu belirtir:

```php
$result = $database->query('SELECT id, name FROM users');
$names = $result->fetchPairs('id', 'name');
// [1 => 'John Doe', 2 => 'Jane Doe', ...]
```

Yalnızca ilk parametre sağlanırsa, değer tüm satır olacaktır (bir `Row` nesnesi olarak):

```php
$rows = $result->fetchPairs('id');
// [1 => Satır(id: 1, ad: 'John'), 2 => Satır(id: 2, ad: 'Jane'), ...]
```

Yinelenen anahtarlar olması durumunda, son satırdaki değer kullanılır. Anahtar olarak `null` kullanıldığında, dizi sıfırdan itibaren sayısal olarak indekslenecektir (bu durumda herhangi bir çakışma meydana gelmez):

```php
$names = $result->fetchPairs(null, 'name');
// [0 => 'John Doe', 1 => 'Jane Doe', ...]
```


fetchPairs(Closure $callback): array .[method]
----------------------------------------------

Alternatif olarak, her satır için anahtar-değer çiftlerini veya değerleri belirleyen bir geri arama sağlayabilirsiniz.

```php
$result = $database->query('SELECT * FROM users');
$items = $result->fetchPairs(fn($row) => "$row->id - $row->name");
// ['1 - John', '2 - Jane', ...]

// Geri arama ayrıca anahtar ve değer çifti içeren bir dizi de döndürebilir:
$names = $result->fetchPairs(fn($row) => [$row->name, $row->age]);
// ['John' => 46, 'Jane' => 21, ...]
```


fetchField(): mixed .[method]
-----------------------------

Geçerli satırdaki ilk hücrenin değerini getirir. Daha fazla satır yoksa, `null` döndürür. Bu yöntem dahili işaretçiyi bir sonraki satıra ilerletir.

```php
$result = $database->query('SELECT name FROM users');
$name = $result->fetchField(); // ilk satırdaki adı getirir
```


fetchList(): ?array .[method]
-----------------------------

Satırı indeksli bir dizi olarak getirir. Daha fazla satır yoksa, `null` döndürür. Bu yöntem dahili işaretçiyi bir sonraki satıra ilerletir.

```php
$result = $database->query('SELECT name, email FROM users');
$row = $result->fetchList(); // ['John', 'john@example.com']
```


getRowCount(): ?int .[method]
-----------------------------

Son `UPDATE` veya `DELETE` sorgusundan etkilenen satır sayısını döndürür. `SELECT` sorguları için getirilen satır sayısını döndürür, ancak bu her zaman bilinmeyebilir; bu gibi durumlarda `null` döndürür.


getColumnCount(): ?int .[method]
--------------------------------

 `ResultSet` adresindeki sütun sayısını döndürür.


Sorgu Bilgileri .[#toc-query-information]
=========================================

En son yürütülen sorgu hakkındaki ayrıntıları almak için şunu kullanın:

```php
echo $database->getLastQueryString(); // SQL sorgusunu çıktılar

$result = $database->query('SELECT * FROM articles');
echo $result->getQueryString();    // SQL sorgusunu çıktılar
echo $result->getTime();           // saniye cinsinden yürütme süresini verir
```

Sonucu bir HTML tablosu olarak görüntülemek için şunu kullanın:

```php
$result = $database->query('SELECT * FROM articles');
$result->dump();
```

Sütun türleri hakkındaki bilgileri `ResultSet` adresinden de alabilirsiniz:

```php
$result = $database->query('SELECT * FROM articles');
$types = $result->getColumnTypes();

foreach ($types as $column => $type) {
	echo "$column is of type $type->type"; // örneğin, 'id int türündedir'
}
```


Sorgu Günlüğü .[#toc-query-logging]
-----------------------------------

Özel sorgu günlüğü uygulayabilirsiniz. `onQuery` olayı, her sorgu yürütüldükten sonra çağrılan bir geri çağırma dizisidir:

```php
$database->onQuery[] = function ($database, $result) use ($logger) {
	$logger->info('Query: ' . $result->getQueryString());
	$logger->info('Time: ' . $result->getTime());

	if ($result->getRowCount() > 1000) {
		$logger->warning('Large result set: ' . $result->getRowCount() . ' rows');
	}
};
```
