Generator kodu PHP
******************
<div class=perex>

- Potrzebujesz wygenerować kod dla klas, funkcji, plików PHP itp?
- Może zrobić wszystkie najnowsze gadżety PHP (jak enums itp.).
- Pozwala na łatwe modyfikowanie istniejących klas
- Wyjście zgodne z PSR-12
- Dojrzała, stabilna i szeroko stosowana biblioteka
</div>


Instalacja .[#toc-instalace]
----------------------------

Pobierz i zainstaluj bibliotekę za pomocą [Composera |best-practices:composer]:

```shell
composer require nette/php-generator
```

Zobacz [tabelę |#Tabulka kompatibility] dotyczącą kompatybilności z PHP.


Zajęcia .[#toc-tridy]
---------------------

Zacznijmy od przykładu tworzenia klasy za pomocą [ClassType |api:Nette\PhpGenerator\ClassType]:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addComment("Popis třídy.\nDruhý řádek\n")
	->addComment('@property-read Nette\Forms\Form $form');

// kód jednoduše vygenerujete přetypováním na řetězec nebo použitím echo:
echo $class;
```

Zwraca następujący wynik:

```php
/**
 * Popis třídy
 * Druhý řádek
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
	use Nette\SmartObject;
}
```

Do generowania kodu możemy również wykorzystać tzw. drukarkę, która w przeciwieństwie do `echo $class` może być [dodatkowo skonfigurowana |#Printer a soulad s PSR]:

```php
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Możemy dodawać stałe (klasa [Constant |api:Nette\PhpGenerator\Constant]) i zmienne (klasa [Property |api:Nette\PhpGenerator\Property]):

```php
$class->addConstant('ID', 123)
	->setProtected() // viditelnost konstant
	->setFinal();

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // nebo setVisibility('private')
	->setStatic()
	->addComment('@var int[]');

$class->addProperty('list')
	->setType('?array')
	->setInitialized(); // vypíše '= null'
```

Generuje:

```php
final protected const ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];

public ?array $list = null;
```

I możemy dodać [metody |#Signatury metod a funkcí]:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int') // návratové typy u metod
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []
```

Wynika z tego, że:

```php
/**
 * Count it.
 */
final protected function count(array &$items = []): ?int
{
	return count($items ?: $this->items);
}
```

Parametry propagowane wprowadzone przez PHP 8.0 mogą być przekazywane do konstruktora:

```php
$method = $class->addMethod('__construct');
$method->addPromotedParameter('name');
$method->addPromotedParameter('args', [])
	->setPrivate();
```

Wynika z tego, że:

```php
public function __construct(
	public $name,
	private $args = [],
) {
}
```

Właściwości tylko do odczytu wprowadzone w PHP 8.1 mogą być oznaczone za pomocą funkcji `setReadOnly()`.

------

Jeśli dodana właściwość, stała, metoda lub parametr już istnieje, rzucany jest wyjątek.

Członków klasy można usunąć za pomocą `removeProperty()`, `removeConstant()`, `removeMethod()`, lub `removeParameter()`.

Możesz również dodać istniejące obiekty do klasy `Method`, `Property`, lub `Constant`:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

Możesz również sklonować istniejące metody, właściwości i stałe pod inną nazwą za pomocą `cloneWithName()`:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```


Interfejs lub cecha .[#toc-interface-nebo-traita]
-------------------------------------------------

Można tworzyć interfejsy i cechy:

```php
$interface = new Nette\PhpGenerator\InterfaceType('MyInterface');
$trait = new Nette\PhpGenerator\TraitType('MyTrait');
```

Wykorzystanie cech:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject');
$class->addTrait('MyTrait')
	->addResolution('sayHello as protected')
	->addComment('@use MyTrait<Foo>');
echo $class;
```

Wynik:

```php
class Demo
{
	use SmartObject;
	use MyTrait {
		sayHello as protected;
	}
}
```


Enums .[#toc-enums]
-------------------

Możesz łatwo stworzyć wyliczenia PHP 8.1 w następujący sposób:

```php
$enum = new Nette\PhpGenerator\EnumType('Suit');
$enum->addCase('Clubs');
$enum->addCase('Diamonds');
$enum->addCase('Hearts');
$enum->addCase('Spades');

echo $enum;
```

Wynik:

```php
enum Suit
{
	case Clubs;
	case Diamonds;
	case Hearts;
	case Spades;
}
```

Możesz także zdefiniować skalarne odpowiedniki, aby utworzyć "wsparte" wyliczenie:

```php
$enum->addCase('Clubs', '♣');
$enum->addCase('Diamonds', '♦');
```

Możesz dodać komentarze lub [atrybuty |#atributy] do każdego *case* używając `addComment()` lub `addAttribute()`.


Zajęcia anonimowe .[#toc-anonymni-tridy]
----------------------------------------

Przekaż `null` jako nazwę i masz anonimową klasę:

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Wynik:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```


Funkcja globalna .[#toc-globalni-funkce]
----------------------------------------

Kod funkcji jest generowany przez klasę [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction]:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// nebo použijte PsrPrinter pro výstup v souladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Wynik:

```php
function foo($a, $b)
{
	return $a + $b;
}
```


Funkcja anonimowa .[#toc-anonymni-funkce]
-----------------------------------------

Kod dla funkcji anonimowych jest generowany przez klasę [Closure |api:Nette\PhpGenerator\Closure]:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// nebo použijte PsrPrinter pro výstup v souladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Wynik:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```


Funkcja strzałki skróconej .[#toc-zkracene-arrow-funkce]
--------------------------------------------------------

Można również wypisać skróconą funkcję anonimową za pomocą drukarki:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('$a + $b');
$closure->addParameter('a');
$closure->addParameter('b');

echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Wynik:

```php
fn($a, $b) => $a + $b
```


Sygnatury metod i funkcji .[#toc-signatury-metod-a-funkci]
----------------------------------------------------------

Metody są reprezentowane przez klasę [Method |api:Nette\PhpGenerator\Method]. Możesz ustawić widoczność, wartość zwrotną, dodać komentarze, [atrybuty |#Atributy] itp:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int');
```

Poszczególne parametry są reprezentowane przez klasę [Parameter |api:Nette\PhpGenerator\Parameter]. Ponownie, możesz ustawić wszystkie możliwe właściwości:

```php
$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []

// function count(&$items = [])
```

Aby zdefiniować tzw. parametry variadics (lub również operator splat), należy użyć `setVariadics()`:

```php
$method = $class->addMethod('count');
$method->setVariadic(true);
$method->addParameter('items');
```

Generuje:

```php
function count(...$items)
{
}
```


Metoda i organy funkcyjne .[#toc-tela-metod-a-funkci]
-----------------------------------------------------

Ciało może być przekazane w całości na raz do metody `setBody()` lub sekwencyjnie (linia po linii) poprzez wielokrotne wywołanie `addBody()`:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('$a = rand(10, 20);');
$function->addBody('return $a;');
echo $function;
```

Wynik

```php
function foo()
{
	$a = rand(10, 20);
	return $a;
}
```

Możesz użyć specjalnych znaków wieloznacznych, aby łatwo wstawić zmienne.

Proste symbole wieloznaczne `?`

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return substr(?, ?);', [$str, $num]);
echo $function;
```

Wynik

```php
function foo()
{
	return substr('any string', 3);
}
```

Symbol wieloznaczny dla variadic `...?`

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Wynik:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

Możesz również użyć nazwanych parametrów dla PHP 8 używając `...?:`

```php
$items = ['foo' => 1, 'bar' => true];
$function->setBody('myfunc(...?:);', [$items]);

// myfunc(foo: 1, bar: true);
```

Znak wieloznaczny jest ukrywany za pomocą ukośnika `\?`

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Wynik:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```


Zgodność drukarki i PSR .[#toc-printer-a-soulad-s-psr]
------------------------------------------------------

Kod PHP jest generowany przez obiekty `Printer`. Istnieje drukarka `PsrPrinter`, która jest zgodna z PSR-2 i PSR-12 i używa spacji do wcięć, oraz `Printer`, która używa tabulatorów do wcięć.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class); // odsazení 4 mezerami
```

Potrzebujesz dostosować zachowanie drukarki? Utwórz własne, dziedzicząc po klasie `Printer`. Możesz przekonfigurować te zmienne:

```php
class MyPrinter extends Nette\PhpGenerator\Printer
{
	public int $wrapLength = 120;
	public string $indentation = "\t";
	public int $linesBetweenProperties = 0;
	public int $linesBetweenMethods = 2;
	public int $linesBetweenUseTypes = 0;
	public bool $bracesOnNextLine = true;
	public string $returnTypeColon = ': ';
}
```


Rodzaje .[#toc-typy]
--------------------

Każdy typ lub typ unii / przecięcia może być przekazany jako ciąg, możesz również użyć predefiniowanych stałych dla typów natywnych:

```php
use Nette\PhpGenerator\Type;

$member->setType('array'); // nebo Type::Array;
$member->setType('array|string'); // nebo Type::union('array', 'string')
$member->setType('Foo&Bar'); // nebo Type::intersection(Foo::class, Bar::class)
$member->setType(null); // odstraní typ
```

To samo dotyczy metody `setReturnType()`.


Literówki .[#toc-literaly]
--------------------------

Możesz użyć `Literal`, aby przekazać arbitralny kod PHP, na przykład dla domyślnych wartości właściwości lub parametrów itp:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Wynik:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

Możesz również przekazywać parametry do `Literal` i zlecać ich formatowanie w poprawny kod PHP przy użyciu symboli [wieloznacznych |#Generování těl metod a funkcí]:

```php
new Literal('substr(?, ?)', [$a, $b]);
// generuje například: substr('hello', 5);
```


atrybuty .[#toc-atributy]
-------------------------

Atrybuty PHP 8 mogą być dodawane do wszystkich klas, metod, właściwości, stałych, enumów, funkcji, domknięć i parametrów. Możesz również użyć [literałów |#literály] jako wartości parametrów.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addAttribute('Deprecated');

$class->addProperty('list')
	->addAttribute('WithArguments', [1, 2]);

$method = $class->addMethod('count')
	->addAttribute('Foo\Cached', ['mode' => true]);

$method->addParameter('items')
	->addAttribute('Bar');

echo $class;
```

Wynik:

```php
#[Deprecated]
class Demo
{
	#[WithArguments(1, 2)]
	public $list;


	#[Foo\Cached(mode: true)]
	public function count(#[Bar] $items)
	{
	}
}
```


Przestrzeń nazw .[#toc-jmenny-prostor]
--------------------------------------

Klasy, właściwości, interfejsy i wyliczenia (zwane dalej klasami) mogą być pogrupowane w przestrzenie nazw reprezentowane przez klasę [PhpNamespace |api:Nette\PhpGenerator\PhpNamespace]:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

// vytvoříme nové třídy v namespace
$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// nebo vložíme existující třídu do namespace
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Jeśli klasa już istnieje, rzucany jest wyjątek.

Można zdefiniować klauzule użycia:

```php
// use Http\Request;
$namespace->addUse(Http\Request::class);
// use Http\Request as HttpReq;
$namespace->addUse(Http\Request::class, 'HttpReq');
// use function iter\range;
$namespace->addUseFunction('iter\range');
```

Aby uprościć w pełni kwalifikowaną nazwę klasy, funkcji lub stałej poprzez zdefiniowane aliasy, użyj metody `simplifyName`:

```php
echo $namespace->simplifyName('Foo\Bar'); // 'Bar', protože 'Foo' je aktuální jmenný prostor
echo $namespace->simplifyName('iter\range', $namespace::NameFunction); // 'range', kvůli definovanému use-statement
```

I odwrotnie, możesz przekonwertować uproszczoną nazwę klasy, funkcji lub stałej na w pełni kwalifikowaną nazwę za pomocą metody `resolveName`:

```php
echo $namespace->resolveName('Bar'); // 'Foo\Bar'
echo $namespace->resolveName('range', $namespace::NameFunction); // 'iter\range'
```


Tłumaczenia nazw klas .[#toc-preklady-nazvu-trid]
-------------------------------------------------

**Kiedy klasa jest częścią przestrzeni nazw, jest renderowana nieco inaczej:** wszystkie typy (na przykład typehints, typy powrotne, nazwa klasy nadrzędnej,
zaimplementowane interfejsy, użyte właściwości i atrybuty) są automatycznie *tłumaczone* (chyba, że wyłączysz to, patrz poniżej).
Oznacza to, że musisz **używać pełnych nazw klas** w swoich definicjach, a zostaną one zastąpione przez
dla aliasów (zgodnie z klauzulami użycia) lub w pełni kwalifikowanych nazw w wynikowym kodzie:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // bude zjednodušen na A
	->addTrait('Bar\AliasedClass'); // bude zjednodušen na AliasedClass

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->simplifyName('Foo\D')); // v komentářích zjednodušíme manuálně
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // bude přeložen na \Bar\OtherClass

echo $namespace;

// nebo použijte PsrPrinter pro výstup v souladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Wynik:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

Automatyczne tłumaczenie można wyłączyć w następujący sposób:

```php
$printer = new Nette\PhpGenerator\Printer; // nebo PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```


Pliki PHP .[#toc-php-soubory]
-----------------------------

Klasy, funkcje i przestrzenie nazw mogą być grupowane w pliki PHP reprezentowane przez klasę [PhpFile |api:Nette\PhpGenerator\PhpFile]:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('This file is auto-generated.');
$file->setStrictTypes(); // přidá declare(strict_types=1)

$class = $file->addClass('Foo\A');
$function = $file->addFunction('Foo\foo');

// nebo
// $namespace = $file->addNamespace('Foo');
// $class = $namespace->addClass('A');
// $function = $namespace->addFunction('foo');

echo $file;

// nebo použijte PsrPrinter pro výstup v souladu s PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Wynik:

```php
<?php

/**
 * This file is auto-generated.
 */

declare(strict_types=1);

namespace Foo;

class A
{
}

function foo()
{
}
```


Wytwarzanie przez istniejące .[#toc-generovani-podle-existujicich]
------------------------------------------------------------------

Oprócz możliwości modelowania klas i funkcji za pomocą opisanego powyżej API, można również zlecić ich automatyczne generowanie z wykorzystaniem istniejących wzorców:

```php
// vytvoří třídu stejnou jako třída PDO
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

// vytvoří funkci totožnou s funkcí trim()
$function = Nette\PhpGenerator\GlobalFunction::from('trim');

// vytvoří closure podle uvedené
$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {},
);
```

Ciała funkcji i metod są domyślnie puste. Jeśli chcesz je również załadować, użyj tej metody
(wymaga instalacji pakietu `nikic/php-parser`):

```php
$class = Nette\PhpGenerator\ClassType::from(Foo::class, withBodies: true);

$function = Nette\PhpGenerator\GlobalFunction::from('foo', withBody: true);
```


Ładowanie z plików PHP .[#toc-nacitani-z-php-souboru]
-----------------------------------------------------

Możesz również załadować klasy lub funkcje bezpośrednio z pliku PHP, który nie jest jeszcze inlined, lub z łańcucha zawierającego kod PHP:

```php
$class = Nette\PhpGenerator\ClassType::fromCode(<<<XX
	<?php

	class Demo
	{
		public $foo;
	}
	XX);
```

Załaduj cały plik PHP, który może zawierać wiele klas, a nawet wiele przestrzeni nazw:

```php
$file = Nette\PhpGenerator\PhpFile::fromCode(file_get_contents('classes.php'));
```

Wymaga zainstalowania strony `nikic/php-parser`.


Wyszczególnienie zmiennych .[#toc-vypis-promennych]
---------------------------------------------------

Klasa `Dumper` konwertuje zmienną na parsowalny kod PHP. Zapewnia lepsze i wyraźniejsze wyjście niż standardowa funkcja `var_export()`.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // vypíše ['a', 'b', 123]
```


Tabela kompatybilności .[#toc-tabulka-kompatibility]
----------------------------------------------------

PhpGenerator 4.0 jest kompatybilny z PHP 8.0 do 8.2


{{leftbar: nette:@menu-topics}}
