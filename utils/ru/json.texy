Работа с JSON
*************

.[perex]
[api:Nette\Utils\Json] - это статический класс с функциями для кодирования и декодирования формата JSON. Он обрабатывает уязвимости различных версий PHP и выбрасывает исключения при ошибках.


Установка:

```shell
composer require nette/utils
```

Все примеры предполагают созданный псевдоним:

```php
use Nette\Utils\Json;
```


Использование
=============


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Преобразует `$value` в формат JSON.

При установке `$pretty` форматирует JSON для облегчения чтения и наглядности:

```php
Json::encode($value); // возвращает JSON
Json::encode($value, pretty: true); // возвращает более читаемый JSON
```

При `$asciiSafe` генерирует вывод в ASCII, т.е. символы unicode заменяются последовательностями `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Параметр `$htmlSafe` гарантирует, что вывод не будет содержать символов, имеющих специальное значение в HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

С `$forceObjects` даже массивы с числовыми ключами будут кодироваться как объекты JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

При ошибке выбрасывает исключение `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Обработка исключения
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Парсит JSON в PHP.

Установка `$forceArray` заставляет возвращать массивы вместо объектов:

```php
Json::decode('{"variable": true}'); // возвращает объект типа stdClass
Json::decode('{"variable": true}', forceArrays: true); // возвращает массив
```

При ошибке выбрасывает исключение `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Обработка исключения
}
```


Как отправить JSON из презентера?
=================================

Для этого можно использовать метод `$this->sendJson($data)`, который можно вызвать, например, в методе `action*()`, см. [Отправка ответа|application:presenters#Odeslání odpovědi].
