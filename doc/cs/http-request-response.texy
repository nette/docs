HTTP request & response
***********************

.[perex]
HTTP požadavek a odpověď se zapouzdřuje do objektů Nette\Http\Request a Response, které nabízejí příjemnější API a fungují jako sanitizační filtr.


HTTP požadavek
==============

Nette Framework pročistí data odeslané uživatelem od kontrolních a neplatných znaků. Zároveň odstraní případné *magic_quotes*.

HTTP požadavek, což je objekt třídy [Nette\Http\Request |api:], nevytváříme přímo, ale získáme jako službu z [DI kontejneru |di-usage].

/--php
$httpRequest = $container->getByType('Nette\Http\Request');
\--

URL požadavku získáme jako objekt [api:Nette\Http\UrlScript]:

/--php
$uri = $httpRequest->getUrl();
echo $uri; // např. https://nette.org/cs/dokumentace?action=edit
echo $uri->host; // nette.org
\--

Zjištění HTTP metody, se kterou se na stránku přistoupilo:

/--php
echo $httpRequest->getMethod(); // GET, POST, HEAD, PUT

if ($httpRequest->isMethod('GET')) ...
\--

Je spojení šifrované (HTTPS)?

/--php
echo $httpRequest->isSecured() ? 'ano' : 'ne';
\--

Jde o AJAXový požadavek?

/--php
echo $httpRequest->isAjax() ? 'ano' : 'ne';
\--

Jaká je IP adresa uživatele?

/--php
echo $httpRequest->getRemoteAddress(); // IP adresa uživatele
echo $httpRequest->getRemoteHost(); // a její DNS překlad
\--

Z jaké URL uživatel přišel? Vrací se jako objekt [Nette\Http\Url |urls]

/--php
echo $httpRequest->getReferer()->host;
\--

Parametry požadavku:

/--php
$get = $httpRequest->getQuery(); // vrací pole všech parametrů z URL
$id = $httpRequest->getQuery('id'); // vrací GET parametr 'id' (nebo NULL)

$post = $httpRequest->getPost(); // vrací pole všech parametrů z POST
$id = $httpRequest->getPost('id'); // vrací POST parametr 'id' (nebo NULL)

$cookies = $httpRequest->getCookies(); // vrací všechny cookies
$sessId = $httpRequest->getCookie('sess_id'); // vrací cookie (nebo NULL)
\--

Uploadované soubory jsou zapouzdřeny do objektů [Nette\Http\FileUpload|api:]:

/--php
$files = $httpRequest->getFiles(); // vrací pole všech uploadů

$file = $httpRequest->getFile('avatar'); // vrací jeden soubor
echo $file->getName(); // jméno souboru odeslané uživatelem
echo $file->getSanitizedName(); // jméno bez nebezpečných znaků
\--

HTTP hlavičky zjistíme:

/--php
// vrací asociativní pole HTTP hlaviček
$headers = $httpRequest->getHeaders();

// vrací konkrétní hlavičku (case-insensitive)
$userAgent = $httpRequest->getHeader('User-Agent');
\--

Užitečná je metoda `detectLanguage()`, které předáme pole s jazyky, které aplikace podporuje, a ona vrátí ten, který by viděl návštěvníkův prohlížeč nejraději. Nejsou to žádná kouzla, jen se využívá hlavičky `Accept-Language`.

/--php
// prohlížeč odesílá např. Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = array('hu', 'pl', 'en'); // jazyky podporované aplikací

echo $httpRequest->detectLanguage($langs); // en
\--


RequestFactory a filtrování URL
------------------

Objekt s aktuálním HTTP požadavkem vyrábí [Nette\Http\RequestFactory |api:]. Její chování můžeme pozměnit. Pomocí tzv. filtrů lze URL vyčistit od znaků, které se do nich mohou dostat kvůli špatně implementovaným komentářovým systémům na různých cizích webech:

/--php
$requestFactory = new Nette\Http\RequestFactory;

// odstraníme mezery z cesty
$requestFactory->addUrlFilter('%20', '', PHP_URL_PATH);

// odstraníme tečku, čárku nebo pravou závorku z konce URI
$requestFactory->addUrlFilter('[.,)]$');

// vyčistíme cestu od zdvojených lomítek (výchozí filtr)
$requestFactory->addUrlFilter('/{2,}', '/', PHP_URL_PATH);
\--

A poté si necháme vygenerovat nový `httpRequest` a uložíme jej do systémového kontejneru:

/--php
// $container je systémový kontejner
$container->addService('httpRequest', $requestFactory->createHttpRequest());
\--




HTTP odpověď
============

HTTP odpověď, což je objekt třídy [Nette\Http\Response |api:], nevytváříme přímo, ale získáme jako službu z [DI kontejneru |di-usage].

/--php
$httpResponse = $container->getByType('Nette\Http\Response');
\--

Zda je ještě možné odesílat hlavičky či měnit stavový kód, prozradí metoda `isSent()`. Pokud vrací TRUE, nepůjde již žádnou další hlavičku či kód odeslat.

V takovém případě každý pokus o odeslání vyvolá výjimku `Nette\InvalidStateException`. .[caution]

Stavový [kód odpovědi | http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10] odešleme nebo získáme takto:

/--php
$httpResponse->setCode(Nette\Http\Response::S404_NOT_FOUND);

echo $httpResponse->getCode(); // 404
\--

Kvůli lepší srozumitelnosti zdrojového kódu doporučujeme pro kód používat místo čísla tyto předdefinované konstanty:

/--php
Http\IResponse::S200_OK
Http\IResponse::S204_NO_CONTENT
Http\IResponse::S300_MULTIPLE_CHOICES
Http\IResponse::S301_MOVED_PERMANENTLY
Http\IResponse::S302_FOUND
Http\IResponse::S303_SEE_OTHER
Http\IResponse::S303_POST_GET
Http\IResponse::S304_NOT_MODIFIED
Http\IResponse::S307_TEMPORARY_REDIRECT
Http\IResponse::S400_BAD_REQUEST
Http\IResponse::S401_UNAUTHORIZED
Http\IResponse::S403_FORBIDDEN
Http\IResponse::S404_NOT_FOUND
Http\IResponse::S410_GONE
Http\IResponse::S500_INTERNAL_SERVER_ERROR
Http\IResponse::S501_NOT_IMPLEMENTED
Http\IResponse::S503_SERVICE_UNAVAILABLE
\--

Metoda `setContentType($type, $charset=NULL)` mění hlavičku `Content-Type`:

/--php
$httpResponse->setContentType('text/plain', 'UTF-8');
\---

Přesměrování na jiné URL provede metoda `redirect($url, $code=302)`. Nezapomeňte poté ukončit skript!

/--php
$httpResponse->redirect('http://example.com');
exit;
\---


Pro nastavení expirace (vypršení platnosti) dokumentu použijeme metodu `setExpiration()`. Jejím parametrem je buď textový údaj, počet vteřin, nebo timestamp:

/--php
// cache prohlížeče vyprší za hodinu
$httpResponse->setExpiration('+ 1 hours');
\---

HTTP hlavičku odešleme:

/--php
$httpResponse->setHeader('Pragma', 'no-cache');

// nebo chceme-li stejnou hlavičku odeslat vícekrát s různými hodnotami
$httpResponse->addHeader('Pragma', 'no-cache');
\---

Odeslané HTTP hlavičky zjistíme přes:

/--php
// vrací asociativní pole HTTP hlaviček
$headers = $httpResponse->getHeaders();

// vrací konkrétní hlavičku (case-insensitive)
$pragma = $httpResponse->getHeader('Pragma');
\--

Pro manipulaci s cookies slouží metody `setCookie()` a `deleteCookie()`:

/--php
// setCookie($name, $value, $time, [$path, [$domain, [$secure, [$httpOnly])
$httpResponse->setCookie('lang', 'cs', '100 days'); // odešle cookie

// deleteCookie($name, [$path, [$domain, [$secure]]])
$httpResponse->deleteCookie('lang'); // smaže cookie
\---

Tyto dvě metody přijímají ještě další parametry: `$path` (podadresář kde bude cookie dostupná),
`$domain` a `$secure`. Jejich podrobný popis najdete u PHP funkce [php:setcookie].

{{themeicon: icon-communication.png}}
{{composer: nette/http}}
