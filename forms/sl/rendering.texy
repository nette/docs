Oblikovanje obrazcev
********************

Videzi obrazcev se lahko zelo razlikujejo. Pravzaprav obstajata dve skrajnosti. Ena stran je potreba po ponovnem upodabljanju niza zelo podobnih obrazcev z malo ali nič truda. Običajno gre za administracije in zaledne strani.

Druga stran so drobni ljubki obrazci, od katerih je vsak umetniško delo. Njihovo postavitev je najbolje napisati v jeziku HTML. Seveda je poleg teh skrajnosti še veliko vmesnih obrazcev.


Latte .[#toc-latte]
===================

 [Sistem predlog Latte |latte:] bistveno olajša upodabljanje obrazcev in njihovih elementov. Najprej bomo pokazali, kako ročno upodabljati obrazce, element za elementom, da bi pridobili popoln nadzor nad kodo. Kasneje bomo pokazali, kako takšno upodabljanje [avtomatizirati |#Automatic rendering].


{control}
---------

Obrazec najlažje prikažete tako, da ga zapišete v predlogo:

```latte
{control signInForm}
```

Videz izrisanega obrazca lahko spremenite z nastavitvijo [Rendererja |#Renderer] in [posameznih kontrolnih elementov |#HTML Attributes].


n:name .[#toc-n-name]
---------------------

Definicijo obrazca v kodi PHP je zelo enostavno povezati s kodo HTML. Preprosto dodajte atribute `n:name`. Tako enostavno je to!

```php
protected function createComponentSignInForm(): Form
{
	$form = new Form;
	$form->addText('username')->setRequired();
	$form->addPassword('password')->setRequired();
	$form->addSubmit('send');
	return $form;
}
```

```latte
<form n:name=signInForm class=form>
	<div>
		<label n:name=username>Username: <input n:name=username size=20 autofocus></label>
	</div>
	<div>
		<label n:name=password>Password: <input n:name=password></label>
	</div>
	<div>
		<input n:name=send class="btn btn-default">
	</div>
</form>
```

Videz nastale kode HTML je povsem v vaših rokah. Če uporabite atribut `n:name` z `<select>`, `<button>` ali `<textarea>` elementi, se njihova notranja vsebina samodejno izpolni.
Poleg tega je `<form n:name>` oznaka ustvari lokalno spremenljivko `$form` z narisanim objektom obrazca in zaključnim `</form>` izriše vse neizrisane skrite elemente (enako velja za `{form} ... {/form}`).

Ne smemo pa pozabiti na izris morebitnih sporočil o napakah. Tako tistih, ki so bila posameznim elementom dodana z metodo `addError()` (z uporabo `{inputError}`), kot tistih, ki so bila dodana neposredno v obrazec (vrnjena z `$form->getOwnErrors()`):

```latte
<form n:name=signInForm class=form>
	<ul class="errors" n:ifcontent>
		<li n:foreach="$form->getOwnErrors() as $error">{$error}</li>
	</ul>

	<div>
		<label n:name=username>Username: <input n:name=username size=20 autofocus></label>
		<span class=error n:ifcontent>{inputError username}</span>
	</div>
	<div>
		<label n:name=password>Password: <input n:name=password></label>
		<span class=error n:ifcontent>{inputError password}</span>
	</div>
	<div>
		<input n:name=send class="btn btn-default">
	</div>
</form>
```

Kompleksnejše elemente obrazca, kot sta RadioList ali CheckboxList, lahko prikažemo element za elementom:

```latte
{foreach $form[gender]->getItems() as $key => $label}
	<label n:name="gender:$key"><input n:name="gender:$key"> {$label}</label>
{/foreach}
```


Predlog kode `{formPrint}` .[#toc-code-proposal-formprint]
----------------------------------------------------------

Podobno kodo Latte lahko ustvarite za obrazec z uporabo oznake `{formPrint}`. Če jo vstavite v predlogo, se bo namesto običajnega izrisa prikazal predlog kode. Nato jo preprosto izberite in kopirajte v svoj projekt.


{label} & {input}
-----------------

Ali ne želite za vsak element razmisliti, kateri element HTML uporabiti zanj v predlogi, ali `<input>`, `<textarea>` itd. Rešitev je univerzalna oznaka `{input}`:

```latte
<form n:name=signInForm class=form>
	<ul class="errors" n:ifcontent>
		<li n:foreach="$form->getOwnErrors() as $error">{$error}</li>
	</ul>

	<div>
		{label username}Username: {input username, size: 20, autofocus: true}{/label}
		{inputError username}
	</div>
	<div>
		{label password}Password: {input password}{/label}
		{inputError password}
	</div>
	<div>
		{input send, class: "btn btn-default"}
	</div>
</form>
```

Če obrazec uporablja prevajalnik, bo besedilo znotraj značk `{label}` prevedeno.

Tudi v tem primeru se lahko kompleksnejši elementi obrazca, kot sta RadioList ali CheckboxList, preslikajo po posameznih elementih:

```latte
{foreach $form[gender]->items as $key => $label}
	{label gender:$key}{input gender:$key} {$label}{/label}
{/foreach}
```

Če želite prikazati element `<input>` samega elementa Checkbox, uporabite `{input myCheckbox:}`. Atributi HTML morajo biti ločeni z vejico `{input myCheckbox:, class: required}`.


{inputError}
------------

Izpiše sporočilo o napaki za element obrazca, če ga vsebuje. Sporočilo je običajno zavito v element HTML za oblikovanje.
Izogibanje izrisu praznega elementa, če ni sporočila, je mogoče elegantno opraviti s `n:ifcontent`:

```latte
<span class=error n:ifcontent>{inputError $input}</span>
```

Z metodo `hasErrors()` lahko zaznamo prisotnost napake in ustrezno nastavimo razred nadrejenega elementa:

```latte
<div n:class="$form[username]->hasErrors() ? 'error'">
	{input username}
	{inputError username}
</div>
```


Samodejno upodabljanje .[#toc-automatic-rendering]
--------------------------------------------------

Z oznakama `{input}` in `{label}` lahko preprosto ustvarimo splošno predlogo za kateri koli obrazec. Ta bo iterirala in zaporedno prikazala vse elemente, razen skritih elementov, ki se samodejno prikažejo, ko se obrazec zaključi z oznako `</form>` z oznako.
V spremenljivki `$form` bo pričakovala ime izrisanega obrazca.

```latte
<form n:name=$form class=form>
	<ul class="errors" n:ifcontent>
		<li n:foreach="$form->getOwnErrors() as $error">{$error}</li>
	</ul>

	<div n:foreach="$form->getControls() as $input"
		n:if="$input->getOption(type) !== hidden">
		{label $input /}
		{input $input}
		{inputError $input}
	</div>
</form>
```

Uporabljene samozapiralne parne oznake `{label .../}` prikazujejo oznake, ki izhajajo iz definicije obrazca v kodi PHP.

To splošno predlogo lahko shranite v datoteko `basic-form.latte`, za prikaz obrazca pa jo samo vključite in v parameter `$form` posredujete ime (ali primerek) obrazca:

```latte
{include basic-form.latte, form: signInForm}
```

Če bi radi vplivali na videz posameznega obrazca in en element izrisali drugače, potem je najlažje, da v predlogi pripravite bloke, ki jih lahko pozneje prepišete.
Bloki imajo lahko tudi [dinamična imena |latte:template-inheritance#dynamic-block-names], zato lahko vanje vstavite ime elementa, ki ga želite narisati. Na primer:

```latte
...
	{label $input /}
	{block "input-{$input->name}"}{input $input}{/block}
...
```

Za element npr. `username` to ustvari blok `input-username`, ki ga lahko enostavno spremenite z uporabo oznake [{embed} |latte:template-inheritance#unit-inheritance]:

```latte
{embed basic-form.latte, form: signInForm}
	{block input-username}
		<span class=important>
			{include parent}
		</span>
	{/block}
{/embed}
```

Druga možnost je, da se celotna vsebina predloge `basic-form.latte` [opredeli |latte:template-inheritance#definitions] kot blok, vključno s parametrom `$form`:

```latte
{define basic-form, $form}
	<form n:name=$form class=form>
		...
	</form>
{/define}
```

Tako bo uporaba nekoliko lažja:

```latte
{embed basic-form, signInForm}
	...
{/embed}
```

Blok morate uvoziti le na enem mestu, na začetku predloge za postavitev:

```latte
{import basic-form.latte}
```


Posebni primeri .[#toc-special-cases]
-------------------------------------

Če morate prikazati samo notranjo vsebino obrazca brez `<form>` & `</form>` HTML, na primer v zahtevi AJAX, lahko obrazec odprete in zaprete s `{formContext} … {/formContext}`. V logičnem smislu deluje podobno kot `{form}`, tu vam omogoča uporabo drugih oznak za izris elementov obrazca, vendar hkrati ne izrisuje ničesar.

```latte
{formContext signForm}
	<div>
		<label n:name=username>Username: <input n:name=username></label>
		{inputError username}
	</div>
{/formContext}
```

Oznaka `formContainer` pomaga pri izrisovanju vnosov znotraj vsebnika obrazca.

```latte
<p>Which news you wish to receive:</p>

{formContainer emailNews}
<ul>
	<li>{input sport} {label sport /}</li>
	<li>{input science} {label science /}</li>
</ul>
{/formContainer}
```


Brez Latte .[#toc-without-latte]
================================

Obrazec najlažje prikažete tako, da pokličete:

```php
$form->render();
```

Videz izrisanega obrazca lahko spremenite z nastavitvijo [Rendererja |#Renderer] in [posameznih kontrolnih elementov |#HTML Attributes].


Ročno upodabljanje .[#toc-manual-rendering]
-------------------------------------------

Vsak element obrazca ima metode, ki generirajo kodo HTML za polje in oznako obrazca. Vrnejo jo lahko kot niz ali objekt [Nette\Utils\Html |utils:html-elements]:

- `getControl(): Html|string` vrne kodo HTML elementa
- `getLabel($caption = null): Html|string|null` vrne kodo HTML oznake, če obstaja

To omogoča prikaz obrazca po posameznih elementih:

```php
<?php $form->render('begin') ?>
<?php $form->render('errors') ?>

<div>
	<?= $form['name']->getLabel() ?>
	<?= $form['name']->getControl() ?>
	<span class=error><?= htmlspecialchars($form['name']->getError()) ?></span>
</div>

<div>
	<?= $form['age']->getLabel() ?>
	<?= $form['age']->getControl() ?>
	<span class=error><?= htmlspecialchars($form['age']->getError()) ?></span>
</div>

// ...

<?php $form->render('end') ?>
```

Medtem ko za nekatere elemente `getControl()` vrne en sam element HTML (npr. `<input>`, `<select>` itd.), za druge vrne celoten del kode HTML (CheckboxList, RadioList).
V tem primeru lahko uporabite metode, ki generirajo posamezne vhode in oznake, za vsak element posebej:

- `getControlPart($key = null): ?Html` vrne kodo HTML posameznega elementa
- `getLabelPart($key = null): ?Html` vrne kodo HTML za oznako posameznega elementa

.[note]
Tem metodam je iz zgodovinskih razlogov dodana predpona `get`, vendar bi bila `generate` boljša, saj ob vsakem klicu ustvari in vrne nov element `Html`.


Renderer .[#toc-renderer]
=========================

To je objekt, ki zagotavlja upodabljanje obrazca. Nastavite ga lahko z metodo `$form->setRenderer`. Ob klicu metode `$form->render()` se mu posreduje nadzor.

Če ne nastavimo lastnega upodabljavca, bo uporabljen privzeti upodabljavec [api:Nette\Forms\Rendering\DefaultFormRenderer]. Ta bo elemente obrazca prikazal kot tabelo HTML. Izpis je videti takole:

```latte
<table>
<tr class="required">
	<th><label class="required" for="frm-name">Name:</label></th>

	<td><input type="text" class="text" name="name" id="frm-name" value=""></td>
</tr>

<tr class="required">
	<th><label class="required" for="frm-age">Age:</label></th>

	<td><input type="text" class="text" name="age" id="frm-age" value=""></td>
</tr>

<tr>
	<th><label>Gender:</label></th>
	...
```

Mnogi spletni oblikovalci imajo raje drugačno označevanje, na primer seznam. Spletno mesto `DefaultFormRenderer` lahko konfiguriramo tako, da se sploh ne bo izrisalo v tabelo. Nastaviti moramo le ustrezne [ovitke $wrappers |api:Nette\Forms\Rendering\DefaultFormRenderer::$wrappers]. Prvi indeks vedno predstavlja območje, drugi pa element. Vsa ustrezna območja so prikazana na sliki:

[* form-areas-en.webp *]

Privzeto je skupina `controls` ovita v `<table>`, vsak naslov `pair` pa je vrstica tabele. `<tr>` ki vsebuje par `label` in `control` (celice `<th>` in `<td>`). Spremenimo vse te ovijalne elemente. `controls` bomo zavili v `<dl>`, `pair` bomo pustili samega, `label` bomo vstavili v `<dt>` in zavijemo `control` v `<dd>`:

```php
$renderer = $form->getRenderer();
$renderer->wrappers['controls']['container'] = 'dl';
$renderer->wrappers['pair']['container'] = null;
$renderer->wrappers['label']['container'] = 'dt';
$renderer->wrappers['control']['container'] = 'dd';

$form->render();
```

Rezultat je naslednji delček:

```latte
<dl>
	<dt><label class="required" for="frm-name">Name:</label></dt>

	<dd><input type="text" class="text" name="name" id="frm-name" value=""></dd>


	<dt><label class="required" for="frm-age">Age:</label></dt>

	<dd><input type="text" class="text" name="age" id="frm-age" value=""></dd>


	<dt><label>Gender:</label></dt>
	...
</dl>
```

Obalčki lahko vplivajo na številne atribute. Na primer:

- dodajte posebne razrede CSS vsakemu vnosu obrazca
- razlikovanje med lihimi in sodimi vrsticami
- poskrbite, da se obvezni in neobvezni elementi rišejo drugače.
- določite, ali se sporočila o napakah prikazujejo nad obrazcem ali blizu vsakega elementa


Možnosti .[#toc-options]
------------------------

Obnašanje programa Renderer lahko nadzorujete tudi z nastavitvijo *opcij* na posameznih elementih obrazca. Tako lahko nastavite namig, ki se prikaže ob vnosnem polju:

```php
$form->addText('phone', 'Number:')
	->setOption('description', 'This number will remain hidden');
```

Če želimo vanj vstaviti vsebino HTML, uporabimo razred [Html |utils:html-elements].

```php
use Nette\Utils\Html;

$form->addText('phone', 'Phone:')
	->setOption('description', Html::el('p')
		->setHtml('<a href="...">Terms of service.</a>')
	);
```

.[tip]
Element Html lahko uporabimo tudi namesto etikete: `$form->addCheckbox('conditions', $label)`.


Združevanje vhodnih podatkov v skupine .[#toc-grouping-inputs]
--------------------------------------------------------------

Renderer omogoča združevanje elementov v vizualne skupine (fieldsets):

```php
$form->addGroup('Personal data');
```

Ustvarjanje nove skupine jo aktivira - vsi elementi, ki so dodani naprej, so dodani v to skupino. Obrazec lahko sestavite takole:

```php
$form = new Form;
$form->addGroup('Personal data');
$form->addText('name', 'Your name:');
$form->addInteger('age', 'Your age:');
$form->addEmail('email', 'Email:');

$form->addGroup('Shipping address');
$form->addCheckbox('send', 'Ship to address');
$form->addText('street', 'Street:');
$form->addText('city', 'City:');
$form->addSelect('country', 'Country:', $countries);
```


Podpora Bootstrap .[#toc-bootstrap-support]
-------------------------------------------

Najdete lahko [primere |https://github.com/nette/forms/tree/master/examples] konfiguracije Rendererja za [Twitter Bootstrap 2 |https://github.com/nette/forms/blob/a0bc775b96b30780270bdec06396ca985168f11a/examples/bootstrap2-rendering.php#L58], [Bootstrap 3 |https://github.com/nette/forms/blob/a0bc775b96b30780270bdec06396ca985168f11a/examples/bootstrap3-rendering.php#L58] in [Bootstrap 4 |https://github.com/nette/forms/blob/96b3e90/examples/bootstrap4-rendering.php]


Atributi HTML .[#toc-html-attributes]
=====================================

Z uporabo spletne strani `setHtmlAttribute(string $name, $value = true)` lahko kontrolnim elementom obrazca nastavite poljubne atribute HTML:

```php
$form->addInteger('number', 'Number:')
	->setHtmlAttribute('class', 'big-number');

$form->addSelect('rank', 'Order by:', ['price', 'name'])
	->setHtmlAttribute('onchange', 'submit()'); // ob spremembi pokliče funkcijo JS submit().


// uporaba na <form>
$form->setHtmlAttribute('id', 'myForm');
```

Nastavitev vrste vnosa:

```php
$form->addText('tel', 'Your telephone:')
	->setHtmlType('tel')
	->setHtmlAttribute('placeholder', 'Please, fill in your telephone');
```

V seznamih z radijskimi ali potrditvenimi polji lahko posameznim elementom nastavimo atribut HTML z različnimi vrednostmi za vsakega od njih.
Upoštevajte dvopičje za `style:`, ki zagotavlja, da je vrednost izbrana po ključu:

```php
$colors = ['r' => 'red', 'g' => 'green', 'b' => 'blue'];
$styles = ['r' => 'background:red', 'g' => 'background:green'];
$form->addCheckboxList('colors', 'Colors:', $colors)
	->setHtmlAttribute('style:', $styles);
```

Renders:

```latte
<label><input type="checkbox" name="colors[]" style="background:red" value="r">red</label>
<label><input type="checkbox" name="colors[]" style="background:green" value="g">green</label>
<label><input type="checkbox" name="colors[]" value="b">blue</label>
```

Za logični atribut HTML (ki nima vrednosti, na primer `readonly`), lahko uporabite vprašalnik:

```php
$colors = ['r' => 'red', 'g' => 'green', 'b' => 'blue'];
$form->addCheckboxList('colors', 'Colors:', $colors)
	->setHtmlAttribute('readonly?', 'r'); // uporabite polje za več ključev, npr. ['r', 'g']
```

Renders:

```latte
<label><input type="checkbox" name="colors[]" readonly value="r">red</label>
<label><input type="checkbox" name="colors[]" value="g">green</label>
<label><input type="checkbox" name="colors[]" value="b">blue</label>
```

Pri izbirnih poljih metoda `setHtmlAttribute()` nastavi atribute `<select>` elementa. Če želimo nastaviti atribute za vsako
`<option>`, bomo uporabili metodo `setOptionAttribute()`. Tudi zgoraj uporabljena dvopičje in vprašalno znamenje delujeta:

```php
$form->addSelect('colors', 'Colors:', $colors)
	->setOptionAttribute('style:', $styles);
```

Renders:

```latte
<select name="colors">
	<option value="r" style="background:red">red</option>
	<option value="g" style="background:green">green</option>
	<option value="b">blue</option>
</select>
```


Prototipi .[#toc-prototypes]
----------------------------

Alternativni način določanja atributov HTML je spreminjanje predloge, iz katere se ustvari element HTML. Predloga je predmet `Html` in jo vrne metoda `getControlPrototype()`:

```php
$input = $form->addInteger('number');
$html = $input->getControlPrototype(); // <input>
$html->class('big-number');            // <input class="big-number">
```

Na ta način je mogoče spremeniti tudi predlogo za etiketo, ki jo vrne metoda `getLabelPrototype()`:

```php
$html = $input->getLabelPrototype(); // <label>
$html->class('distinctive');         // <label class="distinctive">
```

Za elemente Checkbox, CheckboxList in RadioList lahko vplivate na predlogo elementa, ki obdaja element. Vrne jo `getContainerPrototype()`. Privzeto je to "prazen" element, zato se ne prikaže nič, vendar se bo s podelitvijo imena prikazal:

```php
$input = $form->addCheckbox('send');
echo $input->getControl();
// <label><input type="checkbox" name="send"></label>

$html = $input->getContainerPrototype();
$html->setName('div'); // <div>
$html->class('check'); // <div class="check">
echo $input->getControl();
// <div class="check"><label><input type="checkbox" name="send"></label></div>
```

V primeru CheckboxList in RadioList je mogoče vplivati tudi na vzorec ločevalnika elementov, ki ga vrne metoda `getSeparatorPrototype()`. Privzeto je to element `<br>`. Če ga spremenite v parni element, bo zavil posamezne elemente, namesto da bi jih ločil.
Prav tako je mogoče vplivati na predlogo elementa HTML za oznake elementov, ki jo vrne metoda `getItemLabelPrototype()`.


Dogodek onRender .[#toc-event-onrender]
=======================================

Tik preden se obrazec izriše, lahko sprožimo našo kodo. Ta lahko na primer elementom obrazca doda razrede HTML za pravilen prikaz. Kodo dodamo v polje `onRender`:

```php
$form->onRender[] = function ($form) {
	BootstrapCSS::initialize($form);
};
```
