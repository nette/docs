Utilizarea Latte cu Slim 4
**************************

.[perex]
Acest articol, al cărui autor este "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, descrie utilizarea Latte cu Slim Framework.

Mai întâi, "instalați Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html și apoi Latte folosind Composer:

```shell
composer require latte/latte
```


Configurație
------------

În directorul rădăcină al proiectului, creați un nou director `templates`. Toate șabloanele vor fi plasate ulterior în el.

În fișierul `config/defaults.php`, adăugați o nouă cheie de configurare `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte compilează șabloanele în cod PHP nativ și le salvează într-un cache pe disc. Prin urmare, sunt la fel de rapide ca și cum ar fi fost scrise în limbaj PHP nativ.

În fișierul `config/defaults.php`, adăugați o nouă cheie de configurare `template_temp`: Asigurați-vă că directorul `{project}/tmp/templates` există și are permisiuni de citire și scriere.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte regenerează automat cache-ul la fiecare modificare a șablonului, ceea ce poate fi dezactivat în mediul de producție pentru a economisi puțină performanță:

```php
// în mediul de producție, schimbați la false
$settings['template_auto_refresh'] = true;
```

În continuare, adăugați definiția containerului DI pentru clasa `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Randarea propriu-zisă a șablonului Latte ar funcționa tehnic, dar trebuie să ne asigurăm și că funcționează cu obiectul response PSR-7.

În acest scop, vom crea o clasă specială `TemplateRenderer`, care va face această muncă pentru noi.

Așadar, creați fișierul `src/Renderer/TemplateRenderer.php` și copiați/lipiți acest cod:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Utilizare
---------

În loc să folosim direct obiectul Latte Engine, vom folosi obiectul `TemplateRenderer` pentru a randa șablonul într-un obiect compatibil cu PSR-7.

O clasă tipică de handler de acțiune poate arăta astfel: Randează șablonul cu numele `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Pentru ca acest lucru să funcționeze, creați fișierul șablon în `templates/home.latte` cu acest conținut:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Dacă totul este configurat corect, ar trebui să se afișeze următorul output:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
