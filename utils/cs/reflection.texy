PHP Reflexe
***********

.[perex]
[api:Nette\Utils\Reflection] je statická třída s užitečnými funkcemi pro PHP reflexi. Jejím úkolem je opravovat nedostatky nativních tříd a sjednocovat chování napříč různými verzemi PHP.


Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Zjistí, zda má reflexe přístup k PHPdoc komentářům. Komentáře mohou být nedostupné kvůli opcode cache, viz třeba direktiva [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Expanduje název třídy `$name` na její plný název v kontextu třídy `$context`, tedy v kontextu jejího jmenného prostoru a definovaných aliasů. Tedy vlastně říká, jak by PHP parser `$name` chápal, kdyby byl zapsaný v těle třídy `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Vrací reflexi metody, která obsahuje deklaraci metody `$method`. Obvykle je každá metoda svou vlastní deklarací, ale tělo metody se může nacházet i v traitě a pod jiným názvem.

Protože PHP neposkytuje dostatečné informace, pomocí kterých lze skutečnou deklaraci zjistit, využívá Nette vlastní heuristiku, která by **měla být** spolehlivá.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getParameterDefaultValue(ReflectionParameter $param) .[method]
--------------------------------------------------------------

Vrací výchozí hodnotu parametru `$param` funkce či metody. Pokud jde o konstantu, vrátí její hodnotu. V případě, že parametr nemá výchozí hodnotu nebo konstantu nelze resolvovat, vyhodí výjimku `ReflectionException`.

```php
class DemoClass
{
	function foo($param = PDO::FETCH_BOTH)
	{
	}
}

$method = new ReflectionMethod('DemoClass::foo');
Reflection::getParameterDefaultValue($method->getParameters()[0]);
```


getParameterType(ReflectionParameter $param): ?string .[method]
---------------------------------------------------------------

Vrací typ parametru `$param` funkce či metody a překládá `self` a `parent` na skutečná jméno třídy. Pokud parametr nemá typ, vrátí `null`, pokud má union nebo intersection typ vyhodí výjimku `Nette\InvalidStateException`.

```php
class DemoClass
{
	function foo(self $param)
	{
	}
}

$method = new ReflectionMethod('DemoClass::foo');
Reflection::getReturnType($method->getParameters()[0]); // 'DemoClass'
```

Metoda vznikla v době, kdy PHP nemělo union a intersection typy. Nahrazuje ji metoda [Nette\Utils\Type::fromReflection()|type#fromReflection].


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Vrací reflexi třídy či traity, která obsahuje deklaraci property `$prop`. Property totiž může být deklarovaná i v traitě.

Protože PHP neposkytuje dostatečné informace, pomocí kterých lze skutečnou deklaraci zjistit, využívá Nette vlastní heuristiku, která **není** spolehlivá.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


getPropertyType(ReflectionProperty $prop): ?string .[method]
------------------------------------------------------------

Vrací typ property `$prop` a překládá `self` a `parent` na skutečná jméno třídy. Pokud property nemá typ, vrátí `null`, pokud má union nebo intersection typ vyhodí výjimku `Nette\InvalidStateException`.

```php
class DemoClass
{
	public self $foo;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getReturnType($prop); // 'DemoClass'
```

Metoda vznikla v době, kdy PHP nemělo union a intersection typy. Nahrazuje ji metoda [Nette\Utils\Type::fromReflection()|type#fromReflection].


getReturnType(ReflectionFunctionAbstract $func): ?string .[method]
------------------------------------------------------------------

Vrací návratový typ funkce či metody `$func` a překládá `self`, `static` a `parent` na skutečné jméno třídy. Pokud funkce návratový typ nemá, vrátí `null`, pokud má union nebo intersection typ vyhodí výjimku `Nette\InvalidStateException`.

```php
class DemoClass
{
	function foo(): self
	{
	}
}

$method = new ReflectionMethod('DemoClass::foo');
Reflection::getReturnType($method); // 'DemoClass'
```

Metoda vznikla v době, kdy PHP nemělo union a intersection typy. Nahrazuje ji metoda [Nette\Utils\Type::fromReflection()|type#fromReflection].


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Zjistí, zda je `$type` vestavěný typ PHP. V opačném případě jde o název třídy.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```


toString($reflection): string .[method]
---------------------------------------

Převede reflexi na lidsky srozumitelný řetězec.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
