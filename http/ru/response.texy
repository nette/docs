HTTP-ответ
**********

.[perex]
Nette инкапсулирует HTTP-ответ в объекты с понятным API, обеспечивая при этом фильтр санации.

HTTP-ответ - это объект [api:Nette\Http\Response], который вы получаете, передавая его с помощью [инъекции зависимостей |dependency-injection:passing-dependencies]. В презентаторах просто вызывайте `$httpResponse = $this->getHttpResponse()`.

→ [Установка и требования |@home#Installation]


Nette\Http\Response .[#toc-nette-http-response]
===============================================

В отличие от [Nette\Http\Request |request], этот объект является изменяемым, поэтому вы можете использовать сеттеры для изменения состояния, т.е. для отправки заголовков. Помните, что все сеттеры **должны быть вызваны до отправки фактического вывода.** Метод `isSent()` показывает, был ли отправлен вывод. Если он возвращает `true`, то каждая попытка отправить заголовок вызывает исключение `Nette\InvalidStateException`.


setCode(int $code, string $reason=null) .[method]
-------------------------------------------------
Изменяет [код ответа |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10] статуса. Для лучшей читаемости исходного кода рекомендуется использовать [предопределенные константы |api:Nette\Http\IResponse] вместо реальных чисел.

```php
$httpResponse->setCode(Nette\Http\Response::S404_NotFound);
```


getCode(): int .[method]
------------------------
Возвращает код статуса ответа.


isSent(): bool .[method]
------------------------
Возвращает, были ли заголовки уже отправлены с сервера в браузер, поэтому уже невозможно отправить заголовки или изменить код статуса.


setHeader(string $name, string $value) .[method]
------------------------------------------------
Отправляет HTTP-заголовок и **перезаписывает** ранее отправленный одноименный заголовок.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```


addHeader(string $name, string $value) .[method]
------------------------------------------------
Отправляет HTTP-заголовок и **не перезаписывает** ранее отправленный одноименный заголовок.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```


deleteHeader(string $name) .[method]
------------------------------------
Удаляет ранее отправленный HTTP-заголовок.


getHeader(string $header): ?string .[method]
--------------------------------------------
Возвращает отправленный HTTP-заголовок, или `null`, если он не существует. Параметр не чувствителен к регистру.

```php
$pragma = $httpResponse->getHeader('Pragma');
```


getHeaders(): array .[method]
-----------------------------
Возвращает все отправленные HTTP-заголовки в виде ассоциативного массива.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```


setContentType(string $type, string $charset=null) .[method]
------------------------------------------------------------
Отправляет заголовок `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```


redirect(string $url, int $code=self::S302_Found): void .[method]
-----------------------------------------------------------------
Перенаправляет на другой URL. Не забудьте после этого выйти из скрипта.

```php
$httpResponse->redirect('http://example.com');
exit;
```


setExpiration(?string $time) .[method]
--------------------------------------
Устанавливает срок действия HTTP-документа, использующего заголовки `Cache-Control` и `Expires`. Параметром является либо временной интервал (в виде текста), либо `null`, который отключает кэширование.

```php
// срок действия кэша браузера истекает через час
$httpResponse->setExpiration('1 hour');
```


sendAsFile(string $fileName) .[method]
--------------------------------------
Ответ должен быть загружен с помощью диалога *Сохранить как* с указанным именем. Сам файл на вывод не отправляется.

```php
$httpResponse->sendAsFile('invoice.pdf');
```


setCookie(string $name, string $value, $time, string $path=null, string $domain=null, bool $secure=null, bool $httpOnly=null, string $sameSite=null) .[method]
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Отправляет cookie. Значения параметров по умолчанию:

| `$path` | `'/'` | с охватом всех путей на (под)домене *(настраивается)*.
| `$domain` | `null` | с областью действия текущего (под)домена, но не его поддоменов *(настраивается)*.
| `$secure` | `true` | если сайт работает на HTTPS, иначе `false` *(настраивается)*.
| `$httpOnly` | `true` | cookie недоступна для JavaScript
| `$sameSite` | `'Lax'` | cookie не нужно отправлять при [доступе из другого источника |nette:glossary#SameSite-Cookie]

Вы можете изменить значения по умолчанию параметров `$path`, `$domain` и `$secure` в [конфигурация |configuration#HTTP-Cookie].

Время может быть указано в виде количества секунд или строки:

```php
$httpResponse->setCookie('lang', 'en', '100 days');
```

Параметр `$domain` определяет, какие домены (origin) могут принимать cookie. Если параметр не указан, cookie принимается тем же (под)доменом, который задан, исключая их поддомены. Если указан `$domain`, то поддомены также включаются. Поэтому указание `$domain` является менее ограничительным, чем опущение. Например, если `$domain = 'nette.org'`, cookie также доступен на всех поддоменах, как `doc.nette.org`.

Для значения `$sameSite` можно использовать константы `Response::SameSiteLax`, `SameSiteStrict` и `SameSiteNone`.


deleteCookie(string $name, string $path=null, string $domain=null, bool $secure=null): void .[method]
-----------------------------------------------------------------------------------------------------
Удаляет файл cookie. По умолчанию параметры имеют следующие значения:
- `$path` с областью действия на все каталоги (`'/'`)
- `$domain` с областью действия на текущий (под)домен, но не на его поддомены.
- `$secure` зависит от настроек в [конфигурации |configuration#HTTP-Cookie]

```php
$httpResponse->deleteCookie('lang');
```
