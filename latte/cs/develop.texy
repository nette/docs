Vývojářské postupy
******************


Jak vykreslit šablonu
=====================

Jak vykreslit šablonu? Stačí spustit tento kód:

```php
$latte = new Latte\Engine;

$latte->setTempDirectory('/path/to/tempdir');

$params = [
	'items' => ['one', 'two', 'three'],
];

// kresli na výstup
$latte->render('template.latte', $params);
// kresli do řetězce
$html = $latte->renderToString('template.latte', $params);
```

Latte automaticky přegenerovává cache při každé změně šablony, což můžeme v produkčním prostředí vypnout a ušetřit tím malinko výkonu:

```php
$latte->setAutoRefresh(false);
```


Typově bezpečné parametry
-------------------------

Místo pole `$params` můžete také použít objekt, což přináší některé výhody. Získáte typově bezpečný zápis, [příjemné napovídání v IDE|type-system]
a cestu pro [registraci filtrů|#Vlastní filtr] a [funkcí|#Funkce]. Příklad zápisu v PHP 8:

```php
class MailTemplate
{
	public function __construct(
		public string $lang = 'cs',
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplate(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Escapování parametrů
--------------------

Pokud parametr obsahuje řetězec v HTML, který už se nemá escapovat, můžete jej zabalit do objektu `Latte\Runtime\Html`:

```php
$params = [
	'article_body' => new Latte\Runtime\Html($article->html_body),
];
```


Jak rozšířit Latte o filtry, značky atd.
========================================

Jak do Latte přidat vlastní filtr, funkci, značku atd? To se dozvíte v kapitole [rozšiřujeme Latte |extending-latte].
Pokud chcete své úpravy znovu použít v různých projektech nebo je sdílet s ostatními, měli byste [vytvořit rozšíření |creating-extension].


Libovolný kód v šabloně `{php ...}` .{data-version:3.0}{toc: RawPhpExtension}
=============================================================================

Dialekt PHP v Latte podporuje pouze výrazy. To znamená, že uvnitř značky `{do}` nemůžete napsat třeba konstrukce jako `if ... else` nebo statementy ukončené středníkem.

Můžete si však zaregistrovat rozšíření `RawPhpExtension`, které umožní ve značce `{php}` psát takřka cokoliv na zodpovědnost autora šablony.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Linter: validace syntaxe šablon .{data-version:2.11}{toc: Linter}
=================================================================

Chyby v syntaxi v šablonách Latte můžete zkontrolovat pomocí konzolového příkazu `latte-lint`:

```shell
vendor/bin/latte-lint <cesta>
```

Pokud používáte vlastní značky, vytvořte si také vlastní verzi Linteru, např. `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// zadejte skutečnou cestu k soubor autoload.php
require __DIR__ . '/vendor/autoload.php';

$linter = new Latte\Tools\Linter($engine);
$linter->scanDirectory($path);

$engine = new Latte\Engine;
// tady zaregistruje jednotlivá rozšíření
$engine->addExtension(/* ... */);

$path = $argv[1];
$linter = new Latte\Tools\Linter(engine: $engine);
$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```


Načítání šablon z řetězce
=========================

Pokud nemáme naši šablonu uloženou v souboru, ale pouze v proměnných, musíme nastavit loader na `Latte\Loaders\StringLoader`.

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Exception handler
=================

Můžete si definovat vlastní obslužný handler pro očekávané výjimky. Předají se mu výjimky vzniklé uvnitř [`{try}`|tags#try] a v [sandboxu|sandbox].

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Dohledávání layoutu
===================

Rozhraní API můžete použít k výběru šablony layout, která se má použít, když podřízená šablona neobsahuje značku `{layout}`. To zjednoduší psaní šablon nebo umožní automatické dohledávání layoutů.

Toho se dosáhne následujícím způsobem:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// vrací cestu k souboru s layoutem
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

/--comment


Loadery
=======


Using a Database to store Templates
===================================


Latte\Runtime\Html, Latte\HtmlStringable
========================================
\--


{{composer: latte/latte}}
