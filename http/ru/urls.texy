Работа с URL
************

.[perex]
Классы [#Url |#Url], [#UrlImmutable |#UrlImmutable] и [#UrlScript |#UrlScript] позволяют легко генерировать, парсить и манипулировать URL.

→ [Установка и требования |@home#Instalace]


Url
===

Класс [api:Nette\Http\Url |api:Nette\Http\Url] позволяет легко работать с URL и его отдельными компонентами, которые отражены на этой схеме:

/--pre
 схема  пользователь  пароль  хост   порт    путь        запрос  фрагмент
   |      |      |        |      |       |            |       |
 /--\   /--\ /------\ /-------\ /--\/----------\ /--------\ /----\
 <b>http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer</b>
 \______\__________________________/
     |               |
  hostUrl        authority
\--

Генерация URL интуитивно понятна:

```php
use Nette\Http\Url;

$url = new Url;
$url->setScheme('https')
	->setHost('localhost')
	->setPath('/edit')
	->setQueryParameter('foo', 'bar');

echo $url; // 'https://localhost/edit?foo=bar'
```

Также можно распарсить URL и далее манипулировать им:

```php
$url = new Url(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);
```

Класс `Url` реализует интерфейс `JsonSerializable` и имеет метод `__toString()`, так что объект можно вывести или использовать в данных, передаваемых в `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


Компоненты URL .[method]
------------------------

Для возврата или изменения отдельных компонентов URL вам доступны следующие методы:

.[language-php]
| Сеттер									| Геттер						| Возвращаемое значение
|--------------------------------------------------------------------------------------------
| `setScheme(string $scheme)`				| `getScheme(): string`			| `'http'`
| `setUser(string $user)`					| `getUser(): string`			| `'john'`
| `setPassword(string $password)`			| `getPassword(): string`		| `'xyz*12'`
| `setHost(string $host)`					| `getHost(): string`			| `'nette.org'`
| `setPort(int $port)`						| `getPort(): ?int`				| `8080`
|											| `getDefaultPort(): ?int`		| `80`
| `setPath(string $path)`					| `getPath(): string`			| `'/en/download'`
| `setQuery(string\|array $query)`			| `getQuery(): string`			| `'name=param'`
| `setFragment(string $fragment)`			| `getFragment(): string`		| `'footer'`
| 											| `getAuthority(): string`		| `'nette.org:8080'`
| 											| `getHostUrl(): string`		| `'http://nette.org:8080'`
| 											| `getAbsoluteUrl(): string` 	| весь URL

Предупреждение: Когда вы работаете с URL, полученным из [HTTP-запроса|request], имейте в виду, что он не будет содержать фрагмент, так как браузер не отправляет его на сервер.

Мы можем работать и с отдельными query-параметрами с помощью:

.[language-php]
| Сеттер									| Геттер
|---------------------------------------------------
| `setQuery(string\|array $query)`  		| `getQueryParameters(): array`
| `setQueryParameter(string $name, $val)`	| `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Возвращает правую или левую часть хоста. Так это работает, если хост `www.nette.org`:

.[language-php]
| `getDomain(1)`  |  `'org'`
| `getDomain(2)`  |  `'nette.org'`
| `getDomain(3)`  |  `'www.nette.org'`
| `getDomain(0)`  |  `'www.nette.org'`
| `getDomain(-1)` |  `'www.nette'`
| `getDomain(-2)` |  `'www'`
| `getDomain(-3)` |  `''`


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Проверяет, идентичны ли два URL.

```php
$url->isEqual('https://nette.org');
```


Url::isAbsolute(string $url): bool .[method]{data-version:3.3.2}
----------------------------------------------------------------
Проверяет, является ли URL абсолютным. URL считается абсолютным, если он начинается со схемы (например, http, https, ftp), за которой следует двоеточие.

```php
Url::isAbsolute('https://nette.org');    // true
Url::isAbsolute('//nette.org');          // false
```


Url::removeDotSegments(string $path): string .[method]{data-version:3.3.2}
--------------------------------------------------------------------------
Нормализует путь в URL, удаляя специальные сегменты `.` и `..`. Метод удаляет избыточные элементы пути тем же способом, как это делают веб-браузеры.

```php
Url::removeDotSegments('/path/../subtree/./file.txt');  // '/subtree/file.txt'
Url::removeDotSegments('/../foo/./bar');                // '/foo/bar'
Url::removeDotSegments('./today/../file.txt');          // 'file.txt'
```


UrlImmutable
============

Класс [api:Nette\Http\UrlImmutable |api:Nette\Http\UrlImmutable] является immutable (неизменяемой) альтернативой классу [#Url |#Url] (подобно тому, как в PHP `DateTimeImmutable` является неизменяемой альтернативой `DateTime`). Вместо сеттеров у него есть так называемые withers, которые не изменяют объект, а возвращают новые экземпляры с измененным значением:

```php
use Nette\Http\UrlImmutable;

$url = new UrlImmutable(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);

$newUrl = $url
	->withUser('')
	->withPassword('')
	->withPath('/cs/');

echo $newUrl; // 'http://nette.org:8080/cs/?name=param#footer'
```

Класс `UrlImmutable` реализует интерфейс `JsonSerializable` и имеет метод `__toString()`, так что объект можно вывести или использовать в данных, передаваемых в `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


Компоненты URL .[method]
------------------------

Для возврата или изменения отдельных компонентов URL служат методы:

.[language-php]
| Wither									| Геттер						| Возвращаемое значение
|--------------------------------------------------------------------------------------------
| `withScheme(string $scheme)`				| `getScheme(): string`			| `'http'`
| `withUser(string $user)`					| `getUser(): string`			| `'john'`
| `withPassword(string $password)`			| `getPassword(): string`		| `'xyz*12'`
| `withHost(string $host)`					| `getHost(): string`			| `'nette.org'`
| `withPort(int $port)`						| `getPort(): ?int`				| `8080`
|											| `getDefaultPort(): ?int`		| `80`
| `withPath(string $path)`					| `getPath(): string`			| `'/en/download'`
| `withQuery(string\|array $query)`			| `getQuery(): string`			| `'name=param'`
| `withFragment(string $fragment)`			| `getFragment(): string`		| `'footer'`
| 											| `getAuthority(): string`		| `'nette.org:8080'`
| 											| `getHostUrl(): string`		| `'http://nette.org:8080'`
| 											| `getAbsoluteUrl(): string` 	| весь URL

Метод `withoutUserInfo()` удаляет `user` и `password`.

Мы можем работать и с отдельными query-параметрами с помощью:

.[language-php]
| Wither								| Геттер
|-----------------------------------------------
| `withQuery(string\|array $query)` 	    | `getQueryParameters(): array`
| `withQueryParameter(string $name, $val)`  | `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Возвращает правую или левую часть хоста. Так это работает, если хост `www.nette.org`:

.[language-php]
| `getDomain(1)`  |  `'org'`
| `getDomain(2)`  |  `'nette.org'`
| `getDomain(3)`  |  `'www.nette.org'`
| `getDomain(0)`  |  `'www.nette.org'`
| `getDomain(-1)` |  `'www.nette'`
| `getDomain(-2)` |  `'www'`
| `getDomain(-3)` |  `''`


resolve(string $reference): UrlImmutable .[method]{data-version:3.3.2}
----------------------------------------------------------------------
Выводит абсолютный URL тем же способом, каким браузер обрабатывает ссылки на HTML-странице:
- если ссылка является абсолютным URL (содержит схему), она используется без изменений
- если ссылка начинается с `//`, берется только схема из текущего URL
- если ссылка начинается с `/`, создается абсолютный путь от корня домена
- в остальных случаях URL составляется относительно текущего пути

```php
$url = new UrlImmutable('https://example.com/path/page');
echo $url->resolve('../foo');           // 'https://example.com/foo'
echo $url->resolve('/bar');             // 'https://example.com/bar'
echo $url->resolve('sub/page.html');    // 'https://example.com/path/sub/page.html'
```


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Проверяет, идентичны ли два URL.

```php
$url->isEqual('https://nette.org');
```


UrlScript
=========

Класс [api:Nette\Http\UrlScript |api:Nette\Http\UrlScript] является потомком [#UrlImmutable |#UrlImmutable] и расширяет его дополнительными виртуальными компонентами URL, такими как корневой каталог проекта и т.д. Как и родительский класс, это immutable (неизменяемый) объект.

Следующая диаграмма отображает компоненты, которые распознает UrlScript:

/--pre
      baseUrl    basePath  relativePath  relativeUrl
         |          |        |               |
 /---------------/-----\/--------\---------------------------\
 <b>http://nette.org/admin/script.php/pathinfo/?name=param#footer</b>
                 \_______________/\________/
                        |              |
                   scriptPath       pathInfo
\--

- `baseUrl` — это базовый URL-адрес приложения, включая домен и часть пути к корневому каталогу приложения
- `basePath` — это часть пути к корневому каталогу приложения
- `scriptPath` — это путь к текущему скрипту
- `relativePath` — это имя скрипта (возможно, с дополнительными сегментами пути) относительно basePath
- `relativeUrl` — это вся часть URL после baseUrl, включая строку запроса и фрагмент.
- `pathInfo` — сегодня уже малоиспользуемая часть URL после имени скрипта

Для возврата частей URL доступны методы:

.[language-php]
| Геттер						| Возвращаемое значение
|------------------------------------------------
| `getScriptPath(): string`		| `'/admin/script.php'`
| `getBasePath(): string`		| `'/admin/'`
| `getBaseUrl(): string`		| `'http://nette.org/admin/'`
| `getRelativePath(): string`	| `'script.php'`
| `getRelativeUrl(): string`	| `'script.php/pathinfo/?name=param#footer'`
| `getPathInfo(): string`		| `'/pathinfo/'`

Объекты `UrlScript` обычно не создаются напрямую, но их возвращает метод [Nette\Http\Request::getUrl()|request |Nette\Http\Request::getUrl()|request] с уже правильно настроенными компонентами для текущего HTTP-запроса.
