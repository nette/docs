Konfiguracja aplikacji
**********************

.[perex]
Przegląd opcji konfiguracyjnych dla Nette Applications.


Aplikacja .[#toc-application]
=============================

```neon
application:
	# zobrazit "Nette Application" panel v Tracy BlueScreen?
	debugger: ...           # (bool) výchozí je true

	# bude se při chybě volat error-presenter?
	catchExceptions: ...    # (bool) výchozí je true v produkčním režimu

	# název error-presenteru
	errorPresenter: Error   # (string) výchozí je 'Nette:Error'

	# definuje pravidla pro překlad názvu presenteru na třídu
	mapping: ...

	# chybné odkazy negenerují varování?
	# má efekt pouze ve vývojářském režimu
	silentLinks: ...        # (bool) výchozí je false
```

Ponieważ prezentery błędów nie są domyślnie wywoływane w trybie deweloperskim, a błąd jest wyświetlany tylko przez Tracy, zmiana wartości `catchExceptions` na `true` pozwala nam zweryfikować ich poprawną funkcjonalność w trakcie rozwoju.

Opcja `silentLinks` określa, jak Nette zachowuje się w trybie rozwoju, gdy generowanie linków nie powiedzie się (np. z powodu braku prezentera itp.). Domyślna wartość `false` oznacza, że Nette rzuci błąd `E_USER_WARNING`. Ustawienie go na `true` spowoduje wyeliminowanie tego komunikatu o błędzie. W środowisku produkcyjnym, `E_USER_WARNING` jest zawsze podniesiony. Na to zachowanie można również wpłynąć poprzez ustawienie zmiennej prezentera [$invalidLinkMode |creating-links#neplatne-odkazy].

[Odwzorowanie określa zasady |modules#mapování], według których nazwa klasy jest wyprowadzana z nazwy prezentera.


Automatyczna rejestracja prezenterów .[#toc-automaticka-registrace-presenteru]
------------------------------------------------------------------------------

Nette automatycznie dodaje prezentery jako usługi do kontenera DI, co radykalnie przyspieszy ich tworzenie. Sposób śledzenia prezenterów przez Nette można skonfigurować:

```neon
application:
	# hledat presentery v Composer class map?
	scanComposer: ...      # (bool) výchozí je true

	# maska, které musí vyhovovat název třídy a souboru
	scanFilter: ...        # (string) výchozí je '*Presenter'

	# ve kterých adresářích hledat presentery?
	scanDirs:              # (string[]|false) výchozí je '%appDir%'
		- %vendorDir%/mymodule
```

Katalogi wymienione w `scanDirs` nie nadpisują domyślnej wartości `%appDir%`, ale dodają do niej, więc `scanDirs` będzie zawierał zarówno ścieżki `%appDir%` jak i `%vendorDir%/mymodule`. Jeśli chcielibyśmy pominąć domyślny katalog, używamy [wykrzyknika |dependency-injection:configuration#Slučování], aby nadpisać wartość:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

Skanowanie katalogów można wyłączyć podając wartość false. Nie zaleca się całkowitego wyłączenia automatycznego dodawania prezenterów, w przeciwnym razie wydajność aplikacji ulegnie pogorszeniu.


Szablony Latte .[#toc-sablony-latte]
====================================

To ustawienie może być używane do globalnego wpływania na zachowanie Latte w komponentach i prezenterach.

```neon
latte:
	# zobrazit Latte panel v Tracy Baru pro hlavní šablonu (true) nebo všechny komponenty (all)?
	debugger: ...        # (true|false|'all') výchozí je true

	# přepne Latte do XHTML režimu (deprecated)
	xhtml: ...           # (bool) výchozí je false

	# generuje šablony s hlavičkou declare(strict_types=1)
	strictTypes: ...     # (bool) výchozí je false

	# třída objektu $this->template
	templateClass: App\MyTemplateClass # výchozí je Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Jeśli używasz Latte w wersji 3, możesz dodać nowe [rozszerzenia |latte:creating-extension] za pomocą:

```neon
latte:
	extensions:
		- Latte\Essential\TranslatorExtension
```

Jeśli używasz Latte w wersji 2, możesz zarejestrować nowe znaczniki (makra), podając nazwę klasy lub odwołując się do usługi. Domyślnie wywoływaną metodą jest `install()`, ale można to zmienić podając nazwę innej metody:

```neon
latte:
	# registrace uživatelských Latte značek
	macros:
		- App\MyLatteMacros::register         # statická metoda, classname nebo callable
		- @App\MyLatteMacrosFactory           # služba s metodou install()
		- @App\MyLatteMacrosFactory::register # služba s metodou register()

services:
	- App\MyLatteMacrosFactory
```


Routing .[#toc-routovani]
=========================

Ustawienia podstawowe:

```neon
routing:
	# zobrazit routovací panel v Tracy Bar?
	debugger: ...   # (bool) výchozí je true

	# serializuje router do DI kontejneru
	cache: ...      # (bool) výchozí je false
```

Routing jest zwykle definiowany w klasie [RouterFactory |routing#Kolekce rout]. Alternatywnie, routery mogą być również zdefiniowane w konfiguracji przy użyciu par `maska: akce`, ale ta metoda nie oferuje tak szerokiego spektrum ustawień:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Stałe .[#toc-konstanty]
=======================

Tworzenie stałych PHP.

```neon
constants:
	Foobar: 'baz'
```

Po uruchomieniu aplikacji zostanie utworzona stała `Foobar`.

.[note]
Stałe nie powinny być używane jako zmienne dostępne globalnie. Użyj [zastrzyku zależności |dependency-injection:passing-dependencies], aby przekazać wartości do obiektów.


PHP
===

Ustawianie dyrektyw PHP. Przegląd wszystkich dyrektyw można znaleźć na stronie [php.net |https://www.php.net/manual/en/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```
