Formulare an mehreren Stellen wiederverwenden
*********************************************

.[perex]
Wie kann man ein und dasselbe Formular an mehreren Stellen wiederverwenden, ohne den Code zu duplizieren? Das ist in Nette wirklich einfach und Sie haben mehrere Möglichkeiten zur Auswahl.


Formular-Fabrik .[#toc-form-factory]
====================================

Lassen Sie uns eine Klasse erstellen, die ein Formular erstellen kann. Eine solche Klasse wird als Fabrik bezeichnet. An der Stelle, an der wir das Formular verwenden wollen (z. B. im Presenter), fordern wir die [Factory als Abhängigkeit |dependency-injection:passing-dependencies] an.

Teil der Fabrik ist der Code, der die Daten zur weiteren Verarbeitung weitergibt, wenn das Formular erfolgreich abgeschickt wurde. Normalerweise an die Modellschicht. Sie prüft auch, ob alles gut gelaufen ist, und gibt eventuelle Fehler an das Formular [zurück |forms:validation#Processing-errors]. Das Modell im folgenden Beispiel wird durch die Klasse `Facade` repräsentiert:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// Elemente zum Formular hinzufügen

		$form->addSubmit('send', 'Absenden');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// Verarbeitung des Formulars
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

Natürlich kann die Fabrik parametrisch sein, d.h. sie kann Parameter erhalten, die das Aussehen des zu erstellenden Formulars beeinflussen.

Wir werden nun demonstrieren, wie wir die Fabrik an den Präsentator übergeben. Zuerst schreiben wir sie in die Konfigurationsdatei:

```neon
services:
	- EditFormFactory
```

Und fordern sie dann im Presenter an. Dort folgt auch der nächste Schritt der Verarbeitung des eingereichten Formulars und das ist die Routing zur nächsten Seite:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Da die Routing durch den Presenter-Handler erfolgt, kann die Komponente an mehreren Stellen verwendet und an jeder Stelle an eine andere Stelle weitergeleitet werden.


Komponente mit Formular .[#toc-component-with-form]
===================================================

Eine andere Möglichkeit besteht darin, eine neue [Komponente |application:components] zu erstellen, die ein Formular enthält. Dies gibt uns die Möglichkeit, das Formular auf eine bestimmte Art und Weise zu rendern, z. B. weil die Komponente eine Vorlage enthält.
Oder wir können Signale für die AJAX-Kommunikation und das Laden von Informationen in das Formular verwenden, z. B. für die automatische Vervollständigung usw.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// Elemente zum Formular hinzufügen

		$form->addSubmit('send', 'Absenden');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// Verarbeitung des Formulars
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// Ereignisaufruf
		$this->onSave($this, $values);
	}
}
```

Als Nächstes erstellen wir die Fabrik, die diese Komponente produzieren wird. [Schreiben |application:components#Components with Dependencies] Sie einfach [seine Schnittstelle |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

Und fügen Sie der Konfigurationsdatei hinzu:

```neon
services:
	- EditControlFactory
```

Jetzt können wir die Fabrik anfordern und sie im Präsentator verwenden:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// oder auf das Ergebnis der Bearbeitung umleiten, z.B.:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Bewährte Praktiken}}
