Začínáme s Tracy
****************

<div class=perex>

Knihovna Tracy, která zdomácněla pod jménem *Laděnka*, je užitečnou každodenní pomocnicí PHP programátora. Pomůže vám:

- rychle odhalit a opravit chyby
- logovat chyby
- vypisovat proměnné
- měřit čas skriptů a databázových dotazů
- sledovat paměťové nároky

</div>


PHP je jazyk na sekání těžko odhalitelných chyb jako stvořený, neboť dává vývojářům značnou volnost. O to cennější je ladící nástroj Tracy. Mezi diagnostickými nástroji pro PHP představuje naprostou špičku. Pokud se dnes setkáváte s Laděnkou poprvé, tak věřte, že váš život se začne dělit na ten před Laděnkou a ten s ní. Vítejte v té lepší části!


Instalace
=========

Nejlepší způsob, jak nainstalovat Tracy je [stáhnout nejnovější balíček](https://github.com/nette/tracy/releases), nebo použit Composer:

```shell
composer require tracy/tracy
```

Můžete si také stáhnout celý balíček jako soubor [tracy.phar |https://github.com/nette/tracy/releases].


Použití
=======

*Laděnku* aktivujeme snadno. Stačí přidat do kódu, nejlépe hned za načtení knihovny (např. `require 'vendor/autoload.php'`) a dříve než se odešle jakýkoliv výstup, následující:

```php
use Tracy\Debugger;

Debugger::enable();
```

První, čeho si můžete na stránce všimnout, Tracy Bar.

(Pokud nic nevidíte, znamená to, že Tracy běží v produkčním režimu. Tracy je z bezpečnostních důvodů viditelná pouze na localhost.
Můžete vynutit, aby Tracy běžela ve vývojovém režimu předáním `Debugger::DEVELOPMENT` jako prvního parametru metody `enable()`.)

`enable()` změní úroveň hlášených chyb na E_ALL.


Tracy Bar
=========

Tracy Bar je plovoucí panel, který se zobrazí v pravém dolním rohu stránky. Můžeme jej přesouvat myší a po znovunačtení stránky si bude pamatovat svou pozici.

[* tracy-bar.png *]:https://nette.github.io/tracy/tracy-debug-bar.html

Do Tracy Baru lze přidávat další užitečné panely. Řadu jich najdete v [doplňcích |https://componette.org], nebo si dokonce [můžete napsat vlastní |extensions].

Pokud nechcete zobrazovat Tracy Bar, nastavte:

```php
Debugger::$showBar = false;
```


Vizualizace chyb a výjimek
==========================

Jistě dobře víte, jak PHP oznamuje chyby: do zdrojového kódu stránky vypíše něco takového:

/--pre .{font-size: 90%}
<b>Parse error</b>:  syntax error, unexpected '}' in <b>HomepagePresenter.php</b> on line <b>15</b>
\--

nebo při nezachycené výjimce:

/--pre .{font-size: 90%}
<b>Fatal error</b>:  Uncaught Nette\MemberAccessException: Call to undefined method Nette\Application\UI\Form::addTest()? in /sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php:100
Stack trace:
#0 /sandbox/vendor/nette/utils/src/Utils/Object.php(75): Nette\Utils\ObjectMixin::call(Object(Nette\Application\UI\Form), 'addTest', Array)
#1 /sandbox/app/forms/SignFormFactory.php(32): Nette\Object-&gt;__call('addTest', Array)
#2 /sandbox/app/presenters/SignPresenter.php(21): App\Forms\SignFormFactory-&gt;create()
#3 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(181): App\Presenters\SignPresenter-&gt;createComponentSignInForm('signInForm')
#4 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(139): Nette\ComponentModel\Container-&gt;createComponent('signInForm')
#5 /sandbox/temp/cache/latte/15206b353f351f6bfca2c36cc.php(17): Nette\ComponentModel\Co in <b>/sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php</b> on line <b>100</b><br />
\--

V takovém výpisu se zorientovat není zrovna snadné. Pokud zapneme *Laděnku*, chyba nebo výjimka se zobrazí dočista v jiné podobě:


[* tracy-exception.png *]:https://nette.github.io/tracy/tracy-exception.html *** *Nezachycená výjimka v provedení Tracy*


Chybová zpráva doslova křičí. Vidíme část zdrojového kódu se zvýrazněným řádkem, kde k chybě došlo a informace *Call to undefined method Nette\Http\User::isLogedIn()* srozumitelně vysvětluje, o jakou chybu se jedná. Celá stránka je navíc živá, můžeme se proklikávat k větším podrobnostem. [Zkuste si to |https://nette.github.io/tracy/tracy-exception.html].

A víte co? Tímto způsobem zachytí a zobrazí i fatální chyby. Bez nutnosti instalovat jakékoliv rozšíření.


[* tracy-error.png *]:https://nette.github.io/tracy/tracy-error.html


Chyby jako překlep v názvu proměnné nebo pokus o otevření neexistujícího souboru generují hlášení úrovně E_NOTICE nebo E_WARNING. Ty lze v grafice stránky snadno přehlédnout, dokonce nemusí být viditelná vůbec (leda pohledem do kódu stránky).

[* tracy-notice2.png *]:https://nette.github.io/tracy/tracy-debug-bar.html

Nebo mohou být zobrazeny stejně jako chyby:

```php
Debugger::$strictMode = true;
Debugger::$strictMode = true; // zobraz všechny chyby
Debugger::$strictMode = E_ALL & ~E_DEPRECATED & ~E_USER_DEPRECATED; // všechny chyby kromě deprecate oznámení
```

[* tracy-notice.png *]:https://nette.github.io/tracy/tracy-notice.html

Abychom odhalili i překlepy při přiřazení do proměnné objektu, použijeme [traitu Nette\SmartObject |doc:smartobject].


Produkční režim a logování chyb
===============================

Jak vidíte, Laděnka je poměrně výřečná, což lze ocenit ve vývojovém prostředí, zatímco na produkčním serveru by to způsobilo hotové neštěstí. Tam se totiž žádné ladící informace vypsat nesmí. Laděnka proto disponuje autodetekcí prostředí a pokud příklad spustíme na ostrém serveru, chyba se místo zobrazení zaloguje a návštěvník uvidí jen uživatelsky srozumitelnou hlášku:

[* tracy-error2.png *]:https://nette.github.io/tracy/tracy-production.html

Produkční režim potlačí zobrazování všech ladících informacích, které posíláme ven pomocí [dump() |dumper] nebo [Debugger::fireLog() |FireLogger], a samozřejmě také všech chybových zpráv, které generuje PHP. Pokud jste tedy v kódu zapomněli nějaké `dump($obj)`, nemusíte se obávat, na produkčním serveru se nic nevypíše.

K nastavování režimu se používá první parametr metody `Debugger::enable()`. Režim lze napevno nastavit konstantou `Debugger::PRODUCTION` nebo `Debugger::DEVELOPMENT`. Další možnost je, že bude vývojový režim zapnutý při přístupu z dané IP adresy s danou hodnotou `tracy-debug` cookie. Používá se syntaxe `hodnota-cookie@ip-adresa`.

Pokud jej neuvedeme, má výchozí hodnotu `Debugger::DETECT` a v takovém případě se detekuje režim podle IP adresy serveru - je-li dostupný přes veřejnou IP adresu, běží v produkčním režimu, je-li na lokální, tak ve vývojářském. V drtivé většině případů tak není potřeba režim nastavovat a správně se rozezná podle toho, jestli aplikaci spouštíme na svém lokálním serveru nebo v ostrém provozu.

V produkčním režimu Laděnka automaticky všechny chyby a zachycené výjimky zaznamenává do textového logu. Pokud neurčíme jinak, půjde o soubor `log/error.log`. Logování chyb je přitom nesmírně užitečné. Představte si, že všichni uživatelé vaší aplikace jsou vlastně betatesteři, kteří zdarma odvádějí špičkovou práci v hledání chyb a vy byste udělali hloupost, kdybyste jejich cenné reporty zahodili bez povšimnutí do odpadkového koše.

Pokud potřebujeme zalogovat vlastní zprávu nebo vámi zachycenou výjimku, použijeme k tomu metodu `log()`:

```php
Debugger::log('Doslo k necekane chybe'); // textová zpráva

try {
	kritickaOperace();
} catch (Exception $e) {
	Debugger::log($e); // logovat lze i výjimku
	// nebo Debugger::log($e, Debugger::ERROR) odešle i e-mailovou notifikaci
}
```

Jiný adresář pro logování chyb lze nastavit druhým parametrem metody enable():

```php
Debugger::enable(Debugger::DETECT, __DIR__ . '/mylog');
```

Pokud chcete, aby Tracy logovala PHP chyby jako `E_NOTICE` nebo `E_WARNING` s podrobnými informacemi (HTML report), nastavte `Debugger::$logSeverity`:

```php
Debugger::$logSeverity = E_NOTICE | E_WARNING;
```

Pro skutečného profíka je error log klíčovým zdrojem informací a chce být ihned informován o každé nové chybě. Laděnka mu v tom vychází vstříc, umí totiž o novém záznamu v logu informovat e-mailem. Kam odesílat emaily určíme proměnnou $email:

```php
Debugger::$email = 'admin@example.com';
```

Pokud používáte celý Nette Framework, lze toto a další nastavit v [konfiguračním souboru |doc:configuring].

Aby vám však nezaplavila e-mailovou schránku, pošle vždy **pouze jednu zprávu** a vytvoří soubor `email-sent`. Vývojář po přijetí e-mailové notifikace zkontroluje log, opraví aplikaci a smaže monitorovací soubor, čímž se opět aktivuje odesílání e-mailů.


Otevírání v editoru
===================

Při zobrazení chybové stránky lze kliknout na jména souborů a ty se otevřou ve vašem editoru s kurzorem na příslušné řádce. Také lze soubory vytvářet (akce `create file`) nebo v nich opravovat chyby (akce `fix it`). Aby tak fungovalo, stačí [nakonfigurovat prohlížeč a systém |open-files-in-ide].


Podporované verze PHP
=====================

| Tracy     | kompatibilní s PHP
|-----------|-------------------
| Tracy 2.8 | PHP 7.2 – 8.0
| Tracy 2.6 – 2.7 | PHP 7.1 – 8.0
| Tracy 2.5 | PHP 5.4 – 7.3
| Tracy 2.4 | PHP 5.4 – 7.2


Porty
=====

Toto je seznam neoficiálních portů pro další frameworky a CMS:

- [Drupal 7](https://www.drupal.org/project/traced)
- Laravel framework: [recca0120/laravel-tracy](https://github.com/recca0120/laravel-tracy), [whipsterCZ/laravel-tracy](https://github.com/whipsterCZ/laravel-tracy)
- [OpenCart](https://github.com/BurdaPraha/oc_tracy)
- [ProcessWire CMS/CMF](https://github.com/adrianbj/TracyDebugger)
- [Slim Framework](https://github.com/runcmf/runtracy)
- Symfony framework: [kutny/tracy-bundle](https://github.com/kutny/tracy-bundle), [VasekPurchart/Tracy-Blue-Screen-Bundle](https://github.com/VasekPurchart/Tracy-Blue-Screen-Bundle)
- [Wordpress](https://github.com/ktstudio/WP-Tracy)

{{composer: tracy/tracy}}
