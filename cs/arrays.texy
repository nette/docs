Práce s poli - Nette\Utils\Arrays
*********************************

.[perex]
[Nette\Utils\Arrays |api:] je statická třída obsahující užitečné funkce pro práci s poli.


Všechny příklady předpokládají vytvořený alias:

/--php
use Nette\Utils\Arrays;
\--


get($array, $key, $default=null) .[method]
------------------------------------------

Vrací prvek `$array[$key]`. Pokud neexistuje, vyhodí buď výjimku `Nette\InvalidArgumentException`, nebo je-li uveden třetí parametr `$default`, vrátí ten.

/--php
// pokud $array['foo'] neexistuje, vyhodí výjimku
$value = Arrays::get($array, 'foo');

// pokud $array['foo'] neexistuje, vrátí 'bar'
$value = Arrays::get($array, 'foo', 'bar');
\--

Klíčem `$key` může být i pole.

/--php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrátí 'red'
\--



getRef(&$array, $key) .[method]
-------------------------------

Získá referenci na zadaný prvek pole. Pokud prvek neexistuje, bude vytvořen s hodnotou null.

/--php
$valueRef = & Arrays::getRef($array, 'foo');
// vrátí referenci na $array['foo']
\--

Stejně jako funkce [get() | #get()] umí pracovat s vícerozměrnými poli.

/--php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// vrátí referenci na $array['color']['favorite']
\--


grep($array, $pattern, $flags=null) .[method]
---------------------------------------------

Vrátí pouze ty prvky pole, jejichž hodnota odpovídá regulárnímu výrazu `$pattern`. Chyba při kompilaci nebo zpracování výrazu vyhodí výjimku `Nette\RegexpException`.

/--php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// vrátí pouze prvky pole tvořené číslicemi
\--

Jako příznak `$flags` můžeme uvést konstantu `PREG_GREP_INVERT`, což invertuje výběr.


searchKey($array, $key) .[method]
---------------------------------

Vrátí pozici daného klíče v poli. Pozice je číslována od 0. V případě, že klíč nebude nalezen, vrátí funkce `false`.

/--php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::searchKey($array, 'first'); // vrátí 0
\--



insertAfter(&$array, $key, $inserted) .[method]
-----------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` hned za prvek s klíčem `$key`. Pokud klíč v poli není, vkládá se na konec.

/--php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
\--


insertBefore(&$array, $key, $inserted) .[method]
------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` před prvek s klíčem `$key`. Pokud klíč v poli není, vkládá se na začátek.

/--php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
\--


mergeTree($array1, $array2) .[method]
-------------------------------------

Rekurzivně sloučí dvě pole. Hodí se např. ke slučování stromových struktur. Při slučování se řídí stejnými pravidly jako operátor&nbsp;`+` aplikovaný na pole, tj. k prvnímu poli přidává dvojice klíč/hodnota z druhého pole a v případě kolize klíčů ponechá hodnotu z prvního pole.

/--php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
\--

Hodnoty z druhého pole jsou vždy přidány na konec prvního. Jako trošku matoucí se může zdát zmizení hodnoty `10` z druhého pole. Je třeba si uvědomit, že tato hodnota a stejně tak hodnota `5` v poli prvním mají přiřazený stejný numerický klíč `0`, proto ve výsledném poli je jen prvek z prvního pole.


renameKey(&$array, $oldKey, $newKey) .[method]
----------------------------------------------

Přejmenuje klíč v poli.

/--php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
\--


flatten(array $array, bool $preserveKeys = false): array .[method]
------------------------------------------------------------------

Sjednotí víceúrovňové pole do plochého.

/--php
$array = Arrays::flatten([
	2 => ['a', ['b']],
	4 => ['c', 'd'],
	'e',
]);
// $array = ['a', 'b', 'c', 'd', 'e'];
\--


isList(array $array): bool .[method]
------------------------------------

Ověří, zda-li je pole indexované podle numerických klíčů, a.k.a list.

/--php
Arrays::isList(['a', 'b', 'c'])); // true
Arrays::isList([4 => 1, 2, 3])); // false
Arrays::isList(['a' => 1, 'b' => 2])); // false
\--


normalize(array $arr, string $filling = null): array .[method]
--------------------------------------------------------------

Nahradí numerické klíče v poli za hodnotu v proměnné `$filling`.

/--php
$array = Arrays::normalize(['first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
\--

/--php
$array = Arrays::normalize(['first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
\--


pick(array &$arr, string|int $key, mixed $default = null): mixed .[method]
--------------------------------------------------------------------------

Vráti hodnotu prvku v poli, pokud neexistuje vyhazuje výjmku nebo vrací vyplněnou hodnotu v `$default`.

/--php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
\--


some(array $arr, callable $callback): bool .[method]
----------------------------------------------------

Otestuje, zda-li nějaký prvek v poli odpovídá podmínce v `$callback`.

/--php
$array = ['foo', 'bar', 'baz'];
// have some bar???
$res = Arrays::some($array, function($value, $key, $arr) { return $v === 'bar'; });
// $res = true
\--


every(array $arr, callable $callback): bool .[method]
-----------------------------------------------------

Otestuje, zda-li všechny prvky v poli odpovídají podmínce v `$callback`.

/--php
$array = ['foo', 'bar', 'baz'];
// have only bar???
$res = Arrays::some($array, function($value, $key, $arr) { return $v === 'bar'; });
// $res = false
\--


map(array $arr, callable $callback): array .[method]
----------------------------------------------------

Applikuje `$callback` na všechny prvky v poli.

/--php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, function($value, $key, $arr) { return $v . $v; });
// $res = ['foofoo', 'barbar', 'bazbaz']
\--


{{composer: nette/utils}}
