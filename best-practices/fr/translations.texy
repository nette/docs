Traduction de formulaires et de modèles
***************************************

.[perex]
Lors de la création d'une application multilingue, vous aurez probablement besoin de rendre la même page ou le même formulaire dans plusieurs langues.

Le Nette Framework définit à cet effet une interface de traduction [api:Nette\Localization\Translator], qui possède une seule méthode `translate()`. Cette méthode reçoit un fichier `$message`, qui est généralement une chaîne de caractères, et tout autre paramètre. Son rôle est de renvoyer la chaîne traduite.

Il n'y a pas d'implémentation par défaut dans Nette, vous pouvez choisir parmi plusieurs solutions prêtes à l'emploi en fonction de vos besoins, que vous trouverez sur [Componette |https://componette.org/search/localization]. Consultez leur documentation pour apprendre à configurer le traducteur.

Vous pouvez ensuite obtenir le traducteur dans votre code en le passant en utilisant l'[injection de dépendances |dependency-injection:passing-dependencies].


Traduction de formulaires .[#toc-form-translation]
--------------------------------------------------

Les [formulaires |forms:] prennent en charge l'impression du texte via un traducteur. Vous le définissez à l'aide de la méthode `setTranslator()`:

```php
$form->setTranslator($translator);
```

À partir de ce moment, toutes les étiquettes mais aussi tous les messages d'erreur ou les éléments des boîtes de sélection sont traduits dans une autre langue.

Pour les contrôles de formulaire individuels, il est toujours possible de définir un autre traducteur ou de désactiver complètement la traduction à l'aide de la valeur `null`:

```php
$form->addSelect('carModel', 'Model:', $cars)
	->setTranslator(null);
```

Pour les [règles de validation |forms:validation], des paramètres spécifiques sont également transmis au traducteur, par exemple pour la règle :

```php
$form->addPassword('password', 'Password:')
	->addCondition($form::MinLength, 'Password must be at least %d characters long', 8);
```

le traducteur est appelé avec les paramètres suivants :

```php
$translator->translate('Password must be at least %d characters long', 8);
```

et peut ainsi choisir la forme plurielle correcte du mot `characters` en fonction du nombre.


Traduction du modèle .[#toc-template-translation]
-------------------------------------------------

Dans les modèles [Latte |latte:], vous pouvez ajouter un traducteur en utilisant la méthode `setTranslator()`:

```php
protected function beforeRender(): void
{
	// ...
	$this->template->setTranslator($translator);
}
```

Ensuite, le traducteur peut être utilisé comme filtre `|translate`:

```latte
<a href="basket">{='Basket'|translate}</a>
<span>{$item|translate}</span>
```

Il y a aussi une balise underscore :

```latte
<a href="basket">{_'Basket'}</a>
<span>{_$item}</span>
```

Il existe une balise de paire `{translate}` pour la traduction de certaines parties du modèle (depuis Latte 2.11, on utilisait auparavant la balise `{_}` ) :

```latte
<a href="order">{translate}Order{/translate}</a>
```

{{priority: -1}}
{{sitename: Meilleures pratiques}}
