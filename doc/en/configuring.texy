Configuring
***********

/--div .[perex]
Nette application is easily configured NEON files. We'll talk about:

- how to configure your application using NEON files
- how to handle production and development modes
- how to create the system container
- how to create and use your own container extensions
\--

Configuration in Nette

The application settings can be configure in [Configurator | #Konfigurátor]. We have to create one or [multiple NEON files | #configuration file].


Configurator
============


[Configurator | api:Nette\Configurator] is class used to set up the application, we will use it in `bootstrap.php` located in folder `app/`.


Development mode
----------------

Development mode is automatically active when we develop on *localhost*. If you want to enable it even outside of it, for example, programmers accessing a specific IP address, we will use `setDebugMode()`:

/--php
$configurator->setDebugMode('23.75.345.200'); // one or more IP addresses
\--


Even more secured is the combination of IP address and cookie. We will store a secret token into the `tracy-debug' cookie, e.q `secret1234`, the development mode is activated for programmers with this IP and set up cookie.

/--php
$configurator->setDebugMode('secret1234@23.75.345.200');
\--

The development mode can be deactivated by:

/--php
$configurator->setDebugMode(false);
\--


Enable Tracy
------------

Turn on great debugging tool [Tracy | tracy:], it'll store all exceptions files into specified folder (`__DIR__ . '/../log'`).

/--php
$configurator->enableTracy(__DIR__ . '/../log');
\--


Caching
-------

The configuration is loaded and processed only once, and the result is cached, which greatly accelerates the application. Therefore, first set the `setTempDirectory()` path where the cache will be saved.

/--php
$configurator = new Nette\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');
\--

RobotLoader
-----------

We would like to load files into application automatically using [RobotLoader], so we have to register it.

/--php
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
\--

There is alternative way to load files over [Composer | composer].

Configuration file
------------------

We are almose there, just add the configuration file `config.neon`, located in the `app/config` folder, calling `addConfig($file)`:

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
\--

Method `addConfig` can be called multiple times to add multiple files.


Configuration parameters
------------------------

We can add parameters into our application over method `addParameters()`.

/--php
$configurator->addParameters([
	'foo' => 'bar',
	'baz' => '%tempDir%',
]);
\--

It's very useful also in case of environment parameters.

/--php
$configurator->addParameters([
	'env' => $_ENV,
]);
\--


Framework configuration
=======================

Configuration is usually written in NEON format. Have fun trying out the syntax at http://ne-on.org.
Many features of Nette Framework can be set up in configuration file

- sessions
- application
- database
- debugger
- routing
- security
- mailing
- forms
- templates
- custom services
- Dependency Injection
- custom parameters


Sessions
--------

Here you can set all [directives |php:session.configuration] (in camelCase format).

/-- neon
	session:
		autoStart: true  # default is smart
		expiration: 10 days
		name: ...
		...
\--

.[tip]
`autoStart: smart` is recommended. It automatically starts the session only if it already exists.

Read more on [session configuration | sessions#Session configuration].


Application
-----------

/--neon
	application:
		debugger: true  # debugger bar panel
		catchExceptions: %productionMode%
		errorPresenter: Front:Error

		# mapping between presenter name and presenter class
		mapping:
			Front: App\*Module\*Presenter
\--


Routing
-------

/--neon
	routing:
		debugger: true  # debugger bar panel
		routes:
				index.php: Dashboard:default
				'<presenter>/<action>[/<id>]': Dashboard:default
\--

[Routes |routing#route-for-prettier-urls] are in `mask: action` format.


HTTP headers
------------

/--neon
	http:
		frames: ... # ovlivňuje hlavičku X-Frame-Options
\--

For security reasons Nette Framework sends HTTP header `X-Frame-Options: SAMEORIGIN` by default, so that the page can be embedded in iframe only from pages on the same domain. This behavior may be unwanted in certain situations (for example if you are developing a facebook application). You can override this setting by `frames: yes`, `frames: http://allowed-host.com` or `frames: no`.


HTTP proxies
------------

You can define your http proxy, so that HTTP request's remote address and remote host will be correct.

/--neon
	http:
		proxy: 127.0.0.1  # ip address, range, hostname or array of these values
\--


Security
--------

By filling in `users` option you create `SimpleAuthenticator`, by defining `roles` or `resources` you create `Nette\Security\Permission` authorizator. More in [User Authorization and Privileges |access-control].

/--neon
	security:
		debugger: true  # debugger bar panel

		users:
			johndoe: secretpassword

		roles:
			guest:
			member:
			admin: [member]  # admin extends member

		resources:
			file:
\--


Mailing
-------

Default mailer is `SendmailMailer`. By setting `smtp` you activate `SmtpMailer`.

/--neon
	mail:
		smtp: true  # use SmtpMailer instead of SendmailMailer
		# optional settings
		host: ...
		port: ...
		username: ...
		password: ...
		secure: # possible values are ssl, tls or null
		timeout: ...
\--


Database
--------

You can define multiple database connections, if you do so you can set which one will be [automatically injected |configuring#auto-wiring] to your services by the `autowired` option. The following code shows how to set up one connection called `default`.

/--neon
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false  # debugger bar panel
			explain: false   # explain queries in debugger bar
			reflection: discovered  # or static or classname, default is discovered
			autowired: true
\--

This creates service `@nette.database.default` and sets reflection and cache for you.


Forms
-----

You can change default validation error messages.

/--neon
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
\--


Latte
-----

You can turn on and off XHTML rendering mode and register custom macros. Custom macros may be passed either as a class name or as a service reference. The default called method is `install`, you may change it by appending a double colon and a custom method name.

/--neon
	latte:
		xhtml: yes  # default is no
		macros:
			- App\MyLatteMacros::register  # static method, classname or callable
			- @App\MyLatteMacrosFactory    # service with install method
			- @App\MyLatteMacrosFactory::register # service with register method

	services:
		- App\MyLatteMacrosFactory
\--


DI container
------------

/--neon
	di:
		debugger: true  #debugger bar panel
\--


Tracy debugger
--------------

/--neon
	tracy:
		email: webmaster@example.com  # for sending error logs
		strictMode: true
		editor: ...
		browser: ...

		bar:  # debugger bar panels
			- Nette\Bridges\DITracy\ContainerPanel  # alias of DI container bar
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)

		blueScreen:  # blue screen panels
			- DoctrinePanel::renderException
\--


Low-level modifications
-----------------------

All these settings affect final DI container. The `alteration` flag is informative and says that we only alter an existing service. If you need to tune these services by yourself, you can redefine them:

/--neon
services:
	mail.mailer:
		factory: MySmtpMailer
		alteration: yes

	application.presenterFactory:
		factory: MyPresenterFactory
		alteration: yes
\--


Custom services
---------------

/--code neon
services:
	database: Nette\Database\Connection(%dsn%, %user%, %password%)

	# or multi-lines
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)

	# or more multi-lines :-)
	database:
		class: Nette\Database\Connection
		arguments: [%dsn%, %user%, %password%]
\--

Generates:

/--php
function createServiceDatabase()
{
	return new Nette\Database\Connection(
		$this->parameters['dsn'],
		$this->parameters['user'],
		$this->parameters['password']
	);
}
\--


Setup
-----

/--code neon
services:
	database:
		factory: Nette\Database\Connection(%dsn%, %user%, %password%)
		setup:
			- setCacheStorage(@cacheStorage)

\--

Generates:

/--php
function createServiceDatabase()
{
	$service = new Nette\Database\Connection(...);
	$service->setCacheStorage($this->cacheStorage);
	return $service;
}
\--

Autowiring feature adds dependencies automatically, so they don't even have to be mentioned:

/--code neon
setup:
	- setCacheStorage
\--

In case the `cacheStorage` service does not exist, it is possible to use a result of a call as a parameter:

/--code neon
setup:
	- setCacheStorage( Factory::createStorage() )

	# or a method of other service:
	- setCacheStorage( @factory::createStorage() )
\--

Alternatively a newly created class instance:

/--code neon
setup:
	- setCacheStorage( Nette\Caching\Storages\FileStorage(%tempDir%) )
\--

Generates:

/--php
$service->setCacheStorage(new Nette\Caching\Storages\FileStorage(...));
\--

You can also set a value of a property:

substitutions
/--code neon
setup:
	- $substitutions( [db: test] )
\--

Generates:

/--php
$service->substitutions = ['db' => 'test'];
\--

Full example:

/--code neon
parameters:
	database:
		driver: mysql
		host: localhost
		dbname: test
		user: jim
		password: beam
		substitutions:
			db: test

services:
	database:
		factory: Nette\Database\Connection(
			'%database.driver%:host=%database.host%;dbname=%database.dbname%',
			%database.user%, %database.password%, null,
			Nette\Database\Reflection\DiscoveredReflection()
		)
		setup:
			- setCacheStorage
			- $substitutions( %database.substitutions% )

\--


Anonymous services
------------------

Time after time there are services that are in fact not referenced anywhere else in config files. Naming these services in this case is not necessary. To define an anonymous service, use the following syntax:

/--code neon
services:
	- Simple\Service

	-
		factory: Complex\Service
		setup:
			- setLang(%lang%)
\--

To refer to such anonymous service you will need to use the fully qualified class name instead.

/--code neon
services:
	router: @App\RouterFactory::createRouter
\--

Keep in mind that from a nature of anonymous services, it is not possible to register more than one of the same type, because it would lead to an ambiguity.



Auto-wiring
-----------

Auto-wiring feature can automatically pass dependencies into constructor and methods of the service. It uses typehinting and `@return` annotations. There can be only one service matching the type in the container, otherwise an exception is thrown.

To define more than one service of the same type we need to exclude them from auto-wiring:

/--code neon
services:
	cacheStorage:
		factory: Nette\Caching\Storages\FileStorage(%tempDir%)

	tempCacheStorage:
		factory: Nette\Caching\Storages\DevNullStorage
		autowired: no

\--


When modifying the Nette Framework's core services we need to make sure the container is aware of the classes we want to use. That means using fully qualified class names in `@return` annotations or set the FQ class name with `class` entry.


Multiple configuration files
============================

Use `includes` section to add more configuration files.

/--code neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

Configuration merging process assigns the highest priority to the file containing `includes` section and the lowest priority to the first included file.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>result</th>
</tr>
<tr>
	<td>
/--code neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--code neon
items:
	- 3
\--
	</td>
	<td>
/--code neon
items:
	- 1
	- 2
	- 3
\--
	</td>
</tr>
</table>

To prevent merging of a certain array use exclamation mark right after the name of the array:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>result</th>
</tr>
<tr>
	<td>
/--code neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--code neon
items!:
	- 3
\--
	</td>
	<td>
/--code neon
items:
	- 3
\--
	</td>
</tr>
</table>

{{composer: nette/nette}}
