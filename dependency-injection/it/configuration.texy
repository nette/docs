Configurazione del contenitore DI
*********************************

.[perex]
Panoramica delle opzioni di configurazione del contenitore Nette DI.


File di configurazione
======================

Il contenitore Nette DI può essere controllato facilmente tramite file di configurazione. Di solito sono scritti in [formato NEON |neon:format]. Per la modifica si consiglia di utilizzare [editor che supportino |best-practices:editors-and-tools#ide-editor] questo formato.

<pre>
"decorator .[prism-token prism-atrule]":[#Decorator]: 	"Decoratore .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"Contenitore DI .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Extensions]: 	"Installa estensioni DI aggiuntive .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Including files]: 	"File di inclusione .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#Parameters]: 	"Parametri .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Registrazione automatica dei servizi .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Servizi .[prism-token prism-comment]"
</pre>

Per scrivere una stringa contenente il carattere `%`, you must escape it by doubling it to `%%`. .[note]


Parametri .[#toc-parameters]
============================

È possibile definire dei parametri che possono essere utilizzati come parte delle definizioni dei servizi. Questo può aiutare a separare i valori che si desidera modificare più regolarmente.

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

È possibile fare riferimento al parametro `foo` tramite `%foo%` in qualsiasi altro punto del file di configurazione. Possono anche essere usati all'interno di stringhe come `'%wwwDir%/images'`.

Non è necessario che i parametri siano solo stringhe, possono anche essere valori di array:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Si può fare riferimento a una singola chiave come `%mailer.user%`.

Se è necessario ottenere il valore di un parametro nel codice, ad esempio nella classe, passarlo a questa classe. Per esempio, nel costruttore. Non esiste un oggetto di configurazione globale che possa essere interrogato dalle classi per ottenere i valori dei parametri. Ciò sarebbe contrario al principio dell'iniezione di dipendenza.


Servizi .[#toc-services]
========================

Si veda il [capitolo separato |services].


Decoratore .[#toc-decorator]
============================

Come modificare in blocco tutti i servizi di un certo tipo? È necessario chiamare un certo metodo per tutti i presentatori che ereditano da un particolare antenato comune? Ecco dove nasce il decoratore.

```neon
decorator:
	# per tutti i servizi che sono istanze di questa classe o interfaccia
	App\Presenters\BasePresenter:
		setup:
			- setProjectId(10)     # chiama questo metodo
			- $absoluteUrls = true # e imposta la variabile
```

Il decoratore può essere usato anche per impostare [i tag |services#Tags] o attivare la [modalità inject |services#Inject Mode].

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

Impostazioni tecniche del contenitore DI.

```neon
di:
	# mostra il DIC nella barra Tracy?
	debugger: ...        # (bool) predefinito a true

	# tipi di parametri che non devono mai essere autocablati
	excluded: ...        # (string[])

	# la classe da cui eredita il contenitore DI
	parentClass: ...     # (string) predefinita a Nette\DI\Container
```


Esportazione di metadati .[#toc-metadata-export]
------------------------------------------------

Anche la classe contenitore DI contiene molti metadati. È possibile ridurli riducendo l'esportazione dei metadati.

```neon
di:
	export:
		# per esportare i parametri?
		parameters: false   # (bool) predefinito a true

		# esportare i tag e quali?
		tags:                # (string[]|bool) il valore predefinito è tutti
			- event.subscriber

		# esporta i dati per il cablaggio automatico e quali?
		types:              # (string[]|bool) il valore predefinito è all
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

Se non si usa l'array `$container->parameters`, si può disabilitare l'esportazione dei parametri. Inoltre, si possono esportare solo i tag attraverso i quali si ottengono servizi con il metodo `$container->findByTag(...)`.
Se non si chiama affatto il metodo, si può disabilitare completamente l'esportazione dei tag con `false`.

È possibile ridurre in modo significativo i metadati per il [cablaggio automatico |autowiring], specificando le classi utilizzate come parametro del metodo `$container->getByType()`.
E ancora, se non si chiama affatto il metodo (o solo in [bootstrap |application:bootstrap] per ottenere `Nette\Application\Application`), si può disabilitare completamente l'esportazione con `false`.


Estensioni .[#toc-extensions]
=============================

Registrazione di altre estensioni DI. In questo modo si aggiunge, ad esempio, l'estensione DI `Dibi\Bridges\Nette\DibiExtension22` con il nome `dibi`:

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Poi la configuriamo nella sua sezione chiamata anche `dibi`:

```neon
dibi:
	host: localhost
```

Si può anche aggiungere una classe di estensione con parametri:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Includere i file .[#toc-including-files]
========================================

È possibile inserire file di configurazione aggiuntivi nella sezione `includes`:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

Il nome `parameters.php` non è un refuso, la configurazione può essere scritta anche in un file PHP, che la restituisce come array:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Se all'interno dei file di configurazione compaiono elementi con le stesse chiavi, questi verranno [sovrascritti o uniti |#Merging] nel caso di array. Il file incluso successivamente ha una priorità maggiore rispetto al precedente. Il file in cui è elencata la sezione `includes` ha una priorità maggiore rispetto ai file inclusi in esso.


Ricerca .[#toc-search]
======================

L'aggiunta automatica di servizi al contenitore DI rende il lavoro estremamente piacevole. Nette aggiunge automaticamente i presentatori al contenitore, ma è possibile aggiungere facilmente qualsiasi altra classe.

Basta specificare in quali directory (e sottodirectory) devono essere cercate le classi:

```neon
search:
	# scegliete voi stessi i nomi delle sezioni
	myForms:
		in: %appDir%/Forms

	model:
		in: %appDir%/Model
```

Di solito, però, non vogliamo aggiungere tutte le classi e le interfacce, quindi possiamo filtrarle:

```neon
search:
	myForms:
		in: %appDir%/Forms

		# filtrare per nome di file (string|string[])
		files:
			- *Factory.php

		# filtrare per nome di classe (string|string[])
		classes:
			- *Factory
```

Oppure possiamo selezionare le classi che ereditano o implementano almeno una delle seguenti classi:


```neon
search:
	myForms:
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Si possono anche definire regole negative, cioè maschere di nomi di classi o antenati e, se sono conformi, il servizio non sarà aggiunto al contenitore DI:

```neon
search:
	myForms:
		exclude:
			classes: ...
			extends: ...
			implements: ...
```

I tag possono essere impostati per i servizi aggiunti:

```neon
search:
	myForms:
		tags: ...
```


Fusione .[#toc-merging]
=======================

Se elementi con le stesse chiavi appaiono in più file di configurazione, questi verranno sovrascritti o uniti nel caso di array. Il file incluso più tardi ha una priorità maggiore.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>risultato</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Per impedire l'unione di un determinato array, utilizzare il punto esclamativo subito dopo il nome dell'array:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>risultato</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>
