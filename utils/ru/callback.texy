Работа с callback'ами
*********************

.[perex]
[api:Nette\Utils\Callback] — это статический класс с функциями для работы с [PHP callback'ами |https://www.php.net/manual/en/language.types.callable.php].


Установка:

```shell
composer require nette/utils
```

Все примеры предполагают созданный псевдоним (alias):

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Проверяет, является ли переменная `$callable` действительным callback'ом. В противном случае выбрасывает `Nette\InvalidArgumentException`. Если `$syntax` равно true, функция только проверяет, что `$callable` имеет структуру callback'а, но не проверяет, действительно ли существует данный класс или метод. Возвращает `$callable`.

```php
Callback::check('trim'); // не выбрасывает исключение
Callback::check(['NonExistentClass', 'method']); // выбрасывает Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // не выбрасывает исключение
Callback::check(function () {}); // не выбрасывает исключение
Callback::check(null); // выбрасывает Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Преобразует PHP callback в текстовую форму. Класс или метод могут не существовать.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Возвращает рефлексию для метода или функции в PHP callback'е.

```php
$ref = Callback::toReflection('trim');
// $ref - это ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref - это ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Определяет, является ли PHP callback функцией или статическим методом.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Обратно распаковывает Closure, созданную с помощью `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
