Bağımlılık Enjeksiyonu Nedir?
*****************************

.[perex]
Bu bölüm size tüm Nette çerçevesinin temelini oluşturan ve kendi uygulamalarınızı yazarken uymanız gereken temel programlama uygulamalarını tanıtmaktadır. Bunlar temiz, anlaşılabilir ve bakımı yapılabilir kod yazmak için gereken temel bilgilerdir.

Bu kuralları öğrenir ve uygularsanız, çerçeve her adımda yanınızda olacaktır. Rutin görevleri sizin için halledecek ve mantığın kendisine odaklanabilmeniz için sizi olabildiğince rahat ettirecektir.

Burada göstereceğimiz ilkeler oldukça basittir. Endişelenmenizi gerektirecek bir şey yok.


İlk Programınızı Hatırlıyor musunuz? .[#toc-remember-your-first-program]
------------------------------------------------------------------------

Hangi dilde yazdığınızı bilmiyoruz, ancak PHP olsaydı muhtemelen şöyle bir şey olurdu:

```php
function toplami(float $a, float $b): float
{
	return $a + $b;
}

echo toplami(23, 1); // 24 yazdırır
```

Birkaç önemsiz kod satırı, ancak içlerinde pek çok anahtar kavram gizli. Değişkenler olduğunu görüyoruz. Kodun, örneğin fonksiyonlar gibi daha küçük birimlere ayrıldığını. Onlara girdi argümanları iletiyoruz ve onlar da sonuç döndürüyorlar. Eksik olan tek şey koşullar ve döngülerdir.

Bir fonksiyona girdi aktardığımız ve fonksiyonun bir sonuç döndürdüğü gerçeği, matematik gibi diğer alanlarda da kullanılan son derece anlaşılabilir bir kavramdır.

Bir fonksiyonun adı, parametrelerin listesi ve türleri ile son olarak geri dönüş değerinin türünden oluşan bir imzası vardır. Kullanıcılar olarak biz imzayla ilgileniriz; genellikle dahili uygulama hakkında bir şey bilmemiz gerekmez.

Şimdi bir fonksiyonun imzasının aşağıdaki gibi olduğunu düşünün:

```php
function toplami(float $x): float
```

Tek parametreli bir ekleme mi? Bu çok garip. Buna ne dersin?

```php
function toplami(): float
```

Bu gerçekten garip, değil mi? Bu fonksiyonun nasıl kullanıldığını düşünüyorsunuz?

```php
echo toplami(); // ne yazdırıyor?
```

Böyle bir koda baktığımızda kafamız karışır. Sadece yeni başlayanlar değil, yetenekli bir programcı bile böyle bir kodu anlamayacaktır.

Böyle bir fonksiyonun içinde gerçekte neye benzeyeceğini merak ediyor musunuz? Eklentileri nereden alırdı? Muhtemelen onları *bir şekilde* kendi başına alırdı, bunun gibi:

```php
function toplami(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

İşlevin gövdesinde diğer işlevlere (veya statik yöntemlere) gizli bağlar olduğu ortaya çıkıyor ve eklerin gerçekte nereden geldiğini bulmak için daha fazla araştırmamız gerekiyor.


Bu şekilde değil! .[#toc-not-this-way]
--------------------------------------

Az önce gösterdiğimiz tasarım, birçok olumsuz özelliğin özüdür:

- fonksiyon imzası eklentilere ihtiyaç duymuyormuş gibi davranıyordu, bu da kafamızı karıştırıyordu
- fonksiyonun diğer iki sayı ile nasıl hesaplanacağı hakkında hiçbir fikrimiz yok
- ekleri nereye götürdüğünü görmek için kodun içine bakmamız gerekti
- gizli bağları keşfettik
- tam olarak anlamak için bu bağları da keşfetmemiz gerekir

Peki girdileri tedarik etmek ekleme fonksiyonunun görevi midir? Elbette değildir.  Onun sorumluluğu sadece eklemektir.


Böyle bir kodla karşılaşmak istemeyiz ve kesinlikle yazmak da istemeyiz. Çözüm basit: temellere geri dönün ve sadece parametreleri kullanın:


```php
function toplami(float $a, float $b): float
{
	return $a + $b;
}
```


Kural #1: Parametreleri Kullanın .[#toc-rule-1-use-parameters]
--------------------------------------------------------------

En önemli kural şudur: **Fonksiyonların veya sınıfların ihtiyaç duyduğu tüm veriler onlara aktarılmalıdır**.

Bu kuralı bozarsak, kodu anlaşılır, temiz ve sürdürülebilir hale getirmek imkansız olacaktır.

Bunu takip edersek, gizli kısıtlamalar olmadan koda doğru yol alırız. Yalnızca yazan için değil, daha sonra okuyan herkes için anlaşılabilir bir koda doğru. Fonksiyonların ve sınıfların imzalarından her şeyin anlaşılabilir olduğu ve uygulamada gizli sırlar aramaya gerek olmadığı bir kod.

Bu argüman aktarma tekniğine teknik olarak **bağımlılık enjeksiyonu** denir.

(Bağımlılık enjeksiyonunu "bağımlılık enjeksiyon konteyneri" ile karıştırmayın; bu tamamen farklı bir şeydir ve konteynerleri bir [sonraki bölümde |container] ele alacağız).


Fonksiyonlardan Sınıflara .[#toc-from-functions-to-classes]
-----------------------------------------------------------

Peki sınıfların bununla ilişkisi nedir? Bir sınıf basit bir fonksiyondan daha karmaşık bir varlıktır, ancak 1. kural burada da geçerlidir. Sadece [argümanları aktarmanın daha fazla yolu |passing-dependencies] vardır. Örneğin, bir fonksiyonun durumuna oldukça benzer:

```php
class Matematik
{
	public function toplami(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Matematik;
echo $math->toplami(23, 1); // 24
```

Ya da diğer yöntemleri veya doğrudan kurucuyu kullanarak:

```php
class Toplami
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$toplami = new Toplami(23, 1);
echo $toplami->calculate(); // 24
```

Her iki örnek de bağımlılık enjeksiyonu ile tamamen uyumludur.


Gerçek Hayattan Örnekler .[#toc-real-life-examples]
---------------------------------------------------

Gerçek dünyada, sayıları toplamak için sınıflar yazmazsınız. Gerçek hayat örneklerine geçelim.

Bir blog makalesini temsil eden bir `Article` sınıfımız olsun:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// makaleyi veritabanına kaydet
	}
}
```

ve kullanım aşağıdaki gibi olacaktır:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

`save()` yöntemi makaleyi bir veritabanı tablosunda saklayacaktır. Bir aksaklık olmasaydı, [Nette Database |database:] kullanarak bunu uygulamak çocuk oyuncağı olurdu: `Article` [veritabanı |database:] bağlantısını, yani `Nette\Database\Connection` sınıf nesnesini nereden alıyor?

Görünüşe göre birçok seçeneğimiz var. Statik bir değişkenden alabilir. Ya da veritabanı bağlantısını sağlayacak sınıftan miras alabilir. Ya da singleton olarak adlandırılan bir sınıftan yararlanabilir. Ya da Laravel'de kullanılan sözde facade'lerden:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Harika, sorunu çözdük.

Yoksa biz mi?

[1. kuralı |#rule #1: use parameters] hatırlayın [: parametre kullanın |#rule #1: use parameters]: sınıfın ihtiyaç duyduğu tüm verileri onlara aktarmalıyız. Çünkü bunu yapmazsak ve kuralı ihlal edersek, gizli bağlarla dolu kirli kodlara, anlaşılmazlığa giden yola girmiş oluruz ve sonuçta bakımı ve geliştirilmesi eziyet olan bir uygulama ortaya çıkar.

`Article` sınıfının kullanıcısı, `save()` yönteminin makaleyi nerede sakladığı konusunda hiçbir fikre sahip değildir. Bir veritabanı tablosunda mı? Hangisinde, üretimde mi yoksa geliştirmede mi? Ve bu nasıl değiştirilebilir?

Kullanıcı `DB::insert()` yönteminin kullanımını bulmak için `save()` yönteminin nasıl uygulandığına bakmalıdır. Dolayısıyla, bu yöntemin bir veritabanı bağlantısını nasıl sağladığını bulmak için daha fazla araştırma yapması gerekir. Ve gizli bağlar oldukça uzun bir zincir oluşturabilir.

Gizli bağlar, Laravel cepheleri veya statik değişkenler temiz, iyi tasarlanmış kodda asla bulunmaz. Temiz ve iyi tasarlanmış kodda, argümanlar geçirilir:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Daha sonra göreceğimiz gibi, bir kurucu kullanmak daha da pratiktir:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Örneğin, bir veritabanına ihtiyaç duyan bir sınıf yazacaksanız, bunu nereden alacağınızı bulmayın, ancak size aktarılmasına izin verin. Belki bir yapıcıya veya başka bir yönteme parametre olarak. Bağımlılıkları beyan edin. Bunları sınıfınızın API'sinde gösterin. Anlaşılabilir ve öngörülebilir bir kod elde edeceksiniz.

Hata mesajlarını günlüğe kaydeden bu sınıfa ne dersiniz?

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Ne düşünüyorsunuz, [1 numaralı kurala |#rule #1: use parameters] uyduk mu [: parametreleri kullanın |#rule #1: use parameters]?

Biz yapmadık.

Sınıf, günlük dosyasını içeren dizin gibi anahtar bilgileri bir sabitten *alır*.

Örnek bir kullanıma bakın:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Uygulamayı bilmeden, mesajların nereye yazıldığı sorusuna cevap verebilir misiniz? Bu size LOG_DIR sabitinin varlığının çalışması için gerekli olduğunu gösterir mi? Ve farklı bir konuma yazan ikinci bir örnek oluşturabilir misiniz? Kesinlikle hayır.

Sınıfı düzeltelim:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Sınıf artık çok daha net, daha yapılandırılabilir ve dolayısıyla daha kullanışlı.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Ama umurumda değil! .[#toc-but-i-don-t-care]
--------------------------------------------

*"Bir Article nesnesi oluşturduğumda ve save() işlevini çağırdığımda, veritabanıyla uğraşmak istemiyorum, sadece yapılandırmada ayarladığım veritabanına kaydedilmesini istiyorum. "*

*"Logger kullandığımda, sadece mesajın yazılmasını istiyorum ve nerede olduğuyla uğraşmak istemiyorum. Bırakın global ayarlar kullanılsın. "*

Bunlar doğru yorumlar.

Örnek olarak, haber bültenleri gönderen ve bunun nasıl gittiğini kaydeden bir sınıfı ele alalım:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Ancak, artık `LOG_DIR` sabitini kullanmayan yeni `Logger`, kurucuda dosyanın yolunu gerektirir. Bu nasıl çözülür? `NewsletterDistributor` sınıfı mesajların nereye yazıldığı ile ilgilenmez, sadece onları yazmak ister.

Çözüm yine [1 numaralı kuraldır: parametre kullanın: |#rule #1: use parameters] sınıfın ihtiyaç duyduğu tüm verileri ona aktarın.

Yani günlüğe giden yolu yapıcıya aktarıyoruz ve daha sonra `Logger` nesnesini oluştururken bunu mu kullanıyoruz? Hayır. Çünkü yol `NewsletterDistributor` sınıfının ihtiyacı olan veri değildir; `Logger` sınıfının ihtiyacı olan şey budur. Sınıfın logger'ın kendisine ihtiyacı var. Ve biz de bunu aktaracağız:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Şimdi, `NewsletterDistributor` sınıfının imzalarından, günlüğe kaydetmenin işlevselliğinin bir parçası olduğu açıktır. Ve kaydediciyi başka bir kaydedici ile değiştirme seçeneğiniz vardır.

Tüm uygulamada logger'ın tek bir örneğiyle mutlu olabilir ve bir şeyin günlüğe kaydedildiği her yerde onu geçirebilirken, `Article` sınıfı söz konusu olduğunda durum farklıdır. Bunun birden fazla örneğini oluşturmak isteyeceğiz. Yapıcıda veritabanı bağımlılığı ile nasıl başa çıkılır? Örnek olarak, bir form gönderdikten sonra bir makaleyi veritabanına kaydetmesi gereken bir denetleyiciyi ele alalım:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Olası bir çözüm önerisi: veritabanı nesnesini kurucu tarafından `UserController` adresine aktarmak ve `$article = new Article($this->db)` adresini kullanmak.

Önceki durumda olduğu gibi, bu doğru bir uygulama değildir. Veritabanı bir `UserController` bağımlılığı değil, bir `Article` bağımlılığıdır. Dahası, `Article` sınıfının kurucusu bir şekilde değiştirildiği anda (yeni bir parametre eklenir), örneklerin oluşturulduğu tüm yerlerde kodu değiştirmemiz gerekecektir.

Çözüm fabrikalar.


Kural #2: Fabrikaları Kullanın .[#toc-rule-2-use-factories]
-----------------------------------------------------------

Gizli bağları kaldırarak ve tüm verileri argüman olarak geçirerek, daha yapılandırılabilir ve esnek sınıflar elde ederiz. Bu nedenle, bu daha esnek sınıfları oluşturmak ve yapılandırmak için hala bir şeye ihtiyacımız var. Buna fabrika diyeceğiz.

Temel kural şudur: Bir sınıfın bağımlılıkları varsa, örneklerinin oluşturulmasını fabrikaya bırakın.

Fabrikalar, bağımlılık enjeksiyonu dünyasında `new` operatörü için daha akıllı bir alternatiftir.


Fabrika .[#toc-factory]
-----------------------

Fabrika, nesneleri oluşturan ve yapılandıran bir sınıftır. `Article` üreten fabrikanın adı `ArticleFactory` olacak ve controller'da kullanımı aşağıdaki gibi olacaktır:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// fabrikanın bir nesne oluşturmasına izin verin
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Bir fabrika uygulaması şu şekilde görünebilir:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Bu noktada, sınıf kurucusunun imzası `Article` değiştiğinde, kodun buna tepki vermesi gereken tek kısmı `ArticleFactory` fabrikasıdır. `Article` nesneleriyle çalışan `UserController` gibi diğer kodlar bundan etkilenmez.

Şu anda kendimize nasıl yardımcı olduğumuzu merak ederek alnınıza vuruyor olabilirsiniz. Kod miktarı arttı ve kontrolörden ayrı bir sınıfa taşındı. Ancak, Nette DI'nin gizli bir kozu var. Fabrikalar kavramını anlıyor ve [bizim için böyle bir servis |factory] bile [yazabiliyor |factory]. Yani `ArticleFactory` sınıfı yerine, sadece bir arayüz oluşturabiliriz:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Ama şimdi bunun biraz ötesine geçiyoruz, bir dakika içinde buna geleceğiz.


Özet .[#toc-summary]
--------------------

Bu bölümün başında, uygulamaların nasıl tasarlanacağına ilişkin basit bir ilkeyi göstereceğimize söz vermiştik. İlkenin kendisi basit olsa da (sınıflara ihtiyaç duydukları verileri verin), bundan sonra gelenler daha fazla düşünmeyi gerektirir. Bu bölümü birkaç kez okumaktan çekinmeyin.

Eski alışkanlıklarını bir kenara bırakıp bağımlılık enjeksiyonunu sürekli olarak kullanmaya başlayan programcılar, bunu profesyonel yaşamlarında çok önemli bir an olarak görüyorlar. Net ve sürdürülebilir uygulamalar dünyasının kapılarını açtı.

Şimdi [Dependency Injection Container |container] 'ın ne olduğunu göreceğiz.
