Λειτουργίες συστοιχίας
**********************

.[perex]
Αυτή η σελίδα αφορά τις κλάσεις [Nette\Utils\Arrays |#Arrays], [ArrayHash |#ArrayHash] και [ArrayList |#ArrayList], οι οποίες σχετίζονται με τους πίνακες.


Εγκατάσταση:

```shell
composer require nette/utils
```


Arrays .[#toc-arrays]
=====================

[api:Nette\Utils\Arrays] είναι μια στατική κλάση, η οποία περιέχει μια χούφτα από εύχρηστες συναρτήσεις πίνακα. Το ισοδύναμό της για τους επαναλήπτες είναι η [Nette\Utils\Iterables |iterables].

Τα παραδείγματα που ακολουθούν υποθέτουν ότι έχει οριστεί το ακόλουθο ψευδώνυμο της κλάσης:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Η συνάρτηση μετατρέπει ευέλικτα το `$array` σε συσχετιστικό πίνακα ή αντικείμενα σύμφωνα με την καθορισμένη διαδρομή `$path`. Η διαδρομή μπορεί να είναι μια συμβολοσειρά ή ένας πίνακας. Αποτελείται από τα ονόματα των κλειδιών του πίνακα εισόδου και τελεστές όπως '[]', '->', '=' και '|'. Πετάει το `Nette\InvalidArgumentException` αν η διαδρομή είναι άκυρη.

```php
// μετατροπή σε συσχετιστικό πίνακα χρησιμοποιώντας ένα απλό κλειδί
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    //...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// ανάθεση τιμών από ένα κλειδί σε ένα άλλο με χρήση του τελεστή =
$result = Arrays::associate($arr, 'name=age'); // ή ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// δημιουργία ενός αντικειμένου με χρήση του τελεστή ->
$result = Arrays::associate($arr, '->name'); // ή ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// συνδυασμός κλειδιών με χρήση του τελεστή |
$result = Arrays::associate($arr, 'name|age'); // ή ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// προσθήκη σε έναν πίνακα χρησιμοποιώντας []
$result = Arrays::associate($arr, 'name[]'); // ή ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Ελέγχει έναν πίνακα για την παρουσία τιμής. Χρησιμοποιεί αυστηρή σύγκριση (`===`)

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Ελέγχει αν όλα τα στοιχεία του πίνακα περνούν τον έλεγχο που υλοποιείται από την παρεχόμενη συνάρτηση, η οποία έχει την υπογραφή `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Βλέπε [some() |#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Επιστρέφει έναν νέο πίνακα που περιέχει όλα τα ζεύγη κλειδιών-τιμών που ταιριάζουν με το δεδομένο `$predicate`. Το callback έχει την υπογραφή `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Επιστρέφει το πρώτο στοιχείο (που ταιριάζει με το καθορισμένο κατηγόρημα, αν δίνεται). Εάν δεν υπάρχει τέτοιο στοιχείο, επιστρέφει το αποτέλεσμα της κλήσης του `$else` ή null.
Το `$predicate` έχει την υπογραφή `function ($value, int|string $key, array $array): bool`.

Δεν αλλάζει τον εσωτερικό δείκτη σε αντίθεση με το `reset()`. Οι παράμετροι `$predicate` και `$else` υπάρχουν από την έκδοση 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Βλέπε [last() |#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Επιστρέφει το κλειδί του πρώτου στοιχείου (που ταιριάζει με το καθορισμένο κατηγόρημα, αν δίνεται) ή null αν δεν υπάρχει τέτοιο στοιχείο. Το `$predicate` έχει την υπογραφή `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Βλέπε [lastKey() |#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Μετατρέπει πολυδιάστατο πίνακα σε επίπεδο πίνακα.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Επιστρέφει `$array[$key]` item. Εάν δεν υπάρχει, απορρίπτεται το `Nette\InvalidArgumentException`, εκτός εάν έχει οριστεί μια προεπιλεγμένη τιμή ως τρίτο όρισμα.

```php
// αν $array['foo'] δεν υπάρχει, πετάει μια εξαίρεση
$value = Arrays::get($array, 'foo');

// αν $array['foo'] δεν υπάρχει, επιστρέφει 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Το επιχείρημα `$key` μπορεί επίσης να είναι ένας πίνακας.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// επιστρέφει 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Λαμβάνει αναφορά στο δεδομένο `$array[$key]`. Αν το ευρετήριο δεν υπάρχει, δημιουργείται νέο με τιμή `null`.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// επιστρέφει την αναφορά $array['foo']
```

Λειτουργεί με πολυδιάστατους πίνακες καθώς και με την [get() |#get()].

```php
$value = & Arrays::get($array, ['color', 'favorite']);
// επιστρέφει την αναφορά $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Επιστρέφει μόνο εκείνα τα στοιχεία του πίνακα, τα οποία ταιριάζουν με μια κανονική έκφραση `$pattern`. Εάν `$invert` είναι `true`, επιστρέφει τα στοιχεία που δεν ταιριάζουν. Σφάλμα μεταγλώττισης Regex ή σφάλμα χρόνου εκτέλεσης εκπέμπει `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// επιστρέφει μόνο αριθμητικά στοιχεία
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Εισάγει τα περιεχόμενα του πίνακα `$inserted` στο `$array` αμέσως μετά το `$key`. Εάν το `$key` είναι `null` (ή δεν υπάρχει), εισάγεται στο τέλος.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Εισάγει τα περιεχόμενα του πίνακα `$inserted` στο `$array` πριν από το `$key`. Εάν το `$key` είναι `null` (ή δεν υπάρχει), εισάγεται στην αρχή.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Προκαλεί όλα τα callbacks και επιστρέφει πίνακα αποτελεσμάτων.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Καλεί τη μέθοδο σε κάθε αντικείμενο ενός πίνακα και επιστρέφει πίνακα αποτελεσμάτων.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Ελέγχει αν ο πίνακας είναι δεικτοδοτημένος με αύξουσα σειρά αριθμητικών κλειδιών από το μηδέν, δηλαδή λίστα.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Επιστρέφει το τελευταίο στοιχείο (που ταιριάζει με το καθορισμένο κατηγόρημα, αν δίνεται). Εάν δεν υπάρχει τέτοιο στοιχείο, επιστρέφει το αποτέλεσμα της κλήσης του `$else` ή null.
Το `$predicate` έχει την υπογραφή `function ($value, int|string $key, array $array): bool`.

Δεν αλλάζει τον εσωτερικό δείκτη σε αντίθεση με το `end()`. Οι παράμετροι `$predicate` και `$else` υπάρχουν από την έκδοση 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Βλέπε [first() |#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Επιστρέφει το κλειδί του τελευταίου στοιχείου (που ταιριάζει με το καθορισμένο κατηγόρημα, αν δίνεται) ή null αν δεν υπάρχει τέτοιο στοιχείο. Το `$predicate` έχει την υπογραφή `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Βλέπε [firstKey() |#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Καλεί το `$transformer` σε όλα τα στοιχεία του πίνακα και επιστρέφει τον πίνακα των τιμών επιστροφής. Η ανάκληση έχει την υπογραφή `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Δημιουργεί έναν νέο πίνακα μετασχηματίζοντας τις τιμές και τα κλειδιά του αρχικού πίνακα. Η συνάρτηση `$transformer` έχει την υπογραφή `function ($value, $key, array $array): ?array{$newValue, $newKey}`. Εάν η `$transformer` επιστρέφει `null`, το στοιχείο παραλείπεται. Για στοιχεία που διατηρούνται, το πρώτο στοιχείο του επιστρεφόμενου πίνακα χρησιμοποιείται ως το νέο κλειδί και το δεύτερο στοιχείο ως η νέα τιμή.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Αυτή η μέθοδος είναι χρήσιμη σε περιπτώσεις όπου πρέπει να αλλάξετε τη δομή ενός πίνακα (και τα κλειδιά και τις τιμές ταυτόχρονα) ή να φιλτράρετε στοιχεία κατά τη διάρκεια του μετασχηματισμού (επιστρέφοντας null για ανεπιθύμητα στοιχεία).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Συγχωνεύει αναδρομικά δύο πεδία. Είναι χρήσιμη, για παράδειγμα, για τη συγχώνευση δενδρικών δομών. Συμπεριφέρεται όπως ο τελεστής `+` για τον πίνακα, δηλαδή προσθέτει ένα ζεύγος κλειδιού/τιμής από τον δεύτερο πίνακα στον πρώτο και διατηρεί την τιμή από τον πρώτο πίνακα σε περίπτωση σύγκρουσης κλειδιών.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Οι τιμές από τον δεύτερο πίνακα προστίθενται πάντα στον πρώτο. Η εξαφάνιση της τιμής `10` από τον δεύτερο πίνακα μπορεί να φαίνεται λίγο συγκεχυμένη. Θα πρέπει να σημειωθεί ότι αυτή η τιμή καθώς και η τιμή `5` in the first array have the same numeric key `0`, οπότε στο πεδίο που προκύπτει υπάρχει μόνο ένα στοιχείο από τον πρώτο πίνακα.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Κανονικοποιεί τον πίνακα σε συσχετιστικό πίνακα. Αντικαθιστά τα αριθμητικά κλειδιά με τις τιμές τους, η νέα τιμή θα είναι `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Επιστρέφει και αφαιρεί την τιμή ενός στοιχείου από έναν πίνακα. Εάν δεν υπάρχει, πετάει μια εξαίρεση ή επιστρέφει `$default`, εάν παρέχεται.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Μετονομάζει ένα κλειδί. Επιστρέφει `true` εάν το κλειδί βρέθηκε στον πίνακα.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Επιστρέφει τη μηδενική θέση του κλειδιού του συγκεκριμένου πίνακα. Επιστρέφει `null` εάν το κλειδί δεν βρεθεί.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // επιστρέφει 0
$position = Arrays::getKeyOffset($array, 'second'); // επιστρέφει 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // επιστρέφει null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Ελέγχει αν τουλάχιστον ένα στοιχείο του πίνακα περνάει το τεστ που υλοποιείται από την παρεχόμενη κλήση με υπογραφή `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Βλέπε [every() |#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Μετατρέπει μια τιμή σε κλειδί πίνακα, το οποίο είναι είτε ακέραιος αριθμός είτε συμβολοσειρά.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Αντιγράφει τα στοιχεία του πίνακα `$array` στο αντικείμενο `$object` και στη συνέχεια το επιστρέφει.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // θέτει $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Μετατρέπει κάθε στοιχείο του πίνακα σε συμβολοσειρά και το περικλείει με τα `$prefix` και `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

Το αντικείμενο [api:Nette\Utils\ArrayHash] είναι ο απόγονος της γενικής κλάσης stdClass και την επεκτείνει με τη δυνατότητα να τη μεταχειρίζεται ως πίνακα, για παράδειγμα, προσπελαύνεται τα μέλη της με τη χρήση τετραγωνικών αγκυλών:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // λειτουργεί επίσης σημειογραφία αντικειμένου
$hash->foo; // 123
```

Μπορείτε να χρησιμοποιήσετε τη συνάρτηση `count($hash)` για να λάβετε τον αριθμό των στοιχείων.

Μπορείτε να κάνετε επανάληψη σε ένα αντικείμενο όπως θα κάνατε σε έναν πίνακα, ακόμη και με μια αναφορά:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Οι υπάρχοντες πίνακες μπορούν να μετατραπούν σε `ArrayHash` χρησιμοποιώντας το `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Ο μετασχηματισμός είναι αναδρομικός:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // αντικείμενο ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Μπορεί να αποφευχθεί με τη δεύτερη παράμετρο:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // array
```

Μετασχηματισμός πίσω στον πίνακα:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] αναπαριστά έναν γραμμικό πίνακα όπου οι δείκτες είναι μόνο ακέραιοι αριθμοί που αυξάνονται από το 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Μπορείτε να χρησιμοποιήσετε τη συνάρτηση `count($list)` για να λάβετε τον αριθμό των στοιχείων.

Μπορείτε να κάνετε επανάληψη σε ένα αντικείμενο όπως θα κάνατε σε έναν πίνακα, ακόμη και με μια αναφορά:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

Οι υπάρχοντες πίνακες μπορούν να μετατραπούν σε `ArrayList` χρησιμοποιώντας το `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Η πρόσβαση σε κλειδιά πέραν των επιτρεπόμενων τιμών προκαλεί εξαίρεση `Nette\OutOfRangeException`:

```php
echo $list[-1]; // throws Nette\OutOfRangeException
unset($list[30]); // throws Nette\OutOfRangeException
```

Η αφαίρεση του κλειδιού θα έχει ως αποτέλεσμα την αναρίθμηση των στοιχείων:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Μπορείτε να προσθέσετε ένα νέο στοιχείο στην αρχή χρησιμοποιώντας το `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
