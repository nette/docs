Array processing - Nette\Utils\Arrays
*************************************

.[perex]
[Nette\Utils\Arrays |api:] is a static class, which contains a handful of handy array functions.

All examples assume the following class alias is defined:

/--php
use Nette\Utils\Arrays;
\--


get($array, $key, $default=NULL) .{toc: get()}
--------------------------------------------

Returns `$array[$key]` item. If it does not exist, `Nette\InvalidArgumentException` is thrown, unless a default return value is set as third argument.

/--php
// if $array['foo'] does not exist, throws an exception
$value = Arrays::get($array, 'foo');

// if $array['foo'] does not exist, returns 'bar'
$value = Arrays::get($array, 'foo', 'bar');
\--

Argument `$key` may as well be an array.

/--php
$array = array('color' => array('favorite' => 'red'), 5);

$value = Arrays::get($array, array('color', 'favorite'));
// returns 'red'
\--



getRef(&$array, $key) .{toc: getRef()}
------------------------------------

Gets reference to given `$array[$key]`. If the index does not exist, new one is created with `NULL`.

/--php
$valueRef = & Arrays::getRef($array, 'foo');
// returns $array['foo'] reference
\--

Works with multidimensional arrays as well as [get() | #get()].

/--php
$value = & Arrays::get($array, array('color', 'favorite'));
// returns $array['color']['favorite'] reference
\--


grep($array, $pattern, $flags=NULL) .{toc: grep()}
------------------------------------------------

Returns only those array items, which matches a regular expression `$pattern`. Regex compilation or runtime error throw `Nette\RegexpException`.

/--php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// returns only numerical items
\--

Value `PREG_GREP_INVERT` may be set as `$flags`, which inverts the selection.


searchKey($array, $key) .{toc: searchKey()}
-----------------------------------------

Returns zero-indexed position of given array key. Returns `FALSE` if key is not found.

/--php
$array = array('first' => 10, 'second' => 20);
$position = Arrays::searchKey($array, 'first'); // returns 0
\--



insertAfter(&$array, $key, $inserted) .{toc: insertAfter()}
---------------------------------------------------------

Appends array `$inserted` after item with `$key` index. If such a `$key` does not exist, the array is inserted at the end.

/--php
$array = array('first' => 10, 'second' => 20);
Arrays::insertAfter($array, 'first', array('hello' => 'world'));
// $array = array('first' => 10, 'hello' => 'world', 'second' => 20);
\--


insertBefore(&$array, $key, $inserted) .{toc: insertBefore()}
-----------------------------------------------------------

Prepends content of `$inserted` array into `$array` before item with `$key` index. If such a `$key` does not exist, the array is inserted at the beginning.

/--php
$array = array('first' => 10, 'second' => 20);
Arrays::insertBefore($array, 'first', array('hello' => 'world'));
// $array = array('hello' => 'world', 'first' => 10, 'second' => 20);
\--


mergeTree($array1, $array2) .{toc: mergeTree()}
-------------------------------------------

Merges two arrays recursively. Useful for combining tree structures. It behaves as the&nbsp;`+` operator applied to arrays, ie. it adds to keys/values of the second array to the the first one. In case of collision, values of first array are used.

/--php
$array1 = array('color' => array('favorite' => 'red'), 5);
$array2 = array(10, 'color' => array('favorite' => 'green', 'blue'));

$array = Arrays::mergeTree($array1, $array2);
// $array = array('color' => array('favorite' => 'red', 'blue'), 5);
\--

Values from second array are always appended to the first. Though the disappearance of value `10` might be confusing, it's fine - both `5` of the first array and the `10` do have same key `0`.


renameKey(&$array, $oldKey, $newKey) .{toc: renameKey()}
------------------------------------------------------

Renames a key.

/--php
$array = array('first' => 10, 'second' => 20);
Arrays::renameKey($array, 'first', 'renamed');
// $array = array('renamed' => 10, 'second' => 20);
\--
