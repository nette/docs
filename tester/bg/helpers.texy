Помощници
*********


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` е клас, разширяващ `SimpleXMLElement` с методи за улесняване на тестването на HTML или XML съдържание.

```php
# let's have an HTML document in $html that we load
$dom = Tester\DomQuery::fromHtml($html);

# we can test the presence of elements using CSS selectors
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[type="submit"]'));

# or select elements as array of DomQuery
$elems = $dom->find('input[data-autocomplete]');
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` емулира файлове в паметта, за да ви помогне да тествате код, който използва функции като `fopen()`, `file_get_contents()` или `parse_ini_file()`. Например:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Това не е декларация, а помощник за тестване на частни методи и свойства на обекти.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // достъпно частно $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Методът `purge()` създава зададената директория и, ако тя вече съществува, премахва цялото ѝ съдържание. Тя е полезна за създаване на временни директории. Например в `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Тестовете се изпълняват паралелно. Понякога не е необходимо да припокриваме времето за изпълнение на теста. Обикновено тестовете за бази данни трябва да подготвят съдържанието на базата данни и не трябва да се намесват в него, докато тестът работи. В тези случаи използваме `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Първият аргумент е името на ключалката. Вторият е пътят до директорията, в която да се запази заключването. Тестът, който получава заключването, се изпълнява първи. Другите тестове трябва да изчакат завършването му.


Environment::bypassFinals() .[filter]
-------------------------------------
Класовете или методите, отбелязани като `final`, са трудни за тестване. Извикването на `Tester\Environment::bypassFinals()` в началото на тестването води до премахване на ключовите думи `final` при зареждане на кода.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- подобрява четливостта на изхвърлянето на грешки (оцветяването е разрешено), в противен случай се отпечатва стандартна PHP стекова следа.
- позволява да се провери дали в даден тест са извикани оператори, в противен случай тестовете без (например забравени) оператори също ще преминат успешно
- автоматично стартира конструктора за покритие на кода, когато използвате `--coverage` (описано по-късно).
- отпечатва статус OK или FAILURE в края на скрипта


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Създава глобални функции `test()`, `setUp()` и `tearDown()`, на които могат да се разделят тестовете.

```php
test('test description', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Позволяет узнать, был ли тест запущен напрямую или через Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# { изпълнява се от Tester
} иначе {
	# друг начин
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester запускает тесты параллельно в заданном количестве потоков. Мы найдем номер потока в переменной окружения, когда нас это заинтересует:

```php
echo "Работя в нишка с номер " . getenv(Tester\Environment::VariableThread);
```
