Refleksja struktury
*******************

.{data-version:3.2.1}
Nette Database dostarcza narzędzi do introspekcji struktury bazy danych za pomocą klasy [api:Nette\Database\Reflection]. Umożliwia ona uzyskiwanie informacji o tabelach, kolumnach, indeksach i kluczach obcych. Refleksję można wykorzystać do generowania schematów, tworzenia elastycznych aplikacji pracujących z bazą danych lub ogólnych narzędzi bazodanowych.

Obiekt refleksji uzyskujemy z instancji połączenia z bazą danych:

```php
$reflection = $database->getReflection();
```


Pobieranie tabel
----------------

Właściwość readonly `$reflection->tables` zawiera tablicę asocjacyjną wszystkich tabel w bazie danych:

```php
// Wypisanie nazw wszystkich tabel
foreach ($reflection->tables as $name => $table) {
	echo $name . "\n";
}
```

Dostępne są jeszcze dwie metody:

```php
// Sprawdzenie istnienia tabeli
if ($reflection->hasTable('users')) {
	echo "Tabela users istnieje";
}

// Zwraca obiekt tabeli; jeśli nie istnieje, rzuca wyjątek
$table = $reflection->getTable('users');
```


Informacje o tabeli
-------------------

Tabela jest reprezentowana przez obiekt [Table|api:Nette\Database\Reflection\Table], który udostępnia następujące właściwości readonly:

- `$name: string` – nazwa tabeli
- `$view: bool` – czy jest to widok
- `$fullName: ?string` – pełna nazwa tabeli wraz ze schematem (jeśli istnieje)
- `$columns: array<string, Column>` – tablica asocjacyjna kolumn tabeli
- `$indexes: Index[]` – tablica indeksów tabeli
- `$primaryKey: ?Index` – klucz podstawowy tabeli lub null
- `$foreignKeys: ForeignKey[]` – tablica kluczy obcych tabeli


Kolumny
-------

Właściwość `columns` tabeli udostępnia tablicę asocjacyjną kolumn, gdzie kluczem jest nazwa kolumny, a wartością instancja [Column|api:Nette\Database\Reflection\Column] z następującymi właściwościami:

- `$name: string` – nazwa kolumny
- `$table: ?Table` – referencja do tabeli kolumny
- `$nativeType: string` – natywny typ bazodanowy
- `$size: ?int` – rozmiar/długość typu
- `$nullable: bool` – czy kolumna może zawierać NULL
- `$default: mixed` – domyślna wartość kolumny
- `$autoIncrement: bool` – czy kolumna jest auto-increment
- `$primary: bool` – czy jest częścią klucza podstawowego
- `$vendor: array` – dodatkowe metadane specyficzne dla danego systemu bazodanowego

```php
foreach ($table->columns as $name => $column) {
	echo "Kolumna: $name\n";
	echo "Typ: {$column->nativeType}\n";
	echo "Nullable: " . ($column->nullable ? 'Tak' : 'Nie') . "\n";
}
```


Indeksy
-------

Właściwość `indexes` tabeli udostępnia tablicę indeksów, gdzie każdy indeks jest instancją [Index|api:Nette\Database\Reflection\Index] z następującymi właściwościami:

- `$columns: Column[]` – tablica kolumn tworzących indeks
- `$unique: bool` – czy indeks jest unikalny
- `$primary: bool` – czy jest to klucz podstawowy
- `$name: ?string` – nazwa indeksu

Klucz podstawowy tabeli można uzyskać za pomocą właściwości `primaryKey`, która zwraca obiekt `Index` lub `null` w przypadku, gdy tabela nie ma klucza podstawowego.

```php
// Wypisanie indeksów
foreach ($table->indexes as $index) {
	$columns = implode(', ', array_map(fn($col) => $col->name, $index->columns));
	echo "Indeks" . ($index->name ? " {$index->name}" : '') . ":\n";
	echo "  Kolumny: $columns\n";
	echo "  Unikalny: " . ($index->unique ? 'Tak' : 'Nie') . "\n";
}

// Wypisanie klucza podstawowego
if ($primaryKey = $table->primaryKey) {
	$columns = implode(', ', array_map(fn($col) => $col->name, $primaryKey->columns));
	echo "Klucz podstawowy: $columns\n";
}
```


Klucze obce
-----------

Właściwość `foreignKeys` tabeli udostępnia tablicę kluczy obcych, gdzie każdy klucz obcy jest instancją [ForeignKey|api:Nette\Database\Reflection\ForeignKey] z następującymi właściwościami:

- `$foreignTable: Table` – tabela referencyjna
- `$localColumns: Column[]` – tablica kolumn lokalnych
- `$foreignColumns: Column[]` – tablica kolumn referencyjnych
- `$name: ?string` – nazwa klucza obcego

```php
// Wypisanie kluczy obcych
foreach ($table->foreignKeys as $fk) {
	$localCols = implode(', ', array_map(fn($col) => $col->name, $fk->localColumns));
	$foreignCols = implode(', ', array_map(fn($col) => $col->name, $fk->foreignColumns));

	echo "FK" . ($fk->name ? " {$fk->name}" : '') . ":\n";
	echo "  $localCols -> {$fk->foreignTable->name}($foreignCols)\n";
}
```
