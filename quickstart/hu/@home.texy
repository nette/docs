Írjuk meg az első alkalmazást!
******************************

.[perex]
Ismerkedjünk meg együtt a Nette Frameworkkel, miközben létrehozunk egy egyszerű blogot hozzászólásokkal. Vágjunk bele!

Már az első két fejezet után lesz egy saját működő blogunk, és publikálhatjuk nagyszerű bejegyzéseinket, bár a funkciók egyelőre meglehetősen korlátozottak lesznek. Érdemes elolvasni a következő fejezeteket is, ahol beprogramozzuk a hozzászólások hozzáadását, a cikkek szerkesztését, és végül biztonságossá tesszük a blogot.

.[tip]
Ez az útmutató feltételezi, hogy elolvasta a [Telepítés |nette:installation] oldalt, és sikeresen előkészítette a szükséges eszközöket. Feltételezi továbbá, hogy érti az [objektumorientált programozást PHP-ban |nette:introduction-to-object-oriented-programming].

Kérjük, használjon PHP 8.1-et vagy újabbat. A teljes alkalmazást megtalálja [a GitHubon |https://github.com/nette-examples/quickstart/tree/v4.0].


Üdvözlő oldal
=============

Kezdjük egy új projekt létrehozásával a `nette-blog` könyvtárba:

```shell
composer create-project nette/web-project nette-blog
```

Ebben a pillanatban a Web Project bevezető oldalának már működnie kellene. Próbáljuk ki a böngésző megnyitásával a következő URL címen:

```
http://localhost/nette-blog/www/
```

és látni fogjuk a Nette Framework bevezető oldalát:

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

Az alkalmazás működik, és elkezdheti a módosításokat.

.[note]
Ha probléma merült fel, [próbálja ki ezeket a tippeket |nette:troubleshooting#Nem működik a Nette fehér oldal jelenik meg].


A Web Project tartalma
======================

A Web Project a következő struktúrával rendelkezik:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← alkalmazás könyvtára
│   ├── <b>Core/</b>         ← működéshez szükséges alaposztályok
│   ├── <b>Presentation/</b> ← presenterek, sablonok & társai
│   │   └── <b>Home/</b>     ← Home presenter könyvtára
│   └── <b>Bootstrap.php</b> ← Bootstrap indító osztály
├── <b>assets/</b>           ← nyers eszközök (SCSS, TypeScript, forrásképek)
├── <b>bin/</b>              ← parancssorból futtatott szkriptek
├── <b>config/</b>           ← konfigurációs fájlok
├── <b>log/</b>              ← hibák naplózása
├── <b>temp/</b>             ← ideiglenes fájlok, cache, …
├── <b>vendor/</b>           ← Composerrel telepített könyvtárak
│   └── <b>autoload.php</b>  ← az összes telepített csomag autoloadingja
└── <b>www/</b>              ← nyilvános könyvtár - az egyetlen elérhető a böngészőből
	├─ <b>assets/</b>        ← összeállított statikus fájlok (CSS, JS, képek, ...)
    └── <b>index.php</b>     ← kezdőfájl, amellyel az alkalmazás elindul
\--

A `www/` könyvtár képek, JavaScript fájlok, CSS stílusok és más nyilvánosan elérhető fájlok tárolására szolgál. Csak ez a könyvtár érhető el az internetről, ezért állítsa be az alkalmazás gyökérkönyvtárát úgy, hogy ide mutasson (ezt beállíthatja az Apache vagy nginx konfigurációjában, de tegyük ezt később, most nem fontos).

A legfontosabb mappa számunkra az `app/`. Itt találjuk a `Bootstrap.php` fájlt, amelyben egy osztály található, amely a teljes keretrendszer betöltésére és az alkalmazás beállítására szolgál. Itt aktiválódik az [autoloading |robot-loader:], beállítódik a [debugger |tracy:] és az [útvonalak |application:routing].


Takarítás
=========

A Web Project tartalmaz egy bevezető oldalt, amelyet törlünk, mielőtt bármit is programozni kezdenénk. Nyugodtan cseréljük le tehát az `app/Presentation/Home/default.latte` fájl tartalmát "Hello world!"-re.


[* qs-hello.webp .{url:-} *]


Tracy (debugger)
================

Rendkívül fontos eszköz a fejlesztéshez a [Tracy hibakereső eszköz |tracy:]. Próbáljon meg valamilyen hibát előidézni az `app/Presentation/Home/HomePresenter.php` fájlban (pl. a HomePresenter osztály definíciójában lévő kapcsos zárójel eltávolításával), és nézze meg, mi történik. Felugrik egy értesítő oldal, amely érthetően leírja a hibát.

[* qs-tracy.avif .{url:-}(hibakereső képernyő) *]

A Tracy óriási segítséget nyújt, amikor hibákat keresünk az alkalmazásban. Figyelje meg a képernyő jobb alsó sarkában lebegő Tracy Bart is, amely információkat tartalmaz az alkalmazás futásáról.

[* qs-tracybar.webp .{url:-} *]

Éles (produkciós) módban a Tracy természetesen ki van kapcsolva, és nem jelenít meg semmilyen érzékeny információt. Ebben az esetben minden hiba a `log/` mappába kerül mentésre. Próbáljuk ki. Az `app/Bootstrap.php` fájlban vegyük ki a kommentet a következő sorból, és változtassuk meg a hívás paraméterét `false`-ra, hogy a kód így nézzen ki:

```php .{file:app/Bootstrap.php}
...
$this->configurator->setDebugMode(false);
...
```

Az oldal frissítése után már nem látjuk a Tracy-t. Helyette egy felhasználóbarát üzenet jelenik meg:

[* qs-fatal.webp .{url:-}(hiba képernyő) *]

Most nézzünk bele a `log/` könyvtárba. Itt (az `exception.log` fájlban) megtaláljuk a naplózott hibát, valamint a már ismert hibaüzenetet tartalmazó oldalt (HTML fájlként mentve, amelynek neve `exception-`-nel kezdődik).

Kommenteljük vissza a `// $configurator->setDebugMode(false);` sort. A Tracy automatikusan engedélyezi a fejlesztői módot a localhoston, és letiltja mindenhol máshol.

A létrehozott hibát kijavíthatjuk, és folytathatjuk az alkalmazás írását.


Küldjön köszönetet
==================

Mutatunk egy trükköt, amellyel örömet szerezhet az open source szerzőknek. Egyszerű módon adhat csillagot a GitHubon azoknak a könyvtáraknak, amelyeket a projektje használ. Csak futtassa:

```shell
composer thanks
```

Próbálja ki!

{{priority: -1}}
{{sitename: Nette Quickstart}}
