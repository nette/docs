Konfigurace frameworku
**********************

.[perex]
Přehled všech konfiguračních voleb v Nette Frameworku.

Nette umožňuje nastavovat aplikaci pomocí [konfiguračních souborů |bootstrap#Konfigurační soubory]. Ty se obykle zapisují ve formátu NEON. [Vyzkoušejte si |https://ne-on.org] si jeho syntaxi.


Sessions
========

Lze nastavovat všechny PHP [direktivy |http://www.php.net/manual/en/session.configuration.php] (ve formátu camelCase).

/-- neon
	session:
		autoStart: true  # výchozí je smart
		expiration: 10 days
		name: ...
		...
\--

Doporučuje se ponechat `autoStart: smart`, protože pak automaticky startuje session, pouze pokud je již vytvořena.

Více o [konfiguraci sessions |sessions#Konfigurace sessions].


Application
===========

/--neon
	application:
		debugger: true # panel do Laděnky
		catchExceptions: ...
		errorPresenter: ...

\--


HTTP hlavičky
=============

/--neon
http:
	frames: ... # ovlivňuje hlavičku X-Frame-Options

	headers:
		X-Powered-By: MyCMS       # custom HTTP header

    csp:                          # Content Security Policy
        script-src: [
            nonce                 # for browsers that support CSP2
            self, unsafe-inline   # for browsers that support CSP1
        ]
\--

Framework z bezpečnostních důvodů odesílá hlavičku `X-Frame-Options: SAMEORIGIN`, která říká, že stránku lze zobrazit uvnitř jiné stránky (v elementu IFRAME) pouze pokud se nachází na stejné doméně. To může být v některých situacích nežádoucí (například pokud vyvíjíte aplikaci pro Facebook), chování lze proto vypnout nastavením položky `frames: yes`.
Můžete ovlivňovat i další odesílané hlavičky nastavením http.headers. V tomto příkladě nastavujeme hlavičku Content-Security-Policy která nám dovolí stahovat externí soubory (img, script apod.) pouze z naší domény. Více o hlavičce [Content-Security-Policy |http://content-security-policy.com/].


HTTP proxy
==========

Můžete zadat HTTP proxy, aby detekce IP adresy klienta fungovala správně.

/--neon
	http:
		proxy: 127.0.0.1  # IP adresa, rozsah, název hostitele nebo pole těchto hodnot
\--


Uživatelé
=========

Uvedením pole `users` vytvoříme SimpleAuthenticator, uvedením polí `roles` nebo `resources` vytvoříme autorizátor Nette\Security\Permission.

/--neon
	security:
		debugger: true  # panel v Debugger baru

		users:
			frantisek: tajneheslo

		roles:
			guest:
			member:
			admin: [member]  # admin dědí od membera

		resources:
			file:
\--


Maily
=====

Standardní mailer je SendmailMailer, uvedením `smtp` aktivujeme SmtpMailer.

/--neon
	mail:
		smtp: true # zapne SmtpMailer místo SendmailMailer
		# nepovinné nastavení
		host: ...
		port: ...
		username: ...
		password: ...
		secure: # povolené hodnoty jsou ssl, tls nebo null
		timeout: ...
\--


Databáze
========

Můžeme vytvořit více připojení, které uvedeme pod klíčem `database`. Takto vytvoříme spojení nazvané `default`.

/--neon
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false # panel v Debugger baru
			explain: false  # explain dotazů v Debugger baru
			reflection: discovered # nebo static nebo název třídy
\--

Framework tak vytvoří nejen objekt `Nette\Database\Connection`, ale nastavují mu i pomocné objekty jako reflection & cache a ve vývojářském režimu přidá panel do Debugger baru.

V rámci konfiguračního souboru se můžeme ke službě dostat přes autowiring (`@Nette\Database\Connection`), přes název služby (`@nette.database.default`) nebo si vytvořit alias a ten používat:

/--neon
services:
	database: @nette.database.default

	authorizator: Auth(@database)
\--


Formuláře
=========

V konfiguračním souboru lze změnit výchozí chybové hlášky.

/--neon
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
\--


Šablony Latte
=============

Lze přepínat HTML a XHTML režim šablon a registrovat vlastní Latte makra. Vlastní makra mohou být zaregistrována buď pomocí jména třídy nebo pomocí reference na službu. Jako výchozí je zavolána metoda `install`, ale to můžete změnit tím, že přidáte dvojtečku a jméno vaší metody.

/--neon
	latte:
		xhtml: yes  # výchozí je no
		macros:
			- App\MyLatteMacros::register  # statická metoda, classname nebo callable
			- @App\MyLatteMacrosFactory    # služba s metodou install
			- @App\MyLatteMacrosFactory::register # služba s metodou register

	services:
		- App\MyLatteMacrosFactory
\--


DI kontejner
============

/--neon
	di:
		debugger: false  # vypne DI panel v Debugger baru
\--


Tracy debugger
==============

Lze konfigurovat některé parametry Tracy a nastavovat panely do Debugger baru.

/--neon
	tracy:
		email: %webmasterEmail%
		strictMode: true
		editor: ...
		browser: ...
		bar: # panely do Debugger baru
			- Nette\Bridges\DITracy\ContainerPanel # alias DI Container baru
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)
		blueScreen: # panely do Laděnky
			- DoctrinePanel::renderException
\--


Low-level úpravy
================

Všechny uvedené nastavení ovlivňují podobu DI kontejneru a systémových služeb, které vytváří. Všechny tyto služby lze ještě pozměnit na nižší úrovni. Třeba u služby `application.application`, což je standardně objekt `Nette\Application\Application`, můžeme změnit třídu:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
\--

Příznak `alteration` je informativní a říká, že jen modifikujeme existující službu.

Můžeme také doplnit setup:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
		setup:
			- $onStartup = [@resource::init]
\--



Služby
======

Konfigurační soubor je místem, kam umísťujeme definice vlastních služeb. Slouží k tomu sekce `services`, podrobný popis najdete v kapitole [DI: konfigurace služeb |di-configuration].

Například takto může vypadat definice služby pojmenované `database`, což bude instance `PDO`:

/--neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
\--
