Повторне використання форм у кількох місцях
*******************************************

.[perex]
Як повторно використовувати одну й ту саму форму в декількох місцях і не дублювати код? Це дуже легко зробити в Nette, і у вас є кілька способів на вибір.


Фабрика форм .[#toc-form-factory]
=================================

Давайте створимо клас, який може створювати форму. Такий клас називається фабрикою. У тому місці, де ми хочемо використовувати форму (наприклад, у презентері), ми запитуємо [фабрику як залежність |dependency-injection:passing-dependencies].

Частина фабрики - це код, який передає дані для подальшого опрацювання, коли форма успішно відправлена. Зазвичай на шар моделі. Він також перевіряє, чи все пройшло успішно, і [передає назад |forms:validation#Processing-errors] будь-які помилки у форму. Модель у наступному прикладі представлена класом `Facade`:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* параметри */): Form
	{
		$form = new Form;

		// додаємо елементи до форми

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// обробка форми
			$this->facade->process($values);

		} catch (AnyModelException $e) { // обробка форми
			$form->addError('...');
		}
	}
}
```

Звісно, фабрика може бути параметричною, тобто вона може приймати параметри, які впливатимуть на зовнішній вигляд створюваної форми.

Тепер ми продемонструємо передачу фабрики презентеру. Спочатку ми записуємо її в конфігураційний файл:

```neon
services:
	- EditFormFactory
```

А потім запитуємо в презентері. Останній крок обробки відправленої форми - перенаправлення на наступну сторінку:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Оскільки перенаправлення обробляється обробником презентера, компонент можна використовувати в кількох місцях і в кожному з них перенаправляти в інше місце.


Компонент із формою .[#toc-component-with-form]
===============================================

Інший спосіб - створити новий [компонент |application:components], що містить форму. Це дає нам можливість візуалізувати форму певним чином, якщо компонент містить у собі шаблон.
Або ми можемо використовувати сигнали для зв'язку AJAX і завантаження інформації у форму, наприклад, для автозаповнення тощо.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// додаємо елементи до форми

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// обробка форми
			$this->facade->process($values);

		} catch (AnyModelException $e) { // обробка форми
			$form->addError('...');
			return;
		}

		// виклик події
		$this->onSave($this, $values);
	}
}
```

Далі ми створимо фабрику, яка вироблятиме цей компонент. Просто [напишіть його інтерфейс |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

І додайте у файл конфігурації:

```neon
services:
	- EditControlFactory
```

І тепер ми можемо вимагати фабрику і використовувати її в презентері:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// або перенаправити на результат редагування, наприклад:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Найкращі практики}}
