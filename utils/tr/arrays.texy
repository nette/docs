Dizilerle Çalışma
*****************

.[perex]
Bu sayfa, dizilerle ilgili olan [Nette\Utils\Arrays |#Arrays], [#ArrayHash] ve [#ArrayList] sınıflarına ayrılmıştır.


Kurulum:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays], dizilerle çalışmak için yararlı fonksiyonlar içeren statik bir sınıftır. Yineleyiciler için eşdeğeri [Nette\Utils\Iterables |iterables]'dır.

Aşağıdaki örnekler, oluşturulmuş bir takma ad varsayar:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Fonksiyon, `$array` dizisini belirtilen `$path` yoluna göre esnek bir şekilde ilişkisel dizilere veya nesnelere dönüştürür. Yol bir karakter dizisi veya dizi olabilir. Giriş dizisinin anahtar adlarından ve '[]', '->', '=', ve '|' gibi operatörlerden oluşur. Yol geçersizse `Nette\InvalidArgumentException` istisnası fırlatır.

```php
// basit bir anahtara göre ilişkisel diziye dönüştürme
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// = operatörünü kullanarak bir anahtardan diğerine değer atama
$result = Arrays::associate($arr, 'name=age'); // veya ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// -> operatörünü kullanarak bir nesne oluşturma
$result = Arrays::associate($arr, '->name'); // veya ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// | operatörünü kullanarak anahtarları birleştirme
$result = Arrays::associate($arr, 'name|age'); // veya ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// [] kullanarak diziye ekleme
$result = Arrays::associate($arr, 'name[]'); // veya ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Dizinin bir değer içerip içermediğini test eder. Katı karşılaştırma (`===`) kullanır.

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Dizideki tüm öğelerin `$predicate` içinde uygulanan testi geçip geçmediğini test eder. İmza `function ($value, $key, array $array): bool` şeklindedir.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Bkz. [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Belirtilen koşula uyan tüm anahtar-değer çiftlerini içeren yeni bir dizi döndürür. Geri arama imzası `function ($value, int|string $key, array $array): bool` şeklindedir.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

İlk öğeyi döndürür (eğer belirtilmişse koşula uyan). Böyle bir öğe yoksa, `$else` çağrısının sonucunu veya null döndürür. `$predicate` parametresinin imzası `function ($value, int|string $key, array $array): bool` şeklindedir.

`reset()` fonksiyonunun aksine iç işaretçiyi değiştirmez. `$predicate` ve `$else` parametreleri sürüm 4.0.4'ten beri mevcuttur.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Bkz. [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

İlk öğenin anahtarını (eğer belirtilmişse koşula uyan) veya böyle bir öğe yoksa null döndürür. `$predicate` koşulunun imzası `function ($value, int|string $key, array $array): bool` şeklindedir.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Bkz. [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Çok seviyeli bir diziyi düz bir diziye birleştirir.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

`$array[$key]` öğesini döndürür. Eğer mevcut değilse, ya `Nette\InvalidArgumentException` istisnası fırlatır ya da üçüncü parametre `$default` belirtilmişse onu döndürür.

```php
// eğer $array['foo'] mevcut değilse, istisna fırlatır
$value = Arrays::get($array, 'foo');

// eğer $array['foo'] mevcut değilse, 'bar' döndürür
$value = Arrays::get($array, 'foo', 'bar');
```

`$key` anahtarı bir dizi de olabilir.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// 'red' döndürür
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Belirtilen dizi öğesine bir referans alır. Eğer öğe mevcut değilse, null değeriyle oluşturulur.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// $array['foo']'ya bir referans döndürür
```

[#get()] fonksiyonu gibi, çok boyutlu dizilerle çalışabilir.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// $array['color']['favorite']'a bir referans döndürür
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Yalnızca değeri `$pattern` düzenli ifadesiyle eşleşen dizi öğelerini döndürür. Eğer `$invert` `true` ise, tam tersine eşleşmeyen öğeleri döndürür. İfadenin derlenmesi veya işlenmesi sırasında bir hata oluşursa `Nette\RegexpException` istisnası fırlatır.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// yalnızca rakamlardan oluşan dizi öğelerini döndürür
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

`$inserted` dizisinin içeriğini `$array` dizisine, `$key` anahtarına sahip öğeden hemen sonra ekler. Eğer `$key` `null` ise (veya dizide yoksa), sona eklenir.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

`$inserted` dizisinin içeriğini `$array` dizisine, `$key` anahtarına sahip öğeden önce ekler. Eğer `$key` `null` ise (veya dizide yoksa), başa eklenir.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Tüm geri aramaları çağırır ve sonuçların bir dizisini döndürür.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Dizideki her nesne üzerinde bir metot çağırır ve sonuçların bir dizisini döndürür.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Dizinin sıfırdan başlayarak artan bir dizi sayısal anahtara göre indekslenip indekslenmediğini, yani bir liste (list) olup olmadığını kontrol eder.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Son öğeyi döndürür (eğer belirtilmişse koşula uyan). Böyle bir öğe yoksa, `$else` çağrısının sonucunu veya null döndürür. `$predicate` parametresinin imzası `function ($value, int|string $key, array $array): bool` şeklindedir.

`end()` fonksiyonunun aksine iç işaretçiyi değiştirmez. `$predicate` ve `$else` parametreleri sürüm 4.0.4'ten beri mevcuttur.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Bkz. [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Son öğenin anahtarını (eğer belirtilmişse koşula uyan) veya böyle bir öğe yoksa null döndürür. `$predicate` koşulunun imzası `function ($value, int|string $key, array $array): bool` şeklindedir.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Bkz. [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Dizideki tüm öğeler üzerinde `$transformer`'ı çağırır ve döndürülen değerlerin bir dizisini döndürür. Geri arama imzası `function ($value, $key, array $array): mixed` şeklindedir.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Orijinal dizinin değerlerini ve anahtarlarını dönüştürerek yeni bir dizi oluşturur. `$transformer` fonksiyonunun imzası `function ($value, $key, array $array): ?array{$newKey, $newValue}` şeklindedir. Eğer `$transformer` `null` döndürürse, öğe atlanır. Korunan öğeler için, döndürülen dizinin ilk öğesi yeni anahtar olarak ve ikinci öğesi yeni değer olarak kullanılır.

```php
$array = ['a' => 1, 'b' => 2];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Bu metot, dizinin yapısını (anahtarları ve değerleri aynı anda) değiştirmeniz veya dönüşüm sırasında öğeleri filtrelemeniz (istenmeyen öğeler için null döndürerek) gerektiğinde kullanışlıdır.


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

İki diziyi özyinelemeli olarak birleştirir. Örneğin, ağaç yapılarını birleştirmek için kullanışlıdır. Birleştirme sırasında, dizilere uygulanan `+` operatörü ile aynı kuralları izler, yani ikinci diziden anahtar/değer çiftlerini birinci diziye ekler ve anahtar çakışması durumunda birinci dizideki değeri korur.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

İkinci dizideki değerler her zaman birinci dizinin sonuna eklenir. İkinci dizideki `10` değerinin kaybolması biraz kafa karıştırıcı görünebilir. Bu değerin ve aynı şekilde birinci dizideki `5` değerinin aynı sayısal anahtar `0`'a atandığını unutmamak gerekir, bu nedenle sonuçtaki dizide yalnızca birinci dizideki öğe bulunur.


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

Diziyi ilişkisel bir diziye normalleştirir. Sayısal anahtarları değerleriyle değiştirir, yeni değer `$filling` olur.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

Bir öğenin değerini diziden döndürür ve kaldırır. Eğer mevcut değilse, istisna fırlatır veya belirtilmişse `$default` değerini döndürür.

```php
$array = [1 => 'foo', 'x' => 'bar'];
$a = Arrays::pick($array, 'x');
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// Nette\InvalidArgumentException fırlatır
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Dizideki bir anahtarı yeniden adlandırır. Anahtar dizide bulunursa `true` döndürür.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Belirtilen anahtarın dizideki konumunu döndürür. Konum 0'dan başlar. Anahtar bulunamazsa, fonksiyon `null` döndürür.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // 0 döndürür
$position = Arrays::getKeyOffset($array, 'second'); // 1 döndürür
$position = Arrays::getKeyOffset($array, 'not-exists'); // null döndürür
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Dizideki en az bir öğenin `$predicate` içinde uygulanan testi geçip geçmediğini test eder. İmza `function ($value, $key, array $array): bool` şeklindedir.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Bkz. [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Bir değeri dizi anahtarına dönüştürür; bu ya bir tamsayı ya da bir karakter dizisidir.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

`$array` dizisinin öğelerini `$object` nesnesine kopyalar ve ardından nesneyi döndürür.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // $obj->foo = 1; $obj->bar = 2; ayarlar
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Dizideki her öğeyi bir karakter dizisine dönüştürür ve `$prefix` öneki ve `$suffix` soneki ile sarar.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

[api:Nette\Utils\ArrayHash] nesnesi, genel `stdClass` sınıfının bir alt sınıfıdır ve onu bir dizi gibi ele alma yeteneğiyle genişletir, yani örneğin üyelere köşeli parantezlerle erişme:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // aynı zamanda nesne gösterimi de çalışır
$hash->foo; // 123
```

Öğe sayısını öğrenmek için `count($hash)` fonksiyonunu kullanabilirsiniz.

Nesne üzerinde, bir dizi durumunda olduğu gibi, referansla bile yinelenebilir:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Mevcut bir diziyi `from()` metoduyla `ArrayHash`'e dönüştürebiliriz:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Dönüşüm özyinelemelidir:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // ArrayHash nesnesi
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Bu, ikinci parametre ile önlenebilir:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // dizi
```

Tekrar diziye dönüştürme:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList], indekslerin yalnızca 0'dan başlayarak artan tamsayılar olduğu doğrusal bir diziyi temsil eder.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Mevcut bir diziyi `from()` metoduyla `ArrayList`'e dönüştürebiliriz:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Öğe sayısını öğrenmek için `count($list)` fonksiyonunu kullanabilirsiniz.

Nesne üzerinde, bir dizi durumunda olduğu gibi, referansla bile yinelenebilir:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

İzin verilen değerlerin dışındaki anahtarlara erişim `Nette\OutOfRangeException` istisnası fırlatır:

```php
echo $list[-1]; // Nette\OutOfRangeException fırlatır
unset($list[30]); // Nette\OutOfRangeException fırlatır
```

Bir anahtarın kaldırılması öğelerin yeniden numaralandırılmasına neden olur:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

`prepend()` metoduyla başa yeni bir öğe eklenebilir:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
