Элементы формы
**************

.[perex]
Обзор стандартных элементов формы.


addText(string|int $name, $label=null, $cols, ?int $maxLength=null): TextInput .[method]
========================================================================================

Добавляет однострочное текстовое поле (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Если пользователь не заполняет поле, возвращает пустую строку `''`, или с помощью `setNullable()` можно указать, чтобы возвращал `null`.

```php
$form->addText('name', 'Имя:')
	->setRequired()
	->setNullable();
```

Автоматически проверяет UTF-8, обрезает пробелы слева и справа и удаляет переводы строк, которые мог бы отправить злоумышленник.

Максимальную длину можно ограничить с помощью `setMaxLength()`. Изменить введенное пользователем значение позволяет [addFilter()|validation#Úprava vstupu].

С помощью `setHtmlType()` можно изменить визуальный характер текстового поля на типы, такие как `search`, `tel` или `url`, см. [спецификацию|https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types]. Помните, что изменение типа является только визуальным и не заменяет функцию валидации. Для типа `url` рекомендуется добавить специфическое правило валидации [URL|validation#Textové vstupy].

.[note]
Для других типов ввода, таких как `number`, `range`, `email`, `date`, `datetime-local`, `time` и `color`, используйте специализированные методы, такие как [#addInteger], [#addFloat], [#addEmail] [#addDate], [#addTime], [#addDateTime] и [#addColor], которые обеспечивают серверную валидацию. Типы `month` и `week` пока не полностью поддерживаются во всех браузерах.

Элементу можно установить так называемое empty-value, что-то вроде значения по умолчанию, но если пользователь его не изменит, элемент вернет пустую строку или `null`.

```php
$form->addText('phone', 'Телефон:')
	->setHtmlType('tel')
	->setEmptyValue('+7'); // Пример для России
```


addTextArea(string|int $name, $label=null): TextArea .[method]
==============================================================

Добавляет поле для ввода многострочного текста (класс [TextArea |api:Nette\Forms\Controls\TextArea]). Если пользователь не заполняет поле, возвращает пустую строку `''`, или с помощью `setNullable()` можно указать, чтобы возвращал `null`.

```php
$form->addTextArea('note', 'Примечание:')
	->addRule($form::MaxLength, 'Примечание слишком длинное', 10000);
```

Автоматически проверяет UTF-8 и нормализует разделители строк на `\n`. В отличие от однострочного поля ввода, обрезка пробелов не происходит.

Максимальную длину можно ограничить с помощью `setMaxLength()`. Изменить введенное пользователем значение позволяет [addFilter()|validation#Úprava vstupu]. Можно установить так называемое empty-value с помощью `setEmptyValue()`.


addInteger(string|int $name, $label=null): TextInput .[method]
==============================================================

Добавляет поле для ввода целого числа (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Возвращает либо integer, либо `null`, если пользователь ничего не ввел.

```php
$form->addInteger('year', 'Год:')
	->addRule($form::Range, 'Год должен быть в диапазоне от %d до %d.', [1900, 2023]);
```

Элемент отображается как `<input type="numeric">`. С помощью метода `setHtmlType()` можно изменить тип на `range` для отображения в виде ползунка, или на `text`, если вы предпочитаете стандартное текстовое поле без специального поведения типа `numeric`.


addFloat(string|int $name, $label=null): TextInput .[method]{data-version:3.1.12}
=================================================================================

Добавляет поле для ввода десятичного числа (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Возвращает либо float, либо `null`, если пользователь ничего не ввел.

```php
$form->addFloat('level', 'Уровень:')
	->setDefaultValue(0)
	->addRule($form::Range, 'Уровень должен быть в диапазоне от %d до %d.', [0, 100]);
```

Элемент отображается как `<input type="numeric">`. С помощью метода `setHtmlType()` можно изменить тип на `range` для отображения в виде ползунка, или на `text`, если вы предпочитаете стандартное текстовое поле без специального поведения типа `numeric`.

Nette и браузер Chrome принимают в качестве разделителя десятичных знаков как запятую, так и точку. Чтобы эта функциональность была доступна и в Firefox, рекомендуется установить атрибут `lang` либо для данного элемента, либо для всей страницы, например `<html lang="ru">`.


addEmail(string|int $name, $label=null, int $maxLength=255): TextInput .[method]
================================================================================

Добавляет поле для ввода адреса электронной почты (класс [TextInput |api:Nette\Forms\Controls\TextInput]). Если пользователь не заполняет поле, возвращает пустую строку `''`, или с помощью `setNullable()` можно указать, чтобы возвращал `null`.

```php
$form->addEmail('email', 'E-mail:');
```

Проверяет, является ли значение действительным адресом электронной почты. Не проверяется, существует ли домен на самом деле, проверяется только синтаксис. Автоматически проверяет UTF-8, обрезает пробелы слева и справа.

Максимальную длину можно ограничить с помощью `setMaxLength()`. Изменить введенное пользователем значение позволяет [addFilter()|validation#Úprava vstupu]. Можно установить так называемое empty-value с помощью `setEmptyValue()`.


addPassword(string|int $name, $label=null, $cols, ?int $maxLength=null): TextInput .[method]
============================================================================================

Добавляет поле для ввода пароля (класс [TextInput |api:Nette\Forms\Controls\TextInput]).

```php
$form->addPassword('password', 'Пароль:')
	->setRequired()
	->addRule($form::MinLength, 'Пароль должен содержать не менее %d символов', 8)
	->addRule($form::Pattern, 'Должен содержать цифру', '.*[0-9].*');
```

При повторном отображении формы поле будет пустым. Автоматически проверяет UTF-8, обрезает пробелы слева и справа и удаляет переводы строк, которые мог бы отправить злоумышленник.


addCheckbox(string|int $name, $caption=null): Checkbox .[method]
================================================================

Добавляет флажок (чекбокс) (класс [Checkbox |api:Nette\Forms\Controls\Checkbox]). Возвращает значение `true` или `false`, в зависимости от того, установлен ли флажок.

```php
$form->addCheckbox('agree', 'Я согласен с условиями')
	->setRequired('Необходимо согласиться с условиями');
```


addCheckboxList(string|int $name, $label=null, ?array $items=null): CheckboxList .[method]
==========================================================================================

Добавляет флажки для выбора нескольких элементов (класс [CheckboxList |api:Nette\Forms\Controls\CheckboxList]). Возвращает массив ключей выбранных элементов. Метод `getSelectedItems()` возвращает значения вместо ключей.

```php
$form->addCheckboxList('colors', 'Цвета:', [
	'r' => 'красный',
	'g' => 'зеленый',
	'b' => 'синий',
]);
```

Массив предлагаемых элементов передаем как третий параметр или методом `setItems()`.

С помощью `setDisabled(['r', 'g'])` можно деактивировать отдельные элементы.

Элемент автоматически проверяет, не произошла ли подделка и что выбранные элементы действительно являются одними из предлагаемых и не были деактивированы. Методом `getRawValue()` можно получить отправленные элементы без этой важной проверки.

При установке выбранных по умолчанию элементов также проверяет, что они являются одними из предлагаемых, иначе выбрасывает исключение. Эту проверку можно отключить с помощью `checkDefaultValue(false)`.

Если вы отправляете форму методом `GET`, вы можете выбрать более компактный способ передачи данных, который экономит размер строки запроса. Он активируется установкой HTML-атрибута формы:

```php
$form->setHtmlAttribute('data-nette-compact');
```


addRadioList(string|int $name, $label=null, ?array $items=null): RadioList .[method]
====================================================================================

Добавляет переключатели (радиокнопки) (класс [RadioList |api:Nette\Forms\Controls\RadioList]). Возвращает ключ выбранного элемента или `null`, если пользователь ничего не выбрал. Метод `getSelectedItem()` возвращает значение вместо ключа.

```php
$sex = [
	'm' => 'мужчина',
	'f' => 'женщина',
];
$form->addRadioList('gender', 'Пол:', $sex);
```

Массив предлагаемых элементов передаем как третий параметр или методом `setItems()`.

С помощью `setDisabled(['m', 'f'])` можно деактивировать отдельные элементы.

Элемент автоматически проверяет, не произошла ли подделка и что выбранный элемент действительно является одним из предлагаемых и не был деактивирован. Методом `getRawValue()` можно получить отправленный элемент без этой важной проверки.

При установке выбранного по умолчанию элемента также проверяет, что он является одним из предлагаемых, иначе выбрасывает исключение. Эту проверку можно отключить с помощью `checkDefaultValue(false)`.


addSelect(string|int $name, $label=null, ?array $items=null, ?int $size=null): SelectBox .[method]
==================================================================================================

Добавляет выпадающий список (select box) (класс [SelectBox |api:Nette\Forms\Controls\SelectBox]). Возвращает ключ выбранного элемента или `null`, если пользователь ничего не выбрал. Метод `getSelectedItem()` возвращает значение вместо ключа.

```php
$countries = [
	'CZ' => 'Чешская Республика',
	'SK' => 'Словакия',
	'GB' => 'Великобритания',
	'RU' => 'Россия', // Добавлен пример
];

$form->addSelect('country', 'Страна:', $countries)
	->setDefaultValue('RU'); // Установлено значение по умолчанию
```

Массив предлагаемых элементов передаем как третий параметр или методом `setItems()`. Элементы могут быть и двумерным массивом:

```php
$countries = [
	'Европа' => [ // Группа опций
		'CZ' => 'Чешская Республика',
		'SK' => 'Словакия',
		'GB' => 'Великобритания',
	],
	'RU' => 'Россия',
	'CA' => 'Канада',
	'US' => 'США',
	'?'  => 'другая',
];
```

У выпадающих списков часто первый элемент имеет особое значение, служит призывом к действию. Для добавления такого элемента служит метод `setPrompt()`.

```php
$form->addSelect('country', 'Страна:', $countries)
	->setPrompt('Выберите страну');
```

С помощью `setDisabled(['CZ', 'SK'])` можно деактивировать отдельные элементы.

Элемент автоматически проверяет, не произошла ли подделка и что выбранный элемент действительно является одним из предлагаемых и не был деактивирован. Методом `getRawValue()` можно получить отправленный элемент без этой важной проверки.

При установке выбранного по умолчанию элемента также проверяет, что он является одним из предлагаемых, иначе выбрасывает исключение. Эту проверку можно отключить с помощью `checkDefaultValue(false)`.


addMultiSelect(string|int $name, $label=null, ?array $items=null, ?int $size=null): MultiSelectBox .[method]
============================================================================================================

Добавляет выпадающий список для выбора нескольких элементов (класс [MultiSelectBox |api:Nette\Forms\Controls\MultiSelectBox]). Возвращает массив ключей выбранных элементов. Метод `getSelectedItems()` возвращает значения вместо ключей.

```php
$form->addMultiSelect('countries', 'Страны:', $countries);
```

Массив предлагаемых элементов передаем как третий параметр или методом `setItems()`. Элементы могут быть и двумерным массивом.

С помощью `setDisabled(['CZ', 'SK'])` можно деактивировать отдельные элементы.

Элемент автоматически проверяет, не произошла ли подделка и что выбранные элементы действительно являются одними из предлагаемых и не были деактивированы. Методом `getRawValue()` можно получить отправленные элементы без этой важной проверки.

При установке выбранных по умолчанию элементов также проверяет, что они являются одними из предлагаемых, иначе выбрасывает исключение. Эту проверку можно отключить с помощью `checkDefaultValue(false)`.


addUpload(string|int $name, $label=null): UploadControl .[method]
=================================================================

Добавляет поле для загрузки файла (класс [UploadControl |api:Nette\Forms\Controls\UploadControl]). Возвращает объект [FileUpload|http:request#FileUpload], даже если пользователь не отправил ни одного файла, что можно проверить методом `FileUpload::hasFile()`.

```php
$form->addUpload('avatar', 'Аватар:')
	->addRule($form::Image, 'Аватар должен быть в формате JPEG, PNG, GIF, WebP или AVIF.')
	->addRule($form::MaxFileSize, 'Максимальный размер 1 МБ.', 1024 * 1024);
```

Если файл не удается корректно загрузить, форма не отправляется успешно и отображается ошибка. То есть при успешной отправке нет необходимости проверять метод `FileUpload::isOk()`.

Никогда не доверяйте оригинальному имени файла, возвращаемому методом `FileUpload::getName()`, клиент мог отправить вредоносное имя файла с целью повредить или взломать ваше приложение.

Правила `MimeType` и `Image` определяют требуемый тип на основе сигнатуры файла и не проверяют его целостность. Не повреждено ли изображение, можно выяснить, например, попытавшись его [загрузить|http:request#toImage].


addMultiUpload(string|int $name, $label=null): UploadControl .[method]
======================================================================

Добавляет поле для загрузки нескольких файлов одновременно (класс [UploadControl |api:Nette\Forms\Controls\UploadControl]). Возвращает массив объектов [FileUpload|http:request#FileUpload]. Метод `FileUpload::hasFile()` у каждого из них будет возвращать `true`.

```php
$form->addMultiUpload('files', 'Файлы:')
	->addRule($form::MaxLength, 'Максимально можно загрузить %d файлов', 10);
```

Если какой-либо файл не удается корректно загрузить, форма не отправляется успешно и отображается ошибка. То есть при успешной отправке нет необходимости проверять метод `FileUpload::isOk()`.

Никогда не доверяйте оригинальным именам файлов, возвращаемым методом `FileUpload::getName()`, клиент мог отправить вредоносное имя файла с целью повредить или взломать ваше приложение.

Правила `MimeType` и `Image` определяют требуемый тип на основе сигнатуры файла и не проверяют его целостность. Не повреждено ли изображение, можно выяснить, например, попытавшись его [загрузить|http:request#toImage].


addDate(string|int $name, $label=null): DateTimeControl .[method]{data-version:3.1.14}
======================================================================================

Добавляет поле, которое позволяет пользователю легко ввести дату, состоящую из года, месяца и дня (класс [DateTimeControl |api:Nette\Forms\Controls\DateTimeControl]).

В качестве значения по умолчанию принимает либо объекты, реализующие интерфейс `DateTimeInterface`, строку с временем, либо число, представляющее UNIX timestamp. То же самое относится к аргументам правил `Min`, `Max` или `Range`, которые определяют минимальную и максимальную допустимую дату.

```php
$form->addDate('date', 'Дата:')
	->setDefaultValue(new DateTime)
	->addRule($form::Min, 'Дата должна быть не ранее месяца назад.', new DateTime('-1 month'));
```

По умолчанию возвращает объект `DateTimeImmutable`, методом `setFormat()` вы можете указать [текстовый формат|https://www.php.net/manual/en/datetime.format.php#refsect1-datetime.format-parameters] или timestamp:

```php
$form->addDate('date', 'Дата:')
	->setFormat('Y-m-d');
```


addTime(string|int $name, $label=null, bool $withSeconds=false): DateTimeControl .[method]{data-version:3.1.14}
===============================================================================================================

Добавляет поле, которое позволяет пользователю легко ввести время, состоящее из часов, минут и, опционально, секунд (класс [DateTimeControl |api:Nette\Forms\Controls\DateTimeControl]).

В качестве значения по умолчанию принимает либо объекты, реализующие интерфейс `DateTimeInterface`, строку с временем, либо число, представляющее UNIX timestamp. Из этих входных данных используется только информация о времени, дата игнорируется. То же самое относится к аргументам правил `Min`, `Max` или `Range`, которые определяют минимальное и максимальное допустимое время. Если установленное минимальное значение выше максимального, создается временной диапазон, пересекающий полночь.

```php
$form->addTime('time', 'Время:', withSeconds: true)
	->addRule($form::Range, 'Время должно быть в диапазоне от %d до %d.', ['12:30', '13:30']);
```

По умолчанию возвращает объект `DateTimeImmutable` (с датой 1 января 1 года), методом `setFormat()` вы можете указать [текстовый формат|https://www.php.net/manual/en/datetime.format.php#refsect1-datetime.format-parameters]:

```php
$form->addTime('time', 'Время:')
	->setFormat('H:i');
```


addDateTime(string|int $name, $label=null, bool $withSeconds=false): DateTimeControl .[method]{data-version:3.1.14}
===================================================================================================================

Добавляет поле, которое позволяет пользователю легко ввести дату и время, состоящие из года, месяца, дня, часов, минут и, опционально, секунд (класс [DateTimeControl |api:Nette\Forms\Controls\DateTimeControl]).

В качестве значения по умолчанию принимает либо объекты, реализующие интерфейс `DateTimeInterface`, строку с временем, либо число, представляющее UNIX timestamp. То же самое относится к аргументам правил `Min`, `Max` или `Range`, которые определяют минимальную и максимальную допустимую дату.

```php
$form->addDateTime('datetime', 'Дата и время:')
	->setDefaultValue(new DateTime)
	->addRule($form::Min, 'Дата должна быть не ранее месяца назад.', new DateTime('-1 month'));
```

По умолчанию возвращает объект `DateTimeImmutable`, методом `setFormat()` вы можете указать [текстовый формат|https://www.php.net/manual/en/datetime.format.php#refsect1-datetime.format-parameters] или timestamp:

```php
$form->addDateTime('datetime')
	->setFormat(DateTimeControl::FormatTimestamp);
```


addColor(string|int $name, $label=null): ColorPicker .[method]{data-version:3.1.14}
===================================================================================

Добавляет поле для выбора цвета (класс [ColorPicker |api:Nette\Forms\Controls\ColorPicker]). Цвет — это строка в формате `#rrggbb`. Если пользователь не сделал выбор, возвращается черный цвет `#000000`.

```php
$form->addColor('color', 'Цвет:')
	->setDefaultValue('#3C8ED7');
```


addHidden(string|int $name, ?string $default=null): HiddenField .[method]
=========================================================================

Добавляет скрытое поле (класс [HiddenField |api:Nette\Forms\Controls\HiddenField]).

```php
$form->addHidden('userid');
```

С помощью `setNullable()` можно настроить, чтобы возвращался `null` вместо пустой строки. Изменить отправленное значение позволяет [addFilter()|validation#Úprava vstupu].

Хотя элемент скрыт, **важно помнить**, что значение все еще может быть изменено или подделано злоумышленником. Всегда тщательно проверяйте и валидируйте все полученные значения на стороне сервера, чтобы предотвратить риски безопасности, связанные с манипуляцией данными.


addSubmit(string|int $name, $caption=null): SubmitButton .[method]
==================================================================

Добавляет кнопку отправки (класс [SubmitButton |api:Nette\Forms\Controls\SubmitButton]).

```php
$form->addSubmit('submit', 'Отправить');
```

В форме может быть несколько кнопок отправки:

```php
$form->addSubmit('register', 'Зарегистрироваться');
$form->addSubmit('cancel', 'Отмена');
```

Чтобы определить, какая из них была нажата, используйте:

```php
if ($form['register']->isSubmittedBy()) {
  // ...
}
```

Если вы не хотите валидировать всю форму при нажатии кнопки (например, для кнопок *Отмена* или *Предпросмотр*), используйте [setValidationScope()|validation#Vypnutí validace].


addButton(string|int $name, $caption): Button .[method]
=======================================================

Добавляет кнопку (класс [Button |api:Nette\Forms\Controls\Button]), которая не имеет функции отправки. Ее можно использовать для какой-либо другой функции, например, вызова JavaScript-функции при нажатии.

```php
$form->addButton('raise', 'Повысить зарплату')
	->setHtmlAttribute('onclick', 'raiseSalary()');
```


addImageButton(string|int $name, ?string $src=null, ?string $alt=null): ImageButton .[method]
=============================================================================================

Добавляет кнопку отправки в виде изображения (класс [ImageButton |api:Nette\Forms\Controls\ImageButton]).

```php
$form->addImageButton('submit', '/path/to/image');
```

При использовании нескольких кнопок отправки можно определить, какая была нажата, с помощью `$form['submit']->isSubmittedBy()`.


addContainer(string|int $name): Container .[method]
===================================================

Добавляет подформу (класс [Container|api:Nette\Forms\Container]), или контейнер, в который можно добавлять другие элементы так же, как мы добавляем их в форму. Работают также методы `setDefaults()` или `getValues()`.

```php
$sub1 = $form->addContainer('first');
$sub1->addText('name', 'Ваше имя:');
$sub1->addEmail('email', 'Email:');

$sub2 = $form->addContainer('second');
$sub2->addText('name', 'Ваше имя:');
$sub2->addEmail('email', 'Email:');
```

Отправленные данные затем возвращаются в виде многомерной структуры:

```php
[
	'first' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
	'second' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
]
```


Обзор настроек
==============

Для всех элементов мы можем вызывать следующие методы (полный обзор в [документации API|https://api.nette.org/forms/master/Nette/Forms/Controls.html]):

.[table-form-methods language-php]
| `setDefaultValue($value)`	| устанавливает значение по умолчанию
| `getValue()` 				| получить текущее значение
| `setOmitted()` 			| [Исключение значения |#vynechání hodnoty]
| `setDisabled()` 			| [Деактивация элементов |#deaktivace prvků]

Отображение:
.[table-form-methods language-php]
| `setCaption($caption)`	| изменяет метку элемента
| `setTranslator($translator)` | устанавливает [переводчик|rendering#Překládání]
| `setHtmlAttribute($name, $value)` | устанавливает [HTML атрибут |rendering#HTML atributy] элемента
| `setHtmlId($id)` 			| устанавливает HTML атрибут `id`
| `setHtmlType($type)` 		| устанавливает HTML атрибут `type`
| `setHtmlName($name)`		| устанавливает HTML атрибут `name`
| `setOption($key, $value)` | [настройки для отображения|rendering#Options]

Валидация:
.[table-form-methods language-php]
| `setRequired()` 			| [обязательный элемент |validation]
| `addRule()` 				| установка [правила валидации |validation#Pravidla]
| `addCondition()`, `addConditionOn()` | установка [условия валидации|validation#Podmínky]
| `addError($message)`		| [передача сообщения об ошибке|validation#chyby-pri-zpracovani]

Для элементов `addText()`, `addPassword()`, `addTextArea()`, `addEmail()`, `addInteger()` можно вызывать следующие методы:

.[table-form-methods language-php]
| `setNullable()` 			| устанавливает, вернет ли getValue() `null` вместо пустой строки
| `setEmptyValue($value)`	| устанавливает специальное значение, которое считается пустой строкой
| `setMaxLength($length)`	| устанавливает максимальное количество разрешенных символов
| `addFilter($filter)`		| [изменение ввода |validation#Úprava vstupu]


Исключение значения
===================

Если нас не интересует значение, введенное пользователем, мы можем с помощью `setOmitted()` исключить его из результата метода `$form->getValues()` или из данных, передаваемых в обработчики. Это удобно для различных паролей для проверки, антиспам-элементов и т. д.

```php
$form->addPassword('passwordVerify', 'Пароль для проверки:')
	->setRequired('Пожалуйста, введите пароль еще раз для проверки')
	->addRule($form::Equal, 'Пароли не совпадают', $form['password'])
	->setOmitted();
```


Деактивация элементов
=====================

Элементы можно деактивировать с помощью `setDisabled()`. Такой элемент пользователь не может редактировать.

```php
$form->addText('username', 'Имя пользователя:')
	->setDisabled();
```

Отключенные элементы браузер вообще не отправляет на сервер, поэтому их не найти в данных, возвращаемых функцией `$form->getValues()`. Однако, если вы установите `setOmitted(false)`, Nette включит в эти данные их значение по умолчанию.

При вызове `setDisabled()` из соображений безопасности **значение элемента удаляется**. Если вы устанавливаете значение по умолчанию, это необходимо делать после его деактивации:

```php
$form->addText('username', 'Имя пользователя:')
	->setDisabled()
	->setDefaultValue($userName);
```

Альтернативой отключенным элементам являются элементы с HTML-атрибутом `readonly`, которые браузер отправляет на сервер. Хотя элемент предназначен только для чтения, **важно помнить**, что его значение все еще может быть изменено или подделано злоумышленником.


Пользовательские элементы
=========================

Помимо широкого спектра встроенных элементов формы, вы можете добавлять в форму пользовательские элементы следующим образом:

```php
$form->addComponent(new DateInput('Дата:'), 'date');
// альтернативный синтаксис: $form['date'] = new DateInput('Дата:');
```

.[note]
Форма является потомком класса [Container| component-model:#Container], а отдельные элементы — потомками [Component | component-model:#Component].

Существует способ определить новые методы формы, служащие для добавления пользовательских элементов (например, `$form->addZip()`). Это так называемые extension methods. Недостаток в том, что для них не будет работать автодополнение в редакторах.

```php
use Nette\Forms\Container;

// добавим метод addZip(string $name, ?string $label = null)
Container::extensionMethod('addZip', function (Container $form, string $name, ?string $label = null) {
	return $form->addText($name, $label)
		->addRule($form::Pattern, 'Не менее 5 цифр', '[0-9]{5}');
});

// использование
$form->addZip('zip', 'Почтовый индекс:');
```


Низкоуровневые элементы
=======================

Можно использовать и элементы, которые мы записываем только в шаблоне и не добавляем в форму каким-либо из методов `$form->addXyz()`. Например, когда мы выводим записи из базы данных и заранее не знаем, сколько их будет и какие у них будут ID, и хотим у каждой строки отобразить чекбокс или радиокнопку, достаточно закодировать это в шаблоне:

```latte
{foreach $items as $item}
	<p><input type=checkbox name="sel[]" value={$item->id}> {$item->name}</p>
{/foreach}
```

А после отправки узнать значение:

```php
$data = $form->getHttpData($form::DataText, 'sel[]');
$data = $form->getHttpData($form::DataText | $form::DataKeys, 'sel[]');
```

где первый параметр — это тип элемента (`DataFile` для `type=file`, `DataLine` для однострочных вводов, таких как `text`, `password`, `email` и т. д., и `DataText` для всех остальных), а второй параметр `sel[]` соответствует HTML-атрибуту name. Тип элемента можно комбинировать со значением `DataKeys`, которое сохраняет ключи элементов. Это особенно полезно для `select`, `radioList` и `checkboxList`.

Существенно то, что `getHttpData()` возвращает санитайзенное значение, в данном случае это всегда будет массив валидных UTF-8 строк, независимо от того, что попытался бы подсунуть серверу злоумышленник. Это аналог прямой работы с `$_POST` или `$_GET`, но с тем существенным отличием, что всегда возвращаются чистые данные, так, как вы привыкли у стандартных элементов форм Nette.



/--comment
Элементы также можно добавить с помощью метода [setItems() |api:Nette\Forms\Controls\SelectBox::setItems()]. Если мы хотим вместо ключей элементов получить непосредственно их значения, этого можно достичь вторым аргументом:

```php
$form->addSelect('country', 'Страна:')
	->setItems($countries, false);
```

```php
// для вывода опций в 1 строку
$form->addRadioList('gender', 'Пол:', $sex)
	->getSeparatorPrototype()->setName(null);
```
\--
