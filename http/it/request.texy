HTTP Request
************

.[perex]
Nette incapsula la richiesta HTTP in oggetti con un'API comprensibile e fornisce allo stesso tempo un filtro di sanificazione.

La richiesta HTTP è rappresentata dall'oggetto [api:Nette\Http\Request]. Se lavorate con Nette, questo oggetto viene creato automaticamente dal framework e potete riceverlo tramite [dependency injection |dependency-injection:passing-dependencies]. Nei presenter, basta chiamare il metodo `$this->getHttpRequest()`. Se lavorate al di fuori del Nette Framework, potete creare l'oggetto usando [RequestFactory|#RequestFactory].

Un grande vantaggio di Nette è che durante la creazione dell'oggetto, pulisce automaticamente tutti i parametri di input GET, POST, COOKIE e anche l'URL dai caratteri di controllo e dalle sequenze UTF-8 non valide. Potete quindi lavorare in sicurezza con questi dati. I dati puliti vengono successivamente utilizzati nei presenter e nei form.

→ [Installazione e requisiti |@home#Instalace]


Nette\Http\Request
==================

Questo oggetto è immutabile. Non ha setter, ha solo un cosiddetto wither `withUrl()`, che non modifica l'oggetto, ma restituisce una nuova istanza con il valore modificato.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Restituisce un clone con un URL diverso.


getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Restituisce l'URL della richiesta come oggetto [UrlScript|urls#UrlScript].

```php
$url = $httpRequest->getUrl();
echo $url; // https://doc.nette.org/cs/?action=edit
echo $url->getHost(); // nette.org
```

Attenzione: i browser non inviano il frammento al server, quindi `$url->getFragment()` restituirà una stringa vuota.


getQuery(?string $key=null): string|array|null .[method]
--------------------------------------------------------
Restituisce i parametri GET della richiesta.

```php
$all = $httpRequest->getQuery(); // restituisce un array di tutti i parametri dall'URL
$id = $httpRequest->getQuery('id'); // restituisce il parametro GET 'id' (o null)
```


getPost(?string $key=null): string|array|null .[method]
-------------------------------------------------------
Restituisce i parametri POST della richiesta.

```php
$all = $httpRequest->getPost(); // restituisce un array di tutti i parametri da POST
$id = $httpRequest->getPost('id'); // restituisce il parametro POST 'id' (o null)
```


getFile(string|string[] $key): Nette\Http\FileUpload|array|null .[method]
-------------------------------------------------------------------------
Restituisce l'[upload|#Uploadované soubory] come oggetto [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // è stato caricato qualche file?
	$file->getUntrustedName(); // nome del file inviato dall'utente
	$file->getSanitizedName(); // nome senza caratteri pericolosi
}
```

Per accedere alla struttura nidificata, specificare un array di chiavi.

```php
//<input type="file" name="my-form[details][avatar]" multiple>
$file = $request->getFile(['my-form', 'details', 'avatar']);
```

Poiché non ci si può fidare dei dati provenienti dall'esterno e quindi nemmeno fare affidamento sulla forma della struttura dei file, questo metodo è più sicuro rispetto, ad esempio, a `$request->getFiles()['my-form']['details']['avatar']`, che potrebbe fallire.


getFiles(): array .[method]
---------------------------
Restituisce l'albero di [tutti gli upload|#Uploadované soubory] in una struttura normalizzata, le cui foglie sono oggetti [api:Nette\Http\FileUpload]:

```php
$files = $httpRequest->getFiles();
```


getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Restituisce un cookie o `null` se non esiste.

```php
$sessId = $httpRequest->getCookie('sess_id');
```


getCookies(): array .[method]
-----------------------------
Restituisce tutti i cookie.

```php
$cookies = $httpRequest->getCookies();
```


getMethod(): string .[method]
-----------------------------
Restituisce il metodo HTTP con cui è stata effettuata la richiesta.

```php
$httpRequest->getMethod(); // GET, POST, HEAD, PUT
```


isMethod(string $method): bool .[method]
----------------------------------------
Verifica il metodo HTTP con cui è stata effettuata la richiesta. Il parametro è case-insensitive.

```php
if ($httpRequest->isMethod('GET')) // ...
```


getHeader(string $header): ?string .[method]
--------------------------------------------
Restituisce un header HTTP o `null` se non esiste. Il parametro è case-insensitive.

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```


getHeaders(): array .[method]
-----------------------------
Restituisce tutti gli header HTTP come array associativo.

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```


isSecured(): bool .[method]
---------------------------
La connessione è crittografata (HTTPS)? Potrebbe essere necessario [impostare il proxy|configuration#HTTP proxy] per un corretto funzionamento.


isSameSite(): bool .[method]
----------------------------
La richiesta proviene dallo stesso (sotto)dominio ed è stata avviata facendo clic su un link? Nette utilizza il cookie `_nss` (precedentemente `nette-samesite`) per il rilevamento.


isAjax(): bool .[method]
------------------------
È una richiesta AJAX?


getRemoteAddress(): ?string .[method]
-------------------------------------
Restituisce l'indirizzo IP dell'utente. Potrebbe essere necessario [impostare il proxy|configuration#HTTP proxy] per un corretto funzionamento.


getRemoteHost(): ?string .[method deprecated]
---------------------------------------------
Restituisce la traduzione DNS dell'indirizzo IP dell'utente. Potrebbe essere necessario [impostare il proxy|configuration#HTTP proxy] per un corretto funzionamento.


getBasicCredentials(): ?string .[method]
----------------------------------------
Restituisce le credenziali di autenticazione per [Basic HTTP authentication |https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication].

```php
[$user, $password] = $httpRequest->getBasicCredentials();
```


getRawBody(): ?string .[method]
-------------------------------
Restituisce il corpo della richiesta HTTP.

```php
$body = $httpRequest->getRawBody();
```


detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Rileva la lingua. Come parametro `$lang` passiamo un array con le lingue supportate dall'applicazione, e restituirà quella che il browser del visitatore preferirebbe vedere. Non c'è magia, si utilizza semplicemente l'header `Accept-Language`. Se non c'è corrispondenza, restituisce `null`.

```php
// il browser invia ad es. Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3
$langs = ['hu', 'pl', 'en']; // lingue supportate dall'applicazione
echo $httpRequest->detectLanguage($langs); // en
```


RequestFactory
==============

La classe [api:Nette\Http\RequestFactory] serve per creare un'istanza di `Nette\Http\Request`, che rappresenta la richiesta HTTP corrente. (Se lavorate con Nette, l'oggetto della richiesta HTTP viene creato automaticamente dal framework.)

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

Il metodo `fromGlobals()` crea l'oggetto della richiesta in base alle variabili globali PHP correnti (`$_GET`, `$_POST`, `$_COOKIE`, `$_FILES` e `$_SERVER`). Durante la creazione dell'oggetto, pulisce automaticamente tutti i parametri di input GET, POST, COOKIE e anche l'URL dai caratteri di controllo e dalle sequenze UTF-8 non valide, garantendo la sicurezza nel successivo lavoro con questi dati.

RequestFactory può essere configurata prima di chiamare `fromGlobals()`:

- con il metodo `$factory->setBinary()` disabilitate la pulizia automatica dei parametri di input dai caratteri di controllo e dalle sequenze UTF-8 non valide.
- con il metodo `$factory->setProxy(...)` specificate l'indirizzo IP del [server proxy |configuration#HTTP proxy], necessario per il corretto rilevamento dell'indirizzo IP dell'utente.

RequestFactory consente di definire filtri che trasformano automaticamente parti dell'URL della richiesta. Questi filtri rimuovono caratteri indesiderati dall'URL, che possono essere inseriti lì, ad esempio, da un'implementazione errata dei sistemi di commento su vari siti web:

```php
// rimozione degli spazi dal percorso
$requestFactory->urlFilters['path']['%20'] = '';

// rimozione di punto, virgola o parentesi destra dalla fine dell'URI
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// pulizia del percorso dalle doppie barre (filtro predefinito)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```

La prima chiave `'path'` o `'url'` specifica a quale parte dell'URL applicare il filtro. La seconda chiave è l'espressione regolare da cercare e il valore è la sostituzione da utilizzare al posto del testo trovato.


File Caricati
=============

Il metodo `Nette\Http\Request::getFiles()` restituisce un array di tutti gli upload in una struttura normalizzata, le cui foglie sono oggetti [api:Nette\Http\FileUpload]. Questi incapsulano i dati inviati dall'elemento del form `<input type=file>`.

La struttura riflette la denominazione degli elementi in HTML. Nel caso più semplice, può essere un singolo elemento del form nominato inviato come:

```latte
<input type="file" name="avatar">
```

In questo caso, `$request->getFiles()` restituisce un array:

```php
[
	'avatar' => /* FileUpload instance */
]
```

L'oggetto `FileUpload` viene creato anche nel caso in cui l'utente non abbia inviato alcun file o l'invio sia fallito. Il metodo `hasFile()` restituisce se il file è stato inviato:

```php
$request->getFile('avatar')->hasFile();
```

Nel caso di un nome di elemento che utilizza la notazione per array:

```latte
<input type="file" name="my-form[details][avatar]">
```

l'albero restituito appare così:

```php
[
	'my-form' => [
		'details' => [
			'avatar' => /* FileUpload instance */
		],
	],
]
```

È possibile creare anche un array di file:

```latte
<input type="file" name="my-form[details][avatars][]" multiple>
```

In tal caso, la struttura appare così:

```php
[
	'my-form' => [
		'details' => [
			'avatars' => [
				0 => /* FileUpload instance */,
				1 => /* FileUpload instance */,
				2 => /* FileUpload instance */,
			],
		],
	],
]
```

Il modo migliore per accedere all'indice 1 dell'array nidificato è il seguente:

```php
$file = $request->getFile(['my-form', 'details', 'avatars', 1]);
if ($file instanceof FileUpload) {
	// ...
}
```

Poiché non ci si può fidare dei dati provenienti dall'esterno e quindi nemmeno fare affidamento sulla forma della struttura dei file, questo metodo è più sicuro rispetto, ad esempio, a `$request->getFiles()['my-form']['details']['avatars'][1]`, che potrebbe fallire.


Panoramica dei metodi `FileUpload` .{toc: FileUpload}
-----------------------------------------------------


hasFile(): bool .[method]
-------------------------
Restituisce `true` se l'utente ha caricato un file.


isOk(): bool .[method]
----------------------
Restituisce `true` se il file è stato caricato con successo.


getError(): int .[method]
-------------------------
Restituisce il codice di errore durante il caricamento del file. È una delle costanti [UPLOAD_ERR_XXX|http://php.net/manual/en/features.file-upload.errors.php]. Se il caricamento è avvenuto correttamente, restituisce `UPLOAD_ERR_OK`.


move(string $dest) .[method]
----------------------------
Sposta il file caricato in una nuova posizione. Se il file di destinazione esiste già, verrà sovrascritto.

```php
$file->move('/path/to/files/name.ext');
```


getContents(): ?string .[method]
--------------------------------
Restituisce il contenuto del file caricato. Se il caricamento non è andato a buon fine, restituisce `null`.


getContentType(): ?string .[method]
-----------------------------------
Rileva il tipo di contenuto MIME del file caricato in base alla sua firma. Se il caricamento non è andato a buon fine o il rilevamento fallisce, restituisce `null`.

.[caution]
Richiede l'estensione PHP `fileinfo`.


getUntrustedName(): string .[method]
------------------------------------
Restituisce il nome originale del file, come inviato dal browser.

.[caution]
Non fidatevi del valore restituito da questo metodo. Il client potrebbe aver inviato un nome di file dannoso con l'intenzione di danneggiare o hackerare la vostra applicazione.


getSanitizedName(): string .[method]
------------------------------------
Restituisce il nome del file sanificato. Contiene solo caratteri ASCII `[a-zA-Z0-9.-]`. Se il nome non contiene tali caratteri, restituisce `'unknown'`. Se il file è un'immagine in formato JPEG, PNG, GIF, WebP o AVIF, restituisce anche l'estensione corretta.

.[caution]
Richiede l'estensione PHP `fileinfo`.


getSuggestedExtension(): ?string .[method]{data-version:3.2.4}
--------------------------------------------------------------
Restituisce un'estensione di file appropriata (senza punto) corrispondente al tipo MIME rilevato.

.[caution]
Richiede l'estensione PHP `fileinfo`.


getUntrustedFullPath(): string .[method]
----------------------------------------
Restituisce il percorso originale del file, come inviato dal browser durante il caricamento di una cartella. Il percorso completo è disponibile solo in PHP 8.1 e versioni successive. Nelle versioni precedenti, questo metodo restituisce il nome originale del file.

.[caution]
Non fidatevi del valore restituito da questo metodo. Il client potrebbe aver inviato un nome di file dannoso con l'intenzione di danneggiare o hackerare la vostra applicazione.


getSize(): int .[method]
------------------------
Restituisce la dimensione del file caricato. Se il caricamento non è andato a buon fine, restituisce `0`.


getTemporaryFile(): string .[method]
------------------------------------
Restituisce il percorso della posizione temporanea del file caricato. Se il caricamento non è andato a buon fine, restituisce `''`.


isImage(): bool .[method]
-------------------------
Restituisce `true` se il file caricato è un'immagine in formato JPEG, PNG, GIF, WebP o AVIF. Il rilevamento avviene in base alla sua firma e non viene verificata l'integrità dell'intero file. È possibile verificare se un'immagine è danneggiata, ad esempio, provando a [caricarla|#toImage].

.[caution]
Richiede l'estensione PHP `fileinfo`.


getImageSize(): ?array .[method]
--------------------------------
Restituisce la coppia `[larghezza, altezza]` con le dimensioni dell'immagine caricata. Se il caricamento non è andato a buon fine o non si tratta di un'immagine valida, restituisce `null`.


toImage(): Nette\Utils\Image .[method]
--------------------------------------
Carica l'immagine come oggetto [Image|utils:images]. Se il caricamento non è andato a buon fine o non si tratta di un'immagine valida, lancia un'eccezione `Nette\Utils\ImageException`.
