Créez votre première application !
**********************************

.[perex]
Apprenez à connaître Nette Framework tout en créant un simple blog avec des commentaires. Commençons !

Après les deux premiers chapitres, vous aurez votre propre blog fonctionnel et vous serez prêt à publier vos superbes articles, même si les fonctionnalités seront assez limitées après avoir terminé ces deux chapitres. Pour rendre les choses plus agréables pour vos utilisateurs, vous devriez également lire les chapitres suivants et continuer à améliorer votre application.

Vous pouvez trouver l'[application complète sur GitHub |https://github.com/nette-examples/quickstart/tree/v4.0].

Veuillez installer l'[IDE complet et tous les plugins nécessaires |best-practices:editors-and-tools], cela vous rendra extrêmement efficace.

Ce QuickStart a été écrit pour Nette Framework 3.1 et PHP 8.0 ou plus récent.

Vous pouvez télécharger le Nette Framework manuellement, mais la méthode recommandée pour démarrer un nouveau projet est d'utiliser [Composer |best-practices:composer]. Si vous ne connaissez pas le Composer, vous devez absolument commencer par là. C'est un outil vraiment simple et utile, consultez [leur documentation |https://getcomposer.org/doc/].

Avec Composer, vous pouvez télécharger et installer très facilement le squelette d'application connu sous le nom de Web Project incluant Nette Framework. Pour ce faire, trouvez votre répertoire webroot (par exemple `/var/www` ou `C:\InetPub`) dans votre ligne de commande et exécutez la commande suivante :

```shell
composer create-project nette/web-project nette-blog
```

Web Project sera téléchargé dans le répertoire `nette-blog`.

.[note]
Si vous n'avez pas pu utiliser Composer, [téléchargez |https://github.com/nette/web-project/archive/preloaded.zip] et extrayez l'archive, copiez-la dans le répertoire racine du serveur Web et renommez-la en `nette-blog`. L'ensemble du framework se trouve dans le dossier `vendor`.

Si vous développez sous macOS ou Linux (ou tout autre système basé sur Unix), vous devez [configurer des privilèges d'écriture |nette:troubleshooting#Setting directory permissions] sur le serveur Web.


La page d'accueil .[#toc-the-welcome-page]
==========================================

A ce moment, la page de bienvenue du projet Web devrait être en cours d'exécution. Essayez-la en ouvrant votre navigateur et en allant à l'URL suivante :

```
http://localhost/nette-blog/www/
```

et vous devriez voir la page de bienvenue de Nette Framework :

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

L'application fonctionne et vous pouvez maintenant commencer à y apporter des modifications.

.[note]
Si vous rencontrez un problème, [essayez ces quelques conseils |nette:troubleshooting#Nette Is Not Working, White Page Is Displayed].


Contenu du projet Web .[#toc-web-project-s-content]
===================================================

Le projet Web a la structure suivante :

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← répertoire des applications
│   ├── <b>Presenters/</b>   ← classes de présentateurs
│   │   └── <b>templates/</b>← modèles
│   ├── <b>Router/</b>       ← configuration des adresses URL
│   └── <b>Bootstrap.php</b> ← classe de démarrage Bootstrap
├── <b>bin/</b>              ← scripts pour la ligne de commande
├── <b>config/</b>           ← les fichiers de configuration
├── <b>log/</b>              ← journaux d'erreurs
├── <b>temp/</b>             ← fichiers temporaires, cache, …
├── <b>vendor/</b>           ← bibliothèques installées par Composer
│   └── <b>autoload.php</b>  ← autoloading des bibliothèques installées par Composer
└── <b>www/</b>              ← dossier public - le seul endroit accessible depuis le navigateur
    └── <b>index.php</b>     ← fichier initial qui lance l'application
\--

Le répertoire `www` est censé stocker les images, JavaScript, CSS, et autres fichiers accessibles au public. C'est le seul répertoire directement accessible depuis le navigateur, vous pouvez donc faire pointer le répertoire racine de votre serveur web ici (vous pouvez le configurer dans Apache, mais faisons-le plus tard car ce n'est pas important pour le moment).

Le répertoire le plus important pour vous est `app/`. Vous y trouverez le fichier `Bootstrap.php`, dans lequel se trouve une classe qui charge le framework et configure l'application. Elle active l'[autoloading |robot-loader:] et configure le [débogueur |tracy:] et les [routes |application:routing].


Nettoyage de .[#toc-cleanup]
============================

Le projet Web contient une page de bienvenue, que nous pouvons supprimer - n'hésitez pas à supprimer le fichier `app/Presenters/templates/Homepage/default.latte` et à le remplacer par le texte "Hello world !".


[* qs-hello.webp .{url:-} *]


Tracy (Débogueur) .[#toc-tracy-debugger]
========================================

Un outil extrêmement important pour le développement est [un débogueur appelé Tracy |tracy:]. Essayez de faire quelques erreurs dans votre fichier `app/Presenters/HomepagePresenter.php` (par exemple, supprimez une accolade de la définition de la classe HomepagePresenter) et voyez ce qui se passe. Une page d'écran rouge apparaîtra avec une description compréhensible de l'erreur.

[* qs-tracy.webp .{url:-}(debugger screen) *]

Tracy vous aidera considérablement dans la recherche des erreurs. Notez également la barre Tracy flottante dans le coin inférieur droit, qui vous informe sur les données d'exécution importantes.

[* qs-tracybar.webp .{url:-} *]

En mode production, Tracy est, bien entendu, désactivé et ne révèle aucune information sensible. Toutes les erreurs sont enregistrées dans le répertoire `log/` à la place. Essayez-le. Dans `app/Bootstrap.php`, trouvez le morceau de code suivant, décommentez la ligne et changez le paramètre d'appel de méthode en `false`, de sorte que cela ressemble à ceci :

```php .{file:app/Bootstrap.php}
...
$configurator->setDebugMode(false);
$configurator->enableTracy(__DIR__ . '/../log');
...
```

Après avoir rafraîchi la page Web, la page d'écran rouge sera remplacée par le message convivial :

[* qs-fatal.webp .{url:-}(error screen) *]

Maintenant, regardez dans le répertoire `log/`. Vous y trouverez le journal des erreurs (dans le fichier exception.log) ainsi que la page contenant le message d'erreur (enregistrée dans un fichier HTML dont le nom commence par `exception`).

Commentez à nouveau la ligne `// $configurator->setDebugMode(false);`. Tracy active automatiquement le mode de développement sur l'environnement `localhost` et le désactive ailleurs.

Maintenant, nous pouvons corriger le bogue et continuer à concevoir notre application.


Envoyer des remerciements .[#toc-send-thanks]
=============================================

Nous allons vous montrer une astuce qui fera le bonheur des auteurs de logiciels libres. Vous pouvez facilement donner une étoile sur GitHub aux bibliothèques que votre projet utilise. Il suffit de l'exécuter :

```shell
composer thanks
```

Essayez-le !

{{priority: -1}}
{{sitename: Nette Quickstart}}
