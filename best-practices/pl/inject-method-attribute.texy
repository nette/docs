Metody i atrybuty inject
************************

.[perex]
W tym artykule skupimy się na różnych sposobach przekazywania zależności do prezenterów w frameworku Nette. Porównamy preferowany sposób, którym jest konstruktor, z innymi możliwościami, takimi jak metody i atrybuty `inject`.

Również dla prezenterów obowiązuje zasada, że przekazywanie zależności za pomocą [konstruktora |dependency-injection:passing-dependencies#Przekazywanie przez konstruktor] jest preferowaną ścieżką.
Jeśli jednak tworzysz wspólnego przodka, z którego dziedziczą inne presentery (np. `BasePresenter`), i ten przodek również ma zależności, pojawia się problem, który nazywamy [constructor hell |dependency-injection:passing-dependencies#Constructor hell].
Można go obejść za pomocą alternatywnych ścieżek, które stanowią metody i atrybuty (adnotacje) `inject`.


Metody `inject*()`
==================

Jest to forma przekazywania zależności przez [setter |dependency-injection:passing-dependencies#Przekazywanie przez setter]. Nazwa tych setterów zaczyna się prefiksem `inject`.
Nette DI automatycznie wywołuje tak nazwane metody zaraz po utworzeniu instancji presentera i przekazuje im wszystkie wymagane zależności. Muszą być zatem zadeklarowane jako public.

Metody `inject*()` można uznać za pewnego rodzaju rozszerzenie konstruktora na wiele metod. Dzięki temu `BasePresenter` może przyjąć zależności przez inną metodę i pozostawić konstruktor wolny dla swoich potomków:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

Metod `inject*()` presenter może zawierać dowolną liczbę, a każda może mieć dowolną liczbę parametrów. Świetnie sprawdzają się również w przypadkach, gdy presenter jest [złożony z traitów |presenter-traits], a każdy z nich wymaga własnej zależności.


Atrybuty `Inject`
=================

Jest to forma [wstrzykiwania do właściwości |dependency-injection:passing-dependencies#Ustawienie zmiennej]. Wystarczy oznaczyć, do których zmiennych ma nastąpić wstrzyknięcie, a Nette DI automatycznie przekaże zależności zaraz po utworzeniu instancji presentera. Aby mógł je wstawić, konieczne jest zadeklarowanie ich jako public.

Właściwości oznaczamy atrybutem: (wcześniej używano adnotacji `/** @inject */`)

```php
use Nette\DI\Attributes\Inject;  // ta linia jest ważna

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Zaletą tego sposobu przekazywania zależności była bardzo oszczędna forma zapisu. Jednak wraz z pojawieniem się [constructor property promotion |https://blog.nette.org/cs/php-8-0-kompletni-prehled-novinek#toc-constructor-property-promotion] wydaje się łatwiejsze użycie konstruktora.

Z drugiej strony, ten sposób cierpi na te same wady, co przekazywanie zależności do właściwości ogólnie: nie mamy kontroli nad zmianami w zmiennej, a jednocześnie zmienna staje się częścią publicznego interfejsu klasy, co jest niepożądane.


{{sitename: Best Practices}}
