Funções dos flutuadores
***********************

.[perex]
[api:Nette\Utils\Floats] é uma classe estática com funções úteis para comparar números de flutuadores.


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos assumem que a seguinte classe está definida:

```php
use Nette\Utils\Floats;
```


Motivação .[#toc-motivation]
============================

Querendo saber para que serve uma classe de comparação de flutuadores? Você pode usar operadores `<`, `>`, `===`, você acha.
Isto não é inteiramente verdade. O que você acha que irá imprimir este código?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Se você executar o código, alguns de vocês ficarão surpresos que o programa tenha impresso `not same`.

As operações matemáticas com números de flutuação causam erros devido à conversão entre sistemas decimais e binários. Por exemplo, `0.1 + 0.2` equivale a `0.300000000000000044…`. Portanto, ao comparar as bóias flutuantes, devemos tolerar uma pequena diferença a partir de uma determinada casa decimal.

E é isso que a classe `Floats` está fazendo. A comparação a seguir irá funcionar como esperado:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Ao tentar comparar `NAN`, ele lança uma exceção `\LogicException`.


Comparação de flutuadores .[#toc-float-comparison]
==================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Retorna `true` se `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Retorna `true` se `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Retorna `true` se `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Retorna `true` se `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Retorna `true` se `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Se `$a` < `$b`, retorna `-1`, se forem iguais retorna `0` and if `$a` > `$b` retorna `1`.

Ele pode ser usado, por exemplo, com a função `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr is [-3.5, 1, 2, 5]
```


Funções dos auxiliares .[#toc-helpers-functions]
================================================


isZero(float $value): bool .[method]
------------------------------------

Retorna `true` se o valor for zero.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Retorna `true` se o valor for inteiro.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
