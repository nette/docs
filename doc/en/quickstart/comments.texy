Comments
********

The blog has been deployed, we’ve written some very good blog posts and published them via Adminer. People are reading the blog and they’re very passionate about our ideas. We’re receiving many emails with praise each day. But what is all the praise for when we’ve got it only in the email, so no one else can read it? Wouldn’t it be better, if people could comment directly on the blog so that everyone else cloud read how awesome we are?

Let’s make all the articles commentable.


Creating new Table
==================

Fire up Adminer again and create a new table named `comments` with these columns:

- `id` int, check autoincrement (AI)
- `post_id`, foreign key, that refers the `posts` table
- `name` varchar, length 255
- `email` varchar, length 255
- `content` text
- `created_at` timestamp

It should look like this:

[* adminer-comments.png *]

Don’t forget to use InnoDB table storage and hit Save.


Form for Commenting
===================

First, we need to create a form, that will allow the users to comment on our page. Nette Framework has awesome support for forms. They can be configured in a presenter and rendered in a template.

Nette Framework has concept of *components*. A **component** is reusable class or piece of code, that can be attached to another component. Even a presenter is a component. Each component is created using the component factory. So let’s define the comments form in PostPresenter.

/--php
	protected function createComponentCommentForm()
	{
		$form = new Nette\Application\UI\Form;

		$form->addText('name', 'Your name');
		$form->addText('email', 'Email');
		$form->addTextArea('content', 'Comment');
		$form->addSubmit('send', 'Publish comment');

		return $form;
	}
\--

Let’s explain it a little bit. The first line creates new instance of `Form` component.
The following methods are attaching HTML inputs into the form definition.
`->addText` will render as`<input type=text name=name>`, with `<label>Your name</label>`. As you might have already guessed right now, the `->addTextArea` attaches an `<textarea>` and `->addSubmit` an `<input type=submit>`. There is more, but this is all you have to know right now. If you wanna know more right now, [you can read it in documentation|/forms].

Once the form component is defined in a presenter, we can render (display) it in a template. To do so, place the macro `{control}` at the end of the template, of the post detail. It’s located at `app/templates/Post/default.latte`. Because the component is named `commentForm` (its in the name `createComponentCommentForm`), the macro will look like this

/--html
<h2>Post new comment</h2>

{control commentForm}
\--

Now if you check out the detail of some post, there will be new form for posting comments rendered.


Saving to Database
==================

Have you tried to submit some data? You might have noticed, that the form is not performing any action. It’s just there, looking cool and doing nothing. We have to attach a callback method to it, that will save the submitted data.

Inside the component factory for the `commentsForm`, place this line

/--php
$form->onSuccess[] = $this->commentFormSucceeded; // without parenthesis
\--

It means "after the form is successfully submitted, call the method `commentFormSucceeded` of the current presenter". This notation (`$this->commentFormSucceeded`) is one of the *syntactic sugars* added by the [Nette\Object|/php-language-enhancements]. It simply acts as a callback to the method. This method does not exist yet, so let’s create it.

/--php
	public function commentFormSucceeded($form)
	{
		$values = $form->values;

		$this->database->table('comments')->insert(array(
			'post_id' => $this->postId,
			'name' => $values->name,
			'email' => $values->email,
			'content' => $values->content,
		));

		$this->flashMessage('Thank you for your comment', 'success');
		$this->redirect('this');
	}
\--

You should place it right after the `commentsForm` component factory.

The new method has one argument, and it’s the instance of the form being submitted, created by the component factory. We ask the form instance for it’s values, it has been submitted with, by calling `$form->getValues()`. And then we insert the data into database into table `comments`.

There are two more method calls to explain. The redirect literary redirects to the current page. You should do that every time, when the form is submitted, valid and the callback operation did what it should have done. Also, when you redirect the page after submitting the form, you won’t see the well known `Would you like to submit the post data again?` message, that you can sometimes see in the browser. (In general, after submitting a form by POST method, you should always redirect the user to an GET action.)

The `flashMessage` is for informing the user about the result of some operation. Because we’re redirecting, the message cannot be directly passed to template and rendered. So there is this method, that will store it and make it available on the next page load. The flash messages are rendered in the default `app/templates/@layout.latte` file, and it looks like this

/--html
<div n:foreach="$flashes as $flash" class="flash {$flash->type}">{$flash->message}</div>
\--

As we already know, they are passed automatically to the template, so you don’t have to think about it too much, it just works. For more details [check the documentation |/presenters#toc-flash-messages].


Rendering the Comments
======================

This is one of the things you will just love. Nette\Database has this cool feature named *Selection API*. Do you remember, that we’ve created the tables as InnoDB? Adminer have created the so called [foreign keys |http://dev.mysql.com/doc/refman/5.5/en/innodb-foreign-key-constraints.html] that will save a tone of work.

Nette\Database uses the foreign keys to resolve relations between tables, and knowing the relations, it can automatically create queries for you.

As you may remember, we’ve passed the `$post` variable to the template in `PostPresenter::renderDefault()` and now we want to iterate through all the comments, that have the column `post_id` equal to our `$post->id`. You can do it by calling `$post->related(‘comments’)`. It’s simple as that. Look at the resulting code.

/--html
<h2>Comments</h2>

<div class="comments">
	{foreach $post->related('comment')->order('created_at') as $comment}
		<p><b><a href="mailto:{$comment->email}" n:tag-if="$comment->email">{$comment->name}</a></b> said:</p>
		<div>{$comment->content}</div>
	{/foreach}
</div>

\--

Notice the special `n:tag-if` attribute. You already know how `n: attributes` work. Well, If you prepend the attribute with `tag-`, it will only wrap around the tags, not their content. This allows you to make the commenter's name into a link if they provided their web. These two lines are identical in results:

/--html
<strong n:tag-if="$important"> Hello there! </strong>
{if $important}<strong>{/if} Hello there! {if $important}</strong>{/if}
\--html
