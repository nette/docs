Vererbung und Wiederverwendbarkeit von Vorlagen
***********************************************

.[perex]
Die Wiederverwendbarkeit von Vorlagen und die Vererbungsmechanismen sind dazu da, Ihre Produktivität zu steigern, da jede Vorlage nur ihren einzigartigen Inhalt enthält und die sich wiederholenden Elemente und Strukturen wiederverwendet werden. Wir stellen drei Konzepte vor: [Layout-Vererbung |#layout inheritance], [horizontale Wiederverwendung |#horizontal reuse] und [Unit-Vererbung |#unit inheritance].

Das Konzept der Latte-Vorlagenvererbung ähnelt der PHP-Klassenvererbung. Sie definieren eine **Elternvorlage**, von der andere **Kindvorlagen** ableiten und Teile der Elternvorlage außer Kraft setzen können. Es funktioniert hervorragend, wenn Elemente eine gemeinsame Struktur haben. Klingt kompliziert? Keine Sorge, das ist es nicht.


Layout-Vererbung `{layout}` .{toc: Layout Inheritance}
======================================================

Lassen Sie uns die Vererbung von Layoutvorlagen anhand eines Beispiels betrachten. Dies ist eine übergeordnete Vorlage, die wir zum Beispiel `layout.latte` nennen und die ein HTML-Skelettdokument definiert.

```latte
<!doctype html>
<html lang="en">
<head>
	<title>{block title}{/block}</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="content">
		{block content}{/block}
	</div>
	<div id="footer">
		{block footer}&copy; Copyright 2008{/block}
	</div>
</body>
</html>
```

Die `{block}` Tags definieren drei Blöcke, die von untergeordneten Vorlagen ausgefüllt werden können. Mit dem Block-Tag wird der Vorlagen-Engine lediglich mitgeteilt, dass eine untergeordnete Vorlage diese Teile der Vorlage außer Kraft setzen kann, indem sie einen eigenen Block mit demselben Namen definiert.

Eine untergeordnete Vorlage könnte wie folgt aussehen:

```latte
{layout 'layout.latte'}

{block title}My amazing blog{/block}

{block content}
	<p>Welcome to my awesome homepage.</p>
{/block}
```

Der `{layout}` Tag ist hier der Schlüssel. Es teilt der Template-Engine mit, dass diese Vorlage eine andere Vorlage "erweitert". Wenn Latte diese Vorlage rendert, sucht es zunächst die übergeordnete Vorlage - in diesem Fall `layout.latte`.

An diesem Punkt bemerkt die Template-Engine die drei Block-Tags in `layout.latte` und ersetzt diese Blöcke durch den Inhalt der Kind-Vorlage. Da die untergeordnete Vorlage den *Fußzeilenblock* nicht definiert hat, wird stattdessen der Inhalt der übergeordneten Vorlage verwendet. Der Inhalt innerhalb eines `{block}` -Tags in einer übergeordneten Vorlage wird immer als Fallback verwendet.

Die Ausgabe könnte wie folgt aussehen:

```latte
<!doctype html>
<html lang="en">
<head>
	<title>My amazing blog</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="content">
		<p>Welcome to my awesome homepage.</p>
	</div>
	<div id="footer">
		&copy; Copyright 2008
	</div>
</body>
</html>
```

In einer untergeordneten Vorlage können sich Blöcke nur entweder auf der obersten Ebene oder innerhalb eines anderen Blocks befinden, d. h:

```latte
{block content}
	<h1>{block title}Welcome to my awesome homepage{/block}</h1>
{/block}
```

Außerdem wird immer ein Block erstellt, unabhängig davon, ob die umgebende Bedingung `{if}` als wahr oder falsch ausgewertet wird. Im Gegensatz zu dem, was Sie vielleicht denken, definiert diese Vorlage tatsächlich einen Block.

```latte
{if false}
	{block head}
		<meta name="robots" content="noindex, follow">
	{/block}
{/if}
```

Wenn Sie möchten, dass die Ausgabe innerhalb des Blocks nur unter bestimmten Bedingungen angezeigt wird, verwenden Sie stattdessen das Folgende:

```latte
{block head}
	{if $condition}
		<meta name="robots" content="noindex, follow">
	{/if}
{/block}
```

Daten außerhalb eines Blocks in einer untergeordneten Vorlage werden ausgeführt, bevor die Layoutvorlage gerendert wird. Sie können damit Variablen wie `{var $foo = bar}` definieren und Daten an die gesamte Vererbungskette weitergeben:

```latte
{layout 'layout.latte'}
{var $robots = noindex}

...
```


Mehrstufige Vererbung .[#toc-multilevel-inheritance]
----------------------------------------------------
Sie können so viele Vererbungsebenen verwenden, wie Sie benötigen. Eine gängige Methode zur Verwendung der Layoutvererbung ist der folgende dreistufige Ansatz:

1) Erstellen Sie eine Vorlage `layout.latte`, die das Hauptdesign Ihrer Website enthält.
2) Erstellen Sie eine Vorlage `layout-SECTIONNAME.latte` für jeden Abschnitt Ihrer Website. Zum Beispiel: `layout-news.latte`, `layout-blog.latte` usw. Diese Vorlagen erweitern alle `layout.latte` und enthalten abschnittsspezifische Stile/Designs.
3) Erstellen Sie individuelle Vorlagen für jede Art von Seite, z. B. für einen Nachrichtenartikel oder einen Blogeintrag. Diese Vorlagen erweitern die entsprechende Bereichsvorlage.


Dynamische Layout-Vererbung .[#toc-dynamic-layout-inheritance]
--------------------------------------------------------------
Sie können eine Variable oder einen beliebigen PHP-Ausdruck als Namen der übergeordneten Vorlage verwenden, so dass sich die Vererbung dynamisch verhalten kann:

```latte
{layout $standalone ? 'minimum.latte' : 'layout.latte'}
```

Sie können auch die Latte-API verwenden, um die Layout-Vorlage [automatisch |develop#automatic-layout-lookup] auszuwählen.


Tipps .[#toc-tips]
------------------
Hier finden Sie einige Tipps für die Arbeit mit Layoutvererbung:

- Wenn Sie `{layout}` in einer Vorlage verwenden, muss es das erste Vorlagen-Tag in dieser Vorlage sein.

- Das Tag `{layout}` hat den Alias `{extends}`.

- Der Dateiname der erweiterten Vorlage hängt vom [Vorlagenlader |extending-latte#Loaders] ab.

- Sie können so viele Blöcke haben, wie Sie wollen. Denken Sie daran, dass untergeordnete Vorlagen nicht alle übergeordneten Blöcke definieren müssen. Sie können also in einer Reihe von Blöcken vernünftige Vorgaben machen und dann nur die Blöcke definieren, die Sie später benötigen.


Blöcke `{block}` .{toc: Blocks}
===============================

.[note]
Siehe auch Anonymität [`{block}` |tags#block]

Ein Block bietet eine Möglichkeit, die Darstellung eines bestimmten Teils einer Vorlage zu ändern, greift aber in keiner Weise in die Logik der Vorlage ein. Anhand des folgenden Beispiels soll gezeigt werden, wie ein Block funktioniert und, was noch wichtiger ist, wie er nicht funktioniert:

```latte
{* parent.Latte *}
{foreach $posts as $post}
{block post}
	<h1>{$post->title}</h1>
	<p>{$post->body}</p>
{/block}
{/foreach}
```

Wenn Sie diese Vorlage rendern, wäre das Ergebnis mit oder ohne die Block-Tags genau dasselbe. Blöcke haben Zugriff auf Variablen aus äußeren Bereichen. Dies ist nur eine Möglichkeit, sie durch eine untergeordnete Vorlage überschreibbar zu machen:

```latte
{* child.Latte *}
{layout 'parent.Latte'}

{block post}
	<article>
		<header>{$post->title}</header>
		<section>{$post->text}</section>
	</article>
{/block}
```

Beim Rendern der Child-Vorlage verwendet die Schleife nun den in der Child-Vorlage `child.Latte` definierten Block anstelle des in der Basis-Vorlage `parent.Latte` definierten Blocks; die ausgeführte Vorlage entspricht dann der folgenden:

```latte
{foreach $posts as $post}
	<article>
		<header>{$post->title}</header>
		<section>{$post->text}</section>
	</article>
{/foreach}
```

Wenn wir jedoch eine neue Variable innerhalb eines benannten Blocks erstellen oder einen Wert einer bestehenden Variable ersetzen, wird die Änderung nur innerhalb des Blocks sichtbar:

```latte
{var $foo = 'foo'}
{block post}
	{do $foo = 'new value'}
	{var $bar = 'bar'}
{/block}

foo: {$foo}                  // prints: foo
bar: {$bar ?? 'not defined'} // prints: not defined
```

Der Inhalt des Blocks kann durch [Filter |syntax#filters] geändert werden. Das folgende Beispiel entfernt den gesamten HTML-Code und setzt ihn in Großbuchstaben:

```latte
<title>{block title|stripHtml|capitalize}...{/block}</title>
```

Der Tag kann auch als [n:attribute |syntax#n:attributes] geschrieben werden:

```latte
<article n:block=post>
	...
</article>
```


Lokale Blöcke .{data-version:2.9}[#toc-local-blocks]
----------------------------------------------------

Jeder Block überschreibt den Inhalt des übergeordneten Blocks mit demselben Namen. Außer bei lokalen Blöcken. Sie sind so etwas wie private Methoden in einer Klasse. Sie können eine Vorlage erstellen, ohne befürchten zu müssen, dass sie - aufgrund der Übereinstimmung der Blocknamen - von der zweiten Vorlage überschrieben werden.

```latte
{block local helper}
	...
{/block}
```


Blöcke drucken `{include}` .{toc: Printing Blocks}
--------------------------------------------------

.[note]
Siehe auch [`{include file}` |tags#include]

Um einen Block an einer bestimmten Stelle zu drucken, verwenden Sie das Tag `{include blockname}`:

```latte
<title>{block title}{/block}</title>

<h1>{include title}</h1>
```

Sie können auch einen Block aus einer anderen Vorlage anzeigen:

```latte
{include footer from 'main.latte'}
```

Gedruckte Blöcke haben keinen Zugriff auf die Variablen des aktiven Kontexts, es sei denn, der Block ist in derselben Datei definiert, in die er eingebunden ist. Sie haben jedoch Zugriff auf die globalen Variablen.

Sie können Variablen auf diese Weise übergeben:

```latte
{* seit Latte 2.9 *}
{include footer, foo: bar, id: 123}

{* vor Latte 2.9 *}
{include footer, foo => bar, id => 123}
```

Sie können eine Variable oder einen beliebigen Ausdruck in PHP als Blocknamen verwenden. Fügen Sie in diesem Fall das Schlüsselwort `block` vor der Variablen ein, damit zur Kompilierzeit bekannt ist, dass es sich um einen Block handelt und nicht um eine [Vorlage |tags#include], deren Name auch in der Variablen stehen könnte:

```latte
{var $name = footer}
{include block $name}
```

Ein Block kann auch in sich selbst ausgedruckt werden, was z. B. bei der Darstellung einer Baumstruktur nützlich ist:

```latte
{define menu, $items}
<ul>
	{foreach $items as $item}
		<li>
		{if is_array($item)}
			{include menu, $item}
		{else}
			{$item}
		{/if}
		</li>
	{/foreach}
</ul>
{/define}
```

Anstelle von `{include menu, ...}` können wir auch `{include this, ...}` schreiben, wobei `this` für den aktuellen Block steht.

Der gedruckte Inhalt kann durch [Filter |syntax#filters] verändert werden. Das folgende Beispiel entfernt den gesamten HTML-Code und setzt ihn in Großbuchstaben:

```latte
<title>{include heading|stripHtml|capitalize}</title>
```


Übergeordneter Block .[#toc-parent-block]
-----------------------------------------

Wenn Sie den Inhalt des Blocks aus der übergeordneten Vorlage ausgeben möchten, können Sie dies mit der Anweisung `{include parent}` tun. Dies ist nützlich, wenn Sie den Inhalt eines übergeordneten Blocks ergänzen möchten, anstatt ihn vollständig zu überschreiben.

```latte
{block footer}
	{include parent}
	<a href="https://github.com/nette">GitHub</a>
	<a href="https://twitter.com/nettefw">Twitter</a>
{/block}
```


Definitionen `{define}` .{toc: Definitions}
-------------------------------------------

Zusätzlich zu den Blöcken gibt es in Latte auch "Definitionen". Sie sind vergleichbar mit Funktionen in regulären Programmiersprachen. Sie sind nützlich, um Vorlagenfragmente wiederzuverwenden und sich nicht zu wiederholen.

Latte versucht, die Dinge einfach zu machen, daher sind die Definitionen im Grunde dasselbe wie Blöcke, und **alles, was über Blöcke gesagt wird, gilt auch für Definitionen**. Es unterscheidet sich von Blöcken nur in drei Punkten:

1) sie können Argumente akzeptieren
2) sie können keine [Filter |syntax#filters] haben
3) sie sind in Tags eingeschlossen `{define}` und der Inhalt innerhalb dieser Tags wird erst dann an die Ausgabe gesendet, wenn Sie sie einschließen. Daher können Sie sie überall erstellen:

```latte
{block foo}<p>Hello</p>{/block}
{* prints: <p>Hello</p> *}

{define bar}<p>World</p>{/define}
{* prints nothing *}

{include bar}
{* prints: <p>World</p> *}
```

Stellen Sie sich vor, Sie hätten eine generische Hilfsvorlage, die definiert, wie HTML-Formulare über Definitionen dargestellt werden:

```latte
{* forms.latte *}
{define input, $name, $value, $type = 'text'}
	<input type={$type} name={$name} value={$value}>
{/define}

{define textarea, $name, $value}
	<textarea name={$name}>{$value}</textarea>
{/define}
```

Argumente einer Definition sind immer optional mit dem Standardwert `null`, es sei denn, es wird ein Standardwert angegeben (hier ist `text` der Standardwert für `$type`, möglich seit Latte 2.9.1). Ab Latte 2.7 können auch Parametertypen deklariert werden: `{define input, string $name, ...}`.

Definitionen haben keinen Zugriff auf die Variablen des aktiven Kontexts, aber sie haben Zugriff auf globale Variablen.

Sie werden auf die [gleiche Weise wie ein Block |#Printing Blocks] eingebunden:

```latte
<p>{include input, 'password', null, 'password'}</p>
<p>{include textarea, 'comment'}</p>
```


Dynamische Block-Namen .[#toc-dynamic-block-names]
--------------------------------------------------

Latte erlaubt eine große Flexibilität bei der Definition von Blöcken, da der Blockname ein beliebiger PHP-Ausdruck sein kann. In diesem Beispiel werden drei Blöcke mit den Namen `hi-Peter`, `hi-John` und `hi-Mary` definiert:

```latte
{* parent.latte *}
{foreach [Peter, John, Mary] as $name}
	{block "hi-$name"}Hallo, ich bin {$name}.{/block}
{/foreach}
```

Wir können zum Beispiel nur einen Block in einer Child-Vorlage neu definieren:

```latte
{* child.latte *}
{block hi-John}Hallo. Ich bin {$name}.{/block}
```

Die Ausgabe sieht dann wie folgt aus:

```latte
Hi, I am Peter.
Hello. I am John.
Hi, I am Mary.
```


Überprüfung der Blockexistenz `{ifset}` .{toc: Checking Block Existence}
------------------------------------------------------------------------

.[note]
Siehe auch [`{ifset $var}` |tags#ifset-elseifset]

Verwenden Sie den `{ifset blockname}` Test, um zu prüfen, ob ein Block (oder mehrere Blöcke) im aktuellen Kontext existiert:

```latte
{ifset footer}
	...
{/ifset}

{ifset footer, header, main}
	...
{/ifset}
```

Sie können eine Variable oder einen beliebigen Ausdruck in PHP als Blocknamen verwenden. Fügen Sie in diesem Fall das Schlüsselwort `block` vor der Variablen ein, um klarzustellen, dass es sich nicht um die [Variable |tags#ifset-elseifset] handelt, die geprüft wird:

```latte
{ifset block $name}
	...
{/ifset}
```


Tipps .[#toc-tips]
------------------
Hier finden Sie einige Tipps für die Arbeit mit Blöcken:

- Der letzte Block der obersten Ebene braucht keinen schließenden Tag zu haben (der Block endet mit dem Ende des Dokuments). Dies vereinfacht das Schreiben von untergeordneten Vorlagen, die einen Primärblock enthalten.

- Um die Lesbarkeit zu erhöhen, können Sie Ihrem `{/block}` -Tag optional einen Namen geben, z. B. `{/block footer}`. Der Name muss jedoch mit dem Blocknamen übereinstimmen. In größeren Vorlagen hilft Ihnen diese Technik zu sehen, welche Block-Tags geschlossen werden.

- Sie können nicht direkt mehrere Block-Tags mit demselben Namen in derselben Vorlage definieren. Dies kann jedoch mit [dynamischen Blocknamen |#dynamic block names] erreicht werden.

- Sie können [n:attributes |syntax#n:attributes] verwenden, um Blöcke zu definieren wie `<h1 n:block=title>Welcome to my awesome homepage</h1>`

- Blöcke können auch ohne Namen verwendet werden, nur um die [Filter |syntax#filters] auf die Ausgabe anzuwenden: `{block|strip} hello {/block}`


Horizontale Wiederverwendung `{import}` .{toc: Horizontal Reuse}
================================================================

Die horizontale Wiederverwendung ist ein dritter Wiederverwendbarkeits- und Vererbungsmechanismus in Latte. Sie ermöglicht es Ihnen, Blöcke aus anderen Vorlagen zu laden. Es ist vergleichbar mit dem Erstellen einer PHP-Datei mit Hilfsfunktionen oder einem Trait.

Obwohl die Vererbung von Layoutvorlagen eine der leistungsfähigsten Funktionen von Latte ist, ist sie auf die Einzelvererbung beschränkt; eine Vorlage kann nur eine andere Vorlage erweitern. Durch diese Einschränkung ist die Vererbung von Vorlagen einfach zu verstehen und leicht zu debuggen:

```latte
{layout 'layout.latte'}

{block title}...{/block}
{block content}...{/block}
```

Die horizontale Wiederverwendung ist eine Möglichkeit, das gleiche Ziel wie die Mehrfachvererbung zu erreichen, jedoch ohne die damit verbundene Komplexität:

```latte
{layout 'layout.latte'}

{import 'blocks.latte'}

{block title}...{/block}
{block content}...{/block}
```

Die Anweisung `{import}` weist Latte an, alle in `blocks.latte` definierten Blöcke und [Definitionen |#definitions] in die aktuelle Vorlage zu importieren.

```latte
{* blocks.latte *}

{block sidebar}...{/block}
```

In diesem Beispiel importiert die Anweisung `{import}` den Block `sidebar` in die Hauptvorlage.

Die importierte Vorlage darf keine andere Vorlage [erweitern |#Layout Inheritance], und ihr Körper sollte leer sein. Die importierte Vorlage kann jedoch andere Vorlagen importieren.

Das Tag `{import}` sollte das erste Template-Tag nach `{layout}` sein. Der Vorlagenname kann ein beliebiger PHP-Ausdruck sein:

```latte
{import $ajax ? 'ajax.latte' : 'not-ajax.latte'}
```

Sie können so viele `{import}` Anweisungen in einer Vorlage verwenden, wie Sie wollen. Wenn zwei importierte Vorlagen denselben Block definieren, gewinnt die erste Vorlage. Die höchste Priorität wird jedoch der Hauptvorlage eingeräumt, die jeden importierten Block überschreiben kann.

Alle überschriebenen Blöcke können nach und nach eingebunden werden, indem sie als [übergeordneter Block |#parent block] eingefügt werden:

```latte
{layout 'base.latte'}

{import 'blocks.latte'}

{block sidebar}
	{include parent}
{/block}

{block title}...{/block}
{block content}...{/block}
```

In diesem Beispiel ruft `{include parent}` den Block `sidebar` korrekt aus der Vorlage `blocks.latte` auf.


Einheit Vererbung `{embed}` .{toc: Unit Inheritance}{data-version:2.9}
======================================================================

Die Unit-Vererbung überträgt die Idee der Layout-Vererbung auf die Ebene der Inhaltsfragmente. Während die Layoutvererbung mit "Dokumentenskeletten" arbeitet, die durch untergeordnete Vorlagen zum Leben erweckt werden, können Sie mit der Unit-Vererbung Skelette für kleinere Inhaltseinheiten erstellen und diese an beliebiger Stelle wiederverwenden.

Bei der Vererbung von Einheiten ist das Tag `{embed}` der Schlüssel. Es kombiniert das Verhalten von `{include}` und `{layout}`. Es erlaubt Ihnen, den Inhalt einer anderen Vorlage oder eines Blocks einzubinden und optional Variablen zu übergeben, genau wie `{include}`. Außerdem können Sie damit jeden Block, der innerhalb der eingebundenen Vorlage definiert ist, überschreiben, wie es `{layout}` tut.

Als Beispiel werden wir das klappbare Akkordeon-Element verwenden. Werfen wir einen Blick auf das Element-Skelett in der Vorlage `collapsible.latte`:

```latte
<section class="collapsible {$modifierClass}">
	<h4 class="collapsible__title">
		{block title}{/block}
	</h4>

	<div class="collapsible__content">
		{block content}{/block}
	</div>
</section>
```

Die `{block}` Tags definieren zwei Blöcke, die von untergeordneten Vorlagen ausgefüllt werden können. Ja, wie im Fall der Elternvorlage in der Layout-Vererbungsvorlage. Sie sehen auch die Variable `$modifierClass`.

Lassen Sie uns unser Element in der Vorlage verwenden. An dieser Stelle kommt `{embed}` ins Spiel. Es ist ein sehr leistungsfähiges Tool, mit dem wir alles machen können: den Vorlageninhalt des Elements einbinden, Variablen hinzufügen und Blöcke mit benutzerdefiniertem HTML einfügen:

```latte
{embed 'collapsible.latte', modifierClass: my-style}
	{block title}
		Hello World
	{/block}

	{block content}
		<p>Lorem ipsum dolor sit amet, consectetuer adipiscing
		elit. Nunc dapibus tortor vel mi dapibus sollicitudin.</p>
	{/block}
{/embed}
```

Die Ausgabe könnte wie folgt aussehen:

```latte
<section class="collapsible my-style">
	<h4 class="collapsible__title">
		Hello World
	</h4>

	<div class="collapsible__content">
		<p>Lorem ipsum dolor sit amet, consectetuer adipiscing
		elit. Nunc dapibus tortor vel mi dapibus sollicitudin.</p>
	</div>
</section>
```

Blöcke innerhalb von Einbettungs-Tags bilden eine eigene, von anderen Blöcken unabhängige Ebene. Daher können sie den gleichen Namen wie der Block außerhalb der Einbettung haben und werden in keiner Weise beeinflusst. Mit dem Tag [include |#Printing Blocks] innerhalb von `{embed}` Tags können Sie hier erstellte Blöcke, Blöcke aus der eingebetteten Vorlage (die *nicht* [lokal |#Local Blocks] sind) und auch Blöcke aus der Hauptvorlage, die *lokal sind*, einfügen. Sie können auch [Blöcke |#Horizontal Reuse] aus anderen Dateien [importieren |#Horizontal Reuse]:

```latte
{block outer}…{/block}
{block local hello}…{/block}

{embed 'collapsible.latte', modifierClass: my-style}
	{import 'blocks.latte'}

	{block inner}…{/block}

	{block title}
		{include inner} {* funktioniert, Block ist innerhalb von embed definiert *}
		{include hello} {* funktioniert, Block ist lokal in dieser Vorlage *}
		{include content} {* funktioniert, Block ist in der eingebetteten Vorlage definiert *}
		{include aBlockDefinedInImportedTemplate} {* funktioniert *}
		{include outer} {* funktioniert nicht! - Block befindet sich in äußerer Schicht *}
	{/block}
{/embed}
```

Eingebettete Vorlagen haben keinen Zugriff auf die Variablen des aktiven Kontexts, aber sie haben Zugriff auf die globalen Variablen.

Mit `{embed}` können Sie nicht nur Vorlagen, sondern auch andere Blöcke einfügen, so dass das vorherige Beispiel wie folgt geschrieben werden könnte: .{data-version:2.10}

```latte
{define collapsible}
<section class="collapsible {$modifierClass}">
	<h4 class="collapsible__title">
		{block title}{/block}
	</h4>
	...
</section>
{/define}


{embed collapsible, modifierClass: my-style}
	{block title}
		Hello World
	{/block}
	...
{/embed}
```

Wenn wir einen Ausdruck an `{embed}` übergeben und es nicht klar ist, ob es sich um einen Block oder einen Dateinamen handelt, fügen Sie das Schlüsselwort `block` oder `file` hinzu:

```latte
{embed block $name} ... {/embed}
```


Anwendungsfälle .[#toc-use-cases]
=================================

Es gibt verschiedene Arten der Vererbung und der Wiederverwendung von Code in Latte. Lassen Sie uns die wichtigsten Konzepte zusammenfassen, um mehr Klarheit zu schaffen:


`{include template}`
--------------------

**Nutzungsfall:** Verwendung von `header.latte` & `footer.latte` innerhalb von `layout.latte`.

`header.latte`

```latte
<nav>
   <div>Homepage</div>
   <div>About</div>
</nav>
```

`footer.latte`

```latte
<footer>
   <div>Copyright</div>
</footer>
```

`layout.latte`

```latte
{include 'header.latte'}

<main>{block main}{/block}</main>

{include 'footer.latte'}
```


`{layout}`
----------

**Benutzungsfall**: Erweitern von `layout.latte` innerhalb von `homepage.latte` & `about.latte`.

`layout.latte`

```latte
{include 'header.latte'}

<main>{block main}{/block}</main>

{include 'footer.latte'}
```

`homepage.latte`

```latte
{layout 'layout.latte'}

{block main}
	<p>Homepage</p>
{/block}
```

`about.latte`

```latte
{layout 'layout.latte'}

{block main}
	<p>About page</p>
{/block}
```


`{import}`
----------

**Nutzungsfall**: `sidebar.latte` in `single.product.latte` & `single.service.latte`.

`sidebar.latte`

```latte
{block sidebar}<aside>This is sidebar</aside>{/block}
```

`single.product.latte`

```latte
{layout 'product.layout.latte'}

{import 'sidebar.latte'}

{block main}<main>Product page</main>{/block}
```

`single.service.latte`

```latte
{layout 'service.layout.latte'}

{import 'sidebar.latte'}

{block main}<main>Service page</main>{/block}
```


`{define}`
----------

**Verwendungsfall**: Eine Funktion, die einige Variablen abruft und ein Markup ausgibt.

`form.latte`

```latte
{define form-input, $name, $value, $type = 'text'}
	<input type={$type} name={$name} value={$value}>
{/define}
```

`profile.service.latte`

```latte
{import 'form.latte'}

<form action="" method="post">
	<div>{include form-input, username}</div>
	<div>{include form-input, password}</div>
	<div>{include form-input, submit, Submit, submit}</div>
</form>
```


`{embed}`
---------

**Anwendungsfall**: Einbettung von `pagination.latte` in `product.table.latte` & `service.table.latte`.

`pagination.latte`

```latte
<div id="pagination">
	<div>{block first}{/block}</div>

	{for $i = $min + 1; $i < $max - 1; $i++}
		<div>{$i}</div>
	{/for}

	<div>{block last}{/block}</div>
</div>
```

`product.table.latte`

```latte
{embed 'pagination.latte', min: 1, max: $products->count}
	{block first}First Product Page{/block}
	{block last}Last Product Page{/block}
{/embed}
```

`service.table.latte`

```latte
{embed 'pagination.latte', min: 1, max: $services->count}
	{block first}First Service Page{/block}
	{block last}Last Service Page{/block}
{/embed}
```
