Rückruf-Funktionen
******************

.[perex]
[api:Nette\Utils\Callback] ist eine statische Klasse, die Funktionen für die Arbeit mit [PHP-Callbacks |https://www.php.net/manual/en/language.types.callable.php] enthält.


Installation:

```shell
composer require nette/utils
```

Alle Beispiele setzen voraus, dass der folgende Klassenalias definiert ist:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Überprüft, ob `$callable` ein gültiger PHP-Callback ist. Andernfalls wird `Nette\InvalidArgumentException` geworfen. Wenn `$syntax` auf true gesetzt ist, prüft die Funktion nur, ob `$callable` eine gültige Struktur hat, die als Callback verwendet werden kann, aber sie prüft nicht, ob die Klasse oder Methode tatsächlich existiert. Gibt `$callable` zurück.

```php
Callback::check('trim'); // keine Ausnahme
Callback::check(['NonExistentClass', 'method']); // wirft Nette\InvalidArgumentException
Callback::check(['NichtExistierendeKlasse', 'Methode'], true); // keine Ausnahme
Callback::check(function () {}); // keine Ausnahme
Callback::check(null); // wirft Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Konvertiert PHP-Callback in Textform. Klasse oder Methode darf nicht existieren.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Gibt die Reflektion für die in PHP Callback verwendete Methode oder Funktion zurück.

```php
$ref = Callback::toReflection('trim');
// $ref ist ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref ist ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Prüft, ob PHP-Callback eine Funktion oder eine statische Methode ist.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Hebt die von `Closure::fromCallable` erzeugte Schließung auf:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
