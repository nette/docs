Riflessione PHP
***************

.[perex]
[api:Nette\Utils\Reflection] è una classe statica con funzioni utili per la riflessione in PHP. Il suo scopo è quello di correggere i difetti delle classi native e di unificare il comportamento delle diverse versioni di PHP.

Installazione:

```shell
composer require nette/utils
```

Tutti gli esempi presuppongono che sia definito il seguente alias di classe:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Scopre se reflection ha accesso ai commenti di PHPdoc. I commenti potrebbero non essere disponibili a causa della cache degli opcode, si veda per esempio la direttiva [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Espande il nome `$name` della classe al nome completo nel contesto di `$context`, cioè nel contesto del suo spazio dei nomi e degli alias definiti. Quindi, restituisce come il parser PHP capirebbe `$name` se fosse scritto nel corpo di `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Restituisce una riflessione di un metodo che contiene una dichiarazione di `$method`. Di solito, ogni metodo è una dichiarazione propria, ma il corpo del metodo può anche essere nel trait e con un nome diverso.

Poiché PHP non fornisce informazioni sufficienti per determinare la dichiarazione effettiva, Nette utilizza una propria euristica, che dovrebbe essere affidabile.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Restituisce una riflessione di una classe o di un tratto che contiene una dichiarazione di proprietà `$prop`. Le proprietà possono essere dichiarate anche nel tratto.

Poiché PHP non fornisce informazioni sufficienti per determinare la dichiarazione effettiva, Nette utilizza una propria euristica, che non è affidabile.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Determina se `$type` è un tipo incorporato in PHP. Altrimenti, è il nome della classe.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Utilizzare [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Converte una riflessione in una stringa leggibile dall'uomo.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
