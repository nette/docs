İlk uygulamamızı yazıyoruz!
***************************

.[perex]
Yorumlarla basit bir blog oluştururken Nette Framework'ü birlikte tanıyalım. Hadi başlayalım!

İlk iki bölümden sonra kendi işlevsel blogumuza sahip olacağız ve harika gönderilerimizi yayınlayabileceğiz, ancak işlevler şimdilik büyük ölçüde sınırlı olacak. Ayrıca yorum eklemeyi, makaleleri düzenlemeyi ve son olarak blogu güvenli hale getirmeyi programlayacağımız sonraki bölümleri de okumalısınız.

.[tip]
Bu kılavuz, [Kurulum |nette:installation] sayfasını okuduğunuzu ve gerekli araçları başarıyla hazırladığınızı varsayar. Ayrıca [PHP'de nesne yönelimli programlamayı |nette:introduction-to-object-oriented-programming] anladığınızı varsayar.

Lütfen PHP 8.1 veya daha yenisini kullanın. Tam uygulamayı [GitHub'da |https://github.com/nette-examples/quickstart/tree/v4.0] bulabilirsiniz.


Karşılama sayfası
=================

`nette-blog` dizinine yeni bir proje oluşturarak başlayalım:

```shell
composer create-project nette/web-project nette-blog
```

Bu noktada, Web Projesi giriş sayfası zaten çalışıyor olmalıdır. Tarayıcıyı aşağıdaki URL adresinde açarak deneyelim:

```
http://localhost/nette-blog/www/
```

ve Nette Framework giriş sayfasını göreceğiz:

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

Uygulama çalışıyor ve düzenlemeler yapmaya başlayabilirsiniz.

.[note]
Bir sorun oluşursa, [bu birkaç ipucunu deneyin |nette:troubleshooting#Nette Çalışmıyor Beyaz Sayfa Görünüyor].


Web Projesinin İçeriği
======================

Web Projesi aşağıdaki yapıya sahiptir:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← uygulama dizini
│   ├── <b>Core/</b>         ← çalışması için gerekli temel sınıflar
│   ├── <b>Presentation/</b> ← presenter'lar, şablonlar & vb.
│   │   └── <b>Home/</b>     ← Home presenter dizini
│   └── <b>Bootstrap.php</b> ← başlatıcı sınıf Bootstrap
├── <b>assets/</b>           ← ham varlıklar (SCSS, TypeScript, kaynak görüntüler)
├── <b>bin/</b>              ← komut satırından çalıştırılan betikler
├── <b>config/</b>           ← yapılandırma dosyaları
├── <b>log/</b>              ← hata günlüğü
├── <b>temp/</b>             ← geçici dosyalar, önbellek, …
├── <b>vendor/</b>           ← Composer tarafından yüklenen kütüphaneler
│   └── <b>autoload.php</b>  ← yüklenen tüm paketlerin otomatik yüklenmesi
└── <b>www/</b>              ← genel dizin - tarayıcıdan erişilebilen tek dizin
	├── <b>assets/</b>       ← derlenmiş statik dosyalar (CSS, JS, resimler, ...)
    └── <b>index.php</b>     ← uygulamanın başlatıldığı başlangıç dosyası
\--

`www/` dizini, resimleri, JavaScript dosyalarını, CSS stillerini ve diğer genel olarak erişilebilir dosyaları depolamak için tasarlanmıştır. Yalnızca bu dizine internetten erişilebilir, bu nedenle uygulamanızın kök dizinini tam olarak buraya yönlendirecek şekilde ayarlayın (bunu Apache veya nginx yapılandırmasında ayarlayabilirsiniz, ancak bunu daha sonra yapalım, şimdi önemli değil).

Bizim için en önemli klasör `app/`'dir. Burada, tüm framework'ü yüklemeye ve uygulamayı ayarlamaya hizmet eden sınıfı içeren `Bootstrap.php` dosyasını bulacağız. Burada [otomatik yükleme |robot-loader:] etkinleştirilir, burada [hata ayıklayıcı |tracy:] ve [yönlendirmeler |application:routing] ayarlanır.


Temizlik
========

Web Projesi, bir şeyler programlamaya başlamadan önce sileceğimiz bir giriş sayfası içerir. Bu nedenle, `app/Presentation/Home/default.latte` dosyasının içeriğini endişelenmeden "Merhaba dünya!" ile değiştirelim.


[* qs-hello.webp .{url:-} *]


Tracy (hata ayıklayıcı)
=======================

Geliştirme için son derece önemli bir araç [hata ayıklama aracı Tracy |tracy:]'dir. `app/Presentation/Home/HomePresenter.php` dosyasında bir hata oluşturmayı deneyin (ör. HomePresenter sınıf tanımındaki küme parantezini kaldırarak) ve ne olacağına bakın. Hatayı anlaşılır bir şekilde açıklayan bir bildirim sayfası açılacaktır.

[* qs-tracy.avif .{url:-}(hata ayıklayıcı ekranı) *]

Tracy, uygulamadaki hataları ararken bize çok yardımcı olacaktır. Ayrıca, ekranın sağ alt köşesindeki, uygulama çalışmasından bilgiler içeren kayan Tracy Çubuğuna dikkat edin.

[* qs-tracybar.webp .{url:-} *]

Üretim modunda, Tracy elbette kapalıdır ve hiçbir hassas bilgi göstermez. Bu durumda tüm hatalar `log/` klasöründe saklanır. Hadi deneyelim. `app/Bootstrap.php` dosyasında aşağıdaki satırın yorumunu kaldırın ve kodun şöyle görünmesi için çağrı parametresini `false` olarak değiştirin:

```php .{file:app/Bootstrap.php}
...
$this->configurator->setDebugMode(false);
...
```

Sayfayı yeniledikten sonra artık Tracy'yi görmeyeceğiz. Bunun yerine, kullanıcı dostu bir mesaj görüntülenecektir:

[* qs-fatal.webp .{url:-}(hata ekranı) *]

Şimdi `log/` dizinine bakalım. Burada ( `exception.log` dosyasında) günlüğe kaydedilen hatayı ve ayrıca zaten bilinen hata mesajı sayfasını ( `exception-` ile başlayan bir adla HTML dosyası olarak kaydedilmiş) bulacağız.

`// $configurator->setDebugMode(false);` satırını tekrar yorumlayalım. Tracy, localhost'ta geliştirici modunu otomatik olarak etkinleştirir ve başka her yerde devre dışı bırakır.

Oluşturduğumuz hatayı düzeltebilir ve uygulamayı yazmaya devam edebiliriz.


Teşekkür Gönderin
=================

Size açık kaynak yazarlarını memnun edecek bir numara göstereceğiz. Projenizin kullandığı kütüphanelere GitHub'da basit bir şekilde yıldız verebilirsiniz. Sadece şunu çalıştırın:

```shell
composer thanks
```

Deneyin!

{{priority: -1}}
{{sitename: Nette Hızlı Başlangıç}}
