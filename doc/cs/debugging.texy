Debugování a zpracování chyb
****************************

/--div .[perex]
Knihovna Tracy (dříve `Nette\Diagnostics\Debugger`), která zdomácněla pod jménem *Laděnka*, je užitečnou každodenní pomocnicí PHP programátora. Pomůže vám

- rychle odhalit a opravit chyby
- logovat chyby
- jak vypisovat proměnné
- a měřit čas
\--


PHP je jazyk na sekání těžko odhalitelných chyb jako stvořený, neboť dává vývojářům značnou volnost. O to cennější je ladící nástroj [Tracy\Debugger |api:]. Mezi diagnostickými nástroji pro PHP představuje naprostou špičku. Pokud se dnes setkáváte s Laděnkou poprvé, tak věřte, že váš život se začne dělit na ten před Laděnkou a ten s ní. Vítejte v té lepší části!

*Laděnku* aktivujeme snadno, stačí do kódu, nejlépe hned za načtení frameworku, přidat:

/--php
use Tracy\Debugger;

Debugger::enable(); // aktivujeme Laděnku
\--

První, čeho si můžete na stránce všimnout, Debugger Bar.


Debugger Bar
------------

Debugger Bar je plovoucí panel, který se zobrazí v pravém dolním rohu stránky. Můžeme jej přesouvat myší a po znovunačtení stránky si bude pamatovat svou pozici.

[* tracy-bar.png *]:https://nette.github.io/tracy/tracy-debug-bar.html

Do Debugger Baru lze přidávat další užitečné panely. Řadu jich najdete v [doplňcích |addons:], nebo si dokonce [můžete napsat vlastní |debugger-extensions].


Vizualizace chyb a výjimek
--------------------------

Jistě dobře víte, jak PHP oznamuje chyby: do zdrojového kódu stránky vypíše něco takového:

/--pre .{font-size: 90%}
<b>Parse error</b>:  syntax error, unexpected '}' in <b>HomepagePresenter.php</b> on line <b>15</b>
\--

nebo při nezachycené výjimce:

/--pre .{font-size: 90%}
<b>Fatal error</b>:  Uncaught Nette\MemberAccessException: Call to undefined method Nette\Application\UI\Form::addTest()? in /sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php:100
Stack trace:
#0 /sandbox/vendor/nette/utils/src/Utils/Object.php(75): Nette\Utils\ObjectMixin::call(Object(Nette\Application\UI\Form), 'addTest', Array)
#1 /sandbox/app/forms/SignFormFactory.php(32): Nette\Object-&gt;__call('addTest', Array)
#2 /sandbox/app/presenters/SignPresenter.php(21): App\Forms\SignFormFactory-&gt;create()
#3 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(181): App\Presenters\SignPresenter-&gt;createComponentSignInForm('signInForm')
#4 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(139): Nette\ComponentModel\Container-&gt;createComponent('signInForm')
#5 /sandbox/temp/cache/latte/15206b353f351f6bfca2c36cc.php(17): Nette\ComponentModel\Co in <b>/sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php</b> on line <b>100</b><br />
\--

V takovém výpisu se zorientovat není zrovna snadné. Pokud zapneme *Laděnku*, chyba nebo výjimka se zobrazí dočista v jiné podobě:


[* tracy-exception.png *]:https://examples.nette.org/ndebug/nette-exception.html *** *Nezachycená výjimka v provedení Tracy*


Chybová zpráva doslova křičí, vidíme část zdrojového kódu se zvýrazněným řádkem, kde k chybě došlo, informace *Call to undefined method Nette\Http\User::isLogedIn()* srozumitelně vysvětluje, o jakou chybu se jedná. Celá stránka je navíc živá, můžeme se proklikávat k větším podrobnostem. [Zkuste si to |https://examples.nette.org/ndebug/nette-exception.html].

A víte co? Tímto způsobem zachytí a zobrazí i fatální chyby. Bez nutnosti instalovat jakékoliv rozšíření.


[* tracy-error.png *]:https://examples.nette.org/ndebug/nette-error.html


Chyby jako překlep v názvu proměnné nebo pokus o otevření neexistujícího souboru generují hlášení úrovně E_NOTICE nebo E_WARNING. Ty lze v grafice stránky snadno přehlédnout, dokonce nemusí být viditelná vůbec (leda pohledem do kódu stránky).

[* tracy-notice2.png *]:https://nette.github.io/tracy/tracy-debug-bar.html

Nebo mohou být zobrazeny stejně jako chyby:

/---php
Debugger::$strictMode = TRUE;
\---

[* tracy-notice.png *]:https://nette.github.io/tracy/tracy-notice.html


Abychom odhalili i překlepy při přiřazení do proměnné objektu, podědíme své třídy od Nette\Object.


Dále můžeme změnit hloubku zanoření pomocí [Debugger::$maxDepth | api:Tracy\Debugger::$maxDepth] a délku zobrazovaných popisek pomocí [Debugger::$maxLen | api:Tracy\Debugger::$maxLen]. Nižší hodnoty laděnku přirozeně zrychlí.

/--php
Debugger::$maxDepth = 2; // default: 3
Debugger::$maxLen = 50; // default: 150
\--


Produkční režim a logování chyb
-------------------------------

Jak vidíte, Laděnka je poměrně výřečná, což lze ocenit ve vývojovém prostředí, zatímco na produkčním serveru by to způsobilo hotové neštěstí. Tam se totiž žádné ladící informace vypsat nesmí. Laděnka proto disponuje autodetekcí prostředí a pokud příklad spustíme na ostrém serveru, chyba se místo zobrazení zaloguje a návštěvník uvidí jen uživatelsky srozumitelnou hlášku:

[* tracy-error2.png *]:https://nette.github.io/tracy/tracy-production.html

Produkční režim potlačí zobrazování všech ladících informacích, které posíláme ven pomocí [Debugger::dump() | #Dump proměnných] nebo [Debugger::fireLog() |#Firebug a FireLogger], a samozřejmě také všech chybových zpráv, které generuje PHP. Pokud jste tedy v kódu zapomněli nějaké `Debugger::dump($obj)`, nemusíte se obávat, na produkčním serveru se nic nevypíše.

K přepínání režimů slouží první parametr metody `Debugger::enable()`, kde lze uvést buď konstantu `Debugger::PRODUCTION` nebo `Debugger::DEVELOPMENT`.

Pokud jej neuvedeme, má výchozí hodnotu `Debugger::DETECT` a v takovém případě se detekuje režim podle IP adresy serveru - je-li dostupný přes veřejnou IP adresu, běží v produkčním režimu, je-li na lokální, tak ve vývojářském. V drtivé většině případů tak není potřeba režim nastavovat a správně se rozezná podle toho, jestli aplikaci spouštíme na svém lokálním serveru nebo v ostrém provozu.

V produkčním režimu Laděnka automaticky všechny chyby a zachycené výjimky zaznamenává do textového logu. Pokud neurčíme jinak, půjde o soubor `log/error.log`. Logování chyb je přitom nesmírně užitečné. Představte si, že všichni uživatelé vaší aplikace jsou vlastně betatesteři, kteří zdarma odvádějí špičkovou práci v hledání chyb a vy byste udělal hloupost, kdybyste jejich cenné reporty zahodil bez povšimnutí do odpadkového koše.

Pokud potřebujeme zalogovat vlastní zprávu nebo vámi zachycenou výjimku, použijeme k tomu metodu `log()`:

/--php
Debugger::log('Doslo k necekane chybe'); // textová zpráva

try {
	kritickaOperace();
} catch (Exception $e) {
	Debugger::log($e); // logovat lze i výjimku
	// nebo Debugger::log($e, Debugger::ERROR) odešle i e-mailovou notifikaci
}
\--

Jiný adresář pro logování chyb lze nastavit druhým parametrem metody enable():

/--php
Debugger::enable(Debugger::DETECT, __DIR__ . '/mylog');
\--

Pro skutečného profíka je error log klíčovým zdrojem informací a chce být ihned informován o každé nové chybě. Laděnka mu v tom vychází vstříc, umí totiž o novém záznamu v logu informovat e-mailem. Kam odesílat emaily určíme proměnnou $email:

/--php
Debugger::$email = 'admin@example.com';
\--

Alternativně je také možné toto nastavit v konfiguračním souboru:
/--code neon
	tracy:
		email: admin@example.com

\--

Aby vám však nezaplavila e-mailovou schránku, pošle vždy **pouze jednu zprávu** a vytvoří soubor `email-sent`. Vývojář po přijetí e-mailové notifikace zkontroluje log, opraví aplikaci a smaže monitorovací soubor, čímž se opět aktivuje odesílání e-mailů.



Dump proměnných
---------------

Každý ladič je dobrým kamarádem s funkcí [php:var_dump], která podrobně vypíše obsah proměnné. Bohužel v prostředí HTML výpis pozbude formátování a slije se do jednoho řádku, o sanitizaci HTML kódu ani nemluvě. V praxi je nezbytné `var_dump` nahradit šikovnější funkcí. Tou je právě `Debugger::dump()`

/--php
$arr = array(10, 20.2, TRUE, NULL, 'hello');

Debugger::dump($arr);
// včetně jmenného prostoru Tracy\Debugger::dump($arr);
\--

vygeneruje výstup:

/--pre
<pre><span style="color:gray">array</span>(5) {
  [0] => <span style="color:gray">int</span>(10)
  [1] => <span style="color:gray">float</span>(20.2)
  [2] => <span style="color:gray">bool</span>(true)
  [3] => <span style="color:gray">NULL</span>
  [4] => <span style="color:gray">string</span>(5) "hello"
}
</pre>
\--

Funkce `dump()` umí vypsat i další užitečné informace. Konstanta `Tracy\Dumper::LOCATION_SOURCE` přidá tooltip s cestou k místu, kde byla funkce zavolána. `Tracy\Dumper::LOCATION_LINK` nám poskytne odkaz na ono místo. `Tracy\Dumper::LOCATION_CLASS` u každého dumpovaného objektu vypíše tooltip s cestou k souboru, ve kterém je definována jeho třída. Konstanty se nastavují do proměnné `Debugger::$showLocation` ještě před voláním `dump()`. Pokud chceme nastavit více hodnot najednou, spojíme je pomocí operátoru `|`.

/--php
Debugger::$showLocation = Tracy\Dumper::LOCATION_SOURCE; // Nastaví pouze výpis o místě volání funkce
Debugger::$showLocation = Tracy\Dumper::LOCATION_CLASS | Tracy\Dumper::LOCATION_LINK; // Nastaví zároveň výpis odkazu a cestu ke třídě
Debugger::$showLocation = FALSE; // Vypne výpis dodatečných informací
Debugger::$showLocation = TRUE; // Zapne výpis všech dodatečných informací
\--

Praktickou alternativou k `Debugger::dump()` je `Debugger::barDump()`. Ten nám umožňuje vypsat hodnotu proměnné v panelu Debugger Baru. To je velmi šikovné, jelikož jsou dumpy oddělené od rozložení stránky a také k nim můžeme umístit komentář.

/--php
Debugger::barDump([2, 4, 6, 8], 'sudá čísla do deseti');
Debugger::barDump([1, 3, 5, 7, 9], 'lichá čísla do deseti');
\--

[* bardump-cs.png *]


Měření času
-----------

Dalším užitečným nástrojem ladiče jsou stopky s přesností na mikrosekundy:

/--php
Debugger::timer();

// princi můj malinký spi, ptáčkové sladce již sní...
sleep(2);

$elapsed = Debugger::timer();
// $elapsed ? 2
\--

Volitelným parametrem je možno dosáhnout vícenásobných měření.

/--php
Debugger::timer('page-generating');
// nějaký kód
Debugger::timer('rss-generating');

// nějaký kód
$rssElapsed = Debugger::timer('rss-generating');
$pageElapsed = Debugger::timer('page-generating');
\--



/--php
Debugger::timer(); // zapne stopky

... // časově náročná operace

echo Debugger::timer(); // vypíše uplynulý čas v sekundách
\--




FireLogger
----------

Ne vždy lze ladící informace posílat do okna prohlížeče. Týká se to AJAXových požadavků, generování XML výstupu či obrázků. V takovým případě můžeme zasílat zprávy samostatným kanálem do FireLoggeru. Chyby úrovně Notice a Warning jsou do okna FireLoggeru dokonce zasílány automaticky. Taktéž je možné logovat výjimky, které sice aplikace zachytila, ale stojí za to na ně upozornit.

Jak na to?

Firefox:
- nainstalujte si rozšíření [Firebug | http://getfirebug.com/] a [FireLogger | https://addons.mozilla.org/cs/firefox/addon/firelogger/]
- zapněte Firebug (klávesou F12), povolte panely Síť (Net) a Logger (nechte otevřený)

Chrome:
- nainstalujte si rozšíření [FireLogger for Chrome | https://chrome.google.com/webstore/detail/firelogger-for-chrome/hmagilfopmdjkeomnjpchokglfdfjfeh]
- zapněte Chrome DevTools (klávesou Ctrl-Shift-I) a otevřete Konzoli

Otevřete si [demo stránku | https://examples.nette.org/tracy/] a ve uvidíte zprávy odeslané z PHP.

Protože Tracy komunikuje s Firebugem přes HTTP hlavičky, je nutné volat logovací funkce ještě před tím, než PHP skript cokoliv odešle na výstup. Také je možné zapnout [output buffering | http://php.net/manual/en/function.ob-start.php] a tím výstup oddálit.

/--php
use Tracy\Debugger;

Debugger::fireLog('Hello World'); // vypíšeme řetězec do konzoly FireLoggeru

Debugger::fireLog($_SERVER); // do konzoly lze vypsat i pole nebo objekty

Debugger::fireLog(new Exception('Test Exception')); // či dokonce výjimky
\--

Výsledek vypadá asi takto:

[* tracy-firelogger.png *]




Laděnka k vašim službám
------------------------

Nette Framework je koncipován jako otevřený framework. To znamená, že i jeho jednotlivé části můžete využívat samostatně ve svých aplikacích. To se týká i Tracy. Nic vám nebrání si zpříjemnit život tím, že na začátku každého skriptu spustíte Laděnku.





/--comment
TODO:
- [Zapnutí laděnky na produkčním serveru | wiki:cs:Faq#Zapnutí laděnky na produkčním serveru
- Odkaz na HOWTO: [Jak na otevírání souborů v editoru přímo z chybové stránky Nette\Debug | wiki:cs/howto-editor-link]
- dump()
https://forum.nette.org/cs/5464-jak-nastavit-nette-debug-aby-oteviral-soubory-ve-vasem-editoru
https://forum.nette.org/cs/7221-jak-psat-rozsireni-pro-debugger-bar
https://forum.nette.org/cs/5681-jak-nastavit-firelogger-aby-oteviral-soubory-ve-vasem-editoru
\--


{{themeicon: icon-bulb.png}}
{{composer: tracy/tracy}}
