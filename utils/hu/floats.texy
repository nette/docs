Munka floatokkal
****************

.[perex]
Az [api:Nette\Utils\Floats] egy statikus osztály hasznos függvényekkel tizedes számok összehasonlítására.


Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi a következő alias létrehozását:

```php
use Nette\Utils\Floats;
```


Motiváció
=========

Azt gondolhatja, miért is van osztály a floatok összehasonlítására? Hiszen használhatom a `<`, `>`, `===` operátorokat, és el vagyok intézve.
Ez nem teljesen igaz. Mit gondol, mit ír ki ez a kód?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Ha futtatja a kódot, néhányan biztosan meglepődnek, hogy a program `not same`-et írt ki.

Tizedes számokkal végzett matematikai műveletek során hibák lépnek fel a tízes és kettes számrendszer közötti átváltás miatt. Például a `0.1 + 0.2` eredménye `0.300000000000000044…`. Ezért összehasonlításkor tolerálnunk kell egy kis különbséget egy bizonyos tizedesjegytől.

És pontosan ezt teszi a `Floats` osztály. A következő összehasonlítás már az elvárásoknak megfelelően fog működni:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

`NAN` összehasonlítási kísérletekor `\LogicException` kivételt dob.

.[tip]
A `Floats` osztály az `1e-10`-nél kisebb különbségeket tolerálja. Ha nagyobb pontossággal kell dolgoznia, használja inkább a BCMath könyvtárat.


Floatok összehasonlítása
========================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

`true`-t ad vissza, ha `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

`true`-t ad vissza, ha igaz `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

`true`-t ad vissza, ha igaz `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

`true`-t ad vissza, ha igaz `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

`true`-t ad vissza, ha igaz `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Ha `$a` < `$b`, `-1`-et ad vissza, ha egyenlőek, `0`-t ad vissza, és ha `$a` > `$b`, `1`-et ad vissza.

Például használható az `usort` függvénnyel.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr most [-3.5, 1, 2, 5]
```


Segédfüggvények
===============


isZero(float $value): bool .[method]
------------------------------------

`true`-t ad vissza, ha az érték nulla.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

`true`-t ad vissza, ha az érték egész szám.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
