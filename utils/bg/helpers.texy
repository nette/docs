Помощни функции
***************

.[perex]
[api:Nette\Utils\Helpers] е статичен клас с полезни функции.


Монтаж:

```shell
composer require nette/utils
```

Всички примери предполагат, че псевдонимът вече е създаден:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Изпълнява обратна връзка и връща уловения изход като низ.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Ограничава стойността до посочения диапазон на включване от min и max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Сравнява две стойности по същия начин, както PHP. Прави разлика между операторите `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
Тази функция е полезна в ситуации, в които операторът може да бъде променян.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Преобразува `false` в `null`, не променя други стойности.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Връща последната грешка на PHP или празен низ, ако не е възникнала грешка. За разлика от `error_get_last()`, тя не зависи от PHP директивата `html_errors` и винаги връща текст, а не HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

От дадените опции `$possibilities` търси низ, който най-много прилича на `$value`, но не съвпада с него. Той поддържа само 8-битово кодиране.

Това е полезно, ако дадена опция е невалидна и искаме да предложим на потребителя подобна (но различна, така че същият низ да бъде игнориран). Ето как Nette създава съобщения `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', ne 'baz'
```
