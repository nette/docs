Файлова система
***************

.[perex]
[api:Nette\Utils\FileSystem] е статичен клас, който съдържа полезни функции за работа с файловата система. Едно от предимствата на собствените функции на PHP е, че те хвърлят изключения в случай на грешки.


Монтаж:

```shell
composer require nette/utils
```

Следващите примери предполагат, че псевдонимът вече е създаден:

```php
use Nette\Utils\FileSystem;
```


Манипулация .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копира файл или цяла директория. По подразбиране тя презаписва съществуващите файлове и директории. При параметър `$overwrite`, зададен на `false`, се предизвиква изключение `Nette\InvalidStateException`, ако съществува целеви файл или директория `$target`. Ако възникне грешка, се извежда изключение `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Създава директория, ако тя не съществува, включително родителските директории. Хвърля изключение `Nette\IOException`, ако възникне грешка.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Изтрива файл или цяла директория, ако съществува. Ако директорията не е празна, първо се изтрива нейното съдържание. Ако възникне грешка, се подава изключение `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Задава разрешенията на файла на адрес `$fileMode` или на директорията на адрес `$dirMode`. Рекурсивно преглежда и задава разрешения за цялото съдържание на директорията.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Отваря даден файл и връща ресурса. Параметърът `$mode` работи по същия начин, както собствените му функции `fopen()`:https://www.php.net/manual/en/function.fopen.php. При възникване на грешка се извежда изключение `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Връща съдържанието на файла `$file`. Изключението `Nette\IOException` се хвърля, ако възникне грешка.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Прочита съдържанието на файл ред по ред. За разлика от родната функция `file()`, тя не зарежда целия файл в паметта, а го чете непрекъснато,
за да могат да се четат файлове, по-големи от наличната памет. `$stripNewLines` Указва дали да се изтрият символите за край на реда `\r` и `\n`.
Ако възникне грешка, се подава изключение `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Преименуване или преместване на файл или директория `$origin`. По подразбиране тя презаписва съществуващите файлове и директории. С параметър `$overwrite`, зададен на `false`, предизвиква изключение `Nette\InvalidStateException`, ако съществува целеви файл или директория `$target`. Ако възникне грешка, се извежда изключение `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записва реда `$content` във файла `$file`. Ако възникне грешка, се хвърля изключение `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Пътеки .[#toc-paths]
====================


isAbsolute(string $path): bool .[method]
----------------------------------------

Определя дали пътят `$path` е абсолютен.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Комбинира всички сегменти на пътя и нормализира резултата.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормализира `..` и `.` и разделителите на директории в системния път.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Преобразува наклонените черти в `/`, както се използва в системите на Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Преобразува наклонените черти в символи, характерни за текущата платформа, т.е. `\` ve Windows a `/` другаде.

```php
$path = FileSystem::platformSlashes($path);
```
