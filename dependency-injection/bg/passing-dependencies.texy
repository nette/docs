Прехвърляне на зависимостта
***************************
<div class=perex>


Аргументите или "зависимостите" в терминологията на DI могат да се предават на класовете по следните основни начини:

* предаване чрез конструктор
* предаване по метод (нарича се setter)
* чрез задаване на свойство
* чрез метод, анотация или атрибут *inject

</div>

Първите три метода са приложими във всички обектно-ориентирани езици, а четвъртият е специфичен за презентаторите на Nette, затова е разгледан в [отделна глава |best-practices:inject-method-attribute]. Сега ще разгледаме по-подробно всяка от тези възможности и ще ги покажем с конкретни примери.


Внедряване чрез конструктор .[#toc-constructor-injection]
=========================================================

Зависимостите се предават като аргументи на конструктора при създаването на обекта:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Тази форма е полезна за задължителни зависимости, които са абсолютно необходими за функционирането на класа, тъй като без тях не може да се създаде инстанция.

От версия 8.0 на PHP можем да използваме по-кратка форма на запис, която е функционално еквивалентна:

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

От PHP 8.1 насам дадено свойство може да бъде маркирано с флага `readonly`, който декларира, че съдържанието на свойството няма да бъде променяно:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Контейнерът DI предава зависимостите на конструктора автоматично, като използва [автоматично свързване |autowiring]. Аргументите, които не могат да бъдат предадени по този начин (напр. низове, числа, булеви стойности), [се записват в конфигурацията |services#Arguments].


Зависимости чрез задаващи елементи .[#toc-setter-injection]
===========================================================

Зависимостите се предават чрез извикване на метод, който ги съхранява в частно свойство. Обичайната конвенция за именуване на тези методи е `set*()`, затова те се наричат setters.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Този метод е полезен за незадължителни зависимости, които не са необходими за функционирането на класа, тъй като не е гарантирано, че обектът действително ще ги получи (т.е. че потребителят ще извика метода).

В същото време този метод позволява многократно извикване на setter за промяна на зависимостта. Ако това не е желателно, добавете проверка към метода или, от версия PHP 8.1, маркирайте свойството `$cache` с флага `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

Извикването на setter се дефинира в конфигурацията на контейнера DI в [раздела за настройка |services#Setup]. И тук автоматичното предаване на зависимостите се използва чрез autowiring:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Изпълнение чрез свойства .[#toc-property-injection]
===================================================

Зависимостите се предават директно на свойството:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Този метод се счита за неприемлив, тъй като свойството трябва да бъде декларирано като `public`. Следователно нямаме контрол върху това дали предадената зависимост действително има зададения тип (това беше вярно преди PHP 7.4) и губим възможността да реагираме на новоназначената зависимост със собствен код, например за да предотвратим последващи промени. В същото време свойството става част от публичния интерфейс на класа, което може да е нежелателно.



Настройката на променливата се дефинира в конфигурацията на контейнера DI в [раздел настройка |services#Setup]:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Кой път да избера? .[#toc-which-way-to-choose]
==============================================

- Конструкторът е подходящ за задължителни зависимости, от които класът се нуждае, за да функционира.
- сетърът, от друга страна, е подходящ за незадължителни зависимости или за зависимости, които могат да бъдат променяни.
- публичните променливи не се препоръчват
