Funkcije Latte
**************

.[perex]
Poleg običajnih funkcij PHP lahko v predlogah uporabljate tudi te.

.[table-latte-filters]
| `clamp` | [vpne vrednost v območje |#clamp]
| `divisibleBy`| [preveri, ali je spremenljivka deljiva s številom |#divisibleBy]
| `even` | [preveri, ali je dano število sodo |#even]
| `first` | [vrne prvi element polja ali znak niza |#first]
| `last` | [vrne zadnji element polja ali znak niza |#last]
| `odd` | [preveri, ali je podano število liho |#odd]
| `slice` | [izvleče rezino polja ali niza |#slice]


Uporaba .[#toc-usage]
=====================

Funkcije se uporabljajo na enak način kot običajne funkcije PHP in se lahko uporabljajo v vseh izrazih:

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

[Funkcije po meri |extending-latte#functions] lahko registrirate na ta način:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

Uporabimo jo v predlogi, kot je ta:

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Funkcije .[#toc-functions]
==========================


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]{data-version:2.9}
----------------------------------------------------------------------------------------------
Vrne vrednost, ki je vpeta v območje min in max.

```latte
{=clamp($level, 0, 255)}
```

Glej tudi [filter clamp |filters#clamp]:


divisibleBy(int $value, int $by): bool .[method]{data-version:2.10.2}
---------------------------------------------------------------------
Preveri, ali je spremenljivka deljiva s številom.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]{data-version:2.10.2}
-----------------------------------------------------
Preveri, ali je podano število sodo.

```latte
{if even($num)} ... {/if}
```


first(string|array $value): mixed .[method]{data-version:2.10.2}
----------------------------------------------------------------
Vrne prvi element polja ali znak niza:

```latte
{=first([1, 2, 3, 4])}    {* izhodi 1 *}
{=first('abcd')}          {* izhodi 'a' *}
```

Glej tudi [last |#last], [filter first |filters#first].


last(string|array $value): mixed .[method]{data-version:2.10.2}
---------------------------------------------------------------
Vrne zadnji element polja ali znak niza:

```latte
{=last([1, 2, 3, 4])}    {* izhodi 4 *}
{=last('abcd')}          {* izhodi 'd' *}
```

Glej tudi [first |#first], [filter last |filters#last].


odd(int $value): bool .[method]{data-version:2.10.2}
----------------------------------------------------
Preveri, ali je podano število liho.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, int $length=null, bool $preserveKeys=false): string|array .[method]{data-version:2.10.2}
-------------------------------------------------------------------------------------------------------------------------------
Izvleče rezino polja ali niza.

```latte
{=slice('hello', 1, 2)}           {* izhodi 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* izhodi ['b', 'c'] *}
```

Filter rezine deluje kot funkcija PHP `array_slice` za polja in `mb_substr` za nize s povratno funkcijo `iconv_substr` v načinu UTF-8.

Če je začetek nenegativen, se zaporedje v spremenljivki začne s tem začetkom. Če je start negativen, se zaporedje začne tako daleč od konca spremenljivke.

Če je podana dolžina in je pozitivna, bo imelo zaporedje do toliko elementov. Če je spremenljivka krajša od dolžine, bodo prisotni samo razpoložljivi elementi spremenljivke. Če je podana dolžina in je negativna, se bo zaporedje ustavilo toliko elementov od konca spremenljivke. Če je dolžina izpuščena, bo zaporedje vsebovalo vse od odmika do konca spremenljivke.

Filter bo privzeto spremenil vrstni red in ponastavil ključe celoštevilskega polja. To obnašanje lahko spremenite z nastavitvijo vrednosti preserveKeys na true. Vrstični ključi se vedno ohranijo, ne glede na ta parameter.
