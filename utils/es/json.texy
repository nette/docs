Trabajando con JSON
*******************

.[perex]
[api:Nette\Utils\Json] es una clase estática con funciones para codificar y decodificar el formato JSON. Maneja vulnerabilidades de diferentes versiones de PHP y lanza excepciones en caso de errores.


Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que se ha creado un alias:

```php
use Nette\Utils\Json;
```


Uso
===


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Convierte `$value` al formato JSON.

Cuando se establece `$pretty`, formatea el JSON para facilitar la lectura y la claridad:

```php
Json::encode($value); // devuelve JSON
Json::encode($value, pretty: true); // devuelve JSON más legible
```

Con `$asciiSafe`, genera una salida en ASCII, es decir, los caracteres unicode se reemplazan con secuencias `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

El parámetro `$htmlSafe` asegura que la salida no contenga caracteres que tengan un significado especial en HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Con `$forceObjects`, incluso los arrays con claves numéricas se codificarán como objetos JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

En caso de error, lanza una excepción `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Manejo de la excepción
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Analiza JSON en PHP.

La configuración `$forceArray` fuerza la devolución de arrays en lugar de objetos:

```php
Json::decode('{"variable": true}'); // devuelve un objeto de tipo stdClass
Json::decode('{"variable": true}', forceArrays: true); // devuelve un array
```

En caso de error, lanza una excepción `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Manejo de la excepción
}
```


¿Cómo enviar JSON desde un presenter?
=====================================

Puede usar el método `$this->sendJson($data)` para esto, que podemos llamar, por ejemplo, en el método `action*()`, ver [Enviar una respuesta|application:presenters#Odeslání odpovědi].
