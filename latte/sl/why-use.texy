Zakaj uporabljati predloge?
***************************


Zakaj naj v PHP uporabljam sistem predlog? .[#toc-why-should-i-use-a-templating-system-in-php]
----------------------------------------------------------------------------------------------

Najprej se na kratko spomnimo zgodovine PHP, ki je polna zanimivih preobratov. Eden prvih programskih jezikov, ki so se uporabljali za oblikovanje predlog HTML, je bil C. Vendar se je njegova uporaba v ta namen izkazala za neprimerno. Rasmus Lerdorf je ustvaril PHP, da bi omogočil dinamično generiranje HTML s C na zaledju. PHP je bil sprva zasnovan kot jezik za oblikovanje predlog, vendar je sčasoma pridobil več funkcij in postal polnopravni programski jezik.

Kljub temu še vedno deluje kot jezik za oblikovanje predlog. Datoteke PHP lahko uporabljate kot strani HTML, pri čemer lahko spremenljivko izpišete z uporabo `<?= $foo ?>`.

Na začetku zgodovine jezika PHP je bil uveden sistem za oblikovanje predlog Smarty, ki je strogo ločil videz (HTML/CSS) od aplikacijske logike. Njegove zmožnosti so bile v primerjavi s PHP namerno omejene, tako da razvijalec na primer ni mogel poizvedovati po zbirki podatkov iz predloge. Vendar so ti sistemi uvedli dodatne odvisnosti, povečali kompleksnost projekta in zahtevali učenje novega jezika Smarty. Njihove prednosti so bile sporne, zato se je za predloge še naprej uporabljal navaden PHP.

Sčasoma so sistemi predlog postali bolj uporabni. Vedno več programerjev in podjetij se je zavedalo pomena varnosti. Spoznali so obstoj [ranljivosti, kot je XSS |safety-first]. Pravilen način prikaza spremenljivke ni `<?= $foo ?>` ampak `<?= htmlspecialchars($foo) ?>`, in zanemarjanje pobega, tj. uporaba funkcije `htmlspecialchars()`, lahko povzroči resno kršitev varnosti. Sistemi predlog so uvedli samodejno izločanje, tako da je bilo dovolj napisati samo `{$foo}`, in spremenljivka se je prikazala z vključenim izločanjem.

Sistemi za predloge so prinesli podporo za dedovanje, sandboxing in druge uporabne funkcije, zaradi česar je bilo pisanje predlog veliko preprostejše kot v PHP. Na neki točki so prednosti sistemov za oblikovanje predlog znatno prevladale nad pomisleki glede uvajanja novih odvisnosti.


Zakaj naj uporabljam sistem za oblikovanje predlog Latte? .[#toc-why-should-i-use-the-latte-templating-system]
--------------------------------------------------------------------------------------------------------------

Glavna razloga sta varnost in sintaksa.

Vsi sistemi za oblikovanje predlog, kot so Twig, Blade ali Smarty, so v času svojega obstoja uvedli zaščito pred XSS v obliki samodejnega eskapiranja. Vendar je Latte šel še dlje in ugotovil, da mora sistem za resnično delovanje samodejnega escapiranja razumeti HTML. Prepoznati je moral ne le niz znakov, temveč tudi oznake, atribute itd. Razlog za to je, da so v besedilu HTML, v oznakah HTML, v javascriptu itd. potrebne različne metode eskapiranja. Latte se je naučil razumeti HTML in [ustrezno |safety-first#Context-Aware Escaping] pobegniti v vsakem od teh kontekstov. Tako je postal prvi in do zdaj edini sistem za oblikovanje predlog PHP s kontekstno občutljivim eskapiranjem.

Latte predstavlja resnično varen sistem za oblikovanje predlog, medtem ko drugi sistemi ustvarjajo lažen občutek varnosti.

Druga pomembna prednost sistema Latte je uporaba sintakse PHP, zato se programerju/koderju ni treba učiti novega jezika, temveč lahko uporabi tisto, kar že dobro pozna.


Katere so glavne razlike med sistemi za oblikovanje predlog, kot so Latte, Twig in Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Razlike med sistemi za oblikovanje predlog, kot so Latte, Twig in Blade, so predvsem v njihovi sintaksi, varnosti in integraciji z ogrodji:

- Latte: uporablja sintakso jezika PHP, zato se ga je lažje naučiti in uporabljati. Zagotavlja vrhunsko zaščito pred napadi XSS.
- Twig: uporablja sintakso, podobno jeziku Python, ki se precej razlikuje od PHP. Izhaja brez razlikovanja konteksta. Dobro je integriran z ogrodjem Symfony.
- Blade: uporablja mešanico sintakse PHP in lastne sintakse. Izhaja brez razlikovanja konteksta. Tesno je povezan s funkcijami in ekosistemom Laravel.


Ali se podjetjem splača uporabljati sistem za oblikovanje predlog? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
----------------------------------------------------------------------------------------------------------------------------------

Prvič, stroški, povezani z usposabljanjem, uporabo in splošnimi koristmi, se močno razlikujejo glede na sistem. Sistem za oblikovanje predlog Latte zaradi uporabe sintakse PHP močno poenostavi učenje za programerje, ki so že seznanjeni s tem jezikom. Običajno programer potrebuje nekaj ur, da se dovolj dobro seznani s sistemom Latte, kar zmanjša stroške usposabljanja in pospeši uvajanje tehnologije ter, kar je najpomembneje, učinkovitost pri vsakodnevni uporabi.

Poleg tega program Latte zagotavlja visoko raven zaščite pred ranljivostmi XSS zaradi svoje edinstvene tehnologije pobegov, ki upošteva kontekst. Ta zaščita je ključnega pomena za zagotavljanje varnosti spletnih aplikacij in zmanjševanje tveganja napadov, ki bi lahko ogrozili uporabnike ali podatke podjetja. Varnost spletnih aplikacij je pomembna tudi za ohranjanje dobrega ugleda podjetja. Varnostne težave lahko povzročijo izgubo zaupanja strank in škodijo ugledu podjetja na trgu.

Z uporabo Latte se zmanjšajo tudi skupni stroški razvoja in vzdrževanja, saj je oboje lažje. Zato se uporaba sistema za oblikovanje predlog vsekakor splača.


Kako Latte vpliva na zmogljivost spletne aplikacije in strežniške vire? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
------------------------------------------------------------------------------------------------------------------------------------------------------

Čeprav se predloge Latte obdelujejo hitro, ta vidik ni pomemben. Razlog je v tem, da se razčlenjevanje datotek izvede samo enkrat med prvim prikazom. Nato se sestavijo v kodo PHP, shranijo na disk in se zaženejo pri vsakem naslednjem zahtevku, ne da bi bilo potrebno ponovno sestavljanje.

Tako deluje v produkcijskem okolju. Med razvojem se predloge Latte ponovno sestavijo vsakič, ko se spremeni njihova vsebina, zato razvijalec vedno vidi trenutno različico.
