Непрерывная интеграция с помощью Travis CI
******************************************

.[perex]
Вы сделали это. Вы покрыли свой код тестами и теперь можете доверять своему коду. На самом деле, это не так. Однажды вы забудете запустить тесты, развернете код в продакшн и получите гневный звонок от своего начальника.

Этого не случится, если вы используете непрерывную интеграцию. В этом руководстве вы узнаете, как настроить Nette Tester с Travis CI.


Как работает Travis CI .[#toc-how-travis-ci-works]
==================================================

Travis CI((Continuous Integration)) ("Travis") - это очень популярный сервис для хостинга [непрерывной интеграции |https://en.wikipedia.org/wiki/Continuous_integration]. Сервис является бесплатным((Платный для частных репозиториев.)) и предлагает автоматическое выполнение ваших тестов после публикации в вашем репозитории. Он также полностью интегрирован с GitHub.

Чтобы настроить Travis, вам нужно добавить файл с именем `.travis.yml` в корень вашего репозитория. Этот файл состоит из секций, описанных далее в этом руководстве. Ни одна из секций не является обязательной, однако если мы опустим секцию `script`, Travis попытается запустить `phpunit`.

Секции выполняются в следующем порядке:
- `before_install`
- `install`
- `before_script`
- `script` (обязательно)
- `after_success` или `after_failure`
- `after_script`

.[caution]
`.travis.yml` позволяет использовать только пробельный отступ. Вы можете использовать [валидатор |https://config.travis-ci.com/explore] для проверки вашего файла.

Подробнее см. [официальную документацию |https://docs.travis-ci.com].


Настройка .travis.yml .[#toc-setting-up-travis-yml]
===================================================


Язык .[#toc-language]
---------------------

Прежде всего, вам нужно указать Travis, какую языковую среду выбрать для вашего проекта. Это можно сделать с помощью опции `language: php`. Вы можете указать, для каких версий PHP будут выполняться тесты. Не вводить версию патча((Номер третьей версии)) указывает Travis на использование последней доступной версии.

```yaml
language: php

php:
  - 7.1
  - 7.2
  - 7.3
  - 7.4
  - nightly  # development version
```


Переменные окружения .[#toc-environment-variables]
--------------------------------------------------

Вы можете поручить Travis выполнить несколько запусков с разными наборами значений переменных окружения. Для этого добавьте ключ `env`. Каждая пуля воспринимается как отдельное окружение, и тесты запускаются отдельно. Позже в файле мы будем использовать `TESTER_PHP_BIN`, чтобы запустить Tester и с опцией `-p php-cgi`.

```yaml
env:
  - TESTER_PHP_BIN="php"
  - TESTER_PHP_BIN="php-cgi"
```

Комбинация из пяти версий php и двух вариантов окружения дает в общей сложности 10 запусков.


Установка зависимостей .[#toc-dependency-installation]
------------------------------------------------------

.[note]
В этом руководстве предполагается, что вы используете Composer для управления зависимостями вашего проекта и что вам требуется nette/tester в dev секции. Для получения дополнительной информации смотрите [учебник по Composer |best-practices:composer].

Для установки зависимостей используйте раздел `install`. Каждая пуля означает одну команду. Composer устанавливает ваши dev-зависимости по умолчанию. Вы должны использовать `--no-interaction`, чтобы Composer не задавал вопросы, на которые Travis не может ответить. Вы также должны использовать `--prefer-source`. Это предотвратит случайный отказ ваших тестов, если вы исчерпаете ограниченное количество запросов GitHub API.

Если вы хотите использовать последнюю сборку, обновите Composer в разделе `before_install`.

```yaml
before_install:
  - composer self-update

install:
  - composer install --no-interaction --prefer-source
```


Матрица сборки .[#toc-build-matrix]
-----------------------------------

В зависимости от конфигурации, указанной выше, создается матрица сборки. Матрица содержит все комбинации настроек окружения. Одна комбинация называется заданием и выполняется отдельно. Вы можете изменить матрицу в разделе `matrix`.

Если вы хотите исключить задание, используйте ключ `exclude`. В нашем случае мы не хотим использовать бинарный файл php-cgi для старых версий PHP.

```yaml
matrix:
  exclude:
    - php: 7.0
      env: TESTER_PHP_BIN="php-cgi"

    - php: 7.1
      env: TESTER_PHP_BIN="php-cgi"
```

Travis показывает, что сборка прошла только в том случае, если все задания прошли. Однако вы можете определить задания, которые могут быть провалены, не приводя к тому, что вся сборка будет показана как проваленная. Для этого объявите `allow_failures`. Для нашего случая мы разрешаем ночной PHP потерпеть неудачу.

```yaml
matrix:
  allow_failures:
    - php: nightly
```

.[note]
Обратите внимание, что при разрешении сбоев мы указали только версию php, а не переменные окружения. Это означает, что все задания с версией nightly будут разрешены к выполнению, не обращая внимания на значения переменных окружения. Это работает и с `exclude`.


Запуск тестов .[#toc-running-the-tests]
---------------------------------------

Тесты запускаются в разделе `script`, где вам нужно только выполнить Tester. Предположим, что ваши тесты находятся в папке `tests/` и вы предоставляете свой собственный `php.ini` в той же папке. Кроме того, укажите Tester отображать информацию о пропущенных тестах с помощью опции `-s` и использовать значение ранее объявленного `TESTER_PHP_BIN` в качестве бинарного файла PHP с помощью опции `-p`.

```yaml
script:
  - ./vendor/bin/tester -p $TESTER_PHP_BIN -s -c ./tests/php.ini ./tests
```


Если тест не прошел .[#toc-if-test-fails]
-----------------------------------------

Раздел `after_failure` выполняется в случае неудачи теста. Tester сохраняет фактические значения переменных в случае неудачи утверждения. Мы будем использовать эту секцию для печати фактических значений.

```yaml
after_failure:
  # Prints *.actual files content
  - for i in $(find ./tests -name \*.actual); do echo "--- $i"; cat $i; echo; echo; done
```


Настройка других служб: .[#toc-setting-up-other-services]
---------------------------------------------------------

Travis поставляется с предустановленными популярными сервисами (например, MySQL). Однако если вам необходимо использовать, например, хранилище Redis, вы можете сообщить об этом Travis в разделе `services`.

```yaml
services:
  - redis-server
```


Инициализация базы данных: .[#toc-database-initialization]
----------------------------------------------------------

MySQL работает на `127.0.0.1`, и вы можете войти в систему, используя `travis` или `root` в качестве имени пользователя. Пароль не требуется. Вы можете импортировать свою базу данных в разделе `before_script`. Допустим, ваш скрипт установки базы данных находится в разделе `tests/testbase.sql`.

```yaml
before_script:
  - mysql -u root -e 'CREATE DATABASE testbase;'
  - mysql -u root testbase < tests/testbase.sql
```


Результат .[#toc-result]
------------------------

Сайт `.travis.yml` уже должен выглядеть примерно так:

```yaml
language: php

php:
  - 7.1
  - 7.2
  - 7.3
  - 7.4
  - nightly

env:
  - TESTER_PHP_BIN="php"
  - TESTER_PHP_BIN="php-cgi"

matrix:
  allow_failures:
    - php: nightly

  exclude:
    - php: 7.0
      env: TESTER_PHP_BIN="php-cgi"

    - php: 7.1
      env: TESTER_PHP_BIN="php-cgi"

services:
  - redis-server

before_install:
  - composer self-update

install:
  - composer install --no-interaction --prefer-source

before_script:
  - mysql -u root -e 'CREATE DATABASE testbase;'
  - mysql -u root testbase < tests/testbase.sql

script:
  - ./vendor/bin/tester -p $TESTER_PHP_BIN -c ./tests/php.ini -s ./tests/

after_failure:
  # Prints *.actual files content
  - for i in $(find ./tests -name \*.actual); do echo "--- $i"; cat $i; echo; echo; done
```


Интеграция GitHub .[#toc-github-integration]
============================================

Как упоминалось выше, Travis интегрирован с GitHub. Однако вам необходимо указать, какие репозитории должны быть протестированы. Это делается с помощью Webhook, который уведомляет Travis об изменениях в вашем репозитории.


Активация Webhook .[#toc-activating-webhook]
--------------------------------------------

Сначала зайдите в [Travis CI |https://travis-ci.org/] и войдите в систему под своей учетной записью GitHub. После синхронизации аккаунта вы увидите все репозитории, к которым у вас есть доступ. Переключите переключатель на ON для всех репозиториев, которые вы хотите активировать.

Теперь Travis будет добавлять ваш репозиторий в очередь после каждого опубликованного коммита или созданного pull-запроса. Через некоторое время ваш репозиторий будет протестирован.


Изображение статуса .[#toc-status-image]
----------------------------------------

Travis может [сгенерировать |https://docs.travis-ci.com/user/status-images/] для вас [изображение состояния |https://docs.travis-ci.com/user/status-images/]. Вы можете вставить этот значок, например, в свой файл `README.md`.


Пропуск коммита .[#toc-skipping-commit]
---------------------------------------

Некоторые коммиты не нуждаются в тестировании. Вы можете добавить `[skip ci]` в сообщении о коммите, и Travis пропустит коммит.
