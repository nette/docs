Работа с числами с плавающей точкой (float)
*******************************************

.[perex]
[api:Nette\Utils\Floats] — это статический класс с полезными функциями для сравнения десятичных чисел (float).


Установка:

```shell
composer require nette/utils
```

Все примеры предполагают созданный псевдоним (alias):

```php
use Nette\Utils\Floats;
```


Мотивация
=========

Вы спрашиваете себя, зачем вообще класс для сравнения float? Ведь я могу использовать операторы `<`, `>`, `===` и все будет в порядке.
Это не совсем так. Как вы думаете, что выведет этот код?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Если вы запустите код, некоторые из вас наверняка удивятся, что программа вывела `not same`.

При математических операциях с десятичными числами возникают ошибки из-за преобразования между десятичной и двоичной системами. Например, `0.1 + 0.2` дает `0.300000000000000044…`. Поэтому при сравнении мы должны допускать небольшую разницу начиная с определенного десятичного знака.

И именно это делает класс `Floats`. Следующее сравнение уже будет работать как ожидалось:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

При попытке сравнить `NAN` выбрасывает исключение `\LogicException`.

.[tip]
Класс `Floats` допускает различия меньше `1e-10`. Если вам нужно работать с большей точностью, лучше используйте библиотеку BCMath.


Сравнение float
===============


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Возвращает `true`, если `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Возвращает `true`, если верно `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Возвращает `true`, если верно `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Возвращает `true`, если верно `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Возвращает `true`, если верно `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Если `$a` < `$b`, возвращает `-1`, если они равны, возвращает `0`, и если `$a` > `$b`, возвращает `1`.

Можно использовать, например, с функцией `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr теперь [-3.5, 1, 2, 5]
```


Вспомогательные функции
=======================


isZero(float $value): bool .[method]
------------------------------------

Возвращает `true`, если значение равно нулю.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Возвращает `true`, если значение является целым числом.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
