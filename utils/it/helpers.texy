Funzioni ausiliarie
*******************

.[perex]
[api:Nette\Utils\Helpers] è una classe statica con funzioni utili.


Installazione:

```shell
composer require nette/utils
```

Tutti gli esempi presuppongono la creazione di un alias:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Esegue il callback e restituisce l'output catturato come stringa.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Limita il valore all'interno dell'intervallo inclusivo specificato min e max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Confronta due valori nello stesso modo in cui lo fa PHP. Distingue gli operatori `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
La funzione è utile in situazioni in cui l'operatore è variabile.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Converte `false` in `null`, non modifica altri valori.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Restituisce l'ultimo errore in PHP o una stringa vuota se non si è verificato alcun errore. A differenza di `error_get_last()`, non è influenzato dalla direttiva PHP `html_errors` e restituisce sempre testo, non HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Tra le opzioni offerte `$possibilities`, cerca la stringa più simile a `$value`, ma non identica. Supporta solo la codifica a 8 bit.

È utile nel caso in cui una certa opzione non sia valida e vogliamo suggerire all'utente una simile (ma diversa, motivo per cui la stringa identica viene ignorata). In questo modo Nette crea i messaggi `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', non 'baz'
```
