Робота з JSON
*************

.[perex]
[api:Nette\Utils\Json] — це статичний клас з функціями для кодування та декодування формату JSON. Він обробляє вразливості різних версій PHP та викидає винятки при помилках.


Встановлення:

```shell
composer require nette/utils
```

Усі приклади передбачають створений псевдонім:

```php
use Nette\Utils\Json;
```


Використання
============


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Перетворює `$value` у формат JSON.

При встановленні `$pretty` форматує JSON для легшого читання та оглядності:

```php
Json::encode($value); // повертає JSON
Json::encode($value, pretty: true); // повертає більш оглядний JSON
```

При `$asciiSafe` генерує вивід у ASCII, тобто символи unicode замінюються послідовностями `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Параметр `$htmlSafe` забезпечує, що вивід не міститиме символів, що мають спеціальне значення в HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

З `$forceObjects` навіть масиви з числовими ключами будуть кодуватися як об'єкти JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

При помилці викидає виняток `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Обробка винятку
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Розбирає JSON у PHP.

Налаштування `$forceArray` змушує повертати масиви замість об'єктів:

```php
Json::decode('{"variable": true}'); // повертає об'єкт типу stdClass
Json::decode('{"variable": true}', forceArrays: true); // повертає масив
```

При помилці викидає виняток `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Обробка винятку
}
```


Як надіслати JSON з презентера?
===============================

Для цього можна використати метод `$this->sendJson($data)`, який можна викликати, наприклад, у методі `action*()`, див. [Надсилання відповіді|application:presenters#Odeslání odpovědi].
