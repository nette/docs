Presentery
**********

<div class=perex>

Seznámíme se s tím, jak se v Nette píší presentery a šablony. Po přečtení budete vědět:

- jak funguje presenter
- jak se píší šablony
- jak se tvoří komponenty
- co jsou persistentní parametry

</div>


Presenter je třída, která představuje nějakou konkrétní stránku aplikace: např. homepage; produkt v e-shopu; přihlašovací formulář; sitemap feed atd. Aplikace může mít od jednoho po tisíce presenterů. V jiných frameworcích se používá termín kontroler.

Úkolem presenteru je vyřídit HTTP požadavek a vrátit odpověď, což může být HTML stránka, obrázek, XML dokument, odeslání souboru na disku, JSON, přesměrování atd.

Obvykle se pod pojmem presenter myslí potomek třídy [api:Nette\Application\UI\Presenter], který je vhodný pro generování HTML stránek a kterému se budeme věnovat ve zbytku této kapitoly. V obecném smyslu je presenter jakýkoliv objekt implementující rozhraní [api:Nette\Application\IPresenter].


Požadavek a parametry
=====================

Presenter dostává HTTP požadavek transformovaný routerem a to v podobě objektu [api:Nette\Application\Request]. Vrátí nám jej metoda `getRequest()`. Aktuální akci vrací `getAction()`. Hodnoty parametrů získáme pomocí `getParameter($name)`:

```php
$id = $this->getParameter('id');
```


Životní cyklus presenteru
=========================

[Už víme |application], že presenter se automaticky pokouší volat metody `render<Akce>()`, tedy například `renderShow()`. Automaticky volaných metod je více, jejich pořadí prozrazuje obrázek životního cyklu presenteru. Metody se volají jen pokud existují, žádná z nich existovat nemusí.


[* lifecycle2.gif *] *** *Životní cyklus presenteru* .<>


`startup()`
-----------

Ihned po vytvoření presenteru se zavolá metoda `startup()`. V ní lze inicializovat proměnné nebo ověřit uživatelská oprávnění. Je vyžadováno, aby metoda vždy volala předka `parent::startup()`.


`action<Action>(args...)` .{toc: action<Action>()}
--------------------------------------------------

Obdoba metody `render<View>()`. Zatímco `render<View>()` je určena k tomu, aby připravila data pro konkrétní šablonu, která se následně vykreslí, tak v `action<Action>()` se zpracovává požadavek bez návaznosti na zobrazení šablony. Například se uloží data do databáze, přihlásí uživatel, a tak podobně, a poté [přesměruje jinam|#Přesměrování].

Důležité je, že `action<Action>()` se volá dříve než `render<View>()`, takže v ní můžeme změnit, která šablona se bude kreslit a tedy i která metoda `render<View>()` volat. A to pomocí `$this->setView('jineView')` (zavolá se `renderJineView()`).

Metoda se volá s parametry z HTTP požadavku, jak je vrátil router. Je možné také uvést parametrům typy, např. `actionShow(int $id, string $slug = null)` - pokud bude parametr `id` chybět nebo pokud nebude integer, presenter vrátí chybu 404.


`handle<Signal>(args...)` .{toc: handle<Signal>()}
--------------------------------------------------

Metoda zpracovává tzv. [signály |components#signál neboli subrequest] neboli subrequesty. Určeno zejména pro komponenty a zpracování AJAXových požadavků. Na stejné úrovni se také provádí zpracování formulářů.

Metoda se volá s parametry z HTTP požadavku, jako v případě `action<Action>()`.


`beforeRender()`
----------------

Metoda `beforeRender`, jak už název napovídá, se volá před každou metodou `render<View>()`. Používá se pro společnou konfiguraci šablony, předání proměnných pro layout a podobně.


`render<View>(args...)` .{toc: render<View>()}
----------------------------------------------

Místo, kde předávat data do šablony, která se následně vykreslí.

Metoda se volá s parametry z HTTP požadavku, jako v případě `action<Action>()`.


`shutdown()`
------------

Je vyvolána při ukončení životního cyklu presenteru.



Odeslání odpovědi
=================

Odpovědí presenteru může být HTML stránka, odeslání souboru, JSON nebo třeba přesměrování na jinou stránku. Pokud explicitně neřekneme, co má presenter odpovědět, bude odpovědí [pokus o vykreslení šablony|#Vykreslení šablony] s HTML stránku. Pokud šablonu nenajde, vrátí chybu 404.

Kdykoliv během životního cyklu můžeme odeslat jinou odpověď, čímž se také presenter ukončí:

- `redirect()`, `redirectPermanent()`, `redirectUrl()` a `forward()` [#přesměrování]
- `error()` presenter ukončí [chybovou hláškou|#Chyba 404 a spol.]
- `sendJson($data)` presenter ukončí a odešle data ve formátu JSON
- `sendTemplate()` presenter ukončí a ihned vykreslí šablonu
- `sendResponse($response)` presenter ukončí a odešle vlastní odpověď
- `terminate()` presenter ukočí bez odpovědi

Příklad odeslání JSONu:

```php
public function actionData(): void
{
	$data = ['hello' => 'nette'];
	$this->sendJson($data);
}
```

Odpověď, kterou vrací presenter, je objekt implementující rozhraní [api:Nette\Application\IResponse]. K dispozici je řada připravených odpovědí, další můžete najít na "Componette":https://componette.com/search/response, a všechny lze odesílat přávě metodou `sendResponse()`:

```php
use Nette\Application\Responses;

// Prosty text
$this->sendResponse(new Responses\TextResponse('Hello Nette!'));

// Odešle soubor
$this->sendResponse(new Responses\FileResponse(__DIR__ . '/invoice.pdf', 'Invoice13.pdf'));

// Odpovědí bude callback
$this->sendResponse(new Responses\CallbackResponse(function (Nette\Http\IRequest $httpRequest, Nette\Http\IResponse $httpResponse) {
	if ($httpResponse->getHeader('Content-Type') === 'text/html')) {
		echo '<h1>Hello</h1>';
	}
});
```


Přesměrování
============

K přechodu na jiný presenter slouží metody `redirect()` a `forward()`, které mají velmi podobnou syntax jako funkce [link() |#Vytváření odkazů]. Liší se v tom, že `forward()` přejde na nový presenter okamžitě bez přesměrování.

Příklad přesměrování:

```php
$this->redirect('Product:show', $id);
```

Metoda `redirect()` představuje dočasné přesměrování s HTTP kódem 302 nebo 303. Permanentní přesměrování s kódem 301:

```php
$this->redirectPermanent('Product:show', $id);
```

Na jinou URL mimo aplikaci lze přesměrovat metodou redirectUrl()

```php
$this->redirectUrl('https://nette.org');
```

Přesměrování okamžitě ukončí činnost presenteru vyhozením tzv. tiché ukončovací výjimky `Nette\Application\AbortException`.

Před přesměrováním lze odeslat tzv. [flash message |#flash zprávy], tedy zprávy, které budou po přesměrování zobrazeny v šabloně.


Chyba 404 a spol.
=================

Pokud nelze splnit požadavek, třeba z důvodu, že záznam neexistuje v databázi, vyhodíme chybu 404 metodou `error(string $message = null, int $httpCode = 404)`.

```php
public function renderShow(int $id): void
{
	$product = $this->productRepository->getProduct($id);
	if (!$product) {
		$this->error();
	}

	// ...
}
```

HTTP kód chyby lze předat jako druhý parametr, výchozí je 404. Metoda funguje tak, že vyhodí výjimku `Nette\Application\BadRequestException`, načež `Application` předá řízení error-presenteru.


Vytváření odkazů
================

Presenter disponuje metodou `link()`, pomocí které lze vytvářet URL odkazy na další presentery. Prvním parametrem je cílová akce presenteru, následují předávané argumenty, které mohou být uvedeny jako pole:

```php
$url = $this->link('Product:show', $productId);

$url = $this->link('Product:show', [$productId, 'lang' => 'cs']);
```

Více informací najdete v kapitole [Odkazování v presenteru|link-generation#Odkazování v presenteru].


Persistentní parametry
======================

Persistentní parametry se v odkazech **přenášejí automaticky**. To znamená, že je nemusíme explicitně uvádět, ale přesto se přenesou.

Pokud má vaše aplikace dvě jazykové mutace, bylo by neskutečně únavné v každém odkazu přenášet i aktuální jazyk. To není s Nette Framework potřeba. Prostě si parametr `lang` označíme jako persistentní a to tímto způsobem:

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	/** @persistent */
	public $lang;
```

Pokud aktuální hodnota parametru `lang` bude `'en'`, tak URL vytvořené pomocí `$this->link()` nebo `n:href` v šabloně bude obsahovat `lang=en`. Paráda!

Při vytváření odkazu lze persistentní parametr uvést a tak jeho hodnotu změnit:

```html
<a n:href="Product:show $productId, lang => cs">detail v češtině</a>
```

Persistentní proměnná musí být deklarovaná jako public. Můžeme uvést i výchozí hodnotu. Bude-li mít parametr tuto výchozí hodnotou, pak nebude přenášen v URL.

Persistence zohledňuje hierarchii tříd presenterů, tedy parametr definovaný v určitém presenteru nebo traitě je poté automaticky přenášen do každého presenteru z něj dědícího nebo užívajícího stejnou traitu.



Flash zprávy
============

Jde o zprávy obvykle informující o výsledku nějaké operace. Důležitým rysem flash zpráv je to, že jsou v šabloně k dispozici i po přesměrování. I po zobrazení zůstanou živé ještě další 3 sekundy – například pro případ, že by z důvodu chybného přenosu uživatel dal stránku obnovit - zpráva mu tedy hned nezmizí.

Stačí zavolat metodu [flashMessage() |api:Nette\Application\UI\Control::flashMessage()] a o předání do šablony se postará presenter. Prvním parametrem je text zprávy a nepovinným druhým parametrem její typ (error, warning, info apod.). Metoda `flashMessage()` vrací instanci flash zprávy, které je možné přidávat další informace.

```php
public function deleteFormSubmitted(): void
{
	...
	$this->flashMessage('Položka byla smazána.');
	$this->redirect(...); // a přesměrujeme
}
```

Šabloně jsou tyto zprávy k dispozici v proměnné `$flashes` jako anonymní objekty, které obsahují vlastnosti `message` (text zprávy), `type` (typ zprávy) a mohou obsahovat již zmíněné uživatelské informace. Vykreslíme je třeba takto:

```php
{foreach $flashes as $flash}
	<div class="flash {$flash->type}">{$flash->message}</div>
{/foreach}
```


Předávání závislostí
====================

Presenter by nikdy neměl obstarávat byznys logiku aplikace, zapisovat a číst z databáze, provádět výpočty, atd. Od toho jsou třídy z vrstvy, kterou označujeme jako model. Například třída `ArticleRepository` může mít na starosti načítání a ukládání článků. Aby s ní mohl presenter pracovat, nechá si ji [předat pomocí dependency injection |di-usage]:

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	/** @var ArticleRepository */
	private $articles;

	public function __construct(ArticleRepository $articles)
	{
		$this->articles = $articles;
	}

	public function renderShow(int $id): void
	{
		$this->template->article = $this->articles->find($id);
	}
}
```

Injektovat lze také do `public` proměnných s použitím [anotace @inject |di-usage#anotace-inject].



Vykreslení šablony
==================

Nette používá šablonovací systém [Latte |latte:]. Jednak proto, že jde o nejlépe zabezpečený šablonovací systém pro PHP, a zároveň také systém nejintuitivnější. Nemusíte se učit mnoho nového, vystačíte si se znalostí PHP a několika značek.

Je obvyklé, že stránka se složí ze šablony layoutu + šablony dané akce. Šablona layoutu obsahuje v některých místech bloky `{block}` nebo značku pro vkládání bloků `{include}`. Příklad:

```html
<!DOCTYPE html>
<html>
<head>
	<title>{block title}My App{/block}</title>
</head>

<body>
	<header>...</header>

	{include content}

	<footer>...</footer>
</body>
</html>
```

Šablona akce potom definuje blok `content`, který se vloží na místo `{include content}`, nebo také re-definuje blok `title`, kterým přepíše `{block title}` v šabloně layoutu:

```html
{block title}Homepage{/block}

{block content}
<h1>Homepage</h1>
....
```

Cestu k šablonám odvodí presenter podle jednoduché logiky. V případě presenteru `Product` a akce `show` zkusí, zda existuje jeden z těchto souborů umístěných relativně od adresáře s třídou presenteru:

- `templates/Product/show.latte`
- `templates/Product.show.latte`

Taktéž se pokusí dohledat layout (ten je nepovinný):

- `templates/Product/@layout.latte`
- `templates/Product.@layout.latte`
- `templates/@layout.latte` layout společný pro více presenterů

.[note]
Způsob dohledávání šablon můžeme změnit přepsáním metod [formatTemplateFiles |api:Nette\Application\UI\Presenter::formatTemplateFiles()] nebo [formatLayoutTemplateFiles |api:Nette\Application\UI\Presenter::formatLayoutTemplateFiles()].

Presentery a komponenty předávají do šablon několik užitečných proměnných:

- `$basePath` je absolutní URL cesta ke kořenovému adresáři (např. `/CD-collection`)
- `$baseUrl` je absolutní URL ke kořenovému adresáři (např. `http://localhost/CD-collection`)
- `$user` je objekt [reprezentující uživatele |access-control]
- `$presenter` je aktuální presenter
- `$control` je aktuální komponenta nebo presenter
- `$flashes` pole [zpráv |#flash zprávy] zaslaných funkcí `flashMessage()`

V šabloně se [vytvářejí odkazy |link-generation] na další presentery & akce tímto způsobem:

```html
<a n:href="Product:show $productId">detail produktu</a>
```


Komponenty
==========

Bavíme-li se o presenterech, tak pod pojmem [komponenty |components] obvykle myslíme potomky třídy [Control |api:Nette\Application\UI\Control]. Přesnější by tedy bylo používat termín „controls“ (tj. ovládací prvky), ale „kontrola“ má v češtině zcela jiný význam a spíš se ujaly „komponenty“.

Samotný presenter `Nette\Application\UI\Presenter` je potomkem třídy `Control`, takže je tu velká podobnost mezi komponentami a presenterem. Především však `UI\Control` (a tím pádem i `UI\Presenter`) je tzv. komponentový kontejner, což znamená, že do něj lze vkládat další komponenty. Podobně, jako třeba do komponenty [formuláře |forms] vkládáme formulářové prvky (textové políčko, tlačítko, ...). A stejně jako u formulářů lze k prvkům přistupovat přes hranaté závorky (např. `$this['menu']`).


Tovární metody pro komponenty
-----------------------------

Továrna na komponenty představuje elegantní způsob, jak komponenty vytvářet teprve ve chvíli, kdy jsou skutečně potřeba (lazy / on demand). Celé kouzlo spočívá v implementaci metody s názvem `createComponent<Name>()`, kde `<Name>` je název vytvářené komponenty, a která komponentu vytvoří a vrátí. Komponenta je následně připojena k presenteru. Metodě `createComponent<Name>` je předáván volitelný parametr s názvem komponenty, kterou vytváří.

```php
class DefaultPresenter extends Nette\Application\UI\Presenter
{
	public function renderDefault(): void
	{
		$menu = $this['menu']; // přistoupíme ke komponentě
		// a pokud to bylo poprvé, zavolá se createComponentMenu()
		// ...
	}

	protected function createComponentMenu(): MenuControl
	{
		$menu = new MenuControl;
		$menu->items = $this->item;
		return $menu;
	}
}
```

.[note]
Názvy komponent začínají vždy malým písmenem, přestože se v názvu továrny píší s velkým.

Díky tomu, že jsou všechny komponenty vytvářeny v samostatné metodě, získává kód na přehlednosti.

Továrny nikdy nevoláme přímo, zavolá se sama ve chvíli, kdy komponentu poprvé použijeme. Díky tomu je komponenta vytvořena ve správný okamžik a pouze v případě, když je skutečně potřeba. Pokud komponentu nepoužijeme (třeba při AJAXovém požadavku, kdy se přenáší jen část stránky, nebo při cachování šablony), nevytvoří se vůbec a ušetříme výkon serveru.

V šabloně je možné získat a vykreslit komponentu pomocí [{control} |latte:tags#vykreslovani-komponent]. Není proto potřeba manuálně komponenty předávat do šablony.

```html
<h2>Editační formulář</h2>

{control editForm}
```

Podrobnější informace o komponentách najdete na [samostatné stránce |components].


Persistentní komponenty
-----------------------

Nejen parametry, ale také komponenty mohou být persistentní. Jejich stav se pak přenáší při přechodu na jiný presenter podobně, jako v případě [persistentních parametrů |#persistentni-parametry]. Persistentní komponenty značíme anotací u třídy presenteru (zde značíme komponenty `calendar` a `menu`):

```php
/**
 * @persistent(calendar, menu)
 */
class DefaultPresenter extends Nette\Application\UI\Presenter
{
	// ...
}
```

Podkomponenty uvnitř těchto komponent není třeba značit, stanou se persistentní taky.


Kde mohu získat komponenty?
---------------------------

Na stránce [Componette |https://componette.org/search/component] můžete najít open-source komponenty, které sem umístili dobrovolníci z komunity okolo Nette Framework. Nette Foundation za ně neručí.


Konfigurace
===========

Pomocí aplikační konfigurace lze ovlivnit některé chování aplikace. Zapisujeme ji do sekce `application` v našem konfiguračním souboru, viz [konfigurace application|configuring#application].


{{composer: nette/application}}
