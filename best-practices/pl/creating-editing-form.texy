Formularz tworzenia i edycji rekordu
************************************

.[perex]
Jak poprawnie zaimplementować dodawanie i edycję rekordu w Nette, używając tego samego formularza dla obu?

W wielu przypadkach formularze dodawania i edycji rekordu są takie same, różniąc się jedynie etykietą na przycisku. Pokażemy przykłady prostych prezenterów, w których wykorzystujemy formularz najpierw do dodania rekordu, potem do jego edycji, a na koniec łączymy te dwa rozwiązania.


Dodanie rekordu .[#toc-pridani-zaznamu]
---------------------------------------

Przykład prezentera używanego do dodania rekordu. Faktyczną pracę z bazą danych pozostawimy klasie `Facade`, której kod nie jest istotny dla tego przykładu.


```php
use Nette\Application\UI\Form;

class RecordPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentRecordForm(): Form
	{
		$form = new Form;

		// ... přidáme políčka formuláře ...

		$form->onSuccess[] = [$this, 'recordFormSucceeded'];
		return $form;
	}

	public function recordFormSucceeded(Form $form, array $data): void
	{
		$this->facade->add($data); // přidání záznamu do databáze
		$this->flashMessage('Successfully added');
		$this->redirect('...');
	}

	public function renderAdd(): void
	{
		// ...
	}
}
```


Edycja zapisu .[#toc-editace-zaznamu]
-------------------------------------

Teraz zobaczmy jak wyglądałby prezenter używany do edycji nagrania:


```php
use Nette\Application\UI\Form;

class RecordPresenter extends Nette\Application\UI\Presenter
{
	private $record;

	public function __construct(
		private Facade $facade,
	) {
	}

	public function actionEdit(int $id): void
	{
		$record = $this->facade->get($id);
		if (
			!$record // oveření existence záznamu
			|| !$this->facade->isEditAllowed(/*...*/) // kontrola oprávnění
		) {
			$this->error(); // chyba 404
		}

		$this->record = $record;
	}

	protected function createComponentRecordForm(): Form
	{
		// ověříme, že akce je 'edit'
		if ($this->getAction() !== 'edit') {
			$this->error();
		}

		$form = new Form;

		// ... přidáme políčka formuláře ...

		$form->setDefaults($this->record); // nastavení výchozích hodnot
		$form->onSuccess[] = [$this, 'recordFormSucceeded'];
		return $form;
	}

	public function recordFormSucceeded(Form $form, array $data): void
	{
		$this->facade->update($this->record->id, $data); // aktualizace záznamu
		$this->flashMessage('Successfully updated');
		$this->redirect('...');
	}
}
```

W metodzie *action*, która jest wywoływana na początku [cyklu życia prezentera |application:presenters#zivotni-cyklus-presenteru], sprawdzamy istnienie rekordu oraz uprawnienia użytkownika do jego edycji.

Zapisujemy rekord do właściwości `$record`, aby był dostępny w metodzie `createComponentRecordForm()` do ustawiania domyślnych wartości, oraz `recordFormSucceeded()` do identyfikatora. Alternatywnym rozwiązaniem byłoby ustawienie wartości domyślnych bezpośrednio w `actionEdit()` i wartości ID,
który jest częścią adresu URL, jest pobierany za pomocą `getParameter('id')`:


```php
	public function actionEdit(int $id): void
	{
		$record = $this->facade->get($id);
		if (
			// oveření existence a kontrola oprávnění
		) {
			$this->error();
		}

		// nastavení výchozích hodnot formuláře
		$this->getComponent('recordForm')
			->setDefaults($record);
	}

	public function recordFormSucceeded(Form $form, array $data): void
	{
		$id = (int) $this->getParameter('id');
		$this->facade->update($id, $data);
		// ...
	}
}
```

Jednakże, i to powinno być **najważniejsze spostrzeżenie z całego kodu**, musimy upewnić się, kiedy tworzymy formularz, że akcja jest faktycznie `edit`. Ponieważ w przeciwnym razie walidacja w metodzie `actionEdit()` nie miałaby w ogóle miejsca!


Ten sam formularz do dodawania i edycji .[#toc-stejny-formular-pro-pridani-i-editaci]
-------------------------------------------------------------------------------------

A teraz połączymy obu prezenterów w jednego. Moglibyśmy albo rozróżnić, która akcja jest tą w metodzie `createComponentRecordForm()` i odpowiednio skonfigurować formularz, albo zostawić to bezpośrednio w metodach akcji i pozbyć się warunku:


```php
class RecordPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function actionAdd(): void
	{
		$form = $this->getComponent('recordForm');
		$form->onSuccess[] = [$this, 'addingFormSucceeded'];
	}

	public function actionEdit(int $id): void
	{
		$record = $this->facade->get($id);
		if (
			!$record // oveření existence záznamu
			|| !$this->facade->isEditAllowed(/*...*/) // kontrola oprávnění
		) {
			$this->error(); // chyba 404
		}

		$form = $this->getComponent('recordForm');
		$form->setDefaults($record); // nastavení výchozích hodnot
		$form->onSuccess[] = [$this, 'editingFormSucceeded'];
	}

	protected function createComponentRecordForm(): Form
	{
		// ověříme, že akce je 'add' nebo 'edit'
		if (!in_array($this->getAction(), ['add', 'edit'])) {
			$this->error();
		}

		$form = new Form;

		// ... přidáme políčka formuláře ...

		return $form;
	}

	public function addingFormSucceeded(Form $form, array $data): void
	{
		$this->facade->add($data); // přidání záznamu do databáze
		$this->flashMessage('Successfully added');
		$this->redirect('...');
	}

	public function editingFormSucceeded(Form $form, array $data): void
	{
		$id = (int) $this->getParameter('id');
		$this->facade->update($id, $data); // aktualizace záznamu
		$this->flashMessage('Successfully updated');
		$this->redirect('...');
	}
}
```

{{priority: -1}}
{{sitename: Best Practices}}
