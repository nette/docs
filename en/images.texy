Image Functions
***************

.[perex]
The class [api:Nette\Utils\Image] is intended for basic image manipulation. It simplifies the basic operations, like image resizing, sharpening or sending the image to the browser.

Installation:

```shell
composer require nette/utils
```

Basic Usage
===========

If you want to manipulate images (like scaling or sharpening of images) in PHP you must write unreadable and unintelligible code. And it wouldn't be Nette Framework if it didn't come with a better API :-)

We can start with loading of the image from a file:

```php
use Nette\Utils\Image;

$image = Image::fromFile('nette.jpg');
```

or we can create new blank image, with size of 100x200:

```php
$image = Image::fromBlank(100, 200);
```

Optionally we can set the background color (default is black):

```php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
```

And we will write its size:

```php
echo "Image dimensions: {$image->getWidth()} × {$image->getHeight()}";
```




Image Resize
------------

The first two parameters determine width and height, the third option is for flags.

Proportional size change so that it does not exceed 50x30 pixels (either the width will be exactly 50px or the height will be exactly 30px, the second dimension is counted to maintain the aspect ratio):

```php
$image->resize(50, 30);
```

It's possible to set only one dimension and the second one will be calculated:

```php
$image->resize(50, null); // width 50px, height auto

$image->resize(null, 30); // width auto, height 30px
```

Any dimension can be also set in percentage:

```php
$image->resize('75%', 30); // 75% × 30px
```

The behavior of the `resize` function could be modified with following flags:

|---------------------------------------------------------------------------------------
| Flag                   | Description
|---------------------------------------------------------------------------------------
| `Image::FIT` (default) | resulting dimensions will be less or equal as specified
| `Image::FILL`          | fills the target area and possibly extends it in one direction
| `Image::EXACT`         | fills the whole area and cuts what exceeds
| `Image::SHRINK_ONLY`   | just scales down (does not extend a small image)
| `Image::STRETCH`       | does not keep the aspect ratio


Flags come as a third argument of the function:

```php
$image->resize(50, 30, Image::STRETCH);
```

It is possible to combine all flags:

```php
$image->resize(50, 30, Image::SHRINK_ONLY | Image::STRETCH);
```

If we write one or both of the dimensions as a negative number the image will be flipped (horizontally  or vertically):

```php
$flipped = $image->resize(null, '-100%'); // flip vertically

$flipped = $image->resize('-100%', '-100%');  // rotate by 180°

$flipped = $image->resize(-125, 50); // resize & flip horizontally
```


Image Modification
------------------

After reducing the image we can improve it by sharpening:

```php
$image->sharpen();
```

We can also trim the image by the coordinates of a rectangle:

```php
$image->crop($left, $top, $width, $height);
```


The reduced image can be inserted into another one (so-called watermark).

```php
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));
$blank->place($image, 0, 0); // place into a position 0px, 0px

// coordinates can be set also in percentage
$blank->place($image, '80%', '75%', 25); // transparency is 25 %
```


Image Saving
------------

The image could be saved into a file:

```php
$image->save('resampled.jpg');
```

Voluntarily it's possible to set also the quality and format of the image (if the format isn't set it's detected from the file extension):
```php
$image->save('resampled.jpg', 80, Image::JPEG); // JPEG, quality 80%
```

PNG, GIF, JPEG, and WEBP formats are supported.

Alternatively the image could be saved into a variable:

```php
$binary = (string) $image;
```

or you can send it directly to the browser with the setting of the according header `Content-Type`:

```php
// send it like image/jpeg
$image->send();

// send it like image/png
$image->send(Image::PNG);
```

Such API is really a pleasure to use, isn't it?


Overview of Methods
===================

static fromBlank(int $width, int $height, array $color = null): Image .[method]
-------------------------------------------------------------------------------
Creates a new true color image of the given dimensions. The default color is black.

static fromFile(string $file, int &$detectedFormat = null): Image .[method]
---------------------------------------------------------------------------
Reads an image from a file and returns its type in `$detectedFormat`. Supported types are `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` and `Image::BMP`.

static fromString(string $s, int &$detectedFormat = null): Image .[method]
--------------------------------------------------------------------------
Reads an image from a string and returns its type in `$detectedFormat`. Supported types are `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` and `Image::BMP`.

static rgb(int $red, int $green, int $blue, int $transparency = 0): array .[method]
-----------------------------------------------------------------------------------
Creates a color that can be used in other methods, such as `ellipse()`, `fill()`, and so on.

static typeToExtension(int $type): string .[method]{data-version:v3.1.1}
------------------------------------------------------------------------
Returns the file extension for the given `Image::XXX` constant.

static typeToMimeType(int $type): string .[method]{data-version:v3.1.1}
-----------------------------------------------------------------------
Returns the mime type for the given `Image::XXX` constant.

affine(array $affine, array $clip = null): Image .[method]
----------------------------------------------------------
Return an image containing the affine transformed src image, using an optional clipping area. ([more|https://www.php.net/manual/en/function.imageaffine]).

affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Returns the concatenation of two affine transformation matrices, what is useful if multiple transformations should be applied to the same image in one go. ([more|https://www.php.net/manual/en/function.imageaffinematrixconcat])

affineMatrixGet(int $type, mixed $options = null): array .[method]
------------------------------------------------------------------
Returns an affine transformation matrix. ([more|https://www.php.net/manual/en/function.imageaffinematrixget])

alphaBlending(bool $on): void .[method]
---------------------------------------
Allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as `setPixel()` determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images. ([more|https://www.php.net/manual/en/function.imagealphablending])

antialias(bool $on): void .[method]
-----------------------------------
Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.

Using antialiased primitives with transparent background color can end with some unexpected results. The blend method uses the background color as any other colors. The lack of alpha component support does not allow an alpha based antialiasing method. ([more|https://www.php.net/manual/en/function.imageantialias])

arc($x, $y, $w, $h, $start, $end, $color): void .[method]
---------------------------------------------------------
Draws an arc of circle centered at the given coordinates. ([more|https://www.php.net/manual/en/function.imagearc])

char(int $font, $x, $y, string $char, $color): void .[method]
-------------------------------------------------------------
Draws the first character of `$char` in the image with its upper-left at `$x`,`$y` (top left is 0, 0) with the color `$color`. ([more|https://www.php.net/manual/en/function.imagechar])

charUp(int $font, $x, $y, string $char, $color): void .[method]
---------------------------------------------------------------
Draws the character `$char` vertically at the specified coordinate on the given image. ([more|https://www.php.net/manual/en/function.imagecharup])

colorAllocate($red, $green, $blue): int .[method]
-------------------------------------------------
Returns a color identifier representing the color composed of the given RGB components. It must be called to create each color that is to be used in the image. ([more|https://www.php.net/manual/en/function.imagecolorallocate])

colorAllocateAlpha($red, $green, $blue, $alpha): int .[method]
--------------------------------------------------------------
Behaves identically to `colorAllocate()` with the addition of the transparency parameter `$alpha`. ([more|https://www.php.net/manual/en/function.imagecolorallocatealpha])

colorAt($x, $y): int .[method]
------------------------------
Returns the index of the color of the pixel at the specified location in the image. If the image is a truecolor image, this function returns the RGB value of that pixel as integer. Use bitshifting and masking to access the distinct red, green and blue component values: ([more|https://www.php.net/manual/en/function.imagecolorat])

colorClosest($red, $green, $blue): int .[method]
------------------------------------------------
Returns the index of the color in the palette of the image which is "closest" to the specified RGB value. The "distance" between the desired color and each color in the palette is calculated as if the RGB values represented points in three-dimensional space. ([more|https://www.php.net/manual/en/function.imagecolorclosest])

colorClosestAlpha($red, $green, $blue, $alpha): int .[method]
-------------------------------------------------------------
Returns the index of the color in the palette of the image which is "closest" to the specified RGB value and `$alpha` level. ([more|https://www.php.net/manual/en/function.imagecolorclosestalpha])

colorClosestHWB($red, $green, $blue): int .[method]
---------------------------------------------------
Get the index of the color which has the hue, white and blackness nearest the given color. ([more|https://www.php.net/manual/en/function.imagecolorclosesthwb])

colorDeallocate($color): void .[method]
---------------------------------------
De-allocates a color previously allocated with `colorAllocate()` or `colorAllocateAlpha()`. ([more|https://www.php.net/manual/en/function.imagecolordeallocate])

colorExact($red, $green, $blue): int .[method]
----------------------------------------------
Returns the index of the specified color in the palette of the image. ([more|https://www.php.net/manual/en/function.imagecolorexact])

colorExactAlpha($red, $green, $blue, $alpha): int .[method]
-----------------------------------------------------------
Returns the index of the specified color+alpha in the palette of the image. ([more|https://www.php.net/manual/en/function.imagecolorexactalpha])

colorMatch(Image $image2): void .[method]
-----------------------------------------
Makes the colors of the palette version of an image more closely match the true color version. ([more|https://www.php.net/manual/en/function.imagecolormatch])

colorResolve($red, $green, $blue): int .[method]
------------------------------------------------
Returns a color index for a requested color, either the exact color or the closest possible alternative. ([more|https://www.php.net/manual/en/function.imagecolorresolve])

colorResolveAlpha($red, $green, $blue, $alpha): int .[method]
-------------------------------------------------------------
Returns a color index for a requested color, either the exact color or the closest possible alternative. ([more|https://www.php.net/manual/en/function.imagecolorresolvealpha])

colorSet($index, $red, $green, $blue): void .[method]
-----------------------------------------------------
This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill. ([more|https://www.php.net/manual/en/function.imagecolorset])

colorsForIndex($index): array .[method]
---------------------------------------
Gets the color for a specified index. ([more|https://www.php.net/manual/en/function.imagecolorsforindex])

colorsTotal(): int .[method]
----------------------------
Returns the number of colors in an image palette. ([more|https://www.php.net/manual/en/function.imagecolorstotal])

colorTransparent($color = null): int .[method]
----------------------------------------------
Gets or sets the transparent color in the image. ([more|https://www.php.net/manual/en/function.imagecolortransparent])

convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Applies a convolution matrix on the image, using the given coefficient and offset. ([more|https://www.php.net/manual/en/function.imageconvolution])

.[note]
Requires *Bundled GD extension*, so it is not sure it will work everywhere.

copy(Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH): void .[method]
--------------------------------------------------------------------------
Copies a part of `$src` onto image starting at the x/y coordinates `$srcX`, `$srcY` with a width of `$srcW` and a height of `$srcH`. The portion defined will be copied onto the x/y coordinates, `$dstX` and `$dstY`. ([more|https://www.php.net/manual/en/function.imagecopy])

copyMerge(Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $opacity): void .[method]
-----------------------------------------------------------------------------------------
Copies a part of `$src` onto image starting at the x/y coordinates `$srcX`, `$srcY` with a width of `$srcW` and a height of `$srcH`. The portion defined will be copied onto the x/y coordinates, `$dstX` and `$dstY`. ([more|https://www.php.net/manual/en/function.imagecopymerge])

copyMergeGray(Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $opacity): void .[method]
---------------------------------------------------------------------------------------------
Copies a part of `$src` onto image starting at the x/y coordinates `$srcX`, `$srcY` with a width of `$srcW` and a height of `$srcH`. The portion defined will be copied onto the x/y coordinates, `$dstX` and `$dstY`.

This function is identical to `copyMerge()` except that when merging it preserves the hue of the source by converting the destination pixels to gray scale before the copy operation. ([more|https://www.php.net/manual/en/function.imagecopymergegray])

copyResampled(Image $src, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH): void .[method]
-------------------------------------------------------------------------------------------------
Copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.

In other words, `copyResampled()` will take a rectangular area from `$src` of width `$srcW` and height `$srcH` at position (`$srcX`,`$srcY`) and place it in a rectangular area of image of width `$dstW` and height `$dstH` at position (`$dstX`,`$dstY`).

If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image but if the regions overlap the results will be unpredictable. ([more|https://www.php.net/manual/en/function.imagecopyresampled])

copyResized(Image $src, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH): void .[method]
-----------------------------------------------------------------------------------------------
Copies a rectangular portion of one image to another image. In other words, `copyResized()` will take a rectangular area from `$src` of width `$srcW` and height `$srcH` at position (`$srcX`,`$srcY`) and place it in a rectangular area of image of width `$dstW` and height `$dstH` at position (`$dstX`,`$dstY`).

If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image but if the regions overlap the results will be unpredictable. ([more|https://www.php.net/manual/en/function.imagecopyresized])

crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Crops an image to the given rectangular area. Dimensions can be passed as integers in pixels or strings in percent (i.e. `'50%'`).

cropAuto(int $mode = -1, float $threshold = .5, int $color = -1): Image .[method]
---------------------------------------------------------------------------------
Automatically crops an image according to the given `$mode`. ([more|https://www.php.net/manual/en/function.imagecropauto])

ellipse($cx, $cy, $w, $h, $color): void .[method]
-------------------------------------------------
Draws an ellipse centered at the specified coordinates. ([more|https://www.php.net/manual/en/function.imageellipse])

fill($x, $y, $color): void .[method]
------------------------------------
Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given `$color` in the image. ([more|https://www.php.net/manual/en/function.imagefill])

filledArc($cx, $cy, $w, $h, $s, $e, $color, $style): void .[method]
-------------------------------------------------------------------
Draws a partial arc centered at the specified coordinate in the image. ([more|https://www.php.net/manual/en/function.imagefilledarc])

filledEllipse($cx, $cy, $w, $h, $color): void .[method]
-------------------------------------------------------
Draws an ellipse centered at the specified coordinate in the image. ([more|https://www.php.net/manual/en/function.imagefilledellipse])

filledPolygon(array $points, $numPoints, $color): void .[method]
----------------------------------------------------------------
Creates a filled polygon in the $image. ([more|https://www.php.net/manual/en/function.imagefilledpolygon])

filledRectangle($x1, $y1, $x2, $y2, $color): void .[method]
-----------------------------------------------------------
Creates a rectangle filled with `$color` in the image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image. ([more|https://www.php.net/manual/en/function.imagefilledrectangle])

fillToBorder($x, $y, $border, $color): void .[method]
-----------------------------------------------------
Performs a flood fill whose border color is defined by `$border`. The starting point for the fill is `$x`, `$y` (top left is 0, 0) and the region is filled with color `$color`. ([more|https://www.php.net/manual/en/function.imagefilltoborder])

filter($filtertype): void .[method]
-----------------------------------
Applies the given filter `$filtertype` on the image. ([more|https://www.php.net/manual/en/function.imagefilter])

flip(int $mode): void .[method]
-------------------------------
Flips the image using the given `$mode`. ([more|https://www.php.net/manual/en/function.imageflip])

ftText($size, $angle, $x, $y, $col, string $fontFile, string $text, array $extrainfo = null): array .[method]
-------------------------------------------------------------------------------------------------------------
Write text to the image using fonts using FreeType 2. ([more|https://www.php.net/manual/en/function.imagefttext])

gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Applies gamma correction to the image given an input and an output gamma. ([more|https://www.php.net/manual/en/function.imagegammacorrect])

getClip(): array .[method]{data-version:PHP 7.2}
------------------------------------------------
Retrieves the current clipping rectangle, i.e. the area beyond which no pixels will be drawn. ([more|https://www.php.net/manual/en/function.imagegetclip])

getHeight(): int .[method]
--------------------------
Returns the height of the image.

getImageResource(): resource|GdImage .[method]
----------------------------------------------
Returns the original resource.

getWidth(): int .[method]
-------------------------
Returns the width of the image.

interlace($interlace = null): int .[method]
-------------------------------------------
Turns the interlace bit on or off. If the interlace bit is set and the image is used as a JPEG image, the image is created as a progressive JPEG. ([more|https://www.php.net/manual/en/function.imageinterlace])

isTrueColor(): bool .[method]
-----------------------------
Finds whether the image is a truecolor. ([more|https://www.php.net/manual/en/function.imageistruecolor])

layerEffect($effect): void .[method]
------------------------------------
Set the alpha blending flag to use layering effects. ([more|https://www.php.net/manual/en/function.imagelayereffect])

line($x1, $y1, $x2, $y2, $color): void .[method]
------------------------------------------------
Draws a line between the two given points. ([more|https://www.php.net/manual/en/function.imageline])

openPolygon(array $points, int $numPoints, int $color): void .[method]{data-version:PHP 7.2}
--------------------------------------------------------------------------------------------
Draws an open polygon on the image. Contrary to `polygon()`, no line is drawn between the last and the first point. ([more|https://www.php.net/manual/en/function.imageopenpolygon])

paletteCopy(Image $source): void .[method]
------------------------------------------
Copies the palette from the `$source` to the image. ([more|https://www.php.net/manual/en/function.imagepalettecopy])

paletteToTrueColor(): void .[method]
------------------------------------
Converts a palette based image, created by functions like `create()` to a true color image, like `createtruecolor()`. ([more|https://www.php.net/manual/en/function.imagepalettetotruecolor])

place(Image $image, int|string $left = 0, int|string $top = 0, int $opacity = 100): Image .[method]
---------------------------------------------------------------------------------------------------
Copies `$image` to the image at the x/y coordinates `$left` and `$top`. Coordinates can be passed as integers in pixels or strings in percent (i.e. `'50%'`).

polygon(array $points, $numPoints, $color): void .[method]
----------------------------------------------------------
Creates a polygon in the image. ([more|https://www.php.net/manual/en/function.imagepolygon])

psText(string $text, $font, $size, $color, $backgroundColor, $x, $y, $space = null, $tightness = null, float $angle = null, $antialiasSteps = null): array .[method]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Draws a text on an image using PostScript Type1 fonts. ([more|https://www.php.net/manual/en/function.imagepstext])

rectangle($x1, $y1, $x2, $y2, $col): void .[method]
---------------------------------------------------
Creates a rectangle starting at the specified coordinates. ([more|https://www.php.net/manual/en/function.imagerectangle])

resize(int|string $width, int|string $height, int $flags = Image::FIT): Image .[method]
---------------------------------------------------------------------------------------
Scales an image, see [more info|#Image Resize]. Dimensions can be passed as integers in pixels or strings in percent (i.e. `'50%'`).

resolution(int $resX = null, int $resY = null): mixed .[method]{data-version:PHP 7.2}
-------------------------------------------------------------------------------------
Allows to set and get the resolution of an image in DPI (dots per inch). If none of the optional parameters is given, the current resolution is returned as indexed array. If only `$resX` is given, the horizontal and vertical resolution are set to this value. If both optional parameters are given, the horizontal and vertical resolution are set to these values, respectively.

The resolution is only used as meta information when images are read from and written to formats supporting this kind of information (curently PNG and JPEG). It does not affect any drawing operations. The default resolution for new images is 96 DPI. ([more|https://www.php.net/manual/en/function.imageresolution])

rotate(float $angle, $backgroundColor): Image .[method]
-------------------------------------------------------
Rotates the image using the given `$angle` in degrees. The center of rotation is the center of the image, and the rotated image may have different dimensions than the original image. ([more|https://www.php.net/manual/en/function.imagerotate])

.[note]
Requires *Bundled GD extension*, so it is not sure it will work everywhere.

save(string $file, int $quality = null, int $type = null): void .[method]
-------------------------------------------------------------------------
Saves an image to a file.

saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Sets the flag which determines whether to retain full alpha channel information (as opposed to single-color transparency) when saving PNG images.

Alphablending has to be disabled (`alphaBlending(false)`) to retain the alpha-channel in the first place. ([more|https://www.php.net/manual/en/function.imagesavealpha])

scale(int $newWidth, int $newHeight = -1, int $mode = IMG_BILINEAR_FIXED): Image .[method]
------------------------------------------------------------------------------------------
Scales an image using the given interpolation algorithm. ([more|https://www.php.net/manual/en/function.imagescale])

send(int $type = Image::JPEG, int $quality = null): void .[method]
------------------------------------------------------------------
Outputs an image to the browser.

setBrush(Image $brush): void .[method]
--------------------------------------
Sets the brush image to be used by all line drawing functions (such as `line()` and `polygon()`) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED. ([more|https://www.php.net/manual/en/function.imagesetbrush])

setClip(int $x1, int $y1, int $x2, int $y2): void .[method]{data-version:PHP 7.2}
---------------------------------------------------------------------------------
Sets the current clipping rectangle, i.e. the area beyond which no pixels will be drawn. ([more|https://www.php.net/manual/en/function.imagesetclip])

setInterpolation(int $method = IMG_BILINEAR_FIXED): void .[method]
------------------------------------------------------------------
Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the `rotate()` function. ([more|https://www.php.net/manual/en/function.imagesetinterpolation])

setPixel($x, $y, $color): void .[method]
----------------------------------------
Draws a pixel at the specified coordinate. ([more|https://www.php.net/manual/en/function.imagesetpixel])

setStyle(array $style): void .[method]
--------------------------------------
Sets the style to be used by all line drawing functions (such as `line()` and `polygon()`) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED. ([more|https://www.php.net/manual/en/function.imagesetstyle])

setThickness($thickness): void .[method]
----------------------------------------
Sets the thickness of the lines drawn when drawing rectangles, polygons, arcs etc. to `$thickness` pixels. ([more|https://www.php.net/manual/en/function.imagesetthickness])

setTile(Image $tile): void .[method]
------------------------------------
Sets the tile image to be used by all region filling functions (such as `fill()` and `filledPolygon()`) when filling with the special color IMG_COLOR_TILED.

A tile is an image used to fill an area with a repeated pattern. Any GD image can be used as a tile, and by setting the transparent color index of the tile image with `colorTransparent()`, a tile allows certain parts of the underlying area to shine through can be created. ([more|https://www.php.net/manual/en/function.imagesettile])

sharpen(): Image .[method]
--------------------------
Sharpens image a little bit.

.[note]
Requires *Bundled GD extension*, so it is not sure it will work everywhere.

string($font, $x, $y, string $str, $col): void .[method]
--------------------------------------------------------
Draws a string at the given coordinates. ([more|https://www.php.net/manual/en/function.imagestring])

stringUp($font, $x, $y, string $s, $col): void .[method]
--------------------------------------------------------
Draws a string vertically at the given coordinates. ([more|https://www.php.net/manual/en/function.imagestringup])

toString(int $type = Image::JPEG, int $quality = null): string .[method]
------------------------------------------------------------------------
Outputs an image to string.

trueColorToPalette(bool $dither, $ncolors): void .[method]
----------------------------------------------------------
Converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality. ([more|https://www.php.net/manual/en/function.imagetruecolortopalette])

ttfText($size, $angle, $x, $y, $color, string $fontfile, string $text): array .[method]
---------------------------------------------------------------------------------------
Writes the given text into the image using TrueType fonts. ([more|https://www.php.net/manual/en/function.imagettftext])


{{composer: nette/utils}}
