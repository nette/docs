PHP Reflection
**************

.[perex]
[api:Nette\Utils\Reflection] is a static class with useful functions for PHP reflection. Its purpose is to fix flaws in native classes and to unify behavior across different versions of PHP.

Installation:

```shell
composer require nette/utils
```

All examples assume the following class alias is defined:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Finds out if reflection has access to PHPdoc comments. Comments may not be available due to the opcode cache, see for example the directive [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Expands the `$name` of the class to full name in the context of the `$context`, ie in the context of its namespace and defined aliases. Thus, it returns how the PHP parser would understand `$name` if it were written in the body of the `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Returns a reflection of a method that contains a declaration of `$method`. Usually, each method is its own declaration, but the body of the method can also be in the trait and under a different name.

Because PHP does not provide enough information to determine the actual declaration, Nette uses its own heuristics, which **should be** reliable.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getParameterDefaultValue(ReflectionParameter $param) .[method]
--------------------------------------------------------------

Returns the default value of `$param` in a function or method. If it is a constant, it returns its value. If the parameter does not have a default value or the constant cannot be resolved, it throws `ReflectionException`.

```php
class DemoClass
{
	function foo($param = PDO::FETCH_BOTH)
	{
	}
}

$method = new ReflectionMethod('DemoClass::foo');
Reflection::getParameterDefaultValue($method->getParameters()[0]);
```


getParameterType(ReflectionParameter $param): ?string .[method]
---------------------------------------------------------------

Returns the type of the function or method `$param` parameter and resolves `self` and `parent` to the actual class name. If the parameter has no type, it returns `null`, if it has a union or intersection type it throws `Nette\InvalidStateException`.

```php
class DemoClass
{
	function foo(self $param)
	{
	}
}

$method = new ReflectionMethod('DemoClass::foo');
Reflection::getReturnType($method->getParameters()[0]); // 'DemoClass'
```

This method was created when PHP did not have union and intersection types. It is replaced by the method [Nette\Utils\Type::fromReflection()|type#fromReflection].


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Returns a reflection of a class or trait that contains a declaration of property `$prop`. Property can also be declared in the trait.

Because PHP does not provide enough information to determine the actual declaration, Nette uses its own heuristics, which **are not** reliable.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


getPropertyType(ReflectionProperty $prop): ?string .[method]
------------------------------------------------------------

Returns the type of property `$prop` and resolves `self` and `parent` to the actual class name. If property has no type, it returns `null`, if it has a union or intersection type it throws `Nette\InvalidStateException`.

```php
class DemoClass
{
	public self $foo;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getReturnType($prop); // 'DemoClass'
```

This method was created when PHP did not have union and intersection types. It is replaced by the method [Nette\Utils\Type::fromReflection()|type#fromReflection].


getReturnType(ReflectionFunctionAbstract $func): ?string .[method]
------------------------------------------------------------------

Returns the return type of the function or method `$func` and resolves `self`, `static` and `parent` to the actual class name. If the function does not have a return type, it returns `null`, if it has a union or intersection type it throws `Nette\InvalidStateException`.


```php
class DemoClass
{
	function foo(): self
	{
	}
}

$method = new ReflectionMethod('DemoClass::foo');
Reflection::getReturnType($method); // 'DemoClass'
```

This method was created when PHP did not have union and intersection types. It is replaced by the method [Nette\Utils\Type::fromReflection()|type#fromReflection].


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Determines if `$type` is PHP built-in type. Otherwise, it is the class name.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```


toString($reflection): string .[method]
---------------------------------------

Converts a reflection to a human readable string.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func' ('func()' since v3.2.0)

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo' ('DemoClass::foo()' since v3.2.0)

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
