配列の操作
*****

.[perex]
このページは、配列に関連するクラス [Nette\Utils\Arrays|#Arrays]、[#ArrayHash]、[#ArrayList] に焦点を当てています。


インストール：

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] は、配列を操作するための便利な関数を含む静的クラスです。イテレータに対するその類似物は [Nette\Utils\Iterables|iterables] です。

以下の例では、エイリアスが作成されていることを前提としています：

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

関数は、指定されたパス `$path` に従って配列 `$array` を連想配列またはオブジェクトに柔軟に変換します。パスは文字列または配列にすることができます。入力配列のキー名と '[]', '->', '=', '|' のような演算子で構成されます。パスが無効な場合、`Nette\InvalidArgumentException` をスローします。

```php
// 単純なキーによる連想配列への変換
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// = 演算子を使用した、あるキーから別のキーへの値の割り当て
$result = Arrays::associate($arr, 'name=age'); // または ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// -> 演算子を使用したオブジェクトの作成
$result = Arrays::associate($arr, '->name'); // または ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// | 演算子を使用したキーの組み合わせ
$result = Arrays::associate($arr, 'name|age'); // または ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// [] を使用した配列への追加
$result = Arrays::associate($arr, 'name[]'); // または ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

配列に値が存在するかどうかをテストします。厳密な比較 (`===`) を使用します。

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

配列内のすべての要素が、シグネチャ `function ($value, $key, array $array): bool` を持つ `$predicate` に実装されたテストに合格するかどうかをテストします。

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

[#some()] を参照。


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

指定された述語に一致するすべてのキーと値のペアを含む新しい配列を返します。コールバックはシグネチャ `function ($value, int|string $key, array $array): bool` を持ちます。

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

最初の項目（指定されている場合、述語に一致するもの）を返します。そのような項目が存在しない場合、`$else` の呼び出し結果または null を返します。
パラメータ `$predicate` はシグネチャ `function ($value, int|string $key, array $array): bool` を持ちます。

`reset()` とは異なり、内部ポインタを変更しません。パラメータ `$predicate` と `$else` はバージョン4.0.4から存在します。

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

[#last()] を参照。


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

最初の項目（指定されている場合、述語に一致するもの）のキー、またはそのような項目が存在しない場合は null を返します。述語 `$predicate` はシグネチャ `function ($value, int|string $key, array $array): bool` を持ちます。

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

[#lastKey()] を参照。


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

多次元配列をフラットな配列に統合します。

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

要素 `$array[$key]` を返します。存在しない場合、例外 `Nette\InvalidArgumentException` をスローするか、3番目のパラメータ `$default` が指定されている場合はそれを返します。

```php
// $array['foo'] が存在しない場合、例外をスローします
$value = Arrays::get($array, 'foo');

// $array['foo'] が存在しない場合、'bar' を返します
$value = Arrays::get($array, 'foo', 'bar');
```

キー `$key` は配列にすることもできます。

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// 'red' を返します
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

指定された配列要素への参照を取得します。要素が存在しない場合、null値で作成されます。

```php
$valueRef = & Arrays::getRef($array, 'foo');
// $array['foo'] への参照を返します
```

[get() |#get()] 関数と同様に、多次元配列を扱うことができます。

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// $array['color']['favorite'] への参照を返します
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

その値が正規表現 `$pattern` に一致する配列の要素のみを返します。`$invert` が `true` の場合、逆に一致しない要素を返します。式のコンパイルまたは処理中のエラーは、例外 `Nette\RegexpException` をスローします。

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// 数字のみで構成される配列要素のみを返します
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

配列 `$inserted` の内容を、キー `$key` を持つ要素の直後に配列 `$array` に挿入します。`$key` が `null` の場合（または配列内にない場合）、末尾に挿入されます。

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

配列 `$inserted` の内容を、キー `$key` を持つ要素の前に配列 `$array` に挿入します。`$key` が `null` の場合（または配列内にない場合）、先頭に挿入されます。

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

すべてのコールバックを呼び出し、結果の配列を返します。

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

配列内の各オブジェクトに対してメソッドを呼び出し、結果の配列を返します。

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

配列がゼロから始まる昇順の数値キーに従ってインデックス付けされているかどうか（別名 list）を検証します。

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

最後の項目（指定されている場合、述語に一致するもの）を返します。そのような項目が存在しない場合、`$else` の呼び出し結果または null を返します。
パラメータ `$predicate` はシグネチャ `function ($value, int|string $key, array $array): bool` を持ちます。

`end()` とは異なり、内部ポインタを変更しません。パラメータ `$predicate` と `$else` はバージョン4.0.4から存在します。

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

[#first()] を参照。


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

最後の項目（指定されている場合、述語に一致するもの）のキー、またはそのような項目が存在しない場合は null を返します。述語 `$predicate` はシグネチャ `function ($value, int|string $key, array $array): bool` を持ちます。

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

[#firstKey()] を参照。


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

配列内のすべての要素に対して `$transformer` を呼び出し、返された値の配列を返します。コールバックはシグネチャ `function ($value, $key, array $array): bool` を持ちます。

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

元の配列の値とキーを変換して新しい配列を作成します。関数 `$transformer` はシグネチャ `function ($value, $key, array $array): ?array{$newKey, $newValue}` を持ちます。`$transformer` が `null` を返した場合、要素はスキップされます。保持された要素については、返された配列の最初の要素が新しいキーとして使用され、2番目の要素が新しい値として使用されます。

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

このメソッドは、配列の構造（キーと値を同時に）を変更する必要がある場合や、変換中に要素をフィルタリングする必要がある場合（不要な要素に対してnullを返すことで）に役立ちます。


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

2つの配列を再帰的にマージします。例えば、ツリー構造のマージに適しています。マージ時には、配列に適用される `+` 演算子のように同じルールに従います。つまり、最初の配列に2番目の配列のキー/値ペアを追加し、キーが衝突した場合は、最初の配列の値を保持します。

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

2番目の配列の値は常に最初の配列の末尾に追加されます。2番目の配列から値 `10` が消えることは、少し混乱を招くかもしれません。認識する必要があります。この値と、最初の配列の値 `5` は、同じ数値キー `0` が割り当てられています。そのため、結果の配列には最初の配列の要素のみが含まれます。


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

配列を連想配列に正規化します。数値キーはその値で置き換えられ、新しい値は `$filling` になります。

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

配列から要素の値を返して削除します。存在しない場合は例外をスローするか、`$default` が指定されている場合はその値を返します。

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// Nette\InvalidArgumentException をスローします
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

配列内のキーの名前を変更します。キーが配列内で見つかった場合に `true` を返します。

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

配列内の指定されたキーの位置を返します。位置は0から番号付けされます。キーが見つからない場合、関数は `null` を返します。

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // 0 を返します
$position = Arrays::getKeyOffset($array, 'second'); // 1 を返します
$position = Arrays::getKeyOffset($array, 'not-exists'); // null を返します
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

配列内の少なくとも1つの要素が、シグネチャ `function ($value, $key, array $array): bool` を持つ `$predicate` に実装されたテストに合格するかどうかをテストします。

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

[#every()] を参照。


toKey(mixed $key): string|int .[method]
---------------------------------------

値を配列キー（整数または文字列のいずれか）に変換します。

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

配列 `$array` の要素をオブジェクト `$object` にコピーし、その後、それを返します。

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // $obj->foo = 1; $obj->bar = 2; を設定します
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

配列内の各項目を文字列にキャストし、接頭辞 `$prefix` と接尾辞 `$suffix` で囲みます。

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

オブジェクト [api:Nette\Utils\ArrayHash] はジェネリッククラス stdClass の子孫であり、それを配列のように扱う能力（つまり、例えば角括弧を通してメンバーにアクセスする）で拡張します：

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // 同時にオブジェクト記法も機能します
$hash->foo; // 123
```

`count($hash)` 関数を使用して要素の数を取得できます。

オブジェクトに対して、配列の場合と同様に、参照を使用しても反復処理が可能です：

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

既存の配列を `from()` メソッドを使用して `ArrayHash` に変換できます：

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

変換は再帰的です：

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // ArrayHashオブジェクト
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

これは2番目のパラメータで防ぐことができます：

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // 配列
```

配列への逆変換：

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] は線形配列を表し、インデックスは0から始まる昇順の整数のみです。

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

既存の配列を `from()` メソッドを使用して `ArrayList` に変換できます：

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

`count($list)` 関数を使用して要素の数を取得できます。

オブジェクトに対して、配列の場合と同様に、参照を使用しても反復処理が可能です：

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

許可された値以外のキーへのアクセスは、例外 `Nette\OutOfRangeException` をスローします：

```php
echo $list[-1]; // Nette\OutOfRangeException をスローします
unset($list[30]); // Nette\OutOfRangeException をスローします
```

キーの削除は要素の再番号付けを引き起こします：

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

新しい要素を `prepend()` メソッドを使用して先頭に追加できます：

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
