Ce este Injecția de dependență?
*******************************

.[perex]
Acest capitol vă prezintă practicile de programare de bază pe care ar trebui să le urmați atunci când scrieți orice aplicație. Acestea sunt elementele de bază necesare pentru a scrie un cod curat, ușor de înțeles și de întreținut.

Dacă învățați și respectați aceste reguli, Nette vă va fi alături la fiecare pas. Se va ocupa de sarcinile de rutină în locul dumneavoastră și vă va face să vă simțiți cât mai confortabil posibil, astfel încât să vă puteți concentra pe logica propriu-zisă.

Principiile pe care le vom arăta aici sunt destul de simple. Nu aveți de ce să vă faceți griji.


Vă amintiți primul program? .[#toc-remember-your-first-program]
---------------------------------------------------------------

Nu avem nicio idee în ce limbaj l-ați scris, dar dacă era PHP, probabil că ar fi arătat cam așa:

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // amprente 24
```

Câteva linii de cod banale, dar atât de multe concepte cheie ascunse în ele. Că există variabile. Că codul este împărțit în unități mai mici, care sunt funcții, de exemplu. Că le trecem argumente de intrare și că ele returnează rezultate. Tot ceea ce lipsește sunt condițiile și buclele.

Faptul că trecem date de intrare unei funcții și că aceasta returnează un rezultat este un concept perfect de înțeles, care este folosit și în alte domenii, cum ar fi matematica.

O funcție are o semnătură, care constă din numele său, o listă de parametri și tipurile acestora și, în final, tipul valorii de retur. În calitate de utilizatori, suntem interesați de semnătură; de obicei, nu trebuie să știm nimic despre implementarea internă.

Acum imaginați-vă că semnătura unei funcții arată astfel:

```php
function addition(float $x): float
```

O adunare cu un singur parametru? Asta e ciudat... Ce zici de asta?

```php
function addition(): float
```

E foarte ciudat, nu-i așa? Cum credeți că este folosită această funcție?

```php
echo addition(); // ce imprimă?
```

Privind un astfel de cod, suntem confuzi. Nu doar un începător nu l-ar înțelege, ci chiar și un programator experimentat nu ar înțelege un astfel de cod.

Vă întrebați cum ar arăta de fapt o astfel de funcție în interior? De unde ar lua sumatorii? Probabil că le-ar obține *într-un fel* de una singură, astfel:

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Se pare că există legături ascunse cu alte funcții (sau metode statice) în corpul funcției, iar pentru a afla de unde provin de fapt adunările, trebuie să săpăm mai departe.


Nu pe aici! .[#toc-not-this-way]
--------------------------------

Designul care tocmai ne-a fost prezentat este esența multor caracteristici negative:

- semnătura funcției pretindea că nu are nevoie de adaosuri, ceea ce ne-a derutat.
- nu avem nicio idee despre cum să facem funcția să calculeze cu alte două numere
- a trebuit să ne uităm în cod pentru a vedea unde ia adunările
- am descoperit legături ascunse
- pentru a înțelege pe deplin, trebuie să explorăm și aceste legături

Și chiar este treaba funcției de adunare să procure intrări? Bineînțeles că nu este.  Responsabilitatea sa este doar de a adăuga.


Nu dorim să întâlnim un astfel de cod și cu siguranță nu dorim să-l scriem. Remediul este simplu: reveniți la elementele de bază și folosiți doar parametri:


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Regula nr. 1: Lăsați să vi se transmită .[#toc-rule-1-let-it-be-passed-to-you]
------------------------------------------------------------------------------

Cea mai importantă regulă este: **toate datele de care au nevoie funcțiile sau clasele trebuie să le fie transmise**.

În loc să inventați mecanisme ascunse pentru a le ajuta să ajungă singure la ele, pur și simplu treceți parametrii. Veți economisi timpul necesar pentru a inventa modalități ascunse, care cu siguranță nu vă vor îmbunătăți codul.

Dacă respectați această regulă întotdeauna și peste tot, sunteți pe drumul către un cod fără legături ascunse. Spre un cod care să fie ușor de înțeles nu doar pentru autor, ci și pentru oricine îl citește ulterior. Unde totul este de înțeles din semnăturile funcțiilor și claselor și nu este nevoie să căutați secrete ascunse în implementare.

Această tehnică se numește în mod specializat **injecție de dependență**. Iar datele se numesc **dependențe.** Dar este o simplă trecere de parametri, nimic mai mult.

.[note]
Vă rugăm să nu confundați injecția de dependență, care este un model de proiectare, cu "containerul de injecție de dependență", care este un instrument, ceva complet diferit. Vom discuta despre containere mai târziu.


De la funcții la clase .[#toc-from-functions-to-classes]
--------------------------------------------------------

Și cum se leagă clasele de acest lucru? O clasă este o entitate mai complexă decât o simplă funcție, dar regula nr. 1 se aplică și aici. Există doar [mai multe moduri de a transmite argumente |passing-dependencies]. De exemplu, destul de asemănător cu cazul unei funcții:

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

Sau prin utilizarea altor metode, sau direct prin constructor:

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Ambele exemple sunt în deplină conformitate cu injecția de dependență.


Exemple din viața reală .[#toc-real-life-examples]
--------------------------------------------------

În lumea reală, nu veți scrie clase pentru adunarea numerelor. Să trecem la exemple din lumea reală.

Să avem o clasă `Article` care să reprezinte un articol de blog:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// salvați articolul în baza de date
	}
}
```

iar utilizarea va fi următoarea:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Metoda `save()` salvează articolul într-un tabel din baza de date. Implementarea acesteia folosind [Nette Database |database:] ar fi floare la ureche, dacă nu ar exista o singură problemă: de unde ar trebui ca `Article` să obțină conexiunea la baza de date, adică obiectul de clasă `Nette\Database\Connection`?

Se pare că avem o mulțime de opțiuni. Poate să o ia de undeva dintr-o variabilă statică. Sau să o moștenească de la o clasă care va furniza conexiunea la baza de date. Sau să profite de un [singleton |global-state#Singleton]. Sau de așa-numitele fațade care sunt folosite în Laravel:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Minunat, am rezolvat problema.

Sau am făcut-o?

Să ne amintim [regula nr. 1: Lăsați să vi se transmită |#rule #1: Let It Be Passed to You]: toate dependențele de care clasa are nevoie trebuie să îi fie transmise. Pentru că, dacă nu o facem și încălcăm regula, am pornit pe calea unui cod murdar, plin de legături ascunse, incomprehensibil, iar rezultatul va fi o aplicație care va fi o pacoste de întreținut și dezvoltat.

Utilizatorul clasei `Article` nu are nicio idee despre locul în care metoda `save()` stochează articolul. Într-un tabel din baza de date? În care, în cea de producție sau în cea de dezvoltare? Și cum poate fi schimbat acest lucru?

Utilizatorul trebuie să se uite la modul în care este implementată metoda `save()` pentru a găsi utilizarea metodei `DB::insert()`. Astfel, el trebuie să caute mai departe pentru a afla cum această metodă procură o conexiune la baza de date. Iar legăturile ascunse pot forma un lanț destul de lung.

Legăturile ascunse, fațadele Laravel sau variabilele statice nu sunt niciodată prezente în codul curat și bine conceput. În codul curat și bine conceput, argumentele sunt transmise:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Chiar mai practic, așa cum vom vedea în continuare, este să se folosească un constructor:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

.[note]
Dacă sunteți un programator experimentat, probabil că vă gândiți că `Article` nu ar trebui să aibă o metodă `save()`, ci ar trebui să fie o componentă de date pură, iar de stocare ar trebui să se ocupe un depozit separat. Acest lucru are sens. Dar acest lucru ne-ar duce mult dincolo de subiect, care este injecția de dependență, și încercarea de a da exemple simple.

Dacă aveți de gând să scrieți o clasă care are nevoie de o bază de date pentru a funcționa, de exemplu, nu vă gândiți de unde să o obțineți, ci să vă fie transmisă. Poate ca un parametru al unui constructor sau al unei alte metode. Declarați dependențele. Expuneți-le în API-ul clasei dumneavoastră. Veți obține un cod ușor de înțeles și previzibil.

Ce ziceți de această clasă care înregistrează mesaje de eroare:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Ce părere aveți, am respectat [regula #1: Lăsați să vi se transmită |#rule #1: Let It Be Passed to You]?

Nu am respectat-o.

Informația cheie, directorul fișierului de jurnal, este *obținută* de clasă din constantă.

A se vedea exemplul de utilizare:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Fără a cunoaște implementarea, puteți răspunde la întrebarea unde sunt scrise mesajele? V-aș sugera că existența constantei LOG_DIR este necesară pentru ca aceasta să funcționeze? Și ați putea să creați o a doua instanță care să scrie într-o altă locație? Cu siguranță că nu.

Haideți să reparăm clasa:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Clasa este acum mult mai clară, mai ușor de configurat și, prin urmare, mai utilă.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Dar nu-mi pasă! .[#toc-but-i-don-t-care]
----------------------------------------

*"Când creez un obiect articol și apelez la save(), nu vreau să am de-a face cu baza de date, vreau doar să fie salvat în baza de date pe care am stabilit-o în configurație. "*

*"Atunci când folosesc Logger, vreau doar ca mesajul să fie scris și nu vreau să mă ocup de locul în care se scrie. Să fie folosite setările globale. "*

Acestea sunt comentarii corecte.

Ca exemplu, să luăm o clasă care trimite buletine de știri și să înregistrăm cum a decurs acest lucru:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Versiunea îmbunătățită `Logger`, care nu mai utilizează constanta `LOG_DIR`, necesită o cale de acces la fișier în constructor. Cum se poate rezolva acest lucru? Clasei `NewsletterDistributor` nu-i pasă unde sunt scrise mesajele, ci vrea doar să le scrie.

Soluția este din nou [regula nr. 1: Lăsați să vi se transmită |#rule #1: Let It Be Passed to You]: treceți-i toate datele de care clasa are nevoie.

Deci, transmitem calea către jurnal constructorului, pe care o folosim apoi pentru a crea obiectul `Logger`?

```php
class NewsletterDistributor
{
	public function __construct(
		private string $file, // ⛔ NU ÎN ACEST FEL!
	) {
	}

	public function distribute(): void
	{
		$logger = new Logger($this->file);
```

Nu este așa! Pentru că calea **nu** aparține datelor de care are nevoie clasa `NewsletterDistributor`; aceasta are nevoie de `Logger`. Clasa are nevoie de loggerul însuși. Și asta este ceea ce vom transmite mai departe:

```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger, // ✅
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Acum este clar din semnăturile clasei `NewsletterDistributor` că înregistrarea face parte din funcționalitatea sa. Iar sarcina de a înlocui loggerul cu un altul, poate în scopuri de testare, este destul de banală.
În plus, dacă se modifică constructorul clasei `Logger`, acest lucru nu va avea niciun efect asupra clasei noastre.


Regula nr. 2: Luați ceea ce vă aparține .[#toc-rule-2-take-what-is-yours]
-------------------------------------------------------------------------

Nu vă lăsați păcăliți și nu lăsați să vă fie trecuți parametrii dependențelor dumneavoastră. Transmiteți dependențele direct.

Astfel, codul care utilizează alte obiecte va fi complet independent de modificările aduse constructorilor acestora. API-ul său va fi mai adevărat. Și, cel mai important, va fi trivial să schimbați acele dependențe cu altele.


Un nou membru al familiei .[#toc-a-new-member-of-the-family]
------------------------------------------------------------

Echipa de dezvoltare a decis să creeze un al doilea logger care să scrie în baza de date. Așa că am creat o clasă `DatabaseLogger`. Deci avem două clase, `Logger` și `DatabaseLogger`, una scrie într-un fișier, cealaltă scrie într-o bază de date ... nu credeți că este ceva ciudat în legătură cu acest nume?
Nu ar fi mai bine să redenumim `Logger` în `FileLogger`? Sigur că da.

Dar haideți să o facem inteligent. Vom crea o interfață sub numele original:

```php
interface Logger
{
	function log(string $message): void;
}
```

...pe care o vor implementa ambii jurnaliști:

```php
class FileLogger implements Logger
// ...

class DatabaseLogger implements Logger
// ...
```

Și în acest fel, nu va trebui să se schimbe nimic în restul codului în care este utilizat loggerul. De exemplu, constructorul clasei `NewsletterDistributor` se va mulțumi în continuare să solicite `Logger` ca parametru. Și va depinde de noi ce instanță îi vom transmite.

**Acesta este motivul pentru care nu dăm niciodată numelor de interfețe sufixul `Interface` sau prefixul `I`. ** Altfel, ar fi imposibil să dezvoltăm cod atât de frumos.


Houston, avem o problemă .[#toc-houston-we-have-a-problem]
----------------------------------------------------------

În timp ce în întreaga aplicație ne putem mulțumi cu o singură instanță a unui logger, fie că este vorba de un fișier sau de o bază de date, și pur și simplu îl putem trece oriunde se înregistrează ceva, este cu totul altceva în cazul clasei `Article`. De fapt, creăm instanțe ale acesteia în funcție de necesități, eventual de mai multe ori. Cum să tratăm legătura cu baza de date în constructorul său?

Ca exemplu, putem folosi un controler care ar trebui să salveze un articol în baza de date după trimiterea unui formular:

```php
class EditController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

O posibilă soluție este oferită direct: să avem obiectul bazei de date transmis de constructor la `EditController` și să folosim `$article = new Article($this->db)`.

La fel ca în cazul precedent cu `Logger` și calea de acces la fișier, aceasta nu este abordarea corectă. Baza de date nu este o dependență a `EditController`, ci a `Article`. Astfel, trecerea bazei de date contravine [regulii nr. 2: ia ceea ce este al tău |#rule #2: take what is yours]. Atunci când constructorul clasei `Article` este modificat (se adaugă un nou parametru), va trebui modificat și codul din toate locurile în care sunt create instanțe. Ufff.

Houston, ce sugerezi?


Regula nr. 3: Lăsați fabrica să se ocupe de asta .[#toc-rule-3-let-the-factory-handle-it]
-----------------------------------------------------------------------------------------

Prin eliminarea legăturilor ascunse și prin transmiterea tuturor dependențelor ca argumente, obținem clase mai configurabile și mai flexibile. Și astfel avem nevoie de altceva pentru a crea și configura aceste clase mai flexibile. Îl vom numi "fabrici".

Regula de bază este: dacă o clasă are dependențe, lăsați crearea instanțelor acestora în seama fabricii.

Fabricile sunt un înlocuitor mai inteligent pentru operatorul `new` în lumea injecției de dependență.

.[note]
Vă rugăm să nu faceți confuzie cu modelul de proiectare *factory method*, care descrie un mod specific de utilizare a fabricilor și nu are legătură cu acest subiect.


Fabrica .[#toc-factory]
-----------------------

O fabrică este o metodă sau o clasă care produce și configurează obiecte. Clasa de producție `Article` se numește `ArticleFactory` și ar putea arăta în felul următor:

```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Utilizarea sa în controler ar fi următoarea:

```php
class EditController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// permiteți fabricii să creeze un obiect
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

În acest moment, atunci când se schimbă semnătura constructorului clasei `Article`, singura parte a codului care trebuie să răspundă este fabrica `ArticleFactory`. Orice alt cod care lucrează cu obiectele `Article`, cum ar fi `EditController`, nu va fi afectat.

Poate că acum vă bateți în frunte întrebându-vă dacă ne-am ajutat cumva. Cantitatea de cod a crescut și totul începe să pară suspect de complicat.

Nu vă faceți griji, vom ajunge în curând la containerul Nette DI. Iar acesta are o serie de ași în mânecă care vor face extrem de simplă construirea de aplicații folosind injecția de dependență. De exemplu, în loc de clasa `ArticleFactory`, va fi suficient să [scrieți o interfață simplă |factory]:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Dar ne devansăm, stați puțin :-)


Rezumat .[#toc-summary]
-----------------------

La începutul acestui capitol, am promis să vă arătăm o modalitate de a proiecta cod curat. Doar dați clasele

- [dependențele de care au nevoie |#Rule #1: Let It Be Passed to You]
- [și nu cele de care nu au nevoie în mod direct |#Rule #2: Take What Is Yours]
- [și că obiectele cu dependențe sunt cel mai bine realizate în fabrici |#Rule #3: Let the Factory Handle it]

Poate că nu pare așa la prima vedere, dar aceste trei reguli au implicații profunde. Ele conduc la o viziune radical diferită asupra proiectării codului. Merită? Programatorii care au renunțat la vechile obiceiuri și au început să folosească în mod consecvent injecția de dependență consideră că acesta este un moment crucial în viața lor profesională. A deschis o lume de aplicații clare și durabile.

Dar ce se întâmplă dacă codul nu folosește în mod consecvent injecția de dependență? Ce se întâmplă dacă este construit pe metode statice sau singletoni? Aduce probleme? [Da, și este foarte semnificativ |global-state].
