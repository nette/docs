Slovarček pojmov
****************


AJAX
----
Asinhroni JavaScript in XML - tehnologija izmenjave informacij med odjemalcem in strežnikom preko protokola HTTP brez potrebe po ponovnem nalaganju celotne strani ob vsaki zahtevi. Čeprav bi se lahko iz imena zdelo, da pošilja podatke le v formatu XML, se običajno uporablja tudi format [#JSON].


Akcija presenterja
------------------
Logični del presenterja, ki izvaja eno akcijo. Na primer prikaže stran izdelka, odjavi uporabnika ipd. En presenter lahko ima več akcij.


BOM
---
Tzv. *oznaka vrstnega reda bajtov* je poseben prvi znak v datoteki, ki se uporablja kot indikator vrstnega reda bajtov v kodiranju. Nekateri urejevalniki ga vstavljajo v datoteke. Je praktično neviden, vendar povzroča težave s pošiljanjem izpisa in glav iz PHP. Za množično odstranjevanje lahko uporabite [Code Checker|code-checker:].


Controller
----------
Krmilnik, ki obdeluje zahteve uporabnika in na njihovi podlagi nato kliče ustrezno aplikacijsko logiko (tj. [#model]) in nato zahteva od [#view] izrisovanje podatkov. Ustreznik krmilnikov v Nette Frameworku so [presenterji|#presenter].


Cross-Site Scripting (XSS)
--------------------------
Cross-Site Scripting je metoda kršitve spletnih strani z zlorabo neobdelanih izpisov. Napadalec nato lahko v stran podtakne svojo lastno kodo in s tem lahko stran spremeni ali celo pridobi občutljive podatke o obiskovalcih. Proti XSS se je mogoče braniti le z dosledno in pravilno obdelavo vseh nizov.

Nette Framework prinaša revolucionarno tehnologijo [Kontekstno občutljivo ubežanje znakov |latte:safety-first#Kontextově sensitivní escapování], ki vas za vedno odpravi tveganja Cross-Site Scriptinga. Vse izpise namreč obdeluje samodejno in tako se ne more zgoditi, da bi koder na kaj pozabil.


Cross-Site Request Forgery (CSRF)
---------------------------------
Napad Cross-Site Request Forgery temelji na tem, da napadalec zvabi žrtev na stran, ki neopazno v brskalniku žrtve izvede zahtevo na strežnik, na katerem je žrtev prijavljena, in strežnik domneva, da je zahtevo izvedla žrtev po svoji volji. In tako pod identiteto žrtve izvede določeno dejanje, ne da bi ta vedela o tem. Lahko gre za spremembo ali brisanje podatkov, pošiljanje sporočila itd.

Nette Framework **samodejno ščiti obrazce in signale v presenterjih** pred to vrsto napada. In to s tem, da preprečuje njihovo pošiljanje ali klicanje iz druge domene.


Dependency Injection
--------------------
Dependency Injection (DI) je načrtovalski vzorec, ki pravi, kako ločiti ustvarjanje objektov od njihovih odvisnosti. Torej da razred ni odgovoren za ustvarjanje ali inicializacijo svojih odvisnosti, ampak so mu namesto tega te odvisnosti zagotovljene s strani zunanje kode (to je lahko tudi [DI vsebnik|#Dependency Injection kontejner]). Prednost temelji na tem, da omogoča večjo fleksibilnost kode, boljšo razumljivost in lažje testiranje aplikacije, ker so odvisnosti lahko nadomestljive in izolirane od drugih delov kode. Več v poglavju [Kaj je Dependency Injection? |dependency-injection:introduction]


Dependency Injection vsebnik
----------------------------
Dependency Injection vsebnik (tudi DI vsebnik ali IoC vsebnik) je orodje, ki skrbi za ustvarjanje in upravljanje odvisnosti v aplikaciji (ali [storitev|#služba]). Vsebnik ima večinoma konfiguracijo, ki definira, kateri razredi so odvisni od drugih razredov, katere konkretne implementacije odvisnosti se naj uporabijo in kako se naj te odvisnosti ustvarjajo. Nato vsebnik ustvari te objekte in jih zagotovi razredom, ki jih potrebujejo. Več v poglavju [Kaj je DI vsebnik? |dependency-injection:container]


Dogodki (eventi)
----------------
Dogodek je pričakovana situacija v objektu, ki ko nastane, se pokličejo t.i. obdelovalci, torej povratni klici, ki se odzivajo na dogodek ("primer":https://gist.github.com/dg/332cdd51bdf7d66a6d8003b134508a38). Dogodek je lahko na primer pošiljanje obrazca, prijava uporabnika itd. Dogodki so tako oblika *Obrata nadzora*.

Na primer, prijava uporabnika se dogaja v metodi `Nette\Security\User::login()`. Objekt `User` ima javno spremenljivko `$onLoggedIn`, kar je polje, v katerega lahko kdorkoli doda povratni klic. V trenutku, ko se uporabnik prijavi, metoda `login()` pokliče vse povratne klice v polju. Ime spremenljivke v obliki `onXyz` je konvencija, ki se uporablja v celotnem Nette.


Ubežanje znakov / Escaping
--------------------------
Ubežanje znakov je pretvorba znakov, ki imajo v danem kontekstu poseben pomen, v druge ustrezne zaporedje. Primer: v niz, omejen z narekovaji, želimo zapisati narekovaje. Ker imajo narekovaji v kontekstu niza poseben pomen in bi bil njihov preprost zapis razumljen kot konec niza, jih je treba zapisati z drugim ustreznim zaporedjem. Kakšnim natančno, določajo pravila konteksta.


Filter (prej helper)
--------------------
V predlogah se pod pojmom [filter |latte:syntax#filtry] običajno razume funkcija, ki pomaga urediti ali preoblikovati podatke v končno obliko. Predloge razpolagajo z več [standardnimi filtri |latte:filters].


Invalidacija
------------
Obvestilo [snippetu |#snippet], naj se ponovno izriše. V drugem pomenu tudi brisanje vsebine predpomnilnika.


JSON
----
Format za izmenjavo podatkov, ki izhaja iz sintakse JavaScripta (je njena podmnožica). Natančno specifikacijo najdete na strani www.json.org.


Komponenta
----------
Ponovno uporabna komponenta aplikacije. Lahko je vizualni del strani, kot opisuje poglavje [Pišemo komponente |application:components], ali pa se pod pojmom komponenta razume tudi razred [Component |component-model:] (takšna komponenta ni nujno vizualna).


Kontrolni znaki
---------------
Kontrolni znaki so nevidni znaki, ki se lahko pojavljajo v besedilu in morebiti tudi povzročajo težave. Za njihovo množično odstranjevanje iz datotek lahko uporabite [Code Checker|code-checker:] in za odstranjevanje iz spremenljivke funkcijo [Strings::normalize()|utils:strings#normalize].


Latte
-----
Eden najnaprednejših [sistemov predlog |latte:].


Model
-----
Model je podatkovna in predvsem funkcionalna osnova celotne aplikacije. V njem je vsebovana celotna aplikacijska logika (uporablja se tudi izraz poslovna logika). Je tisti **M** iz **M**VC ali MVP. Kakršnakoli akcija uporabnika (prijava, dodajanje izdelka v košarico, sprememba vrednosti v bazi podatkov) predstavlja akcijo modela.

Model upravlja svoje notranje stanje in navzven ponuja trdno določen vmesnik. S klicanjem funkcij tega vmesnika lahko ugotavljamo ali spreminjamo njegovo stanje. Model ne ve za obstoj [#view] ali [krmilnika |#controller].


Model-View-Controller
---------------------
Programska arhitektura, ki je nastala iz potrebe po ločitvi kode za obdelavo ([#controller]) od kode aplikacijske logike ([#model]) in od kode za prikaz podatkov ([#view]) pri aplikacijah z grafičnim vmesnikom. S tem aplikacijo naredi bolj pregledno, olajšuje prihodnji razvoj in omogoča testiranje posameznih delov ločeno.


Model-View-Presenter
--------------------
Arhitektura, ki izhaja iz [#Model-View-Controller].


Modul
-----
Modul predstavlja logični del aplikacije. V tipični ureditvi gre za skupino presenterjev in predlog, ki rešujejo določeno področje funkcionalnosti. Module postavljamo v [samostojne mape |application:directory-structure#Presentery a šablony], kot npr. `Front/`, `Admin/` ali `Shop/`.

Na primer, spletno trgovino razdelimo na:
- Frontend (`Shop/`) za pregledovanje izdelkov in nakup
- Odsek za stranke (`Customer/`) za upravljanje naročil
- Administracijo (`Admin/`) za upravljavca

Tehnično gre za običajne mape, ki pa zahvaljujoč pregledni razdelitvi pomagajo skalirati aplikacijo. Presenter `Admin:Product:List` bo tako fizično nameščen na primer v mapi `app/Presentation/Admin/Product/List/` (glej [preslikava presenterjev|application:directory-structure#mapování presenterů]).


Imenski prostor / Namespace
---------------------------
Imenski prostor, del jezika PHP od različice 5.3 in nekaterih drugih programskih jezikov, ki omogoča uporabo razredov, ki so v različnih knjižnicah enako poimenovani, ne da bi prišlo do konflikta imen. Glej [dokumentacijo PHP |https://www.php.net/manual/en/language.namespaces.rationale.php].


Presenter
---------
Presenter je objekt, ki vzame [zahtevo |api:Nette\Application\Request], prevedeno z usmerjevalnikom iz HTTP zahteve, in generira [odgovor |api:Nette\Application\Response]. Odgovor je lahko HTML stran, slika, XML dokument, datoteka na disku, JSON, preusmeritev ali karkoli si zamislite.

Običajno se pod pojmom presenter misli na potomca razreda [api:Nette\Application\UI\Presenter]. Glede na dohodne zahteve poganja ustrezne [akcije |application:presenters#zivotni-cyklus-presenteru] in izrisuje predloge.


Usmerjevalnik / Router
----------------------
Dvosmerni prevajalnik med HTTP zahtevo / URL in akcijo presenterja. Dvosmerno pomeni, da je mogoče iz HTTP zahteve izpeljati [akcijo presenterja |#akce presenteru], pa tudi obratno k akciji generirati ustrezen URL. Več v poglavju o [usmerjanju URL |application:routing].


SameSite piškotek
-----------------
SameSite piškotki zagotavljajo mehanizem za prepoznavanje, kaj je vodilo k nalaganju strani. Lahko ima tri vrednosti: `Lax`, `Strict` in `None` (ta zahteva HTTPS). Če zahteva za stran prihaja neposredno s spletnega mesta ali uporabnik odpre stran z neposrednim vnosom v naslovno vrstico ali klikom na zaznamek, brskalnik pošlje strežniku vse piškotke (torej z zastavicami `Lax`, `Strict` in `None`). Če se uporabnik na spletno mesto preklikne preko povezave z drugega spletnega mesta, se strežniku posredujejo piškotki z zastavicami `Lax` in `None`. Če zahteva nastane na drug način, kot je pošiljanje POST obrazca z drugega spletnega mesta, nalaganje znotraj iframe, s pomočjo JavaScripta, itd., se pošljejo samo piškotki z zastavico `None`.


Storitev
--------
V kontekstu Dependency Injection se kot storitev označuje objekt, ki je ustvarjen in upravljan s strani DI vsebnika. Storitev je mogoče enostavno nadomestiti z drugo implementacijo, na primer za namene testiranja ali za spremembo obnašanja aplikacije, ne da bi bilo treba urejati kodo, ki storitev uporablja.


Snippet
-------
Izrezek, del strani, ki ga je mogoče samostojno ponovno izrisati med AJAX zahtevo.


View
----
View, torej pogled, je plast aplikacije, ki je zadolžena za prikaz rezultata zahteve. Običajno uporablja sistem predlog in ve, kako se naj prikaže ta ali ona komponenta ali rezultat, pridobljen iz modela.



/--comment
Navodila za avtorje:
- razlaga naj bo jedrnata, cca 1 odstavek (kjer jedrnata razlaga ne zadostuje, mora biti povezava na drugo mesto v dokumentaciji)
- na pojme se lahko nato sklicuje iz drugih delov dokumentacije ali morebiti iz foruma
\--

{{leftbar: www:@menu-common}}
{{priority: -2}}
