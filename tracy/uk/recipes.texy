Рецепти
*******


Політика безпеки контенту .[#toc-content-security-policy]
=========================================================

Якщо на вашому сайті використовується політика безпеки вмісту, вам потрібно додати `'nonce-<value>'` і `'strict-dynamic'` до `script-src`, щоб Tracy працював правильно. Деякі треті плагіни можуть вимагати додаткові директиви.
Nonce не підтримується в директиві `style-src`, якщо ви використовуєте цю директиву, вам потрібно додати `'unsafe-inline'`, але цього слід уникати у виробничому режимі.

Приклад конфігурації для [Nette Framework |nette:configuring]:

```neon
http:
	csp:
		script-src: [nonce, strict-dynamic]
```

Приклад на чистому PHP:

```php
$nonce = base64_encode(random_bytes(20));
header("Content-Security-Policy: script-src 'nonce-$nonce' 'strict-dynamic';");
```


Прискорене завантаження .[#toc-faster-loading]
==============================================

Базова інтеграція проста, однак якщо на веб-сторінці є повільні блокуючі скрипти, вони можуть уповільнити завантаження Tracy.
Рішення полягає в тому, щоб помістити `<?php Tracy\Debugger::renderLoader() ?>` у ваш шаблон перед
будь-якими скриптами:

```latte
<!DOCTYPE html>
<html>
<head>
	<title>...<title>
	<?php Tracy\Debugger::renderLoader() ?>
	<link rel="stylesheet" href="assets/style.css">
	<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
</head>
```


AJAX і перенаправлені запити .[#toc-ajax-and-redirected-requests]
=================================================================

Tracy може відображати панель налагодження та блюскріни для AJAX-запитів і перенаправлень. Tracy створює власні сесії, зберігає дані у власних тимчасових файлах і використовує cookie `tracy-session`.

Tracy також може бути налаштований на використання власної сесії PHP, яка запускається до ввімкнення Tracy:

```php
session_start();
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();
```

У разі, якщо запуск сесії вимагає складнішої ініціалізації, ви можете запустити Tracy відразу (щоб він міг обробити будь-які помилки, що виникають), потім ініціалізувати обробник сесії
і, нарешті, повідомити Tracy, що сесія готова до використання, використовуючи функцію `dispatch()`:

```php
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();

// followed by session initialization
// and start the session
session_start();

Debugger::dispatch();
```

Функція `setSessionStorage()` існує з версії 2.9, до цього Tracy завжди використовував рідну сесію PHP.


Користувацький скрабер .[#toc-custom-scrubber]
==============================================

Scrubber - це фільтр, який запобігає витоку конфіденційних даних із дампів, таких як паролі або облікові дані. Фільтр викликається для кожного елемента масиву або об'єкта дампа і повертає `true`, якщо значення є чутливим. У цьому випадку замість значення виводиться `*****`.

```php
// avoids dumping key values and properties such as `password`,
// `password_repeat`, `check_password`, `DATABASE_PASSWORD`, etc.
$scrubber = function(string $key, $value, ?string $class): bool
{
	return preg_match('#password#i', $key) && $value !== null;
};

// we use it for all dumps inside BlueScreen
Tracy\Debugger::getBlueScreen()->scrubber = $scrubber;
```


Користувацький реєстратор .[#toc-custom-logger]
===============================================

Ми можемо створити користувацький логгер, який реєструватиме помилки, невиявлені винятки, а також викликатиметься `Tracy\Debugger::log()`. Logger реалізує інтерфейс [api:Tracy\ILogger].

```php
use Tracy\ILogger;

class SlackLogger implements ILogger
{
	public function log($value, $priority = ILogger::INFO)
	{
		// sends a request to Slack
	}
}
```

Потім ми активуємо його:

```php
Tracy\Debugger::setLogger(new SlackLogger);
```

Якщо ми використовуємо повний Nette Framework, ми можемо встановити його в файлі конфігурації NEON:

```neon
services:
	tracy.logger: SlackLogger
```


nginx .[#toc-nginx]
===================

Якщо Tracy не працює на nginx, найімовірніше, він неправильно налаштований. Якщо є щось на кшталт

```nginx
try_files $uri $uri/ /index.php;
```

змініть його на

```nginx
try_files $uri $uri/ /index.php$is_args$args;
```
