HTTP request & response
***********************

.[perex]
HTTP požadavek a odpověď se zapouzdřuje do objektů [Nette\Http\Request|#HTTP požadavek] a [Response|#HTTP odpověď], které nabízejí přehledné API a fungují zároveň jako sanitizační filtr.

Instalace:

```shell
composer require nette/http
```

HTTP požadavek
==============

HTTP požadavek představuje objekt [api:Nette\Http\Request], ke kterému se dostanete tak, že si jej necháte předat pomocí [dependency injection |di-usage]. V presenterech stačí jen zavolat `$httpRequest = $this->getHttpRequest()`.

Co je důležité, tak že Nette když [vytváří|#RequestFactory] tento objekt, všechny vstupní parametry GET, POST, COOKIE a také URL pročistí od kontrolních znaků a neplatných UTF-8 sekvencí. Takže s daty pak můžete bezpečně dále pracovat. Očištěná data se následně používají v presenterech a formulářích.

Třída `Request` je immutable (neměnná). Nemá žádné settery, má jen jeden tzv. wither `withUrl()`, který objekt nemění, ale vrací novou instanci se změněnou hodnotou.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Vrací klon s jinou URL.

getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Vrací URL požadavku jako objekt [UrlScript|urls#UrlScript].

```php
$url = $httpRequest->getUrl();
echo $url; // https://doc.nette.org/cs/?action=edit
echo $url->host; // nette.org
```

getQuery(string $key = null): string|array|null .[method]
---------------------------------------------------------
Vrací parametry GET požadavku.

```php
$all = $httpRequest->getQuery(); // vrací pole všech parametrů z URL
$id = $httpRequest->getQuery('id'); // vrací GET parametr 'id' (nebo null)
```

getPost(string $key = null): string|array|null .[method]
--------------------------------------------------------
Vrací parametry POST požadavku.

```php
$all = $httpRequest->getPost(); // vrací pole všech parametrů z POST
$id = $httpRequest->getPost('id'); // vrací POST parametr 'id' (nebo null)
```

getFile(string $key): Nette\Http\FileUpload|array|null .[method]
----------------------------------------------------------------
Vrací upload jako objekt [api:Nette\Http\FileUpload].

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // byl nějaký soubor nahraný?
	$file->getName(); // jméno souboru odeslané uživatelem
	$file->getSanitizedName(); // jméno bez nebezpečných znaků
}
```

getFiles(): array .[method]
---------------------------
Vrací pole všech uploadů. Může jít také o vícerozměrné pole, jehož listy jsou vždy objekty [api:Nette\Http\FileUpload].

```php
$files = $httpRequest->getFiles();
```

getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Vrací cookie nebo `null`, když neexistuje.

```php
$sessId = $httpRequest->getCookie('sess_id');
```

getCookies(): array .[method]
-----------------------------
Vrací všechny cookies.

```php
$cookies = $httpRequest->getCookies();
```

getMethod(): string .[method]
-----------------------------
Vrací HTTP metodu, se kterou byl udělán požadavek.

```php
$httpRequest->getMethod(); // GET, POST, HEAD, PUT
```

isMethod(string $method): bool .[method]
----------------------------------------
Testuje HTTP metodu, se kterou byl udělán požadavek. Parametr je case-insensitive.

```php
if ($httpRequest->isMethod('GET')) ...
```

getHeader(string $header): ?string .[method]
--------------------------------------------
Vrací HTTP hlavičku nebo `null`, pokud neexistuje. Parametr je case-insensitive.

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```

getHeaders(): array .[method]
-----------------------------
Vrací všechny HTTP hlavičky jako asociativní pole.

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```

getReferer(): ?Nette\Http\UrlImmutable .[method]
------------------------------------------------
Z jaké URL uživatel přišel? Pozor, není vůbec spolehlivé.

isSecured(): bool .[method]
---------------------------
Je spojení šifrované (HTTPS)? Pro správnou funkčnost může být potřeba [nastavit proxy|configuring#HTTP proxy].

isSameSite(): bool .[method]
----------------------------
Přichází požadavek ze stejné (sub)domény a je iniciován kliknutím na odkaz?

isAjax(): bool .[method]
------------------------
Jde o AJAXový požadavek?

getRemoteAddress(): ?string .[method]
-------------------------------------
Vrací IP adresu uživatele. Pro správnou funkčnost může být potřeba [nastavit proxy|configuring#HTTP proxy].

getRemoteHost(): ?string .[method]
----------------------------------
Vrací DNS překlad IP adresy uživatele. Pro správnou funkčnost může být potřeba [nastavit proxy|configuring#HTTP proxy].

getRawBody(): ?string .[method]
-------------------------------
Vrací tělo HTTP požadavku.

```php
$body = $httpRequest->getRawBody();
```

detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Detekuje jazyk. Jako parametr `$lang` předáme pole s jazyky, které aplikace podporuje, a ona vrátí ten, který by viděl návštěvníkův prohlížeč nejraději. Nejsou to žádná kouzla, jen se využívá hlavičky `Accept-Language`. Pokud nedojde k žádné shodě, vrací `null`.

```php
// prohlížeč odesílá např. Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // jazyky podporované aplikací
echo $httpRequest->detectLanguage($langs); // en
```



RequestFactory
--------------

Objekt aktuálního HTTP requestu vyrobí [api:Nette\Http\RequestFactory]. Pokud píšete aplikaci, která nepoužívá DI kontejner, vyrobíte request takto:

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

RequestFactory lze před zavoláním `fromGlobals()` konfigurovat. Můžeme vypnout sanitizaci vstupních parametrů od kontrolních znaků a neplatných UTF-8 sekvencí pomocí `$factory->setBinary()`. A také nastavit proxy server pomocí `$factory->setProxy(...)`, což je důležité pro správnou detekci IP adresy uživatele.

Pomocí tzv. filtrů lze URL vyčistit od znaků, které se do něj mohou dostat např. kvůli špatně implementovaným komentářovým systémům na různých cizích webech:

```php
// odstraníme mezery z cesty
$requestFactory->urlFilters['path']['%20'] = '';

// odstraníme tečku, čárku nebo pravou závorku z konce URI
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// vyčistíme cestu od zdvojených lomítek (výchozí filtr)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```



HTTP odpověď
============

HTTP odpověď představuje objekt [api:Nette\Http\Response], ke kterému se dostanete tak, že si jej necháte předat pomocí [dependency injection |di-usage]. V presenterech stačí jen zavolat `$httpResponse = $this->getHttpResponse()`.

Objekt je na rozdíl od [Request|#HTTP požadavek] mutable, tedy pomocí setterů můžete měnit stav, tedy např. odesílat hlavičky. Zda je ještě možné odesílat hlavičky či měnit stavový kód, prozradí metoda `isSent()`. Pokud vrací true, nepůjde již žádnou další hlavičku či kód odeslat. V takovém případě každý pokus o odeslání vyvolá výjimku `Nette\InvalidStateException`.


setCode(int $code, string $reason = null) .[method]
---------------------------------------------------
Změní stavový [kód odpovědi |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. Kvůli lepší srozumitelnosti zdrojového kódu doporučujeme pro kód používat místo čísel [předdefinované konstanty |api:Nette\Http\IResponse].

```php
$httpResponse->setCode(Nette\Http\Response::S404_NOT_FOUND);
```

getCode(): int .[method]
------------------------
Vrací stavový kód odpovědi.

isSent(): bool .[method]
------------------------
Vrací, zda už došlo k odeslání hlaviček ze serveru do prohlížeče, a tedy již není možné odesílat hlavičky či měnit stavový kód.

setHeader(string $name, string $value) .[method]
------------------------------------------------
Odešle HTTP hlavičku a **přepíše** dříve odeslanou hlavičkou stejného jména. Fyzicky se hlavičky na server odešlou až s prvním výstupem.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```

addHeader(string $name, string $value) .[method]
------------------------------------------------
Odešle HTTP hlavičku a **nepřepíše** dříve odeslanou hlavičkou stejného jména. Fyzicky se hlavičky na server odešlou až s prvním výstupem.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```

deleteHeader(string $name) .[method]
------------------------------------
Smaže dříve odeslanou HTTP hlavičku.

getHeader(string $header): ?string .[method]
--------------------------------------------
Vrací odeslanou HTTP hlavičku nebo `null`, pokud taková neexistuje. Parametr je case-insensitive.

```php
$pragma = $httpResponse->getHeader('Pragma');
```

getHeaders(): array .[method]
-----------------------------
Vrací všechny odeslané HTTP hlavičky jako asociativní pole.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```

setContentType(string $type, string $charset = null) .[method]
--------------------------------------------------------------
Mění hlavičku `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```

redirect(string $url, int $code = self::S302_FOUND): void .[method]
-------------------------------------------------------------------
Přesměruje na jiné URL. Nezapomeňte poté ukončit skript.

```php
$httpResponse->redirect('http://example.com');
exit;
```

setExpiration(?string $time) .[method]
--------------------------------------
Nastaví expiraci HTTP dokumentu pomocí hlaviček `Cache-Control` a `Expires`. Parametrem je buď časový interval (jako text), nebo `null`, což zakáže kešování.

```php
// cache v prohlížeči vyprší za hodinu
$httpResponse->setExpiration('1 hour');
```

setCookie(string $name, string $value, $time, string $path = null, string $domain = null, bool $secure = null, bool $httpOnly = null, string $sameSite = null) .[method]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Odešle cookie. Výchozí hodnoty parametrů jsou:
- `$path` s dosahem na všechny adresáře (`'/'`)
- `$domain` s dosahem na aktuální (sub)doménu, ale nikoliv její subdomény
- `$secure` se řídí podle nastavení v [konfiguraci|configuring#HTTP cookie]
- `$httpOnly` je true, tedy cookie je pro JavaScript nepřístupná
- `$sameSite` je null, tedy flag se neodesílá

Čas lze uvádět jako řetězec nebo počet sekund.

```php
$httpResponse->setCookie('lang', 'cs', '100 days');
```

deleteCookie(string $name, string $path = null, string $domain = null, bool $secure = null): void .[method]
-----------------------------------------------------------------------------------------------------------
Smaže cookie. Výchozí hodnoty parametrů jsou:
- `$path` s dosahem na všechny adresáře (`'/'`)
- `$domain` s dosahem na aktuální (sub)doménu, ale nikoliv její subdomény
- `$secure` se řídí podle nastavení v [konfiguraci|configuring#HTTP cookie]

```php
$httpResponse->deleteCookie('lang');
```


{{composer: nette/http}}
