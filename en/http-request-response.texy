HTTP Request & Response
***********************

.[perex]
HTTP requests and responses are encapsulated in  [Nette\Http\Request|#HTTP požadavek] and [Response|#HTTP odpověď] objects which offer a clear API and also act as a sanitizing filter.

Installation:

```shell
composer require nette/http
```

HTTP Request
============

An HTTP request is an [api:Nette\Http\Request] object, which you get by passing it using [dependency injection |di-usage]. In presenters simply call `$httpRequest = $this->getHttpRequest()`.

What is important is that Nette when [creating|#RequestFactory] this object, it clears all GET, POST and COOKIE input parameters as well as URLs of control characters and invalid UTF-8 sequences. So you can safely continue working with the data. The cleaned data is then used in presenters and forms.

Class `Request` is immutable. It has no setters, it has only one so-called wither `withUrl()`, which does not change the object, but returns a new instance with a modified value.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Returns a clone with a different URL.

getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Returns the URL of the request as object [UrlScript|urls#UrlScript].

```php
$url = $httpRequest->getUrl();
echo $url; // https://nette.org/en/documentation?action=edit
echo $url->host; // nette.org
```

getQuery(string $key = null): string|array|null .[method]
---------------------------------------------------------
Returns GET request parameters:

```php
$all = $httpRequest->getQuery();    // array of all URL parameters
$id = $httpRequest->getQuery('id'); // returns GET parameter 'id' (or null)
```

getPost(string $key = null): string|array|null .[method]
--------------------------------------------------------
Returns POST request parameters:

```php
$all = $httpRequest->getPost();     // array of all POST parameters
$id = $httpRequest->getPost('id');  // returns POST parameter 'id' (or null)
```

getFile(string $key): Nette\Http\FileUpload|array|null .[method]
----------------------------------------------------------------
Returns upload as object [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // was any file uploaded?
	$file->getName(); // name of the file sent by user
	$file->getSanitizedName(); // the name without dangerous characters
}
```

getFiles(): array .[method]
---------------------------
Returns an array of all uploads. It can also be a multidimensional array whose leaves are always objects [api:Nette\Http\FileUpload]:

```php
$files = $httpRequest->getFiles();
```

getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Returns a cookie or `null` if it does not exist.

```php
$sessId = $httpRequest->getCookie('sess_id');
```

getCookies(): array .[method]
-----------------------------
Returns all cookies:

```php
$cookies = $httpRequest->getCookies();
```

getMethod(): string .[method]
-----------------------------
Returns the HTTP method with which the request was made.

```php
echo $httpRequest->getMethod(); // GET, POST, HEAD, PUT
```

isMethod(string $method): bool .[method]
----------------------------------------
Checks the HTTP method with which the request was made. The parameter is case-insensitive.

```php
if ($httpRequest->isMethod('GET')) ...
```

getHeader(string $header): ?string .[method]
--------------------------------------------
Returns an HTTP header or `null` if it does not exist. The parameter is case-insensitive:

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```

getHeaders(): array .[method]
-----------------------------
Returns all HTTP headers as associative arrays:

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```

getReferer(): ?Nette\Http\UrlImmutable .[method]
------------------------------------------------
What URL did the user come from? Beware, it is not reliable at all.

isSecured(): bool .[method]
---------------------------
Is the connection encrypted (HTTPS)? You may need to [set up a proxy|configuring#HTTP proxy] for proper functionality.

isSameSite(): bool .[method]
----------------------------
Is the request coming from the same (sub) domain and is initiated by clicking on a link?

isAjax(): bool .[method]
------------------------
Is it an AJAX request?

getRemoteAddress(): ?string .[method]
-------------------------------------
Returns the user's IP address. You may need to [set up a proxy|configuring#HTTP proxy] for proper functionality.

getRemoteHost(): ?string .[method]
----------------------------------
Returns DNS translation of the user's IP address. You may need to [set up a proxy|configuring#HTTP proxy] for proper functionality.

getRawBody(): ?string .[method]
-------------------------------
Returns the body of the HTTP request:

```php
$body = $httpRequest->getRawBody();
```

detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Detects language. As a parameter `$lang`, we pass an array of languages ​​that the application supports, and it returns the one preferred by browser. It is not magic, the method just uses the `Accept-Language` header. If no match is reached, it returns `null`.

```php
// Header sent by browser: Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // languages supported in application
echo $httpRequest->detectLanguage($langs); // en
```



RequestFactory
--------------

The object of the current HTTP request is created by [api:Nette\Http\RequestFactory]. If you are writing an application that does not use a DI container, you create a request as follows:

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

RequestFactory can be configured before calling `fromGlobals()`. We can disable all sanitization of input parameters from invalid UTF-8 sequences using `$factory->setBinary()`. And also set up a proxy server, which is important for the correct detection of the user's IP address using `$factory->setProxy(...)`.

It's possible to clean up URLs from characters that can get into them because of poorly implemented comment systems on various other websites by using filters:

```php
// remove spaces from path
$requestFactory->urlFilters['path']['%20'] = '';

// remove dot, comma or right parenthesis form the end of the URL
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// clean the path from duplicated slashes (default filter)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```



HTTP Response
=============

An HTTP response is an [api:Nette\Http\Response] object, which you get by passing it using [dependency injection |di-usage]. In presenters simply call `$httpResponse = $this->getHttpResponse()`.

Unlike the [Request|#HTTP Request], the object is mutable, so you can use setters to change the state, ie to send headers. Whether it is still possible to send headers or change the status code tells the `isSent()` method. If it returns true, it won't be possible to send another header or change the status code. In this case, any attempt to send will throw an exception `Nette\InvalidStateException`.


setCode(int $code, string $reason = null) .[method]
---------------------------------------------------
Changes a status [response code |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. For better source code readability it is recommended to use [predefined constants |api:Nette\Http\IResponse] instead of actual numbers.

```php
$httpResponse->setCode(Nette\Http\Response::S404_NOT_FOUND);
```

getCode(): int .[method]
------------------------
Returns the status code of the response.

isSent(): bool .[method]
------------------------
Returns whether headers have already been sent from the server to the browser, so it is no longer possible to send headers or change the status code.

setHeader(string $name, string $value) .[method]
------------------------------------------------
Sends an HTTP header and **overwrites** previously sent header of the same name. Physically, the headers are sent to the server with the first output.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```

addHeader(string $name, string $value) .[method]
------------------------------------------------
Sends an HTTP header and **doesn't overwrite** previously sent header of the same name. Physically, the headers are sent to the server with the first output.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```

deleteHeader(string $name) .[method]
------------------------------------
Deletes a previously sent HTTP header.

getHeader(string $header): ?string .[method]
--------------------------------------------
Returns the sent HTTP header, or `null` if it does not exist. The parameter is case-insensitive.

```php
$pragma = $httpResponse->getHeader('Pragma');
```

getHeaders(): array .[method]
-----------------------------
Returns all sent HTTP headers as associative fields.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```

setContentType(string $type, string $charset = null) .[method]
--------------------------------------------------------------
Changes the header `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```

redirect(string $url, int $code = self::S302_FOUND): void .[method]
-------------------------------------------------------------------
Redirects to another URL. Don't forget to quit the script then.

```php
$httpResponse->redirect('http://example.com');
exit;
```

setExpiration(?string $time) .[method]
--------------------------------------
Sets the expiration of the HTTP document using the `Cache-Control` and `Expires` headers. The parameter is either a time interval (as text) or `null`, which disables caching.

```php
// browser cache expires in one hour
$httpResponse->setExpiration('1 hour');
```

setCookie(string $name, string $value, $time, string $path = null, string $domain = null, bool $secure = null, bool $httpOnly = null, string $sameSite = null) .[method]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sends a cookie. The default values ​​of the parameters are:
- `$path` with scope to all directories (`'/'`)
- `$domain` with scope of the current (sub)domain, but not its subdomains
- `$secure` is affected by the settings in [configuration |configuring#HTTP cookie]
- `$httpOnly` is true, so the cookie is inaccessible to JavaScript
- `$sameSite` is null, so the flag is not specified

The time can be specified as a string or the number of seconds.

```php
$httpResponse->setCookie('lang', 'en', '100 days');
```

deleteCookie(string $name, string $path = null, string $domain = null, bool $secure = null): void .[method]
-----------------------------------------------------------------------------------------------------------
Deletes a cookie. The default values ​​of the parameters are:
- `$path` with scope to all directories (`'/'`)
- `$domain` with scope of the current (sub)domain, but not its subdomains
- `$secure` is affected by the settings in [configuration |configuring#HTTP cookie]

```php
$httpResponse->deleteCookie('lang');
```


{{composer: nette/http}}
