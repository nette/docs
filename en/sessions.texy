Sessions
********

/--div .[perex]
HTTP is a stateless protocol, but almost every application needs to store states between requests, e.g. content of a shopping cart. And exactly for that the session (or relation) is. We will show you,

- how to use sessions
- how to avoid naming conflicts
- set expiration
- secure against vulnerability
\--

When using sessions, each user who visits a web page receives a unique identifier Session ID, which is passed by cookies. It serves as a key for session data. Unlike cookies, which are stored at browser side, session data are stored at server side.


Sections
--------

In pure PHP is session data storage implemented as an array, which is accessible via global variable `$_SESSION`. The problem is, that applications are usually composed of several independent parts and if every part can use the same array, you will have to solve naming conflicts...sooner or later.

Nette Framework solves that problem dividing of the session space into sections (objects [Nette\Http\SessionSection |api:]). So then every part of a program uses its own section with a unique name and no collision can occure.

Let's start with a session manager, what is an object of class [Nette\Http\Session |api:]. It's a singleton so we don't create its instance directly, but we receive it as a `session` service from a [system DI container |configuring].

/--php
// $container is a system container
$session = $container->getService('session');

// or shortly:
$session = $container->session;

// and get an access into a 'myCounter' section:
$section = $session->getSection('myCounter');
\--

We can use a method `hasSection('myCounter')` for checking an existence of a section.

There is no need to start or close that session, it's done automatically by framework itself. But we can start it manually by calling `$session->start()`. If we call that start() method more times, nothing happens and it will have no effect.

And then it's really simple to work with that section:

/--php
// variable writing
$section->userName = 'franta'; // or $section['userName'] = 'franta';

// variable reading
echo $section->userName; // or echo $section['userName'];

// variable cancellation
unset($section->userName);  // unset($section['userName']);
\--

It's possible to use `foreach` cycle to obtain all varibles from section:

/--php
foreach ($section as $key => $val) {
    echo "$key = $val";
}
\--



Example: visit counter
----------------------

We will start with an example of a visit counter, which shows how many times did user display a page.

/--php
$section = $container->session->getSection('myCounter');
$section->count++; // increment counter by one
echo "You displayed this page $section->count Ã—";
\--

Accessing a non-existent variable generates no error (variable has a NULL value). It could be undesirable behaviour in some cases and that's why there is a possibility to change it:

/--php
$section->warnOnUndefined = TRUE;
\--


How to set expiration
---------------------

Very useful feature is a possibility to set its own expiration for every section or variable. So we can let expire user login, but still remember a content of a shopping cart.

/--php
// section will expire after 2 minutes
$section->setExpiration('+ 2 minutes');

// variable $section->a will expire after 10 seconds
$section->setExpiration(10, 'a');
\--

Besides a relative time in seconds one can use a UNIX timestamp or a textual form. Interesting is a value of `0`, which sets an expiration for a moment when a user closes a browser:

/--php
// variable $section->password will expire when a user closes a browser
$section->setExpiration(0, 'password');
\--

.[note]
Don't remember, that an expiration time of a whole session (see [#Configuration session]) must be the same or greater then a time which was set for separate sections or variables.

Cancellation of previously set expiration can be achieved by calling `removeExpiration()` method. Imediate cancellation of whole section is handled by `remove()` method.



Session configuration
---------------------

Configuration of a session must be done before using it. The best place where to place it is a `bootstrap.php`.

What to configure? Expiration. If this setting is not done, every session variable will expire in a moment when a browser window is closed. Storing session after window closing is useful e.g. for a long user login.

/--php
$container->session->setExpiration('+ 14 days');
\--

If you use a shared hosting, it's suitable to use a custom directory for storing files with session relations:

/--php
$session->setSavePath(__DIR__ . '/sessions');
\--

If you want to extend a validity of session (or authentication) for subdomains, let's set just another cookie parameters:

/--php
// sets a validity for all subdomains
$container->session->setCookieParams('/', '.example.com');
\--



Safety first
------------

The server assumes that it communicates with the same user as long as requests contain the same Session ID. The task of security mechanisms if to ensure that this behaviour really works and that there is no possibility to substitute or steal an identifier.

That's why Nette Framework properly cofigures PHP directives to transfer Session ID only in cookies, to avoid access for JavaScript and to ignore identifiers in URL. Moreover in critical moments, such as user login, it generates new Session ID.

Function ini_set is used for configuring PHP, but unfortunately its use is prohibited at some hostings. If it's your case, try to ask your hoster to allow that function for you, or at least to configure his server properly. Otherwise you will have to switch these security mechanisms off by `Nette\Framework::$iAmUsingBadHost = TRUE` .[note]


{{toc: title}}

{{themeicon: icon-sezeni.png}}
