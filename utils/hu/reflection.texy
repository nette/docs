PHP Reflexió
************

.[perex]
A [api:Nette\Utils\Reflection] egy statikus osztály hasznos függvényekkel a PHP reflexióhoz. Feladata a natív osztályok hiányosságainak javítása és a viselkedés egységesítése a különböző PHP verziók között.


Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi a létrehozott aliast:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Megállapítja, hogy a reflexió hozzáfér-e a PHPdoc kommentekhez. A kommentek elérhetetlenek lehetnek az opcode cache miatt, lásd például a [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments] direktívát.


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Kibővíti a `$name` osztálynevet a teljes nevére a `$context` osztály kontextusában, azaz a névterének és a definiált aliasoknak a kontextusában. Tehát valójában azt mondja meg, hogyan értelmezné a PHP parser a `$name`-et, ha az a `$context` osztály törzsében lenne leírva.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Visszaadja annak a metódusnak a reflexióját, amely a `$method` metódus deklarációját tartalmazza. Általában minden metódus a saját deklarációja, de a metódus törzse trait-ben is lehet, és más néven.

Mivel a PHP nem szolgáltat elegendő információt a valódi deklaráció megállapításához, a Nette saját heurisztikát használ, amelynek **megbízhatónak kellene** lennie.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Visszaadja annak az osztálynak vagy trait-nek a reflexióját, amely a `$prop` property deklarációját tartalmazza. A property ugyanis trait-ben is deklarálható.

Mivel a PHP nem szolgáltat elegendő információt a valódi deklaráció megállapításához, a Nette saját heurisztikát használ, amely **nem** megbízható.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Megállapítja, hogy a `$type` beépített PHP típus-e. Ellenkező esetben osztálynév.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Használja a [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType] metódust.


toString($reflection): string .[method]
---------------------------------------

Átalakítja a reflexiót ember által érthető stringgé.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
