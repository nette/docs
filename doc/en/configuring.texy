Configuring
***********

/--div .[perex]
Nette application is easily configured using NEON files. We'll talk about:

- how to configure your application using NEON files
- how to handle production and development modes
- how to create the DI container
\--

Configurator
============

The environment settings can be configured and Dependency Injection (DI) container created by [Configurator | api:Nette\Configurator]. Is used in `bootstrap.php` located in folder `app/`.


Development mode
----------------

Development mode is automatically active when we develop on *localhost*. If you want to enable it even outside of it, for example, programmers accessing a specific IP address, we will use `setDebugMode()`:

/--php
$configurator->setDebugMode('23.75.345.200'); // one or more IP addresses
\--

Even more secured is the combination of IP address and cookie. We will store a secret token into the `nette-debug' cookie, e.q `secret1234`, the development mode is activated for programmers with this IP and set up cookie.

/--php
$configurator->setDebugMode('secret1234@23.75.345.200');
\--

The development mode can be deactivated by:

/--php
$configurator->setDebugMode(false);
\--


Debugging tool Tracy
--------------------

Turn on great debugging tool [Tracy | tracy:], it'll store all exceptions files into specified folder (`__DIR__ . '/../log'`).

/--php
$configurator->enableTracy(__DIR__ . '/../log');
\--


Caching
-------

The configuration is loaded and processed only once, and the result is cached, which greatly accelerates the application. Therefore, first set the `setTempDirectory()` path where the cache will be saved.

/--php
$configurator = new Nette\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');
\--


RobotLoader
-----------

We would like to autoload classes into application automatically using [RobotLoader], so we have to register it.

/--php
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
\--

Alternative way is to use only [Composer | composer] PSR-4 autoloading.


Timezone
--------

There is a way how to setup timezone.

/--php
$configurator->setTimeZone('Europe/Prague');
\--


Configuration files
-------------------

According to configuration files, a system DI container is generated, which is the heart of the entire application.

The configuration files are loaded with `addConfig()`:

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
\--

Method `addConfig()` can be called multiple times to add multiple files.

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
$configurator->addConfig(__DIR__ . '/config/config.local.neon');
if (PHP_SAPI === 'cli') {
	$configurator->addConfig(__DIR__ . '/config/config.cli.neon');
}
\--

Alternatively we can use `includes` section to load more configuration files.

/--neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

If items with the same keys appear in configuration files, they will be [overwritten or merged |di-configuration#Multiple configuration files] in the case of arrays. The later included file has higher priority. The file with the `includes` section has higher priority than included files.


Parameters
----------

Parameters could be passed to the DI container over `addParameters()` method, their values must be known
at the compile time. The container is always generated for the different values of these parameters.

/--php
$configurator->addParameters([
	'foo' => 'bar',
	'baz' => '%tempDir%',
]);
\--

We can access `foo` parameter via `%foo%` in configuration files. The configurator adds be default these parameters `appDir`, `wwwDir`, `tempDir`, `debugMode` a `consoleMode`.


Dynamic parameters
------------------

We can set also dynamic parameters to DI container, their values must not be known at compile time, they are
used at run time. It doesn't generate a new container.

/--php
$configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
\--

The environment variables could be easily set up using dynamic parameters. We can access them via `%env.variable%` in configuration files.

/--php
$configurator->addDynamicParameters([
	'env' => $_ENV,
]);
\--


Dynamic services
----------------

We can insert an instance of the class into the DI container directly, before the DI container creates it for us. The service must be defined with `dynamic: yes` attribute.

/--neon
services:
	myservice:
		class: App\Model\MyCustomService
		dynamic: yes
\--

Create a new instance and insert it in bootstrap:

/--php
$configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
\--


Creating a container
--------------------

The container class generates and its instance returns `createContainer()`:

/--php
/** @var Nette\DI\Container $container */
$container = $configurator->createContainer();
\--

In the developer mode, the container is automatically updated each time you change the code or configuration files. In production mode it is generated only once and file changes are not checked for performance.


Framework configuration
=======================

Many features of Nette Framework can be set up in configuration file.
Configuration is usually written in NEON format. Have fun trying out the syntax at https://ne-on.org.


Sessions
--------

Here you can set all [directives |php:session.configuration] (in camelCase format).

/-- neon
	session:
		autoStart: true  # default is smart
		expiration: 10 days
		name: ...
		...
\--

.[tip]
`autoStart: smart` is recommended. It automatically starts the session only if it already exists.

Read more on [session configuration | sessions#Session configuration].


Application
-----------

/--neon
	application:
		debugger: true  # debugger bar panel
		catchExceptions: %productionMode%
		errorPresenter: Front:Error

		# mapping between presenter name and presenter class
		mapping:
			Front: App\*Module\*Presenter
\--


HTTP headers
------------

/--neon
	http:
		frames: ...               # header X-Frame-Options

	headers:
		X-Powered-By: MyCMS       # custom HTTP header

    csp:                          # Content Security Policy
        script-src: [
            nonce                 # for browsers that support CSP2
            self, unsafe-inline   # for browsers that support CSP1
        ]
\--

For security reasons Nette Framework sends HTTP header `X-Frame-Options: SAMEORIGIN` by default, so that the page can be embedded in iframe only from pages on the same domain. This behavior may be unwanted in certain situations (for example if you are developing a facebook application). You can override this setting by `frames: yes`, `frames: http://allowed-host.com` or `frames: no`.


HTTP proxies
------------

You can define your HTTP proxy, so that HTTP request's remote address and remote host will be correct.

/--neon
	http:
		proxy: 127.0.0.1  # IP address, range, hostname or array of these values
\--


Access Control
--------------

By filling in `users` option you create `SimpleAuthenticator`, by defining `roles` or `resources` you create `Nette\Security\Permission` authorizator. More in [User Authorization and Privileges |access-control].

/--neon
	security:
		debugger: true  # debugger bar panel

		users:
			johndoe: secretpassword

		roles:
			guest:
			member:
			admin: [member]  # admin extends member

		resources:
			file:
\--


Mailing
-------

Default mailer is `SendmailMailer`. By setting `smtp` you activate `SmtpMailer`.

/--neon
	mail:
		smtp: true  # use SmtpMailer instead of SendmailMailer
		# optional settings
		host: ...
		port: ...
		username: ...
		password: ...
		secure: # possible values are ssl, tls or null
		timeout: ...
\--


Database
--------

You can define multiple database connections, if you do so you can set which one will be [automatically injected |configuring#auto-wiring] to your services by the `autowired` option. The following code shows how to set up one connection called `default`.

/--neon
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false  # debugger bar panel
			explain: false   # explain queries in debugger bar
			reflection: discovered  # or static or classname, default is discovered
			autowired: true
\--

This creates service `@nette.database.default` and sets reflection and cache for you.


Forms
-----

You can change default validation error messages.

/--neon
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
\--


Latte
-----

You can turn on and off XHTML rendering mode and register custom macros. Custom macros may be passed either as a class name or as a service reference. The default called method is `install`, you may change it by appending a double colon and a custom method name.

/--neon
	latte:
		xhtml: yes  # default is no
		macros:
			- App\MyLatteMacros::register  # static method, classname or callable
			- @App\MyLatteMacrosFactory    # service with install method
			- @App\MyLatteMacrosFactory::register # service with register method

	services:
		- App\MyLatteMacrosFactory
\--


DI container
------------

/--neon
	di:
		debugger: false  # disables DI panel
\--


Tracy debugger
--------------

/--neon
	tracy:
		email: webmaster@example.com  # for sending error logs
		strictMode: true
		editor: ...
		browser: ...

		bar:  # debugger bar panels
			- Nette\Bridges\DITracy\ContainerPanel  # alias of DI container bar
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)

		blueScreen:  # blue screen panels
			- DoctrinePanel::renderException
\--


Low-level modifications
-----------------------

All these settings affect the contents of the DI container and the system services it creates. All these services can still be changed to a low-level. For instance, we can change class of service `application.application`, which is by default `Nette\Application\Application`:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
\--

The `alteration 'flag is informative and says we only modify an existing service.

We can also add setup:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
		setup:
			- $onStartup = [@resource::init]
\--



Custom services
===============

The configuration file is place where we add definitions of our own services in section `services`. See the [DI: Services Configuration |di-configuration] chapter for a detailed description.

For example, this is definition of service named `database` which is `PDO` instance:

/--neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
\--

{{composer: nette/bootstrap}}
