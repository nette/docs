Použití Latte se Slim 4
***********************

.[perex]
Tento článek, jehož autorem je "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, popisuje použití Latte se Slim Frameworkem.

Nejprve si "nainstalujte Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html a poté Latte pomocí Composeru:

```shell
composer require latte/latte
```


Konfigurace
-----------

V kořenovém adresáři projektu vytvořte nový adresář `templates`. Všechny šablony do něj budou umístěny později.

Do souboru `config/defaults.php` přidejte nový konfigurační klíč `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte zkompiluje šablony do nativního kódu PHP a uloží je do mezipaměti na disku. Jsou tedy stejně rychlé, jako kdyby byly napsány v nativním jazyce PHP.

Do souboru `config/defaults.php` přidejte nový konfigurační klíč `template_temp`: Ujistěte se, že adresář `{project}/tmp/templates` existuje a má práva pro čtení a zápis.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte automaticky regeneruje mezipaměť při každé změně šablony, což lze v produkčním prostředí vypnout a ušetřit tak trochu výkonu:

```php
// v produkčním prostředí změňte na false
$settings['template_auto_refresh'] = true;
```

Dále přidejte definici kontejneru DI pro třídu `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Samotné vykreslení šablony Latte by technicky fungovalo, ale musíme také zajistit, aby fungovalo s objektem response PSR-7.

Za tímto účelem vytvoříme speciální třídu `TemplateRenderer`, která tuto práci udělá za nás.

Dále tedy vytvořte soubor `src/Renderer/TemplateRenderer.php` a zkopírujte/vložte tento kód:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Použití
-------

Místo přímého použití objektu Latte Engine použijeme k vykreslení šablony do objektu kompatibilního s PSR-7 objekt `TemplateRenderer`.

Typická třída obsluhy akce může vypadat takto: Vykreslí šablonu s názvem `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Aby to fungovalo, vytvořte soubor šablony v `templates/home.latte` s tímto obsahem:

```latte
<ul n:if="$items">
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Pokud je vše správně nakonfigurováno, měl by se zobrazit následující výstup:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
