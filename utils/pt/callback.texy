Trabalhando com callbacks
*************************

.[perex]
[api:Nette\Utils\Callback] é uma classe estática com funções para trabalhar com [callbacks PHP |https://www.php.net/manual/en/language.types.callable.php].


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos pressupõem a criação de um alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Verifica se a variável `$callable` é um callback válido. Caso contrário, lança `Nette\InvalidArgumentException`. Se `$syntax` for true, a função apenas verifica se `$callable` tem a estrutura de um callback, mas não verifica se a classe ou método especificado realmente existe. Retorna `$callable`.

```php
Callback::check('trim'); // não lança exceção
Callback::check(['NonExistentClass', 'method']); // lança Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // não lança exceção
Callback::check(function () {}); // não lança exceção
Callback::check(null); // lança Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Converte um callback PHP para forma textual. A classe ou método não precisa existir.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Retorna a reflexão para o método ou função no callback PHP.

```php
$ref = Callback::toReflection('trim');
// $ref é ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref é ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Verifica se o callback PHP é uma função ou um método estático.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Desembrulha uma Closure criada usando `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
