Práticas do desenvolvedor
*************************


Instalação
==========

A melhor maneira de instalar o Latte é usando o Composer:

```shell
composer require latte/latte
```

Versões do PHP suportadas (aplica-se às últimas versões de patch do Latte):

| versão           | compatível com PHP
|-----------------|-------------------
| Latte 3.0       | PHP 8.0 – 8.2


Como renderizar um template
===========================

Como renderizar um template? Basta este código simples:

```php
$latte = new Latte\Engine;
// diretório para cache
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* variáveis do template */ ];
// ou $params = new TemplateParameters(/* ... */);

// renderiza na saída
$latte->render('template.latte', $params);
// renderiza para uma variável
$output = $latte->renderToString('template.latte', $params);
```

Os parâmetros podem ser um array ou, melhor ainda, um [objeto|#parametros-como-classe], que garante a verificação de tipo e sugestões em editores.

.[note]
Exemplos de uso também podem ser encontrados no repositório [Latte examples |https://github.com/nette-examples/latte].


Desempenho e cache
==================

Os templates em Latte são extremamente rápidos, pois o Latte os compila diretamente em código PHP e os armazena em cache no disco. Portanto, eles não têm nenhuma sobrecarga adicional em comparação com templates escritos em PHP puro.

O cache é regenerado automaticamente sempre que você altera o arquivo de origem. Durante o desenvolvimento, você pode editar confortavelmente os templates em Latte e ver as alterações imediatamente no navegador. Você pode desativar esta função no ambiente de produção para economizar um pouco de desempenho:

```php
$latte->setAutoRefresh(false);
```

Ao implantar em um servidor de produção, a geração inicial do cache, especialmente para aplicações maiores, pode, compreensivelmente, levar um momento. Latte tem prevenção integrada contra "cache stampede":https://en.wikipedia.org/wiki/Cache_stampede.
Esta é uma situação em que um grande número de requisições simultâneas chega, que iniciam o Latte, e como o cache ainda não existe, todas começariam a gerá-lo simultaneamente. O que sobrecarregaria indevidamente o servidor.
Latte é inteligente e, com múltiplas requisições simultâneas, apenas a primeira thread gera o cache, as outras esperam e depois o utilizam.


Parâmetros como classe .[#parametros-como-classe]
=================================================

Melhor do que passar variáveis para o template como um array é criar uma classe. Você obterá assim uma [escrita type-safe|type-system], [sugestões úteis no IDE|recipes#Editory a IDE] e um caminho para [registro de filtros|custom-filters#Filters Using the Class] e [funções|custom-functions#Functions Using the Class].

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Desativando o auto-escaping de variável
=======================================

Se uma variável contiver uma string em HTML, você pode marcá-la para que o Latte não a escape automaticamente (e, portanto, duplamente). Você evitará assim a necessidade de especificar `|noescape` no template.

A maneira mais simples é envolver a string em um objeto `Latte\Runtime\Html`:

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

Latte também não escapa todos os objetos que implementam a interface `Latte\HtmlStringable`. Você pode, assim, criar sua própria classe, cujo método `__toString()` retornará código HTML que não será escapado automaticamente:

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
O método `__toString` deve retornar HTML correto e garantir o escape de parâmetros, caso contrário, pode ocorrer uma vulnerabilidade XSS!


Como estender o Latte com filtros, tags, etc.
=============================================

Como adicionar seu próprio filtro, função, tag, etc. ao Latte? Isso é abordado no capítulo [estendendo o Latte |extending-latte].
Se você deseja reutilizar suas modificações em diferentes projetos ou compartilhá-las com outros, você deve [criar uma extensão |extending-latte#latte-extension].


Código arbitrário no template `{php ...}` .{toc: RawPhpExtension}
=================================================================

Dentro da tag [`{do}`|tags#do], apenas expressões PHP podem ser escritas, então você não pode, por exemplo, inserir construções como `if ... else` ou declarações terminadas com ponto e vírgula.

No entanto, você pode registrar a extensão `RawPhpExtension`, que adiciona a tag `{php ...}`. Com ela, você pode inserir qualquer código PHP. Nenhuma regra do modo sandbox se aplica a ela, portanto, o uso é de responsabilidade do autor do template.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Verificação do código gerado .{data-version:3.0.7}
==================================================

Latte compila templates em código PHP. Obviamente, ele garante que o código gerado seja sintaticamente válido. No entanto, ao usar extensões de terceiros ou `RawPhpExtension`, Latte não pode garantir a correção do arquivo gerado.
Também é possível escrever código em PHP que, embora sintaticamente correto, é proibido (por exemplo, atribuir um valor à variável `$this`) e causa um Erro de Compilação do PHP.
Se você escrever tal operação em um template, ela também chegará ao código PHP gerado. Como existem cerca de duzentas operações proibidas diferentes em PHP, Latte não tem a ambição de detectá-las. O próprio PHP as sinalizará apenas durante a renderização, o que geralmente não é um problema.

No entanto, existem situações em que você deseja saber já no momento da compilação do template que ele não contém nenhum Erro de Compilação do PHP. Especialmente quando os templates podem ser editados por usuários, ou você usa [Sandbox|sandbox]. Nesse caso, faça com que os templates sejam verificados já no momento da compilação.
Esta funcionalidade é ativada pelo método `Engine::enablePhpLint()`. Como ele precisa chamar o binário PHP para a verificação, passe o caminho para ele como parâmetro:

```php
$latte = new Latte\Engine;
$latte->enablePhpLinter('/path/to/php');

try {
	$latte->compile('home.latte');
} catch (Latte\CompileException $e) {
	// captura erros no Latte e também Compile Error no PHP
	echo 'Erro: ' . $e->getMessage();
}
```


Localidade .{data-version:3.0.18}{toc: Locale}
==============================================

Latte permite definir a localidade, que afeta a formatação de números, datas e ordenação. É definida usando o método `setLocale()`. O identificador de localidade segue o padrão IETF language tag, que usa a extensão PHP `intl`. Consiste no código do idioma e, opcionalmente, no código do país, por exemplo, `en_US` para inglês nos Estados Unidos, `de_DE` para alemão na Alemanha, etc.

```php
$latte = new Latte\Engine;
$latte->setLocale('pt_BR'); // Exemplo para Português do Brasil
```

A configuração da localidade afeta os filtros [localDate|filters#localDate], [sort|filters#sort], [number|filters#number] e [bytes|filters#bytes].

.[note]
Requer a extensão PHP `intl`. A configuração no Latte não afeta a configuração global de localidade no PHP.


Modo estrito .[#modo-estrito]{data-version:3.0.8}
=================================================

No modo de análise estrito, o Latte verifica se as tags HTML de fechamento não estão faltando e também proíbe o uso da variável `$this`. Você o ativa assim:

```php
$latte = new Latte\Engine;
$latte->setStrictParsing();
```

A geração de templates com o cabeçalho `declare(strict_types=1)` é ativada assim:

```php
$latte = new Latte\Engine;
$latte->setStrictTypes();
```


Tradução em templates .{toc: TranslatorExtension}
=================================================

Usando a extensão `TranslatorExtension`, você adiciona as tags [`{_...}`|tags#_], [`{translate}`|tags#translate] e o filtro [`translate`|filters#translate] ao template. Eles servem para traduzir valores ou partes do template para outros idiomas. Como parâmetro, especificamos o método (PHP callable) que realiza a tradução:

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// de $original criamos $translated de acordo com $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] no PHP 8.0
);
$latte->addExtension($extension);
```

O tradutor é chamado em tempo de execução ao renderizar o template. No entanto, o Latte pode traduzir todos os textos estáticos já durante a compilação do template. Isso economiza desempenho, pois cada string é traduzida apenas uma vez e a tradução resultante é escrita na forma compilada. No diretório de cache, são criadas várias versões compiladas do template, uma para cada idioma. Para isso, basta especificar o idioma como segundo parâmetro:

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

Texto estático significa, por exemplo, `{_'hello'}` ou `{translate}hello{/translate}`. Textos não estáticos, como `{_$foo}`, continuarão sendo traduzidos em tempo de execução.

Também é possível passar parâmetros adicionais do template para o tradutor usando `{_$original, foo: bar}` ou `{translate foo: bar}`, que ele recebe como um array `$params`:

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


Depuração e Tracy
=================

Latte tenta tornar o desenvolvimento o mais agradável possível para você. Diretamente para fins de depuração, existem três tags [`{dump}`|tags#dump], [`{debugbreak}`|tags#debugbreak] e [`{trace}`|tags#trace].

Você obterá o maior conforto se instalar também a excelente [ferramenta de depuração Tracy|tracy:] e ativar o complemento para Latte:

```php
// ativa o Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// ativa a extensão para Tracy
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);
```

Agora, todos os erros serão exibidos em uma tela vermelha clara, incluindo erros nos templates com destaque de linha e coluna ([vídeo|https://github.com/nette/tracy/releases/tag/v2.9.0]).
Ao mesmo tempo, no canto inferior direito, na chamada Tracy Bar, aparecerá uma aba para Latte, onde todos os templates renderizados e suas relações mútuas são claramente visíveis (incluindo a possibilidade de clicar para ir ao template ou ao código compilado) e também as variáveis:

[* latte-debugging.webp *]

Como o Latte compila templates em código PHP claro, você pode depurá-los confortavelmente em seu IDE.


Linter: validação da sintaxe dos templates .{toc: Linter}
=========================================================

Para percorrer todos os templates e verificar se eles não contêm erros de sintaxe, a ferramenta Linter o ajudará. Ela é executada a partir do console:

```shell
vendor/bin/latte-lint <caminho>
```

O parâmetro `--strict` ativa o [modo estrito|#modo-estrito].

Se você usa tags personalizadas, crie também sua própria versão do Linter, por exemplo, `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// especifique o caminho real para o arquivo autoload.php
require __DIR__ . '/vendor/autoload.php';

$path = $argv[1] ?? '.';

$linter = new Latte\Tools\Linter;
$latte = $linter->getEngine();
// aqui adicione suas extensões individuais
$latte->addExtension(/* ... */);

$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```

Alternativamente, você pode passar seu próprio objeto `Latte\Engine` para o Linter:

```php
$latte = new Latte\Engine;
// aqui configuramos o objeto $latte
$linter = new Latte\Tools\Linter(engine: $latte);
```


Carregando templates de string
==============================

Precisa carregar templates de strings em vez de arquivos, talvez para fins de teste? [StringLoader|loaders#stringloader] o ajudará:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Manipulador de exceção
======================

Você pode definir seu próprio manipulador para exceções esperadas. As exceções que ocorrem dentro de [`{try}`|tags#try] e no [sandbox|sandbox] serão passadas para ele.

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Busca automática de layout
==========================

Usando a tag [`{layout}`|template-inheritance#layoutova-dedicnost], o template especifica seu template pai. Também é possível fazer com que o layout seja buscado automaticamente, o que simplificará a escrita dos templates, pois não será necessário especificar a tag `{layout}` neles.

Isso é alcançado da seguinte maneira:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// retorna o caminho para o arquivo com o layout
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

Se o template não deve ter um layout, ele o indica com a tag `{layout none}`.
