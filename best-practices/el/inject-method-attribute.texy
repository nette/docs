Μέθοδοι και χαρακτηριστικά Inject
*********************************

.[perex]
Χρησιμοποιώντας συγκεκριμένα παραδείγματα, θα εξετάσουμε τις δυνατότητες μετάδοσης εξαρτήσεων στους παρουσιαστές και θα εξηγήσουμε τις μεθόδους και τα χαρακτηριστικά/προσδιορισμούς `inject`.


`inject*()` Μέθοδοι .[#toc-inject-methods]
==========================================

Στον παρουσιαστή, όπως και σε κάθε άλλο κώδικα, ο προτιμώμενος τρόπος μεταφοράς εξαρτήσεων είναι η χρήση [του κατασκευαστή |dependency-injection:passing-dependencies#Constructor Injection]. Ωστόσο, εάν ο παρουσιαστής κληρονομεί από έναν κοινό πρόγονο (π.χ. `BasePresenter`), είναι προτιμότερο να χρησιμοποιούνται οι μέθοδοι του `inject*()` σε αυτόν τον πρόγονο. Πρόκειται για μια ειδική περίπτωση ενός setter, όπου η μέθοδος αρχίζει με πρόθεμα `inject`. Αυτό συμβαίνει επειδή κρατάμε τον κατασκευαστή ελεύθερο για τους απογόνους:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

Η βασική διαφορά από έναν setter είναι ότι η Nette DI καλεί αυτόματα μεθόδους που ονομάζονται με αυτόν τον τρόπο στους παρουσιαστές μόλις δημιουργηθεί το instance, περνώντας σε αυτές όλες τις απαιτούμενες εξαρτήσεις. Ένας παρουσιαστής μπορεί να περιέχει πολλές μεθόδους `inject*()` και κάθε μέθοδος μπορεί να έχει οποιονδήποτε αριθμό παραμέτρων.

Αν περνούσαμε εξαρτήσεις στους προγόνους μέσω των κατασκευαστών τους, θα έπρεπε να πάρουμε τις εξαρτήσεις τους σε όλους τους απογόνους και να τις περάσουμε στο `parent::__construct()`, πράγμα που περιπλέκει τον κώδικα:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // αυτή είναι μια επιπλοκή
		$this->bar = $bar;
	}
}
```

Οι μέθοδοι `inject*()` είναι επίσης χρήσιμες σε περιπτώσεις όπου ο παρουσιαστής [αποτελείται από γνωρίσματα |presenter-traits] και κάθε ένα από αυτά απαιτεί τη δική του εξάρτηση.

Είναι επίσης δυνατή η χρήση του σχολιασμού `@inject`, αλλά είναι σημαντικό να έχετε κατά νου ότι η ενθυλάκωση διακόπτεται.


`Inject` Σημειώσεις .[#toc-inject-annotations]
==============================================

Πρόκειται για αυτόματη μεταβίβαση της εξάρτησης στη δημόσια μεταβλητή μέλος του παρουσιαστή, η οποία σχολιάζεται με το `@inject` στο σχόλιο τεκμηρίωσης. Ο τύπος μπορεί επίσης να καθοριστεί στο σχόλιο τεκμηρίωσης, αν χρησιμοποιείτε PHP μικρότερη της 7.4.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

Από την PHP 8.0, μια ιδιότητα μπορεί να επισημανθεί με ένα χαρακτηριστικό `Inject`:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Και πάλι, η Nette DI θα περάσει αυτόματα εξαρτήσεις στις ιδιότητες που έχουν σημειωθεί με αυτόν τον τρόπο στον παρουσιαστή μόλις δημιουργηθεί η περίπτωση.

Αυτή η μέθοδος έχει τις ίδιες ελλείψεις με τη μετάδοση εξαρτήσεων σε μια δημόσια ιδιότητα. Χρησιμοποιείται στον presenter επειδή δεν περιπλέκει τον κώδικα και απαιτεί ελάχιστη πληκτρολόγηση.


{{sitename: Best Practices}}
