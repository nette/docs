依存性注入（Dependency Injection）とは？
******************************

.[perex]
この章では、アプリケーションを書くときに守るべき基本的なプログラミングの実践方法を紹介します。これらは、クリーンで理解しやすく、保守性の高いコードを書くために必要な基本です。

このルールさえ守れば、ネッテはずっとあなたのそばにいてくれます。ロジックに集中できるよう、ルーティンワークを処理し、できるだけ快適に過ごせるようにします。

ここでご紹介する原理は、とてもシンプルです。何も心配することはありません。


初めてのプログラムを覚えていますか？.[#toc-remember-your-first-program]
-----------------------------------------------------

どのような言語で書かれたかは不明ですが、PHPであれば、おそらく次のような形になるかと思います。

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // prints 24
```

ほんの数行の些細なコードですが、そこには多くの重要な概念が隠されています。変数があること。コードはより小さな単位に分解され、例えば関数となる。入力引数を渡すと、結果を返してくれる。足りないのは、条件とループだけだ。

関数に入力を渡すと結果が返ってくるというのは、数学など他の分野でも使われているよくわかる概念です。

関数にはシグネチャがあり、その名前、パラメータのリストとその型、そして最後に戻り値の型から構成されています。ユーザーとしては、シグネチャに興味があるのであって、通常、内部実装については何も知る必要はない。

さて、ある関数のシグネチャが次のようなものだと想像してください。

```php
function addition(float $x): float
```

パラメータが1つの足し算？それは変だ...。こんなのはどうでしょう？

```php
function addition(): float
```

本当に不思議ですよね。その機能はどのように使われているのでしょうか？

```php
echo addition(); // what does it prints?
```

このようなコードを見て、私たちは混乱します。初心者だけでなく、熟練したプログラマーでさえ、このようなコードは理解できないでしょう。

このような関数の内部はどうなっているのだろうかと思うことはないだろうか。どこで加算器を手に入れるのだろう？おそらく、このように、自分でどうにかして手に入れるのでしょう。

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

その結果、関数本体には他の関数（または静的メソッド）へのバインディングが隠されていることが判明し、実際にアドエンドの由来を知るには、さらに掘り下げる必要がある。


このままではダメだ!.[#toc-not-this-way]
------------------------------

今、見せていただいたデザインは、多くのマイナス要素を含んだエッセンスです。

- 関数のシグネチャがアドエンドの必要がないように見せかけ、私たちを混乱させました。
- 他の2つの数値で計算する関数を作る方法がわからない
- アドエンスをどこに持っていくか、コードを調べる必要がありました。
- 私たちは、隠された束縛を発見した。
- を完全に理解するためには、これらのバインディングも探求する必要があります。

そして、インプットを調達するのも加算機能の仕事なのだろうか？もちろん、そんなことはありません。  足し算の仕事だけです。


このようなコードには遭遇したくないし、書きたくもない。解決策は簡単です。基本に立ち返って、パラメータを使うだけです。


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


ルールその1：渡されるようにする.[#toc-rule-1-let-it-be-passed-to-you]
------------------------------------------------------

最も重要なルールは**関数やクラスが必要とするすべてのデータは、関数やクラスに渡さなければならない**ということです。

どうにかして自分でたどり着けるように、隠れた仕組みを考案するのではなく、単にパラメータを渡すだけでいいのです。隠された方法を考え出すのにかかる時間を節約でき、間違いなくあなたのコードは改善されないでしょう。

このルールにいつも、どこでも従っていれば、隠れたバインディングのないコードへの道を歩むことができます。作者だけでなく、その後に読む人にも理解できるコードへ。関数やクラスのシグネチャからすべてが理解でき、実装の中に隠された秘密を探す必要がないところです。

このテクニックは専門的には**依存性注入**と呼ばれています。そしてそのデータは **dependencies.** と呼ばれています しかしこれは単純なパラメータ渡しであり それ以上のものではありません。

.[note]
デザインパターンである依存性注入と、ツールである「依存性注入コンテナ」を混同しないように、全く別のものにしてください。コンテナについては後ほど説明します。


関数からクラスへ.[#toc-from-functions-to-classes]
-----------------------------------------

そして、クラスはこれとどう関係するのでしょうか？クラスは単純な関数よりも複雑な存在ですが、ルール1がここでも適用されます。[引数を |passing-dependencies]渡す方法が増えただけです。例えば、関数の場合とかなり似ています。

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

または他のメソッドを使用するか、コンストラクタによって直接行う。

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

どちらの例も、依存性注入に完全に準拠している。


実際の事例.[#toc-real-life-examples]
-------------------------------

現実世界では、数字の足し算のクラスは書きません。では、実例の紹介に移ります。

ブログの記事を表すクラス`Article` を用意しましょう。

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// save the article to the database
	}
}
```

となり、使い方は以下のようになります。

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

`save()` メソッドは、データベースのテーブルに記事を保存します。[ |database:] `Article` `Nette\Database\Connection` Nette Databaseを使って[ |database:]このメソッドを実装するのは簡単ですが、1つだけ問題があります。

いろいろな選択肢があるようですね。静的変数でどこかから取得することもできます。あるいは、データベース接続を提供するクラスから継承する。あるいは、[シングルトンを |global-state#Singleton]利用する。あるいは、Laravelで使用されているいわゆるファサード。

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

素晴らしい、問題を解決した。

あるいは、そうしてきたのだろうか。

[ルールその1「渡さ |#rule #1: Let It Be Passed to You]れる」：クラスが必要とする依存関係は、すべて渡されなければならない。もしそうせず、ルールを破ってしまったら、隠れたバインディングに満ちた汚いコードへの道を歩み始め、理解不能になり、その結果、保守や開発に手間のかかるアプリケーションになってしまうからです。

クラス`Article` のユーザーは、メソッド`save()` がどこに記事を保存しているのか分からない。データベースのテーブルの中か？本番と開発、どちらで？そして、これはどのように変更することができるのでしょうか？

ユーザは、`save()` のメソッドがどのように実装されているかを見て、`DB::insert()` のメソッドの用途を見つけなければならない。そのため、このメソッドがどのようにデータベース接続を調達しているのかを知るために、さらに検索しなければならないのです。そして、隠されたバインディングは非常に長い鎖を形成することができます。

隠しバインディング、Laravelファサード、静的変数は、クリーンでよく設計されたコードには決して存在しません。きれいでよく設計されたコードでは、引数は渡されます。

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

さらに実用的なのは、次に見るように、コンストラクタを使うことです。

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

.[note]
経験豊富なプログラマーであれば、`Article` は`save()` メソッドを一切持たず、純粋なデータコンポーネントとし、ストレージは別のリポジトリが担当するべきだと考えているかもしれませんね。これは理にかなっています。しかし、それでは依存性注入というテーマから大きく外れてしまいますし、簡単な例を挙げようとすると、そのようなことになります。

例えば、データベースを必要とするクラスを書く場合、どこからデータベースを取得するかは考えず、渡されたデータベースを使用するようにします。コンストラクタや他のメソッドのパラメータとして渡すとよいでしょう。依存関係を宣言する。クラスのAPIでそれらを公開する。そうすれば、理解しやすく、予測可能なコードを得ることができます。

エラーメッセージを記録するこのクラスはいかがでしょう。

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

どうでしょう、[ルールその1「受け継がせる |#rule #1: Let It Be Passed to You]」は守れたでしょうか？

していないんです。

重要な情報であるログファイルのディレクトリは、クラスが定数から*取得*します。

使用例をご覧ください。

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

実装を知らないで、メッセージがどこに書かれているかという質問に答えられますか？LOG_DIR定数の存在が動作に必要であることを示唆しているのでしょうか？また、別の場所に書き込む2番目のインスタンスを作成することができるでしょうか？確かにそうですね。

クラスを固定しよう。

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

クラスがより明確になり、より設定しやすくなったので、より便利になりました。

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


But I Don't Care!.[#toc-but-i-don-t-care]
-----------------------------------------

*"Articleオブジェクトを作成してsave()を呼び出すと、データベースを扱わず、設定で設定したものに保存されるようにしたいのです。"*

*Loggerを使うときは、メッセージを書いてほしいだけで、どこをどうするかは考えたくないんです。グローバル設定を使わせてください。"*

これらは正しいコメントです。

例として、ニュースレターを配信するクラスを取り上げ、それがどうだったかを記録してみましょう。

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

定数`LOG_DIR` を使用しなくなった拡張版`Logger` では、コンストラクタにファイルパスが必要です。これを解決するにはどうしたらいいのでしょうか？`NewsletterDistributor` クラスは、メッセージがどこに書き込まれるかは気にしません。

解決策は、やはり[ルールその1「渡されるようにする |#rule #1: Let It Be Passed to You]」：クラスが必要とするデータをすべて渡すことです。

そこで、コンストラクタにログへのパスを渡し、そのパスを使って`Logger` オブジェクトを作成するのです?

```php
class NewsletterDistributor
{
	public function __construct(
		private string $file, // ⛔ NOT THIS WAY!
	) {
	}

	public function distribute(): void
	{
		$logger = new Logger($this->file);
```

そのようなことはありません!なぜなら、パスは`NewsletterDistributor` クラスが必要とするデータには属さず、`Logger` が必要だからです。このクラスが必要とするのは、ロガーそのものです。そして、それを渡すことになるのです。

```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger, // ✅
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

`NewsletterDistributor` クラスのシグネチャから、ロギングがその機能の一部であることは明らかです。そして、ロガーを別のものに置き換えるという作業は、おそらくテスト目的であれば、非常に些細なことです。
さらに、`Logger` クラスのコンストラクタが変更されても、私たちのクラスには何の影響もない。


ルールその2：自分のものは自分で取る.[#toc-rule-2-take-what-is-yours]
---------------------------------------------------

惑わされずに、依存関係のパラメータを渡さないようにしましょう。依存関係を直接渡す。

これにより、他のオブジェクトを使用するコードは、そのコンストラクタの変更に完全に依存しなくなります。そのAPIはより真実に近いものになるでしょう。そして最も重要なことは、これらの依存関係を他のものと交換することが簡単にできるようになることです。


新しい家族の一員.[#toc-a-new-member-of-the-family]
------------------------------------------

開発チームは、データベースに書き込む2つ目のロガーを作成することにしました。そこで、`DatabaseLogger` というクラスを作成しました。つまり、`Logger` と`DatabaseLogger` という2つのクラスがあり、1つはファイルに書き込み、もう1つはデータベースに書き込む...この名前、何か変だと思いませんか？
`Logger` を`FileLogger` に改名したほうがいいのでは？そうですね。

でも、スマートにやりましょう。元の名前でインターフェイスを作ることにします。

```php
interface Logger
{
	function log(string $message): void;
}
```

...両ロガーが実施すること。

```php
class FileLogger implements Logger
// ...

class DatabaseLogger implements Logger
// ...
```

そして、この方法では、ロガーが使用される残りのコードでは何も変更する必要がありません。例えば、`NewsletterDistributor` クラスのコンストラクタは、`Logger` をパラメータとして要求することで、満足することができます。そして、どのインスタンスを渡すかは、私たち次第です。

**インターフェイス名に接尾辞`Interface` や接頭辞 `I` をつけないのはこのためです。** さもなければ、このようにきれいにコードを開発することは不可能です。


ヒューストン、問題が発生した.[#toc-houston-we-have-a-problem]
-----------------------------------------------

アプリケーション全体では、ファイルであれデータベースであれ、ロガーのインスタンスが1つあれば満足で、何かが記録される場所にはそれを渡すだけですが、`Article` クラスの場合は全く違います。実際、必要に応じてインスタンスを作成し、場合によっては複数回作成します。コンストラクタでデータベースのバインディングをどのように扱うか？

例として、フォームを送信した後に記事をデータベースに保存するコントローラを使用することができます。

```php
class EditController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

コンストラクタで渡されるデータベースオブジェクトを`EditController` 、`$article = new Article($this->db)` を使用する、という解決策が直接提示されます。

先ほどの`Logger` とファイルパスの場合と同様に、これは正しいアプローチではありません。データベースは`EditController` の依存関係ではなく、`Article` の依存関係です。したがって、データベースを渡すことは[ルール2「自分のものを取る |#rule #2: take what is yours]」に反します。`Article` クラスのコンストラクタを変更する（新しいパラメータを追加する）と、インスタンスが生成されるすべての場所のコードも変更する必要があります。ウフフ。

ヒューストン、何を言いたいんだ？


ルールその3：工場に任せる.[#toc-rule-3-let-the-factory-handle-it]
-----------------------------------------------------

隠しバインディングを取り除き、すべての依存関係を引数として渡すことで、より設定可能で柔軟なクラスを手に入れることができます。そこで、より柔軟なクラスを作成・設定するために、別のものが必要になります。それをファクトリーと呼ぶことにします。

経験則では、クラスに依存性がある場合、そのインスタンスの作成はファクトリーに任せます。

ファクトリーは、依存性注入の世界では、`new` 演算子に代わる、よりスマートな存在です。

.[note]
ファクトリーメソッド*デザインパターンと混同しないようにご注意ください。


工場.[#toc-factory]
-----------------

ファクトリーとは、オブジェクトを生産し設定するメソッドやクラスのことです。`Article` プロデュースクラス`ArticleFactory` と呼びますが、次のようになる可能性があります。

```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

コントローラーでの使い方は次のようになります。

```php
class EditController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// let the factory create an object
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

この時点で、`Article` クラスのコンストラクタのシグネチャが変更された場合、対応する必要があるのは`ArticleFactory` ファクトリ自身だけです。`EditController` など、`Article` オブジェクトを扱う他のコードは影響を受けません。

今、あなたは、自分たちが役に立ったのだろうかと、額を叩いているかもしれません。コードの量は増え、全体が怪しく複雑に見えてきました。

心配しないでください、すぐにNette DIコンテナを紹介します。このコンテナには、依存性注入を使ったアプリケーションを非常に簡単に構築するためのエースがいくつも用意されています。例えば、`ArticleFactory` クラスの代わりに、[シンプルなインターフェイスを書 |factory]けば十分です。

```php
interface ArticleFactory
{
	function create(): Article;
}
```

でも、先走りすぎです、ちょっと待ってください :-)


概要.[#toc-summary]
-----------------

この章の冒頭で、きれいなコードを設計するための方法を紹介すると約束しました。ただ、クラス

[- 必要とする依存関係 |#Rule #1: Let It Be Passed to You]
[- 直接的に必要なものでない |#Rule #2: Take What Is Yours]ものは
[- と、依存関係のあるオブジェクトは工場で作るのがベスト |#Rule #3: Let the Factory Handle it]であること

一見するとそう見えないかもしれませんが、この3つのルールは広範囲に影響を及ぼします。コード設計を根本から見直すきっかけになるのです。その価値はあるのか？古い習慣を捨て、依存性注入を一貫して使い始めたプログラマは、これを職業生活における極めて重要な瞬間とみなしています。それは、明確で持続可能なアプリケーションの世界を切り開いたのです。

しかし、そのコードが一貫して依存性注入を使用していない場合はどうでしょうか？静的メソッドやシングルトンで構築されていたらどうでしょう？それは何か問題をもたらすのでしょうか？それは[非常に重要な |global-state]ことです。
