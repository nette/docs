Mi az a függőségi injektálás?
*****************************

.[perex]
Ez a fejezet bemutatja azokat az alapvető programozási gyakorlatokat, amelyek az egész Nette keretrendszer alapját képezik, és amelyeket a saját alkalmazásai írásakor követnie kell. Ezek az alapok szükségesek a tiszta, érthető és karbantartható kód írásához.

Ha megtanulja és betartja ezeket a szabályokat, a keretrendszer minden lépésnél a segítségére lesz. El fogja végezni helyetted a rutinfeladatokat, és a lehető legkényelmesebbé teszi, hogy magára a logikára koncentrálhass.

Az elvek, amelyeket itt bemutatunk, meglehetősen egyszerűek. Nincs miért aggódnia.


Emlékszel az első programodra? .[#toc-remember-your-first-program]
------------------------------------------------------------------

Fogalmunk sincs, milyen nyelven írtad, de ha PHP lenne, valószínűleg valahogy így nézne ki:

```php
function osszeg(float $a, float $b): float
{
	return $a + $b;
}

echo osszeg(23, 1); // 24-et ír ki.
```

Néhány triviális kódsor, mégis nagyon sok kulcsfogalom rejtőzik benne. Látjuk, hogy vannak változók. Hogy a kód kisebb egységekre van bontva, amelyek például függvények. Hogy bemeneti argumentumokat adunk át nekik, és eredményeket adnak vissza. Csak a feltételek és a ciklusok hiányoznak.

Az, hogy bemenetet adunk át egy függvénynek, és az visszaad egy eredményt, egy tökéletesen érthető fogalom, amelyet más területeken, például a matematikában is használnak.

Egy függvénynek van egy szignatúrája, amely a nevéből, a paraméterek listájából és azok típusából, végül pedig a visszatérési érték típusából áll. Felhasználóként minket a szignatúra érdekel, a belső megvalósításról általában semmit sem kell tudnunk.

Most képzeljük el, hogy egy függvény szignója így néz ki:

```php
function osszeg(float $x): float
```

Egy összeadás egy paraméterrel? Ez furcsa... Mit szólsz ehhez?

```php
function osszeg(): float
```

Ez tényleg furcsa, nem? Mit gondolsz, hogyan használják a funkciót?

```php
echo osszeg(); // mit ír ki?
```

Ha ilyen kódot nézünk, összezavarodunk. Nem csak egy kezdő nem értené, még egy gyakorlott programozó sem értené az ilyen kódot.

Vajon hogyan nézhet ki egy ilyen függvény valójában belülről? Honnan szerezné meg a kiegészítőket? Valószínűleg *valahogyan* magától kapná meg őket, például így:

```php
function osszeg(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Kiderült, hogy a függvény testében rejtett kötődések vannak más függvényekhez (vagy statikus metódusokhoz), és ahhoz, hogy megtudjuk, honnan származnak valójában az addendumok, tovább kell ásnunk.


Ne erre! .[#toc-not-this-way]
-----------------------------

Az imént bemutatott dizájn sok negatív tulajdonság lényege:

- a függvény aláírás úgy tett, mintha nem lenne szüksége addendumokra, ami összezavart minket.
- fogalmunk sincs, hogyan lehetne a függvényt két másik számmal kiszámítani
- bele kellett néznünk a kódba, hogy lássuk, hova veszi az addendeket
- rejtett kötéseket fedeztünk fel
- a teljes megértéshez ezeket a kötéseket is fel kell tárnunk.

És egyáltalán az összeadási függvény feladata a bemenetek beszerzése? Természetesen nem az.  Az ő feladata csak az összeadás.


Ilyen kóddal nem akarunk találkozni, és biztosan nem akarjuk megírni. A megoldás egyszerű: térjünk vissza az alapokhoz, és használjunk csak paramétereket:


```php
function osszeg(float $a, float $b): float
{
	return $a + $b;
}
```


1. szabály: Paraméterek használata .[#toc-rule-1-use-parameters]
----------------------------------------------------------------

A legfontosabb szabály: **minden adatot, amelyre a függvényeknek vagy osztályoknak szükségük van, át kell adni nekik**.

Ha ezt a szabályt megszegjük, lehetetlen lesz érthetővé, tisztává és fenntarthatóvá tenni a kódot.

Ha betartjuk, akkor úton vagyunk a rejtett korlátok nélküli kód felé. Olyan kód felé, amely nemcsak a szerző számára érthető, hanem bárki számára, aki utólag elolvassa. Ahol minden érthető a függvények és osztályok szignatúrájából, és nem kell rejtett titkokat keresni az implementációban.

Az argumentumok átadásának ezt a technikáját technikailag **függőségi injektálásnak** nevezik.

(Ne keverjük össze a függőségi injektálást a "függőségi injektálás konténerrel"; ez valami gyökeresen más, és a konténerekkel a [következő fejezetben |container] foglalkozunk).


A függvényektől az osztályokig .[#toc-from-functions-to-classes]
----------------------------------------------------------------

És hogyan kapcsolódnak ehhez az osztályok? Egy osztály összetettebb entitás, mint egy egyszerű függvény, de az 1. szabály itt is érvényes. Csak [több módja van az argumentumok átadásának |passing-dependencies]. Például egészen hasonlóan, mint egy függvény esetében:

```php
class Matematika
{
	public function osszeg(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Matematika;
echo $math->osszeg(23, 1); // 24
```

Vagy más metódusok használatával, vagy közvetlenül a konstruktorral:

```php
class Osszeg
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$osszeg = new Osszeg(23, 1);
echo $osszeg->calculate(); // 24
```

Mindkét példa teljesen megfelel a függőségi injektálásnak.


Valós életbeli példák .[#toc-real-life-examples]
------------------------------------------------

A való világban nem fogsz számok összeadására szolgáló osztályokat írni. Térjünk át a valós életből vett példákra.

Legyen egy `Article` osztályunk, amely egy blogcikket reprezentál:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// a cikk elmentése az adatbázisba
	}
}
```

és a használat a következő lesz:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

A `save()` módszer a cikket egy adatbázis-táblában tárolja. A megvalósítás a [Nette Database |database:] segítségével gyerekjáték lenne, ha nem lenne egy bökkenő: honnan szerzi meg a `Article` az adatbázis-kapcsolatot, azaz az osztályobjektumot `Nette\Database\Connection`?

Úgy tűnik, rengeteg lehetőségünk van. Veheti valamilyen statikus változóból. Vagy örökli az osztálytól, amely az adatbázis-kapcsolatot biztosítja. Vagy kihasználja egy úgynevezett singleton előnyeit. Vagy a Laravelben használt úgynevezett facades-t:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Nagyszerű, megoldottuk a problémát.

Vagy mégis?

Emlékezzünk vissza az [1. szabályra: használjunk paramétereket |#rule #1: use parameters]: minden adatot át kell adnunk, amire az osztálynak szüksége van. Mert ha nem tesszük, és megszegjük a szabályt, akkor elindultunk a rejtett kötöttségekkel teli, piszkos kódhoz vezető úton, amely tele van rejtett kötöttségekkel, érthetetlenséggel, és az eredmény egy olyan alkalmazás lesz, amelynek a karbantartása és a fejlesztése csak kínszenvedés.

A `Article` osztály felhasználójának fogalma sincs, hogy a `save()` metódus hol tárolja a cikket. Egy adatbázis táblában? Melyikben, a termelési vagy a fejlesztési? És hogyan lehet ezt megváltoztatni?

A felhasználónak meg kell néznie, hogyan van implementálva a `save()` metódus, hogy megtalálja a `DB::insert()` metódus használatát. Tehát tovább kell keresnie, hogy megtudja, hogyan szerez ez a módszer adatbázis-kapcsolatot. A rejtett kötések pedig elég hosszú láncot alkothatnak.

A rejtett kötések, Laravel fakciók vagy statikus változók soha nincsenek jelen a tiszta, jól megtervezett kódban. A tiszta és jól megtervezett kódban az argumentumok átadásra kerülnek:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Még praktikusabb, ahogy azt a következőkben látni fogjuk, ha konstruktort használunk:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Ha például olyan osztályt írsz, amelyiknek szüksége van egy adatbázisra, ne találd ki, honnan szerezd meg, hanem hagyd, hogy átadják neked. Esetleg egy konstruktor vagy más metódus paramétereként. Deklaráld a függőségeket. Tárd ki őket az osztályod API-jában. Érthető és kiszámítható kódot kapsz.

Mit szólsz ehhez az osztályhoz, amely hibaüzeneteket naplóz:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Mit gondolsz, betartottuk az [1. szabályt: használjunk paramétereket |#rule #1: use parameters]?

Nem követtük.

Az osztály egy konstansból *kapja* a kulcsinformációt, a naplófájlt tartalmazó könyvtárat.

Lásd a példahasználatot:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

A megvalósítás ismerete nélkül tudna válaszolni arra a kérdésre, hogy hová íródnak az üzenetek? Azt sugallná, hogy a LOG_DIR konstans létezése szükséges a működéshez? És tudnál-e létrehozni egy második példányt, ami más helyre ír? Természetesen nem.

Javítsuk meg az osztályt:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Az osztály most már sokkal világosabb, jobban konfigurálható és ezért hasznosabb.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


De nem érdekel! .[#toc-but-i-don-t-care]
----------------------------------------

*"Amikor létrehozok egy cikkobjektumot és meghívom a save() parancsot, nem akarok foglalkozni az adatbázissal, csak azt akarom, hogy a konfigurációban beállított adatbázisba mentődjön. "*

*"Amikor a Logger-t használom, csak azt akarom, hogy az üzenet kiírásra kerüljön, és nem akarok foglalkozni azzal, hogy hova. Legyenek a globális beállítások használva. "*

Ezek helyes megjegyzések.

Példaként vegyünk egy olyan osztályt, amely hírleveleket küld ki, és naplózzuk, hogyan ment ez:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Az új `Logger`, amely már nem használja a `LOG_DIR` konstanst, azonban megköveteli a fájl elérési útvonalát a konstruktorban. Hogyan lehet ezt megoldani? A `NewsletterDistributor` osztályt nem érdekli, hogy az üzenetek hova íródnak, csak írni akarja őket.

A megoldás ismét az [1. szabály: használjunk paramétereket |#rule #1: use parameters]: adjunk át neki minden adatot, amire az osztálynak szüksége van.

Tehát átadjuk a napló elérési útvonalát a konstruktornak, amit aztán a `Logger` objektum létrehozásakor használunk? Nem, mert az elérési út nem az az adat, amire a `NewsletterDistributor` osztálynak szüksége van; arra a `Logger` osztálynak van szüksége. Az osztálynak magára a loggerre van szüksége. És ezt fogjuk átadni:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

A `NewsletterDistributor` osztály aláírásaiból egyértelmű, hogy a naplózás része a funkcióinak. És lehetőséged van arra, hogy a naplózót egy másikkal helyettesítsd.

Míg az egész alkalmazásban megelégedhetünk a logger egyetlen példányával, és átadhatjuk azt bárhol, ahol valamit naplózni kell, addig a `Article` osztály esetében ez másképp van. Több példányt is szeretnénk majd létrehozni belőle. Hogyan kezeljük az adatbázis-függőséget a konstruktorban? Példaként vegyünk egy olyan vezérlőt, amelynek egy űrlap elküldése után egy cikket kell elmentenie az adatbázisba:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Egy lehetséges megoldás javasolt: adjuk át az adatbázis-objektumot a konstruktorral a `UserController` címre, és használjuk a `$article = new Article($this->db)` címet.

Az előző esethez hasonlóan ez sem a helyes gyakorlat. Az adatbázis nem `UserController` függőség, hanem `Article` függőség. Ráadásul abban a pillanatban, amikor a `Article` osztály konstruktorát valamilyen módon megváltoztatjuk (új paramétert adunk hozzá), minden olyan helyen, ahol példányokat hozunk létre, módosítani kell a kódot.

A megoldás a gyárak.


2. szabály: Gyárak használata .[#toc-rule-2-use-factories]
----------------------------------------------------------

A rejtett kötések eltávolításával és az összes adat argumentumként való átadásával sokkal konfigurálhatóbb és rugalmasabb osztályokat kapunk. Ezért még mindig szükségünk van valamire, amivel létrehozhatjuk és konfigurálhatjuk ezeket a rugalmasabb osztályokat. Ezt nevezzük gyárnak.

Az ökölszabály a következő: ha egy osztály függőségekkel rendelkezik, akkor a példányaik létrehozását bízzuk a gyárra.

A gyárak a `new` operátor okosabb helyettesítői a függőségi injektálás világában.


Gyár .[#toc-factory]
--------------------

A gyár egy olyan osztály, amely objektumokat hoz létre és konfigurál. A `Article` -t előállító gyár neve `ArticleFactory` lesz, és a vezérlőben való használata a következő lesz:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// hagyjuk, hogy a gyár létrehozzon egy objektumot
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

A gyár megvalósítása így nézhet ki:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Ekkor, amikor az osztály konstruktorának `Article` aláírása megváltozik, a kód egyetlen része, amelynek erre reagálnia kell, a gyár `ArticleFactory`. Minden más, a `Article` objektumokkal dolgozó kódot, például a `UserController`, ez nem érinti.

Lehet, hogy most a homlokodat kopogtatod, és azon tűnődsz, hogy tulajdonképpen hogyan segítettünk magunkon. A kód mennyisége megnőtt, és a vezérlőből egy külön osztályba költözött. A Nette DI-nek azonban van egy rejtett ász a tarsolyában. Érti a gyárak fogalmát, és még [egy ilyen szolgáltatást |factory] is képes [megírni nekünk |factory]. Így a `ArticleFactory` osztály helyett egyszerűen létrehozhatunk egy interfészt:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

De most egy kicsit előreszaladtunk, erre mindjárt rátérünk.


Összefoglaló .[#toc-summary]
----------------------------

A fejezet elején azt ígértük, hogy bemutatjuk az alkalmazások tervezésének egy egyszerű elvét. Bár maga az elv egyszerű (adjuk meg az osztályoknak a szükséges adatokat), ami belőle következik, az több gondolkodást igényel. Nyugodtan olvassa el ezt a fejezetet többször is.

Azok a programozók, akik kidobták a régi szokásokat, és elkezdték következetesen használni a függőségi injektálást, ezt szakmai életük sorsfordító pillanatának tartják. Világos és fenntartható alkalmazások világát nyitotta meg.

Most megnézzük, mi is az a [Dependency Injection Container |container].
