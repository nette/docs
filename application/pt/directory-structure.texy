Estrutura de diretórios da aplicação
************************************

<div class=perex>

Como projetar uma estrutura de diretórios clara e escalável para projetos no Nette Framework? Mostraremos as melhores práticas que o ajudarão a organizar seu código. Você aprenderá:

- como **dividir logicamente** a aplicação em diretórios
- como projetar a estrutura para que ela **escale bem** com o crescimento do projeto
- quais são as **alternativas possíveis** e suas vantagens ou desvantagens

</div>


É importante mencionar que o próprio Nette Framework não impõe nenhuma estrutura específica. Ele é projetado para ser facilmente adaptável a quaisquer necessidades e preferências.


Estrutura básica do projeto
===========================

Embora o Nette Framework não dite nenhuma estrutura de diretórios fixa, existe uma organização padrão comprovada na forma do [Web Project|https://github.com/nette/web-project]:

/--pre
<b>web-project/</b>
├── <b>app/</b>              ← diretório com a aplicação
├── <b>assets/</b>           ← arquivos SCSS, JS, imagens..., alternativamente resources/
├── <b>bin/</b>              ← scripts para a linha de comando
├── <b>config/</b>           ← configuração
├── <b>log/</b>              ← erros registrados
├── <b>temp/</b>             ← arquivos temporários, cache
├── <b>tests/</b>            ← testes
├── <b>vendor/</b>           ← bibliotecas instaladas pelo Composer
└── <b>www/</b>              ← diretório público (document-root)
\--

Você pode modificar esta estrutura livremente de acordo com suas necessidades - renomear ou mover pastas. Depois, basta apenas ajustar os caminhos relativos aos diretórios no arquivo `Bootstrap.php` e, opcionalmente, `composer.json`. Nada mais é necessário, nenhuma reconfiguração complicada, nenhuma alteração de constantes. O Nette possui uma autodeteção inteligente e reconhece automaticamente a localização da aplicação, incluindo sua base de URL.


Princípios de organização do código
===================================

Quando você explora um novo projeto pela primeira vez, deve conseguir se orientar rapidamente nele. Imagine que você abre o diretório `app/Model/` e vê esta estrutura:

/--pre
<b>app/Model/</b>
├── <b>Services/</b>
├── <b>Repositories/</b>
└── <b>Entities/</b>
\--

A partir dela, você só pode deduzir que o projeto usa alguns serviços, repositórios e entidades. Você não aprenderá nada sobre o propósito real da aplicação.

Vejamos outra abordagem - **organização por domínios**:

/--pre
<b>app/Model/</b>
├── <b>Cart/</b>
├── <b>Payment/</b>
├── <b>Order/</b>
└── <b>Product/</b>
\--

Aqui é diferente - à primeira vista, fica claro que se trata de uma loja virtual. Os próprios nomes dos diretórios revelam o que a aplicação faz - trabalha com pagamentos, pedidos e produtos.

A primeira abordagem (organização por tipo de classe) traz na prática uma série de problemas: o código que está logicamente relacionado é fragmentado em diferentes pastas e você precisa pular entre elas. Portanto, organizaremos por domínios.


Namespaces
----------

É costume que a estrutura de diretórios corresponda aos namespaces na aplicação. Isso significa que a localização física dos arquivos corresponde ao seu namespace. Por exemplo, uma classe localizada em `app/Model/Product/ProductRepository.php` deve ter o namespace `App\Model\Product`. Este princípio ajuda na orientação no código e simplifica o autoloading.


Singular vs. plural nos nomes
-----------------------------

Observe que para os diretórios principais da aplicação usamos o singular: `app`, `config`, `log`, `temp`, `www`. O mesmo vale para o interior da aplicação: `Model`, `Core`, `Presentation`. Isso ocorre porque cada um deles representa um conceito coeso.

Da mesma forma, por exemplo, `app/Model/Product` representa tudo relacionado a produtos. Não o chamaremos de `Products`, porque não é uma pasta cheia de produtos (isso significaria que haveria arquivos `nokia.php`, `samsung.php`). É um namespace contendo classes para trabalhar com produtos - `ProductRepository.php`, `ProductService.php`.

A pasta `app/Tasks` está no plural porque contém um conjunto de scripts executáveis independentes - `CleanupTask.php`, `ImportTask.php`. Cada um deles é uma unidade separada.

Para consistência, recomendamos usar:
- Singular para namespaces que representam uma unidade funcional (mesmo que trabalhe com múltiplas entidades)
- Plural para coleções de unidades independentes
- Em caso de incerteza ou se você não quiser pensar sobre isso, escolha o singular


Diretório público `www/`
========================

Este diretório é o único acessível pela web (o chamado document-root). Frequentemente, você pode encontrar o nome `public/` em vez de `www/` - é apenas uma questão de convenção e não afeta a funcionalidade do Nette. O diretório contém:
- [Ponto de entrada |bootstrap#index.php] da aplicação `index.php`
- Arquivo `.htaccess` com regras para mod_rewrite (no Apache)
- Arquivos estáticos (CSS, JavaScript, imagens)
- Arquivos carregados (uploads)

Para a segurança adequada da aplicação, é crucial ter o [document-root configurado corretamente |nette:troubleshooting#Jak změnit či ostranit z URL adresář www].

.[note]
Nunca coloque a pasta `node_modules/` neste diretório - ela contém milhares de arquivos que podem ser executáveis e não devem estar publicamente acessíveis.


Diretório da aplicação `app/`
=============================

Este é o diretório principal com o código da aplicação. Estrutura básica:

/--pre
<b>app/</b>
├── <b>Core/</b>               ← questões de infraestrutura
├── <b>Model/</b>              ← lógica de negócios
├── <b>Presentation/</b>       ← presenters e templates
├── <b>Tasks/</b>              ← scripts de comando
└── <b>Bootstrap.php</b>       ← classe de inicialização da aplicação
\--

`Bootstrap.php` é a [classe de inicialização da aplicação|bootstrap], que inicializa o ambiente, carrega a configuração e cria o contêiner DI.

Vamos agora examinar os subdiretórios individuais com mais detalhes.


Presenters e templates
======================

A parte de apresentação da aplicação está no diretório `app/Presentation`. Uma alternativa é o curto `app/UI`. É o local para todos os presenters, seus templates e quaisquer classes auxiliares.

Organizamos esta camada por domínios. Em um projeto complexo que combina uma loja virtual, um blog e uma API, a estrutura seria assim:

/--pre
<b>app/Presentation/</b>
├── <b>Shop/</b>              ← frontend da loja virtual
│   ├── <b>Product/</b>
│   ├── <b>Cart/</b>
│   └── <b>Order/</b>
├── <b>Blog/</b>              ← blog
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← administração
│   ├── <b>Dashboard/</b>
│   └── <b>Products/</b>
└── <b>Api/</b>               ← endpoints da API
	└── <b>V1/</b>
\--

Por outro lado, para um blog simples, usaríamos a seguinte divisão:

/--pre
<b>app/Presentation/</b>
├── <b>Front/</b>             ← frontend do site
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← administração
│   ├── <b>Dashboard/</b>
│   └── <b>Posts/</b>
├── <b>Error/</b>
└── <b>Export/</b>            ← RSS, sitemaps, etc.
\--

Pastas como `Home/` ou `Dashboard/` contêm presenters e templates. Pastas como `Front/`, `Admin/` ou `Api/` são chamadas de **módulos**. Tecnicamente, são diretórios comuns que servem para a divisão lógica da aplicação.

Cada pasta com um presenter contém um presenter de mesmo nome e seus templates. Por exemplo, a pasta `Dashboard/` contém:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presenter
└── <b>default.latte</b>              ← template
\--

Esta estrutura de diretórios se reflete nos namespaces das classes. Por exemplo, `DashboardPresenter` está localizado no namespace `App\Presentation\Admin\Dashboard` (veja [#mapování presenterů]):

```php
namespace App\Presentation\Admin\Dashboard;

class DashboardPresenter extends Nette\Application\UI\Presenter
{
	// ...
}
```

Referimo-nos ao presenter `Dashboard` dentro do módulo `Admin` na aplicação usando a notação de dois pontos como `Admin:Dashboard`. À sua ação `default`, então, como `Admin:Dashboard:default`. No caso de módulos aninhados, usamos mais dois pontos, por exemplo, `Shop:Order:Detail:default`.


Desenvolvimento flexível da estrutura
-------------------------------------

Uma das grandes vantagens desta estrutura é como ela se adapta elegantemente às necessidades crescentes do projeto. Como exemplo, vejamos a parte que gera feeds XML. No início, temos uma forma simples:

/--pre
<b>Export/</b>
├── <b>ExportPresenter.php</b>   ← um presenter para todas as exportações
├── <b>sitemap.latte</b>         ← template para o sitemap
└── <b>feed.latte</b>            ← template para o feed RSS
\--

Com o tempo, mais tipos de feeds são adicionados e precisamos de mais lógica para eles... Sem problemas! A pasta `Export/` simplesmente se torna um módulo:

/--pre
<b>Export/</b>
├── <b>Sitemap/</b>
│   ├── <b>SitemapPresenter.php</b>
│   └── <b>sitemap.latte</b>
└── <b>Feed/</b>
	├── <b>FeedPresenter.php</b>
	├── <b>zbozi.latte</b>         ← feed para Zboží.cz
	└── <b>heureka.latte</b>       ← feed para Heureka.cz
\--

Esta transformação é completamente fluida - basta criar novas subpastas, dividir o código nelas e atualizar os links (por exemplo, de `Export:feed` para `Export:Feed:zbozi`). Graças a isso, podemos expandir gradualmente a estrutura conforme necessário, o nível de aninhamento não é limitado de forma alguma.

Se, por exemplo, na administração você tiver muitos presenters relacionados ao gerenciamento de pedidos, como `OrderDetail`, `OrderEdit`, `OrderDispatch`, etc., você pode criar um módulo (pasta) `Order` neste local para melhor organização, que conterá (pastas para) os presenters `Detail`, `Edit`, `Dispatch` e outros.


Localização dos templates
-------------------------

Nos exemplos anteriores, vimos que os templates estão localizados diretamente na pasta com o presenter:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presenter
├── <b>DashboardTemplate.php</b>      ← classe opcional para o template
└── <b>default.latte</b>              ← template
\--

Esta localização se mostra na prática a mais conveniente - todos os arquivos relacionados estão à mão.

Alternativamente, você pode colocar os templates em uma subpasta `templates/`. O Nette suporta ambas as variantes. Você pode até colocar os templates completamente fora da pasta `Presentation/`. Tudo sobre as opções de localização de templates pode ser encontrado no capítulo [Procurando templates|templates#Hledání šablon].


Classes auxiliares e componentes
--------------------------------

Frequentemente, presenters e templates são acompanhados por outros arquivos auxiliares. Nós os colocamos logicamente de acordo com seu escopo:

1. **Diretamente com o presenter** no caso de componentes específicos para esse presenter:

/--pre
<b>Product/</b>
├── <b>ProductPresenter.php</b>
├── <b>ProductGrid.php</b>        ← componente para listagem de produtos
└── <b>FilterForm.php</b>         ← formulário para filtragem
\--

2. **Para o módulo** - recomendamos usar a pasta `Accessory`, que é colocada de forma clara no início do alfabeto:

/--pre
<b>Front/</b>
├── <b>Accessory/</b>
│   ├── <b>NavbarControl.php</b>    ← componentes para o frontend
│   └── <b>TemplateFilters.php</b>
├── <b>Product/</b>
└── <b>Cart/</b>
\--

3. **Para toda a aplicação** - em `Presentation/Accessory/`:
/--pre
<b>app/Presentation/</b>
├── <b>Accessory/</b>
│   ├── <b>LatteExtension.php</b>
│   └── <b>TemplateFilters.php</b>
├── <b>Front/</b>
└── <b>Admin/</b>
\--

Ou você pode colocar classes auxiliares como `LatteExtension.php` ou `TemplateFilters.php` na pasta de infraestrutura `app/Core/Latte/`. E componentes em `app/Components`. A escolha depende dos costumes da equipe.


Model - o coração da aplicação
==============================

O Model contém toda a lógica de negócios da aplicação. Para sua organização, a regra se aplica novamente - estruturamos por domínios:

/--pre
<b>app/Model/</b>
├── <b>Payment/</b>                   ← tudo sobre pagamentos
│   ├── <b>PaymentFacade.php</b>      ← ponto de entrada principal
│   ├── <b>PaymentRepository.php</b>
│   ├── <b>Payment.php</b>            ← entidade
├── <b>Order/</b>                     ← tudo sobre pedidos
│   ├── <b>OrderFacade.php</b>
│   ├── <b>OrderRepository.php</b>
│   ├── <b>Order.php</b>
└── <b>Shipping/</b>                  ← tudo sobre envio
\--

No model, você normalmente encontrará estes tipos de classes:

**Facades**: representam o ponto de entrada principal para um domínio específico na aplicação. Atuam como um orquestrador que coordena a cooperação entre diferentes serviços para implementar casos de uso completos (como "criar pedido" ou "processar pagamento"). Sob sua camada de orquestração, a facade esconde os detalhes de implementação do resto da aplicação, fornecendo assim uma interface limpa para trabalhar com o domínio dado.

```php
class OrderFacade
{
	public function createOrder(Cart $cart): Order
	{
		// validação
		// criação do pedido
		// envio de e-mail
		// registro nas estatísticas
	}
}
```

**Serviços**: focam em uma operação de negócios específica dentro do domínio. Ao contrário da facade, que orquestra casos de uso inteiros, um serviço implementa lógica de negócios específica (como cálculos de preços ou processamento de pagamentos). Os serviços são tipicamente sem estado e podem ser usados por facades como blocos de construção para operações mais complexas, ou diretamente por outras partes da aplicação para tarefas mais simples.

```php
class PricingService
{
	public function calculateTotal(Order $order): Money
	{
		// cálculo do preço
	}
}
```

**Repositórios**: garantem toda a comunicação com o armazenamento de dados, tipicamente um banco de dados. Sua tarefa é carregar e salvar entidades e implementar métodos para sua busca. O repositório isola o resto da aplicação dos detalhes de implementação do banco de dados e fornece uma interface orientada a objetos para trabalhar com dados.

```php
class OrderRepository
{
	public function find(int $id): ?Order
	{
	}

	public function findByCustomer(int $customerId): array
	{
	}
}
```

**Entidades**: objetos que representam os principais conceitos de negócios na aplicação, que têm sua identidade e mudam ao longo do tempo. Tipicamente, são classes mapeadas para tabelas de banco de dados usando ORM (como Nette Database Explorer ou Doctrine). As entidades podem conter regras de negócios relacionadas aos seus dados e lógica de validação.

```php
// Entidade mapeada para a tabela de banco de dados orders
class Order extends Nette\Database\Table\ActiveRow
{
	public function addItem(Product $product, int $quantity): void
	{
		$this->related('order_items')->insert([
			'product_id' => $product->id,
			'quantity' => $quantity,
			'unit_price' => $product->price,
		]);
	}
}
```

**Value objects**: objetos imutáveis que representam valores sem identidade própria - por exemplo, um valor monetário ou um endereço de e-mail. Duas instâncias de um value object com os mesmos valores são consideradas idênticas.


Código de infraestrutura
========================

A pasta `Core/` (ou também `Infrastructure/`) é o lar da base técnica da aplicação. O código de infraestrutura normalmente inclui:

/--pre
<b>app/Core/</b>
├── <b>Router/</b>               ← roteamento e gerenciamento de URL
│   └── <b>RouterFactory.php</b>
├── <b>Security/</b>             ← autenticação e autorização
│   ├── <b>Authenticator.php</b>
│   └── <b>Authorizator.php</b>
├── <b>Logging/</b>              ← logging e monitoramento
│   ├── <b>SentryLogger.php</b>
│   └── <b>FileLogger.php</b>
├── <b>Cache/</b>                ← camada de cache
│   └── <b>FullPageCache.php</b>
└── <b>Integration/</b>          ← integração com serviços ext.
	├── <b>Slack/</b>
	└── <b>Stripe/</b>
\--

Para projetos menores, uma estrutura plana é obviamente suficiente:

/--pre
<b>Core/</b>
├── <b>RouterFactory.php</b>
├── <b>Authenticator.php</b>
└── <b>QueueMailer.php</b>
\--

É o código que:

- Lida com a infraestrutura técnica (roteamento, logging, cache)
- Integra serviços externos (Sentry, Elasticsearch, Redis)
- Fornece serviços básicos para toda a aplicação (e-mail, banco de dados)
- É geralmente independente do domínio específico - cache ou logger funciona da mesma forma para uma loja virtual ou blog.

Está em dúvida se uma determinada classe pertence aqui ou ao model? A diferença crucial é que o código em `Core/`:

- Não sabe nada sobre o domínio (produtos, pedidos, artigos)
- Geralmente pode ser transferido para outro projeto
- Lida com "como funciona" (como enviar um e-mail), não "o que faz" (qual e-mail enviar)

Exemplo para melhor compreensão:

- `App\Core\MailerFactory` - cria instâncias da classe para envio de e-mails, lida com configurações SMTP
- `App\Model\OrderMailer` - usa `MailerFactory` para enviar e-mails sobre pedidos, conhece seus templates e sabe quando devem ser enviados


Scripts de comando
==================

Aplicações frequentemente precisam executar atividades fora das requisições HTTP normais - seja processamento de dados em segundo plano, manutenção ou tarefas periódicas. Scripts simples no diretório `bin/` são usados para execução, enquanto a lógica de implementação é colocada em `app/Tasks/` (ou `app/Commands/`).

Exemplo:

/--pre
<b>app/Tasks/</b>
├── <b>Maintenance/</b>               ← scripts de manutenção
│   ├── <b>CleanupCommand.php</b>     ← exclusão de dados antigos
│   └── <b>DbOptimizeCommand.php</b>  ← otimização do banco de dados
├── <b>Integration/</b>               ← integração com sistemas externos
│   ├── <b>ImportProducts.php</b>     ← importação do sistema do fornecedor
│   └── <b>SyncOrders.php</b>         ← sincronização de pedidos
└── <b>Scheduled/</b>                 ← tarefas agendadas
	├── <b>NewsletterCommand.php</b>  ← envio de newsletters
	└── <b>ReminderCommand.php</b>    ← notificações para clientes
\--

O que pertence ao model e o que pertence aos scripts de comando? Por exemplo, a lógica para enviar um único e-mail faz parte do model, o envio em massa de milhares de e-mails já pertence a `Tasks/`.

As tarefas são geralmente [executadas a partir da linha de comando |https://blog.nette.org/cs/cli-skripty-v-nette-aplikaci] ou via cron. Elas também podem ser executadas via requisição HTTP, mas é necessário pensar na segurança. O presenter que inicia a tarefa precisa ser protegido, por exemplo, apenas para usuários logados ou com um token forte e acesso de endereços IP permitidos. Para tarefas longas, é necessário aumentar o limite de tempo do script e usar `session_write_close()` para não bloquear a sessão.


Outros diretórios possíveis
===========================

Além dos diretórios básicos mencionados, você pode adicionar outras pastas especializadas de acordo com as necessidades do projeto. Vejamos as mais comuns e seus usos:

/--pre
<b>app/</b>
├── <b>Api/</b>              ← lógica para API independente da camada de apresentação
├── <b>Database/</b>         ← scripts de migração e seeders para dados de teste
├── <b>Components/</b>       ← componentes visuais compartilhados em toda a aplicação
├── <b>Event/</b>            ← útil se você usa arquitetura orientada a eventos
├── <b>Mail/</b>             ← templates de e-mail e lógica relacionada
└── <b>Utils/</b>            ← classes auxiliares
\--

Para componentes visuais compartilhados usados em presenters em toda a aplicação, a pasta `app/Components` ou `app/Controls` pode ser usada:

/--pre
<b>app/Components/</b>
├── <b>Form/</b>                 ← componentes de formulário compartilhados
│   ├── <b>SignInForm.php</b>
│   └── <b>UserForm.php</b>
├── <b>Grid/</b>                 ← componentes para listagens de dados
│   └── <b>DataGrid.php</b>
└── <b>Navigation/</b>           ← elementos de navegação
	├── <b>Breadcrumbs.php</b>
	└── <b>Menu.php</b>
\--

Aqui pertencem componentes que têm lógica mais complexa. Se você deseja compartilhar componentes entre vários projetos, é aconselhável extraí-los para um pacote composer separado.

No diretório `app/Mail`, você pode colocar o gerenciamento da comunicação por e-mail:

/--pre
<b>app/Mail/</b>
├── <b>templates/</b>            ← templates de e-mail
│   ├── <b>order-confirmation.latte</b>
│   └── <b>welcome.latte</b>
└── <b>OrderMailer.php</b>
\--


Mapeamento de presenters
========================

O mapeamento define regras para derivar o nome da classe a partir do nome do presenter. Especificamo-las na [configuração|configuration] sob a chave `application › mapping`.

Nesta página, mostramos que colocamos os presenters na pasta `app/Presentation` (ou `app/UI`). Precisamos informar esta convenção ao Nette no arquivo de configuração. Basta uma linha:

```neon
application:
	mapping: App\Presentation\*\**Presenter
```

Como funciona o mapeamento? Para melhor compreensão, imaginemos primeiro uma aplicação sem módulos. Queremos que as classes dos presenters caiam no namespace `App\Presentation`, para que o presenter `Home` seja mapeado para a classe `App\Presentation\HomePresenter`. O que conseguimos com esta configuração:

```neon
application:
	mapping: App\Presentation\*Presenter
```

O mapeamento funciona de forma que o nome do presenter `Home` substitui o asterisco na máscara `App\Presentation\*Presenter`, resultando no nome final da classe `App\Presentation\HomePresenter`. Simples!

Mas, como você pode ver nos exemplos neste e em outros capítulos, colocamos as classes dos presenters em subdiretórios homônimos, por exemplo, o presenter `Home` é mapeado para a classe `App\Presentation\Home\HomePresenter`. Conseguimos isso duplicando os dois pontos (requer Nette Application 3.2):

```neon
application:
	mapping: App\Presentation\**Presenter
```

Agora vamos mapear presenters para módulos. Para cada módulo, podemos definir um mapeamento específico:

```neon
application:
	mapping:
		Front: App\Presentation\Front\**Presenter
		Admin: App\Presentation\Admin\**Presenter
		Api: App\Api\*Presenter
```

De acordo com esta configuração, o presenter `Front:Home` é mapeado para a classe `App\Presentation\Front\Home\HomePresenter`, enquanto o presenter `Api:OAuth` para a classe `App\Api\OAuthPresenter`.

Como os módulos `Front` e `Admin` têm um método de mapeamento semelhante e provavelmente haverá mais módulos assim, é possível criar uma regra geral que os substitua. Um novo asterisco para o módulo é adicionado à máscara da classe:

```neon
application:
	mapping:
		*: App\Presentation\*\**Presenter
		Api: App\Api\*Presenter
```

Isso também funciona para estruturas de diretórios mais profundamente aninhadas, como, por exemplo, o presenter `Admin:User:Edit`, o segmento com asterisco se repete para cada nível e o resultado é a classe `App\Presentation\Admin\User\Edit\EditPresenter`.

Uma notação alternativa é usar um array composto por três segmentos em vez de uma string. Esta notação é equivalente à anterior:

```neon
application:
	mapping:
		*: [App\Presentation, *, **Presenter]
		Api: [App\Api, '', *Presenter]
```
