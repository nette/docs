Passage des dépendances
***********************
<div class=perex>


Les arguments, ou "dépendances" dans la terminologie DI, peuvent être transmis aux classes de la manière suivante :

* passage par constructeur
* en passant par une méthode (appelée setter)
* en définissant une propriété
* par méthode, annotation ou attribut *injecter*.

</div>

Les trois premières méthodes s'appliquent en général dans tous les langages orientés objet, la quatrième est spécifique aux présentateurs Nette, elle est donc traitée dans un [chapitre séparé |best-practices:inject-method-attribute]. Nous allons maintenant examiner de plus près chacune de ces options et les montrer à l'aide d'exemples spécifiques.


Injection de constructeur .[#toc-constructor-injection]
=======================================================

Les dépendances sont transmises comme arguments au constructeur lors de la création de l'objet :

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Cette forme est utile pour les dépendances obligatoires dont la classe a absolument besoin pour fonctionner, car sans elles, l'instance ne peut être créée.

Depuis PHP 8.0, nous pouvons utiliser une forme plus courte de notation qui est fonctionnellement équivalente :

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

Depuis PHP 8.1, une propriété peut être marquée avec un drapeau `readonly` qui déclare que le contenu de la propriété ne changera pas :

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Le conteneur DI passe les dépendances au constructeur automatiquement en utilisant le [câblage automatique |autowiring]. Les arguments qui ne peuvent pas être passés de cette façon (par exemple, les chaînes de caractères, les nombres, les booléens) [s'écrivent dans la configuration |services#Arguments].


Injection de setter .[#toc-setter-injection]
============================================

Les dépendances sont transmises en appelant une méthode qui les stocke dans une propriété privée. La convention de dénomination habituelle de ces méthodes est de la forme `set*()`, c'est pourquoi elles sont appelées setters.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Cette méthode est utile pour les dépendances facultatives qui ne sont pas nécessaires au fonctionnement de la classe, car il n'est pas garanti que l'objet les recevra effectivement (c'est-à-dire que l'utilisateur appellera la méthode).

En même temps, cette méthode permet d'appeler le setter à plusieurs reprises pour modifier la dépendance. Si cela n'est pas souhaitable, ajoutez une vérification à la méthode, ou à partir de PHP 8.1, marquez la propriété `$cache` avec le drapeau `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

L'appel au setter est défini dans la configuration du conteneur DI dans la [section setup |services#Setup]. Ici aussi, le passage automatique des dépendances est utilisé par autowiring :

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Injection de propriétés .[#toc-property-injection]
==================================================

Les dépendances sont transmises directement à la propriété :

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Cette méthode est considérée comme inappropriée car la propriété doit être déclarée comme `public`. Par conséquent, nous n'avons aucun contrôle sur le fait que la dépendance passée sera effectivement du type spécifié (c'était vrai avant PHP 7.4) et nous perdons la possibilité de réagir à la dépendance nouvellement assignée avec notre propre code, par exemple pour empêcher des changements ultérieurs. En même temps, la propriété devient une partie de l'interface publique de la classe, ce qui n'est pas forcément souhaitable.

Le paramétrage de la variable est défini dans la configuration du conteneur DI dans la [section setup |services#Setup]:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Quelle voie choisir ? .[#toc-which-way-to-choose]
=================================================

- le constructeur convient aux dépendances obligatoires dont la classe a besoin pour fonctionner
- le setter, quant à lui, convient aux dépendances optionnelles, ou aux dépendances qui peuvent être modifiées.
- les variables publiques ne sont pas recommandées
