PHP Reflection
**************

.[perex]
[api:Nette\Utils\Reflection] è una classe statica con funzioni utili per la reflection PHP. Il suo compito è correggere le mancanze delle classi native e unificare il comportamento tra le diverse versioni di PHP.


Installazione:

```shell
composer require nette/utils
```

Tutti gli esempi presuppongono la creazione di un alias:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Verifica se la reflection ha accesso ai commenti PHPdoc. I commenti potrebbero non essere disponibili a causa della cache opcode, vedi ad esempio la direttiva [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Espande il nome della classe `$name` al suo nome completo nel contesto della classe `$context`, ovvero nel contesto del suo namespace e degli alias definiti. Quindi, in pratica, dice come il parser PHP capirebbe `$name` se fosse scritto nel corpo della classe `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Restituisce la reflection del metodo che contiene la dichiarazione del metodo `$method`. Di solito, ogni metodo è la propria dichiarazione, ma il corpo del metodo può trovarsi anche in un trait e con un nome diverso.

Poiché PHP non fornisce informazioni sufficienti per determinare la dichiarazione effettiva, Nette utilizza una propria euristica che **dovrebbe essere** affidabile.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Restituisce la reflection della classe o del trait che contiene la dichiarazione della proprietà `$prop`. La proprietà, infatti, può essere dichiarata anche in un trait.

Poiché PHP non fornisce informazioni sufficienti per determinare la dichiarazione effettiva, Nette utilizza una propria euristica che **non è** affidabile.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Verifica se `$type` è un tipo built-in di PHP. Altrimenti, è un nome di classe.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Utilizzare [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Converte una reflection in una stringa comprensibile all'uomo.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
