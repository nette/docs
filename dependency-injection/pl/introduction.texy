Co to jest Dependency Injection?
********************************

.[perex]
Ten rozdział wprowadza Cię w podstawowe praktyki programistyczne, których powinieneś przestrzegać podczas pisania jakiejkolwiek aplikacji. Są to podstawy wymagane do pisania czystego, zrozumiałego i możliwego do utrzymania kodu.

Jeśli poznasz te zasady i będziesz ich przestrzegał, Nette będzie cię wspierać na każdym kroku. Będzie obsługiwał rutynowe zadania za Ciebie i sprawi, że będziesz tak wygodny, jak to tylko możliwe, abyś mógł skupić się na samej logice.

Zasady, które tu pokażemy, są dość proste. Nie masz się o co martwić.


Pamiętasz swój pierwszy program? .[#toc-remember-your-first-program]
--------------------------------------------------------------------

Nie mamy pojęcia w jakim języku go napisałeś, ale jeśli był to PHP, to prawdopodobnie wyglądałby coś takiego:

```php
function suma(float $a, float $b): float
{
	return $a + $b;
}

echo suma(23, 1); // wykazy 24
```

Kilka banalnych linii kodu, ale tak wiele kluczowych pojęć w nich ukrytych. To, że istnieją zmienne. Że kod jest rozbity na mniejsze jednostki, którymi są na przykład funkcje. Że przekazujemy im argumenty wejściowe, a one zwracają wyniki. Brakuje tylko warunków i pętli.

To, że przekazujemy dane wejściowe do funkcji i ona zwraca wynik, jest doskonale zrozumiałym pojęciem, które jest wykorzystywane w innych dziedzinach, np. w matematyce.

Funkcja ma sygnaturę, która składa się z jej nazwy, listy parametrów i ich typów, wreszcie typu zwracanej wartości. Jako użytkowników interesuje nas sygnatura; zwykle nie musimy wiedzieć nic o wewnętrznej implementacji.

Teraz wyobraź sobie, że sygnatura funkcji wygląda tak:

```php
function suma(float $x): float
```

Dodawanie z jednym parametrem? To dziwne... A może tak?

```php
function suma(): float
```

To jest naprawdę dziwne, prawda? Jak myślisz, w jaki sposób ta funkcja jest wykorzystywana?

```php
echo suma(); // co wypisuje?
```

Patrząc na taki kod, jesteśmy zdezorientowani. Nie tylko początkujący nie zrozumie go, nawet wprawny programista nie zrozumie takiego kodu.

Zastanawiasz się, jak taka funkcja wyglądałaby w rzeczywistości w środku? Skąd wzięłaby dodawarki? Zapewne zdobywałaby je *jakoś* samodzielnie, np. w ten sposób:

```php
function suma(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Okazuje się, że w ciele funkcji znajdują się ukryte wiązania do innych funkcji (lub metod statycznych), a żeby dowiedzieć się, skąd tak naprawdę pochodzą addytywy, musimy kopać dalej.


Nie tędy droga! .[#toc-not-this-way]
------------------------------------

Projekt, który właśnie nam pokazano, jest esencją wielu negatywnych cech:

- sygnatura funkcji udawała, że nie potrzebuje dopełnień, co nas zmyliło
- nie mamy pojęcia, jak sprawić, żeby funkcja obliczała z dwoma innymi liczbami
- musieliśmy zajrzeć do kodu, żeby zobaczyć, skąd bierze addytywność
- odkryliśmy ukryte wiązania
- aby w pełni zrozumieć, musimy zbadać również te wiązania

A czy zadaniem funkcji dodawania jest w ogóle pozyskiwanie wejść? Oczywiście, że nie.  Jej zadaniem jest tylko dodawanie.


Nie chcemy spotkać takiego kodu, a już na pewno nie chcemy go pisać. Lekarstwo jest proste: wróć do podstaw i po prostu używaj parametrów:


```php
function suma(float $a, float $b): float
{
	return $a + $b;
}
```


Zasada #1: Niech ci to zostanie przekazane .[#toc-rule-1-let-it-be-passed-to-you]
---------------------------------------------------------------------------------

Najważniejszą zasadą jest: **wszystkie dane, których potrzebują funkcje lub klasy, muszą być do nich przekazane**.

Zamiast wymyślać ukryte mechanizmy, dzięki którym w jakiś sposób sami się do nich dostaną, po prostu przekaż im parametry. Zaoszczędzisz czas potrzebny na wymyślanie ukrytego sposobu, który na pewno nie poprawi twojego kodu.

Jeśli będziesz przestrzegał tej zasady zawsze i wszędzie, jesteś na dobrej drodze do kodu bez ukrytych wiązań. W kierunku kodu, który jest zrozumiały nie tylko dla autora, ale także dla każdego, kto go potem czyta. Gdzie wszystko jest zrozumiałe z sygnatur funkcji i klas i nie ma potrzeby szukania ukrytych sekretów w implementacji.

Ta technika nazywa się fachowo **wstrzykiwaniem zależności**. A dane nazywa się **zależnościami**, ale to zwykłe przekazywanie parametrów, nic więcej.

.[note]
Proszę nie mylić wtrysku zależności, który jest wzorcem projektowym, z "kontenerem wtrysku zależności", który jest narzędziem, czymś zupełnie innym. Kontenery omówimy później.


Od funkcji do klas .[#toc-from-functions-to-classes]
----------------------------------------------------

A jak klasy mają się do tego? Klasa jest bardziej złożonym bytem niż prosta funkcja, ale zasada #1 ma zastosowanie również tutaj. Jest po prostu [więcej sposobów na przekazywanie argumentów |passing-dependencies]. Na przykład, dość podobny do przypadku funkcji:

```php
class Matematika
{
	public function suma(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Matematika;
echo $math->suma(23, 1); // 24
```

Lub poprzez użycie innych metod, lub bezpośrednio przez konstruktora:

```php
class Suma
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function spocti(): float
	{
		return $this->a + $this->b;
	}

}

$suma = new Suma(23, 1);
echo $suma->spocti(); // 24
```

Oba przykłady są całkowicie zgodne z zastrzykiem zależności.


Przykłady z życia wzięte .[#toc-real-life-examples]
---------------------------------------------------

W prawdziwym świecie nie będziesz pisał klas do dodawania liczb. Przejdźmy więc do przykładów z prawdziwego świata.

Miejmy klasę `Article` reprezentującą artykuł na blogu:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// zapisać artykuł do bazy danych
	}
}
```

, a sposób użycia będzie następujący:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Metoda `save()` zapisuje artykuł w tabeli bazy danych. Wdrożenie jej przy użyciu [Nette Database |database:] byłoby bułką z masłem, gdyby nie jeden problem: skąd `Article` ma wziąć połączenie z bazą danych, czyli obiekt klasy `Nette\Database\Connection`?

Wydaje się, że mamy wiele możliwości. Może wziąć je skądś w zmiennej statycznej. Albo odziedziczyć po klasie, która zapewni połączenie z bazą danych. Albo skorzystać z [singletonu |global-state#Singleton]. Albo tzw. fasady, które są stosowane w Laravelu:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Świetnie, rozwiązaliśmy problem.

A może jednak?

Przypomnijmy sobie [zasadę #1: Niech ci to zostanie przekazane |#rule #1: Let It Be Passed to You]: wszystkie zależności, których potrzebuje klasa, muszą być do niej przekazane. Bo jeśli tego nie zrobimy i złamiemy tę zasadę, to rozpoczęliśmy drogę do brudnego kodu pełnego ukrytych wiązań, niezrozumiałości, a rezultatem będzie aplikacja, która jest bólem w utrzymaniu i rozwoju.

Użytkownik klasy `Article` nie ma pojęcia, gdzie metoda `save()` przechowuje artykuł. W tabeli bazy danych? W której, produkcyjnej czy deweloperskiej? I jak można to zmienić?

Użytkownik musi przyjrzeć się temu, jak zaimplementowana jest metoda `save()`, aby znaleźć zastosowanie metody `DB::insert()`. Musi więc szukać dalej, aby dowiedzieć się, jak ta metoda pozyskuje połączenie z bazą danych. A ukryte wiązania mogą tworzyć dość długi łańcuch.

Ukryte wiązania, fasady Laravel czy zmienne statyczne nigdy nie występują w czystym, dobrze zaprojektowanym kodzie. W czystym i dobrze zaprojektowanym kodzie przekazywane są argumenty:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Jeszcze bardziej praktyczne, jak zobaczymy dalej, jest użycie konstruktora:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

.[note]
Jeśli jesteś doświadczonym programistą, być może myślisz, że `Article` w ogóle nie powinien mieć metody `save()`, powinien być czystym komponentem danych, a o przechowywanie danych powinno zadbać osobne repozytorium. To ma sens. Ale to zabrałoby nas daleko poza temat, który jest zastrzykiem zależności i próbą podania prostych przykładów.

Jeśli masz zamiar napisać klasę, która wymaga bazy danych do działania, na przykład, nie wymyślaj, skąd ją wziąć, ale mieć ją przekazaną do ciebie. Być może jako parametr do konstruktora lub innej metody. Deklaruj zależności. Eksponuj je w API swojej klasy. Otrzymasz zrozumiały i przewidywalny kod.

Co powiesz na tę klasę, która rejestruje komunikaty o błędach:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Jak myślicie, czy zastosowaliśmy się do [zasady nr 1: Niech ci to zostanie przekazane |#rule #1: Let It Be Passed to You]?

Nie.

Kluczowa informacja, katalog pliku dziennika, jest *pozyskiwana* przez klasę ze stałej.

Zobacz przykładowe użycie:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Bez znajomości implementacji, czy mógłbyś odpowiedzieć na pytanie, gdzie zapisywane są wiadomości? Czy sugerowałoby ci to, że istnienie stałej LOG_DIR jest konieczne, aby działało? I czy byłbyś w stanie stworzyć drugą instancję, która zapisuje do innej lokalizacji? Z pewnością nie.

Naprawmy więc klasę:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Klasa jest teraz znacznie bardziej przejrzysta, bardziej konfigurowalna, a zatem bardziej użyteczna.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Ale nie obchodzi mnie to! .[#toc-but-i-don-t-care]
--------------------------------------------------

* "Kiedy tworzę obiekt Article i wywołuję save(), nie chcę zajmować się bazą danych, chcę tylko, aby został zapisany do tej, którą ustawiłem w konfiguracji. "*

*"Kiedy używam Loggera, chcę tylko, aby wiadomość została zapisana i nie chcę zajmować się tym, gdzie. Pozwól, aby użyto ustawień globalnych. "*

To są poprawne komentarze.

Jako przykład weźmy klasę, która wysyła biuletyny i rejestruje, jak to poszło:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Rozszerzony `Logger`, który nie używa już stałej `LOG_DIR`, wymaga ścieżki pliku w konstruktorze. Jak to rozwiązać? Klasa `NewsletterDistributor` nie dba o to, gdzie są zapisane wiadomości, chce je tylko zapisać.

Rozwiązaniem jest ponownie [zasada #1: Niech ci to zostanie przekazane |#rule #1: Let It Be Passed to You]: przekaż wszystkie dane, których potrzebuje klasa.

Przekazujemy więc ścieżkę do dziennika do konstruktora, którego następnie używamy do stworzenia obiektu `Logger`?

```php
class NewsletterDistributor
{
	public function __construct(
		private string $file, // ⛔ NIE W TEN SPOSÓB!
	) {
	}

	public function distribute(): void
	{
		$logger = new Logger($this->file);
```

Nie tak!!! Ponieważ ścieżka **nie** należy do danych, których potrzebuje klasa `NewsletterDistributor`; potrzebuje ona `Logger`. Klasa potrzebuje samego loggera. I właśnie to przekażemy dalej:

```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger, // ✅
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Teraz z sygnatur klasy `NewsletterDistributor` jasno wynika, że logowanie jest częścią jej funkcjonalności. A zadanie zastąpienia loggera innym, być może w celach testowych, jest dość trywialne.
Ponadto, jeśli konstruktor klasy `Logger` zostanie zmieniony, nie będzie to miało żadnego wpływu na naszą klasę.


Zasada #2: Bierz to, co jest twoje .[#toc-rule-2-take-what-is-yours]
--------------------------------------------------------------------

Nie daj się zwieść i nie pozwól, aby parametry twoich zależności zostały przekazane do ciebie. Przekazuj zależności bezpośrednio.

Dzięki temu kod korzystający z innych obiektów będzie całkowicie niezależny od zmian w ich konstruktorach. Jego interfejs API będzie prawdziwszy. A co najważniejsze, trywialnie będzie zamienić te zależności na inne.


Nowy członek rodziny .[#toc-a-new-member-of-the-family]
-------------------------------------------------------

Zespół programistów postanowił stworzyć drugi logger, który zapisuje do bazy danych. Stworzyliśmy więc klasę `DatabaseLogger`. Mamy więc dwie klasy, `Logger` i `DatabaseLogger`, jedna zapisuje do pliku, druga do bazy danych ... nie uważasz, że jest coś dziwnego w tej nazwie?
Czy nie lepiej byłoby zmienić nazwę `Logger` na `FileLogger`? Pewnie, że tak.

Ale zróbmy to mądrze. Stworzymy interfejs pod oryginalną nazwą:

```php
interface Logger
{
	function log(string $message): void;
}
```

, który oba loggery będą implementować:

```php
class FileLogger implements Logger
// ...

class DatabaseLogger implements Logger
// ...
```

I w ten sposób nie trzeba będzie nic zmieniać w pozostałej części kodu, w którym logger jest używany. Na przykład konstruktor klasy `NewsletterDistributor` nadal będzie się zadowalał wymaganiem `Logger` jako parametru. A od nas będzie zależało, którą instancję mu przekażemy.

**To właśnie dlatego nigdy nie nadajemy nazwom interfejsów przyrostka `Interface` lub przedrostka `I`.** W przeciwnym razie niemożliwe byłoby tak ładne opracowanie kodu.


Houston, mamy problem .[#toc-houston-we-have-a-problem]
-------------------------------------------------------

O ile w całej aplikacji możemy zadowolić się pojedynczą instancją loggera, czy to plikowego, czy bazodanowego, i po prostu przekazać ją wszędzie tam, gdzie coś jest logowane, to w przypadku klasy `Article` jest zupełnie inaczej. W rzeczywistości tworzymy jej instancje w zależności od potrzeb, być może wielokrotnie. Jak poradzić sobie z wiązaniem z bazą danych w jej konstruktorze?

Jako przykład może posłużyć kontroler, który po przesłaniu formularza powinien zapisać artykuł do bazy danych:

```php
class EditController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Możliwe rozwiązanie jest bezpośrednio oferowane: mieć obiekt bazy danych przekazywany przez konstruktora do `EditController` i używać `$article = new Article($this->db)`.

Podobnie jak w poprzednim przypadku z `Logger` i ścieżką do pliku, nie jest to poprawne podejście. Baza danych nie jest zależna od `EditController`, ale od `Article`. Zatem przekazanie bazy danych jest sprzeczne z [zasadą #2: bierz to, co twoje |#rule #2: take what is yours]. Kiedy konstruktor klasy `Article` zostanie zmieniony (zostanie dodany nowy parametr), kod we wszystkich miejscach, w których tworzone są instancje, również będzie musiał zostać zmodyfikowany. Ufff.

Houston, co proponujesz?


Zasada #3: Niech fabryka się tym zajmie .[#toc-rule-3-let-the-factory-handle-it]
--------------------------------------------------------------------------------

Usuwając ukryte wiązania i przekazując wszystkie zależności jako argumenty, otrzymujemy bardziej konfigurowalne i elastyczne klasy. I dlatego potrzebujemy czegoś innego do tworzenia i konfigurowania tych bardziej elastycznych klas. Nazwiemy to fabrykami.

Zasadą jest: jeśli klasa ma zależności, pozostaw tworzenie ich instancji fabryce.

Fabryki są inteligentnym zamiennikiem dla operatora `new` w świecie dependency injection.

.[note]
Proszę nie mylić z wzorcem projektowym *factory method*, który opisuje specyficzny sposób używania fabryk i nie jest związany z tym tematem.


Fabryka .[#toc-factory]
-----------------------

Fabryka to metoda lub klasa, która produkuje i konfiguruje obiekty. Klasę produkującą `Article` nazywamy `ArticleFactory` i może ona wyglądać tak:

```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Jej użycie w kontrolerze byłoby następujące:

```php
class EditController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// pozwól fabryce stworzyć obiekt
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

W tym momencie, gdy zmieni się sygnatura konstruktora klasy `Article`, jedyną częścią kodu, która musi zareagować, jest sama fabryka `ArticleFactory`. Każdy inny kod, który pracuje z obiektami `Article`, takimi jak `EditController`, nie zostanie dotknięty.

Być może stukasz się teraz w czoło, zastanawiając się, czy w ogóle sobie pomogliśmy. Ilość kodu wzrosła i całość zaczyna wyglądać podejrzanie skomplikowanie.

Nie martw się, wkrótce dotrzemy do kontenera Nette DI. A ma on w rękawie kilka asów, które sprawią, że budowanie aplikacji z wykorzystaniem dependency injection będzie niezwykle proste. Na przykład zamiast klasy `ArticleFactory` wystarczy [napisać prosty interfejs |factory]:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Ale wyprzedzamy się, trzymaj się :-)


Podsumowanie .[#toc-summary]
----------------------------

Na początku tego rozdziału obiecaliśmy, że pokażemy Ci sposób na projektowanie czystego kodu. Wystarczy nadać klasom.

- [zależności, których potrzebują |#Rule #1: Let It Be Passed to You]
- [a nie to, czego bezpośrednio nie potrzebują |#Rule #2: Take What Is Yours]
- [oraz że obiekty z zależnościami najlepiej tworzyć w fabrykach |#Rule #3: Let the Factory Handle it]

Na pierwszy rzut oka może się tak nie wydawać, ale te trzy zasady mają daleko idące implikacje. Prowadzą do radykalnie innego spojrzenia na projektowanie kodu. Czy to się opłaca? Programiści, którzy wyrzucili stare nawyki i zaczęli konsekwentnie stosować dependency injection, uważają to za przełomowy moment w swoim życiu zawodowym. Otworzył on przed nimi świat przejrzystych i trwałych aplikacji.

Ale co jeśli kod nie korzysta konsekwentnie z dependency injection? Co jeśli jest zbudowany na statycznych metodach lub singletonach? Czy przynosi to jakieś problemy? [Tak jest, i to bardzo znaczące |global-state].
