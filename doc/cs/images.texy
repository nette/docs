Zpracování obrázků
******************

Třída [Nette\Image |api:] je určena pro základní manipulaci s obrázky. Zjednodušuje nejčastější úkony, jako je změna velikosti, doostření nebo odeslání do prohlížeče. .[perex]

Základní manipulace s obrázky, jako je zmenšení, oříznutí nebo doostření, obnáší v PHP psaní nečitelného a nesrozumitelnému kódu. Vyjádřeno velmi diplomaticky :-) A to by nebyl Nette Framework, aby nepřišel s příjemnějším API.

Nejprve obrázek načteme ze souboru:

/--php
use Nette\Image;

$image = Image::fromFile('nette.jpg');
\--

nebo vytvoříme obrázek nový, prázdný, s rozměry 100x200:

/--php
$image = Image::fromBlank(100, 200);
\--

Volitelně lze určit také barvu pozadí (výchozí je černá):

/--php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
\--

A vypíšeme jeho rozměry:

/--php
echo "Rozměry jsou $image->width × $image->height";
\--




Změna velikosti
---------------

Proporcionálně zmenšíme obrázek tak, aby nepřesáhl rozměry 50x30 pixelů:

/--php
$image->resize(50, 30);
\--

Je možné specifikovat jen jeden rozměr a druhý se dopočítá:

/--php
$image->resize(50, NULL);

$image->resize(NULL, 30);
\--

Kterýkoliv rozměr je možné uvést i v procentech:

/--php
$image->resize('75%', 30); // 75% × 30px
\--

V uvedených příkladech se obrázek pouze zmenšuje. Případné zvětšení povolí příznak `Image::ENLARGE`:

/--php
$image->resize(50, 30, Image::ENLARGE);
\--

Příznakem `Image::STRETCH` se aktivují neproporcionální změny rozměrů:

/--php
$image->resize(50, 30, Image::STRETCH);
\--

Oba příznaky lze kombinovat:

/--php
$image->resize(50, 30, Image::ENLARGE | Image::STRETCH);
\--

Obrázky lze vertikálně nebo horizontálně překlopit tak, že jeden z rozměrů (případně oba) uvedeme jako záporné číslo:

/--php
$flipped = $image->resize(NULL, '-100%'); // flip vertical

$flipped = $image->resize('-100%', '-100%');  // rotate 180°

$flipped = $image->resize(-125, 50); // resize & flip horizontal
\--


Úpravy
------

Po zmenšení obrázku je možné vylepšit jeho vzhled jemným doostřením:

/--php
$image->sharpen();
\--

Obrázek ořízneme dle souřadnic obdélníku:

/--php
$image->crop($left, $top, $width, $height);
\--


Zmenšený obrázek můžeme vložit do jiného (vytvoříme tzv. watermark):

/--php
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));
$blank->place($image, 0, 0); // vložíme na pozici 0px, 0px

// souřadnice lze uvést opět v procentech
$blank->place($image, '80%', '75%', 25); // průhlednost je 25 %
\--

Nette\Image zjednodušuje volání všech grafických funkcí PHP z rozšíření GD, například [php:imagefilledrectangle], ale s využitím srozumitelnějšího objektového přístupu:

/--php
$white = Image::rgb(255, 255, 255);
$image->filledRectangle(0, 0, $width, $height, $white);
\--

.[note]
Funkce `sharpen()` a `rotate()` vyžadují přítomnost *Bundled GD extension*, nemusí tedy fungovat všude.


Uložení obrázku
---------------

Obrázek lze uložit do souboru:

/--php
$image->save('resampled.jpg');
\--

Volitelně lze stanovit i kvalitu a formát obrázku. (Pokud není uveden, detekuje se z přípony):

/--php
$image->save('resampled.jpg', 80, Image::JPEG); // JPEG, kvalita 80%
\--

Alternativně lze obrázek uložit i do proměnné:

/--php
$binary = (string) $image;
\--

nebo poslat přímo do prohlížeče s nastavením příslušné hlavičky `Content-Type`:

/--php
// odešle jako image/jpeg
$image->send();

// odešle jako image/png
$image->send(Image::PNG);
\--


Takové API je skutečně radost používat!


{{toc: title}}

{{themeicon: icon-images.png}}

{{tags: nette\image}}
