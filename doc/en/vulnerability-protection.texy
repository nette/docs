Vulnerability protection
************************

.[perex]

Every now and then an major security hole is announced or even abused. For sure that's a little bit unpleasant. If you care about security of your web apps, Nette Framework is frankly the best choice for you.


Cross-Site Scripting (XSS)
==========================

Cross-Site Scripting is a site disruption method using unescaped input. An attacker may inject his own HTML or JavaScript code and change the look of the page or even gather sensitive information about users. Protection against XSS is simple: consistent and correct escaping of all strings and inputs. Traditionally, it would be enough if your coder would made just a one slightest error and forgot once, and the whole website could be compromised.

An example of such an injection may be passing a canned ur, which inserts a "malicious" script. If an application does not escape inputs properly, such an request would possibly execute a script on client side. This may for example lead to stolen identity.

/--
http://example.com/?search=<script>alert('A successful XSS attack.');</script>
\--

Nette Framework comes with a brand new technology [Context-Aware Escaping |templating#context-aware-escaping], which get rid of the Cross-Site Scripting risks forever. It escapes all inputs automatically based on given context, so it's impossible for coder to accidentally forget something. Take the following template as an example:

/--html
<p onclick="alert({$message})">{$message}</p>

<script>
document.title = {$message};
</script>
\--

Command `{$message}` prints a variable. Other frameworks do often force developers to explicitly declare escaping, and even what type of escaping based on the context. Yet in Nette Framework you need to declare nothing, it's all pretty clever, that is. Everything is automatic, consistent and just right. If we set the variable to `$message = 'Width 1/2"'`, framework will generate this HTML code:

/--html
<p onclick="alert(&quot;Width 1\/2\&quot;&quot;)">Width 1/2&quot;</p>

<script>
document.title = "Width 1\/2\"";
</script>
\--


Cross-Site Request Forgery (CSRF)
=================================

Cross-Site Request Forgery is attacked based on forcing user to visit attackers own webpage, which does silently execute a request on a page the victim is currently logged in. It's for instance possible to edit or delete an article without the victim realizing it. Protection agains this attack is generating and verifying an authorization token.

Protecting a web form agains Cross-Site Request Forgery in Nette Frameworku is a matter of this oneliner:

/--php
$form->addProtection();
\--

That's all it takes to protect a web form. It's strongly recommended to use this verification on login form and in administration.


URL attack, control codes, invalid UTF-8
========================================

Different terms all related to attacker's effort to give your application a "malicious" input. The results may vary greatly, from broken XML outputs (ie. malfunctioned RSS stream) over getting sensitive information from database to getting user passwords. A protection against these attacks is consistent UTF-8 check on byte level. And frankly, you would not do that without a framework, right?

Nette Framework does this for you, automatically. You don't have to configure anything at all and your application will be safe.


Session hijacking, session stealing, session fixation
=====================================================

Session management involves a few types of attacks. Attacker may steal victim's session ID or forge one and thus gain access to a web application without the actual password. Then the attacker may do whatever the user could, without any trace. The protection lays on proper configuration of both PHP and the web server itself.

Nette Framework configures PHP automatically. Developers thus do not have to think how to make session protected enough and can fully emerge what's key about the application. Requires enabled `ini_set()` function.


{{themeicon: icon-communication.png}}
