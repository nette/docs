Slim 4 ile Latte Kullanımı
**************************

.[perex]
Yazarı "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html olan bu makale, Latte'nin Slim Framework ile kullanımını açıklamaktadır.

Önce "Slim Framework'ü yükleyin":https://odan.github.io/2019/11/05/slim4-tutorial.html ve ardından Latte'yi Composer kullanarak yükleyin:

```shell
composer require latte/latte
```


Yapılandırma
------------

Projenin kök dizininde yeni bir `templates` dizini oluşturun. Tüm şablonlar daha sonra buraya yerleştirilecektir.

`config/defaults.php` dosyasına yeni bir yapılandırma anahtarı `template` ekleyin:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte, şablonları yerel PHP koduna derler ve bunları diskte bir önbellekte saklar. Bu nedenle, yerel PHP dilinde yazılmış olsalardı olacağı kadar hızlıdırlar.

`config/defaults.php` dosyasına yeni bir yapılandırma anahtarı `template_temp` ekleyin: `{project}/tmp/templates` dizininin var olduğundan ve okuma ve yazma izinlerine sahip olduğundan emin olun.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte, şablonda her değişiklik yapıldığında önbelleği otomatik olarak yeniden oluşturur, bu da üretim ortamında kapatılarak biraz performans tasarrufu sağlanabilir:

```php
// üretim ortamında false olarak değiştirin
$settings['template_auto_refresh'] = true;
```

Ardından, `Latte\Engine` sınıfı için DI konteyner tanımını ekleyin.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Latte şablonunun kendisini oluşturmak teknik olarak çalışır, ancak aynı zamanda PSR-7 yanıt nesnesiyle çalışmasını da sağlamalıyız.

Bu amaçla, bu işi bizim için yapacak özel bir `TemplateRenderer` sınıfı oluşturacağız.

Ardından, `src/Renderer/TemplateRenderer.php` dosyasını oluşturun ve bu kodu kopyalayıp yapıştırın:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Kullanım
--------

Doğrudan Latte Engine nesnesini kullanmak yerine, şablonu PSR-7 uyumlu bir nesneye oluşturmak için `TemplateRenderer` nesnesini kullanacağız.

Tipik bir eylem işleyici sınıfı şöyle görünebilir: `home.latte` adlı şablonu oluşturur:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Bunun çalışması için, `templates/home.latte` içinde şu içerikle bir şablon dosyası oluşturun:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Her şey doğru yapılandırılmışsa, aşağıdaki çıktı görüntülenmelidir:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
