PHP Рефлексія
*************

.[perex]
[api:Nette\Utils\Reflection] — це статичний клас з корисними функціями для PHP рефлексії. Його завданням є виправлення недоліків нативних класів та уніфікація поведінки між різними версіями PHP.


Встановлення:

```shell
composer require nette/utils
```

Усі приклади передбачають створений псевдонім:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Перевіряє, чи має рефлексія доступ до коментарів PHPdoc. Коментарі можуть бути недоступними через кеш опкодів, див. наприклад директиву [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Розширює ім'я класу `$name` до його повного імені в контексті класу `$context`, тобто в контексті його простору імен та визначених псевдонімів. Тобто, фактично, каже, як PHP парсер зрозумів би `$name`, якби він був записаний у тілі класу `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Повертає рефлексію методу, який містить декларацію методу `$method`. Зазвичай кожен метод є своєю власною декларацією, але тіло методу може знаходитися також у трейті та під іншим ім'ям.

Оскільки PHP не надає достатньої інформації, за допомогою якої можна визначити справжню декларацію, Nette використовує власну евристику, яка **має бути** надійною.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Повертає рефлексію класу або трейту, який містить декларацію властивості `$prop`. Властивість може бути оголошена також у трейті.

Оскільки PHP не надає достатньої інформації, за допомогою якої можна визначити справжню декларацію, Nette використовує власну евристику, яка **не є** надійною.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Перевіряє, чи є `$type` вбудованим типом PHP. В іншому випадку це ім'я класу.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Використовуйте [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Перетворює рефлексію на зрозумілий людині рядок.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
