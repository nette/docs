Vytvoření databáze a modelu
###########################

.[perex]
První část aplikace, kterou budeme vytvářet, je struktura databáze pro uložení dat a pak model, který s nimi bude pracovat. Díky Nette\Database bude vytvoření modelu opravdu rychlé a práce s ním velmi snadná.

--------

Nejběžnější používanou databází je MySQL. Budeme proto předpokládat použití právě této databáze, nicméně vytvořené SQL skripty by měly s drobnými změnami fungovat pod většinou standardních databází.

Databázová struktura
********************

Nejprve se musíme zamyslet, co vše budeme v aplikaci potřebovat. Základem bude tabulka s jednotlivými úkoly. Vedle ní vytvoříme tabulku uživatelů a pak jednoduchou tabulku seznamů úkolů.

K jednotlivým úkolům (tabulka `task`) tedy budeme ukládat následující informace:

- `id`: unikátní ID úkolu. Sloupeček typu `INT` a bude primárním klíčem s `AUTO_INCREMENT`.
- `text`: popis úkolu. Na uložení budeme potřebovat sloupeček typu `VARCHAR(100)`. (V případě potřeby můžeme samozřejmě zvolit jinou délku, popř. použít typ `TEXT`.)
- `created`: čas, kdy byl úkol vytvořen. Sloupec bude typu `DATETIME`.
- `done`: značka (flag), zda byl úkol splněn. Můžeme využít typ `BOOLEAN`, který je synonynmem pro `TINYINT(1)`.
- `user_id`: ID uživatele, ke kterému je úkol přiřazen. Sloupec typu `INT`.
- `tasklist_id`: ID seznamu úkolů, do kterého je úkol zařazen. Sloupec typu `INT`.

Předpokládáme, že z tabulky budeme nejčastěji vybírat úkoly z jediného seznamu ukolů, filtrovat je podle toho, zda jsou splněné či nesplněné a řadit podle data jejich přidání. Vytoříme tedy navíc jeden index nad sloupci `tasklist_id`, `done`, `created`.

.[note]
Povšimněte si názvu sloupečků, které se odkazují na jiné tabulky. Jsou vždy ve formátu `<tabulka>_id`. Na základě pojmenování pak Nette\Database dokáže obě tabulky spojit. Jedná se o konvenci, kterou Nette\Database přejímá od knihovny "NotORM":[http://www.notorm.com/].

Již výše zmíněná tabulka uživatelů bude mít následující strukturu:

- `id`: unikátní ID uživatele. Opět `INT` a primární klíč s `AUTO_INCREMENT`.
- `username`: uživatelské jméno. `VARCHAR(20)`. Uživatelské jménu musí být navíc unikátní, takže nad sloupcem vytvoříme unikátní klíč.
- `password`: heslo uživatele. Pro uložení hesla použijeme některou z již existujících hashovacích funkcí. Podle délky hashe zvolíme velikost sloupce. My použiejeme SHA512, její použití je velmi jednoduché. Délka je 512 bitů, tedy 64 bajtů. V databázi jej uložíme hexadecimálně, čímž dostáváme výslednou délku 128 znaků. Použijeme `CHAR(128)`.
- `name`: skutečné jméno uživatele, které budeme zobrazovat v aplikaci. `VARCHAR(30)`.

.[note]
Proč nepoužívat na uložení hesla staré známé MD5? Samozřejmě ji použít můžete, nicméně jedná se o poměrně slabý hash, na který jsou běžně dostupné "rainbow tabulky":[http://en.wikipedia.org/wiki/Rainbow_table]. Navíc i na běžném dnešním hardwaru je možné otestovat metodou hrubé síly miliardy kombinací za sekundu.

Poslední zmíněnou tabulkou je tabulka `tasklist`. Bude mít jen dva sloupečky:

- `id`: unikátní ID. `INT`, primární klíč s `AUTO_INCREMENT`.
- `title`: nadpis seznamu. `VARCHAR(50)`.

.[tip]
Pro vytvoření těchto tabulek můžete použít svůj oblíbený nástroj na správu databáze, případně kostra aplikace obsahuje rozbalený "Adminer":[http://adminer.org/], který je psaný v PHP. Naleznete jej v podložce složce `www/adminer`, kterou stačí otevřít v prohlížeči.

SQL kód pro vytvoření popsaných tabulek je následující:

/---code sql
CREATE TABLE `task` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `text` varchar(100) NOT NULL,
  `created` datetime NOT NULL,
  `done` tinyint(1) unsigned NOT NULL DEFAULT 0,
  `user_id` int(10) unsigned NOT NULL,
  `tasklist_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `order` (`tasklist_id`,`done`,`created`)
);


CREATE TABLE `tasklist` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
);


CREATE TABLE `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL,
  `password` char(128) NOT NULL,
  `name` varchar(30) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
);
\---

Můžete si také stáhnout celý skript pro MySQL: [quickstart.mysql.sql |http://files.nette.org/2647/quickstart.mysql.sql]. Také si stáhněte ukázková data pro MySQL: [data.mysql.sql|http://files.nette.org/2647/data.mysql.sql]. To je z hlediska struktury databáze vše. Nyní se pustíme do psaní samotného modelu.

Struktura databáze vypadá následovně:

[* 03-schema.png *]


Model
*****

Protože `Nette\Database` již má základní databázové operace naimplementované, vystačíme si zpočátku pouze s jedinou základní třídou, která bude obsahovat jen několik málo základních metod. Ve složce `models` si vytvoříme soubor `Model.php` s třídou `Model`. Kostra této třídy vypadá takto:

/---php
/**
 * Základní třída modelu.
 */
class Model extends Nette\Object
{
	/** @var Nette\Database\Connection */
	public $database;


	/**
	 * @param Nette\Database\Connection $database
	 */
	public function __construct(Nette\Database\Connection $database)
	{
		$this->database = $database;
	}

}
\---

Třída toho zatím moc neumí. Při vytvoření dostane připojení k databázi ve formě objektu typu `Nette\Database\Connection`. S tímto objektem budeme pak dále pracovat, protože právě ten je naším magickým stavebním kamenem modelu. Obsahuje metodu `table`, která nám umožní pohodlně provádět dotazy nad tabulkou. Pokud chceme do modelu přidat informaci o tabulce `task`, jen si přidáme metodu:

/---php
/**
 * Získá tabulku úkolů.
 * @return Nette\Database\Table\Selection
 */
public function getTasks()
{
	return $this->database->table('task');
}
\---

Metoda vrací objekt typu `Nette\Database\Table\Selection`. Právě to je objekt, který nám umožní pohodlně provádět velmi efektivní dotazy. Více si o něm povíme později, až se dostaneme k použití v praxi, nedočkavci mohou nahlédnout do dokumentace na téma "Databáze & ORM":[http://doc.nette.org/cs/database].

Zbývá doplnit metody pro další tabulky:

/---php
/**
 * Získá tabulku se seznamy úkolů.
 * @return Nette\Database\Table\Selection
 */
public function getTaskLists()
{
	return $this->database->table('tasklist');
}

/**
 * Získá tabulku uživatelů.
 * @return Nette\Database\Table\Selection
 */
public function getUsers()
{
	return $this->database->table('user');
}
\---

A to je pro náš model vše. Jednoduché, že?


Nastavení připojení k databázi
******************************

Zbývá nám ještě poslední krok, tím je nastavení připojení k databázi. To provedeme v souboru `config/config.neon`. Prozatím nepotřebujeme přesně znát jeho strukturu, zajímají nás jen následující dvě sekce:

/---
	parameters:
		database:
			driver: mysql
			host: localhost
			dbname: test
			user:
			password:
\---

Tato sekce definuje parametry našeho připojení. Zde pouze stačí vyplnit správná data.

/---
	services:
		database:
			class: Nette\Database\Connection(
				'%database.driver%:host=%database.host%;dbname=%database.dbname%'
				%database.user%
				%database.password%
			)
			setup:
				- setCacheStorage(...)
				#- setDatabaseReflection( Nette\Database\Reflection\DiscoveredReflection() )

		authenticator: Authenticator( @database::table(users) )
\---

Tato sekce definuje takzvané služby. Jedná se o objekty, které jsou vytvářeny pouze jednou při jejich prvním použití a jsou společné pro celou aplikaci. Jsou zde uvedeny služby pro všechny třídy, o které jsme v této části zavadili.

.[tip]
Pokud chcete vědět proč právě služby a jak se s nimi pracuje, můžete si přečíst článek [Dependency Injection | cs/dependency-injection] zde v dokumentaci a "seriál na serveru Zdroják":http://zdrojak.root.cz/serialy/jak-na-dependency-injection/. Detaily o konfiguračním souboru pak naleznete v článku [Konfigurace prostředí | cs/configuring].

Služba `database` je samotné připojení k databázi. Jedná se o třídu `Nette\Database\Connection` (uvedeno jako `class`). Argumenty, které se při vytváření použijí, jsou uvedeny v závorce za názvem třídy, jako bychom skutečně konstruktor volali. Prvním argumentem je PDO připojovací řetězec, který je sestavený z parametrů, které jsme vyplnili dříve, například `%database.driver%` je nahrazeno za hodnotu `driver` z předchozí sekce, tedy za `mysql`. Takto jsou nahrazeny všechny části uzavřené v `%`. Jako další dva parametry jsou uvedeny uživatelské jméno a heslo.

.[note]
Pro dokumentaci připojovacího řetězce (DSN) konzultujte dokumentaci k "PDO driverům":[http://www.php.net/manual/en/pdo.drivers.php]. Každý driver má trochu odlišný připojovací řětezec, podívejte se například na "PDO připojení k MySQL":[http://www.php.net/manual/en/ref.pdo-mysql.connection.php].

Sekce `setup` říká, že po vytvoření objektu se má volat setter `setCacheStorage`. Při volání budou jako argumenty dosazeny objekty správných typů - Nette správné služby vybere podle typů, které jsou uvedeny v definici metody, případně v její phpDoc. Tomuto mechanismu se říká "autowiring" a je možné jej použít i třeba u konstruktorů.

Dále budeme muset zaregistrovat novou službu: `model`. Její definice bude vypadat následovně:

/---
model: Model( @database )
\---

.[note]
Při editaci konfiguračního souboru si dejte pozor na odsazování. Formát neon akceptuje odsazení tabulátorem i mezerami, ale v celém souboru musí být použito stejné odsazení. V připraveném `config.neon` jsou použity tabulátory. Dejte si pozor zejména na různě nastavená IDE, která místo tabulátorů používají nastavený počet mezer. Nette se v případě problémů ozve.

Služba `model` vytváří třídu modelu. Jako parametr konstruktoru dostává objekt služby `database`.

Poslední službou je `authenticator`. V konfiguračním souboru je definována takto:

/---
authenticator: Authenticator( @database::table(users) )
\---

Tabulku dostává přímo z objektu služby `database`, u nás má však tabulka v názvu jednotné číslo. Abychom se vyhnuli zbytečnému uvádění názvu tabulky na více místech, necháme si raději zavolat metodu modelu, kterou jsme před chvílí napsali:

/---
authenticator: Authenticator( @model::getUsers() )
\---

A to je prozatím vše. Úspěšně jsme vytvořili strukturu databáze a jednoduchý model, který budeme v dále v aplikaci používat. Využijeme jej hned příště, budeme totiž psát náš první presenter.

.[note]
Pokud Vám po úpravách quickstart přestal fungovat, bude nutné smazat cache, jak bylo zmíněno v předchozí kapitole. Stačí jen smazat složku `temp/cache`. Za normálních okolností však ve vývoji není potřeba mazat cache, takže pokud se do takové situace dostanete, na vině je pravděpodobně chybně detekovaný produkční režim. Pokud je to možné, přesuňte se na `localhost`. Pokud ne, přidejte do `bootstrap.php` bezprostředně za vytvoření objektu `Nette\Config\Configurator` řádek `$configurator->setProductionMode(FALSE);`.
