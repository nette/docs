Writing Documentation
*********************

.[perex]
Contributing to documentation is one of the most valuable activities, as it helps others understand the framework.


How to Write?
-------------

Documentation is primarily intended for people who are new to the topic. Therefore, it should meet several important points:

- Start with simple and general topics. Move on to more advanced topics at the end
- Try to explain the topic as clearly as possible. For example, try explaining the topic to a colleague first
- Only provide information that the user actually needs to know for a given topic
- Make sure your information is accurate. Test every code
- Be concise - cut what you write in half. And then feel free to do it again
- Use highlighting sparingly, from bold fonts to frames like `.[note]`
- Follow the [Coding Standard] in the code

Also, learn the [syntax]. For a preview of the article during writing, you can use the [preview editor |https://editor.nette.org/].


Language Mutations
------------------

English is the primary language, so your changes should be in English. If English is not your strong suit, use [DeepL Translator |https://www.deepl.com/translator] and others will check your text.

Translation into other languages will be done automatically after approval and fine-tuning of your edit.


Trivial Edits
-------------

To contribute to the documentation, you need to have an account on [GitHub |https://github.com].

The easiest way to make a small change in the documentation is to use the links at the end of each page:

- *Show on GitHub* opens the source version of the page on GitHub. Then just press the `E` button and you can start editing (you must be logged in to GitHub)
- *Open preview* opens an editor where you can immediately see the final visual form

Because the [preview editor |https://editor.nette.org/] does not have the ability to save changes directly to GitHub, you need to copy the source text to the clipboard (using the *Copy to clipboard button*) and then paste it into the editor on GitHub.
Below the editing field is a form for submission. Here, don't forget to briefly summarize and explain the reason for your edit. After submitting, a so-called pull request (PR) is created, which can be further edited.


Larger Edits
------------

Instead of using the GitHub interface, it is more suitable to know the basics of working with the Git version control system. If you're not familiar with Git, you can check out the quick guide: [git - the simple guide |https://rogerdudler.github.io/git-guide/], or use one of the many graphical tools: [GIT - GUI clients |https://git-scm.com/downloads/guis].

Edit the documentation by creating a fork of the [nette/docs |https://github.com/nette/docs] repository and cloning it to your computer. Then, in the appropriate branch, make changes, commit the change, push to your fork on GitHub, and then send a pull request (PR) to the original `nette/docs` repository.

Before each pull request, it's a good idea to run the [Code-Checker |code-checker:], which checks for extra spaces in the text.

You can push further changes to a pull request once created. Never create a new pull request just for an edit.


Documentation Structure
-----------------------

The entire documentation is located on GitHub in the [nette/docs |https://github.com/nette/docs] repository. The current version is in the master branch, while older versions are located in branches like `doc-3.x`, `doc-2.x`.

The content of each branch is divided into main folders representing individual areas of documentation. For example, `application/` corresponds to https://doc.nette.org/cs/application, `latte/` corresponds to https://latte.nette.org, etc. Each of these folders contains subfolders representing language mutations (`cs`, `en`, ...) and optionally a `files` subfolder with images that can be inserted into the pages in the documentation.
