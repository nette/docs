Praca z wywołaniami zwrotnymi
*****************************

.[perex]
[api:Nette\Utils\Callback] jest klasą statyczną zawierającą funkcje do pracy z [wywołaniami zwrotnymi PHP |https://www.php.net/manual/en/language.types.callable.php].


Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Sprawdza, czy zmienna `$callable` jest prawidłowym callbackiem. W przeciwnym razie rzuca `Nette\InvalidArgumentException`. Jeśli `$syntax` jest prawdziwe, funkcja sprawdza tylko, czy `$callable` ma strukturę wywołania zwrotnego, ale nie sprawdza, czy klasa lub metoda rzeczywiście istnieje. Zwraca on `$callable`.

```php
Callback::check('trim'); // nie rzuca wyjątku
Callback::check(['NonExistentClass', 'method']); // throws Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // nie rzuca wyjątku
Callback::check(function () {}); // nie rzuca wyjątku
Callback::check(null); // throws Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Konwertuje wywołanie zwrotne PHP do postaci tekstowej. Klasa lub metoda nie musi istnieć.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Zwraca odbicie dla metody lub funkcji w wywołaniu zwrotnym PHP.

```php
$ref = Callback::toReflection('trim');
// $ref je ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref je ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Określa, czy wywołanie zwrotne PHP jest funkcją czy metodą statyczną.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Rozpakowuje zamknięcie utworzone za pomocą `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
