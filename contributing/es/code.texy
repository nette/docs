Cómo contribuir al código
*************************

.[perex]
¿Te preparas para contribuir a Nette Framework y necesitas orientarte sobre las reglas y procedimientos? Esta guía para principiantes te mostrará paso a paso cómo contribuir eficazmente al código, trabajar con repositorios e implementar cambios.


Procedimiento
=============

Para contribuir al código, es esencial tener una cuenta en [GitHub|https://github.com] y estar familiarizado con los fundamentos del trabajo con el sistema de control de versiones Git. Si no dominas el trabajo con Git, puedes consultar la guía [git - the simple guide |https://rogerdudler.github.io/git-guide/] y, opcionalmente, utilizar alguno de los muchos [clientes gráficos |https://git-scm.com/downloads/guis].


Preparación del entorno y del repositorio
-----------------------------------------

1) en GitHub, crea un [fork |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] del repositorio del [paquete |www:packages] que vas a modificar
2) [clona |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository] este repositorio en tu ordenador
3) instala las dependencias, incluido [Nette Tester |tester:], mediante el comando `composer install`
4) comprueba que las pruebas funcionan ejecutando `composer tester`
5) crea una [nueva rama |#Nueva rama] basada en la última versión publicada


Implementación de sus propios cambios
-------------------------------------

Ahora puedes realizar tus propias modificaciones en el código:

1) programa los cambios deseados y no olvides las pruebas
2) asegúrate de que las pruebas se ejecutan correctamente usando `composer tester`
3) comprueba que el código cumple con los [estándares de codificación|#Coding Standards]
4) guarda los cambios (haz commit) con una descripción en [este formato|#Descripción del commit]

Puedes crear varios commits, uno para cada paso lógico. Cada commit debe tener sentido por sí solo.


Envío de cambios
----------------

Una vez que estés satisfecho con los cambios, puedes enviarlos:

1) envía (haz push) los cambios a GitHub a tu fork
2) desde allí, envíalos al repositorio de Nette creando una [pull request|https://help.github.com/articles/creating-a-pull-request] (PR)
3) proporciona [suficiente información|#popis pull requestu] en la descripción


Incorporación de comentarios
----------------------------

Tus commits ahora serán visibles para otros. Es común recibir comentarios con sugerencias:

1) sigue las modificaciones propuestas
2) incorpóralas como nuevos commits o [combínalas con los anteriores |https://help.github.com/en/github/using-git/about-git-rebase]
3) vuelve a enviar los commits a GitHub y aparecerán automáticamente en la pull request

Nunca crees una nueva pull request para modificar una existente.


Documentación
-------------

Si has cambiado la funcionalidad o añadido una nueva, no olvides [añadirla también a la documentación |documentation].


Nueva rama
==========

Si es posible, realiza los cambios sobre la última versión publicada, es decir, la última etiqueta en la rama correspondiente. Para la etiqueta `v3.2.1`, crea una rama con este comando:

```shell
git checkout -b new_branch_name v3.2.1
```


Estándares de codificación
==========================

Tu código debe cumplir con el [estándar de codificación |coding-standard] utilizado en Nette Framework. Hay disponible una herramienta automática para comprobar y corregir el código. Se puede instalar a través de Composer **globalmente** en la carpeta que elijas:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Ahora deberías poder ejecutar la herramienta en la terminal. El primer comando comprueba y el segundo también corrige el código en las carpetas `src` y `tests` del directorio actual:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Descripción del commit
======================

En Nette, los asuntos de los commits tienen el formato: `Presenter: fixed AJAX detection [Closes #69]`

- área seguida de dos puntos
- propósito del commit en tiempo pasado, si es posible, comienza con la palabra: "added .(nueva característica añadida)", "fixed .(corrección)", "refactored .(cambio en el código sin cambio de comportamiento)", changed, removed
- si el commit rompe la compatibilidad hacia atrás, añade "BC break"
- posible vínculo con el issue tracker como `(#123)` o `[Closes #69]`
- después del asunto puede seguir una línea vacía y luego una descripción más detallada, incluyendo, por ejemplo, enlaces al foro


Descripción de la pull request
==============================

Al crear una pull request, la interfaz de GitHub te permitirá introducir un título y una descripción. Proporciona un título descriptivo y en la descripción ofrece la mayor cantidad de información posible sobre las razones de tu cambio.

También se mostrará un encabezado donde especificarás si se trata de una nueva función o una corrección de error y si puede haber una ruptura de la compatibilidad hacia atrás (BC break). Si hay un problema relacionado (issue), enlaza a él para que se cierre después de la aprobación de la pull request.

```
- ¿corrección de error / nueva característica?  <!-- #números de issue, si los hay -->
- ¿BC break? sí/no
- doc PR: nette/docs#?    <!-- muy bienvenido, ver https://nette.org/en/writing -->
```


{{priority: -1}}
