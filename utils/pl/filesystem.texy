Funkcje systemu plików
**********************

.[perex]
[api:Nette\Utils\FileSystem] jest statyczną klasą, która zawiera przydatne funkcje do pracy z systemem plików. Jedną z zalet w stosunku do natywnych funkcji PHP jest to, że w przypadku błędów rzucają one wyjątki.


Instalacja:

```shell
composer require nette/utils
```

Poniższe przykłady zakładają, że zdefiniowany jest następujący alias klasy:

```php
use Nette\Utils\FileSystem;
```


Manipulacja .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Kopiuje plik lub cały katalog. Domyślnie nadpisuje istniejące pliki i katalogi. Jeśli `$overwrite` jest ustawione na `false`, a `$target` już istnieje, rzuca wyjątek `Nette\InvalidStateException`. Rzuca wyjątek `Nette\IOException` w przypadku wystąpienia błędu.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Tworzy katalog, jeśli nie istnieje, łącznie z katalogami nadrzędnymi. Rzuca wyjątek `Nette\IOException` w przypadku wystąpienia błędu.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Usuwa plik lub cały katalog, jeśli istnieje. Jeśli katalog nie jest pusty, najpierw usuwa jego zawartość. Rzuca wyjątek `Nette\IOException` w przypadku wystąpienia błędu.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Ustawia uprawnienia do plików na `$fileMode` lub uprawnienia do katalogów na `$dirMode`. Rekursywnie przemierza i ustawia uprawnienia również na całej zawartości katalogu.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Otwiera plik i zwraca zasób. Parametr `$mode` działa tak samo jak natywna funkcja `fopen()`:https://www.php.net/manual/en/function.fopen.php. Jeśli wystąpi błąd, podnosi wyjątek `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Odczytuje zawartość pliku `$file`. Rzuca wyjątek `Nette\IOException` w przypadku wystąpienia błędu.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Odczytuje zawartość pliku linia po linii. W odróżnieniu od natywnej funkcji `file()`, nie czyta ona całego pliku do pamięci, lecz czyta go w sposób ciągły, dzięki czemu można odczytać pliki większe niż dostępna pamięć. Parametr `$stripNewLines` określa, czy usuwać znaki przerwania linii `\r` i `\n`.
W przypadku błędu podnosi wyjątek `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Zmienia nazwę lub przenosi plik lub katalog określony przez `$origin` na `$target`. Domyślnie nadpisuje istniejące pliki i katalogi. Jeśli `$overwrite` jest ustawione na `false` a `$target` już istnieje, rzuca wyjątek `Nette\InvalidStateException`. Rzuca wyjątek `Nette\IOException` w przypadku wystąpienia błędu.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Zapisuje adres `$content` na adres `$file`. Wyrzuca wyjątek `Nette\IOException` w przypadku wystąpienia błędu.

```php
FileSystem::write('/path/to/file', $content);
```


Ścieżki .[#toc-paths]
=====================


isAbsolute(string $path): bool .[method]
----------------------------------------

Określa, czy strona `$path` jest bezwzględna.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Łączy wszystkie segmenty ścieżki i normalizuje wynik.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizuje `..` i `.` oraz separatory katalogów w ścieżce.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Konwertuje ukośniki na `/` używane w systemach uniksowych.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Konwertuje ukośniki na znaki specyficzne dla bieżącej platformy, tj. `\` w systemie Windows i `/` gdzie indziej.

```php
$path = FileSystem::platformSlashes($path);
```
