Lavorare con le immagini
************************

.[perex]
La classe [api:Nette\Utils\Image] semplifica la manipolazione delle immagini, come il ridimensionamento, il ritaglio, l'applicazione di nitidezza, il disegno o l'unione di più immagini.


PHP dispone di un'ampia gamma di funzioni per la manipolazione delle immagini. Ma la loro API non è molto comoda. Non sarebbe Nette Framework se non avesse proposto un'API sexy.

Installazione:

```shell
composer require nette/utils
```

Tutti gli esempi presuppongono la creazione di un alias:

```php
use Nette\Utils\Image;
use Nette\Utils\ImageColor;
use Nette\Utils\ImageType;
```


Creazione di un'immagine
========================

Creiamo una nuova immagine true color, ad esempio con dimensioni 100×200:

```php
$image = Image::fromBlank(100, 200);
```

Opzionalmente, è possibile specificare il colore di sfondo (il predefinito è nero):

```php
$image = Image::fromBlank(100, 200, ImageColor::rgb(125, 0, 0));
```

Oppure carichiamo l'immagine da un file:

```php
$image = Image::fromFile('nette.jpg');
```


Salvataggio dell'immagine
=========================

L'immagine può essere salvata in un file:

```php
$image->save('resampled.jpg');
```

Possiamo specificare la qualità della compressione nell'intervallo 0..100 per JPEG (predefinito 85), WEBP (predefinito 80) e AVIF (predefinito 30) e 0..9 per PNG (predefinito 9):

```php
$image->save('resampled.jpg', 80); // JPEG, qualità 80%
```

Se il formato non è chiaro dall'estensione del file, può essere specificato con una [costante|#Formáty]:

```php
$image->save('resampled.tmp', null, ImageType::JPEG);
```

L'immagine può essere scritta in una variabile invece che su disco:

```php
$data = $image->toString(ImageType::JPEG, 80); // JPEG, qualità 80%
```

o inviata direttamente al browser con l'header HTTP `Content-Type` appropriato:

```php
// invia l'header Content-Type: image/png
$image->send(ImageType::PNG);
```


Formati
=======

I formati supportati sono JPEG, PNG, GIF, WebP, AVIF e BMP, tuttavia devono essere supportati anche dalla vostra versione di PHP, cosa che potete verificare con la funzione [#isTypeSupported()]. Le animazioni non sono supportate.

Il formato è rappresentato dalle costanti `ImageType::JPEG`, `ImageType::PNG`, `ImageType::GIF`, `ImageType::WEBP`, `ImageType::AVIF` e `ImageType::BMP`.

```php
$supported = Image::isTypeSupported(ImageType::JPEG);
```

Avete bisogno di rilevare il formato dell'immagine durante il caricamento? Il metodo lo restituisce nel secondo parametro:

```php
$image = Image::fromFile('nette.jpg', $type);
```

Il rilevamento stesso senza caricare l'immagine viene eseguito da `Image::detectTypeFromFile()`.


Ridimensionamento
=================

Un'operazione comune è il ridimensionamento delle dimensioni dell'immagine. Le dimensioni attuali vengono restituite dai metodi `getWidth()` e `getHeight()`.

Per il ridimensionamento si utilizza il metodo `resize()`. Esempio di ridimensionamento proporzionale in modo che non superi le dimensioni di 500x300 pixel (o la larghezza sarà esattamente 500 px o l'altezza sarà esattamente 300 px, una delle dimensioni viene calcolata in modo da mantenere il rapporto d'aspetto):

```php
$image->resize(500, 300);
```

È possibile specificare solo una dimensione e l'altra verrà calcolata:

```php
$image->resize(500, null); // larghezza 500px, l'altezza viene calcolata

$image->resize(null, 300); // la larghezza viene calcolata, altezza 300px
```

Qualsiasi dimensione può essere specificata anche in percentuale:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Il comportamento di `resize` può essere influenzato dai seguenti flag. Tutti tranne `Image::Stretch` mantengono il rapporto d'aspetto.

|---------------------------------------------------------------------------------------
| Flag                   | Descrizione
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (predefinito) | le dimensioni risultanti saranno minori o uguali alle dimensioni richieste
| `Image::OrBigger`         | riempie (e eventualmente supera in una dimensione) l'area di destinazione
| `Image::Cover`            | riempie l'area di destinazione e ritaglia ciò che supera
| `Image::ShrinkOnly`       | solo ridimensionamento (impedisce l'ingrandimento di un'immagine piccola)
| `Image::Stretch`          | non mantenere il rapporto d'aspetto


I flag vengono specificati come terzo argomento della funzione:

```php
$image->resize(500, 300, Image::OrBigger);
```

I flag possono essere combinati:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Le immagini possono essere capovolte verticalmente o orizzontalmente specificando una delle dimensioni (o entrambe) come numero negativo:

```php
$flipped = $image->resize(null, '-100%'); // capovolgimento verticale

$flipped = $image->resize('-100%', '-100%'); // rotazione di 180°

$flipped = $image->resize(-125, 500); // ridimensiona e capovolge orizzontalmente
```

Dopo aver ridimensionato l'immagine, è possibile migliorarne l'aspetto con una leggera applicazione di nitidezza:

```php
$image->sharpen();
```


Ritaglio
========

Per il ritaglio si utilizza il metodo `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Similmente a `resize()`, tutti i valori possono essere specificati in percentuale. Le percentuali per `$left` e `$top` vengono calcolate dallo spazio rimanente, in modo simile alla proprietà CSS `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


L'immagine può anche essere ritagliata automaticamente, ad esempio per ritagliare i bordi neri:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Il metodo `cropAuto()` è un sostituto orientato agli oggetti della funzione `imagecropauto()`, nella [sua documentazione|https://www.php.net/manual/en/function.imagecropauto] troverete ulteriori informazioni.


Colori .{data-version:4.0.2}
============================

Il metodo `ImageColor::rgb()` consente di definire un colore utilizzando i valori di rosso, verde e blu (RGB). Opzionalmente, è possibile specificare anche un valore di trasparenza nell'intervallo da 0 (completamente trasparente) a 1 (completamente opaco), proprio come in CSS.

```php
$color = ImageColor::rgb(255, 0, 0); // Rosso
$transparentBlue = ImageColor::rgb(0, 0, 255, 0.5); // Blu semitrasparente
```

Il metodo `ImageColor::hex()` consente di definire un colore utilizzando il formato esadecimale, simile a CSS. Supporta i formati `#rgb`, `#rrggbb`, `#rgba` e `#rrggbbaa`:

```php
$color = ImageColor::hex("#F00"); // Rosso
$transparentGreen = ImageColor::hex("#00FF0080"); // Verde semitrasparente
```

I colori possono essere utilizzati in altri metodi, come `ellipse()`, `fill()`, ecc.


Disegno e modifiche
===================

Puoi disegnare, puoi scrivere, ma non strappare le foglie. Sono disponibili tutte le funzioni PHP per lavorare con le immagini, vedi [#Panoramica dei metodi |#Přehled metod], ma in un involucro orientato agli oggetti:

```php
$image->filledEllipse($centerX, $centerY, $width, $height, ImageColor::rgb(255, 0, 0));
```

Poiché le funzioni PHP per disegnare rettangoli non sono pratiche a causa della specificazione delle coordinate, la classe `Image` offre le loro sostituzioni sotto forma delle funzioni [#rectangleWH()] e [#filledRectangleWH()].


Unione di più immagini
======================

È facile inserire un'altra immagine in un'immagine:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, ImageColor::rgb(52, 132, 210));

// le coordinate possono essere specificate nuovamente in percentuale
$blank->place($logo, '80%', '80%'); // inseriamo vicino all'angolo inferiore destro
```

Durante l'inserimento, il canale alfa viene rispettato, inoltre possiamo influenzare la trasparenza dell'immagine inserita (creiamo la cosiddetta filigrana):

```php
$blank->place($image, '80%', '80%', 25); // la trasparenza è del 25 %
```

Un'API del genere è davvero un piacere da usare!


Panoramica dei metodi
=====================


static fromBlank(int $width, int $height, ?ImageColor $color=null): Image .[method]
-----------------------------------------------------------------------------------
Crea una nuova immagine true color delle dimensioni specificate. Il colore predefinito è nero.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Carica un'immagine da un file e restituisce il suo [tipo|#Formáty] in `$detectedFormat`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Carica un'immagine da una stringa e restituisce il suo [tipo|#Formáty] in `$detectedFormat`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method][deprecated]
---------------------------------------------------------------------------------------------
Questa funzione è stata sostituita dalla classe `ImageColor`, vedi [colori|#Barvy].


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Restituisce l'estensione del file per il [tipo|#Formáty] specificato.


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Restituisce il tipo mime per il [tipo|#Formáty] specificato.


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Restituisce il [tipo|#Formáty] dell'immagine in base all'estensione del file.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Restituisce il [tipo|#Formáty] dell'immagine e nei parametri `$width` e `$height` anche le sue dimensioni.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Restituisce il [tipo|#Formáty] dell'immagine da una stringa e nei parametri `$width` e `$height` anche le sue dimensioni.


static isTypeSupported(int $type): bool .[method]
-------------------------------------------------
Verifica se il [tipo|#Formáty] di immagine specificato è supportato.


static getSupportedTypes(): array .[method]{data-version:4.0.4}
---------------------------------------------------------------
Restituisce un array dei [tipi|#Formáty] di immagine supportati.


static calculateTextBox(string $text, string $fontFile, float $size, float $angle=0, array $options=[]): array .[method]
------------------------------------------------------------------------------------------------------------------------
Calcola le dimensioni del rettangolo che circonda il testo in un determinato carattere e dimensione. Restituisce un array associativo contenente le chiavi `left`, `top`, `width`, `height`. Il margine sinistro può essere anche negativo se il testo inizia con un kerning sinistro.


affine(array $affine, ?array $clip=null): Image .[method]
---------------------------------------------------------
Restituisce un'immagine contenente l'immagine src trasformata affinemente utilizzando un'area di ritaglio opzionale. ([maggiori informazioni |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Restituisce la concatenazione di due matrici di trasformazione affine, utile se più trasformazioni devono essere applicate alla stessa immagine contemporaneamente. ([maggiori informazioni |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, ?mixed $options=null): array .[method]
-----------------------------------------------------------------
Restituisce una matrice di trasformazione affine. ([maggiori informazioni |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Consente due diverse modalità di disegno nelle immagini truecolor. In modalità di fusione, il componente del canale alfa del colore utilizzato in tutte le funzioni di disegno, come `setPixel()`, determina in che misura il colore sottostante dovrebbe trasparire. Di conseguenza, il colore esistente in quel punto viene automaticamente miscelato con il colore disegnato e il risultato viene salvato nell'immagine. Il pixel risultante è opaco. In modalità senza fusione, il colore disegnato viene copiato letteralmente con le informazioni del canale alfa e sostituisce il pixel di destinazione. La modalità di fusione non è disponibile quando si disegna su immagini a tavolozza. ([maggiori informazioni |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Attiva il disegno di linee e poligoni con antialiasing. Non supporta i canali alfa. Funziona solo con immagini truecolor.

L'uso di primitive con antialiasing con un colore di sfondo trasparente può portare a risultati imprevisti. Il metodo di fusione utilizza il colore di sfondo come tutti gli altri colori. ([maggiori informazioni |https://www.php.net/manual/en/function.imageantialias])


arc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color): void .[method]
---------------------------------------------------------------------------------------------------------------------------
Disegna un arco di cerchio centrato nelle coordinate specificate. ([maggiori informazioni |https://www.php.net/manual/en/function.imagearc])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Restituisce un identificatore di colore che rappresenta il colore composto dai componenti RGB specificati. Deve essere chiamata per creare ogni colore da utilizzare nell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Si comporta come `colorAllocate()` con l'aggiunta del parametro di trasparenza `$alpha`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Restituisce l'indice del colore del pixel nella posizione specificata nell'immagine. Se l'immagine è truecolor, questa funzione restituisce il valore RGB di quel pixel come intero. Utilizzare lo spostamento di bit e il mascheramento di bit per accedere ai valori separati dei componenti rosso, verde e blu: ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Restituisce l'indice del colore nella tavolozza dell'immagine che è "più vicino" al valore RGB specificato. La "distanza" tra il colore desiderato e ogni colore nella tavolozza viene calcolata come se i valori RGB rappresentassero punti in uno spazio tridimensionale. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Restituisce l'indice del colore nella tavolozza dell'immagine che è "più vicino" al valore RGB specificato e al livello `$alpha`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Ottiene l'indice del colore che ha la tonalità, il bianco e il nero più vicini al colore specificato. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Dealloca un colore precedentemente allocato con `colorAllocate()` o `colorAllocateAlpha()`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Restituisce l'indice del colore specificato nella tavolozza dell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Restituisce l'indice del colore specificato + alfa nella tavolozza dell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Adatta i colori della tavolozza alla seconda immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Restituisce l'indice del colore per il colore richiesto, sia il colore esatto che l'alternativa più vicina possibile. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Restituisce l'indice del colore per il colore richiesto, sia il colore esatto che l'alternativa più vicina possibile. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Imposta l'indice specificato nella tavolozza sul colore specificato. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Ottiene il colore dell'indice specificato. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Restituisce il numero di colori nella tavolozza dell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(?int $color=null): int .[method]
-------------------------------------------------
Ottiene o imposta il colore trasparente nell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Applica una matrice di convoluzione all'immagine, utilizzando il coefficiente e l'offset specificati. ([maggiori informazioni |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Richiede la presenza dell'estensione *Bundled GD*, quindi potrebbe non funzionare ovunque.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Copia una parte di `$src` sull'immagine iniziando dalle coordinate `$srcX`, `$srcY` con larghezza `$srcW` e altezza `$srcH`. La parte definita verrà copiata nelle coordinate `$dstX` e `$dstY`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Copia una parte di `$src` sull'immagine iniziando dalle coordinate `$srcX`, `$srcY` con larghezza `$srcW` e altezza `$srcH`. La parte definita verrà copiata nelle coordinate `$dstX` e `$dstY`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Copia una parte di `$src` sull'immagine iniziando dalle coordinate `$srcX`, `$srcY` con larghezza `$srcW` e altezza `$srcH`. La parte definita verrà copiata nelle coordinate `$dstX` e `$dstY`.

Questa funzione è identica a `copyMerge()` con l'eccezione che durante la fusione conserva la tonalità della sorgente convertendo i pixel di destinazione in scala di grigi prima dell'operazione di copia. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Copia una porzione rettangolare di un'immagine su un'altra immagine, interpolando uniformemente i valori dei pixel, in modo che in particolare la riduzione delle dimensioni dell'immagine mantenga comunque una grande chiarezza.

In altre parole, `copyResampled()` prende un'area rettangolare da `$src` di larghezza `$srcW` e altezza `$srcH` nella posizione (`$srcX`, `$srcY`) e la posiziona in un'area rettangolare dell'immagine di larghezza `$dstW` e altezza `$dstH` nella posizione (`$dstX`, `$dstY`).

Se le coordinate di origine e destinazione, la larghezza e l'altezza differiscono, viene eseguito un corrispondente allungamento o restringimento del frammento dell'immagine. Le coordinate si riferiscono all'angolo superiore sinistro. Questa funzione può essere utilizzata per copiare aree all'interno della stessa immagine, ma se le aree si sovrappongono, i risultati non saranno prevedibili. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Copia una porzione rettangolare di un'immagine su un'altra immagine. In altre parole, `copyResized()` ottiene un'area rettangolare da `$src` di larghezza `$srcW` e altezza `$srcH` nella posizione (`$srcX`, `$srcY`) e la posiziona in un'area rettangolare dell'immagine di larghezza `$dstW` e altezza `$dstH` nella posizione (`$dstX`, `$dstY`).

Se le coordinate di origine e destinazione, la larghezza e l'altezza differiscono, viene eseguito un corrispondente allungamento o restringimento del frammento dell'immagine. Le coordinate si riferiscono all'angolo superiore sinistro. Questa funzione può essere utilizzata per copiare aree all'interno della stessa immagine, ma se le aree si sovrappongono, i risultati non saranno prevedibili. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Ritaglia l'immagine nell'area rettangolare specificata. Le dimensioni possono essere specificate come interi in pixel o stringhe in percentuale (ad esempio `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, ?ImageColor $color=null): Image .[method]
-------------------------------------------------------------------------------------
Ritaglia automaticamente l'immagine secondo la `$mode` specificata. ([maggiori informazioni |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------
Disegna un'ellisse centrata nelle coordinate specificate. ([maggiori informazioni |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, ImageColor $color): void .[method]
-------------------------------------------------------
Riempie un'area iniziando dalle coordinate specificate (in alto a sinistra è 0, 0) con il `$color` specificato. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefill])


filledArc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------------------------------------------------
Disegna un arco parziale centrato nelle coordinate specificate. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------------
Disegna un'ellisse centrata nelle coordinate specificate. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------------
Crea un poligono riempito nell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------
Crea un rettangolo riempito con `$color` nell'immagine iniziando dal punto `$x1` & `$y1` e terminando al punto `$x2` & `$y2`. Il punto 0, 0 è l'angolo superiore sinistro dell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefilledrectangle])


filledRectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------------
Crea un rettangolo riempito con `$color` nell'immagine iniziando dal punto `$left` & `$top` con larghezza `$width` e altezza `$height`. Il punto 0, 0 è l'angolo superiore sinistro dell'immagine.


fillToBorder(int $x, int $y, int $border, ImageColor $color): void .[method]
----------------------------------------------------------------------------
Esegue un riempimento il cui colore del bordo è definito da `$border`. Il punto di partenza del riempimento è `$x`, `$y` (in alto a sinistra è 0, 0) e l'area viene riempita con il colore `$color`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Applica il filtro `$filtertype` specificato all'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Capovolge l'immagine utilizzando la `$mode` specificata. ([maggiori informazioni |https://www.php.net/manual/en/function.imageflip])


ftText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
----------------------------------------------------------------------------------------------------------------------------------------
Scrive il testo nell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Applica la correzione gamma all'immagine rispetto alla gamma di input e output. ([maggiori informazioni |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Restituisce il ritaglio corrente, ovvero l'area oltre la quale non verranno disegnati pixel. ([maggiori informazioni |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Restituisce l'altezza dell'immagine.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Restituisce la risorsa originale.


getWidth(): int .[method]
-------------------------
Restituisce la larghezza dell'immagine.


interlace(?int $interlace=null): int .[method]
----------------------------------------------
Attiva o disattiva la modalità interlacciata. Se la modalità interlacciata è impostata e l'immagine viene salvata come JPEG, verrà salvata come JPEG progressivo. ([maggiori informazioni |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Verifica se l'immagine è truecolor. ([maggiori informazioni |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Imposta il flag di fusione alfa per utilizzare gli effetti di layering. ([maggiori informazioni |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
---------------------------------------------------------------------------
Disegna una linea tra i due punti specificati. ([maggiori informazioni |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, ImageColor $color): void .[method]
-------------------------------------------------------------
Disegna un poligono aperto sull'immagine. A differenza di `polygon()`, non viene disegnata alcuna linea tra l'ultimo e il primo punto. ([maggiori informazioni |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Copia la tavolozza da `$source` all'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Converte un'immagine basata su tavolozza in un'immagine a colori pieni. ([maggiori informazioni |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Copia `$image` nell'immagine alle coordinate `$left` e `$top`. Le coordinate possono essere specificate come interi in pixel o stringhe in percentuale (ad esempio `'50%'`).


polygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------
Crea un poligono nell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------
Crea un rettangolo alle coordinate specificate. ([maggiori informazioni |https://www.php.net/manual/en/function.imagerectangle])


rectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------
Crea un rettangolo alle coordinate specificate.


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Ridimensiona l'immagine, [maggiori informazioni|#Změna velikosti]. Le dimensioni possono essere specificate come interi in pixel o stringhe in percentuale (ad esempio `'50%'`).


resolution(?int $resX=null, ?int $resY=null): mixed .[method]
-------------------------------------------------------------
Imposta o restituisce la risoluzione dell'immagine in DPI (punti per pollice). Se non viene specificato nessuno dei parametri opzionali, la risoluzione corrente viene restituita come array indicizzato. Se viene specificato solo `$resX`, la risoluzione orizzontale e verticale viene impostata su questo valore. Se vengono specificati entrambi i parametri opzionali, la risoluzione orizzontale e verticale viene impostata su questi valori.

La risoluzione viene utilizzata solo come meta informazione quando le immagini vengono lette e scritte in formati che supportano questo tipo di informazioni (attualmente PNG e JPEG). Non influisce su alcuna operazione di disegno. La risoluzione predefinita delle nuove immagini è 96 DPI. ([maggiori informazioni |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Ruota l'immagine utilizzando l'`$angle` specificato in gradi. Il centro di rotazione è il centro dell'immagine e l'immagine ruotata può avere dimensioni diverse dall'immagine originale. ([maggiori informazioni |https://www.php.net/manual/en/function.imagerotate])

.[note]
Richiede la presenza dell'estensione *Bundled GD*, quindi potrebbe non funzionare ovunque.


save(string $file, ?int $quality=null, ?int $type=null): void .[method]
-----------------------------------------------------------------------
Salva l'immagine in un file.

La qualità della compressione è nell'intervallo 0..100 per JPEG (predefinito 85), WEBP (predefinito 80) e AVIF (predefinito 30) e 0..9 per PNG (predefinito 9). Se il tipo non è chiaro dall'estensione del file, è possibile specificarlo utilizzando una delle costanti `ImageType`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Imposta il flag che indica se conservare le informazioni complete del canale alfa durante il salvataggio delle immagini PNG (a differenza della trasparenza a colore singolo).

L'alfablending deve essere disattivato (`alphaBlending(false)`) affinché il canale alfa venga mantenuto in primo luogo. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Scala l'immagine utilizzando l'algoritmo di interpolazione specificato. ([maggiori informazioni |https://www.php.net/manual/en/function.imagescale])


send(int $type=ImageType::JPEG, ?int $quality=null): void .[method]
-------------------------------------------------------------------
Invia l'immagine al browser.

La qualità della compressione è nell'intervallo 0..100 per JPEG (predefinito 85), WEBP (predefinito 80) e AVIF (predefinito 30) e 0..9 per PNG (predefinito 9).


setBrush(Image $brush): void .[method]
--------------------------------------
Imposta l'immagine del pennello da utilizzare in tutte le funzioni di disegno di linee (ad esempio `line()` e `polygon()`) quando si disegna con i colori speciali IMG_COLOR_BRUSHED o IMG_COLOR_STYLEDBRUSHED. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Imposta il ritaglio corrente, ovvero l'area oltre la quale non verranno disegnati pixel. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Imposta il metodo di interpolazione, che influisce sui metodi `rotate()` e `affine()`. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, ImageColor $color): void .[method]
-----------------------------------------------------------
Disegna un pixel alle coordinate specificate. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Imposta lo stile da utilizzare per tutte le funzioni di disegno di linee (ad esempio `line()` e `polygon()`) quando si disegna con il colore speciale IMG_COLOR_STYLED o linee di immagini con il colore IMG_COLOR_STYLEDBRUSHED. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Imposta lo spessore delle linee durante il disegno di rettangoli, poligoni, archi, ecc. a `$thickness` pixel. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Imposta l'immagine della piastrella da utilizzare in tutte le funzioni di riempimento delle regioni (ad esempio `fill()` e `filledPolygon()`) quando si riempie con il colore speciale IMG_COLOR_TILED.

Una piastrella è un'immagine utilizzata per riempire un'area con un motivo ripetuto. Qualsiasi immagine può essere utilizzata come piastrella e impostando l'indice del colore trasparente dell'immagine della piastrella con `colorTransparent()` è possibile creare una piastrella in cui alcune parti dell'area sottostante traspaiono. ([maggiori informazioni |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Applica nitidezza all'immagine.

.[note]
Richiede la presenza dell'estensione *Bundled GD*, quindi potrebbe non funzionare ovunque.


toString(int $type=ImageType::JPEG, ?int $quality=null): string .[method]
-------------------------------------------------------------------------
Salva l'immagine in una stringa.

La qualità della compressione è nell'intervallo 0..100 per JPEG (predefinito 85), WEBP (predefinito 80) e AVIF (predefinito 30) e 0..9 per PNG (predefinito 9).


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Converte un'immagine truecolor in una a tavolozza. ([maggiori informazioni |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
-----------------------------------------------------------------------------------------------------------------------------------------
Scrive il testo specificato nell'immagine. ([maggiori informazioni |https://www.php.net/manual/en/function.imagettftext])
