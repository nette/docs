Practices for Developers
************************


How to Render a Template
========================

How to render a template? Just use this simple code:

```php
$latte = new Latte\Engine;
$latte->setTempDirectory('/path/to/tempdir');

$params = [
	// parameters
];

// render to output
$latte->render('template.latte', $params);
// or render to variable
$output = $latte->renderToString('template.latte', $params);
```

The first time it is rendered, Latte compiles the template and caches the result. This is then automatically regenerated every time the template is changed, which can be turned off in the production environment to save a little performance:

```php
$latte->setAutoRefresh(false);
```


Parameters as a Class
=====================

You can also use an object instead of the `$params` array, which has some advantages. You get [type-safe notation|type-system], [nice suggestion in IDE|/recipes#integration]
and a way to [register filters|extending-latte#Filters Using the Class] and [functions|extending-latte#Functions Using the Class].

```php
class MailTemplate
{
	public function __construct(
		public string $lang = 'cs',
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplate(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Disabling Parameter Escaping
============================

If a parameter contains an HTML string that should no longer be escaped, wrap it in a `Latte\Runtime\Html` object:

```php
$params = [
	'article_body' => new Latte\Runtime\Html($article->html_body),
];
```

Latte doesn't only escapes these objects, but all objects implementing the `Latte\HtmlStringable` interface.

Linter: Validating the Template Syntax .{data-version:2.11}{toc: Linter}
========================================================================

The Linter tool will help you go through all templates and check for syntax errors. It is launched from the console:

```shell
vendor/bin/latte-lint <path>
```


Loading Templates from a String
===============================

Need to load templates from strings instead of files, perhaps for testing purposes? [StringLoader|extending-latte#stringloader] will help you:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Exception Handler
=================

You can define your own handler for expected exceptions. Exceptions raised inside [`{try}`|tags#try] and in the [sandbox] are passed to it.

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Automatic Layout Lookup
=======================

Using the tag [`{layout}`|template-inheritance#layout-inheritance], the template determines its parent template. It's also possible to have the layout searched automatically, which will simplify writing templates since they won't need to include the `{layout}` tag.

This is achieved as follows:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// it returns the path to the parent template file
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

If the template should not have a layout, it will indicate this with the `{layout none}` tag.


{{composer: latte/latte}}
