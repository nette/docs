Συμβουλές χρήσης του Composer
*****************************
<div class=perex>


Το Composer είναι ένα εργαλείο για τη διαχείριση εξαρτήσεων στην PHP. Σας επιτρέπει να δηλώσετε τις βιβλιοθήκες από τις οποίες εξαρτάται το έργο σας και θα τις εγκαταστήσει και θα τις ενημερώσει για εσάς. Θα μάθουμε:

- πώς να εγκαταστήσετε το Composer
- να το χρησιμοποιείτε σε νέο ή υπάρχον έργο

</div>


Εγκατάσταση .[#toc-installation]
================================

Το Composer είναι ένα εκτελέσιμο αρχείο `.phar` που μπορείτε να κατεβάσετε και να εγκαταστήσετε ως εξής.


Windows .[#toc-windows]
-----------------------

Χρησιμοποιήστε το επίσημο πρόγραμμα εγκατάστασης [Composer-Setup.exe |https://getcomposer.org/Composer-Setup.exe].


Linux, macOS .[#toc-linux-macos]
--------------------------------

Το μόνο που χρειάζεστε είναι 4 εντολές, τις οποίες μπορείτε να αντιγράψετε από [αυτή τη σελίδα |https://getcomposer.org/download/].

Επιπλέον, αντιγράφοντας σε φάκελο που βρίσκεται στο `PATH` του συστήματος, το Composer γίνεται παγκοσμίως προσβάσιμο:

```shell
$ mv ./composer.phar ~/bin/composer # or /usr/local/bin/composer
```


Χρήση στο Project .[#toc-use-in-project]
========================================

Για να αρχίσετε να χρησιμοποιείτε το Composer στο έργο σας, το μόνο που χρειάζεστε είναι ένα αρχείο `composer.json`. Αυτό το αρχείο περιγράφει τις εξαρτήσεις του έργου σας και μπορεί να περιέχει και άλλα μεταδεδομένα. Το απλούστερο `composer.json` μπορεί να μοιάζει ως εξής:

```js
{
	"require": {
		"nette/database": "^3.0"
	}
}
```

Λέμε εδώ, ότι η εφαρμογή μας (ή η βιβλιοθήκη) εξαρτάται από το πακέτο `nette/database` (το όνομα του πακέτου αποτελείται από ένα όνομα προμηθευτή και το όνομα του έργου) και θέλει την έκδοση που ταιριάζει με τον περιορισμό έκδοσης `^3.0`.

Έτσι, όταν έχουμε το αρχείο `composer.json` στη ρίζα του έργου και εκτελούμε:

```shell
composer update
```

Το Composer θα κατεβάσει τη βάση δεδομένων Nette στον κατάλογο `vendor`. Δημιουργεί επίσης ένα αρχείο `composer.lock`, το οποίο περιέχει πληροφορίες σχετικά με το ποιες ακριβώς εκδόσεις βιβλιοθηκών εγκατέστησε.

Το Composer δημιουργεί ένα αρχείο `vendor/autoload.php`. Μπορείτε απλά να συμπεριλάβετε αυτό το αρχείο και να αρχίσετε να χρησιμοποιείτε τις κλάσεις που παρέχουν αυτές οι βιβλιοθήκες χωρίς καμία επιπλέον εργασία:

```php
require __DIR__ . '/vendor/autoload.php';

$db = new Nette\Database\Connection('sqlite::memory:');
```


Ενημέρωση στην τελευταία έκδοση .[#toc-update-to-the-latest-version]
====================================================================

Για να ενημερώσετε όλα τα χρησιμοποιούμενα πακέτα στην τελευταία έκδοση σύμφωνα με τους περιορισμούς έκδοσης που ορίζονται στο `composer.json` χρησιμοποιήστε την εντολή `composer update`. Για παράδειγμα, για την εξάρτηση `"nette/database": "^3.0"` θα εγκαταστήσει την τελευταία έκδοση 3.x.x, αλλά όχι την έκδοση 4.

Για να ενημερώσετε τους περιορισμούς έκδοσης στο αρχείο `composer.json` σε π.χ. `"nette/database": "^4.1"`, για να μπορέσετε να εγκαταστήσετε την τελευταία έκδοση, χρησιμοποιήστε την εντολή `composer require nette/database`.

Για να ενημερώσετε όλα τα χρησιμοποιούμενα πακέτα Nette, θα πρέπει να τα απαριθμήσετε όλα στη γραμμή εντολών, π.χ:

```shell
composer require nette/application nette/forms latte/latte tracy/tracy ...
```

Το οποίο είναι πρακτικά ανέφικτο. Επομένως, χρησιμοποιήστε ένα απλό σενάριο "Composer Frontline":https://gist.github.com/dg/734bebf55cf28ad6a5de1156d3099bff που θα το κάνει για εσάς:

```shell
php composer-frontline.php
```


Δημιουργία νέου έργου .[#toc-creating-new-project]
==================================================

Το νέο έργο Nette μπορεί να δημιουργηθεί με την εκτέλεση μιας απλής εντολής:

```shell
composer create-project nette/web-project name-of-the-project
```

Αντί για το `name-of-the-project` θα πρέπει να δώσετε το όνομα του καταλόγου για το έργο σας και να εκτελέσετε την εντολή. Το Composer θα φέρει το αποθετήριο `nette/web-project` από το GitHub, το οποίο περιέχει ήδη το αρχείο `composer.json`, και αμέσως μετά θα εγκαταστήσει το ίδιο το Nette Framework. Το μόνο που απομένει είναι να [ελέγξετε τα δικαιώματα εγγραφής |nette:troubleshooting#setting-directory-permissions] στους καταλόγους `temp/` και `log/` και είστε έτοιμοι να ξεκινήσετε.


Έκδοση PHP .[#toc-php-version]
==============================

Το Composer εγκαθιστά πάντα τις εκδόσεις των πακέτων που είναι συμβατές με την έκδοση της PHP που χρησιμοποιείτε αυτή τη στιγμή. Η οποία, βέβαια, μπορεί να μην είναι η ίδια έκδοση με την PHP του web host σας. Ως εκ τούτου, είναι χρήσιμο να προσθέσετε πληροφορίες σχετικά με την έκδοση της PHP στον κεντρικό υπολογιστή στο αρχείο `composer.json`, και τότε θα εγκατασταθούν μόνο οι εκδόσεις των πακέτων που είναι συμβατές με τον κεντρικό υπολογιστή:

```js
{
	"require": {
		...
	},
	"config": {
		"platform": {
			"php": "7.2"   # PHP version on host
		}
	}
}
```


Packagist.org - Παγκόσμιο αποθετήριο .[#toc-packagist-org-global-repository]
============================================================================

[Το Packagist |https://packagist.org] είναι το κύριο αποθετήριο πακέτων, στο οποίο το Composer προσπαθεί να αναζητήσει πακέτα, αν δεν του έχει ειπωθεί κάτι διαφορετικό. Μπορείτε επίσης να δημοσιεύσετε τα δικά σας πακέτα εδώ.


Τι γίνεται αν δεν θέλουμε το κεντρικό αποθετήριο .[#toc-what-if-we-don-t-want-the-central-repository]
-----------------------------------------------------------------------------------------------------

Αν έχουμε εσωτερικές εφαρμογές ή βιβλιοθήκες στην εταιρεία μας, οι οποίες δεν μπορούν να φιλοξενηθούν δημόσια στο Packagist, μπορούμε να δημιουργήσουμε τα δικά μας αποθετήρια για αυτά τα έργα.

Περισσότερα για τα αποθετήρια στην [επίσημη τεκμηρίωση |https://getcomposer.org/doc/05-repositories.md#repositories].


Αυτόματη φόρτωση .[#toc-autoloading]
====================================

Ένα βασικό χαρακτηριστικό του Composer είναι ότι παρέχει αυτόματη φόρτωση για όλες τις κλάσεις που εγκαθιστά, την οποία ξεκινάτε συμπεριλαμβάνοντας ένα αρχείο `vendor/autoload.php`.

Ωστόσο, είναι επίσης δυνατό να χρησιμοποιήσετε το Composer για να φορτώσετε άλλες κλάσεις εκτός του φακέλου `vendor`. Η πρώτη επιλογή είναι να αφήσετε το Composer να σαρώσει τους καθορισμένους φακέλους και υποφακέλους, να βρει όλες τις κλάσεις και να τις συμπεριλάβει στον αυτόματο επαναφορτωτή. Για να το κάνετε αυτό, ορίστε το `autoload > classmap` στο `composer.json`:

```js
{
	"autoload": {
		"classmap": [
			"src/",      #  includes the src/ folder and its subfolders
		]
	}
}
```

Στη συνέχεια, είναι απαραίτητο να εκτελείτε την εντολή `composer dumpautoload` με κάθε αλλαγή και να αφήνετε τους πίνακες αυτόματης φόρτωσης να αναγεννώνται. Αυτό είναι εξαιρετικά άβολο και είναι πολύ καλύτερο να αναθέσετε αυτή την εργασία στο [RobotLoader |robot-loader:], το οποίο εκτελεί την ίδια δραστηριότητα αυτόματα στο παρασκήνιο και πολύ πιο γρήγορα.

Η δεύτερη επιλογή είναι να ακολουθήσετε το [PSR-4 |https://www.php-fig.org/psr/psr-4/]. Με απλά λόγια, πρόκειται για ένα σύστημα όπου τα namespaces και τα ονόματα των κλάσεων αντιστοιχούν στη δομή των καταλόγων και των ονομάτων των αρχείων, δηλαδή το `App\Router\RouterFactory` βρίσκεται στο αρχείο `/path/to/App/Router/RouterFactory.php`. Παράδειγμα διαμόρφωσης:

```js
{
	"autoload": {
		"psr-4": {
			"App\\": "app/"   # the App\ namespace is in the app/ directory
		}
	}
}
```

Ανατρέξτε στην [Τεκμηρίωση του Composer |https://getcomposer.org/doc/04-schema.md#psr-4] για τον ακριβή τρόπο διαμόρφωσης αυτής της συμπεριφοράς.


Δοκιμές νέων εκδόσεων .[#toc-testing-new-versions]
==================================================

Θέλετε να δοκιμάσετε μια νέα έκδοση ανάπτυξης ενός πακέτου. Πώς να το κάνετε; Αρχικά, προσθέστε αυτό το ζευγάρι επιλογών στο αρχείο `composer.json`, το οποίο θα σας επιτρέψει να εγκαταστήσετε εκδόσεις ανάπτυξης πακέτων, αλλά θα το κάνει μόνο αν δεν υπάρχει συνδυασμός σταθερών εκδόσεων που να ικανοποιεί τις απαιτήσεις:

```js
{
	"minimum-stability": "dev",
	"prefer-stable": true,
}
```

Συνιστούμε επίσης να διαγράψετε το αρχείο `composer.lock`, επειδή μερικές φορές το Composer αρνείται ακατανόητα να εγκαταστήσει και αυτό θα λύσει το πρόβλημα.

Ας υποθέσουμε ότι το πακέτο είναι `nette/utils` και η νέα έκδοση είναι 4.0. Το εγκαθιστάτε με την εντολή:

```shell
composer require nette/utils:4.0.x-dev
```

Ή μπορείτε να εγκαταστήσετε μια συγκεκριμένη έκδοση, για παράδειγμα 4.0.0-RC2:

```shell
composer require nette/utils:4.0.0-RC2
```

Εάν ένα άλλο πακέτο εξαρτάται από τη βιβλιοθήκη και είναι κλειδωμένο σε μια παλαιότερη έκδοση (π.χ. `^3.1`), είναι ιδανικό να ενημερώσετε το πακέτο ώστε να λειτουργεί με τη νέα έκδοση.
Ωστόσο, αν θέλετε απλώς να παρακάμψετε τον περιορισμό και να αναγκάσετε το Composer να εγκαταστήσει την έκδοση ανάπτυξης και να προσποιηθεί ότι είναι μια παλαιότερη έκδοση (π.χ. 3.1.6), μπορείτε να χρησιμοποιήσετε τη λέξη-κλειδί `as`:

```shell
composer require nette/utils "4.0.x-dev as 3.1.6"
```


Κλήση εντολών .[#toc-calling-commands]
======================================

Μπορείτε να καλέσετε τις δικές σας προσαρμοσμένες εντολές και σενάρια μέσω του Composer σαν να ήταν εγγενείς εντολές του Composer. Τα σενάρια που βρίσκονται στο φάκελο `vendor/bin` δεν χρειάζεται να προσδιορίσουν αυτόν το φάκελο.

Ως παράδειγμα, ορίζουμε μια δέσμη ενεργειών στο αρχείο `composer.json` που χρησιμοποιεί [το Nette Tester |tester:] για την εκτέλεση δοκιμών:

```js
{
	"scripts": {
		"tester": "tester tests -s"
	}
}
```

Στη συνέχεια, εκτελούμε τις δοκιμές με το `composer tester`. Μπορούμε να καλέσουμε την εντολή ακόμη και αν δεν βρισκόμαστε στον ριζικό φάκελο του έργου, αλλά σε έναν υποκατάλογο.


Αποστολή ευχαριστιών .[#toc-send-thanks]
========================================

Θα σας δείξουμε ένα κόλπο που θα κάνει τους συγγραφείς ανοιχτού κώδικα ευτυχισμένους. Μπορείτε εύκολα να δώσετε ένα αστέρι στο GitHub στις βιβλιοθήκες που χρησιμοποιεί το έργο σας. Απλά εγκαταστήστε τη βιβλιοθήκη `symfony/thanks`:

```shell
composer global require symfony/thanks
```

Και στη συνέχεια εκτελέστε:

```shell
composer thanks
```

Δοκιμάστε το!


Διαμόρφωση .[#toc-configuration]
================================

Το Composer είναι στενά ενσωματωμένο με το εργαλείο ελέγχου εκδόσεων [Git |https://git-scm.com]. Εάν δεν χρησιμοποιείτε το Git, είναι απαραίτητο να το δηλώσετε στο Composer:

```shell
composer -g config preferred-install dist
```

{{sitename: Best Practices}}
