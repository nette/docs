Konfigurace
***********

.[perex]
Přehled všech konfiguračních voleb v Nette Frameworku.

Různé součásti Nette nastavujeme pomocí [konfiguračních souborů |bootstrap#konfigurace-di-kontejneru]. Ty se obykle zapisují ve formátu NEON, který si můžete [vyzkoušet online |https://ne-on.org]. K editaci doporučujeme [editory s podporou|editors-and-tools#ide-editor] tohoto formátu.

<pre>
"application .[prism-token prism-atrule]":[#Application]: 	"Application .[prism-token prism-comment]"<br>
"constants .[prism-token prism-atrule]":[#Constants]: 	"Definice PHP konstant .[prism-token prism-comment]"<br>
"database .[prism-token prism-atrule]":[#Databáze]: 	"Databáze .[prism-token prism-comment]"<br>
"decorator .[prism-token prism-atrule]":[#decorator]: 	"Dekorátor .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"DI kontejner .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Extensions]: 	"Instalace dalších DI rozšíření .[prism-token prism-comment]"<br>
"forms .[prism-token prism-atrule]":[#Formuláře]: 		"Formuláře .[prism-token prism-comment]"<br>
"http .[prism-token prism-atrule]":[#HTTP hlavičky]: 		"HTTP hlavičky .[prism-token prism-comment]"<br>
"latte .[prism-token prism-atrule]":[#Šablony Latte]: 		"Šablony Latte .[prism-token prism-comment]"<br>
"mail .[prism-token prism-atrule]":[#Maily]: 		"Maily .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[di-services#parametry]: 	"Parametry .[prism-token prism-comment]"<br>
"php .[prism-token prism-atrule]":[#Php]: 			"PHP konfigurace .[prism-token prism-comment]"<br>
"routing .[prism-token prism-atrule]":[#Routování]: 		"Routování .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Automatická registrace služeb .[prism-token prism-comment]"<br>
"security .[prism-token prism-atrule]":[#Přístupová oprávnění]: 	"Přístupová oprávnění .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[di-services#sluzby]: 		"Služby .[prism-token prism-comment]"<br>
"session .[prism-token prism-atrule]":[#Session]: 		"Session .[prism-token prism-comment]"<br>
"tracy .[prism-token prism-atrule]":[#Tracy debugger]: 		"Tracy debugger .[prism-token prism-comment]"
</pre>


Application
===========

Základní nastavení chování [Nette Application|application].

```neon
application:
	# zobrazit "Nette Application" panel v Tracy BlueScreen?
	debugger: ...           # (bool) výchozí je true

	# bude se při chybě volat error-presenter?
	catchExceptions: ...    # (bool) výchozí je true v produkčním režimu

	# název error-presenteru
	errorPresenter: Error   # (string) výchozí je 'Nette:Error'

	# chybné odkazy negenerují varování?
	# má efekt pouze ve vývojářském režimu
	silentLinks: ...        # (bool) výchozí je false
```

Protože ve vývojovém režimu se error-presentery standardně nevolají a chybu zobrazí až Tracy, změnou hodnoty `catchExceptions` na `true` můžeme při vývoji ověřit jejich správnou funkčnost.

Volba `silentLinks` určuje, jak se Nette zachová ve vývojářském režimu, když se nepodaří vygenerovat odkaz. Výchozí hodnota `false` znamená, že Nette vyhodí `E_USER_WARNING` chybu. Nastavením na `true` dojde k potlačení této chybové hlášky. V produkčním prostředí se `E_USER_WARNING` vyvolá vždy. Toto chování můžeme také ovlivnit nastavením proměnné [Presenteru::$invalidLinkMode|link-generation#neplatne-odkazy].


Mapování
--------

Definuje pravidla, podle kterých se z názvu presenteru (třeba `Homepage`) odvodí název třídy (třeba `App\Presenters\HomepagePresenter`). Pro každý modul může být jiné pravidlo, `*` představuje jakýkoliv modul:

```neon
application:
	mapping:
		Admin: [App\Admin, *Module, *Presenter]
		*: [App, Modules\*, Presenters\*Presenter]
```

Pro presenter `Admin:User:Edit` se uplatní první pravidlo, jelikož je součástí modulu `Admin`. Pravidlo tedy zní `[App\Admin, *Module, *Presenter]`. Spojí se první část `App\Admin`, druhá, kde se za hvězdičku dosadí název submodulu `User` a vznikne `UserModule`, a nakonec třetí, kde se za hvězdičku dosadí název presenteru `Edit` a vznikne `EditPresenter`. Výsledný název třídy tak bude `App\Admin\UserModule\EditPresenter`.

Pro presenter `Front:Blog:Article` se uplatní druhé hvězdičkové pravidlo, protože modul `Front` nemá žádný vlastní mapping. Spojí se první část `App`, ve druhé se za hvězdičku dosadí postupně modul `Front` a submodul `Blog`, takže vznikne `Modules\Front` a `Modules\Blog`, a nakonec ve třetí části se za hvězdičku dosadí název presenteru `Article`, takže výsledný název třídy bude `App\Modules\Front\Modules\Blog\Presenters\ArticlePresenter`.

Pokud druhá část pravidla neobsahuje lomítko (např. `*Module`, ale nikoliv `Modules\*`), můžeme použít zjednodušený spojený zápis:

```neon
application:
	mapping:
		Admin: App\Admin\*Module\*Presenter
```

Výchozí hodnotou je `*: *Module\*Presenter`.


Automatická registrace presenterů
---------------------------------

Nette automaticky přidává presentery jako služby do DI kontejneru, což zásadně zrychlí jejich vytváření. Jak Nette presentery dohledává lze konfigurovat:

```neon
application:
	# hledat presentery v Composer class map?
	scanComposer: ...      # (bool) výchozí je true

	# jaký řetězec musí obsahovat název třídy a souboru?
	scanFilter: ...        # (string) výchozí je 'Presenter'

	# ve kterých adresářích hledat presentery?
	scanDirs:              # (string[]|false) výchozí je '%appDir%'
		- %vendorDir%/mymodule
```

Adresáře uvedené v `scanDirs` nepřepisují výchozí hodnotu `%appDir%`, ale doplňují ji, `scanDirs` tedy bude obsahovat obě cesty `%appDir%` a `%vendorDir%/mymodule`. Pokud bychom chtěli výchozí adresář vynechat, použijeme [vykřičník |di-services#toc-vice-konfiguracnich-souboru], který hodnotu přepíše:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

Skenování adresářů lze vypnout uvedením hodnoty false. Nedoporučujeme úplně potlačit automatické přidávání presenterů, protože jinak dojde ke snížení výkonu aplikace.



Constants
=========

Vytváření PHP konstant.

```neon
constants:
	FOOBAR: 'baz'
```

Po nastartování aplikace bude k dispozici konstanta `FOOBAR`.



Databáze
========

Konfigurace jednoho či více databázových spojení pro [Nette Database |database].

```neon
database:
	# DSN, jedinný povinný klíč
	dsn: "sqlite:%appDir%/Model/demo.db"

	# uživatelské jméno
	user: ...

	# heslo
	password: ...
```

Vytvoří služby typu `Nette\Database\Connection` a také `Nette\Database\Context` pro vrstvu [Database Explorer]. Databáze se obvykle předává autowiringem, není-li to možné, použijte názvy služeb `@database.default.connection` resp. `@database.default.context`.

Další nastavení:

```neon
database:
	# zobrazit database panel v Tracy Bar?
	debugger: ...     # (bool) výchozí je true

	# zobrazit EXPLAIN dotazů v Tracy Bar?
	explain: ...      # (bool) výchozí je true

	# povolit autowiring pro toto spojení?
	autowired: ...    # (bool) výchozí je true u prvního připojení

	# konvence tabulek: discovered, static nebo jméno třídy
	conventions: discovered  # (string) výchozí je 'discovered'

	options:
		# připojovat se k databázi teprve když je potřeba?
		lazy: ...     # (bool) výchozí je false

		# PHP třída ovladače databáze
		driverClass:  # (string)

		# lze uvádět volby, které najdete v dokumentaci ovladačů PDO
		PDO::MYSQL_ATTR_COMPRESS: true
```

V konfiguračním souboru můžeme definovat i více databázových spojení rozdělením do pojmenovaných sekcí:

```neon
database:
	main:
		dsn: 'mysql:host=127.0.0.1;dbname=test'
		user: root
		password: password

	another:
		dsn: 'sqlite::memory:'
```

Každé takto definované spojení vytváří služby zahrnující v názvu i název sekce, tj. `@database.main.connection` & `@database.main.context` a dále `@database.another.connection` & `@database.another.context`.

Autowiring je zapnutý jen u služeb z první sekce. Lze to změnit pomocí `autowired: false` nebo `autowired: true`. Neautowirované služby předáváme explicitně:

```neon
services:
	- UserManager(@database.another.connection)
```


Decorator
=========

Slouží pro nastavení tagů nebo doplnění `setup` (např. volání metod, nastavení proměnných) u všech služeb určité třídy nebo implementujících určité rozhraní.

```neon
decorator:
	# klíč je název třídy nebo rozhraní
	App\Repository\AbstractRepository:
		setup:
			- setConnection
		inject: true

	App\Component\BaseControl:
		setup:
			- setTranslator(@mytranslator)
		tags: [view]
```


DI
===

Technické nastavení DI kontejneru.

```neon
di:
	# zobrazit DIC v Tracy Bar?
	debugger: ...        # (bool) výchozí je true

	# typy parametrů, které nikdy neautowirovat
	excluded: ...        # (string[])

	# třída, od které dědí DI kontejner
	parentClass: ...     # (string) výchozí je Nette\DI\Container
```

Součástí třídy DI kontejneru je i spousta meta dat. Můžete zmenšit třídu tím, že vypnete předávání parametrů, pokud nevyužíváte `$container->parameters`, předávání tagů, pokud nevoláte `$container->findByTag()`, a výrazně zredukovat metadata pro autowiring vyjmenováním tříd, které používáte jako parameter metody `$container->getByType()`. Příklad:

```neon
di:
	export:
		# exportovat parametry?
		parameters: no   # (bool) výchozí je true

		# exportovat tagy a které?
		tags: no         # (string[]|bool) výchozí jsou všechny

		# exportovat data pro autowiring a které?
		types:          # (string[]|bool) výchozí jsou všechny
			- Nette\Database\Connection
			- Nette\Application\Application
```


Extensions
==========

Registrace dalších DI rozšíření. Tímto způsobem přidáme např. DI rozšíření `Dibi\Bridges\Nette\DibiExtension22` pod názvem `dibi`

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Následně ho tedy konfigurujeme v sekci `dibi`:

```neon
dibi:
	host: localhost
```

Jako rozšíření lze přidat i třídu, která má parametry:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Formuláře
=========

V konfiguračním souboru lze změnit výchozí chybové hlášky formulářů.

```neon
forms:
	messages:
		EQUAL: 'Zadejte %s.'
		NOT_EQUAL: 'Tato hodnota by neměla být %s.'
		FILLED: 'Toto pole je povinné.'
		BLANK: 'Toto pole by mělo být prázdné.'
		MIN_LENGTH: 'Zadejte prosím alespoň %d znaků.'
		MAX_LENGTH: 'Zadejte prosím maximálně %d znaků.'
		LENGTH: 'Zadejte prosím hodnotu %d až %d znaků dlouho.'
		EMAIL: 'Zadejte platnou e-mailovou adresu.'
		URL: 'Zadejte prosím platné URL.'
		INTEGER: 'Zadejte platné celé číslo.'
		FLOAT: 'Zadejte platné číslo.'
		MIN: 'Zadejte prosím hodnotu větší nebo rovnou %d.'
		MAX: 'Zadejte prosím hodnotu menší nebo rovnou %d.'
		RANGE: 'Zadejte hodnotu mezi %d a %d.'
		MAX_FILE_SIZE: 'Velikost nahraného souboru může být nejvýše %d bytů.'
		MAX_POST_SIZE: 'Nahraná data překračují limit %d bytů.'
		MIME_TYPE: 'Nahraný soubor není v očekávaném formátu.'
		IMAGE: 'Nahraný soubor musí být obraz ve formátu JPEG, GIF, PNG nebo WebP.'
		Nette\Forms\Controls\SelectBox::VALID: 'Vyberte prosím platnou možnost.'
		Nette\Forms\Controls\UploadControl::VALID: 'Při nahrávání souboru došlo k chybě.'
		Nette\Forms\Controls\CsrfProtection::PROTECTION: 'Vaše relace vypršela. Vraťte se na domovskou stránku a zkuste to znovu.'
```


HTTP hlavičky
=============

```neon
http:
	# hlavičky, které se s každým požadavkem odešlou
	headers:
		X-Powered-By: MyCMS

	# ovlivňuje hlavičku X-Frame-Options
	frames: ...      # (string|bool) výchozí je 'SAMEORIGIN'
```

Framework z bezpečnostních důvodů odesílá hlavičku `X-Frame-Options: SAMEORIGIN`, která říká, že stránku lze zobrazit uvnitř jiné stránky (v elementu IFRAME) pouze pokud se nachází na stejné doméně. To může být v některých situacích nežádoucí (například pokud vyvíjíte aplikaci pro Facebook), chování lze proto vypnout nastavením položky `frames: true`.

Snadno lze sestavovat hlavičky `Content-Security-Policy`, `Content-Security-Policy-Report-Only` a `Feature Policy`, více informací najdete v [dokumentaci CSP |https://content-security-policy.com] a [Feature Policy|https://developers.google.com/web/updates/2018/06/feature-policy]. Kolem klíčových slov jako `'self'` není potřeba uvádět uvozovky.

```neon
http:
	# Content Security Policy
	csp:
		script-src: [
			nonce, strict-dynamic # pro prohlížeče podporující CSP Level 3
			*, unsafe-inline      # pro prohlížeče nepodporující CSP Level 3
		]

	# Content Security Policy Report Only
	cspReportOnly:
		default-src: self
		report-uri: 'https://my-report-uri-endpoint'

	# Feature Policy
	featurePolicy:
		unsized-media: none
		geolocation:
			- self
			- https://example.com
```


HTTP cookie
-----------

Metoda `Nette\Http\Response::setCookie()` standardně odesílá cookie s těmito parametry:
- se scope pro aktuální doménu (ale nikoliv subdomény)
- a všechny adresáře (`Path = '/'`)
- s příznakem `HttpOnly` (cookie je pro JavaScript nepřístupná)
- bez příznaku `SameSite`
- bez příznaku `Secure`

Toto chování lze měnit konfigurací:

```neon
http:
	# posílat cookie pouze přes HTTPS?
	cookieSecure: ...      # (bool|auto) výchozí je false
```

HTTP proxy
----------

Pokud web běží za HTTP proxy, zadejte její IP adresu, aby správně fungovala detekce IP adresy klienta (`Nette\Http\Request::getRemoteAddress()`).

```neon
http:
	# IP adresa, rozsah, název hostitele nebo pole těchto hodnot
	proxy: 127.0.0.1       # (string|string[]) výchozí je nenastaveno
```


Šablony Latte
=============

Tímto nastavením lze globálně ovlivnit chování Latte v komponentách a presenterech.

```neon
latte:
	# přepne Latte do XHTML režimu
	xhtml: ...           # (bool) výchozí je false

	# generuje šablony s hlavičkou declare(strict_types=1)
	strictTypes: ...     # (bool) výchozí je false

	# třída objektu $this->template
	templateClass: App\MyTemplateClass # výchozí je Nette\Bridges\ApplicationLatte\Template
```

Dále lze registrovat nové tagy (makra) a to buď uvedením jména třídy, nebo referencí na službu. Jako výchozí je zavolána metoda `install()`, ale to lze změnit tím, že uvedeme jméno jiné metody:

```neon
latte:
	# registrace uživatelských Latte značek
	macros:
		- App\MyLatteMacros::register         # statická metoda, classname nebo callable
		- @App\MyLatteMacrosFactory           # služba s metodou install()
		- @App\MyLatteMacrosFactory::register # služba s metodou register()

services:
	- App\MyLatteMacrosFactory
```


Maily
=====

Pro odesílání emailu se standardně používá mailer [api:Nette\Mail\SendmailMailer], který se dále nekonfiguruje. Můžeme jej však přepnout na [api:Nette\Mail\SmtpMailer]:

```neon
mail:
	# použije SmtpMailer
	smtp: true       # (bool) výchozí je false

	host: ...        # (string)
	port: ...        # (int)
	username: ...    # (string)
	password: ...    # (string)
	timeout: ...     # (int)
	secure: ...      # (ssl|tls|null) výchozí je null
	clientHost: ...  # (string) výchozí je $_SERVER['HTTP_HOST']
	persistent: ...  # (bool) výchozí je false

	# kontext pro připojení k SMTP serveru, viz stream_context_create()
	context:         # (array) výchozí je stream_context_get_default()
```

Pro zvýšení důvěryhodnosti můžeme emaily podpisovat pomocí [technologie DKIM |https://blog.nette.org/cs/podepisujte-emaily-pomoci-dkim]:

```neon
mail:
	dkim:
		domain: myweb.com
	    selector: lovenette
	    privateKey: %appDir%/cert/dkim.priv
	    passPhrase: ...
	    testMode: ...
```


PHP
===

Nastavení direktiv PHP. Přehled všech direktiv naleznete na [php.net |http://php.net/manual/en/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```


Routování
=========

Základní nastavení:

```neon
routing:
	# zobrazit routovací panel v Tracy Bar?
	debugger: ...   # (bool) výchozí je true

	# serializuje router do DI kontejneru
	cache: ...      # (bool) výchozí je false
```

Routování obvykle definujeme ve třídě RouterFactory, omezenější alternativou je definice v konfiguračním souboru pomocí dvojic `maska: akce`:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```



Search
======

Automatické přidávání služeb do DI kontejneru nesmírně zpříjemňuje práci. Nette automaticky přidává do kontejneru presentery, lze však snadno přidávat i jakékoliv jiné třídy.

Stačí uvést, ve kterých adresářích (a podadresářích) má třídy hledat:

```neon
search:
	# názvy sekcí si volíte sami
	formuláře:
		in: %appDir%/Forms

	model:
		in: %appDir%/Model
```

Obvykle ovšem nechceme přidávat úplně všechny třídy a rozhraní, proto je můžeme filtrovat:

```neon
search:
	formuláře:
		in: %appDir%/Forms

		# filtrování podle názvu souboru (string|string[])
		files:
			- *Factory.php

		# filtrování podle názvu třídy (string|string[])
		classes:
			- *Factory
```

Nebo můžeme vybírat třídy, které dědí či implementují alespoň jednu z uvedených tříd:


```neon
search:
	formuláře:
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Lze definovat i vylučující pravidla, tj. masky názvu třídy nebo dědičné předky, které pokud vyhovují, služba se do DI kontejneru nepřidá:

```neon
search:
	formuláře:
		exclude:
			classes: ...
			extends: ...
			implements: ...
```

Všem službám lze nastavit tagy:

```neon
search:
	formuláře:
		tags: ...
```



Přístupová oprávnění
====================

V konfiguračním souboru lze definovat seznam uživatelů a tak vytvořit jednoduchý authenticator (`Nette\Security\SimpleAuthenticator`). Protože se v konfiguračním souboru uvádějí hesla v čitelné podobě, je tohle řešení vhodné pouze pro testovací účely.

```neon
security:
	# zobrazit panel uživatele v Tracy Bar?
	debugger: ...  # (bool) výchozí je true

	# jména a hesla uživatelů
	users:
		frantisek: tajneheslo
```

Dále lze definovat `roles`, `resources` a také role jednotlivých uživatelů a vytvořit tak autorizátor (`Nette\Security\Permission`):

```neon
security:
	roles:
		guest:
		member:
		admin: [member]  # admin dědí od membera

	resources:
		file:

	# jména, hesla a role uživatelů
	users:
		frantisek:
			password: tajneheslo
			roles: [member]
			data: ...
```

Session
=======

Základní nastavení:

```neon
session:
	# zobrazit session panel v Tracy Bar?
	debugger: ...        # (bool) výchozí je false

	# doba neaktivity po které session vyexpiruje
	expiration: 14 days  # (string) výchozí je '3 hours'

	# startovat automaticky session?
	# 'smart' startuje session pokud je již vytvořena
	autoStart: ...       # (bool|smart) výchozí je 'smart'
```

Nastavení cookie se přebírá z nastavení [#HTTP cookie], můžete navíc upravit volby `cookieDomain` a `cookieSamesite`.

Atribut `cookieDomain` určuje, kteří domény mohou cookie přijímat. Není-li uveden, cookie přijímá stejná doména, jako ji nastavila, *kromě* subdomén. Pokud je `cookieDomain` zadán, jsou zahrnuty i subdomény.
Proto je uvedení `cookieDomain` méně omezující než vynechání. Pokud je například nastaveno `cookieDomain: nette.org`, pak jsou cookies dostupné na subdoménách, jako je `doc.nette.org`. Téhož lze dosáhnout zápisem `cookieDomain: domain`.

Atribut `cookieSamesite` vyžaduje, aby soubor cookie nebyl odesílán při přístupu z jíné domény, což poskytuje určitou ochranu před útoky cross-site request forgery attacks (CSRF). Možné hodnoty jsou Strict, Lax a None.

```neon
session:
	# domény, které přijímají cookie
	cookieDomain: 'example.com'  # (string) výchozí je nenastaveno

	# požadavek, aby cookie nebyla zasílán při přístupu z jiné domény
	cookieSamesite: Lax          # (Strict|Lax|None) výchozí je nenastaveno
```

Dále lze nastavovat všechny PHP [direktivy |http://www.php.net/manual/en/session.configuration.php] (ve formátu camelCase) a také [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters]:

```neon
session:
	# 'session.name' zapíšeme jako 'name'
	name: MYID

	# 'session.save_path' zapíšeme jako 'savePath'
	savePath: "%tempDir%/sessions"
```


Tracy debugger
==============

V konfiguračním souboru lze nastavovat parametry [Tracy |tracy:] a také přidávat nové panely do Tracy Bar. Tyto nastavení se aplikují teprve po vytvoření DI kontejeru, takže chyby vzniklé předtím je nemohou reflektovat.

Konfigurace logování chyb:

```neon
tracy:
	# email, na který se posílají notifikace, že došlo k chybě
	email: dev@example.com           # (string|string[]) výchozí je nenastaveno

	# odesílatel emailu
	fromEmail: robot@example.com     # (string) výchozí je nenastaveno

	# použít pro odesílání emailů Nette mailer? (od Tracy 2.5)
	netteMailer: ...                 # (bool) výchozí je true

	# pro jaké úrovně chyb se loguje i BlueScreen?
	logSeverity: [E_WARNING, E_NOTICE]  # výchozí je []
```

Konfigurace chování funkce `dump()`:

```neon
tracy:
	# maximální délka řetězce
	maxLength: 150             # (int) výchozí dle verze Tracy

	# maximální hloubka zanoření
	maxDepth: 10               # (int) výchozí dle verze Tracy

	# maximální počet prvků pole nebo objektu (od Tracy 2.9)
	maxItems: 100              # (int) výchozí dle verze Tracy

	# skrýt hodnoty těchto klíčů (od Tracy 2.9)
	keysToHide: [password, pass]  # (string[]) výchozí je []

	# vizuální téma (od Tracy 2.9)
	theme: dark                # (light|dark) výchozí je 'light'

	# zobrazit místo, kde byla volána funkce dump()?
	showLocation: ...          # (bool) výchozí dle verze Tracy
```

Instalace rozšíření Tracy:

```neon
tracy:
	# přidá panely do Tracy Bar
	bar:
		- Nette\Bridges\DITracy\ContainerPanel
		- IncludePanel
		- XDebugHelper('myIdeKey')
		- MyPanel(@MyService)

	# přidá panely do BlueScreen
	blueScreen:
		- DoctrinePanel::renderException
```

Ostatní volby:

```neon
tracy:
	# ve vývojovém režimu zobrazí chyby typu notice nebo warning jako BlueScreen
	strictMode: ...           # (bool) výchozí je true

	# zobrazit umlčené (@) chybové hlášky?
	scream: ...               # (bool) výchozí je false

	# formát odkazu pro otevření v editoru
	editor: ....              # (string) výchozí je 'editor://open/?file=%file&line=%line'

	# cesta k šabloně s vlastní stránkou pro chybu 500
	errorTemplate: ...        # (string) výchozí je nenastaveno

	# zobrazit Tracy Bar?
	showBar: ...              # (bool) výchozí je true

	editorMapping:
		# originál: nová
		/var/www/html: /data/web
		/home/web: /srv/html
```


Služby a úpravy
===============

Konfigurační soubor je místem, kam umísťujeme definice vlastních služeb. Slouží k tomu sekce `services`, podrobný popis najdete v kapitole [Služby |di-services].

Například takto může vypadat definice služby pojmenované `database`, což bude instance `PDO`:

```neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
```

Všechny výchozí služby lze ještě pozměnit na nižší úrovni. Třeba u služby `application.application`, což je standardně objekt `Nette\Application\Application`, můžeme změnit třídu:

```neon
services:
	application.application:
		factory: MyApplication
		alteration: true
```

Příznak `alteration` je informativní a říká, že jen modifikujeme existující službu.

Můžeme také doplnit setup:

```neon
services:
	application.application:
		factory: MyApplication
		alteration: true
		setup:
			- $onStartup = [@resource::init]
```

Také lze službu z kontejneru odstranit:

```neon
services:
	cache.journal: false
```
