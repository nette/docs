PHP Рефлексия
*************

.[perex]
[api:Nette\Utils\Reflection] е статичен клас с полезни функции за PHP рефлексия. Неговата задача е да коригира недостатъците на нативните класове и да уеднакви поведението в различните версии на PHP.


Инсталация:

```shell
composer require nette/utils
```

Всички примери предполагат създаден псевдоним:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Проверява дали рефлексията има достъп до PHPdoc коментари. Коментарите може да са недостъпни поради opcode кеш, вижте например директивата [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Разширява името на класа `$name` до пълното му име в контекста на класа `$context`, т.е. в контекста на неговото пространство от имена и дефинирани псевдоними. Тоест, всъщност казва как PHP парсерът би разбрал `$name`, ако беше записан в тялото на класа `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Връща рефлексия на метода, който съдържа декларацията на метода `$method`. Обикновено всеки метод е своя собствена декларация, но тялото на метода може да се намира и в trait и под друго име.

Тъй като PHP не предоставя достатъчно информация, с която може да се установи истинската декларация, Nette използва собствена евристика, която **би трябвало да бъде** надеждна.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Връща рефлексия на класа или trait-а, който съдържа декларацията на свойството `$prop`. Свойството може да бъде декларирано и в trait.

Тъй като PHP не предоставя достатъчно информация, с която може да се установи истинската декларация, Nette използва собствена евристика, която **не е** надеждна.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Проверява дали `$type` е вграден тип на PHP. В противен случай това е име на клас.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Използвайте [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Преобразува рефлексията в разбираем за човека низ.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
