Latte Funktionen
****************

.[perex]
Zusätzlich zu den üblichen PHP-Funktionen können Sie diese auch in Vorlagen verwenden.

.[table-latte-filters]
| `clamp` | [klemmt den Wert auf den Bereich |#clamp]
| `divisibleBy`| [prüft ob eine Variable durch eine Zahl teilbar ist |#divisibleBy]
| `even` | [prüft ob die angegebene Zahl gerade ist |#even]
| `first` | [gibt das erste Element eines Arrays oder ein Zeichen einer Zeichenkette zurück |#first]
| `last` | [gibt das letzte Element eines Arrays oder ein Zeichen einer Zeichenkette zurück |#last]
| `odd` | [prüft ob die angegebene Zahl ungerade ist |#odd]
| `slice` | [extrahiert einen Ausschnitt aus einem Array oder einer Zeichenkette|#slice]


Verwendung .[#toc-usage]
========================

Funktionen werden auf die gleiche Weise verwendet wie die üblichen PHP-Funktionen und können in allen Ausdrücken verwendet werden:

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

[Benutzerdefinierte Funktionen |extending-latte#functions] können auf diese Weise registriert werden:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

Wir verwenden sie in einer Vorlage wie dieser:

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Funktionen .[#toc-functions]
============================


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]{data-version:2.9}
----------------------------------------------------------------------------------------------
Gibt einen Wert zurück, der auf den gesamten Bereich von min und max begrenzt ist.

```latte
{=clamp($level, 0, 255)}
```

Siehe auch [Filter Klammer |filters#clamp]:


divisibleBy(int $value, int $by): bool .[method]{data-version:2.10.2}
---------------------------------------------------------------------
Prüft, ob eine Variable durch eine Zahl teilbar ist.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]{data-version:2.10.2}
-----------------------------------------------------
Prüft, ob die angegebene Zahl gerade ist.

```latte
{if even($num)} ... {/if}
```


first(string|array $value): mixed .[method]{data-version:2.10.2}
----------------------------------------------------------------
Gibt das erste Element eines Arrays oder ein Zeichen einer Zeichenkette zurück:

```latte
{=first([1, 2, 3, 4])}    {* gibt 1 *}
{=first('abcd')}          {* gibt 'a' *}
```

Siehe auch [last |#last], [filter first |filters#first].


last(string|array $value): mixed .[method]{data-version:2.10.2}
---------------------------------------------------------------
Gibt das letzte Element eines Arrays oder ein Zeichen einer Zeichenkette zurück:

```latte
{=last([1, 2, 3, 4])}    {* gibt 4 *}
{=last('abcd')}          {* gibt 'd' *}
```

Siehe auch [first |#first], [filter last |filters#last].


odd(int $value): bool .[method]{data-version:2.10.2}
----------------------------------------------------
Prüft, ob die angegebene Zahl ungerade ist.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, int $length=null, bool $preserveKeys=false): string|array .[method]{data-version:2.10.2}
-------------------------------------------------------------------------------------------------------------------------------
Extrahiert einen Ausschnitt aus einem Array oder einer Zeichenkette.

```latte
{=slice('hello', 1, 2)}           {* gibt 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* gibt ['b', 'c'] *}
```

Der Slice-Filter funktioniert wie die PHP-Funktion `array_slice` für Arrays und `mb_substr` für Strings mit einem Fallback auf `iconv_substr` im UTF-8-Modus.

Wenn start nicht negativ ist, beginnt die Sequenz an diesem Anfang in der Variablen. Wenn start negativ ist, beginnt die Sequenz so weit vom Ende der Variablen entfernt.

Wenn length angegeben wird und positiv ist, wird die Sequenz bis zu dieser Anzahl von Elementen enthalten. Wenn die Variable kürzer als die Länge ist, werden nur die verfügbaren Elemente der Variablen angezeigt. Wenn length angegeben wird und negativ ist, endet die Sequenz so viele Elemente vor dem Ende der Variablen. Wird sie weggelassen, enthält die Sequenz alle Elemente vom Offset bis zum Ende der Variablen.

Filter ordnet die Schlüssel des Integer-Arrays standardmäßig neu an und setzt sie zurück. Dieses Verhalten kann geändert werden, indem preserveKeys auf true gesetzt wird. String-Schlüssel werden immer beibehalten, unabhängig von diesem Parameter.
