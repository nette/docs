Практика за разработчици
************************


Инсталация .[#toc-installation]
===============================

Най-добрият начин да инсталирате Latte е да използвате Composer:

```shell
composer require latte/latte
```

Поддържани версии на PHP (важи за последните версии на кръпката Latte):

| версия | съвместима с PHP
|-----------------|-------------------
| Latte 3.0 | PHP 8.0 - 8.2
| Latte 2.11 | PHP 7.1 - 8.2
| Latte 2.8 - 2.10 | PHP 7.1 - 8.1


Как да визуализирате шаблон .[#toc-how-to-render-a-template]
============================================================

Как да визуализирам шаблон? Просто използвайте този прост код:

```php
$latte = new Latte\Engine;
// cache directory
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* template variables */ ];
// or $params = new TemplateParameters(/* ... */);

// render to output
$latte->render('template.latte', $params);
// or render to variable
$output = $latte->renderToString('template.latte', $params);
```

Параметрите могат да бъдат масиви или още по-добре [обекти |#Parameters-as-a-Class], което ще осигури проверка на типа и предложение в редактора.

.[note]
Примери за използване можете да намерите и в хранилището за [примери на Latte |https://github.com/nette-examples/latte].


Производителност и кеширане .[#toc-performance-and-caching]
===========================================================

Шаблоните на Latte са изключително бързи, тъй като Latte ги компилира директно в код на PHP и ги кешира на диска. По този начин те нямат допълнителни разходи в сравнение с шаблоните, написани на чист PHP.

Кешът се актуализира автоматично при всяка промяна на изходния файл. По този начин можете удобно да редактирате шаблоните Latte по време на разработката и веднага да видите промените в браузъра си. Можете да деактивирате тази функция в производствена среда и да спестите част от производителността:

```php
$latte->setAutoRefresh(false);
```

При внедряване в производствен сървър първоначалното генериране на кеш, особено за големи приложения, може да отнеме известно време. Latte има вградена защита срещу "нахлуване на кеш:https://en.wikipedia.org/wiki/Cache_stampede".
Това е ситуация, в която сървърът получава голям брой едновременни заявки и тъй като кешът Latte все още не съществува, всички те ще го генерират едновременно. Това води до прескачане на процесора.
Latte е умен и когато има няколко едновременни заявки, само първата нишка генерира кеша, а останалите изчакват и след това го използват.


Параметри като клас .[#toc-parameters-as-a-class]
=================================================

Вместо да подавате променливи към шаблона като масиви, създайте клас. Получавате [типово безопасен запис |type-system]- [хубаво предложение в IDE |recipes#Editors-and-IDE]
и начин за [регистриране на филтри |extending-latte#Filters-Using-the-Class] и [функции |extending-latte#Functions-Using-the-Class].

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Деактивиране на автоматичното изтриване на променливи .[#toc-disabling-auto-escaping-of-variable]
=================================================================================================

Ако дадена променлива съдържа HTML низ, можете да го маркирате така, че Latte да не го екранира автоматично (и следователно два пъти). По този начин се избягва нуждата от задаване на `|noescape` в шаблона.

Най-лесният начин е да обвиете низа в обект `Latte\Runtime\Html`:

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

Latte също така не избягва всички обекти, които имплементират интерфейса `Latte\HtmlStringable`. Така че можете да създадете свой собствен клас, чийто метод `__toString()` ще връща HTML код, който не е автоматично ескапиран:

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
Методът `__toString` трябва да връща валиден HTML и да гарантира, че параметрите са ескейпнати, в противен случай може да възникне уязвимост XSS!


Как да разширите Latte с филтри, тагове и др. .[#toc-how-to-extend-latte-with-filters-tags-etc]
===============================================================================================

Как да добавя потребителски филтър, функция, етикет и т.н. в Latte? Разберете това в главата [Разширение на Latte |extending Latte].
Ако искате да използвате повторно промените си в различни проекти или да ги споделите с други хора, трябва да [създадете разширение |creating-extension].


Всеки код в шаблона `{php ...}` .{data-version:3.0}{toc: RawPhpExtension}
=========================================================================

Вътре в етикета [`{do}` |tags#do] така че не можете например да вмъквате конструкции като `if ... else` или твърдения, завършващи с точка и запетая.

Можете обаче да регистрирате разширението `RawPhpExtension`, което добавя таг `{php ...}`, който може да се използва за вмъкване на PHP код на риск на автора на шаблона.

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


Превод в шаблони .{data-version:3.0}{toc: TranslatorExtension}
==============================================================

Използвайте разширението `TranslatorExtension`, за да добавите [`{_...}` |tags#_], [`{translate}` |tags#translate] и филтър [`translate` |filters#translate] към шаблон. Те се използват за превеждане на стойности или части от шаблона на други езици. Параметърът е метод (извикан от PHP), който извършва превода:

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// create $translated from $original according to $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] in PHP 8.0
);
$latte->addExtension($extension);
```

Преводачът се извиква по време на изпълнение, когато шаблонът се визуализира. Latte обаче може да превежда всички статични текстове по време на компилирането на шаблона. Това спестява производителност, тъй като всеки ред се превежда само веднъж и полученият превод се записва в компилирания файл. Това създава няколко компилирани версии на шаблона в директорията за кеш, по една за всеки език. Достатъчно е да посочите езика като втори параметър:

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

Статичният текст се отнася например до `{_'hello'}` или `{translate}hello{/translate}`. Нестатичен текст, като например `{_$foo}`, ще продължи да се превежда по време на изпълнение.

Шаблонът може да предаде и допълнителни параметри на преводача чрез `{_$original, foo: bar}` или `{translate foo: bar}`, които той получава като масив `$params`:

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


Отстраняване на грешки и проследяване .[#toc-debugging-and-tracy]
=================================================================

Latte се опитва да направи развитието възможно най-приятно. За целите на дебъгването има три тага [`{dump}` |tags#dump], [`{debugbreak}` |tags#debugbreak] и [`{trace}` |tags#trace].

Ще получите максимален комфорт, ако инсталирате чудесния [инструмент за отстраняване на грешки Tracy |tracy:] и активирате приставката Latte:

```php
// enables Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// activates Tracy's extension
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);

```

Сега ще видите всички грешки на чист червен екран, включително грешки в шаблони с подчертаване на редове и колони ([видео |https://github.com/nette/tracy/releases/tag/v2.9.0]).
В същото време в долния десен ъгъл ще се появи таб за Latte, в така наречения панел Tracy, където можете да видите визуално всички визуализирани шаблони и техните връзки (включително възможността за щракване върху шаблон или компилиран код), както и променливите:

[* latte-debugging.webp *]

Тъй като Latte компилира шаблоните в четлив PHP код, можете да ги преглеждате удобно във вашата среда за разработка.


Linter: Проверка на синтаксиса на шаблона .{data-version:2.11}{toc: Linter}
===========================================================================

Инструментът Linter ви помага да прегледате всички шаблони и да ги проверите за грешки в синтаксиса. Той се изпълнява от конзолата:

```shell
vendor/bin/latte-lint <path>
```

Ако използвате потребителски тагове, създайте и свой собствен потребителски Linter, например `custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// enter the actual path to the autoload.php file
require __DIR__ . '/vendor/autoload.php';

$linter = new Latte\Tools\Linter($engine);
$linter->scanDirectory($path);

$engine = new Latte\Engine;
// registers individual extensions here
$engine->addExtension(/* ... */);

$path = $argv[1];
$linter = new Latte\Tools\Linter(engine: $engine);
$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```


Зареждане на шаблони от символния низ .[#toc-loading-templates-from-a-string]
=============================================================================

Трябва ли да зареждате шаблони от низове, а не от файлове, може би за целите на тестването? [StringLoader |extending-latte#StringLoader] може да ви помогне:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Обработчик на изключения .[#toc-exception-handler]
==================================================

Можете да дефинирате свой собствен обработчик на изключения за чакащи изключения. Изключения, които се появяват вътре в [`{try}` |tags#try] и в [пясъчника |sandbox] се предават към него.

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Автоматично търсене на оформление .[#toc-automatic-layout-lookup]
=================================================================

С помощта на тага [`{layout}` |template-inheritance#Layout-Inheritance] шаблонът дефинира своя родителски шаблон. Възможно е и автоматично търсене на оформление, което ще опрости писането на шаблони, тъй като няма да е необходимо да се включва етикетът `{layout}`.

Това се постига по следния начин:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// it returns the path to the parent template file
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

Ако шаблонът не трябва да има оформление, той ще посочи това с тага `{layout none}`.
