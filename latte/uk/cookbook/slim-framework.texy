Використання Latte зі Slim 4
****************************

.[perex]
Ця стаття, автором якої є "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, описує використання Latte зі Slim Framework.

Спочатку "встановіть Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html, а потім Latte за допомогою Composer:

```shell
composer require latte/latte
```


Конфігурація
------------

У кореневому каталозі проєкту створіть новий каталог `templates`. Усі шаблони будуть розміщені в ньому пізніше.

До файлу `config/defaults.php` додайте новий конфігураційний ключ `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte компілює шаблони в нативний PHP-код і зберігає їх у кеші на диску. Тому вони такі ж швидкі, якби вони були написані нативною мовою PHP.

До файлу `config/defaults.php` додайте новий конфігураційний ключ `template_temp`: Переконайтеся, що каталог `{project}/tmp/templates` існує та має права на читання та запис.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte автоматично регенерує кеш при кожній зміні шаблону, що можна вимкнути в робочому середовищі та заощадити трохи продуктивності:

```php
// в робочому середовищі змініть на false
$settings['template_auto_refresh'] = true;
```

Далі додайте визначення DI-контейнера для класу `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Саме відображення шаблону Latte технічно працювало б, але ми також повинні забезпечити, щоб воно працювало з об'єктом response PSR-7.

Для цього ми створимо спеціальний клас `TemplateRenderer`, який зробить цю роботу за нас.

Далі створіть файл `src/Renderer/TemplateRenderer.php` і скопіюйте/вставте цей код:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Використання
------------

Замість прямого використання об'єкта Latte Engine ми використаємо для відображення шаблону в об'єкт, сумісний з PSR-7, об'єкт `TemplateRenderer`.

Типовий клас обробника дії може виглядати так: Відобразить шаблон з назвою `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Щоб це працювало, створіть файл шаблону в `templates/home.latte` з таким вмістом:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Якщо все правильно налаштовано, має відобразитися наступний вивід:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
