Slim 4 で Latte を使用する
********************

.[perex]
この記事は、"Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html によって書かれ、Slim Framework で Latte を使用する方法を説明しています。

まず、"Slim Framework をインストール":https://odan.github.io/2019/11/05/slim4-tutorial.html し、次に Composer を使用して Latte をインストールします：

```shell
composer require latte/latte
```


設定
-----------

プロジェクトのルートディレクトリに新しいディレクトリ `templates` を作成します。すべてのテンプレートは後でそこに配置されます。

`config/defaults.php` ファイルに新しい設定キー `template` を追加します：

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte はテンプレートをネイティブ PHP コードにコンパイルし、ディスク上のキャッシュに保存します。したがって、ネイティブ PHP で書かれた場合と同じくらい高速です。

`config/defaults.php` ファイルに新しい設定キー `template_temp` を追加します：ディレクトリ `{project}/tmp/templates` が存在し、読み取りおよび書き込み権限があることを確認してください。

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte はテンプレートが変更されるたびにキャッシュを自動的に再生成しますが、これは本番環境では無効にしてパフォーマンスを少し節約できます：

```php
// 本番環境では false に変更します
$settings['template_auto_refresh'] = true;
```

次に、`Latte\Engine` クラスの DI コンテナ定義を追加します。

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Latte テンプレート自体のレンダリングは技術的には機能しますが、PSR-7 レスポンスオブジェクトでも機能するようにする必要があります。

この目的のために、この作業を行う特別なクラス `TemplateRenderer` を作成します。

次に、`src/Renderer/TemplateRenderer.php` ファイルを作成し、このコードをコピー/貼り付けます：

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


使用法
---

Latte Engine オブジェクトを直接使用する代わりに、`TemplateRenderer` オブジェクトを使用してテンプレートを PSR-7 互換オブジェクトにレンダリングします。

典型的なアクションハンドラクラスは次のようになります：`home.latte` という名前のテンプレートをレンダリングします：

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

これが機能するためには、`templates/home.latte` に次の内容でテンプレートファイルを作成します：

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

すべてが正しく設定されていれば、次の出力が表示されるはずです：

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
