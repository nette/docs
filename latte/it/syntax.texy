Sintassi
********

.[perex]
Syntax Latte è nata dalle esigenze pratiche dei web designer. Eravamo alla ricerca della sintassi più facile da usare, con la quale è possibile scrivere in modo elegante costrutti che altrimenti sarebbero una vera sfida.
Allo stesso tempo, tutte le espressioni sono scritte esattamente come in PHP, quindi non è necessario imparare un nuovo linguaggio. È sufficiente sfruttare al meglio ciò che già si conosce.

Di seguito è riportato un modello minimale che illustra alcuni elementi di base: tag, n:attributi, commenti e filtri.

```latte
{* questo è un commento *}
<ul n:if="$items">                {* n:if è n:atribut *}
{foreach $items as $item}         {* tag che rappresenta il ciclo foreach *}
	<li>{$item|capitalize}</li>   {* tag che stampa una variabile con un filtro *}
{/foreach}                        {* fine del ciclo *}
```

Diamo un'occhiata più da vicino a questi importanti elementi e a come possono aiutare a costruire un template incredibile.


Tag .[#toc-tags]
================

Un modello contiene tag che controllano la logica del modello (per esempio, i cicli *foreach*) o le espressioni di output. Per entrambi viene usato un unico delimitatore `{ ... }`, in modo da non dover pensare a quale delimitatore usare in quale situazione, come avviene con altri sistemi.
Se il carattere `{` è seguito da una virgoletta o da uno spazio, Latte non lo considera l'inizio di un tag, per cui si possono usare costrutti JavaScript, JSON o regole CSS nei template senza problemi.

Vedere la [panoramica di tutti i tag |tags]. Inoltre, è possibile creare [tag personalizzati |extending-latte#tags].


Latte capisce il PHP .[#toc-latte-understands-php]
==================================================

È possibile utilizzare espressioni PHP che si conoscono bene all'interno dei tag:

- variabili
- stringhe (compresi HEREDOC e NOWDOC), array, numeri, ecc.
- [operatori |https://www.php.net/manual/en/language.operators.php]
- chiamate a funzioni e metodi (che possono essere limitate dalla [sandbox |sandbox])
- [corrispondenza |https://www.php.net/manual/en/control-structures.match.php]
- [funzioni anonime |https://www.php.net/manual/en/functions.arrow.php]
- [callback |https://www.php.net/manual/en/functions.first_class_callable_syntax.php]
- commenti multilinea `/* ... */`
- ecc.

Inoltre, Latte aggiunge diverse [estensioni |#Syntactic Sugar] alla sintassi di PHP.


n:attributi .[#toc-n-attributes]
================================

Ogni tag di coppia, come `{if} … {/if}`, che opera su un singolo elemento HTML può essere scritto in notazione [n:attributi |#n:attribute]. Per esempio, `{foreach}` nell'esempio precedente potrebbe essere scritto anche in questo modo:

```latte
<ul n:if="$items">
	<li n:foreach="$items as $item">{$item|capitalize}</li>
</ul>
```

La funzionalità corrisponde quindi all'elemento HTML in cui è scritta:

```latte
{var $items = ['I', '♥', 'Latte']}

<p n:foreach="$items as $item">{$item}</p>
```

Stampe:

```latte
<p>I</p>
<p>♥</p>
<p>Latte</p>
```

Utilizzando il prefisso `inner-` possiamo alterare il comportamento in modo che la funzionalità si applichi solo al corpo dell'elemento:

```latte
<div n:inner-foreach="$items as $item">
	<p>{$item}</p>
	<hr>
</div>
```

Stampe:

```latte
<div>
	<p>I</p>
	<hr>
	<p>♥</p>
	<hr>
	<p>Latte</p>
	<hr>
</div>
```

Oppure utilizzando il prefisso `tag-` la funzionalità viene applicata solo ai tag HTML:

```latte
<p><a href="{$url}" n:tag-if="$url">Title</a></p>
```

A seconda del valore della variabile `$url` verrà stampato:

```latte
// when $url is empty
<p>Title</p>

// when $url equals 'https://nette.org'
<p><a href="https://nette.org">Title</a></p>
```

Tuttavia, gli attributi n:non sono solo una scorciatoia per i tag di coppia, ma esistono anche alcuni attributi n:puri, come ad esempio il migliore amico del codificatore [n:class |tags#n:class].


Filtri .[#toc-filters]
======================

Vedere il riepilogo dei [filtri standard |filters].

Latte consente di chiamare i filtri utilizzando la notazione del segno di pipe (è consentito lo spazio precedente):

```latte
<h1>{$heading|upper}</h1>
```

I filtri possono essere concatenati, in tal caso si applicano in ordine da sinistra a destra:

```latte
<h1>{$heading|lower|capitalize}</h1>
```

I parametri vengono inseriti dopo il nome del filtro, separati da due punti o da una virgola:

```latte
<h1>{$heading|truncate:20,''}</h1>
```

I filtri possono essere applicati alle espressioni:

```latte
{var $name = ($title|upper) . ($subtitle|lower)}
```

Su blocco:

```latte
<h1>{block |lower}{$heading}{/block}</h1>
```

O direttamente sul valore (in combinazione con [`{=expr}` | https://latte.nette.org/it/tags#printing] ):
```latte
<h1>{='  Hello world  '|trim}<h1>
```


Commenti .[#toc-comments]
=========================

I commenti sono scritti in questo modo e non vengono inseriti nell'output:

```latte
{Questo è un commento in Latte.}
```

I commenti PHP funzionano all'interno dei tag:

```latte
{include 'file.info', /* value: 123 */}
```


Zucchero sintattico .[#toc-syntactic-sugar]
===========================================


Stringhe senza virgolette .[#toc-strings-without-quotation-marks]
-----------------------------------------------------------------

Le virgolette possono essere omesse per le stringhe semplici:

```latte
as in PHP:   {var $arr = ['hello', 'btn--default', '€']}

abbreviated: {var $arr = [hello, btn--default, €]}
```

Le stringhe semplici sono quelle composte esclusivamente da lettere, cifre, trattini bassi e trattini. Non devono iniziare con una cifra e non devono iniziare o terminare con un trattino.
Non deve essere composta solo da lettere maiuscole e trattini bassi, perché in tal caso viene considerata una costante (ad esempio `PHP_VERSION`).
E non deve collidere con le parole chiave `and`, `array`, `clone`, `default`, `false`, `in`, `instanceof`, `new`, `null`, `or`, `return`, `true`, `xor`.


Operatore ternario breve .[#toc-short-ternary-operator]
-------------------------------------------------------

Se il terzo valore dell'operatore ternario è vuoto, può essere omesso:

```latte
as in PHP:   {$stock ? 'In stock' : ''}

abbreviated: {$stock ? 'In stock'}
```


Notazione moderna della chiave nell'array .[#toc-modern-key-notation-in-the-array]
----------------------------------------------------------------------------------

Le chiavi dell'array possono essere scritte in modo simile ai parametri denominati quando si chiamano le funzioni:

```latte
as in PHP:   {var $arr = ['one' => 'item 1', 'two' => 'item 2']}

modern:      {var $arr = [one: 'item 1', two: 'item 2']}
```


Filtri .[#toc-filters]
----------------------

I filtri possono essere utilizzati per qualsiasi espressione, basta racchiudere il tutto tra parentesi:

```latte
{var $content = ($text|truncate: 30|upper)}
```


Operatore `in` .[#toc-operator-in]
----------------------------------

L'operatore `in` può essere utilizzato per sostituire la funzione `in_array()`. Il confronto è sempre rigoroso:

```latte
{* come in_array($item, $items, true) *}
{if $item in $items}
	...
{/if}
```


.{data-version:2.9}
Concatenamento opzionale con l'operatore Undefined-Safe .[#toc-optional-chaining-with-undefined-safe-operator]
--------------------------------------------------------------------------------------------------------------

L'operatore undefined-safe `??->` è simile all'operatore nullsafe `?->`, ma non solleva un errore se una variabile, una proprietà o un indice non esistono affatto.

```latte
{$order??->id}
```

Questo è un modo per dire che quando `$order` è definito e non è nullo, `$order->id` verrà calcolato, ma quando `$order` è nullo o non esiste, interrompiamo quello che stiamo facendo e restituiamo semplicemente null.

Ci si potrebbe trovare a usare `?->` per sostituire molto codice che esegue controlli ripetitivi su null:
```latte
{$user??->address??->street}
// roughly means isset($user) && isset($user->address) ? $user->address->street : null
```


Una finestra nella storia .[#toc-a-window-into-history]
-------------------------------------------------------

Nel corso della sua storia, Latte ha inventato una serie di caramelle sintattiche che sono apparse in PHP qualche anno dopo. Per esempio, in Latte era possibile scrivere gli array come `[1, 2, 3]` invece di `array(1, 2, 3)` o usare l'operatore nullsafe `$obj?->foo` molto prima che fosse possibile in PHP. Latte ha anche introdotto l'operatore di espansione degli array `(expand) $arr`, che è l'equivalente dell'odierno operatore `...$arr` di PHP.


Limitazioni di PHP in Latte .[#toc-php-limitations-in-latte]
============================================================

In Latte si possono scrivere solo espressioni PHP. Cioè, non si possono dichiarare classi o usare [strutture di controllo |https://www.php.net/manual/en/language.control-structures.php], come `if`, `foreach`, `switch`, `return`, `try`, `throw` e altre, al posto delle quali Latte offre i suoi [tag |tags].
Non si possono nemmeno usare [attributi |https://www.php.net/manual/en/language.attributes.php], [backtick |https://www.php.net/manual/en/language.operators.execution.php] o [costanti magiche |https://www.php.net/manual/en/language.constants.magic.php], perché non avrebbe senso.
Non si possono nemmeno usare `echo`, `include`, `require`, `exit`, `eval`, `unset`, perché non sono funzioni, ma costrutti speciali del linguaggio PHP e quindi non espressioni.

Tuttavia, è possibile aggirare queste limitazioni attivando l'estensione [RawPhpExtension |develop#RawPhpExtension], che consente di utilizzare qualsiasi codice PHP nel tag `{php ...}` sotto la responsabilità dell'autore del template.
