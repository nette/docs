型システム
*****

<div class=perex>

型システムは、堅牢なアプリケーション開発の鍵です。Latteはテンプレートにも型サポートをもたらします。各変数にどのデータ型またはオブジェクト型が含まれているかを知ることで、IDEは正しく提案でき（[統合 |recipes#Editory a IDE]を参照）、静的解析はエラーを検出できます。どちらも開発の品質と利便性を大幅に向上させます。

</div>

.[note]
注釈：宣言された型は情報提供のみであり、Latteは現時点ではそれらをチェックしません。

型の使用を開始するにはどうすればよいですか？渡されるパラメータ、その型、およびオプションでデフォルト値を表すテンプレートクラス（例：`CatalogTemplateParameters`）を作成します：

```php
class CatalogTemplateParameters
{
	public function __construct(
		public string $langs,
		/** @var ProductEntity[] */
		public array $products,
		public Address $address,
	) {}
}

$latte->render('template.latte', new CatalogTemplateParameters(
	address: $userAddress,
	lang: $settings->getLanguage(),
	products: $entityManager->getRepository('Product')->findAll(),
));
```

次に、テンプレートの先頭に、完全なクラス名（名前空間を含む）を持つ `{templateType}` タグを挿入します。これにより、テンプレート内に変数 `$langs` と `$products` がそれぞれの型とともに存在することが定義されます。ローカル変数の型は、[`{var}` |tags#var-default]、`{varType}`、[`{define}` |template-inheritance#definice] タグを使用して指定できます。

その時点から、IDEは正しく提案できます。

作業を節約するにはどうすればよいですか？テンプレートパラメータまたは `{varType}` タグを持つクラスをできるだけ簡単に記述するにはどうすればよいですか？それらを生成させます。そのために、`{templatePrint}` と `{varPrint}` という2つのタグがあります。これらをテンプレートに配置すると、通常のレンダリングの代わりに、クラスコードの提案または `{varType}` タグのリストが表示されます。次に、ワンクリックでコードをマークしてプロジェクトにコピーするだけです。


`{templateType}`
----------------
テンプレートに渡されるパラメータの型は、クラスを使用して宣言します：

```latte
{templateType MyApp\CatalogTemplateParameters}
```


`{varType}`
-----------
変数の型を宣言するにはどうすればよいですか？既存の変数には `{varType}` タグ、または [`{var}` |tags#var-default] タグを使用します：

```latte
{varType Nette\Security\User $user}
{varType string $lang}
```


`{templatePrint}`
-----------------
`{templatePrint}` タグを使用してクラスを生成することもできます。テンプレートの先頭に配置すると、通常のレンダリングの代わりにクラスの提案が表示されます。次に、ワンクリックでコードをマークしてプロジェクトにコピーするだけです。


`{varPrint}`
------------
`{varPrint}` タグは、入力時間を節約します。テンプレートに配置すると、通常のレンダリングの代わりに、ローカル変数用の `{varType}` タグの提案が表示されます。次に、ワンクリックでコードをマークしてテンプレートにコピーするだけです。

`{varPrint}` 自体は、テンプレートパラメータではないローカル変数のみを出力します。すべての変数を出力したい場合は、`{varPrint all}` を使用します。
