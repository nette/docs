DI Konteyner Yapılandırması
***************************

.[perex]
Nette DI konteyneri için yapılandırma seçeneklerine genel bakış.


Yapılandırma Dosyası
====================

Nette DI konteyneri, yapılandırma dosyaları aracılığıyla kolayca kontrol edilir. Bunlar genellikle [NEON formatında |neon:format] yazılır. Düzenleme için bu formatı [destekleyen düzenleyicileri |best-practices:editors-and-tools#ide-editor] öneririz.

<pre>
"decorator .[prism-token prism-atrule]":[#decorator]: 	"Dekoratör .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"DI konteyner .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Rozšíření]: 	"Diğer DI uzantılarının kurulumu .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Vkládání souborů]: 	"Dosya dahil etme .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#parametry]: 	"Parametreler .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Servislerin otomatik kaydı .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Servisler .[prism-token prism-comment]"
</pre>

`%` karakterini içeren bir karakter dizisi yazmak istiyorsanız, onu `%%` olarak iki katına çıkararak kaçış yapmanız gerekir. .[note]


Parametreler
============

Yapılandırmada, daha sonra servis tanımlarının bir parçası olarak kullanılabilecek parametreler tanımlayabilirsiniz. Bu sayede yapılandırmayı daha anlaşılır hale getirebilir veya değişecek değerleri birleştirebilir ve ayırabilirsiniz.

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

`dsn` parametresine yapılandırmanın herhangi bir yerinde `%dsn%` yazarak başvururuz. Parametreler, `'%wwwDir%/images'` gibi karakter dizileri içinde de kullanılabilir.

Parametreler yalnızca karakter dizileri veya sayılar olmak zorunda değildir, diziler de içerebilirler:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Belirli bir anahtara `%mailer.user%` olarak başvururuz.

Kodunuzda, örneğin bir sınıfta, herhangi bir parametrenin değerini öğrenmeniz gerekiyorsa, onu bu sınıfa aktarın. Örneğin kurucuda. Parametre değerleri için sınıfların sorgulayacağı, yapılandırmayı temsil eden global bir nesne yoktur. Bu, bağımlılık enjeksiyonu ilkesinin ihlali olurdu.


Servisler
=========

Bkz. [ayrı bölüm |services].


Dekoratör (Decorator)
=====================

Belirli bir tipteki tüm servisleri toplu olarak nasıl düzenlersiniz? Örneğin, belirli bir ortak atadan kalıtım alan tüm presenter'larda belirli bir metodu çağırmak? İşte bunun için dekoratör var.

```neon
decorator:
	# bu sınıfın veya arayüzün örneği olan tüm servislerde
	App\Presentation\BasePresenter:
		setup:
			- setProjectId(10)       # bu metodu çağır
			- $absoluteUrls = true   # ve değişkeni ayarla
```

Dekoratör ayrıca [etiketleri |services#Tagy] ayarlamak veya [inject modunu |services#Režim Inject] açmak için de kullanılabilir.

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

DI konteynerinin teknik ayarları.

```neon
di:
	# DIC'yi Tracy Bar'da göster?
	debugger: ...        # (bool) varsayılan true'dur

	# asla otomatik bağlanmayacak parametre tipleri
	excluded: ...        # (string[])

	# servislerin tembel oluşturulmasına izin ver?
	lazy: ...            # (bool) varsayılan false'dur

	# DI konteynerinin kalıtım aldığı sınıf
	parentClass: ...     # (string) varsayılan Nette\DI\Container'dır
```


Tembel Servisler .{data-version:3.2.4}
--------------------------------------

`lazy: true` ayarı, servislerin tembel (ertelenmiş) oluşturulmasını etkinleştirir. Bu, servislerin DI konteynerinden talep edildiği anda değil, ilk kullanıldıkları anda gerçekten oluşturulduğu anlamına gelir. Bu, uygulamanın başlangıcını hızlandırabilir ve bellek gereksinimlerini azaltabilir, çünkü yalnızca ilgili istekte gerçekten ihtiyaç duyulan servisler oluşturulur.

Belirli bir servis için tembel oluşturma [değiştirilebilir |services#Lazy služby].

.[note]
Tembel nesneler yalnızca kullanıcı sınıfları için kullanılabilir, dahili PHP sınıfları için kullanılamaz. PHP 8.4 veya daha yenisini gerektirir.


Meta Veri Dışa Aktarma
----------------------

DI konteyner sınıfı ayrıca birçok meta veri içerir. Meta veri dışa aktarımını azaltarak onu küçültebilirsiniz.

```neon
di:
	export:
		# parametreleri dışa aktar?
		parameters: false   # (bool) varsayılan true'dur

		# etiketleri ve hangilerini dışa aktar?
		tags:               # (string[]|bool) varsayılan hepsi
			- event.subscriber

		# otomatik bağlama için verileri ve hangilerini dışa aktar?
		types:              # (string[]|bool) varsayılan hepsi
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

Eğer `$container->getParameters()` dizisini kullanmıyorsanız, parametre dışa aktarımını kapatabilirsiniz. Ayrıca, yalnızca `$container->findByTag(...)` metoduyla servis aldığınız etiketleri dışa aktarabilirsiniz.
Eğer metodu hiç çağırmıyorsanız, etiket dışa aktarımını `false` ile tamamen kapatabilirsiniz.

`$container->getByType()` metodunun parametresi olarak kullandığınız sınıfları belirterek [otomatik bağlama |autowiring] için meta veriyi önemli ölçüde azaltabilirsiniz.
Ve yine, eğer metodu hiç çağırmıyorsanız (veya yalnızca `Nette\Application\Application` almak için [bootstrap'ta |application:bootstrap] çağırıyorsanız), dışa aktarımı `false` ile tamamen kapatabilirsiniz.


Uzantılar
=========

Diğer DI uzantılarının kaydı. Bu şekilde örneğin `Dibi\Bridges\Nette\DibiExtension22` DI uzantısını `dibi` adı altında ekleriz

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Daha sonra onu `dibi` bölümünde yapılandırırız:

```neon
dibi:
	host: localhost
```

Parametreleri olan bir sınıf da uzantı olarak eklenebilir:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Dosya Dahil Etme
================

Diğer yapılandırma dosyalarını `includes` bölümüne ekleyebiliriz:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

`parameters.php` adı bir yazım hatası değildir, yapılandırma PHP dosyasında da yazılabilir ve bir dizi olarak döndürülebilir:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Yapılandırma dosyalarında aynı anahtarlara sahip öğeler görünürse, üzerine yazılır veya [diziler durumunda birleştirilir |#Slučování]. Daha sonra dahil edilen dosya, öncekinden daha yüksek önceliğe sahiptir. `includes` bölümünün belirtildiği dosya, içine dahil edilen dosyalardan daha yüksek önceliğe sahiptir.


Arama (Search)
==============

Servislerin DI konteynerine otomatik olarak eklenmesi işi son derece keyifli hale getirir. Nette, presenter'ları otomatik olarak konteynere ekler, ancak diğer herhangi bir sınıfı da kolayca eklemek mümkündür.

Sadece hangi dizinlerde (ve alt dizinlerde) sınıfları araması gerektiğini belirtmek yeterlidir:

```neon
search:
	-	in: %appDir%/Forms
	-	in: %appDir%/Model
```

Ancak genellikle tüm sınıfları ve arayüzleri eklemek istemeyiz, bu yüzden onları filtreleyebiliriz:

```neon
search:
	-	in: %appDir%/Forms

		# dosya adına göre filtreleme (string|string[])
		files:
			- *Factory.php

		# sınıf adına göre filtreleme (string|string[])
		classes:
			- *Factory
```

Veya belirtilen sınıflardan en az birini kalıtım alan veya uygulayan sınıfları seçebiliriz:


```neon
search:
	-	in: %appDir%
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Ayrıca dışlama kuralları da tanımlanabilir, yani sınıf adı maskeleri veya kalıtımsal atalar, eğer uyuyorsa servis DI konteynerine eklenmez:

```neon
search:
	-	in: %appDir%
		exclude:
			files: ...
			classes: ...
			extends: ...
			implements: ...
```

Tüm servislere etiketler atanabilir:

```neon
search:
	-	in: %appDir%
		tags: ...
```


Birleştirme
===========

Birden fazla yapılandırma dosyasında aynı anahtarlara sahip öğeler görünürse, üzerine yazılır veya diziler durumunda birleştirilir. Daha sonra dahil edilen dosya, öncekinden daha yüksek önceliğe sahiptir.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>sonuç</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Dizilerde, anahtar adından sonra ünlem işareti belirterek birleştirmeyi önleyebilirsiniz:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>sonuç</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>

{{maintitle: Bağımlılık Enjeksiyonu Yapılandırması}}
