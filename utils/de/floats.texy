Schwebekörper-Funktionen
************************

.[perex]
[api:Nette\Utils\Floats] ist eine statische Klasse mit nützlichen Funktionen zum Vergleich von Fließkommazahlen.


Installation:

```shell
composer require nette/utils
```

Alle Beispiele gehen davon aus, dass der folgende Klassenalias definiert ist:

```php
use Nette\Utils\Floats;
```


Motivation .[#toc-motivation]
=============================

Sie fragen sich, wozu eine Float-Vergleichsklasse gut ist? Sie können die Operatoren `<`, `>`, `===`, denken Sie.
Das ist nicht ganz richtig. Was, glauben Sie, wird dieser Code ausgeben?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Wenn Sie den Code ausführen, werden einige von Ihnen überrascht sein, dass das Programm `not same` ausgibt.

Bei mathematischen Operationen mit Fließkommazahlen treten aufgrund der Umrechnung zwischen Dezimal- und Binärsystem Fehler auf. Zum Beispiel entspricht `0.1 + 0.2` `0.300000000000000044…` . Daher müssen wir beim Vergleich von Fließkommazahlen eine kleine Differenz ab einer bestimmten Dezimalstelle tolerieren.

Und genau das tut die Klasse `Floats`. Der folgende Vergleich wird wie erwartet funktionieren:

```php
echo Floats::areEqual($a, $b) ? 'gleich' : 'nicht gleich'; // gleich
```

Beim Versuch, `NAN` zu vergleichen, kommt es zu einer `\LogicException` Ausnahme.


Float-Vergleich .[#toc-float-comparison]
========================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Gibt `true` zurück, wenn `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Gibt `true` zurück, wenn `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Gibt `true` zurück, wenn `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Gibt `true` zurück, wenn `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Gibt `true` zurück, wenn `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Wenn `$a` < `$b` ist, wird `-1` zurückgegeben, wenn sie gleich sind, wird `0` and if `$a` > `$b` zurückgegeben und `1`.

Sie kann z. B. mit der Funktion `usort` verwendet werden.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr ist [-3.5, 1, 2, 5]
```


Helfer-Funktionen .[#toc-helpers-functions]
===========================================


isZero(float $value): bool .[method]
------------------------------------

Gibt `true` zurück, wenn der Wert Null ist.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Gibt `true` zurück, wenn der Wert eine ganze Zahl ist.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
