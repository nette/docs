Przeprowadzanie testów
**********************

.[perex]
Najbardziej widoczną częścią Nette Tester jest launcher testów z linii poleceń. Jest niezwykle szybki i solidny, ponieważ automatycznie uruchamia wszystkie testy jako oddzielne procesy równolegle na wielu wątkach. Może również uruchomić się sam w trybie zegarka.

Wywołujemy test runner z linii poleceń. Jako parametr podaj katalog z testami. Dla bieżącego katalogu wystarczy wpisać kropkę:

/--pre .[terminal]
vendor/bin/tester .
\--

Program uruchamiający testy przeszukuje podany katalog i wszystkie podkatalogi w poszukiwaniu testów, którymi są pliki `*.phpt` i `*Test.php`. Czyta również i ocenia ich [adnotacje |test-annotations], aby wiedzieć, które z nich uruchomić i jak je uruchomić.

Następnie uruchamia testy. Podczas działania testów, stale drukuje wyniki do terminala jako znaki:

- <code style="color: #CCC; background-color: #000">.</code> - test zaliczony
- <code style="color: #CCC; background-color: #000">s</code> - test został pominięty
- <code style="color: #FFF; background-color: #900">F</code> - test nie powiódł się

Dane wyjściowe mogą wyglądać tak:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Note: No php.ini is used.
PHP 7.4.8 (cli) | php -n | 8 threads

........s..........................

<span style="color: #FFF; background-color: #090">OK (35 tests, 1 skipped, 1.7 seconds)</span>
\--

Przy ponownym uruchomieniu najpierw uruchamia testy, które nie powiodły się przy poprzednim uruchomieniu, więc możesz natychmiast zobaczyć, czy udało ci się naprawić błąd.

Jeśli żaden test się nie powiedzie, kod powrotu testera wynosi zero. W przeciwnym razie kodem zwrotnym jest liczba niezerowa.

.[warning]
Tester uruchamia procesy PHP bez `php.ini`. Zobacz sekcję [Custom php.ini |#Vlastní php.ini] po szczegóły.


Parametry wiersza poleceń .[#toc-parametry-prikazove-radky]
===========================================================

Możesz uzyskać przegląd wszystkich opcji linii poleceń, uruchamiając Tester bez parametrów lub z parametrem `-h`:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.3.3

Usage:
    tester [options] [<test file> | <directory>]...

Options:
    -p <path>                    Specify PHP interpreter to run (default: php).
    -c <path>                    Look for php.ini file (or look in directory) <path>.
    -C                           Use system-wide php.ini.
    -l | --log <path>            Write log to file <path>.
    -d <key=value>...            Define INI entry 'key' with value 'value'.
    -s                           Show information about skipped tests.
    --stop-on-fail               Stop execution upon the first failure.
    -j <num>                     Run <num> jobs in parallel (default: 8).
    -o <console|tap|junit|none>  Specify output format.
    -w | --watch <path>          Watch directory.
    -i | --info                  Show tests environment info and exit.
    --setup <path>               Script for runner setup.
    --temp <path>                Path to temporary directory. Default: sys_get_temp_dir().
    --colors [1|0]               Enable or disable colors.
    --coverage <path>            Generate code coverage report to file.
    --coverage-src <path>        Path to source code.
    -h | --help                  This help.
\--


-p <path>
---------
Określa binarkę PHP, która ma być użyta do uruchomienia testów. Domyślnie jest to `php`.

/--pre .[terminal]
tester -p /home/user/php-7.2.0-beta/php-cgi tests
\--


-c <path>
---------
Określa, która strona `php.ini` ma być używana podczas uruchamiania testów. Domyślnie nie jest używany php.ini. Zobacz sekcję [Custom php.ini |#Vlastní php.ini], aby uzyskać więcej informacji.


-C
---
Wykorzystywany jest system `php.ini`. W systemie UNIX również wszelkie istotne pliki INI `/etc/php/{sapi}/conf.d/*.ini`. Zobacz sekcję [Custom php.ini |#Vlastní php.ini], aby uzyskać więcej informacji.


''-l | --log <path>''
---------------------
Postępy w testach będą zapisywane do tego pliku. Wszystkie testy nieudane, pominięte i udane:

/--pre .[terminal]
tester --log /var/log/tests.log tests
\--


-d <key=value>
--------------
Ustawia wartość dyrektywy konfiguracyjnej testu PHP. Parametr może być użyty wielokrotnie.

/--pre .[terminal]
tester -d max_execution_time=20
\--


-s
---
Zostanie wyświetlona informacja o pominiętych testach.


--stop-on-fail
--------------
Tester przerywa testowanie na pierwszym nieudanym teście.


-j <num>
--------
Określa ile równoległych procesów z testami zostanie uruchomionych. Domyślną wartością jest 8. Jeśli chcesz, aby wszystkie testy przebiegały w serii, użyj wartości 1.


-o <console|tap|junit|none>
---------------------------
Ustawia format wyjściowy. Domyślnie ustawiony jest format konsoli.

- `console`: identyczny jak format domyślny, ale w tym przypadku logo ASCII nie jest wyświetlane
- `tap`: [Format TAP |https://en.wikipedia.org/wiki/Test_Anything_Protocol] odpowiedni do obróbki maszynowej
- `junit`: format JUnit XML, odpowiedni również do przetwarzania maszynowego
- `none`: nic nie jest wyświetlane


''-w | --watch <path>''
-----------------------
Po zakończeniu testów Tester nie kończy pracy, ale pozostaje uruchomiony i monitoruje pliki PHP we wskazanym katalogu. Po zmianie uruchomi ponownie testy. Parametr może być użyty wielokrotnie, jeśli chcemy monitorować wiele katalogów.

Przydatne podczas refaktoryzacji biblioteki lub debugowania testów.

/--pre .[terminal]
tester --watch src tests
\--


''-i | --info''
---------------
Wyświetla informacje o przebiegu testu. Na przykład:

/--pre .[terminal]
tester -p /usr/bin/php7.1 -c tests/php.ini --info

<span style="color: #0F0">PHP binary:</span>
/usr/bin/php7.1

<span style="color: #0F0">PHP version:</span>
7.1.7-1+0~20170711133844.5+jessie~1.gbp5284f4 (cli)

<span style="color: #0F0">Code coverage engines:</span>
(not available)

<span style="color: #0F0">Loaded php.ini files:</span>
/var/www/dev/demo/tests/php.ini

<span style="color: #0F0">PHP temporary directory:</span>
/tmp

<span style="color: #0F0">Loaded extensions:</span>
Core, ctype, date, dom, ereg, fileinfo, filter, hash, ...
\--


--setup <path>
--------------
Tester ładuje określony skrypt PHP przy uruchamianiu. W nim dostępna jest zmienna `Tester\Runner\Runner $runner`. Założymy plik `tests/runner-setup.php` o treści:

```php
$runner->outputHandlers[] = new MyOutputHandler;
```

Uruchomić tester:

/--pre .[terminal]
tester --setup tests/runner-setup.php tests
\--


--temp <path>
-------------
Ustawia ścieżkę katalogu dla plików tymczasowych Testera. Wartość domyślna zwraca `sys_get_temp_dir()`. Jeśli wartość domyślna nie jest prawidłowa, użytkownik zostanie ostrzeżony.

Jeśli nie jesteśmy pewni, jaki katalog jest używany, należy uruchomić Tester z parametrem `--info`.


-kolory 1|0
-----------
Domyślnie, Tester wykrywa kolorowy terminal i koloruje swoje wyjście. Ta opcja zastępuje autodetekcję. Globalnie możemy ustawić kolorowanie za pomocą systemowej zmiennej środowiskowej `NETTE_TESTER_COLORS`.


-pokrycie <path>
----------------
Tester wygeneruje raport pokazujący, ile kodu źródłowego obejmują testy. Ta opcja wymaga zainstalowanego rozszerzenia [Xdebug |https://xdebug.org/] lub [PCOV |https://github.com/krakjoe/pcov] PHP, lub PHP 7 z PHPDBG SAPI, który jest szybszy. Rozszerzenie pliku docelowego określa jego format. Albo HTML albo Clover XML.

/--pre .[terminal]
tester tests --coverage coverage.html  # HTML report
tester tests --coverage coverage.xml   # Clover XML report
\--

Priorytet mechanizmu wyboru jest następujący:
1) PCOV
2) PHPDBG
3) Xdebug

Podczas korzystania z PHPDBG możemy spotkać się z niepowodzeniami testów z powodu wyczerpania pamięci dla rozbudowanych testów. Zbieranie informacji o zakrytym kodzie jest pamięciożerne. W tym przypadku pomoże nam wywołanie `Tester\CodeCoverage\Collector::flush()` wewnątrz testu. Zapisuje zebrane dane na dysk i zwalnia pamięć. Jeśli zbieranie danych nie jest w toku lub używany jest Xdebug, wywołanie nie ma żadnego efektu.

"Przykładowy raport HTML":https://files.nette.org/tester/coverage.html z pokryciem kodu.


--coverage-src <path>
---------------------
Należy stosować w połączeniu z opcją `--coverage`. `<path>` jest ścieżką do kodu źródłowego, dla którego generowany jest raport. Można go używać wielokrotnie.


Własny php.ini .[#toc-vlastni-php-ini]
======================================
Tester uruchamia procesy PHP z parametrem `-n`, co oznacza, że nie jest ładowany `php.ini`. Na UNIX-ie, nawet tych z `/etc/php/conf.d/*.ini`. Zapewni to spójne środowisko do uruchamiania testów, ale także odrzuci wszelkie rozszerzenia PHP normalnie ładowane przez systemowe PHP.

Jeśli chcesz, aby nadal ładować systemowe pliki php.ini, użyj parametru `-C`.

Jeśli potrzebujesz jakichkolwiek rozszerzeń lub specjalnych ustawień INI dla testów, zalecamy stworzenie niestandardowego pliku `php.ini`, który będzie dystrybuowany wraz z testami. Następnie uruchom tester z parametrem `-c`, na przykład `tester -c tests/php.ini tests`, gdzie plik INI może wyglądać tak:

```ini
[PHP]

extension=php_pdo_mysql.dll
extension=php_pdo_pgsql.dll

memory_limit=512M
```

Uruchomienie Testera na UNIX z systemem `php.ini`, na przykład `tester -c /etc/php/cli/php.ini` nie załaduje innych INI z `/etc/php/conf.d/*.ini`. Jest to cecha PHP, a nie Testera.
