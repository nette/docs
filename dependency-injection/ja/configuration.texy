DIコンテナの設定
*********

.[perex]
Nette DIコンテナの設定オプションの概要を説明します。


設定ファイル .[#toc-configuration-file]
=================================

Nette DIコンテナは、設定ファイルを使って簡単に制御することができます。設定ファイルは通常、[NEON |neon:en:format]形式で記述されます。編集には、この形式に[対応 |best-practices:en:editors-and-tools#ide-editor]したエディタを使用することをお勧めします。

<pre>
"decorator .[prism-token prism-atrule]":[#Decorator]: 	"Decorator .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"DI Container .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Extensions]: 	"Install additional DI extensions .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Including files]: 	"Including files .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#Parameters]: 	"Parameters .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Automatic service registration .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Services .[prism-token prism-comment]"
</pre>

`%`, you must escape it by doubling it to `%%` という文字を含む文字列を書き込むには． .[note]


パラメータ .[#toc-parameters]
========================

パラメータを定義して、サービス定義の一部として使用することができます。これにより、より定期的に変更したい値を分離することができます。

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

`foo` パラメータは、設定ファイル内の他の場所で`%foo%` を介して参照することができます。また、`'%wwwDir%/images'` のような文字列の中で使用することもできます。

パラメータは単なる文字列である必要はなく、配列の値でもかまいません。

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

一つのキーを`%mailer.user%` と呼ぶことができます。

もし、コードの中で、例えばクラスの中で、何らかのパラメータの値を取得する必要がある場合は、このクラスに渡してください。例えば、コンストラクタの中で。パラメータ値を問い合わせることができるグローバル設定オブジェクトはありません。これは依存性注入の原則に反しています。


サービス .[#toc-services]
=====================

[別章 |services]参照。


デコレーター .[#toc-decorator]
========================

特定のタイプの全サービスを一括編集するには？特定の共通の祖先から継承したすべてのプレゼンターに対して、あるメソッドを呼び出す必要がありますか？そこで登場するのがデコレータです。

```neon
decorator:
	# for all services that are instances of this class or interface
	App\Presenters\BasePresenter:
		setup:
			- setProjectId(10)       # call this method
			- $absoluteUrls = true   # and set the variable
```

デコレータは、[タグを |services#Tags]設定したり、[インジェクトモードを |services#Inject Mode]オンにしたりするのにも使用できます。

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

DIコンテナの技術設定。

```neon
di:
	# shows DIC in Tracy Bar?
	debugger: ...        # (bool) defaults to true

	# parameter types that you never autowire
	excluded: ...        # (string[])

	# the class from which the DI container inherits
	parentClass: ...     # (string) defaults to Nette\DI\Container
```


メタデータエクスポート .[#toc-metadata-export]
-----------------------------------

DIコンテナクラスには、多くのメタデータも含まれています。メタデータのエクスポートを減らすことで、それを軽減することができます。

```neon
di:
	export:
		# to export parameters?
		parameters: false   # (bool) defaults to true

		# export tags and which ones?
		tags:               # (string[]|bool) the default is all
			- event.subscriber

		# export data for autowiring and which?
		types:              # (string[]|bool) the default is all
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

`$container->parameters` 配列を使用しない場合は、パラメータのエクスポートを無効にすることができます。さらに、`$container->findByTag(...)` メソッドを使って、サービスを取得するタグだけをエクスポートすることができます。
このメソッドを全く呼び出さない場合は、`false` を使ってタグのエクスポートを完全に無効にすることができます。

`$container->getByType()` メソッドのパラメータとして使用するクラスを指定すれば、[自動配線の |autowiring]ためのメタデータを大幅に減らすことができます。
そしてまた、もしあなたがこのメソッドを全く呼ばないのであれば(あるいは[bootstrapの |application:en:bootstrap]中だけで`Nette\Application\Application`)、`false` で完全にエクスポートを無効にすることができます。


拡張機能 .[#toc-extensions]
=======================

他のDI拡張を登録する。このようにして、例えばDI拡張`Dibi\Bridges\Nette\DibiExtension22` を`dibi` という名前で追加します。

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

そして、その中の`dibi` というセクションで設定します。

```neon
dibi:
	host: localhost
```

また、パラメータを持つ拡張クラスを追加することができます。

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


ファイルのインクルード .[#toc-including-files]
===================================

`includes` セクションに、追加の設定ファイルを挿入することができます。

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

`parameters.php` という名前はタイプミスではありません。設定は PHP ファイルに書くこともでき、その場合は配列として返されます。

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

同じキーを持つ項目が設定ファイル内に現れた場合、それらは[上書きされるか、 |#Merging]配列の場合はされます。後からインクルードされたファイルは、前のファイルより優先順位が高くなります。`includes` セクションが記載されているファイルは、それに含まれるファイルよりも優先順位が高くなります。


検索 .[#toc-search]
=================

DIコンテナにサービスを自動追加することで、非常に快適に作業ができます。Netteは自動的にPresenterをコンテナに追加しますが、それ以外のクラスも簡単に追加することができます。

どのディレクトリ（およびサブディレクトリ）でクラスを検索するかを指定するだけです。

```neon
search:
	# you choose the section names yourself
	myForms:
		in: %appDir%/Forms

	model:
		in: %appDir%/Model
```

しかし、通常は、すべてのクラスとインターフェイスを追加したくないので、フィルタリングすることができます。

```neon
search:
	myForms:
		in: %appDir%/Forms

		# filtering by file name (string|string[])
		files:
			- *Factory.php

		# filtering by class name (string|string[])
		classes:
			- *Factory
```

あるいは、以下のクラスのうち少なくともひとつを継承するか実装しているクラスを選択することもできます。


```neon
search:
	myForms:
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

また、クラス名のマスクや祖先など、否定的なルールを定義することもでき、それらに従った場合、そのサービスはDIコンテナに追加されなくなります。

```neon
search:
	myForms:
		exclude:
			classes: ...
			extends: ...
			implements: ...
```

追加されたサービスにはタグを設定することができます。

```neon
search:
	myForms:
		tags: ...
```


マージ .[#toc-merging]
===================

同じキーを持つ項目が複数の設定ファイルに存在する場合、それらは上書きされるか、配列の場合はマージされます。後で組み込まれたファイルの方が優先されます。

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>結果</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

特定の配列のマージを防ぐには、配列名の直後にエクスクラメーションマークを付けます。

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>結果</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>


{{maintitle:依存性注入の設定}}
