Munka callbackekkel
*******************

.[perex]
Az [api:Nette\Utils\Callback] egy statikus osztály függvényekkel a [PHP callbackekkel |https://www.php.net/manual/en/language.types.callable.php] való munkához.


Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi a következő alias létrehozását:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Ellenőrzi, hogy a `$callable` változó érvényes callback-e. Egyébként `Nette\InvalidArgumentException` kivételt dob. Ha a `$syntax` true, a függvény csak ellenőrzi, hogy a `$callable`-nek callback struktúrája van-e, de nem ellenőrzi, hogy az adott osztály vagy metódus valóban létezik-e. Visszaadja a `$callable`-t.

```php
Callback::check('trim'); // nem dob kivételt
Callback::check(['NonExistentClass', 'method']); // Nette\InvalidArgumentException kivételt dob
Callback::check(['NonExistentClass', 'method'], true); // nem dob kivételt
Callback::check(function () {}); // nem dob kivételt
Callback::check(null); // Nette\InvalidArgumentException kivételt dob
```


toString($callable): string .[method]
-------------------------------------

Átalakítja a PHP callbacket szöveges formába. Az osztálynak vagy metódusnak nem kell léteznie.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Reflexiót ad vissza a metódushoz vagy függvényhez a PHP callbackben.

```php
$ref = Callback::toReflection('trim');
// $ref ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Megállapítja, hogy a PHP callback függvény vagy statikus metódus-e.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Visszacsomagolja a `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php segítségével létrehozott Closure-t.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
