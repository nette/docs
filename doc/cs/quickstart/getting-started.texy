Začínáme
********

.[perex]
Seznamte se s Nette Frameworkem a vytvořte si svoji první aplikaci.

Úplně první věc, kterou bychom měli udělat, je zkontrolovat, zda náš server splňuje [požadavky|/requirements] pro běh Nette Frameworku. To by s největší pravděpodobností mělo být v pořádku, ale jen pro jistotu, nechceme začínat na nefunkčním prostředí.

Nette Framework můžeme [stáhnout manuálně |www:download], ale doporučená cesta je začít nový projekt s využitím [Composeru |/composer]. Pokud Composer neznáte, určitě byste měli začít s ním. Je to velice jednoduchý a užitečný nástroj, vše se dozvíte v [dokumentaci Composeru|http://getcomposer.org/doc/].

S Composerem si můžeme velmi jednoduše stáhnout a nainstalovat základní skeleton aplikace, známý jako Web Project, který již obsahuje Nette Framework. Abychom mohli založit projekt, najdeme si kořenový adresář webového serveru (např. `/var/www` nebo `C:\InetPub`) a pomocí příkazové řádky a spustíme následující příkaz.

/--
composer create-project nette/web-project nette-blog
\--

Web Project se následně stáhne do složky `nette-blog`.

.[note]
Pokud nechcete použít Composer, [stáhněte si archív |https://github.com/nette/web-project/archive/full.zip] a rozbalte jej a zkopírujte do kořenového adresáře webového serveru a přejmenujte na `nette-blog`. Framework se nachází ve složce `vendor`.

Pokud vyvíjíte na Mac OS X nebo na Linuxu (nebo na jakémkoliv jiném systému založeném na Unixu), budeme muset ještě nastavit práva zápisu webovému serveru.

/--
cd nette-blog && chmod -R a+rw temp log
\--

.[note]
Na některých Linuxech (Fedora, CentOS, ...), je standardně zapnutý SELinux. Budete muset patřičně upravit SELinux policies, anebo nastavit správný SELinux security context pro složky temp a log.

Úvodní stránka
====

V tento okamžik by měla již úvodní stránka Web Projectu fungovat. Vyzkoušíme to otevřením prohlížeče na následující URL adrese:

/--
http://localhost/nette-blog/www/
\--

a uvidíme úvodní stránku Nette Frameworku:

[* welcome-620.jpg *]

Aplikace funguje a můžete začít dělat úpravy.


Obsah Web Projectu
====

Web Project má následující strukturu:

/--pre
<b>www/</b>                      ← kořenový adresář webu
└── <b>nette-blog/</b>
    ├── <b>app/</b>              ← adresář webové aplikace
    │   ├── <b>config/</b>       ← konfigurační soubory
    │   ├── <b>presenters/</b>   ← třídy presenterů
    │   │   └── <b>templates/</b>← šablony
    │   ├── <b>router/</b>       ← konfigurace URL adres
    │   └── <b>bootstrap.php</b> ← spouštěcí soubor
    │
    ├── <b>log/</b>              ← zde naleznete chybové logy
    ├── <b>temp/</b>             ← místo pro dočasné soubory (cache, sessiony, atd.)
    │
    ├── <b>vendor/</b>           ← knihovny pro vaši aplikaci
    │   └── <b>nette/</b>        ← jako například váš oblíbený framework :-)
    │
    └── <b>www/</b>              ← místní kořenový adresář webu - pouze tento adresář je přístupný z internetu
\--

Adresář `www` je určen pro ukládání obrázků, JavaScript souborů, CSS stylů a dalších veřejně přístupných souborů. Pouze tento adresář je přístupný z internetu, takže nastavte kořenový adresář vaší aplikace tak, aby směřoval právě sem (to můžete nastavit v konfiguraci Apache, ale pojďme to udělat později, teď to není důležité).

Nejdůležitější složka je pro nás `app/`. Zde nalezneme soubor `bootstrap.php`, který slouží k načtení celého frameworku a nastavení aplikace. Aktivuje se zde [autoloading |/robotloader], nastaví se zde [debugger |tracy:homepage] a [routy |/routing].



Úklid
=======

Web Project obsahuje úvodní stránku, kterou smažeme předtím, než začneme něco programovat - bez obav tedy nahradíme obsah souboru `app/presenters/templates/Homepage/default.latte` za "Hello world!".


[* quick-hello.png *]


Tracy (debugger)
=====

Extrémně důležitý nástroj pro vývoj je [ladicí nástroj Tracy |tracy:]. Vyzkoušejte si vyvolání nějaké chyby v souboru `app/presenters/HomepagePresenter.php` (např. odstraněním posledního písmene ze slova `public` v definici metody renderDefault) a podívejte se, co se stane. Vyskočí oznamovací stránka, která chybu srozumitelně popisuje.

[* debugger-620.png .(debugger screen) *]

Tracy nám ohromně pomůže, až budeme hledat chyby v aplikaci. Také si všimněte plovoucího debug panelu v pravém dolním rohu obrazovky, který obsahuje informace z běhu aplikace.

[* quick-tracy-info.png *]

V produkčním módu je Tracy samozřejmě vypnuta a nezobrazuje žádné citlivé informace. Všechny chyby jsou v tomto případě uloženy ve složce `log/`. Pojďme si to vyzkoušet, v souboru `app/bootstrap.php` odkomentujeme následující řádek a změníme parametr volání na `false`, aby kód vypadal takto:

/--php
$configurator->setDebugMode(false); // enable for your remote IP
$configurator->enableTracy(__DIR__ . '/../log');
\--

Po obnovení stránky již Tracy neuvidíme. Místo ní se zobrazí uživatelsky přívětivá zpráva:

[* server-error-620.png .(error screen) *]

Nyní se podívejme do adresáře `log/`. Zde (v souboru exception.log) nalezneme zalogovanou chybu a také již známou stránku s chybovou hláškou (uloženou jako HTML soubor s názvem začínající na `exception-`).

Zakomentujeme opět řádek `// $configurator->setDebugMode(false);`. Tracy automaticky povolí debug režim na localhostu a zakáže ho všude jinde.

Chybu, kterou jsme vytvořili, můžeme opravit a pokračovat v psaní aplikace.
