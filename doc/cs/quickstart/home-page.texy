Úvodní stránka
**********

.[perex]
Nyní si vytvoříme úvodní stránku zobrazující poslední příspěvky.


Než začneme, je zapotřebí znát alespoň základy návrhového vzoru Model-View-Presenter (podobné jako MVC((Model-View-Controller))):

- **Model** - vrstva pracující s daty. Je kompletně oddělena od zbytku aplikace. Komunikuje pouze s presenterem.

- **View** - front-end vrstva. Vykresluje požadovaná data pomocí šablon a zobrazuje je uživateli.

- **Presenter** (nebo Controller) - propojovací vrstva. Presenter propojuje Model a View. Zpracovává požadavky, dotazuje se Modelu na data a vrací je zpět do View.


V případě jednoduchých aplikací jako bude náš blog, celá modelová vrstva budou jenom dotazy do databáze - na to zatím žádný extra kód nepotřebujeme.
Takže si vytvoříme pro začátek jenom presentery a pohledy. V Nette má každý presenter své vlastní pohledy, takže je budeme vytvářet zároveň.

Zdrojový kód je opět [na GitHubu |https://github.com/nette/quickstart].



Vytvoření databáze pomocí Admineru
==================================

Pro ukládání dat použijeme MySQL databázi, protože je nejvíce rozšířená mezi programátory webových aplikací. Pokud ji však použít nechcete, klidně si zvolte databázi dle vlastního uvážení.

Nyní si připravíme databázovou strukturu, kde budou uloženy články našeho blogu. Začneme velmi jednoduše - vytvoříme si pouze jednu tabulku pro příspěvky.

Pro vytvoření databáze můžeme použít "Adminer":[http://adminer.org/], který je předinstalovaný v Sandboxu. Můžete ho najít na URL adrese: `http://localhost/nette-blog/www/adminer/`. Pokud již používáte jiný nástroj na správu databází a pracuje se vám s ním lépe, bez obav ho můžete používat i zde.


Otevřeme si Adminer a vytvoříme novou databázi s názvem `quickstart`.

Vytvoříme novou tabulku s názvem `posts` a s těmito sloupci:
- `id` int, zaškrtneme na autoincrement (AI)
- `title` varchar, length 255
- `content` text
- `created_at` timestamp

Výsledná struktura by měla vypadat takto:

[* adminer-posts.png *]

.[tip]
Je opravdu důležité použít úložiště **InnoDB**. Za chvilku si ukážeme proč. Prozatím ji jednoduše vyberte a klikněte na uložit.

Než vytvoříme možnost přidávat články do databáze pomocí aplikace, přidejte několik vzorových článků na blogu ručně. Popravdě, teď bychom už ani přidávání, upravování a mazání článků ani programovat nemuseli a vesele bychom mohli používat Adminer a blog bude funkční úplně stejně.



Připojení k databázi
====================

Nyní, když je již databáze vytvořena a máme v ní uloženo pár článků, je ten správný čas zobrazit je na naší krásné nové stránce.

Prvně musíme aplikaci říct, jakou databázi má použít. Veškerá konfigurace včetně konfigurace databáze je uložena v souboru `/app/config/config.local.neon`. Připojení nastavíme pomocí DSN((Data Source Name)) a přihlašovacích údajů. Mělo by to vypadat nějak takto:

/---neon
	database:
		dsn: 'mysql:host=127.0.0.1;dbname=quickstart'
		user: root
		password: *zde vložte heslo k databázi*
\---

.[note]
Dávejte pozor na odsazení řádků při editování tohoto souboru. [NEON |http://ne-on.org] formát akceptuje jak odsazení pomocí mezer, tak odsazení pomocí tabulátorů, ale ne obojí zároveň. Výchozí konfigurační soubor v Sandboxu využívá tabulátory.



Injektování databázového spojení
=============================

Presenter (soubor `app/presenters/HomepagePresenter.php`), který se bude starat o výpis článků, potřebuje připojení k databázi. Pro jeho získání využijeme konstruktor, který bude vypadat takto:

/--php
class HomepagePresenter extends BasePresenter
{
	/** @var Nette\Database\Context */
	private $database;

	public function __construct(Nette\Database\Context $database)
	{
		$this->database = $database;
	}

	// ...

}
\--



Načítání příspěvků z databáze
===============================

Nyní načteme příspěvky z databáze a pošleme je do šablony, která je následně vykreslí jako HTML kód. Pro tohle je určena takzvaná *render* metoda:

/--php
	public function renderDefault()
	{
		$this->template->posts = $this->database->table('posts')
			->order('created_at DESC')
			->limit(5);
	}
\--

Presenter nyní obsahuje jednu renderovací metodu `renderDefault()`, která předává data z databáze do View (šablony) s názvem `default`. Šablony jsou umístěny v `app/templates/{PresenterName}/{viewName}.latte`, takže v tomto případě je šablona umístěna v `app/templates/Homepage/default.latte`. V šabloně nyní bude k dispozici proměnná `$posts`, ve které jsou příspěvky získané z databáze.


Šablona
========

K dispozici máme hlavní šablonu pro webovou stránku (která se jmenuje *layout*, má hlavičku, styly, patičku,...) a dále konkrétní šablony pro každý pohled (např. pro zobrazení příspěvků na blogu), které mohou přetížit některé části hlavní šablony.

Ve výchozím stavu je layout šablona umístěna v `app/templates/@layout.latte` a obsahuje:

/--html
{include content}
\--

Tato řádka vkládá blok s názvem `content`, který nadefinujeme právě v konkrétní šabloně.

Zkusme si obnovit stránku ještě předtím, než šablonu vytvoříme. Nette zobrazí chybovou zprávu s hláškou:

/--
Page not found. Missing template '…/app/templates/Homepage/default.latte'.
\--

Nyní vytvořme chybějící soubor a dáme do něj jen to nejnutnější:

/--html
{block content}
\--

Toto makro definuje blok *content*, který bude vložen do hlavního layoutu. Pokud opět obnovíme prohlížeč, uvidíme prázdnou stránku (pouze s HTML hlavičkou a patičkou).

Pojďme zobrazit příspěvky z blogu - přidáme následující kód do šablony za definici bloku:

/--html
<h1 n:block="title">Můj úžasný blog</h1>

{foreach $posts as $post}
<div class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>

	<h2><a href="{link Post:show $post->id}">{$post->title}</a></h2>

	<div>{$post->content}</div>
</div>
{/foreach}
\--

Pokud obnovíme prohlížeč, uvidíme výpis všech příspěvků. Výpis zatím není moc hezký, ani barevný, proto můžeme přidat pár [CSS stylů |https://github.com/nette/quickstart/blob/master/www/css/style.css].

Makro `{foreach}` iteruje přes všechny příspěvky, které jsme předali šabloně v proměnné `$posts`, a pro každý vykreslí daný kus HTML. Chová se přesně jako PHP kód.

Makro `{link}` generuje URL adresu, která směřuje na akci `Post:show` (kterou za chvíli vytvoříme). Toto makro také předává ID příspěvku jako argument. Za chvilku si to vysvětlíme podrobněji.

Zápisu `|date:` říkáme filtr. Filtry jsou určeny k formátování výstupu. Tento konkrétní filtr převádí datum (např. `2013-04-12`) na jeho čitelnější podobu (`April 12, 2013`). Další výchozí filtry "najdeme v dokumentaci":/default-filters a nebo si můžeme vytvořit vlastní, když je to potřeba.

Ještě jedna věc. Předchozí kód můžeme zkrátit a zjednodušit. Toho docílíme záměnou *Latte maker* za *n:makra*:

/--html
<div n:foreach="$posts as $post" class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>

	<h2><a n:href="Post:show $post->id">{$post->title}</a></h2>

	<div>{$post->content}</div>
</div>
\--

Atribut `n:foreach` obaluje *div* blokem *foreach* (funguje naprosto stejně jako předchozí kód).

Atribut `n:href` je aliasem pro makro `{link}`.


Shrnutí
=======

Nyní máme velmi jednoduchou MySQL databázi s pár příspěvky. Aplikace se připojuje k této databázi a vypisuje jednoduchý seznam těchto příspěvků do šablony.

{{care: Filip Procházka|2117}}
{{care: Honza Doleček|3537}}
