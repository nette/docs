HTTP kérés
**********

.[perex]
A Nette a HTTP-kérést érthető API-val rendelkező objektumokba kapszulázza, miközben szanálási szűrőt biztosít.

A HTTP-kérés egy [api:Nette\Http\Request] objektum, amelyet [függőségi injektálással |dependency-injection:passing-dependencies] átadva kapunk meg. Az előadókban egyszerűen hívja meg a `$httpRequest = $this->getHttpRequest()`.

Ami fontos, hogy a Nette ennek az objektumnak a [létrehozásakor |#RequestFactory] megtisztítja az összes GET, POST és COOKIE bemeneti paramétert, valamint az URL-eket a vezérlő karakterektől és az érvénytelen UTF-8 szekvenciáktól. Így nyugodtan folytathatja a munkát az adatokkal. A megtisztított adatok ezután a prezenterekben és űrlapokban használhatók.

→ [Telepítés és követelmények |@home#Installation]


Nette\Http\Request .[#toc-nette-http-request]
=============================================

Ez az objektum megváltoztathatatlan. Nincsenek setterei, csak egy úgynevezett wither `withUrl()`, amely nem változtatja meg az objektumot, hanem egy új példányt ad vissza a módosított értékkel.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Egy klónt ad vissza egy másik URL-címmel.


getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Visszaadja a kérés URL-címét [UrlScript |urls#UrlScript] objektumként.

```php
$url = $httpRequest->getUrl();
echo $url; // https://nette.org/en/documentation?action=edit
echo $url->getHost(); // nette.org
```

A böngészők nem küldenek töredéket a kiszolgálónak, ezért a `$url->getFragment()` üres karakterláncot ad vissza.


getQuery(string $key=null): string|array|null .[method]
-------------------------------------------------------
Visszaadja a GET-kérelem paramétereit:

```php
$all = $httpRequest->getQuery(); // az összes URL paraméter tömbje
$id = $httpRequest->getQuery('id'); // visszaadja a GET paramétert 'id' (vagy null)
```


getPost(string $key=null): string|array|null .[method]
------------------------------------------------------
POST kérés paramétereinek visszaadása:

```php
$all = $httpRequest->getPost(); // az összes POST paraméter tömbje
$id = $httpRequest->getPost('id'); // visszaadja az 'id' POST paramétert (vagy null)
```


getFile(string|string[] $key): Nette\Http\FileUpload|array|null .[method]
-------------------------------------------------------------------------
Visszaadja a [feltöltést |#Uploaded Files] objektumként: [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // feltöltöttünk bármilyen fájlt?
	$file->getUntrustedName(); // a felhasználó által küldött fájl neve
	$file->getSanitizedName(); // a veszélyes karakterek nélküli név
}
```

Adja meg a kulcsok tömbjét a részfa struktúrájának eléréséhez.

```php
//<input type="file" name="my-form[details][avatar]" multiple>
$file = $request->getFile(['my-form', 'details', 'avatar']);
```

Mivel a kívülről érkező adatokat nem bízhatja meg, és ezért nem támaszkodik a struktúra formájára, ez a módszer biztonságosabb, mint a `$request->getFiles()['my-form']['details']['avatar']`, amely hibásan működhet.


getFiles(): array .[method]
---------------------------
Visszaadja a [feltöltési fájlok |#Uploaded Files] fáját egy normalizált struktúrában, amelynek minden egyes levele a [api:Nette\Http\FileUpload] egy példánya:

```php
$files = $httpRequest->getFiles();
```


getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Visszaad egy cookie-t vagy `null`, ha nem létezik.

```php
$sessId = $httpRequest->getCookie('sess_id');
```


getCookies(): array .[method]
-----------------------------
Visszaadja az összes sütit:

```php
$cookies = $httpRequest->getCookies();
```


getMethod(): string .[method]
-----------------------------
Visszaadja a HTTP-módszert, amellyel a kérés történt.

```php
echo $httpRequest->getMethod(); // GET, POST, PUT, HEAD, PUT
```


isMethod(string $method): bool .[method]
----------------------------------------
Ellenőrzi a HTTP-módszert, amellyel a kérés érkezett. A paraméter nem érzékeny a nagy- és kisbetűkre.

```php
if ($httpRequest->isMethod('GET')) // ...
```


getHeader(string $header): ?string .[method]
--------------------------------------------
Visszaad egy HTTP-fejlécet vagy a `null` címet, ha az nem létezik. A paraméter nem érzékeny a nagy- és kisbetűkre:

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```


getHeaders(): array .[method]
-----------------------------
Az összes HTTP-fejlécet asszociatív tömbként adja vissza:

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```


getReferer(): ?Nette\Http\UrlImmutable .[method]
------------------------------------------------
Milyen URL-ről érkezett a felhasználó? Vigyázat, egyáltalán nem megbízható.


isSecured(): bool .[method]
---------------------------
A kapcsolat titkosított (HTTPS)? Lehet, hogy a megfelelő működéshez [proxy-t |configuration#HTTP proxy] kell beállítania.


isSameSite(): bool .[method]
----------------------------
A kérés ugyanarról az (al)tartományról érkezik, és egy linkre kattintva indult? A Nette a `_nss` cookie-t (korábban `nette-samesite`) használja ennek felismerésére.


isAjax(): bool .[method]
------------------------
Ez egy AJAX-kérés?


getRemoteAddress(): ?string .[method]
-------------------------------------
Visszaadja a felhasználó IP-címét. A megfelelő működéshez szükség lehet [egy proxy beállítás |configuration#HTTP proxy] ára.


getRemoteHost(): ?string .[method deprecated]
---------------------------------------------
Visszaadja a felhasználó IP-címének DNS-fordítását. A megfelelő működéshez szükség lehet [egy proxy beállítás |configuration#HTTP proxy] ára.


getBasicCredentials(): ?string .[method]
----------------------------------------
Visszaadja a [Basic HTTP hitelesítési |https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication] hitelesítő adatokat.

```php
[$user, $password] = $httpRequest->getBasicCredentials();
```


getRawBody(): ?string .[method]
-------------------------------
Visszaadja a HTTP-kérelem testét:

```php
$body = $httpRequest->getRawBody();
```


detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Nyelv észlelése. A `$lang` paramétereként átadjuk az alkalmazás által támogatott nyelvek tömbjét, és a böngésző által preferált nyelvet adja vissza. Ez nem varázslat, a módszer csak a `Accept-Language` fejlécet használja. Ha nem talál egyezést, akkor a `null` értéket adja vissza.

```php
// A böngésző által küldött fejléc: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // az alkalmazásban támogatott nyelvek
echo $httpRequest->detectLanguage($langs); // en
```


RequestFactory .[#toc-requestfactory]
=====================================

Az aktuális HTTP-kérelem objektumát a [api:Nette\Http\RequestFactory] hozza létre. Ha olyan alkalmazást ír, amely nem használ DI konténert, akkor a következőképpen hoz létre egy kérést:

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

A RequestFactory a `fromGlobals()` meghívása előtt konfigurálható. A `$factory->setBinary()` segítségével kikapcsolhatjuk az érvénytelen UTF-8 szekvenciákból származó bemeneti paraméterek minden szanálását. És beállíthatunk egy proxy szervert is, ami fontos a felhasználó IP-címének helyes felismeréséhez a `$factory->setProxy(...)` segítségével.

Az URL-eket szűrők segítségével megtisztíthatjuk azoktól a karakterektől, amelyek a különböző más weboldalakon rosszul megvalósított kommentrendszerek miatt kerülhetnek bele:

```php
// szóközök eltávolítása az útvonalból
$requestFactory->urlFilters['path']['%20'] = '';

// pont, vessző vagy jobb oldali zárójel eltávolítása az URL végéről
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// megtisztítja az elérési utat a duplázott írásjelektől (alapértelmezett szűrő).
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```


Feltöltött fájlok .[#toc-uploaded-files]
========================================

A `Nette\Http\Request::getFiles()` módszer egy normalizált struktúrájú, feltöltött fájlokat tartalmazó fát ad vissza, amelynek minden egyes levele a [api:Nette\Http\FileUpload] példánya. Ezek az objektumok tartalmazzák a feltöltött fájlokat, amelyeket a `<input type=file>` form elem által megadott adatokat.

A struktúra tükrözi a HTML elemeinek elnevezését. A legegyszerűbb példában ez lehet egy egyetlen elnevezett űrlapelem, amelyet a következőképpen küldtek be:

```latte
<input type="file" name="avatar">
```

Ebben az esetben a `$request->getFiles()` tömböt ad vissza:

```php
[
	'avatar' => /* FileUpload instance */
]
```

A `FileUpload` objektum akkor is létrejön, ha a felhasználó nem töltött fel semmilyen fájlt, vagy a feltöltés sikertelen volt. A `hasFile()` módszer true-t ad vissza, ha egy fájl elküldésre került:

```php
$request->getFile('avatar')->hasFile();
```

Tömbös jelölést használó bemenet esetén a név:

```latte
<input type="file" name="my-form[details][avatar]">
```

A visszaadott fa végül így néz ki:

```php
[
	'my-form' => [
		'details' => [
			'avatar' => /* FileUpload instance */
		],
	],
]
```

A fájlok tömbjeit is létrehozhatja:

```latte
<input type="file" name="my-form[details][avatars][] multiple">
```

Ebben az esetben a struktúra így néz ki:

```php
[
	'my-form' => [
		'details' => [
			'avatars' => [
				0 => /* FileUpload instance */,
				1 => /* FileUpload instance */,
				2 => /* FileUpload instance */,
			],
		],
	],
]
```

A beágyazott tömb 1. indexének elérésének legjobb módja a következő:

```php
$file = $request->getFile(['my-form', 'details', 'avatars', 1]);
if ($file instanceof FileUpload) {
	// ...
}
```

Mivel kívülről nem bízhatunk az adatokban, és ezért nem támaszkodunk a struktúra formájára, ez a módszer biztonságosabb, mint a `$request->getFiles()['my-form']['details']['avatars'][1]`, amely meghibásodhat.


A `FileUpload` módszerek áttekintése .{toc: FileUpload}
-------------------------------------------------------


hasFile(): bool .[method]
-------------------------
Visszaadja a `true` értéket, ha a felhasználó feltöltött egy fájlt.


isOk(): bool .[method]
----------------------
Visszaadja a `true` értéket, ha a fájl feltöltése sikeres volt.


getError(): int .[method]
-------------------------
Visszaadja a feltöltött fájlhoz tartozó hibakódot. Ez az [UPLOAD_ERR_XXX |http://php.net/manual/en/features.file-upload.errors.php] konstansok egyike. Ha a fájl feltöltése sikeres volt, akkor a `UPLOAD_ERR_OK` értéket adja vissza.


move(string $dest) .[method]
----------------------------
Egy feltöltött fájl áthelyezése egy új helyre. Ha a célfájl már létezik, a rendszer felülírja azt.

```php
$file->move('/path/to/files/name.ext');
```


getContents(): ?string .[method]
--------------------------------
Visszaadja a feltöltött fájl tartalmát. Ha a feltöltés nem volt sikeres, akkor a `null` értéket adja vissza.


getContentType(): ?string .[method]
-----------------------------------
A feltöltött fájl MIME-tartalomtípusát az aláírása alapján állapítja meg. Ha a feltöltés nem volt sikeres, vagy a felismerés sikertelen, akkor a `null` címet adja vissza.

.[caution]
PHP kiterjesztést igényel `fileinfo`.


getUntrustedName(): string .[method]
------------------------------------
Visszaadja a böngésző által megadott eredeti fájlnevet.

.[caution]
Ne bízzon az e módszer által visszaadott értékben. Egy ügyfél rosszindulatú fájlnevet küldhet azzal a szándékkal, hogy megrongálja vagy feltörje az alkalmazást.


getSanitizedName(): string .[method]
------------------------------------
Visszaadja a szanált fájlnevet. Csak ASCII karaktereket tartalmaz. `[a-zA-Z0-9.-]`. Ha a név nem tartalmaz ilyen karaktereket, akkor az 'unknown' értéket adja vissza. Ha a fájl JPEG, PNG, GIF vagy WebP kép, akkor a megfelelő fájlkiterjesztést adja vissza.


getUntrustedFullPath(): string .[method]
----------------------------------------
Visszaadja a böngésző által a könyvtár feltöltése során megadott eredeti teljes elérési utat. A teljes elérési útvonal csak a PHP 8.1 és újabb verziókban érhető el. A korábbi verziókban ez a módszer a nem megbízható fájlnevet adja vissza.

.[caution]
Ne bízzon az e metódus által visszaadott értékben. Egy ügyfél rosszindulatú fájlnevet küldhet azzal a szándékkal, hogy megrongálja vagy feltörje az alkalmazást.


getSize(): int .[method]
------------------------
Visszaadja a feltöltött fájl méretét. Ha a feltöltés nem volt sikeres, akkor `0`-t ad vissza.


getTemporaryFile(): string .[method]
------------------------------------
Visszaadja a feltöltött fájl ideiglenes helyének elérési útvonalát. Ha a feltöltés nem volt sikeres, akkor a `''` értéket adja vissza.


isImage(): bool .[method]
-------------------------
Visszaadja a `true` értéket, ha a feltöltött fájl JPEG, PNG, GIF vagy WebP kép. A felismerés az aláírás alapján történik. A teljes fájl sértetlenségét nem ellenőrzi. Azt, hogy egy kép nem sérült-e, például a [betöltési |#toImage] próbálkozással állapíthatja meg.

.[caution]
PHP bővítményt igényel: `fileinfo`.


getImageSize(): ?array .[method]
--------------------------------
Visszaad egy pár `[width, height]` a feltöltött kép méreteivel. Ha a feltöltés nem volt sikeres, vagy nem érvényes kép, akkor a `null` visszatér.


toImage(): Nette\Utils\Image .[method]
--------------------------------------
Képet tölt be [Image |utils:images] objektumként. Ha a feltöltés nem volt sikeres vagy nem érvényes kép, akkor a `Nette\Utils\ImageException` kivételt dob.
