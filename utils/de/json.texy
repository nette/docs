JSON-Funktionen
***************

.[perex]
[api:Nette\Utils\Json] ist eine statische Klasse mit JSON-Kodierungs- und Dekodierungsfunktionen. Sie behandelt Sicherheitslücken in verschiedenen PHP-Versionen und löst bei Fehlern Ausnahmen aus.

Installation:

```shell
composer require nette/utils
```

Alle Beispiele gehen davon aus, dass der folgende Klassenalias definiert ist:

```php
use Nette\Utils\Json;
```


Verwendung .[#toc-usage]
========================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Konvertiert `$value` in das JSON-Format.

Wenn `$pretty` gesetzt ist, wird JSON zur besseren Lesbarkeit und Übersichtlichkeit formatiert:

```php
Json::encode($value); // liefert JSON
Json::encode($value, pretty: true); // gibt eindeutigeres JSON zurück
```

Wenn `$asciiSafe` eingestellt ist, wird eine ASCII-Ausgabe erzeugt, d. h. die Unicode-Zeichen werden durch `\uxxxx` -Sequenzen ersetzt:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Der Parameter `$htmlSafe` stellt sicher, dass die Ausgabe keine Zeichen mit besonderer Bedeutung in HTML enthält:

```php
Json::encode('eins<zwei & drei', htmlSafe: true);
// '"eins\u003Czwei \u0026 drei"'
```

Mit `$forceObjects` werden auch Arrays mit numerischen Schlüsseln als JavaScript-Objekte kodiert:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Im Fehlerfall wird eine `Nette\Utils\JsonException` Exception ausgelöst.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Behandlung von Ausnahmen
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parst JSON in PHP.

Die Einstellung `$forceArray` erzwingt die Rückgabe von Arrays anstelle von Objekten:

```php
Json::decode('{"variable": true}'); // liefert ein Objekt vom Typ stdClass
Json::decode('{"variable": true}', forceArray: true); // gibt ein Array zurück
```

Im Fehlerfall wird eine `Nette\Utils\JsonException` Exception ausgelöst.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Behandlung von Ausnahmen
}
```


Wie sende ich ein JSON von einem Presenter? .[#toc-how-to-send-a-json-from-a-presenter]
=======================================================================================

Sie können die Methode `$this->sendJson($data)` verwenden, die z.B. in der Methode `action*()` aufgerufen werden kann, siehe [Senden einer Antwort |application:presenters#Sending a Response].
