Vykreslování formulářů
**********************

Vzhled formulářů může být velmi různorodý. V praxi můžeme narazit na dva extrémy. Na jedné straně stojí potřeba v aplikaci vykreslovat řadu formulářů, které jsou si vizuálně podobné jako vejce vejci, a oceníme snadné vykreslení pomocí `echo $form`. Jde obvykle o případ administračních rozhraní.

Na druhé straně tu jsou rozmanité formuláře, kde platí: co kus, to originál. Jejich podobu nejlépe popíšeme jazykem HTML. A samozřejmě kromě obou zmíněných extrémů narazíme na spoustu formulářů, které se pohybují někde mezi.


Výchozí vykreslování
====================

Automatické vykreslení formuláře obstarává tzv. renderer. Ten lze nastavit metodou `setRenderer`. Předá se mu řízení při zavolání metody `$form->render()` nebo `echo $form`. Pokud nenastavíme vlastní renderer, bude použit výchozí vykreslovač [api:Nette\Forms\Rendering\DefaultFormRenderer]. Stačí tedy napsat:

```php
echo $form;
```

nebo v [Latte |latte:]:

```html
{control form}
```

a formulář je na světě. Prvky formuláře se vykreslí do HTML tabulky. Výstup vypadá takto:

```html
<table>
<tr class="required">
	<th><label class="required" for="frm-name">Jméno:</label></th>

	<td><input type="text" class="text" name="name" id="frm-name" value="" /></td>
</tr>

<tr class="required">
	<th><label class="required" for="frm-age">Věk:</label></th>

	<td><input type="text" class="text" name="age" id="frm-age" value="" /></td>
</tr>

<tr>
	<th><label>Pohlaví:</label></th>
	...
```

*Hezky naformátované, viďte? :-)*

Zda použít nebo nepoužít pro kostru formuláře tabulku je sporné a řada webdesignerů preferuje jiný markup. Například definiční seznam. Překonfigurujeme `DefaultFormRenderer` tak, aby formulář v podobě seznamu vykreslil. Konfigurace se provádí editací pole [$wrappers |api:Nette\Forms\Rendering\DefaultFormRenderer::$wrappers]. První index vždy představuje oblast a druhý její atribut. Jednotlivé oblasti znázorňuje obrázek:

[* defaultformrenderer.gif *]

Standardně je skupina prvků `controls` obalena tabulkou `<table>`, každý `pair` představuje řádek tabulky `<tr>` a dvojice `label` a `control` jsou buňky `<th>` a `<td>`. Nyní obalující elementy změníme. Oblast `controls` vložíme do kontejneru `<dl>`, oblast `pair` necháme bez kontejneru, `label` vložíme do `<dt>` a nakonec `control` obalíme značkami `<dd>`:

```php
$renderer = $form->getRenderer();
$renderer->wrappers['controls']['container'] = 'dl';
$renderer->wrappers['pair']['container'] = null;
$renderer->wrappers['label']['container'] = 'dt';
$renderer->wrappers['control']['container'] = 'dd';

echo $form;
```

Výsledkem je tento HTML kód:

```html
<dl>
	<dt><label class="required" for="frm-name">Jméno:</label></dt>

	<dd><input type="text" class="text" name="name" id="frm-name" value="" /></dd>


	<dt><label class="required" for="frm-age">Věk:</label></dt>

	<dd><input type="text" class="text" name="age" id="frm-age" value="" /></dd>


	<dt><label>Pohlaví:</label></dt>
	...
</dl>
```

V poli wrappers lze ovlivnit celou řadu dalších atributů:

- přidávat CSS třídy jednotlivým typům formulářových prvků
- rozlišovat CSS třídou liché a sudé řádky
- vizuálně odlišit povinné a volitelné položky
- určovat, zda se chybové zprávy zobrazí přímo u prvků nebo nad formulářem

Podpora pro Bootstrap
=====================

[V příkladech |https://github.com/nette/forms/tree/master/examples] najdete ukázky, jak nakonfigurovat vykreslování formulářů pro [Twitter Bootstrap 2 |https://github.com/nette/forms/blob/a0bc775b96b30780270bdec06396ca985168f11a/examples/bootstrap2-rendering.php#L58], [Bootstrap 3 |https://github.com/nette/forms/blob/a0bc775b96b30780270bdec06396ca985168f11a/examples/bootstrap3-rendering.php#L58] a [Bootstrap 4 |https://github.com/nette/forms/blob/96b3e90/examples/bootstrap4-rendering.php]


Manuální vykreslování
=====================

Formuláře lze vykreslovat i ručně a tím získat větší kontrolu nad kódem. Celý formulář umístíme mezi párové značky `{form myForm}` a `{/form}`. Jednotlivé prvky můžeme vypisovat pomocí značek `{input myInput}`, které vypíší formulářový prvek, a `{label myLabel /}`, které vypíší jeho popisek.

```html
{form signForm}

<!-- Jednoduché vykreslení chyb -->
<ul class="errors" n:if="$form->hasErrors()">
	<li n:foreach="$form->errors as $error">{$error}</li>
</ul>

<table>
<tr class="required">
	<th>{label name /}</th>
	<td>{input name}</td>
</tr>

<!-- V případě že potřebujeme vykreslit ručně jednotlivé prvky radiolistu -->
<p>{input radioList:itemKey} | {input radioList:itemKeyTwo}</p>

...

</table>
{/form}
```

Velmi snadno také můžete propojit formulář s existující šablonou. Stačí jen doplnit atributy `n:name`:

```php
protected function createComponentSignInForm(): Form
{
	$form = new Form;
	$form->addText('user')->setRequired();
	$form->addPassword('password')->setRequired();
	$form->addSubmit('send');
	return $form;
}
```

```html
<form n:name=signInForm class=form>
	<p><label n:name=user>Username: <input n:name=user size=20></label>
	<p><label n:name=password>Password: <input n:name=password></label>
	<p><input n:name=send class="btn btn-default">
</form>
```

Atribut `n:name` lze používat i s elementy `<select>`, `<button>` nebo `<textarea>` a vnitřní obsah se automaticky doplní.

Dále můžete vykreslovat prvky jako je RadioList, Checkbox nebo CheckboxList pěkně po jednotlivých HTML elementech. Říká se tomu partial rendering:

```html
{foreach $form[gender]->items as $key => $label}
	<label n:name="gender:$key"><input n:name="gender:$key"> {$label}</label>
{/foreach}
```

Nebo lze použít klasické značky `{input gender:$key}` a `{label gender:$key}`, trik je v tom názvu s dvojtečkou. Pro jednoduchý checkbox použijte `{input myCheckbox:}`.

S vykreslením prvků uvnitř formulářového kontejneru pomůže tag `{formContainer}`.

```html
{form signForm}
<table>
	<th>Přeji si emailem odebírat tyto novinky:</th>
	<td>
		{formContainer emailNews}
		<ul>
			<li>{input sport} {label sport /}</li>
			<li>{input science} {label science /}</li>
		</ul>
		{/formContainer}
	</td>
	...
</table>
{/form}
```

Jak nastavit HTML elementům další atributy? Metody `getControl()` a `getLabel()` vrací element v podobě [api:Nette\Utils\Html] objektu, se kterým se dá [snadno pracovat |html-elements]. Takto například v Latte:

```html
{form signForm class => 'big'}
<table>
<tr class="required">
	<th>{label name /}</th>
	<td>{input name cols => 40, autofocus => true}</td>
</tr>
```

Seskupování prvků
=================

Prvky lze seskupovat do vizuálních skupin (fieldsetů) vytvořením skupiny:

```php
$form->addGroup('Personal data');
```

Po vytvoření nové skupiny se tato stává aktivní a každý nově přidaný prvek je zároveň přidán i do ní. Takže formulář lze stavět tímto způsobem:

```php
$form = new Form;
$form->addGroup('Personal data');
$form->addText('name', 'Your name:');
$form->addInteger('age', 'Your age:');
$form->addEmail('email', 'Email:');

$form->addGroup('Shipping address');
$form->addCheckbox('send', 'Ship to address');
$form->addText('street', 'Street:');
$form->addText('city', 'City:');
$form->addSelect('country', 'Country:', $countries);
```


HTML atributy
=============

Formulářovým prvkům můžeme nastavovat libovolné HTML atributy:

```php
$form->addInteger('number', 'Číslo:')
	->setHtmlAttribute('class', 'bigNumbers');

$form->addSelect('rank', 'Řazení dle:', ['ceny', 'názvu'])
	->setHtmlAttribute('onchange', 'submit()'); // při změně odeslat


// chceme-li to samé udělat pro <form> - od nette/forms 3.0.3
$form->setHtmlAttribute('id', 'myForm');

// před verzí 3.0.3
$form->getElementPrototype()->id = 'myForm';
```

Nastavení typu:

```php
$form->addText('tel', 'Váš telefon:')
	->setHtmlType('tel')
	->setHtmlAttribute('placeholder', 'napište telefon');
```

Jednotlivým položkám v radio nebo checkbox listech můžeme nastavit HTML atribut s rozdílnými hodnotami pro každou z nich.
Povšimněte si dvojtečky za `style:`, která zajistí volbu hodnoty podle klíče:

```php
$colors = ['r' => 'červená', 'g' => 'zelená', 'b' => 'modrá'];
$styles = ['r' => 'background:red', 'g' => 'background:green'];
$form->addCheckboxList('colors', 'Barvy:', $colors)
	->setHtmlAttribute('style:', $styles);
```

Vypíše:

```html
<label><input type="checkbox" name="colors[]" style="background:red" value="r">červená</label>
<label><input type="checkbox" name="colors[]" style="background:green" value="g">zelená</label>
<label><input type="checkbox" name="colors[]" value="b">modrá</label>
```

Pokud jde o logický HTML atribut (který nemá hodnotu, např. `readonly`), můžeme použít zápis s otazníkem:

```php
$colors = ['r' => 'červená', 'g' => 'zelená', 'b' => 'modrá'];
$form->addCheckboxList('colors', 'Barvy:', $colors)
	->setHtmlAttribute('readonly?', 'r'); // pro více klíču použijte pole, např. ['r', 'g']
```

Vypíše:

```html
<label><input type="checkbox" name="colors[]" readonly value="r">červená</label>
<label><input type="checkbox" name="colors[]" value="g">zelená</label>
<label><input type="checkbox" name="colors[]" value="b">modrá</label>
```

V případě selectboxů metoda `setHtmlAttribute()` nastavuje atributy elementu `<select>`. Pokud chceme nastavit atributy jednotlivým
`<option>`, použijeme metodu `setOptionAttribute()` (od verze 3.0.4). Fungují i zápisy s dvojtečkou a otazníkem uvedené výše:


```php
$form->addSelect('colors', 'Barvy:', $colors)
	->setOptionAttribute('style:', $styles);
```

Vypíše:

```html
<select name="colors">
	<option value="r" style="background:red">červená</option>
	<option value="g" style="background:green">zelená</option>
	<option value="b">modrá</option>
</select>
```

Další nastavení
===============

Nastavení popisku, který se vypisuje za polem:

```php
$form->addText('phone', 'Číslo:')
	->setOption('description', 'Toto číslo zůstane skryté');
```

Pokud do něj chceme umístit HTML obsah, využijeme třídy [Html |html-elements]

```php
use Nette\Utils\Html;

$form->addText('phone', 'Číslo:')
	->setOption('description', Html::el('p')
		->setHtml('Toto číslo zůstane skryté. <a href="...">Podmínky uchovávání Vašeho čísla</a>')
	);
```

.[tip]
Html prvek lze využít i místo labelu: `$form->addCheckbox('conditions', $label)`.




{{composer: nette/forms}}
