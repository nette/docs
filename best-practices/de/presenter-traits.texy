Zusammenstellung von Moderatoren aus Merkmalen
**********************************************

.[perex]
Wenn wir denselben Code in mehreren Presentern implementieren müssen (z. B. die Überprüfung, ob der Benutzer angemeldet ist), ist es verlockend, den Code in einem gemeinsamen Vorgänger zu platzieren. Die zweite Möglichkeit ist die Erstellung von Single-Purpose-Traits.

Der Vorteil dieser Lösung ist, dass jeder Präsentator nur die Traits verwenden kann, die er tatsächlich benötigt, während Mehrfachvererbung in PHP nicht möglich ist.

Diese Traits können sich die Tatsache zunutze machen, dass alle [Inject-Methoden |inject-method-attribute#inject methods] bei der Erstellung des Presenters nacheinander aufgerufen werden. Sie müssen nur darauf achten, dass der Name jeder Inject-Methode eindeutig ist.

Traits können den Initialisierungscode in [onStartup- oder onRender-Ereignisse |application:presenters#Events] einhängen.

Beispiele:

```php
trait RequireLoggedUser
{
	public function injectRequireLoggedUser(): void
	{
		$this->onStartup[] = function () {
			if (!$this->getUser()->isLoggedIn()) {
				$this->redirect('Sign:in', $this->storeRequest());
			}
		};
	}
}

trait StandardTemplateFilters
{
	public function injectStandardTemplateFilters(TemplateBuilder $builder): void
	{
		$this->onRender[] = function () use ($builder) {
			$builder->setupTemplate($this->template);
		};
	}
}
```

Der Vortragende nutzt dann einfach diese Eigenschaften:

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	use StandardTemplateFilters;
	use RequireLoggedUser;
}
```


{{sitename: Bewährte Praktiken}}
