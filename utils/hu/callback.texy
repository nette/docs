Visszahívási funkciók
*********************

.[perex]
[api:Nette\Utils\Callback] egy statikus osztály, amely a [PHP visszahívásokkal |https://www.php.net/manual/en/language.types.callable.php] való munkához szükséges függvényeket tartalmazza.


Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi, hogy a következő osztály alias van definiálva:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Ellenőrzi, hogy a `$callable` érvényes PHP callback-e. Ellenkező esetben dobja a `Nette\InvalidArgumentException`. Ha a `$syntax` értéke true, a függvény csak azt ellenőrzi, hogy a `$callable` érvényes struktúrával rendelkezik-e, amely callbackként használható, de azt nem ellenőrzi, hogy az osztály vagy metódus valóban létezik-e. Visszaadja a `$callable`.

```php
Callback::check('trim'); // nincs kivétel
Callback::check(['NonExistentClass', 'method']); // Nette\InvalidArgumentException-t dob.
Callback::check(['NonExistentClass', 'method'], true); // nincs kivétel
Callback::check(function () {}); // nincs kivétel
Callback::check(null); // Nette\InvalidArgumentException-t dob.
```


toString($callable): string .[method]
-------------------------------------

A PHP visszahívást szöveges formába konvertálja. Osztály vagy metódus nem létezhet.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Visszaadja a PHP visszahívásban használt metódus vagy függvény reflexióját.

```php
$ref = Callback::toReflection('trim');
// $ref is ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref is ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Ellenőrzi, hogy a PHP callback függvény vagy statikus metódus.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Feloldja a `Closure::fromCallable` által létrehozott lezárást :https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
