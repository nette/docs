Übergabe von Abhängigkeiten
***************************
<div class=perex>


Argumente, oder "Abhängigkeiten" in der DI-Terminologie, können auf die folgenden Hauptwege an Klassen übergeben werden:

* Übergabe per Konstruktor
* Übergabe durch eine Methode (Setter genannt)
* durch das Setzen einer Eigenschaft
* durch Methode, Annotation oder Attribut *inject*

</div>

Die ersten drei Methoden gelten allgemein in allen objektorientierten Sprachen, die vierte ist spezifisch für Nette-Präsentatoren und wird daher in einem [eigenen Kapitel |best-practices:inject-method-attribute] behandelt. Wir werden uns nun jede dieser Möglichkeiten genauer ansehen und anhand konkreter Beispiele erläutern.


Konstruktor-Injektion .[#toc-constructor-injection]
===================================================

Abhängigkeiten werden als Argumente an den Konstruktor übergeben, wenn das Objekt erstellt wird:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Diese Form ist nützlich für obligatorische Abhängigkeiten, die die Klasse unbedingt benötigt, um zu funktionieren, da ohne sie die Instanz nicht erstellt werden kann.

Seit PHP 8.0 können wir eine kürzere Form der Notation verwenden ([constructor property promotion |https://blog.nette.org/de/php-8-0-vollstaendiger-ueberblick-ueber-die-neuigkeiten#toc-constructor-property-promotion]), die funktional gleichwertig ist:

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

Seit PHP 8.1 kann eine Eigenschaft mit einem Flag `readonly` markiert werden, das besagt, dass sich der Inhalt der Eigenschaft nicht ändern wird:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Der DI-Container übergibt Abhängigkeiten automatisch an den Konstruktor mittels [Autowiring |autowiring]. Argumente, die nicht auf diese Weise übergeben werden können (z.B. Strings, Zahlen, Booleans), [werden in die Konfiguration geschrieben |services#Arguments].


Setter-Injektion .[#toc-setter-injection]
=========================================

Abhängigkeiten werden durch den Aufruf einer Methode übergeben, die sie in einer privaten Eigenschaft speichert. Die übliche Namenskonvention für diese Methoden ist die Form `set*()`, weshalb sie auch Setter genannt werden.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Diese Methode ist nützlich für optionale Abhängigkeiten, die für die Funktion der Klasse nicht notwendig sind, da nicht garantiert ist, dass das Objekt sie tatsächlich erhält (d. h. dass der Benutzer die Methode aufruft).

Gleichzeitig ermöglicht diese Methode, dass der Setter wiederholt aufgerufen werden kann, um die Abhängigkeit zu ändern. Wenn dies nicht erwünscht ist, fügen Sie der Methode ein Häkchen hinzu, oder markieren Sie ab PHP 8.1 die Eigenschaft `$cache` mit dem Flag `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

Der Setter-Aufruf wird in der DI-Container-Konfiguration im [Abschnitt setup |services#Setup] definiert. Auch hier wird die automatische Übergabe von Abhängigkeiten durch Autowiring genutzt:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Property Injection .[#toc-property-injection]
=============================================

Abhängigkeiten werden direkt an die Eigenschaft übergeben:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Diese Methode wird als ungeeignet angesehen, da die Eigenschaft als `public` deklariert werden muss. Daher haben wir keine Kontrolle darüber, ob die übergebene Abhängigkeit tatsächlich vom angegebenen Typ ist (dies war vor PHP 7.4 der Fall), und wir verlieren die Möglichkeit, auf die neu zugewiesene Abhängigkeit mit unserem eigenen Code zu reagieren, um zum Beispiel nachträgliche Änderungen zu verhindern. Gleichzeitig wird die Eigenschaft Teil der öffentlichen Schnittstelle der Klasse, was möglicherweise nicht wünschenswert ist.

Die Einstellung der Variablen wird in der Konfiguration des DI-Containers im [Abschnitt setup |services#Setup] festgelegt:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Welcher Weg soll gewählt werden? .[#toc-which-way-to-choose]
============================================================

- Der Konstruktor eignet sich für obligatorische Abhängigkeiten, die die Klasse zum Funktionieren benötigt.
- der Setter hingegen eignet sich für optionale oder veränderbare Abhängigkeiten
- öffentliche Variablen werden nicht empfohlen
