Bootstrap
*********

<div class=perex>

Bootstrap est le code de d√©marrage qui initialise l'environnement, cr√©e un conteneur d'injection de d√©pendances (DI) et d√©marre l'application. Nous en discuterons :

- comment configurer votre application √† l'aide de fichiers NEON
- comment g√©rer les modes production et d√©veloppement
- comment cr√©er le conteneur DI

</div>


Les applications, qu'elles soient bas√©es sur le Web ou sur des scripts en ligne de commande, commencent par une certaine forme d'initialisation de l'environnement. Dans les temps anciens, il pouvait s'agir d'un fichier nomm√© eg `include.inc.php` qui s'en chargeait, et qui √©tait inclus dans le fichier initial.
Dans les applications Nette modernes, il a √©t√© remplac√© par la classe `Bootstrap`, qui, en tant que partie int√©grante de l'application, se trouve dans le fichier `app/Bootstrap.php`. Il peut ressembler √† ceci par exemple :

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// Le configurateur est charg√© de configurer l'environnement et les services de l'application.
		$this->configurator = new Configurator;
		// D√©finir le r√©pertoire pour les fichiers temporaires g√©n√©r√©s par Nette (par exemple, les mod√®les compil√©s)
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// Nette est intelligent, et le mode d√©veloppement est activ√© automatiquement,
		// ou vous pouvez l'activer pour une adresse IP sp√©cifique en d√©commentant la ligne suivante:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Active Tracy: l'ultime outil de d√©bogage "couteau suisse".
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: charge automatiquement toutes les classes dans le r√©pertoire donn√©
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Chargement des fichiers de configuration
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php .[#toc-index-php]
===========================

Le fichier initial des applications web est `index.php`, situ√© dans le r√©pertoire public `www/`. Il utilise la classe `Bootstrap` pour initialiser l'environnement et cr√©er un conteneur DI. Ensuite, il obtient le service `Application` du conteneur, ce qui lance l'application web :

```php
$bootstrap = new App\Bootstrap;
// Initialiser l'environnement + cr√©er un conteneur DI
$container = $bootstrap->bootWebApplication();
// Le conteneur DI cr√©e un objet Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// D√©marrer l'application Nette et traiter la demande entrante
$application->run();
```

Comme vous pouvez le constater, la classe [api:Nette\Bootstrap\Configurator], que nous allons maintenant pr√©senter plus en d√©tail, aide √† configurer l'environnement et √† cr√©er un conteneur d'injection de d√©pendances (DI).


Mode d√©veloppement et mode production .[#toc-development-vs-production-mode]
============================================================================

Nette se comporte diff√©remment selon qu'il fonctionne sur un serveur de d√©veloppement ou de production :

üõ†Ô∏è Mode de d√©veloppement:
	- Affiche la barre de d√©bogage de Tracy avec des informations utiles (par exemple, les requ√™tes SQL, le temps d'ex√©cution, l'utilisation de la m√©moire).
	- Affiche une page d'erreur d√©taill√©e avec les traces des appels de fonction et le contenu des variables lorsqu'une erreur se produit.
	- Actualise automatiquement le cache lorsque les mod√®les Latte, les fichiers de configuration, etc. sont modifi√©s.


Mode production:
	- N'affiche aucune information de d√©bogage ; toutes les erreurs sont enregistr√©es.
	- Affiche une page `ErrorPresenter` ou une page g√©n√©rique "Server Error" lorsqu'une erreur se produit.
	- Le cache n'est jamais actualis√© automatiquement !
	- Optimis√© pour la vitesse et la s√©curit√©.


Le mode est d√©termin√© automatiquement, de sorte que dans la plupart des cas, il n'est pas n√©cessaire de le configurer ou de le changer manuellement :

- Mode d√©veloppement : Actif sur l'h√¥te local (adresse IP `127.0.0.1` ou `::1`) √† moins qu'un proxy ne soit utilis√© (d'apr√®s ses en-t√™tes HTTP).
- Mode production : Actif partout ailleurs.

Si vous souhaitez activer le mode d√©veloppement dans d'autres cas, par exemple pour les programmeurs acc√©dant depuis une adresse IP sp√©cifique, vous pouvez utiliser `setDebugMode()`:

```php
$this->configurator->setDebugMode('23.75.345.200'); // une ou plusieurs adresses IP
```

Nous recommandons vivement de combiner une adresse IP avec un cookie. Nous stockerons un jeton secret dans le cookie `nette-debug`, par exemple `secret1234`, et le mode de d√©veloppement sera activ√© pour les programmeurs avec cette combinaison d'IP et de cookie.

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Nous pouvons √©galement d√©sactiver compl√®tement le mode de d√©veloppement, m√™me pour localhost :

```php
$this->configurator->setDebugMode(false);
```

Notez que la valeur `true` active le mode d√©veloppeur par d√©faut, ce qui ne devrait jamais arriver sur un serveur de production.


Outil de d√©bogage Tracy .[#toc-debugging-tool-tracy]
====================================================

Pour faciliter le d√©bogage, nous allons activer l'excellent outil [Tracy |tracy:]. En mode d√©veloppeur, il visualise les erreurs et en mode production, il enregistre les erreurs dans le r√©pertoire sp√©cifi√© :

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Fichiers temporaires .[#toc-temporary-files]
============================================

Nette utilise le cache pour le conteneur DI, RobotLoader, les mod√®les, etc. Il est donc n√©cessaire de d√©finir le chemin d'acc√®s au r√©pertoire o√π le cache sera stock√© :

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

Sous Linux ou macOS, d√©finissez les [droits d'√©criture |nette:troubleshooting#Setting directory permissions] pour les r√©pertoires `log/` et `temp/`.


RobotLoader .[#toc-robotloader]
===============================

En g√©n√©ral, nous voulons charger automatiquement les classes √† l'aide de [RobotLoader |robot-loader:], nous devons donc le lancer et le laisser charger les classes du r√©pertoire o√π se trouve `Bootstrap.php` (c'est-√†-dire `__DIR__`) et de tous ses sous-r√©pertoires :

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Une autre solution consiste √† utiliser uniquement le chargement automatique de [Composer |best-practices:composer] PSR-4.


Fuseau horaire .[#toc-timezone]
===============================

Le configurateur vous permet de sp√©cifier un fuseau horaire pour votre application.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Configuration du conteneur DI .[#toc-di-container-configuration]
================================================================

Une partie du processus de d√©marrage est la cr√©ation d'un conteneur DI, c'est-√†-dire une fabrique d'objets, qui est le c≈ìur de toute l'application. Il s'agit en fait d'une classe PHP g√©n√©r√©e par Nette et stock√©e dans un r√©pertoire de cache. La fabrique produit les objets cl√©s de l'application et les fichiers de configuration lui indiquent comment les cr√©er et les configurer, et ainsi nous influen√ßons le comportement de l'application enti√®re.

Les fichiers de configuration sont g√©n√©ralement √©crits au [format NEON |neon:format]. Vous pouvez lire [ce qui peut √™tre configur√© ici |nette:configuring].

.[tip]
En mode d√©veloppement, le conteneur est automatiquement mis √† jour chaque fois que vous modifiez le code ou les fichiers de configuration. En mode production, il n'est g√©n√©r√© qu'une seule fois et les modifications de fichiers ne sont pas v√©rifi√©es afin de maximiser les performances.

Les fichiers de configuration sont charg√©s √† l'aide de `addConfig()`:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

La m√©thode `addConfig()` peut √™tre appel√©e plusieurs fois pour ajouter plusieurs fichiers.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

Le nom `cli.php` n'est pas une faute de frappe, la configuration peut √©galement √™tre √©crite dans un fichier PHP, qui la renvoie sous forme de tableau.

Alternativement, nous pouvons utiliser la [section`includes`  |dependency-injection:configuration#including files] pour charger plus de fichiers de configuration.

Si des √©l√©ments avec les m√™mes cl√©s apparaissent dans les fichiers de configuration, ils seront [√©cras√©s ou fusionn√©s |dependency-injection:configuration#Merging] dans le cas de tableaux. Le dernier fichier inclus a une priorit√© plus √©lev√©e que le pr√©c√©dent. Le fichier dans lequel figure la section `includes` a une priorit√© plus √©lev√©e que les fichiers qui y sont inclus.


Param√®tres statiques .[#toc-static-parameters]
----------------------------------------------

Les param√®tres utilis√©s dans les fichiers de configuration peuvent √™tre d√©finis [dans la section `parameters` |dependency-injection:configuration#parameters] et √©galement transmis (ou √©cras√©s) par la m√©thode `addStaticParameters()` (qui a un alias `addParameters()`). Il est important que les diff√©rentes valeurs des param√®tres entra√Ænent la g√©n√©ration de conteneurs DI suppl√©mentaires, c'est-√†-dire de classes suppl√©mentaires.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

Dans les fichiers de configuration, nous pouvons √©crire la notation habituelle `%projectId%` pour acc√©der au param√®tre nomm√© `projectId`.


Param√®tres dynamiques .[#toc-dynamic-parameters]
------------------------------------------------

Nous pouvons √©galement ajouter des param√®tres dynamiques au conteneur, leurs diff√©rentes valeurs, contrairement aux param√®tres statiques, ne provoqueront pas la g√©n√©ration de nouveaux conteneurs DI.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

Les variables d'environnement peuvent √™tre facilement mises √† disposition √† l'aide de param√®tres dynamiques. Nous pouvons y acc√©der via `%env.variable%` dans les fichiers de configuration.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Param√®tres par d√©faut .[#toc-default-parameters]
------------------------------------------------

Vous pouvez utiliser les param√®tres statiques suivants dans les fichiers de configuration :

- `%appDir%` est le chemin absolu vers le r√©pertoire du fichier `Bootstrap.php`
- `%wwwDir%` est le chemin absolu vers le r√©pertoire contenant le fichier d'entr√©e `index.php`
- `%tempDir%` est le chemin absolu vers le r√©pertoire des fichiers temporaires
- `%vendorDir%` est le chemin absolu vers le r√©pertoire o√π Composer installe les biblioth√®ques
- `%rootDir%` est le chemin absolu vers le r√©pertoire racine du projet
- `%debugMode%` indique si l'application est en mode d√©bogage
- `%consoleMode%` indique si la demande provient de la ligne de commande


Services import√©s .[#toc-imported-services]
-------------------------------------------

Nous allons maintenant plus loin. Bien que le but d'un conteneur DI soit de cr√©er des objets, il peut exceptionnellement √™tre n√©cessaire d'ins√©rer un objet existant dans le conteneur. Nous le faisons en d√©finissant le service avec l'attribut `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Cr√©ez une nouvelle instance et ins√©rez-la dans bootstrap :

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Diff√©rents environnements .[#toc-different-environments]
========================================================

N'h√©sitez pas √† personnaliser la classe `Bootstrap` en fonction de vos besoins. Vous pouvez ajouter des param√®tres √† la m√©thode `bootWebApplication()` pour diff√©rencier les projets web. Vous pouvez √©galement ajouter d'autres m√©thodes, telles que `bootTestEnvironment()` pour initialiser l'environnement des tests unitaires, `bootConsoleApplication()` pour les scripts appel√©s √† partir de la ligne de commande, etc.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // Initialisation du testeur Nette
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
