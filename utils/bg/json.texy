Работа с JSON
*************

.[perex]
[api:Nette\Utils\Json] е статичен клас с функции за кодиране и декодиране на JSON. Тя се справя с уязвимостите в различните версии на PHP и хвърля изключения при възникване на грешки.

Монтаж:

```shell
composer require nette/utils
```

Всички примери предполагат, че псевдонимът вече е създаден:

```php
use Nette\Utils\Json;
```


Използване на .[#toc-usage]
===========================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Конвертира `$value` във формат JSON.

Ако е зададено на `$pretty`, това форматира JSON за по-лесно четене и яснота:

```php
Json::encode($value); // връща JSON
Json::encode($value, pretty: true); // връща по-чист JSON
```

На адрес `$asciiSafe` той генерира изход в ASCII, т.е. замества символите Unicode с последователността `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Параметърът `$htmlSafe` гарантира, че изходът няма да съдържа символи, които имат специално значение в HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

С `$forceObjects` дори полетата с числови ключове ще бъдат кодирани като обекти на JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Изключение се хвърля при грешка `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Обработка на изключения
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Разработва JSON в PHP.

Задаването на `$forceArray` води до връщане на масиви вместо на обекти:

```php
Json::decode('{"variable": true}'); // връща обект от тип stdClass
Json::decode('{"variable": true}', forceArray: true); // return array
```

Ако възникне грешка, се изхвърля изключение на адрес `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Обработка на изключения
}
```


Как да изпратя JSON от главния модул? .[#toc-how-to-send-a-json-from-a-presenter]
=================================================================================

Това може да стане с помощта на метода `$this->sendJson($data)`, който може да бъде извикан в метода `action*()`, например вижте [Изпращане на отговор |application:presenters#Sending a Response].
