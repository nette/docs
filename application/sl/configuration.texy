Konfiguriranje aplikacije
*************************

.[perex]
Pregled možnosti konfiguracije za aplikacijo Nette.


Aplikacija .[#toc-application]
==============================

```neon
application:
	# prikazuje ploščo "Nette Application" v programu Tracy BlueScreen?
	debugger: ...           # (bool) privzeto je true

	# ali se ob napaki pokliče error-presenter?
	catchExceptions: ...    # (bool) privzeto true v produkcijskem načinu

	# ime programa error-presenter
	errorPresenter: Error   # (string) privzeto 'Nette:Error'

	# določa pravila za razrešitev imena predstavnika na razred
	mapping: ...

	# ali slabe povezave ustvarjajo opozorila?
	# učinkuje samo v načinu za razvijalce
	silentLinks: ...        # (bool) privzeto je false
```

Ker se v razvojnem načinu predstavniki napak privzeto ne kličejo, napake pa prikazuje Tracy, sprememba vrednosti `catchExceptions` v `true` pomaga preveriti, ali predstavniki napak med razvojem delujejo pravilno.

Možnost `silentLinks` določa, kako se Nette obnaša v razvojnem načinu, ko generiranje povezav ne uspe (na primer ker ni predstavnika itd.). Privzeta vrednost `false` pomeni, da Nette sproži `E_USER_WARNING`. Nastavitev na `true` to sporočilo o napaki odpravi. V produkcijskem okolju se vedno sproži `E_USER_WARNING`. Na to obnašanje lahko vplivamo tudi z nastavitvijo spremenljivke presenterja [$invalidLinkMode |creating-links#Invalid Links].

 [Prikazovanje določa pravila, |modules#mapping] po katerih se ime razreda izpelje iz imena predstavnika.


Samodejna registracija predavateljev .[#toc-automatic-registration-of-presenters]
---------------------------------------------------------------------------------

Nette samodejno doda predstavnike kot storitve v vsebnik DI, kar znatno pospeši njihovo ustvarjanje. Kako Nette najde predstavnike, lahko nastavite:

```neon
application:
	# za iskanje predavateljev na zemljevidu razredov programa Composer?
	scanComposer: ...      # (bool) privzeto true

	# maska, ki se mora ujemati z imenom razreda in datoteke
	scanFilter: ...        # (string) privzeto '*Presenter'

	# v katerih imenikih iskati predstavnike?
	scanDirs:              # (string[]|false) privzeto '%appDir%'
		- %vendorDir%/mymodule
```

Imeniki, navedeni v `scanDirs`, ne nadomeščajo privzete vrednosti `%appDir%`, temveč jo dopolnjujejo, tako da bo `scanDirs` vseboval poti `%appDir%` in `%vendorDir%/mymodule`. Če želimo prepisati privzeti imenik, uporabimo [izklicaj |dependency-injection:configuration#Merging]:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

Pregledovanje imenikov lahko izklopimo z nastavitvijo false. Ne priporočamo popolne ukinitve samodejnega dodajanja predstavnikov, sicer se bo zmanjšalo delovanje aplikacije.


Latte .[#toc-latte]
===================

Ta nastavitev globalno vpliva na obnašanje programa Latte v komponentah in predstavitvah.

```neon
latte:
	# prikaže ploščo Latte v Tracy Baru za glavno predlogo (true) ali za vse komponente (all)?
	debugger: ...        # (true|false|'all') privzeto je true

	# preklopi Latte na način XHTML (zastarelo)
	xhtml: ...           # (bool) privzeto je false

	# generira predloge z declare(strict_types=1)
	strictTypes: ...     # (bool) privzeto je false

	# razred $this->template
	templateClass: App\MyTemplateClass # privzeto je Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Če uporabljate različico Latte 3, lahko novo [razširitev |latte:creating-extension] dodate z uporabo:

```neon
latte:
	extensions:
		- Latte\Essential\TranslatorExtension
```

Če uporabljate različico Latte 2, lahko nove oznake registrirate z vnosom imena razreda ali s sklicevanjem na storitev. Privzeto se kliče metoda `install()`, vendar lahko to spremenite tako, da navedete ime druge metode:

```neon
latte:
	# registracija uporabniških oznak Latte
	macros:
		- App\MyLatteMacros::register         # statična metoda, ime razreda ali možnost klicanja
		- @App\MyLatteMacrosFactory           # storitev z metodo namestitve
		- @App\MyLatteMacrosFactory::register # storitev z metodo registracija

services:
	- App\MyLatteMacrosFactory
```


Usmerjanje .[#toc-routing]
==========================

Osnovne nastavitve:

```neon
routing:
	# prikazuje usmerjevalno ploščo v vrstici Tracy Bar?
	debugger: ...   # (bool) privzeto je true

	# serializirati usmerjevalnik v vsebnik DI?
	cache: ...      # (bool) privzeto false
```

Usmerjevalnik je običajno definiran v razredu [RouterFactory |routing#Route Collection]. Alternativno lahko usmerjevalnike določimo tudi v konfiguraciji z uporabo parov `mask: action`, vendar ta način ne ponuja tako široke variabilnosti nastavitev:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Konstante .[#toc-constants]
===========================

Ustvarjanje konstant PHP.

```neon
constants:
	Foobar: 'baz'
```

Konstanta `Foobar` bo ustvarjena po zagonu.

.[note]
Konstante ne smejo služiti kot globalno dostopne spremenljivke. Za posredovanje vrednosti objektom uporabite [vbrizgavanje odvisnosti |dependency-injection:passing-dependencies].


PHP
===

Nastavite lahko direktive PHP. Pregled vseh direktiv je na voljo na [php.net |https://www.php.net/manual/en/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```
