Začínáme
########

.[perex]
V první kapitole si stáhneme **Nette Framework**, seznámíme se s obsahem distribuce a připravíme si vše, co budeme pro naší aplikaci potřebovat.

.[note]
Tutoriál je psaný pro aktuální vývojovou verzi Nette. Nestahujte doporučenou verzi 2.0-alpha, ale vývojovou verzi pro PHP 5.3.

Stažení a instalace
*******************

Příprava sandboxu
=================

Nejprve si vytvoříme na místě, které bude přístupné z našeho vývojového webového serveru, prázdný adresář, do kterého umístíme náš projekt. Pojmenujeme ho například `quickstart`. Při nahrávání na produkční server je výhodné některé soubory oddělit od prostoru, který je přístupný z webu, ale prozatím se tím nebudeme zabývat. Všechny bezpečnostní tipy a triky naleznete v poslední kapitole návodu.

Nyní si stáhneme [Nette Framework |http://nette.org/cs/download]. Archiv rozbalíme (prozatím je jedno kam) a podíváme se na jeho obsah. Nejvíce nás budou zajímat složky `Nette` a `sandbox`. Složka `Nette`, jak již název napovídá, obsahuje samotný Nette Framework. Složka `sandbox` obsahuje předpřipravenou kostru aplikace založené na Nette. Tato kostra nám usnadní mnoho práce a tak jí ihned využijeme. Obsah této složky rozbalíme do naší složky projektu. Adresářová struktura bude vypadat nějak takto:

/---

quickstart/
+--app/
+--document_root/
+--libs/
+--log/
+--temp/
+--tests/
\---

- Složka `app` obsahuje data naší aplikace. Většinu času se budeme pohybovat právě tady.
- `document_root` obsahuje soubory, které mají být přístupné z webu - obrázky, JavaScript, CSS tabulky a další.
- `libs` slouží pro umístění knihoven třetích stran.
- Do složky `log` se budou umisťovat ladící výpisy. Podrobněji tuto možnost rozebereme v poslední kapitole návodu.
- `temp`, jak již název napovídá, tato složka slouží pro odkládání dočasných souborů.
- Složka `tests` je připravena na testy naší aplikace, ty ale nyní nebudeme využívat.

Instalace Nette Framework
=========================

Naše kostra neobsahuje Nette Framework, musíme jej nakopírovat zvlášť. Ve složce `libs` se nachází podsložka `Nette` a v ní ještě jedna podsložka `Nette`. Tu smažeme a nahradíme jí již dříve zmíněnou složkou `Nette` přímo z kořenového adresáře distribuce.

.[note]
Na produkčním serveru je výhodné používat zmenšenou verzi ze složky `Nette.minified`. Ta je ale pro účely vývoje nevhodná a tuto možnost a její výhody podrobněji rozebereme v poslední kapitole.

Adresářová struktura bude nyní vypadat takto:

/---

quickstart/
+--libs/
   +--Nette/
      +--Nette/
         +--Application/
         +--Caching/
          ...
         +--loader.php
          ...
\---

.[note]
Pokud používáte operační systém GNU/Linux (případně jiný nix-like systém), budete potřebovat nastavit oprávnění pro zápis do složek `log` a `temp`. Nejjednodušší je použít příkaz `chmod +R 0777 temp log`, ten ale nebývá vždy nejvhodnější.


Připraveno!
===========

Nyní již máme vše připraveno! Můžeme otevřít náš projekt ve webovém prohlížeči - stačí jej nasměrovat na adresář `quickstart/document_root`, kde by se nám mělo dostat následujícího přivítání:

[* sandbox.png *]


Aplikace
********

Jak již bylo zmíněno, složka `app` bude středem vesmíru naší aplikace. Pojďme se na její obsah teď podívat trochu podrobněji.

Zajímat nás budou hlavně složky `models`, `presenters` a `templates`.

- Složka `models` bude obsahovat "modely" naší aplikace. Jedná se o třídy, které slouží jako datová vrstva. Budou tedy zprostředkovávat komunikaci s datovými úložišti, například databází, webovými službami nebo soubory. Podrobněji si tyto třídy představíme později.
- Složka `presenters` slouží pro takzvané presentery. Zjednodušeně řečeno se jedná o třídu, která se stará o propojení všech částí aplikace - modelů, komponent a pohledů((view)).
- Složka `templates` bude obsahovat šablony pro pohledy. Presentery i pohledy si podrobněji představíme hned v další kapitole.

Poměrně zásadní roli bude v naší aplikaci hrát soubor `bootstrap.php`. Jde o zavaděč naší aplikace a právě on se stará o načtení Nette, načtení konfiguračních souborů, správnou konfiguraci aplikace a nakonec i o její samotné spuštění. Protože je tento soubor tak důležitý, pojďme si ho rozebrat řádek po řádku.

bootstrap.php
-------------

Výchozí `bootstrap.php` ze sandboxu vypadá nějak takto (pro úsporu místa uvádíme bez dokumentační hlavičky):

/---php
<?php

use Nette\Diagnostics\Debugger;
use Nette\Environment;
use Nette\Application\Routers\Route;

// Step 1: Load Nette Framework
// this allows load Nette Framework classes automatically so that
// you don't have to litter your code with 'require' statements
require LIBS_DIR . '/Nette/Nette/loader.php';


// Step 2: Configure environment
// 2a) enable Nette\Diagnostics\Debugger for better exception and error visualisation
Debugger::$strictMode = TRUE;
Debugger::enable();

// 2b) load configuration from config.ini file
Environment::loadConfig();

// Step 3: Configure application
// 3a) get and setup a front controller
$application = Environment::getApplication();
$application->errorPresenter = 'Error';
//$application->catchExceptions = TRUE;


// Step 4: Setup application router
$router = $application->getRouter();

$router[] = new Route('index.php', array(
	'presenter' => 'Homepage',
	'action' => 'default',
), Route::ONE_WAY);

$router[] = new Route('<presenter>/<action>/<id>', array(
	'presenter' => 'Homepage',
	'action' => 'default',
	'id' => NULL,
));


// Step 5: Run the application!
$application->run();
\---

Řádek
/---php
require LIBS_DIR . '/Nette/Nette/loader.php';
\---

načítá Nette. Soubor `loader.php` si automaticky zaregistruje mechanismus, kterým se budou jednotlivé části Nette načítat, takže se už o další `require` do Nette nemusíme starat.

Řádky
/---php
Debugger::$strictMode = TRUE;
Debugger::enable();
\---

aktivují [laděnku |debugging]. Ta se stará o přehledné zachycení a zobrazení chyb ve vývojovém prostředí a o vytváření chybových hlášení na produkčním serveru.

Řádek
/---php
Environment::loadConfig();
\---

načítá konfiguraci aplikace. Ta je uložena v souboru `config.ini` právě ve složce `app`. Obsahuje (případně bude obsahovat) nastavení databáze, některých základních direktiv PHP a další nastavení pro naší aplikaci.

Řádky
/---php
$application = Environment::getApplication();
$application->errorPresenter = 'Error';
\---

vytvářejí instanci třídy `Application` a nastavují presenter, který se v produkčním prostředí postará o zobrazení chybových hlášek. To je poměrně důležité, protože uživatel by měl být informován o tom, že došlo k chybě, ale neměl by se dozvědět žádné interní podrobnosti. Pro nás to však zatím moc důležité nebude.

Další blok řádků nastavuje router. O routování si povíme později, prozatím bude stačit jen to, že se starají o mapování adresy URL na požadavek na konkrétní presenter a pohled a zpracování jeho parametrů.

Poslední řádek
/---php
$application->run();
\---

spouští životní cyklus aplikace. Během něj se adresa přeloží na požadavek na presenter a pohled. Daný presenter se vytvoří a spustí se jeho cyklus a pak se aplikace korektně ukončí.

A to je k souboru `bootstrap.php` vše.




-----

- stažení Nette a instalace sandboxu
- představení adresářů presenters, templates
- představení souboru bootstrap.php
	- Debug::enable() - představení laděnky
	- načtení konfigurace - představení confui.ini (později .neon)
	- zmínění RobotLoaderu a jeho výhod
	- router - stručné nastínění propojení, prozatím zůstaneme u výchozích rout
