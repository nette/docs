Файлова система
***************

.[perex]
[api:Nette\Utils\FileSystem] це статичний клас, що містить корисні функції для роботи з файловою системою. Одна з переваг перед власними функціями PHP полягає в тому, що вони кидають винятки в разі помилок.


Встановлення:

```shell
composer require nette/utils
```

У наступних прикладах передбачається, що псевдонім уже створено:

```php
use Nette\Utils\FileSystem;
```


Маніпуляція .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копіює файл або цілий каталог. За замовчуванням перезаписує наявні файли та каталоги. З параметром `$overwrite`, встановленим у `false`, викликає виняток `Nette\InvalidStateException`, якщо цільовий файл або каталог `$target` існує. У разі виникнення помилки піднімається виняток `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Створює каталог, якщо він не існує, включаючи батьківські каталоги. Викликає виняток `Nette\IOException` у разі виникнення помилки.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Видаляє файл або весь каталог, якщо він існує. Якщо каталог не порожній, то спочатку видаляється його вміст. Якщо сталася помилка, підніміть виняток `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Встановлює дозволи на файл за адресою `$fileMode` або каталог за адресою `$dirMode`. Рекурсивно переглядає і встановлює дозволи на весь вміст каталогу.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Відкриває файл і повертає ресурс. Параметр `$mode` працює так само, як і власні функції `fopen()`:https://www.php.net/manual/en/function.fopen.php. При виникненні помилки виникає виняток `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Повертає вміст файлу `$file`. При виникненні помилки видає виняток `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Читає вміст файлу порядково. На відміну від рідної функції `file()`, вона не завантажує весь файл у пам'ять, а зчитує його безперервно,
щоб можна було читати файли, розмір яких перевищує обсяг доступної пам'яті. `$stripNewLines` Вказує, чи слід збривати символи кінця рядка `\r` і `\n`.
Якщо сталася помилка, підніміть виняток `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Перейменування або переміщення файлу чи каталогу `$origin`. За замовчуванням перезаписує наявні файли та каталоги. З параметром `$overwrite`, встановленим у `false`, викликає виняток `Nette\InvalidStateException`, якщо цільовий файл або каталог `$target` існує. У разі виникнення помилки піднімається виняток `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записує рядок `$content` у файл `$file`. У разі помилки викликає виключення `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Шляхи .[#toc-paths]
===================


isAbsolute(string $path): bool .[method]
----------------------------------------

Визначає, чи є шлях `$path` абсолютним.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Об'єднує всі сегменти шляху та нормалізує результат.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормалізує `..` і `.` та роздільники каталогів у шляху до системи.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Перетворює косі риски на `/`, які використовуються в системах Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Перетворює косі риски на символи, характерні для поточної платформи, тобто `\` ve Windows a `/` в інших місцях.

```php
$path = FileSystem::platformSlashes($path);
```
