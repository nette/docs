Začínáme
********

.[perex]
Seznamte se s Nette Frameworkem a vytvořte si svoji první aplikaci.

Úplně první věc, kterou bychom měli udělat, je zkontrolovat, zda náš server splňuje [požadavky|/requirements] pro běh Nette Frameworku. To by s největší pravděpodobností mělo být v pořádku, ale jen pro jistotu, nechceme začínat na nefunkčním prostředí.

Nette Framework můžeme [stáhnout manuálně |www:download], ale doporučená cesta je začít nový projekt s využitím [Composeru |/composer]. Pokud Composer neznáte, určitě byste měli začít s ním. Je to velice jednoduchý a užitečný nástroj, vše se dozvíte v [dokumentaci Composeru|http://getcomposer.org/doc/].

S Composerem si můžeme velmi jednoduše stáhnout a nainstalovat základní skeleton aplikace, známý jako Sandbox, který již obsahuje Nette Framework. Abychom mohli založit projekt, najdeme si kořenový adresář webového serveru (např. `/var/www` nebo `C:\InetPub`) a pomocí příkazové řádky a spustíme následující příkaz.

/--code
composer create-project nette/sandbox nette-blog
\--

Sandbox se následně stáhne do složky `nette-blog`.

.[note]
Pokud nechcete použít Composer, [stáhněte |www:download] si archív a rozbalte jej. Framework se nachází ve složce Nette, k dispozici je i minimalizovaná podoba Nette-minified/nette.phar. V adresáři API-reference najdete kopii API dokumentace, v examples je sada jednoduchých rovnou spustitelných příkladů, tools obsahuje pár užitečných nástrojů a konečně sandbox, zmíněný předpřipravený prázdný projekt, který si zkopírujte do kořenového adresáře webového serveru a přejmenujte na `nette-blog`.

Pokud vyvíjíte na Mac OS X nebo na Linuxu (nebo na jakémkoliv jiném systému založeném na Unixu), budeme muset ještě nastavit práva zápisu webovému serveru.

/--code
cd nette-blog && chmod -R a+rw temp log
\--


Úvodní stránka
====

V tento okamžik by měla již úvodní stránka Sandboxu fungovat. Vyzkoušíme to otevřením prohlížeče na následující URL adrese:

/--
http://localhost/nette-blog/www/
\--

a uvidíme úvodní stránku Nette Frameworku:

[* welcome-620.jpg *]

Aplikace funguje a můžete začít dělat úpravy.


Obsah Sandboxu
====

Sandbox má následující strukturu:

/--pre
<b>www/</b>                      ← kořenový adresář webu
└── <b>nette-blog/</b>
    ├── <b>app/</b>              ← adresář webové aplikace
    │   ├── <b>config/</b>       ← konfigurační soubory
    │   ├── <b>model/</b>        ← třídy modelové vrstvy
    │   ├── <b>presenters/</b>   ← třídy presenterů
    │   ├── <b>templates/</b>    ← šablony
    │   └── <b>bootstrap.php</b> ← spouštěcí soubor
    │
    ├── <b>libs/</b>             ← knihovny pro vaší aplikaci
    │   └── <b>Nette/</b>        ← jako například váš oblíbený framework :-)
    │
    ├── <b>log/</b>              ← zde naleznete chybové logy
    ├── <b>temp/</b>             ← místo pro dočasné soubory (cache, sessiony, atd.)
    ├── <b>test/</b>             ← adresář pro unit testy
    └── <b>www/</b>              ← místní kořenový adresář webu - pouze tento adresář je přístupný z internetu
\--

Adresář `www` je určen pro ukládání obrázků, JavaScript souborů, CSS stylů a dalších veřejně přístupných souborů. Pouze tento adresář je přístupný z internetu, takže můžete nastavit kořenový adresář vaší aplikace tak, aby směřoval právě sem (to můžete nastavit v nastavení Apache, ale pojďme to udělat později, teď to není důležité).

Nejdůležitější složka je pro nás `app/`. Zde nalezneme soubor `bootstrap.php`, který slouží k načtení celého frameworku a nastavení aplikace. Aktivuje se zde [autoloading |/auto-loading], nastaví se zde [debugger |/debugging] a [routy |/routing].



Úklid
=======

Sandbox obsahuje ukázkový kód. Měli bychom začít tím, že ho pročistíme, předtím než začneme něco programovat - bez obav tedy smažeme soubor `app/templates/Homepage/default.latte`. Vlastní obsah přidáme za moment.


Tracy
=====

Extrémně důležitý nástroj pro vývoj je [ladící nástroj Tracy |/debugging]. Vyzkoušejte si vyvolání nějaké chyby v souboru `app/presenters/HomepagePresenter.php` (např. odstranění písmena ze slova `class` na začátku třídy) a podívejte se, co se stane. Vyskočí červená stránka, která chybu srozumitelně popisuje.

[* debugger-620.png .(debugger screen) *]

Tracy nám ohromně pomůže, až budeme hledat chyby v aplikaci. Také si všimněte plovoucího debug panelu v pravém dolním rohu obrazovky, který obsahuje informace z běhu aplikace.

V produkčním módu je Tracy samozřejmě vypnuta a nezobrazuje žádné citlivé informace. Všechny chyby jsou v tomto případě uloženy ve složce `log/`. Pojďme si to vyzkoušet, v souboru `app/bootstrap.php` odkomentujeme následující řádek a změníme parametr volání na `FALSE`, aby kód vypadal takto:

/--php
// Enable Nette Debugger for error visualization & logging
$configurator->setDebugMode(FALSE);
$configurator->enableDebugger(__DIR__ . '/../log');
\--

Po obnovení stránky již Tracy neuvidíme, ale místo ní se zobrazí uživatelsky přívětivá zpráva:

[* server-error-620.png .(error screen) *]

Nyní se podívejme do adresáře `log/`. Zde nalezneme zalogovanou chybu a také již zmíněnou červenou stránku uloženou jako HTML soubory s názvem začínající na `exception`.

Zakomentujeme zase řádek `$configurator->setDebugMode(FALSE);`. Tracy automaticky povolí debug režim na localhostu a zakáže ho všude jinde.

S těmito základními znalostmi se už můžeme vrhnout na psaní aplikace.

{{care: Filip Procházka|2117}}
{{care: Honza Doleček|3537}}
