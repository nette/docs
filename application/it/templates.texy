Modelli
*******

.[perex]
Nette utilizza il sistema di template [Latte |latte:]. Latte è utilizzato perché è il sistema di template più sicuro per PHP e allo stesso tempo il più intuitivo. Non è necessario imparare molto di nuovo, basta conoscere PHP e alcuni tag di Latte.

Di solito la pagina viene completata dal modello di layout + il modello di azione. Ecco come potrebbe apparire un modello di layout, notando i blocchi `{block}` e il tag `{include}`:

```latte
<!DOCTYPE html>
<html>
<head>
	<title>{block title}My App{/block}</title>
</head>
<body>
	<header>...</header>
	{include content}
	<footer>...</footer>
</body>
</html>
```

E questo potrebbe essere il modello di azione:

```latte
{block title}Homepage{/block}

{block content}
<h1>Homepage</h1>
...
{/block}
```

Definisce il blocco `content`, che viene inserito al posto di `{include content}` nel layout, e ridefinisce anche il blocco `title`, che sovrascrive `{block title}` nel layout. Provate a immaginare il risultato.


Ricerca dei modelli .[#toc-search-for-templates]
------------------------------------------------

Il percorso dei modelli viene dedotto secondo una semplice logica. Si cerca di vedere se uno di questi file di template esiste relativamente alla directory in cui si trova la classe del presentatore, dove `<Presenter>` è il nome del presentatore corrente e `<view>` è il nome dell'azione corrente:

- `templates/<Presenter>/<view>.latte`
- `templates/<Presenter>.<view>.latte`

Se non trova il modello, la risposta è un [errore 404 |presenters#Error 404 etc.].

Si può anche cambiare la vista usando `$this->setView('otherView')`. Oppure, invece di cercare, specificare direttamente il nome del file del template usando `$this->template->setFile('/path/to/template.latte')`.

.[note]
È possibile modificare i percorsi in cui vengono cercati i modelli sovrascrivendo il metodo [formatTemplateFiles |api:Nette\Application\UI\Presenter::formatTemplateFiles()], che restituisce un array di possibili percorsi di file.

Il layout è previsto nei seguenti file:

- `templates/<Presenter>/@<layout>.latte`
- `templates/<Presenter>.@<layout>.latte`
- `templates/@<layout>.latte` layout comune a più presentatori

`<Presenter>` è il nome del presentatore corrente e `<layout>` è il nome del layout, che per impostazione predefinita è `'layout'`. Il nome può essere modificato con `$this->setLayout('otherLayout')`, in modo da provare i file `@otherLayout.latte`.

È anche possibile specificare direttamente il nome del file del modello di layout con `$this->setLayout('/path/to/template.latte')`. L'uso di `$this->setLayout(false)` disabilita la ricerca dei layout.

.[note]
È possibile modificare i percorsi in cui vengono cercati i modelli sovrascrivendo il metodo [formatLayoutTemplateFiles |api:Nette\Application\UI\Presenter::formatLayoutTemplateFiles()], che restituisce un array di possibili percorsi di file.


Variabili nel modello .[#toc-variables-in-the-template]
-------------------------------------------------------

Le variabili vengono passate al template scrivendole in `$this->template` e poi sono disponibili nel template come variabili locali:

```php
$this->template->article = $this->articles->getById($id);
```

In questo modo possiamo passare facilmente qualsiasi variabile ai template. Tuttavia, quando si sviluppano applicazioni robuste, spesso è più utile limitarsi. Per esempio, definendo esplicitamente un elenco di variabili che il template si aspetta e i loro tipi. Ciò consentirà a PHP di effettuare il controllo dei tipi, all'IDE di effettuare il completamento automatico in modo corretto e all'analisi statica di rilevare gli errori.

Come si definisce un'enumerazione di questo tipo? Semplicemente sotto forma di una classe e delle sue proprietà. La chiamiamo in modo simile a presenter, ma con `Template` alla fine:

```php
/**
 * @property-read ArticleTemplate $template
 */
class ArticlePresenter extends Nette\Application\UI\Presenter
{
}

class ArticleTemplate extends Nette\Bridges\ApplicationLatte\Template
{
	public Model\Article $article;
	public Nette\Security\User $user;

	// e altre variabili
}
```

L'oggetto `$this->template` nel presentatore sarà ora un'istanza della classe `ArticleTemplate`. Quindi PHP controllerà i tipi dichiarati quando vengono scritti. A partire da PHP 8.2, inoltre, avvertirà di scrivere su una variabile inesistente; nelle versioni precedenti si può ottenere lo stesso risultato utilizzando il tratto [Nette\SmartObject |utils:smartobject].

L'annotazione `@property-read` è per l'IDE e l'analisi statica, farà funzionare il completamento automatico, vedere "PhpStorm e il completamento del codice per $this->template":https://blog.nette.org/en/phpstorm-and-code-completion-for-this-template.

[* phpstorm-completion.webp *]

Ci si può concedere il lusso di sussurrare anche nei template, basta installare il plugin Latte in PhpStorm e specificare il nome della classe all'inizio del template, si veda l'articolo "Latte: come digitare il sistema":https://blog.nette.org/it/latte-come-usare-il-sistema-di-tipi:

```latte
{templateType App\Presenters\ArticleTemplate}
...
```

Questo è anche il modo in cui i template funzionano nei componenti, basta seguire la convenzione di denominazione e creare una classe template `FifteenTemplate` per il componente, ad esempio `FifteenControl`.

Se si vuole creare una classe `$template` come istanza di un'altra classe, usare il metodo `createTemplate()`:

```php
public function renderDefault(): void
{
	$template = $this->createTemplate(SpecialTemplate::class);
	$template->foo = 123;
	// ...
	$this->sendTemplate($template);
}
```


Variabili predefinite .[#toc-default-variables]
-----------------------------------------------

I presentatori e i componenti passano automaticamente diverse variabili utili ai modelli:

- `$basePath` è un percorso URL assoluto alla cartella principale (ad esempio `/CD-collection`)
- `$baseUrl` è un URL assoluto alla cartella principale (per esempio `http://localhost/CD-collection`)
- `$user` è un oggetto [che rappresenta l'utente |security:authentication]
- `$presenter` è il presentatore corrente
- `$control` è il componente o presentatore corrente
- `$flashes` è un elenco di [messaggi |presenters#flash-messages] inviati dal metodo `flashMessage()`

Se si utilizza una classe modello personalizzata, queste variabili vengono passate se si crea una proprietà per esse.


Creazione di collegamenti .[#toc-creating-links]
------------------------------------------------

Nel modello si creano collegamenti ad altri presentatori e azioni come segue:

```latte
<a n:href="Product:show">detail</a>
```

L'attributo `n:href` è molto utile per i tag HTML `<a>`. Se vogliamo stampare il link altrove, ad esempio nel testo, usiamo `{link}`:

```latte
URL is: {link Homepage:default}
```

Per ulteriori informazioni, vedere [Creazione di collegamenti |Creating Links].


Filtri personalizzati, tag, ecc. .[#toc-custom-filters-tags-etc]
----------------------------------------------------------------

Il sistema di template Latte può essere esteso con filtri personalizzati, funzioni, tag, ecc. Questo può essere fatto direttamente nel metodo `render<View>` o nel metodo `beforeRender()`:

```php
public function beforeRender(): void
{
	// aggiunta di un filtro
	$this->template->addFilter('foo', /* ... */);

	// oppure configurare direttamente l'oggetto LatteEngine
	$latte = $this->template->getLatte();
	$latte->addFilterLoader(/* ... */);
}
```

La versione 3 di Latte offre un metodo più avanzato, creando un'[estensione |latte:creating-extension] per ogni progetto web. Ecco un esempio approssimativo di una classe di questo tipo:

```php
namespace App\Templating;

final class LatteExtension extends Latte\Extension
{
	public function __construct(
		private App\Model\Facade $facade,
		private Nette\Security\User $user,
		// ...
	) {
	}

	public function getFilters(): array
	{
		return [
			'timeAgoInWords' => $this->filterTimeAgoInWords(...),
			'money' => $this->filterMoney(...),
			// ...
		];
	}

	public function getFunctions(): array
	{
		return [
			'canEditArticle' =>
				fn($article) => $this->facade->canEditArticle($article, $this->user->getId()),
			// ...
		];
	}

	// ...
}
```

La registriamo usando [configuration |configuration#Latte]:

```neon
latte:
	extensions:
		- App\Templating\LatteExtension
```
