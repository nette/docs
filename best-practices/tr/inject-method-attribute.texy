Inject Yöntemleri ve Öznitelikleri
**********************************

.[perex]
Belirli örnekler kullanarak, bağımlılıkları sunum yapanlara aktarma olasılıklarını inceleyeceğiz ve `inject` yöntemlerini ve özniteliklerini/açıklamalarını açıklayacağız.


`inject*()` Yöntemler .[#toc-inject-methods]
============================================

Diğer kodlarda olduğu gibi presenter'da da bağımlılıkları aktarmanın tercih edilen yolu [yapıcı |dependency-injection:passing-dependencies#Constructor Injection] kullanmaktır. Ancak, sunucu ortak bir atadan miras alıyorsa (örneğin `BasePresenter`), bu atadaki `inject*()` yöntemlerini kullanmak daha iyidir. Bu, yöntemin `inject` önekiyle başladığı özel bir setter durumudur. Bunun nedeni, kurucuyu torunlar için serbest tutmamızdır:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function injectBase(Foo $foo): void
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Bar $bar)
	{
		$this->bar = $bar;
	}
}
```

Bir setter'dan temel farkı, Nette DI'nın örnek oluşturulur oluşturulmaz bu şekilde adlandırılan yöntemleri otomatik olarak çağırması ve gerekli tüm bağımlılıkları bunlara aktarmasıdır. Bir sunucu birden fazla yöntem içerebilir `inject*()` ve her yöntemin herhangi bir sayıda parametresi olabilir.

Bağımlılıkları atalara kurucuları aracılığıyla aktarsaydık, tüm torunlarda bağımlılıklarını almamız ve bunları `parent::__construct()` adresine aktarmamız gerekirdi ki bu da kodu karmaşıklaştırırdı:

```php
abstract class BasePresenter extends Nette\Application\UI\Presenter
{
	private Foo $foo;

	public function __construct(Foo $foo)
	{
		$this->foo = $foo;
	}
}

class MyPresenter extends BasePresenter
{
	private Bar $bar;

	public function __construct(Foo $foo, Bar $bar)
	{
		parent::__construct($foo); // bu bir komplikasyon
		$this->bar = $bar;
	}
}
```

`inject*()` yöntemleri, sunum yapan kişinin [özelliklerden oluştuğu |presenter-traits] ve her birinin kendi bağımlılığını gerektirdiği durumlarda da kullanışlıdır.

`@inject` ek açıklamasını kullanmak da mümkündür, ancak kapsüllemenin bozulduğunu akılda tutmak önemlidir.


`Inject` Ek Açıklamalar .[#toc-inject-annotations]
==================================================

Bu, bağımlılığın, belgeleme açıklamasında `@inject` ile açıklanan sunumcunun genel üye değişkenine otomatik olarak aktarılmasıdır. PHP 7.4'ten daha düşük bir sürüm kullanıyorsanız, tür de belgeleme açıklamasında belirtilebilir.

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	/** @inject */
	public Cache $cache;
}
```

PHP 8.0'dan bu yana, bir özellik `Inject` özniteliği ile işaretlenebilir:

```php
use Nette\DI\Attributes\Inject;

class MyPresenter extends Nette\Application\UI\Presenter
{
	#[Inject]
	public Cache $cache;
}
```

Yine, Nette DI, örnek oluşturulur oluşturulmaz bu şekilde açıklanan özelliklere bağımlılıkları otomatik olarak aktaracaktır.

Bu yöntem, bağımlılıkları bir public özelliğe aktarmakla aynı eksikliklere sahiptir. Kodu karmaşıklaştırmadığı ve yalnızca minimum yazım gerektirdiği için presenter'da kullanılır.


{{sitename: En İyi Uygulamalar}}
