Funções do sistema de arquivos
******************************

.[perex]
[api:Nette\Utils\FileSystem] é uma classe estática, que contém funções úteis para trabalhar com um sistema de arquivos. Uma vantagem sobre as funções PHP nativas é que elas lançam exceções em caso de erros.


Instalação:

```shell
composer require nette/utils
```

Os exemplos a seguir assumem que a seguinte classe está definida:

```php
use Nette\Utils\FileSystem;
```


Manipulação .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Copia um arquivo ou um diretório inteiro. Sobrescreve arquivos e diretórios existentes por padrão. Se `$overwrite` estiver configurado para `false` e um `$target` já existir, lança uma exceção `Nette\InvalidStateException`. Lança uma exceção `Nette\IOException` por erro ocorrido.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Cria um diretório se ele não existir, incluindo os diretórios dos pais. Lança uma exceção `Nette\IOException` sobre erro ocorrido.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Apaga um arquivo ou um diretório inteiro, caso exista. Se o diretório não estiver vazio, ele apaga seu conteúdo primeiro. Lança uma exceção `Nette\IOException` sobre erro ocorrido.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Define as permissões de arquivo para `$fileMode` ou as permissões de diretório para `$dirMode`. Atravessa recursivamente e estabelece as permissões também em todo o conteúdo do diretório.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Abre arquivo e devolve recurso. O parâmetro `$mode` funciona da mesma forma que a função nativa `fopen()`:https://www.php.net/manual/en/function.fopen.php. Se ocorrer um erro, ele eleva a exceção `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Lê o conteúdo de um `$file`. Abre uma exceção `Nette\IOException` sobre erro ocorrido.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Lê o conteúdo do arquivo linha por linha. Ao contrário da função nativa `file()`, ela não lê o arquivo inteiro na memória, mas o lê continuamente, de modo que arquivos maiores do que a memória disponível possam ser lidos. O `$stripNewLines` especifica se deve retirar os caracteres de quebra de linha `\r` e `\n`.
No caso de um erro, ele levanta uma exceção `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Renomeia ou move um arquivo ou um diretório especificado por `$origin` para `$target`. Sobrescreve arquivos e diretórios existentes por padrão. Se `$overwrite` estiver definido como `false` e `$target` já existe, lança uma exceção `Nette\InvalidStateException`. Lança uma exceção `Nette\IOException` por erro ocorrido.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Escreve o `$content` para um `$file`. Lança uma exceção `Nette\IOException` sobre erro ocorrido.

```php
FileSystem::write('/path/to/file', $content);
```


Caminhos .[#toc-paths]
======================


isAbsolute(string $path): bool .[method]
----------------------------------------

Determina se o `$path` é absoluto.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Junta-se a todos os segmentos do caminho e normaliza o resultado.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normaliza `..` e `.` e separadores de diretórios no caminho.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Converte cortes para `/` usados em sistemas Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Converte cortes em caracteres específicos da plataforma atual, ou seja, `\` no Windows e `/` em outros lugares.

```php
$path = FileSystem::platformSlashes($path);
```
