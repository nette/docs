Miért használjon sablonokat?
****************************


Miért érdemes sablonrendszert használni a PHP-ban? .[#toc-why-should-i-use-a-templating-system-in-php]
------------------------------------------------------------------------------------------------------

Először is idézzük fel röviden a PHP történetét, amely tele van érdekes fordulatokkal. Az egyik első HTML templatálásra használt programozási nyelv a C volt, de erre a célra való használata alkalmatlannak bizonyult. Rasmus Lerdorf azért hozta létre a PHP-t, hogy megkönnyítse a dinamikus HTML generálást a C-vel a háttérben. A PHP-t kezdetben templating nyelvnek tervezték, de idővel egyre több funkciót kapott, és teljes értékű programozási nyelvvé vált.

Mindazonáltal továbbra is templating nyelvként működik. A PHP fájlokat HTML oldalakként lehet használni, ahol egy változót a következővel lehet kiadni `<?= $foo ?>`.

A PHP történelmének korai szakaszában a Smarty templating rendszert vezették be, hogy szigorúan elválasszák a megjelenést (HTML/CSS) az alkalmazási logikától. Képességei szándékosan korlátozottak voltak a PHP-hoz képest, így a fejlesztő például nem tudott egy sablonból lekérdezni egy adatbázist. Ezek a rendszerek azonban további függőséget vezettek be, növelték a projektek összetettségét, és egy új Smarty nyelv megtanulását igényelték. Előnyeik ellentmondásosak voltak, és továbbra is a sima PHP-t használták a sablonokhoz.

Idővel a sablonrendszerek hasznosabbá váltak. Egyre több programozó és vállalat ismerte fel a biztonság fontosságát. Felismerték az [olyan sebezhetőségek |safety-first] létezését [, mint az XSS |safety-first]. Egy változó megjelenítésének helyes módja nem `<?= $foo ?>` hanem a `<?= htmlspecialchars($foo) ?>`, és az escape elhanyagolása, azaz a `htmlspecialchars()` függvény használata komoly biztonsági rést okozhat. A sablonrendszerek bevezették az automatikus szkriptelést, így elég volt csak `{$foo}` írni, és a változó az escapinggel együtt jelenik meg.

A sablonrendszerek az öröklés, a sandboxing és más hasznos funkciók támogatását hozták, így a sablonok írása sokkal egyszerűbbé vált, mint a PHP esetében. Egy bizonyos ponton a templating rendszerek előnyei jelentősen felülmúlták az új függőség bevezetésével kapcsolatos aggodalmakat.


Miért érdemes a Latte templating rendszert használni? .[#toc-why-should-i-use-the-latte-templating-system]
----------------------------------------------------------------------------------------------------------

A fő okok a biztonság és a szintaxis.

Minden templating rendszer, mint például a Twig, a Blade vagy a Smarty, létezése során bevezette az XSS-védelmet automatikus escaping formájában. A Latte azonban tovább ment, és felismerte, hogy ahhoz, hogy az automatikus escaping valóban működőképes legyen, a rendszernek értenie kell a HTML-t. Nem csak egy karakterláncot kellett felismernie, hanem a címkéket, attribútumokat stb. is. Ez azért van így, mert a HTML-szövegben, a HTML-címkéken belül, a JavaScriptben stb. különböző eszkópálási módszerekre van szükség. A Latte megtanulta megérteni a HTML-t, és minden ilyen kontextusban [megfelelően |safety-first#Context-Aware Escaping] menekülni. Így lett az első és eddig az egyetlen PHP templating rendszer, amely kontextusfüggő escapinggel rendelkezik.

A Latte egy valóban biztonságos templating rendszert képvisel, míg más rendszerek a biztonság hamis érzetét keltik.

A Latte másik jelentős előnye, hogy a PHP szintaxisát használja, így a programozónak/programozónak nem kell új nyelvet tanulnia, hanem azt használhatja, amit már jól ismer.


Mik a fő különbségek az olyan templating rendszerek között, mint a Latte, a Twig és a Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Az olyan templating rendszerek, mint a Latte, a Twig és a Blade közötti különbségek elsősorban a szintaxisukban, a biztonságukban és a keretrendszerekkel való integrációjukban rejlenek:

- Latte: PHP nyelvi szintaxist használ, így könnyebben megtanulható és használható. Kiváló védelmet nyújt az XSS-támadások ellen.
- Twig: Python-szerű szintaxist használ, ami teljesen eltér a PHP nyelvtől. Kontextus megkülönböztetés nélkül menekül. Jól integrálható a Symfony keretrendszerrel.
- Blade: a PHP és az egyéni szintaxis keverékét használja. A kontextus megkülönböztetése nélkül menekül. Szorosan integrálódik a Laravel funkcióiba és ökoszisztémájába.


Megéri a vállalatoknak templating rendszert használni? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
----------------------------------------------------------------------------------------------------------------------

Először is, a képzéssel, a használattal és az általános előnyökkel kapcsolatos költségek jelentősen eltérnek a rendszertől függően. A Latte templating rendszer a PHP szintaxis használatának köszönhetően nagyban leegyszerűsíti a tanulást az ezen a nyelven már jártas programozók számára. Egy programozónak általában néhány óra alatt sikerül kellőképpen megismerkednie a Latte-tel, ami csökkenti a képzési költségeket, felgyorsítja a technológia átvételét és - ami a legfontosabb - a mindennapi használat hatékonyságát.

Emellett a Latte magas szintű védelmet nyújt az XSS sebezhetőséggel szemben az egyedülálló, kontextustudatos escaping technológiának köszönhetően. Ez a védelem kulcsfontosságú a webalkalmazások biztonságának biztosításához és a felhasználókat vagy a vállalati adatokat veszélyeztető támadások kockázatának minimalizálásához. A webalkalmazások biztonsága a vállalat jó hírnevének megőrzése szempontjából is fontos. A biztonsági problémák az ügyfelek bizalmának elvesztéséhez vezethetnek, és ronthatják a vállalat hírnevét a piacon.

A Latte használata csökkenti az általános fejlesztési és karbantartási költségeket is, mivel mindkettő egyszerűbbé válik. Ezért egy templating rendszer használata mindenképpen megéri.


Hogyan befolyásolja a Latte a webalkalmazás teljesítményét és a szerver erőforrásokat? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Bár a Latte sablonok feldolgozása gyors, ez a szempont nem igazán számít. Ennek oka, hogy a fájlok elemzése csak egyszer történik meg az első megjelenítés során. Ezután PHP-kóddá fordítják le őket, a lemezen tárolják, és minden következő kérésnél újbóli fordítás nélkül futtatják őket.

Ez így működik a termelési környezetben. A fejlesztés során a Latte sablonok minden alkalommal újrafordításra kerülnek, amikor tartalmuk megváltozik, így a fejlesztő mindig az aktuális verziót látja.
