Навіщо використовувати шаблони?
*******************************


Навіщо використовувати систему шаблонів в PHP? .[#toc-why-should-i-use-a-templating-system-in-php]
--------------------------------------------------------------------------------------------------

Для початку давайте коротко згадаємо історію PHP, повну цікавих поворотів. Однією з перших мов програмування, яка використовувалася для шаблонування HTML, була мова C. Однак її використання для цієї мети виявилося непридатним. Расмус Лердорф (Rasmus Lerdorf) створив PHP, щоб полегшити динамічну генерацію HTML за допомогою C на бекенді. Спочатку PHP був розроблений як мова шаблонів, але з часом він отримав більше можливостей і став повноцінною мовою програмування.

Тим не менш, він все ще функціонує як мова шаблонів. PHP-файли можна використовувати як HTML-сторінки, де ви можете виводити змінну за допомогою `<?= $foo ?>`.

На початку історії PHP була впроваджена система шаблонів Smarty, щоб чітко відокремити зовнішній вигляд (HTML/CSS) від логіки програми. Її можливості були свідомо обмежені в порівнянні з PHP, тому розробник не міг, наприклад, запитувати базу даних з шаблону. Однак ці системи вводили додаткові залежності, збільшували складність проекту і вимагали вивчення нової мови Smarty. Їхні переваги були суперечливими, і для шаблонів продовжували використовувати звичайний PHP.

З часом шаблонні системи стали більш корисними. Все більше програмістів і компаній усвідомлювали важливість безпеки. Вони визнали існування [таких вразливостей, як XSS |safety-first]. Правильним способом відображення змінної є не `<?= $foo ?>` а `<?= htmlspecialchars($foo) ?>`а нехтування екрануванням, тобто використання функції `htmlspecialchars()`, може призвести до серйозного порушення безпеки. Шаблонні системи запровадили автоматичне екранування, тому достатньо було написати просто `{$foo}`, і змінна буде відображена з включеним екрануванням.

Шаблонні системи принесли підтримку успадкування, пісочниці та інших корисних функцій, що зробило написання шаблонів набагато простішим, ніж у випадку з PHP. У якийсь момент переваги систем шаблонів значно переважили занепокоєння щодо введення нових залежностей.


Чому я повинен використовувати систему шаблонів Latte? .[#toc-why-should-i-use-the-latte-templating-system]
-----------------------------------------------------------------------------------------------------------

Основні причини - безпека та синтаксис.

Всі системи шаблонів, такі як Twig, Blade або Smarty, протягом свого існування впроваджували захист від XSS у вигляді автоматичного екранування. Однак Latte пішла далі, зрозумівши, що для того, щоб автоматичне екранування було дійсно функціональним, система повинна розуміти HTML. Вона повинна була розпізнавати не просто рядок символів, а й теги, атрибути тощо. Це пов'язано з тим, що в тексті HTML, в тегах HTML, в JavaScript і т.д. потрібні різні методи екранування. Latte навчився розуміти HTML і застосовувати екранування в кожному з цих контекстів [належним |safety-first#Context-Aware Escaping] чином. Таким чином, вона стала першою і поки що єдиною системою шаблонів PHP з контекстно-залежним екрануванням.

Latte є справді безпечною системою шаблонів, в той час як інші системи мають тенденцію створювати хибне відчуття безпеки.

Ще однією значною перевагою Latte є використання синтаксису PHP, тому програмісту/кодеру не потрібно вивчати нову мову, а можна використовувати те, що він вже добре знає.


Які основні відмінності між системами шаблонів Latte, Twig та Blade? .[#toc-what-are-the-main-differences-between-templating-systems-like-latte-twig-and-blade]
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Відмінності між такими системами шаблонів, як Latte, Twig і Blade, полягають, головним чином, у їхньому синтаксисі, безпеці та інтеграції з фреймворками:

- Latte: використовує синтаксис мови PHP, що робить її простішою у вивченні та використанні. Він забезпечує першокласний захист від XSS-атак.
- Twig: використовує Python-подібний синтаксис, який суттєво відрізняється від PHP. Він виконує ескейп без розрізнення контексту. Він добре інтегрований з фреймворком Symfony.
- Blade: використовує суміш PHP і власного синтаксису. Екранується без розрізнення контексту. Тісно інтегрована з функціями та екосистемою Laravel.


Чи варто компаніям використовувати систему шаблонів? .[#toc-is-it-worth-it-for-companies-to-use-a-templating-system]
--------------------------------------------------------------------------------------------------------------------

По-перше, витрати, пов'язані з навчанням, використанням та загальними перевагами, суттєво відрізняються залежно від системи. Система шаблонів Latte, завдяки використанню синтаксису PHP, значно спрощує навчання для програмістів, які вже знайомі з цією мовою. Зазвичай програмісту достатньо кількох годин, щоб достатньою мірою ознайомитися з Latte, що зменшує витрати на навчання і прискорює освоєння технології та, що найголовніше, ефективність у щоденному використанні.

Крім того, Latte забезпечує високий рівень захисту від XSS-уразливостей завдяки унікальній технології контекстно-залежного обходу. Цей захист має вирішальне значення для забезпечення безпеки веб-додатків і мінімізації ризику атак, які можуть загрожувати користувачам або даним компанії. Безпека веб-додатків також важлива для підтримки гарної репутації компанії. Проблеми з безпекою можуть призвести до втрати довіри з боку клієнтів і зашкодити репутації компанії на ринку.

Використання Latte також знижує загальні витрати на розробку та підтримку, спрощуючи обидва процеси. Тому використання системи шаблонів, безумовно, того варте.


Як Latte впливає на продуктивність веб-додатків і ресурси сервера? .[#toc-how-does-latte-affect-web-application-performance-and-server-resources]
-------------------------------------------------------------------------------------------------------------------------------------------------

Хоча шаблони Latte обробляються швидко, цей аспект не має особливого значення. Причина в тому, що синтаксичний аналіз файлів відбувається лише один раз під час першого відображення. Потім вони компілюються в PHP-код, зберігаються на диску і запускаються при кожному наступному запиті без необхідності перекомпіляції.

Саме так це працює у виробничому середовищі. Під час розробки шаблони Latte перекомпілюються щоразу, коли змінюється їхній вміст, тому розробник завжди бачить поточну версію.
