Praca z obrazami
****************

.[perex]
Klasa [api:Nette\Utils\Image] ułatwia manipulowanie obrazami, takie jak zmiana rozmiaru, przycinanie, wyostrzanie, rysowanie czy łączenie wielu obrazów.

PHP posiada rozbudowany zestaw funkcji do manipulowania obrazami. Jednak ich API nie jest zbyt wygodne. To nie byłby Nette Framework, żeby nie wymyślić seksownego API.

Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Image;
```


Tworzenie obrazu .[#toc-creating-an-image]
==========================================

Utwórz nowy obraz w kolorze rzeczywistym, na przykład o wymiarach 100×200:

```php
$image = Image::fromBlank(100, 200);
```

Możesz opcjonalnie określić kolor tła (domyślnie jest to kolor czarny):

```php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
```

Albo załadować obraz z pliku:

```php
$image = Image::fromFile('nette.jpg');
```

Czy musisz wykryć format obrazu podczas ładowania? Metoda zwraca go w drugim parametrze:

```php
$image = Image::fromFile('nette.jpg', $type);
// $type bude Image::JPEG, Image::PNG, Image::GIF, Image::WEBP nebo Image::BMP
```

Wykrywanie bez obciążenia odbywa się przez `Image::detectTypeFromFile()`.


Zapisywanie obrazu .[#toc-save-the-image]
=========================================

Obraz można zapisać do pliku:

```php
$image->save('resampled.jpg');
```

Możemy określić jakość kompresji w zakresie 0..100 dla JPEG (domyślnie 85) i WEBP (domyślnie 80) oraz 0..9 dla PNG (domyślnie 9):

```php
$image->save('resampled.jpg', 80); // JPEG, jakość 80%
```

Jeśli format nie jest oczywisty na podstawie rozszerzenia pliku, może być określony przez jedną ze stałych `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` oraz `Image::BMP`:

```php
$image->save('resampled.tmp', null, Image::JPEG);
```

Obraz może być zapisany do zmiennej zamiast na dysk:

```php
$data = $image->toString(Image::JPEG, 80); // JPEG, qualita 80%
```

lub wysyłane bezpośrednio do przeglądarki z odpowiednim nagłówkiem HTTP `Content-Type`:

```php
// wysyła nagłówek Content-Type: image/png
$image->send(Image::PNG);
```


Zmień rozmiar .[#toc-image-resize]
==================================

Często wykonywaną operacją jest zmiana rozmiaru obrazu. Rzeczywiste wymiary są zwracane przez metody `getWidth()` i `getHeight()`.

Metoda `resize()` służy do zmiany rozmiaru obrazu tak, aby nie przekraczał on 500x300 pikseli (albo szerokość będzie wynosiła dokładnie 500 px, albo wysokość dokładnie 300 px, jeden z wymiarów jest obliczany dla zachowania proporcji):

```php
$image->resize(500, 300);
```

Możliwe jest określenie tylko jednego wymiaru, a drugi zostanie obliczony:

```php
$image->resize(500, null); // szerokość 500px, wysokość jest obliczana

$image->resize(null, 300); // szerokość obliczona, wysokość 300px
```

Każdy wymiar może być określony jako procent:

```php
$image->resize('75%', 300); // 75% × 300px
```

Na zachowanie `resize` mogą wpływać następujące objawy. Wszystkie poza `Image::Stretch` zachowują proporcje.

|---------------------------------------------------------------------------------------
| Flaga | Opis
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (domyślnie) | wymiary wynikowe będą mniejsze lub równe żądanym wymiarom
| `Image::OrBigger` | wypełnia (i ewentualnie przekracza w jednym wymiarze) obszar docelowy
| `Image::Cover` | wypełnia obszar docelowy i przycina to, co go przekracza
| `Image::ShrinkOnly` | tylko zmniejszanie (unikanie rozciągania małego obrazu)
| `Image::Stretch` | nie zachowuj proporcji


Flagi są podawane jako trzeci argument funkcji:

```php
$image->resize(500, 300, Image::OrBigger);
```

Flagi mogą być łączone:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Obrazy można obrócić w pionie lub poziomie, nadając jednemu z wymiarów (lub obu) wartość ujemną:

```php
$flipped = $image->resize(null, '-100%'); // przerzuć w pionie

$flipped = $image->resize('-100%', '-100%'); // obróć o 180°.

$flipped = $image->resize(-125, 500); // zmiana rozmiaru i odwrócenie w poziomie
```

Po zmniejszeniu obrazu można poprawić jego wygląd poprzez dokładne wyostrzenie:

```php
$image->sharpen();
```


Uprawa .[#toc-cropping]
=======================

Do uprawy stosuje się metodę `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Podobnie jak w przypadku `resize()`, wszystkie wartości mogą być podane w procentach. Procenty dla `$left` i `$top` są obliczane z pozostałej przestrzeni, podobnie jak właściwość CSS `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Obraz można również przyciąć automatycznie, na przykład przycinając czarne obramowania:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Metoda `cropAuto()` jest obiektowym zamiennikiem funkcji `imagecropauto()`, więcej informacji można znaleźć w [jej dokumentacji |https://www.php.net/manual/en/function.imagecropauto].


Rysowanie i edycja .[#toc-drawing-and-editing]
==============================================

Możesz rysować, możesz pisać, ale nie drzyj kartek.

Wszystkie funkcje PHP do pracy z obrazami, takie jak [imagefilledellipse |https://www.php.net/manual/en/function.imagefilledellipse.php], są dostępne dla Ciebie, ale w obiektowym domyśle:

```php
$image->filledEllipse($cx, $cy, $width, $height, Image::rgb(255, 0, 0, 63));
```

Zobacz [Przegląd metod |#Overview-of-Methods].


Łączenie wielu obrazów .[#toc-merge-multiple-images]
====================================================

Możesz łatwo wstawić inny obraz do obrazu:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));

// współrzędne mogą być ponownie podane w procentach
$blank->place($logo, '80%', '80%'); // wstawiamy w pobliżu prawego dolnego rogu
```

Alfabet jest respektowany podczas wstawiania, a my możemy wpływać na przezroczystość wstawianego obrazu (tworzymy znak wodny):

```php
$blank->place($image, '80%', '80%', 25); // przezroczystość wynosi 25%
```

To API to prawdziwa radość z użytkowania!


Przegląd metod .[#toc-overview-of-methods]
==========================================


static fromBlank(int $width, int $height, array $color=null): Image .[method]
-----------------------------------------------------------------------------
Tworzy nowy obraz w kolorze rzeczywistym o podanych wymiarach. Domyślnym kolorem jest czarny.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Odczytuje obraz z pliku i zwraca jego typ w `$detectedFormat`. Obsługiwane typy to `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` oraz `Image::BMP`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Odczytuje obraz z łańcucha i zwraca jego typ w `$detectedFormat`. Obsługiwane typy to `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP`, oraz `Image::BMP`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method]
---------------------------------------------------------------------------------
Tworzy kolor, który może być używany w innych metodach, takich jak `ellipse()`, `fill()`, itp.


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Zwraca rozszerzenie pliku dla podanej stałej `Image::XXX`.


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Zwraca typ mime dla podanej stałej `Image::XXX`.


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Zwraca typ obrazu jako stałą `Image::XXX` zgodnie z rozszerzeniem pliku.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Zwraca typ obrazu jako stałą `Image::XXX`, a także jego wymiary w parametrach `$width` i `$height`.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Zwraca typ obrazu z ciągu jako stałą `Image::XXX` oraz jego wymiary w parametrach `$width` i `$height`.


affine(array $affine, array $clip=null): Image .[method]
--------------------------------------------------------
Zwróć obraz zawierający affine-transformed src image używając opcjonalnego regionu przycinania ([więcej |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Zwraca konkatenację dwóch macierzy przekształceń afinicznych, co jest przydatne, gdy do tego samego obrazu należy zastosować wiele przekształceń jednocześnie. ([więcej |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, mixed $options=null): array .[method]
----------------------------------------------------------------
Zwraca macierz przekształcenia macierzy ([więcej |https://www.php.net/manual/en/function.imageaffinematrixget]).


alphaBlending(bool $on): void .[method]
---------------------------------------
Umożliwia dwa różne tryby rysowania w obrazach truecolor. W trybie mieszania składowa kanału alfa koloru używanego we wszystkich funkcjach rysunkowych, takich jak `setPixel()`, określa, w jakim stopniu należy pozwolić, aby kolor podstawowy prześwitywał. W rezultacie w tym momencie istniejący kolor jest automatycznie mieszany z kolorem rysunku, a wynik jest zapisywany w obrazie. Powstały w ten sposób piksel jest nieprzezroczysty. W trybie nie mieszania, kolor kreskówki jest kopiowany dosłownie z informacją o kanale alfa i zastępowany pikselem docelowym. Tryb blend nie jest dostępny podczas rysowania na obrazkach paletowych. ([więcej |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Aktywuj rysowanie linii wygładzonych i wielokątów. Nie obsługuje kanałów alfa. Działa tylko z obrazami truecolor.

Użycie antyaliasowanego prymitywu z przezroczystym kolorem tła może skończyć się nieoczekiwanymi rezultatami. Metoda blend wykorzystuje kolor tła jak każdy inny kolor. ([więcej |https://www.php.net/manual/en/function.imageantialias])


arc(int $x, int $y, int $w, int $h, int $start, int $end, int $color): void .[method]
-------------------------------------------------------------------------------------
Rysuje łuk okręgu o środku w podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagearc])


char(int $font, int $x, int $y, string $char, int $color): void .[method]
-------------------------------------------------------------------------
Rysuje pierwszy znak `$char` w obrazie z lewym górnym rogiem na `$x`, `$y` (lewy górny to 0, 0) w kolorze `$color`. ([więcej |https://www.php.net/manual/en/function.imagechar])


charUp(int $font, int $x, int $y, string $char, int $color): void .[method]
---------------------------------------------------------------------------
Rysuje znak `$char` w pionie na określonej współrzędnej w podanym obrazie. ([więcej |https://www.php.net/manual/en/function.imagecharup])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Zwraca identyfikator koloru reprezentujący kolor złożony z podanych składowych RGB. Musi być wywołany, aby stworzyć każdy kolor, który ma być użyty w obrazie. ([więcej |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Zachowuje się tak samo jak `colorAllocate()` z dodaniem parametru przejrzystości `$alpha`. ([więcej |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Zwraca indeks koloru piksela w określonym miejscu obrazu. Jeśli obraz jest truecolor, funkcja zwraca wartość RGB tego piksela jako liczbę całkowitą. Użyj przesunięcia bitów i maskowania bitów, aby uzyskać dostęp do oddzielnych wartości dla składowej czerwonej, zielonej i niebieskiej: ([więcej |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Zwraca indeks koloru w palecie obrazów, który jest "najbliższy" określonej wartości RGB. "Odległość" między pożądanym kolorem a każdym kolorem w palecie jest obliczana tak, jakby wartości RGB reprezentowały punkty w przestrzeni trójwymiarowej. ([więcej |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Zwraca indeks koloru w palecie obrazów, który jest "najbliższy" podanej wartości RGB i poziomu `$alpha`. ([więcej |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Uzyskaj indeks koloru, który ma odcień, biel i czerń najbliższe podanemu kolorowi. ([więcej |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
De-allocates a color previously assigned by `colorAllocate()` or `colorAllocateAlpha()`. ([więcej |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Zwraca indeks określonego koloru w palecie obrazów. ([więcej |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Zwraca indeks określonego koloru + alfa w palecie obrazów. ([więcej |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Dopasowuje kolory palety do drugiego panelu. ([więcej |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Zwraca indeks koloru dla żądanego koloru, albo dokładny kolor, albo najbliższą możliwą alternatywę. ([więcej |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Zwraca indeks koloru dla żądanego koloru, albo dokładny kolor, albo najbliższą możliwą alternatywę. ([więcej |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Ustawia określony indeks w palecie na określony kolor. ([więcej |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Uzyskuje kolor określonego indeksu ([więcej |https://www.php.net/manual/en/function.imagecolorsforindex]).


colorsTotal(): int .[method]
----------------------------
Zwraca liczbę kolorów w palecie obrazów. ([więcej |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(int $color=null): int .[method]
------------------------------------------------
Uzyskuje lub ustawia kolor przezroczysty w obrazie. ([więcej |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Stosuje macierz konwolucji do obrazu, używając danego współczynnika i przesunięcia. ([więcej |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Wymaga obecności rozszerzenia *Bundled GD*, więc może nie działać wszędzie.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Kopiuje fragment strony `$src` do obrazu rozpoczynającego się na współrzędnych `$srcX`, `$srcY` o szerokości `$srcW` i wysokości `$srcH`. Zdefiniowana część zostanie skopiowana do współrzędnych `$dstX` i `$dstY`. ([więcej |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Kopiuje fragment strony `$src` do obrazu rozpoczynającego się na współrzędnych `$srcX`, `$srcY` o szerokości `$srcW` i wysokości `$srcH`. Zdefiniowana część zostanie skopiowana do współrzędnych `$dstX` i `$dstY`. ([więcej |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Kopiuje fragment strony `$src` do obrazu rozpoczynającego się na współrzędnych `$srcX`, `$srcY` o szerokości `$srcW` i wysokości `$srcH`. Zdefiniowana część zostanie skopiowana na współrzędne `$dstX` i `$dstY`.

Funkcja ta jest identyczna jak `copyMerge()` z tym wyjątkiem, że zachowuje źródłowy odcień podczas scalania poprzez konwersję pikseli docelowych do skali szarości przed operacją kopiowania. ([więcej |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Kopiuje prostokątny fragment jednego obrazu do drugiego, płynnie interpolując wartości pikseli, dzięki czemu, zwłaszcza przy zmniejszaniu rozmiaru, obraz nadal zachowuje dużą wyrazistość.

Innymi słowy, `copyResampled()` pobiera prostokątny region z `$src` o szerokości `$srcW` i wysokości `$srcH` w pozycji (`$srcX`, `$srcY`) i umieszcza go w prostokątnym regionie obrazu o szerokości `$dstW` i wysokości `$dstH` w pozycji (`$dstX`, `$dstY`).

Jeśli współrzędne źródła i miejsca docelowego, szerokość i wysokość są różne, fragment obrazu jest odpowiednio rozciągany lub zmniejszany. Współrzędne odnoszą się do lewego górnego rogu. Funkcja ta może być używana do kopiowania obszarów na tym samym obrazie, ale jeśli obszary będą się nakładać, wyniki nie będą przewidywalne. ([więcej |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Kopiuje prostokątny fragment jednego obrazu do innego obrazu. Innymi słowy, `copyResized()` pobiera prostokątny region z `$src` o szerokości `$srcW` i wysokości `$srcH` w pozycji (`$srcX`, `$srcY`) i umieszcza go w prostokątnym regionie obrazu o szerokości `$dstW` ] i wysokości `$dstH` w pozycji (`$dstX`, `$dstY`).

Jeśli współrzędne źródła i miejsca docelowego, szerokość i wysokość są różne, fragment obrazu jest odpowiednio rozciągany lub zmniejszany. Współrzędne odnoszą się do lewego górnego rogu. Funkcja ta może być używana do kopiowania obszarów na tym samym obrazie, ale jeśli obszary będą się nakładać, wyniki nie będą przewidywalne. ([więcej |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Przycina obraz do zadanego prostokątnego obszaru. Wymiary mogą być określone jako liczby całkowite w pikselach lub ciągi znaków w procentach (na przykład `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, int $color=-1): Image .[method]
---------------------------------------------------------------------------
Automatycznie przycina obraz zgodnie z podanym `$mode`. ([więcej |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $cx, int $cy, int $w, int $h, int $color): void .[method]
---------------------------------------------------------------------
Rysuje elipsę wyśrodkowaną na podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, int $color): void .[method]
------------------------------------------------
Wypełnia obszar zaczynający się na podanej współrzędnej (lewa górna to 0, 0) podaną `$color`. ([więcej |https://www.php.net/manual/en/function.imagefill])


filledArc(int $cx, int $cy, int $w, int $h, int $s, int $e, int $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------
Rysuje częściowy łuk o środku w podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $cx, int $cy, int $w, int $h, int $color): void .[method]
---------------------------------------------------------------------------
Rysuje elipsę wyśrodkowaną na podanych współrzędnych. ([więcej |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, int $numPoints, int $color): void .[method]
------------------------------------------------------------------------
Tworzy wypełniony wielokąt w obrazie. ([więcej |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, int $color): void .[method]
-------------------------------------------------------------------------------
Tworzy prostokąt wypełniony stroną `$color` w obrazie zaczynając od punktu 1 i kończąc w punkcie 2. Punkt 0, 0 jest lewym górnym rogiem obrazu. ([więcej |https://www.php.net/manual/en/function.imagefilledrectangle])


fillToBorder(int $x, int $y, int $border, int $color): void .[method]
---------------------------------------------------------------------
Tworzy wypełnienie, którego kolor jest określony przez `$border`. Punktem początkowym wypełnienia jest `$x`, `$y` (lewa górna część to 0, 0), a obszar jest wypełniony kolorem `$color`. ([więcej |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Stosuje podany filtr `$filtertype` do obrazu. ([więcej |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Odwraca obraz za pomocą podanego `$mode`. ([więcej |https://www.php.net/manual/en/function.imageflip])


ftText(int $size, int $angle, int $x, int $y, int $col, string $fontFile, string $text, array $extrainfo=null): array .[method]
-------------------------------------------------------------------------------------------------------------------------------
Napisz tekst w obrazie za pomocą czcionek z FreeType 2. ([więcej |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Zastosuj korekcję gamma do obrazu względem gamma wejściowego i wyjściowego. ([więcej |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Zwraca aktualny crop, czyli obszar, poza którym nie będą rysowane piksele. ([więcej |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Zwraca wysokość obrazu.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Zwraca oryginalny zasób.


getWidth(): int .[method]
-------------------------
Zwraca szerokość obrazu.


interlace(int $interlace=null): int .[method]
---------------------------------------------
Włącza lub wyłącza tryb przeplotu. Jeśli ustawiony jest tryb z przeplotem, a obraz jest zapisywany jako JPEG, zostanie on zapisany jako JPEG progresywny. ([więcej |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Określ, czy obraz jest truecolor ([więcej |https://www.php.net/manual/en/function.imageistruecolor]).


layerEffect(int $effect): void .[method]
----------------------------------------
Ustaw flagę alfa blend, aby użyć efektów warstwowych. ([więcej |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, int $color): void .[method]
--------------------------------------------------------------------
Rysuje linię pomiędzy dwoma podanymi punktami. ([więcej |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, int $numPoints, int $color): void .[method]
----------------------------------------------------------------------
Rysuje na obrazie otwarty wielokąt. W odróżnieniu od `polygon()`, między ostatnim a pierwszym punktem nie rysuje się linii. ([więcej |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Kopiuje paletę z `$source` do obrazu. ([więcej |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Konwertuje obraz oparty na paletach na obraz w pełnym kolorze. ([więcej |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Kopiuje stronę `$image` do obrazu na współrzędnych `$left` i `$top`. Współrzędne mogą być określone jako liczby całkowite w pikselach lub łańcuchy w procentach (na przykład `'50%'`).


polygon(array $points, int $numPoints, int $color): void .[method]
------------------------------------------------------------------
Tworzy wielokąt w obrazie. ([więcej |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, int $col): void .[method]
-----------------------------------------------------------------------
Tworzy prostokąt na podanych współrzędnych ([więcej |https://www.php.net/manual/en/function.imagerectangle]).


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Zmienia rozmiar obrazu, [więcej informacji |#Image-Resize]. Wymiary mogą być określone jako liczby całkowite w pikselach lub ciągi znaków w procentach (na przykład `'50%'`).


resolution(int $resX=null, int $resY=null): mixed .[method]
-----------------------------------------------------------
Ustawia lub zwraca rozdzielczość obrazu w DPI (punkty na cal). Jeśli żaden z opcjonalnych parametrów nie zostanie określony, bieżąca rozdzielczość jest zwracana jako indeksowane pole. Jeśli określona jest tylko `$resX`, rozdzielczość pozioma i pionowa są ustawione na tę wartość. Jeśli oba opcjonalne parametry są określone, rozdzielczości pozioma i pionowa są ustawione na te wartości.

Rozdzielczość jest używana jako meta informacja tylko wtedy, gdy obrazy są odczytywane i zapisywane w formatach obsługujących ten rodzaj informacji (obecnie PNG i JPEG). Nie ma to wpływu na żadne operacje rysunkowe. Domyślna rozdzielczość nowych zdjęć to 96 DPI. ([więcej |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Obraca obraz przy użyciu określonej `$angle` w stopniach. Środek obrotu jest środkiem obrazu, a obrócony obraz może mieć inne wymiary niż obraz oryginalny. ([więcej |https://www.php.net/manual/en/function.imagerotate])

.[note]
Wymaga obecności rozszerzenia *Bundled GD*, więc może nie działać wszędzie.


save(string $file, int $quality=null, int $type=null): void .[method]
---------------------------------------------------------------------
Zapisuje obraz do pliku.

Jakość kompresji mieści się w zakresie 0..100 dla JPEG (domyślnie 85) i WEBP (domyślnie 80) oraz 0..9 dla PNG (domyślnie 9). Jeśli typ nie jest oczywisty na podstawie rozszerzenia pliku, można go określić za pomocą jednej ze stałych `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP`, oraz `Image::BMP`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Ustawia flagę, aby zachować pełną informację o kanale alfa (w przeciwieństwie do przezroczystości monochromatycznej) podczas zapisywania obrazów PNG.

Alfablending musi być wyłączony (`alphaBlending(false)`), aby zachować kanał alfa w pierwszej kolejności. ([więcej |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Skalowanie obrazu z wykorzystaniem podanego algorytmu interpolacji. ([więcej |https://www.php.net/manual/en/function.imagescale])


send(int $type=Image::JPEG, int $quality=null): void .[method]
--------------------------------------------------------------
Drukuje obraz do przeglądarki.

Jakość kompresji mieści się w zakresie 0..100 dla JPEG (domyślnie 85) i WEBP (domyślnie 80) oraz 0..9 dla PNG (domyślnie 9). Typ jest jedną ze stałych `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` oraz `Image::BMP`.


setBrush(Image $brush): void .[method]
--------------------------------------
Ustawia obraz pędzla, który ma być używany we wszystkich funkcjach rysowania linii (na przykład `line()` i `polygon()`) podczas rysowania z użyciem specjalnych kolorów IMG_COLOR_BRUSHED lub IMG_COLOR_STYLEDBRUSHED. ([więcej |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Ustawia aktualny crop, czyli obszar poza którym nie będą rysowane piksele. ([więcej |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Ustawia metodę interpolacji, która wpływa na metody `rotate()` i `affine()`. ([więcej |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, int $color): void .[method]
----------------------------------------------------
Rysuje piksel na określonej współrzędnej. ([więcej |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Ustawia styl, który ma być używany przez wszystkie funkcje rysowania linii (na przykład `line()` i `polygon()`) podczas rysowania z kolorem specjalnym IMG_COLOR_STYLED lub linii obrazu z kolorem IMG_COLOR_STYLEDBRUSHED. ([więcej |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Ustawia grubość linii podczas rysowania prostokątów, wielokątów, łuków itp. Na stronie `$thickness` pikseli ([więcej |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Ustawia obraz kafelka, który będzie używany we wszystkich funkcjach wypełniania regionów (na przykład `fill()` i `filledPolygon()`), gdy wypełniony jest specjalnym kolorem IMG_COLOR_TILED.

Kafelek jest obrazem używanym do wypełnienia regionu powtarzającym się wzorem. Jako kafelek można użyć dowolnego obrazu, a ustawiając indeks przezroczystego koloru obrazu kafelka za pomocą strony `colorTransparent()`, można stworzyć kafelek, w którym pewne części bazowego regionu będą prześwitywać. ([więcej |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Wyostrza obraz.

.[note]
Wymaga obecności rozszerzenia *Bundled GD*, więc może nie działać wszędzie.


string(int $font, int $x, int $y, string $str, int $col): void .[method]
------------------------------------------------------------------------
Wypisuje ciąg znaków na podane współrzędne. ([więcej |https://www.php.net/manual/en/function.imagestring])


stringUp(int $font, int $x, int $y, string $s, int $col): void .[method]
------------------------------------------------------------------------
Wypisuje ciąg znaków w pionie na podane współrzędne. ([więcej |https://www.php.net/manual/en/function.imagestringup])


toString(int $type=Image::JPEG, int $quality=null): string .[method]
--------------------------------------------------------------------
Zapisuje obraz w postaci ciągu znaków.

Jakość kompresji mieści się w zakresie 0..100 dla JPEG (domyślnie 85) i WEBP (domyślnie 80) oraz 0..9 dla PNG (domyślnie 9). Typ jest jedną ze stałych `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` oraz `Image::BMP`.


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Konwertuje obraz truecolor na obraz palety. ([więcej |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(int $size, int $angle, int $x, int $y, int $color, string $fontfile, string $text): array .[method]
-----------------------------------------------------------------------------------------------------------
Drukuje podany tekst do obrazu przy użyciu czcionek TrueType. ([więcej |https://www.php.net/manual/en/function.imagettftext])
