Creating URL Links
******************

<div class=perex>

Creating links in Nette is as easy as pointing a finger. Just point and the framework will do all the work for you. We will show:

- how to create links in templates and elsewhere
- how to distinguish a link to the current page
- what about invalid links

</div>


Thanks to [bidirectional routing|routing], don't have to hardcode in the templates or code URLs of your application, which may change later or be complicated to compose. Just specify the presenter and the action in the link, pass any parameters and the framework will generate the URL itself. In fact, it's very similar to calling a function. You will like it.


Links in Templates
------------------

Most often we create links in templates. To make it as easy as possible the framework offers three tags. The smartest of them is `n:href`

```html
<a n:href="Product:show $productId">product detail</a>
```

Note, that instead of the HTML attribute `href` we've used [n:attribute |latte:guide#n:attributes] `n:href`. Its value isn't a URL, as you are used to with the `href` attribute, but name of presenter and action. The syntax is:

```
n:href="[Presenter:]action [,] [arg1] [, arg2] [, ...]"
```

After clicking on the link, simply said, method `ProductPresenter::renderShow()` is called and parameter `$id` will get the value of `$productId`. We can pass even more parameters in the same way, just like we call a method.

Besides that, it's even possible to pass named parameters. The next link passes the parameter `lang` with value `cs`:

```html
<a n:href="Product:show $productId, lang => cs">product detail</a>
```

If the method `ProductPresenter::renderShow()` doesn't have `$lang` in its signature, it can read the value of this parameter using `$lang = $this->getParameter('lang')`.

When we have all parameters in an array, we can expand them with `(expand)` operator:

```html
{var $args = [$productId, lang => cs]}
<a n:href="Product:show (expand) $args">product detail</a>
```

If the template, in which we are creating links, is part of the `Product` presenter, we can omit the name of the presenter and write directly `n:href="show $productId"`. If a link leads to the an action named `default`, you can skip that and write `n:href="Product: $id"` (don't forget the colon).

Links can even refer to other [modules |application#modules]. Here we distinguish, if it's referring "relatively" to a submodule, or "absolutely" to a different module - then the path begins with a colon. Let's assume that the actual presenter is part of module `Front`, then we will write:

```html
<a n:href="Shop:Product:show">link for Front:Shop:Product:show</a>
<a n:href=":Admin:Product:show">link for Admin:Product:show</a>
```

A special case is linking to itself. Here we'll write `this` as the target.

The generated link is in absolute path format. When you want to generate an absolute link including the domain, for example, `http://example.com`, simply supply two slashes at the beginning `n:href="//show $productId"`. If we set the property [$absoluteUrls |presenters#templates] in presenter to `true`, all the links will be absolute by default.

We can refer to specific parts on the page using so-called fragments, or anchors, with the hash `#` symbol:

```html
<a n:href="show#comments">link to Product:show and fragment #comments</a>
```

The attribute `n:href` is really handy if we are creating an HTML tag `<a>`. When we want to have this link elsewhere, for example in the text of the template, we can use the `{link}` tag with the same internal syntax:

```html
The address is: {link Product:show $productId}
```

Read more details about the [Latte tags |latte:tags].


Link to Current Page
--------------------

The presenter offers the `isLinkCurrent()` method, which is used to determine whether the target of the link is the same as the current page. This can be used, for example, in a template to differentiate links, etc.

The parameters are the same as for the `link()` method, but it is also possible to use the wildcard `*` instead of a specific action, which means any action of the presenter.

```html
{if !$presenter->isLinkCurrent('Admin:login')}
	<a n:href="Admin:login">PÅ™ihlaste se</a>
{/if}

<li n:class="$presenter->isLinkCurrent('Product:*') ? active">
	<a n:href="Product:">...</a>
</li>
```

An abbreviated form can be used in combination with `n:href` in single element:

```html
<a n:class="$presenter->isLinkCurrent() ? active" n:href="Product:detail">...</a>
```

Wildcard character `*` replaces presenter's action only, not presenter itself. To find out if we are in a certain module or its submodule we can use `$presenter->isModuleCurrent(moduleName)` method.

```html
<li n:class="$presenter->isModuleCurrent('MyEshop:Users') ? active">
	<a n:href="Product:">...</a>
</li>
```


Linking in Presenter
--------------------

Presenter has the method `link`, which can be used to create links just like in a template. The first argument is target presenter and action, followed by passed arguments:

```php
$url = $this->link('Product:show', $productId);
```

They can also be passed using an array:

```php
$url = $this->link('Product:show', [$productId, 'lang' => 'en']);
```

The `link()` method of components links directly to [signals|components#links]:

```php
$url = $this->link('click', $x, $y);
```


Invalid Links
-------------

It may happen that we create an invalid link - either because it refers to a non-existing presenter, or because it passes more parameters that the target method receives in its signature, or when there can't be a generated URL for the targeted action. What to do with invalid links is determined by the static variable `Presenter::$invalidLinkMode`. It can have one of these values (constants):

- `Presenter::INVALID_LINK_SILENT` - silent mode, returns symbol `#` as URL
- `Presenter::INVALID_LINK_WARNING` - E_USER_WARNING will be produced
- `Presenter::INVALID_LINK_TEXTUAL` - visual warning, the error text is displayed in the link
- `Presenter::INVALID_LINK_EXCEPTION` - InvalidLinkException will be thrown

The default setup in production mode is `INVALID_LINK_WARNING` and in development mode is `INVALID_LINK_WARNING | INVALID_LINK_TEXTUAL`. `INVALID_LINK_WARNING` doesn't kill the script in the production environment, but the warning will be logged. In the development environment, [Tracy | tracy:] will intercept the warning and display the error bluescreen. If the `INVALID_LINK_TEXTUAL` is set, presenter and components return error message as URL which stars with `#error:`. To make such links visible, we can add a CSS rule to our stylesheet:

```css
a[href^="#error:"] {
	background: red;
	color: white;
}
```

If we don't want warnings to be produced in the development environment we can turn on silent invalid link mode in the [configuration|configuring#application].

```neon
application:
	silentLinks: true
```

{{composer: nette/router}}
