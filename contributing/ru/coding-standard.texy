Стандарт кодирования
********************

В этом документе описаны правила и рекомендации по разработке Nette. Предоставляя код для Nette, вы должны следовать им. Самый простой способ сделать это — имитировать существующий код.
Идея заключается в том, чтобы весь код выглядел так, как будто его написал один человек.

Nette полностью следует [PSR-12 Extended Coding Style |https://www.php-fig.org/psr/psr-12/] за одним исключением: он исторически использует табуляцию вместо пробелов для отступов.


Общие правила
=============

- Каждый файл PHP должен содержать `declare(strict_types=1)`
- Две пустые строки используются для разделения методов для лучшей читабельности.
- Причина использования оператора закрытия должна быть задокументирована: `@mkdir($dir); // @ - directory may exist`
- Если используется слабо типизированный оператор сравнения (т.е. `==`, `!=`, ...), то намерение должно быть задокументировано: `// == to accept null`
- В один файл можно записать больше исключений `exceptions.php`
- Видимость методов не задается для интерфейсов, так как они всегда публичны.
- Каждое свойство, возвращаемое значение и параметр должны иметь определенный тип. И наоборот, мы никогда не указываем тип для констант, потому что это очевидно.
- Для разделения строки следует использовать одинарные кавычки, за исключением случаев, когда сам литерал содержит апострофы.


Соглашения об именовании
========================

- Избегайте использования сокращений, если только полное имя не является чрезмерным.
- Используйте верхний регистр для двухбуквенных аббревиатур и верблюжий (CamelCase) регистр для более длинных аббревиатур.
- Используйте существительное или словосочетание для названия класса.
- Имена классов должны содержать не только специфичность (`Array`), но и общность (`ArrayIterator`). Исключением являются атрибуты PHP.
- Интерфейсы и абстрактные классы не должны содержать префиксы или постфиксы типа `Abstract`, `Interface` или `I`.


Блоки документации (phpDoc)
===========================

Главное правило: никогда не дублируйте информацию о сигнатуре, например, тип параметра или тип возврата, не имея никакой дополнительной цели.

Блок документации для определения класса:

- Начинается с описания класса.
- Далее следует пустая строка.
- Далее следуют аннотации `@property` (или `@property-read`, `@property-write`), одна за другой. Синтаксис следующий: аннотация, пробел, тип, пробел, $name.
- Далее следуют аннотации `@method`, одна за другой. Синтаксис следующий: аннотация, пробел, возвращаемый тип, пробел, имя(тип $param, ...).
- Аннотация `@author` опущена. Авторство сохраняется в истории исходного кода.
- Можно использовать аннотации `@internal` или `@deprecated`.

```php
/**
 * MIME message part.
 *
 * @property string $encoding
 * @property-read array $headers
 * @method string getSomething(string $name)
 * @method static bool isEnabled()
 */
```

Блок документации для свойства, содержащего только аннотацию `@var`, должен быть однострочным:

```php
/** @var string */
private $name;
```

Блок документации для определения метода:

- Начинается с краткого описания метода.
- Нет пустой строки.
- Аннотации `@param`, одна за другой.
- Аннотация `@return`.
- Аннотации `@throws`, одна за другой.
- Можно использовать аннотации `@internal` или `@deprecated`.

За каждой аннотацией следует один пробел, за исключением `@param`, за которым следуют два пробела для лучшей читабельности.

```php
/**
 * Finds a file in directory.
 * @param  array|object  $options
 * @return static
 * @throws DirectoryNotFoundException
 */
public function find(string $dir, $options): self
```

{{priority: -1}}
