Глосар
******


AJAX .[#toc-ajax]
-----------------
Асинхронният JavaScript и XML е технология за комуникация между клиент и сървър, базирана на HTTP, без да се налага при всяка заявка да се презарежда цялата страница. Въпреки съкращението, вместо XML често се използва форматът [JSON |#JSON].


Действие на водещия .[#toc-presenter-action]
--------------------------------------------
Логическа част от [презентатора |#presenter], която извършва едно действие, например показване на продуктова страница, изписване на потребител и т.н. Един водещ може да има няколко действия.


BOM
---
Така наречената *маска за ред на байтовете* е специален първи символ във файл, който определя реда на байтовете в кодирането. Някои редактори го активират автоматично, то е почти невидимо, но причинява проблеми със заглавията и изпращането на изход от PHP. Можете да използвате [програмата за проверка на кода |code-checker:], за да я изтриете масово.


Контролер .[#toc-controller]
----------------------------
Контролерът обработва заявките от потребителя и въз основа на тези заявки извиква специфична логика на приложението (т.е. [модел |#Модель]), след което извиква [View |#Вид], за да визуализира данните. Аналогът на контролерите в рамките на Nette са [презентаторите |#Presenter].


Скриптиране на кръстосани сайтове (XSS) .[#toc-cross-site-scripting-xss]
------------------------------------------------------------------------
Cross-site scripting е метод за нарушаване на работата на уебсайт чрез използване на непроверени входни данни. Атакуващият може да инжектира свой собствен HTML или JavaScript код и да промени външния вид на страницата или дори да събере чувствителна потребителска информация. Защитата срещу XSS е проста: последователно и правилно проверявайте всички низове и входни данни.

Рамката Nette Framework предлага чисто нова технология за [избягване на контекст |latte:safety-first#Context-Aware-Escaping], която завинаги ще премахне рисковете от скриптове на различни сайтове. Той автоматично ескапира всички входни данни въз основа на даден контекст, така че програмистът не може случайно да забрави нещо.


Фалшифициране на заявка от друг сайт (CSRF) .[#toc-cross-site-request-forgery-csrf]
-----------------------------------------------------------------------------------
Атаката Cross-Site Request Forgery се състои в това, че нападателят примамва жертвата да посети страница, която безшумно изпълнява заявка в браузъра на жертвата към сървъра, в който жертвата е влязла в момента, и сървърът приема, че заявката е направена от жертвата по нейна собствена воля. Сървърът извършва определено действие под самоличността на жертвата, но без нейното знание. Това може да бъде промяна или изтриване на данни, изпращане на съобщение и т.н.

Структурата Nette Framework **автоматично защитава формулярите и сигналите в презентаторите** от този тип атаки. Това става, като се предотвратява изпращането или извикването им от друг домейн.


Екраниране .[#toc-escaping]
---------------------------
Скринингът е преобразуване на символи, които имат специално значение в даден контекст, в други еквивалентни последователности. Пример: Искаме да напишем обърнати запетаи в низ с кавички. Тъй като обърнатите запетаи имат специално значение в контекста на цитирания низ, трябва да се използва друга еквивалентна последователност. Конкретната последователност се определя от правилата на контекста (напр. `\"` в низ с кавички в PHP, `&quot;` в атрибути на HTML и т.н.).


Филтър .[#toc-filter-formerly-helper]
-------------------------------------
Функция за филтриране. В шаблоните [филтърът |latte:syntax#Filters] е функция, която помага да се променят или форматират данните в изходната форма. Няколко [стандартни филтъра |latte:filters] са предварително дефинирани в шаблоните.


Инвалидизация .[#toc-invalidation]
----------------------------------
Известие за [фрагмент |#SameSite-Cookie] за повторно визуализиране. В друг контекст също така изчистване на кеша.


JSON .[#toc-json]
-----------------
Формат за обмен на данни, базиран на синтаксиса на JavaScript (подмножество на този синтаксис). Точната спецификация можете да намерите на адрес www.json.org.


Компонент .[#toc-component]
---------------------------
Част от приложение за многократна употреба. Той може да бъде визуална част от страница, както е описано в главата [application:components], или терминът може да се отнася и за клас [Component |component-model:] (такъв компонент не е задължително да бъде визуален).


Контролни знаци .[#toc-control-characters]
------------------------------------------
Контролните знаци са невидими знаци, които могат да се появят в текста и да причинят някои проблеми в крайна сметка. Можете да използвате [Code Checker |code-checker:], за да ги премахнете масово от файловете, и функцията [Strings::normalize() |utils:strings#normalize], за да ги премахнете от променлива.


Събития .[#toc-events]
----------------------
Събитието е очаквана ситуация в даден обект и когато тя настъпи, се извикват т.нар. обработващи програми, т.е. функции, които реагират на събитието ("Пример":https://gist.github.com/dg/332cdd51bdf7d66a6d8003b134508a38). Събитие може да бъде изпращането на формуляр, влизането на потребител в системата и т.н.

Например, потребител влиза в системата по метода `Nette\Security\User::login()`. Обектът `User` има публична променлива `$onLoggedIn`, която представлява масив, към който всеки може да добави обратно извикване. Веднага щом потребителят влезе в системата, методът `login()` извиква всички обратни извиквания в масива. Името на променливата във формата `onXyz` е конвенция, използвана в Nette.


Latte .[#toc-latte]
-------------------
Една от най-иновативните [системи за шаблониране |latte:] в историята.


Модел .[#toc-model]
-------------------
Моделът представлява данните и функционалната основа на цялото приложение. Тя включва цялата логика на приложението (понякога наричана още "бизнес логика"). Това е **M** от **M**VC или MPV. Всяко действие на потребителя (влизане в системата, поставяне на елемент в количка за пазаруване, промяна на стойност в базата данни) представлява действие на модела.

Моделът управлява вътрешното си състояние и предоставя публичен интерфейс. Чрез извикването на този интерфейс можем да приемем или променим състоянието му. Моделът не знае за съществуването на [View |#Вид] или [Controller |#Controller], той е напълно независим от тях.


Model-View-Controller (MVC) .[#toc-model-view-controller]
---------------------------------------------------------
Софтуерна архитектура, възникнала при разработването на приложения с графичен потребителски интерфейс, за да се отдели кодът за управление на потока ([Controller |#Контроллер]) от кода на логиката на приложението ([Model |#Модель]) и от кода за визуализиране на данни ([View |#Вид]). Това прави кода по-ясен, улеснява бъдещото разработване и позволява отделните части да бъдат тествани отделно.


Model-View-Prenderer (MVP) .[#toc-model-view-presenter]
-------------------------------------------------------
Архитектура, базирана на [Model-View-Controller (MVC) |#Модель-Вид-Контроллер (MVC)].


Модул .[#toc-module]
--------------------
Един модул в рамката Nette е набор от презентатори и шаблони, а също така компоненти и модели, които служат като данни за презентатора. По този начин тя е определена логическа част от приложението.

Например, един електронен магазин може да се състои от три модула:
1) Продуктов каталог с количка за пазаруване.
2) Администриране за клиента.
3) Администрация за собственика на магазина.


Пространство от имена .[#toc-namespace]
---------------------------------------
Пространството от имена е функция на PHP от версия 5.3, както и на някои други езици за програмиране. Това помага да се избегнат колизии в имената (например два класа с едно и също име), когато се използват различни библиотеки. За повече информация вижте [документацията на PHP |https://www.php.net/manual/ru/language.namespaces.rationale.php].


Презентатор .[#toc-presenter]
-----------------------------
Презентаторът е обект, който приема [заявка, |api:Nette\Application\Request] преведена от маршрутизатор от HTTP заявка, и генерира [отговор |api:Nette\Application\Response]. Отговорът може да бъде HTML страница, картина, XML документ, файл, JSON, пренасочване или каквото друго се сетите.

Представящият обикновено е потомък на класа [api:Nette\Application\UI\Presenter]. При заявките той извършва съответните [действия |application:presenters#Life-Cycle-of-Presenter] и визуализира шаблони.


Маршрутизатор .[#toc-router]
----------------------------
Двупосочен транслатор между HTTP заявка / URL адрес и действие на презентатора. Двупосочността означава, че можете не само да извличате [действие на Presenter |#Действие презентера] от HTTP заявка, но и да генерирате съответния URL адрес за действието. За повече подробности вижте главата за [маршрутизиране на URL |application:routing].


Извадка .[#toc-samesite-cookie]
-------------------------------
Откъс от страница, който може да бъде отделно преизведен по време на [AJAX |#AJAX] заявка.


Вижте
-----
Изгледът (или подаването) е приложният слой, който отговаря за визуализирането на резултатите от заявката. Обикновено той използва система от модели и знае как да визуализира нейните компоненти или резултатите, взети от модела.



/--comment
Инструкции для авторов:
- объяснение должно быть кратким, около 1 абзаца (если краткого объяснения недостаточно, необходимо сделать ссылку на другое место в документации)
- на приведенные здесь термины можно ссылаться в других частях документации или на форуме
\--

{{leftbar: www:@menu-common}}
{{priority: -2}}
