Парсер і конструктор URL
************************

.[perex]
Класи [Url |#Url], [UrlImmutable |#UrlImmutable] і [UrlScript |#UrlScript] дають змогу легко керувати, розбирати і маніпулювати URL-адресами.

→ [Встановлення та вимоги |@home#Installation]


Url
===

Клас [api:Nette\Http\Url] дає змогу легко працювати з URL та його окремими компонентами, які показані на цій діаграмі:

/--pre
 scheme  user  password  host   port    path        query  fragment
   |      |      |        |      |       |            |       |
 /--\   /--\ /------\ /-------\ /--\/----------\ /--------\ /----\
 <b>http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer</b>
 \______\__________________________/
     |               |
  hostUrl        authority
\--

Генерація URL інтуїтивно зрозуміла:

```php
use Nette\Http\Url;

$url = new Url;
$url->setScheme('https')
	->setHost('localhost')
	->setPath('/edit')
	->setQueryParameter('foo', 'bar');

echo $url; // 'https://localhost/edit?foo=bar'
```

Ви також можете розібрати URL і потім маніпулювати ним:

```php
$url = new Url(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);
```

Клас `Url` реалізує інтерфейс `JsonSerializable` і надає метод `__toString()`, що дозволяє роздрукувати об'єкт або використовувати його з `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


URL Components .[method]
------------------------

Наступні методи доступні для отримання або зміни окремих компонентів URL:

.[language-php]
| Setter | Getter | Повернуте значення
|--------------------------------------------------------------------------------------------
| `setScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `setUser(string $user)`| `getUser(): string`| `'john'`
| `setPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `setHost(string $host)`| `getHost(): string`| `'nette.org'`
| `setPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `setPath(string $path)`| `getPath(): string`| `'/en/download'`
| `setQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `setFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | повний URL

Попередження: Працюючи з URL-адресою, отриманою з [HTTP-запиту |request], майте на увазі, що вона не міститиме фрагмент, оскільки браузер не надсилає його на сервер.

Ми також можемо працювати з окремими параметрами запиту, використовуючи:

.[language-php]
| Setter | Getter
|---------------------------------------------------
| `setQuery(string\|array $query)` | `getQueryParameters(): array`
| `setQueryParameter(string $name, $val)`| `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Повертає праву або ліву частину хоста. Ось як це працює, якщо хост має вигляд `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Перевіряє, чи не збігаються дві URL-адреси.

```php
$url->isEqual('https://nette.org');
```


Url::isAbsolute(string $url): bool .[method]{data-version:3.3.2}
----------------------------------------------------------------
Перевіряє, чи є URL-адреса абсолютною. Адреса вважається абсолютною, якщо вона починається зі схеми (наприклад, http, https, ftp), за якою слідує двокрапка.

```php
Url::isAbsolute('https://nette.org');    // true
Url::isAbsolute('//nette.org');          // false
```


Url::removeDotSegments(string $path): string .[method]{data-version:3.3.2}
--------------------------------------------------------------------------
Нормалізує шлях до URL-адреси, видаляючи спеціальні сегменти `.` і `..`. Цей метод видаляє надлишкові елементи шляху так само, як це роблять браузери.

```php
Url::removeDotSegments('/path/../subtree/./file.txt');  // '/subtree/file.txt'
Url::removeDotSegments('/../foo/./bar');                // '/foo/bar'
Url::removeDotSegments('./today/../file.txt');          // 'file.txt'
```


UrlImmutable .[#toc-urlimmutable]
=================================

Клас [api:Nette\Http\UrlImmutable] є незмінною альтернативою класу `Url` (так само, як у PHP `DateTimeImmutable` є незмінною альтернативою `DateTime`). Замість сеттерів він має так звані withers, які не змінюють об'єкт, а повертають нові екземпляри зі зміненим значенням:

```php
use Nette\Http\UrlImmutable;

$url = new UrlImmutable(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);

$newUrl = $url
	->withUser('')
	->withPassword('')
	->withPath('/en/');

echo $newUrl; // 'http://nette.org:8080/en/?name=param#footer'
```

Клас `UrlImmutable` реалізує інтерфейс `JsonSerializable` і надає метод `__toString()`, що дозволяє роздрукувати об'єкт або використовувати його з `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


URL Components .[method]
------------------------

Наступні методи доступні для отримання або зміни окремих компонентів URL:

.[language-php]
| Wither | Getter | Повернуте значення
|--------------------------------------------------------------------------------------------
| `withScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `withUser(string $user)`| `getUser(): string`| `'john'`
| `withPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `withHost(string $host)`| `getHost(): string`| `'nette.org'`
| `withPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `withPath(string $path)`| `getPath(): string`| `'/en/download'`
| `withQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `withFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | повний URL

Метод `withoutUserInfo()` видаляє `user` і `password`.

Ми також можемо оперувати індивідуальними параметрами запиту за допомогою:

.[language-php]
| Wither | Getter
|-----------------------------------------------
| `withQuery(string\|array $query)` | `getQueryParameters(): array`
| `withQueryParameter(string $name, $val)` | | `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Повертає праву або ліву частину хоста. Ось як це працює, якщо хост має вигляд `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


resolve(string $reference): UrlImmutable .[method]{data-version:3.3.2}
----------------------------------------------------------------------
Розв'язує абсолютну URL-адресу так само, як браузер обробляє посилання на HTML-сторінці:
- Якщо посилання є абсолютною URL-адресою (містить схему), воно використовується без змін.
- Якщо посилання починається з `//`, застосовується лише схема з поточної URL-адреси.
- Якщо посилання починається з `/`, створюється абсолютний шлях від кореня домену.
- В інших випадках URL будується відносно поточного шляху.

```php
$url = new UrlImmutable('https://example.com/path/page');
echo $url->resolve('../foo');           // 'https://example.com/foo'
echo $url->resolve('/bar');             // 'https://example.com/bar'
echo $url->resolve('sub/page.html');    // 'https://example.com/path/sub/page.html'
```


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Перевіряє, чи є дві URL-адреси ідентичними.

```php
$url->isEqual('https://nette.org');
```


UrlScript .[#toc-urlscript]
===========================

Клас [api:Nette\Http\UrlScript] є нащадком класу `UrlImmutable` і додатково розрізняє ці логічні частини URL:

/--pre
      baseUrl    basePath  relativePath  relativeUrl
         |          |        |               |
 /---------------/-----\/--------\---------------------------\
 <b>http://nette.org/admin/script.php/pathinfo/?name=param#footer</b>
                 \_______________/\________/
                        |              |
                   scriptPath       pathInfo
\--

Для отримання цих частин доступні такі методи:

.[language-php]
| Getter | Повернуте значення
|------------------------------------------------
| `getScriptPath(): string`| `'/admin/script.php'`
| `getBasePath(): string`| `'/admin/'`
| `getBaseUrl(): string`| `'http://nette.org/admin/'`
| `getRelativePath(): string`| `'script.php'`
| `getRelativeUrl(): string`| `'script.php/pathinfo/?name=param#footer'`
| `getPathInfo(): string`| `'/pathinfo/'`


Ми не створюємо об'єкти `UrlScript` безпосередньо, але метод [Nette\Http\Request::getUrl() |request] повертає його.
