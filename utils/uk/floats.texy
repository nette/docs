Робота з поплавками
*******************

.[perex]
[api:Nette\Utils\Floats] це статичний клас із корисними функціями для порівняння десяткових чисел.


Встановлення:

```shell
composer require nette/utils
```

У всіх прикладах передбачається, що псевдонім уже створено:

```php
use Nette\Utils\Floats;
```


Мотивація .[#toc-motivation]
============================

Чому клас для порівняння поплавців, запитаєте ви? Я маю на увазі, я можу використовувати оператори `<`, `>`, `===` і все готово.
Це не зовсім так. Як ви думаєте, що виведе цей код?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Якщо ви запустите цей код, деякі з вас здивуються, побачивши, що програма друкує `not same`.

Під час математичних операцій з десятковими числами помилки виникають через перетворення десяткових чисел у двійкові. Наприклад, `0.1 + 0.2` виводить `0.300000000000000044…`. Тому під час проведення порівнянь ми повинні допускати невелику розбіжність із певним десятковим знаком.

Ось що робить клас `Floats`. Наступне порівняння працюватиме так, як очікується:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

При спробі порівняти `NAN` виникає виняток `\LogicException`.


Порівняння плаваючих значень .[#toc-float-comparison]
=====================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Повертає `true`, якщо `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Повертає `true`, якщо `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Повертає `true`, якщо `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Повертає `true`, якщо `$a` > `$b` застосовується .

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Повертає `true`, якщо `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Якщо `$a` < `$b`, повертається `-1`, якщо дорівнює `0` a pokud je `$a` > `$b` повертається `1`.

Може використовуватися, наприклад, з функцією `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr je nyní [-3.5, 1, 2, 5]
```


Допоміжні функції .[#toc-helpers-functions]
===========================================


isZero(float $value): bool .[method]
------------------------------------

Повертає `true`, якщо значення дорівнює нулю.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Повертає `true`, якщо значення є цілим числом.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
