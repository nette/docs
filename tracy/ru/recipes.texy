Рецепты
*******


Политика безопасности контента .[#toc-content-security-policy]
==============================================================

Если на вашем сайте используется политика безопасности содержимого, вам нужно добавить `'nonce-<value>'` и `'strict-dynamic'` к `script-src`, чтобы Tracy работал правильно. Некоторые третьи плагины могут потребовать дополнительные директивы.
Nonce не поддерживается в директиве `style-src`, если вы используете эту директиву, вам нужно добавить `'unsafe-inline'`, но этого следует избегать в производственном режиме.

Пример конфигурации для [Nette Framework |nette:configuring]:

```neon
http:
	csp:
		script-src: [nonce, strict-dynamic]
```

Пример на чистом PHP:

```php
$nonce = base64_encode(random_bytes(20));
header("Content-Security-Policy: script-src 'nonce-$nonce' 'strict-dynamic';");
```


Ускоренная загрузка .[#toc-faster-loading]
==========================================

Базовая интеграция проста, однако если на веб-странице есть медленные блокирующие скрипты, они могут замедлить загрузку Tracy.
Решение заключается в том, чтобы поместить `<?php Tracy\Debugger::renderLoader() ?>` в ваш шаблон перед любыми скриптами:

```latte
<!DOCTYPE html>
<html>
<head>
	<title>...<title>
	<?php Tracy\Debugger::renderLoader() ?>
	<link rel="stylesheet" href="assets/style.css">
	<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
</head>
```


AJAX и перенаправленные запросы .[#toc-ajax-and-redirected-requests]
====================================================================

Tracy может отображать панель отладки и блюскрины для AJAX-запросов и перенаправлений. Tracy создает собственные сессии, хранит данные в собственных временных файлах и использует cookie `tracy-session`.

Tracy также может быть настроен на использование собственной сессии PHP, которая запускается до включения Tracy:

```php
session_start();
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();
```

В случае, если запуск сессии требует более сложной инициализации, вы можете запустить Tracy сразу (чтобы он мог обработать любые возникающие ошибки), затем инициализировать обработчик сессии и, наконец, сообщить Tracy, что сессия готова к использованию, используя функцию `dispatch()`:

```php
Debugger::setSessionStorage(new Tracy\NativeSession);
Debugger::enable();

// затем инициализация сеанса
// и начать сеанс
session_start();

Debugger::dispatch();
```

Функция `setSessionStorage()` существует с версии 2.9, до этого Tracy всегда использовал родную сессию PHP.


Пользовательский скраббер .[#toc-custom-scrubber]
=================================================

Scrubber - это фильтр, который предотвращает утечку конфиденциальных данных из дампов, таких как пароли или учетные данные. Фильтр вызывается для каждого элемента массива или объекта дампа и возвращает `true`, если значение является чувствительным. В этом случае вместо значения выводится `*****`.

```php
// позволяет избежать дампа значений ключей и свойств, таких как `password`,
// `password_repeat`, `check_password`, `DATABASE_PASSWORD` и т.д.
$scrubber = function(string $key, $value, ?string $class): bool
{
	return preg_match('#password#i', $key) && $value !== null;
};

// мы используем его для всех дампов внутри BlueScreen
Tracy\Debugger::getBlueScreen()->scrubber = $scrubber;
```


Пользовательский регистратор .[#toc-custom-logger]
==================================================

Мы можем создать пользовательский логгер, который будет регистрировать ошибки, невыявленные исключения, а также вызываться `Tracy\Debugger::log()`. Logger реализует интерфейс [api:Tracy\ILogger].

```php
use Tracy\ILogger;

class SlackLogger implements ILogger
{
	public function log($value, $priority = ILogger::INFO)
	{
		// отправляет запрос в Slack
	}
}
```

Затем мы активируем его:

```php
Tracy\Debugger::setLogger(new SlackLogger);
```

Если мы используем полный Nette Framework, мы можем установить его в конфигурационном файле NEON:

```neon
services:
	tracy.logger: SlackLogger
```


Monolog Integration .[#toc-monolog-integration]
-----------------------------------------------

Пакет Tracy предоставляет адаптер PSR-3, позволяющий интегрировать [monolog/monolog](https://github.com/Seldaek/monolog).

```php
$monolog = new Monolog\Logger('main-channel');
$monolog->pushHandler(new Monolog\Handler\StreamHandler($logFilePath, Monolog\Logger::DEBUG));

$tracyLogger = new Tracy\Bridges\Psr\PsrToTracyLoggerAdapter($monolog);
Debugger::setLogger($tracyLogger);
Debugger::enable();

Debugger::log('info'); // пишет: [<TIMESTAMP>] main-channel.INFO: info [] []
Debugger::log('warning', Debugger::WARNING); // пишет: [<TIMESTAMP>] main-channel.WARNING: warning [] []
```


nginx .[#toc-nginx]
===================

Если Tracy не работает на nginx, скорее всего, он неправильно настроен. Если есть что-то вроде

```nginx
try_files $uri $uri/ /index.php;
```

измените его на

```nginx
try_files $uri $uri/ /index.php$is_args$args;
```
