Password Hashing
****************

.[perex]
To manage the security of our users, we never save their passwords in plaintext format, but we rather save the password´s fingerprint (eg. hash). There is no way to find out the real password from the password´s fingerprint. To create the fingerprint we have to use a save algorithm. Class [api:Nette\Security\Passwords] will help us with this.

Installation:

```shell
composer require nette/utils
```

The framework automatically adds a `Nette\Security\Passwords` service to the DI container under the name `security.passwords`, so you usually don't need to instantiate the `Passwords` class in your code, but have it [passed using dependency injection |di-usage]:

```php
use Nette\Security\Passwords;

class Foo
{
	/** @var Passwords */
	private $passwords;

	public function __construct(Passwords $passwords)
	{
		$this->passwords = $passwords;
	}
}
```


__construct($algo = PASSWORD_DEFAULT, array $options=[]): string .[method]
==========================================================================

It chooses which [secure algorithm|https://www.php.net/manual/en/password.constants.php] for hash generation to use and how to configure it.

The default is `PASSWORD_DEFAULT`, so the choice of algorithm is left to PHP. Algorithm may change in newer PHP releases when newer, stronger hashing algorithms are supported. Therefore you should be aware that the length of the resulting hash can change. Therefore you should store the resulting hash in a way that can store enough characters, 255 is the recommended width.

```php
// we will hash passwords with 12 iterations of the bcrypt algorithm
$passwords = new Passwords(PASSWORD_BCRYPT, ['cost' => 12]);
```

hash(string $passwords): string .[method]
=========================================

This method generates password´s hash.

```php
$hash = $passwords->hash($password); // Hashes the password
```

verify(string $password, string $hash): bool .[method]
======================================================

This method finds out, if given password matches given fingerprint (hash).

```php
if ($passwords->verify($password, $hash)) {
	...
}
```

needsRehash(string $hash): bool .[method]
=========================================

This method finds out if the hash matches given options in constructor.

```php
if ($passwords->needsRehash($hash)) {
	...
}
```

{{composer: nette/security}}
