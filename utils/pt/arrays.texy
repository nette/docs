Funções do Array
****************

.[perex]
Esta página é sobre as classes [Arrays |#Arrays], [ArrayHash |#ArrayHash] e [ArrayList |#ArrayList], que estão relacionadas a arrays.


Instalação:

```shell
composer require nette/utils
```


Arrays .[#toc-arrays]
=====================

[api:Nette\Utils\Arrays] é uma classe estática que contém um punhado de funções úteis de matriz. Seu equivalente para iteradores é [Nette\Utils\Iterables |iterables].

Os exemplos a seguir assumem que a seguinte classe está definida:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

A função transforma de forma flexível o `$array` em uma matriz associativa ou objetos de acordo com o caminho especificado `$path`. O caminho pode ser uma string ou uma matriz. Ele consiste nos nomes das chaves na matriz de entrada e em operadores como '[]', '->', '=' e '|'. Lança `Nette\InvalidArgumentException` se o caminho for inválido.

```php
// conversão em uma matriz associativa usando uma chave simples
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    //...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// atribuir valores de uma chave a outra usando o operador =
$result = Arrays::associate($arr, 'name=age'); // ou ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// criar um objeto usando o operador ->
$result = Arrays::associate($arr, '->name'); // ou ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// combinação de chaves usando o operador |
$result = Arrays::associate($arr, 'name|age'); // ou ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// adicionando a uma matriz usando []
$result = Arrays::associate($arr, 'name[]'); // ou ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Testa uma matriz para a presença de valor. Utiliza uma comparação rigorosa (`===`)

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Testa se todos os elementos da matriz passam no teste implementado pela função fornecida, que tem a assinatura `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Veja [algumas() |#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Retorna uma nova matriz contendo todos os pares de valores-chave que correspondem ao endereço `$predicate` fornecido. O retorno de chamada tem a assinatura `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Retorna o primeiro item (que corresponde ao predicado especificado, se fornecido). Se não houver tal item, ele retorna o resultado da invocação de `$else` ou nulo.
O `$predicate` tem a assinatura `function ($value, int|string $key, array $array): bool`.

Ele não altera o ponteiro interno, ao contrário de `reset()`. Os parâmetros `$predicate` e `$else` existem desde a versão 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Consulte [last() |#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Retorna a chave do primeiro item (que corresponde ao predicado especificado, se fornecido) ou nula se não houver tal item. O `$predicate` tem a assinatura `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Consulte [lastKey() |#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Transforma a matriz multidimensional em matriz plana.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Devoluções `$array[$key]` item. Se ele não existir, `Nette\InvalidArgumentException` é lançado, a menos que um valor padrão seja definido como terceiro argumento.

```php
// se $array['foo'] não existir, lança uma exceção
$value = Arrays::get($array, 'foo');

// se $array['foo'] não existir, retorna 'bar
$value = Arrays::get($array, 'foo', 'bar');
```

O argumento `$key` pode também ser uma matriz.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// retorna 'vermelho'.
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Obtém referência a dado `$array[$key]`. Se o índice não existir, um novo índice é criado com valor `null`.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// retorna $array['foo'] referência
```

Trabalha com matrizes multidimensionais, assim como [get() |#get()].

```php
$value = & Arrays::get($array, ['color', 'favorite']);
// retorna $array['color']['favorite'] referência
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Devolve apenas os itens da matriz, que correspondem a uma expressão regular `$pattern`. Se `$invert` é `true`, ele devolve elementos que não correspondem. A compilação Regex ou erro de tempo de execução lança `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// devolve apenas itens numéricos
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Insere o conteúdo da matriz `$inserted` no `$array` imediatamente após o `$key`. Se `$key` for `null` (ou não existir), ele é inserido no final.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Insere o conteúdo da matriz `$inserted` no `$array` antes do `$key`. Se `$key` é `null` (ou não existe), ele é inserido no início.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Convoca todos os callbacks e devolve uma série de resultados.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Invoca o método em cada objeto de uma matriz e retorna uma série de resultados.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Verifica se a matriz está indexada em ordem ascendente de chaves numéricas a partir de zero, também conhecida como lista.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Retorna o último item (que corresponde ao predicado especificado, se fornecido). Se não houver tal item, ele retorna o resultado da invocação de `$else` ou nulo.
O `$predicate` tem a assinatura `function ($value, int|string $key, array $array): bool`.

Ele não altera o ponteiro interno, ao contrário de `end()`. Os parâmetros `$predicate` e `$else` existem desde a versão 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Consulte [first() |#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Retorna a chave do último item (que corresponde ao predicado especificado, se fornecido) ou nula se não houver tal item. O `$predicate` tem a assinatura `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Consulte [firstKey() |#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Liga para `$transformer` sobre todos os elementos da matriz e retorna a matriz de valores de retorno. A chamada de retorno tem a assinatura `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Cria uma nova matriz transformando os valores e as chaves da matriz original. A função `$transformer` tem a assinatura `function ($value, $key, array $array): ?array{$newValue, $newKey}`. Se `$transformer` retornar `null`, o elemento será ignorado. Para elementos retidos, o primeiro elemento da matriz retornada é usado como a nova chave e o segundo elemento como o novo valor.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Esse método é útil em situações em que você precisa alterar a estrutura de uma matriz (chaves e valores simultaneamente) ou filtrar elementos durante a transformação (retornando null para elementos indesejados).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Recursivamente, funde dois campos. É útil, por exemplo, para fundir estruturas de árvores. Ele se comporta como o operador `+` para array, ou seja, adiciona um par chave/valor do segundo array ao primeiro e mantém o valor do primeiro array no caso de uma colisão de chave.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Os valores da segunda matriz são sempre anexados à primeira. O desaparecimento do valor `10` da segunda matriz pode parecer um pouco confuso. Deve-se notar que tanto este valor quanto o valor `5` in the first array have the same numeric key `0`, portanto, no campo resultante há apenas um elemento do primeiro array.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Normaliza o array para o array associativo. Substituindo as chaves numéricas por seus valores, o novo valor será `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Devolve e remove o valor de um item de uma matriz. Se ele não existir, ele lança uma exceção, ou retorna `$default`, se fornecido.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Renomeia uma chave. Retorna `true` se a chave foi encontrada na matriz.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Retorna a posição indexada a zero de determinada chave de matriz. Retorna `null` se a chave não for encontrada.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // returns 0
$position = Arrays::getKeyOffset($array, 'second'); // returns 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // returns null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Testa se pelo menos um elemento da matriz passa no teste implementado pela callback fornecida com a assinatura `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Veja [cada() |#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Converte um valor em uma chave de array, que é um número inteiro ou uma string.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Copia os elementos da matriz `$array` para o objeto `$object` e depois o devolve.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // it sets $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Ele lança cada elemento da matriz para cordelar e o encerra com `$prefix` e `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

O objeto [api:Nette\Utils\ArrayHash] é o descendente da classe genérica stdClass e o estende à capacidade de tratá-lo como uma matriz, por exemplo, acessando membros usando parênteses rectos:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // também funciona notação de objeto
$hash->foo; // 123
```

Você pode usar a função `count($hash)` para obter o número de elementos.

Você pode iterar sobre um objeto como faria com uma matriz, mesmo com uma referência:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

As arrays existentes podem ser transformadas para `ArrayHash` usando `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

A transformação é recursiva:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // object ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Pode ser evitado pelo segundo parâmetro:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // array
```

Transformar de volta para a matriz:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] representa uma matriz linear onde os índices são apenas números inteiros subindo de 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Você pode usar a função `count($list)` para obter o número de itens.

Você pode iterar sobre um objeto como faria com uma matriz, mesmo com uma referência:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$valor = 'novo valor';
}
```

As arrays existentes podem ser transformadas para `ArrayList` usando `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

O acesso a chaves além dos valores permitidos lança uma exceção `Nette\OutOfRangeException`:

```php
echo $list[-1]; // throws Nette\OutOfRangeException
unset($list[30]); // throws Nette\OutOfRangeException
```

A remoção da chave resultará na renumeração dos elementos:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Você pode adicionar um novo elemento ao início usando `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
