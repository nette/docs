JSON-nal való munka
*******************

.[perex]
A [api:Nette\Utils\Json] egy statikus osztály a JSON formátum kódolására és dekódolására szolgáló függvényekkel. Kezeli a különböző PHP verziók sebezhetőségeit és kivételeket dob hibák esetén.


Telepítés:

```shell
composer require nette/utils
```

Minden példa feltételezi a létrehozott aliast:

```php
use Nette\Utils\Json;
```


Használat
=========


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Átalakítja a `$value`-t JSON formátumba.

Ha a `$pretty` be van állítva, a JSON-t formázza a könnyebb olvashatóság és áttekinthetőség érdekében:

```php
Json::encode($value); // vrací JSON
Json::encode($value, pretty: true); // vrací přehlednější JSON
```

Az `$asciiSafe` esetén a kimenetet ASCII-ben generálja, azaz a unicode karaktereket `\uxxxx` szekvenciákra cseréli:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

A `$htmlSafe` paraméter biztosítja, hogy a kimenet ne tartalmazzon olyan karaktereket, amelyeknek speciális jelentésük van a HTML-ben:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

A `$forceObjects` paraméterrel a numerikus kulcsokkal rendelkező tömbök is JavaScript objektumként lesznek kódolva:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Hiba esetén `Nette\Utils\JsonException` kivételt dob.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Kivétel kezelése
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Feldolgozza a JSON-t PHP-ba.

A `$forceArray` beállítás kikényszeríti a tömbök visszaadását objektumok helyett:

```php
Json::decode('{"variable": true}'); // vrací objekt typu stdClass
Json::decode('{"variable": true}', forceArrays: true); // vrací pole
```

Hiba esetén `Nette\Utils\JsonException` kivételt dob.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Kivétel kezelése
}
```


Hogyan küldjünk JSON-t a presenterből?
======================================

Erre használható a `$this->sendJson($data)` metódus, amelyet például az `action*()` metódusban hívhatunk meg, lásd [Válasz küldése|application:presenters#Odeslání odpovědi].
