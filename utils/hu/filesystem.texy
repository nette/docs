Fájlrendszer funkciók
*********************

.[perex]
[api:Nette\Utils\FileSystem] egy statikus osztály, amely hasznos függvényeket tartalmaz a fájlrendszerrel való munkához. Egyik előnye a natív PHP függvényekkel szemben, hogy hiba esetén kivételeket dobnak.


Telepítés:

```shell
composer require nette/utils
```

A következő példák feltételezik, hogy a következő osztály alias van definiálva:

```php
use Nette\Utils\FileSystem;
```


Manipuláció .[#toc-manipulation]
================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Egy fájl vagy egy teljes könyvtár másolása. Alapértelmezés szerint felülírja a meglévő fájlokat és könyvtárakat. Ha a `$overwrite` értéke `false`, és a `$target` már létezik, a `Nette\InvalidStateException` kivételt dob. Hiba esetén kivételt dob `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Létrehoz egy könyvtárat, ha az nem létezik, beleértve a szülői könyvtárakat is. Hiba esetén kivételt dob `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Töröl egy fájlt vagy egy teljes könyvtárat, ha létezik. Ha a könyvtár nem üres, akkor először annak tartalmát törli. Hiba esetén kivételt dob `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

A fájljogosultságokat a `$fileMode` vagy a könyvtárjogosultságokat a `$dirMode` értékre állítja. Rekurzívan végigjárja és beállítja a könyvtár teljes tartalmának engedélyeit is.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Megnyitja a fájlt és visszaadja az erőforrást. A `$mode` paraméter ugyanúgy működik, mint a natív `fopen()`:https://www.php.net/manual/en/function.fopen.php függvény. Hiba esetén a `Nette\IOException` kivételt vet fel.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Beolvassa a `$file` tartalmát. Hiba esetén a `Nette\IOException` kivételt dobja.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Soronként olvassa be a fájl tartalmát. A natív `file()` függvénytől eltérően nem a teljes fájlt olvassa be a memóriába, hanem folyamatosan olvassa, így a rendelkezésre álló memóriánál nagyobb fájlok is beolvashatók. A `$stripNewLines` megadja, hogy a `\r` és a `\n` sortörő karakterek eltávolításra kerüljenek-e.
Hiba esetén `Nette\IOException` kivételt vet fel.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

A `$origin` által megadott fájl vagy könyvtár átnevezése vagy áthelyezése a `$target` címre. Alapértelmezés szerint felülírja a meglévő fájlokat és könyvtárakat. Ha a `$overwrite` értéke `false` és a `$target` már létezik, akkor a `Nette\InvalidStateException` kivételt dob. Hiba esetén kivételt dob `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

A `$content` értéket a `$file` címre írja. Hiba esetén a `Nette\IOException` kivételt dob.

```php
FileSystem::write('/path/to/file', $content);
```


Útvonalak .[#toc-paths]
=======================


isAbsolute(string $path): bool .[method]
----------------------------------------

Meghatározza, hogy a `$path` abszolút-e.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Összekapcsolja az útvonal összes szegmensét, és normalizálja az eredményt.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizálja a `..` és a `.` oldalakat, valamint a könyvtárak elválasztóit az elérési útvonalban.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

A Unix rendszereken használt `/` -ra konvertálja a slasheket.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

A slashes karaktereket az aktuális platformra jellemző karakterekre konvertálja, azaz Windowson `\`, máshol `/`.

```php
$path = FileSystem::platformSlashes($path);
```
