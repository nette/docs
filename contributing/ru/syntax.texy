Синтаксис документации
**********************

Документация использует синтаксис Markdown и [Texy |https://texy.info/cs/syntax] с некоторыми расширениями.


Ссылки
======

Для внутренних ссылок используется запись в квадратных скобках `[ссылка]`. Либо в виде с вертикальной чертой `[текст ссылки |цель ссылки]`, либо сокращенно `[текст ссылки]`, если цель совпадает с текстом (после преобразования в нижний регистр и дефисы):

- `[Page name]` -> `<a href="/ru/page-name">Page name</a>`
- `[текст ссылки |Page name]` -> `<a href="/ru/page-name">текст ссылки</a>`

Мы можем ссылаться на другую языковую версию или на другой раздел. Разделом считается библиотека Nette (например, `forms`, `latte` и т.д.) или специальные разделы, такие как `best-practices`, `quickstart` и т.д.:

- `[cs:Page name]` -> `<a href="/cs/page-name">Page name</a>` (тот же раздел, другой язык)
- `[tracy:Page name]` -> `<a href="//tracy.nette.org/ru/page-name">Page name</a>` (другой раздел, тот же язык)
- `[tracy:cs:Page name]` -> `<a href="//tracy.nette.org/cs/page-name">Page name</a>` (другой раздел и язык)

С помощью `#` также можно нацелиться на конкретный заголовок на странице.

- `[#Heading]` -> `<a href="#toc-heading">Heading</a>` (заголовок на текущей странице)
- `[Page name#Heading]` -> `<a href="/ru/page-name#toc-heading">Page name</a>`

Ссылка на главную страницу раздела: (`@home` — это специальное выражение для домашней страницы раздела)

- `[текст ссылки |@home]` -> `<a href="/ru/">текст ссылки</a>`
- `[текст ссылки |tracy:]` -> `<a href="//tracy.nette.org/ru/">текст ссылки</a>`


Ссылки на API документацию
--------------------------

Всегда указывайте только с помощью этой записи:

- `[api:Nette\SmartObject]` -> [api:Nette\SmartObject]
- `[api:Nette\Forms\Form::setTranslator()]` -> [api:Nette\Forms\Form::setTranslator()]
- `[api:Nette\Forms\Form::$onSubmit]` -> [api:Nette\Forms\Form::$onSubmit]
- `[api:Nette\Forms\Form::Required]` -> [api:Nette\Forms\Form::Required]

Полностью квалифицированные имена используйте только при первом упоминании. Для последующих ссылок используйте упрощенное имя:

- `[Form::setTranslator() |api:Nette\Forms\Form::setTranslator()]` -> [Form::setTranslator() |api:Nette\Forms\Form::setTranslator()]


Ссылки на PHP документацию
--------------------------

- `[php:substr]` -> [php:substr]


Исходный код
============

Блок кода начинается с <code>&#96;&#96;&#96;lang</code> и заканчивается <code>&#96;&#96;&#96;</code>. Поддерживаемые языки: `php`, `latte`, `neon`, `html`, `css`, `js` и `sql`. Для отступов всегда используйте табуляции.

```
 ```php
	public function renderPage($id)
	{
	}
 ```
```

Вы также можете указать имя файла как <code>&#96;&#96;&#96;php .{file: ArrayTest.php}</code>, и блок кода будет отображен следующим образом:

```php .{file: ArrayTest.php}
public function renderPage($id)
{
}
```


Заголовки
=========

Самый верхний заголовок (т.е. название страницы) подчеркните звездочками. Для разделения секций используйте знаки равенства. Заголовки подчеркивайте знаками равенства, а затем дефисами:

```
MVC Приложения и презентеры
***************************
...


Создание ссылок
===============
...


Ссылки в шаблонах
-----------------
...
```


Рамки и стили
=============

Перекс обозначаем классом `.[perex]` .[perex]

Примечание обозначаем классом `.[note]` .[note]

Совет обозначаем классом `.[tip]` .[tip]

Предостережение обозначаем классом `.[caution]` .[caution]

Более сильное предупреждение обозначаем классом `.[warning]` .[warning]

Номер версии `.{data-version:2.4.10}` .{data-version:2.4.10}

Классы записывайте перед строкой:

```
.[perex]
Это перекс.
```

Пожалуйста, учтите, что рамки типа `.[tip]` "притягивают" взгляд, поэтому они используются для выделения, а не для менее важной информации. Поэтому максимально экономьте их использование.


Содержание
==========

Содержание (ссылки в правом меню) генерируется автоматически для всех страниц, размер которых превышает 4 000 байт, при этом это поведение по умолчанию можно изменить с помощью [#meta тега] `{{toc}}`. Текст, составляющий содержание, берется стандартно прямо из текста заголовков, но с помощью модификатора `.{toc}` можно отобразить в содержании другой текст, что полезно в основном для длинных заголовков.

```


Длинный и умный заголовок .{toc: Любой другой текст, отображаемый в содержании}
===============================================================================
```


Мета-теги
=========

- установка собственного названия страницы (в `<title>` и хлебных крошках) `{{title: Другое название}}`
- перенаправление `{{redirect: pla:cs}}` - см. [#ссылки]
- принудительное `{{toc}}` или запрет `{{toc: no}}` автоматического содержания (блок со ссылками на отдельные заголовки)

{{priority: -1}}
