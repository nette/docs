Hilfsfunktionen
***************

.[perex]
[api:Nette\Utils\Helpers] ist eine statische Klasse mit nützlichen Funktionen.


Installation:

```shell
composer require nette/utils
```

Alle Beispiele setzen voraus, dass ein Alias erstellt wurde:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Führt einen Callback aus und gibt die erfasste Ausgabe als String zurück.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Begrenzt einen Wert auf den gegebenen inklusiven Bereich von min und max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Vergleicht zwei Werte auf die gleiche Weise wie PHP. Unterscheidet die Operatoren `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
Die Funktion ist nützlich in Situationen, in denen der Operator variabel ist.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Konvertiert `false` in `null`, andere Werte bleiben unverändert.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Gibt den letzten Fehler in PHP zurück oder einen leeren String, wenn kein Fehler aufgetreten ist. Im Gegensatz zu `error_get_last()` wird es nicht von der PHP-Direktive `html_errors` beeinflusst und gibt immer Text zurück, kein HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Sucht aus den angebotenen Möglichkeiten `$possibilities` den String, der `$value` am ähnlichsten, aber nicht identisch ist. Unterstützt nur 8-Bit-Kodierungen.

Dies ist nützlich, wenn eine bestimmte Option ungültig ist und wir dem Benutzer eine ähnliche vorschlagen möchten (aber eine andere, deshalb wird der identische String ignoriert). Auf diese Weise erstellt Nette die Meldungen `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', nicht 'baz'
```
