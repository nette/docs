Validadores de valores
**********************

.[perex]
¿Necesita verificar rápida y fácilmente que una variable contiene, por ejemplo, una dirección de correo electrónico válida? Para eso le será útil [api:Nette\Utils\Validators], una clase estática con funciones útiles para la validación de valores.


Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que se ha creado un alias:

```php
use Nette\Utils\Validators;
```


Uso básico
==========

La clase dispone de una serie de métodos para comprobar valores, como [#isList()], [#isUnicode()], [#isEmail()], [#isUrl()], etc., para usar en su código:

```php
if (!Validators::isEmail($email)) {
	throw new InvalidArgumentException;
}
```

Además, puede verificar si un valor es uno de los llamados [tipos esperados|#Očekávané typy], que es una cadena donde las opciones individuales están separadas por una barra vertical `|`. Así podemos verificar fácilmente múltiples tipos usando [#if()]:

```php
if (!Validators::is($val, 'int|string|bool')) {
	// ...
}
```

Pero también nos da la opción de crear un sistema donde las expectativas deben escribirse como cadenas (por ejemplo, en anotaciones o configuración) y luego validar los valores según ellas.

También se puede aplicar un requisito a los tipos esperados usando [#assert()], que lanza una excepción si no se cumple.


Tipos esperados
===============

Los tipos esperados forman una cadena que consta de una o más variantes separadas por una barra vertical `|`, similar a cómo se escriben los tipos en PHP (p. ej., `'int|string|bool')`. También se acepta la notación nullable `?int`.

Un array donde todos los elementos son de un tipo determinado se escribe en la forma `int[]`.

Algunos tipos pueden ir seguidos de dos puntos y una longitud `:length` o un rango `:[min]..[max]`, p. ej., `string:10` (cadena de 10 bytes de longitud), `float:10..` (número 10 o mayor), `array:..10` (array de hasta diez elementos) o `list:10..20` (lista con 10 a 20 elementos), o una expresión regular con `pattern:[0-9]+`.

Resumen de tipos y reglas:

.[wide]
| Tipos PHP  ||
|--------------------------
| `array` .{width: 140px} | se puede especificar un rango para el número de elementos
| `bool`     |
| `float`    | se puede especificar un rango para el valor
| `int`      | se puede especificar un rango para el valor
| `null`     |
| `object`   |
| `resource` |
| `scalar`   | int\|float\|bool\|string
| `string`   | se puede especificar un rango para la longitud en bytes
| `callable` |
| `iterable` |
| `mixed`    |
|--------------------------
| pseudo-tipos ||
|------------------------------------------------
| `list`      | [array indexado |#isList], se puede especificar un rango para el número de elementos
| `none`      | valor vacío: `''`, `null`, `false`
| `number`    | int\|float
| `numeric`   | [número incluyendo representación textual |#isNumeric]
| `numericint`| [entero incluyendo representación textual |#isNumericInt]
| `unicode`   | [cadena UTF-8 |#isUnicode], se puede especificar un rango para la longitud en caracteres
|--------------------------
| clase de caracteres (no debe ser una cadena vacía) ||
|------------------------------------------------
| `alnum`   | todos los caracteres son alfanuméricos
| `alpha`   | todos los caracteres son letras `[A-Za-z]`
| `digit`   | todos los caracteres son dígitos
| `lower`   | todos los caracteres son letras minúsculas `[a-z]`
| `space`   | todos los caracteres son espacios
| `upper`   | todos los caracteres son letras mayúsculas `[A-Z]`
| `xdigit`  | todos los caracteres son dígitos hexadecimales `[0-9A-Fa-f]`
|--------------------------
| verificación de sintaxis ||
|------------------------------------------------
| `pattern`   | expresión regular que debe coincidir con la cadena **completa**
| `email`     | [Correo electrónico |#isEmail]
| `identifier`| [Identificador PHP |#isPhpIdentifier]
| `url`       | [URL |#isUrl]
| `uri`       | [URI |#isUri]
|--------------------------
| verificación del entorno ||
|------------------------------------------------
| `class`     | es una clase existente
| `interface` | es una interfaz existente
| `directory` | es un directorio existente
| `file`      | es un archivo existente


Aserciones
==========


assert($value, string $expected, string $label='variable'): void .[method]
--------------------------------------------------------------------------

Verifica que el valor sea uno de los [tipos esperados|#Očekávané typy] separados por una barra vertical. Si no, lanza una excepción [api:Nette\Utils\AssertionException]. La palabra `variable` en el texto de la excepción puede reemplazarse por otra usando el parámetro `$label`.

```php
Validators::assert('Nette', 'string:5'); // OK
Validators::assert('Lorem ipsum dolor sit', 'string:78');
// AssertionException: The variable expects to be string:78, string 'Lorem ipsum dolor sit' given.
```


assertField(array $array, string|int $key, ?string $expected=null, ?string $label=null): void .[method]
-------------------------------------------------------------------------------------------------------

Verifica si el elemento bajo la clave `$key` en el array `$array` es uno de los [tipos esperados|#Očekávané typy] separados por una barra vertical. Si no, lanza una excepción [api:Nette\Utils\AssertionException]. La cadena `item '%' in array` en el texto de la excepción puede reemplazarse por otra usando el parámetro `$label`.

```php
$arr = ['foo' => 'Nette'];

Validators::assertField($arr, 'foo', 'string:5'); // OK
Validators::assertField($arr, 'bar', 'string:15');
// AssertionException: Missing item 'bar' in array.
Validators::assertField($arr, 'foo', 'int');
// AssertionException: The item 'foo' in array expects to be int, string 'Nette' given.
```


Validadores
===========


is($value, string $expected): bool .[method]
--------------------------------------------

Verifica si el valor es uno de los [tipos esperados|#Očekávané typy] separados por una barra vertical.

```php
Validators::is(1, 'int|float');  // true
Validators::is(23, 'int:0..10'); // false
Validators::is('Nette Framework', 'string:15');     // true, la longitud es de 15 bytes
Validators::is('Nette Framework', 'string:8..');    // true
Validators::is('Nette Framework', 'string:30..40'); // false
```


isEmail(mixed $value): bool .[method]
-------------------------------------

Verifica si el valor es una dirección de correo electrónico válida. No verifica si el dominio existe realmente, solo verifica la sintaxis. La función también cuenta con futuros [TLD|https://cs.wikipedia.org/wiki/Doména_nejvyššího_řádu], que también pueden estar en unicode.

```php
Validators::isEmail('example@nette.org'); // true
Validators::isEmail('example@localhost'); // false
Validators::isEmail('nette');             // false
```


isInRange(mixed $value, array $range): bool .[method]
-----------------------------------------------------

Verifica si el valor está en el rango dado `[min, max]`, donde el límite superior o inferior puede omitirse (`null`). Se pueden comparar números, cadenas y objetos DateTime.

Si faltan ambos límites (`[null, null]`) o el valor es `null`, devuelve `false`.

```php
Validators::isInRange(5, [0, 5]);     // true
Validators::isInRange(23, [null, 5]); // false
Validators::isInRange(23, [5]);       // true
Validators::isInRange(1, [5]);        // false
```


isNone(mixed $value): bool .[method]
------------------------------------

Verifica si el valor es `0`, `''`, `false` o `null`.

```php
Validators::isNone(0); // true
Validators::isNone(''); // true
Validators::isNone(false); // true
Validators::isNone(null); // true
Validators::isNone('nette'); // false
```


isNumeric(mixed $value): bool .[method]
---------------------------------------

Verifica si el valor es un número o un número escrito en una cadena.

```php
Validators::isNumeric(23);      // true
Validators::isNumeric(1.78);    // true
Validators::isNumeric('+42');   // true
Validators::isNumeric('3.14');  // true
Validators::isNumeric('nette'); // false
Validators::isNumeric('1e6');   // false
```


isNumericInt(mixed $value): bool .[method]
------------------------------------------

Verifica si el valor es un entero o un entero escrito en una cadena.

```php
Validators::isNumericInt(23);      // true
Validators::isNumericInt(1.78);    // false
Validators::isNumericInt('+42');   // true
Validators::isNumericInt('3.14');  // false
Validators::isNumericInt('nette'); // false
```


isPhpIdentifier(string $value): bool .[method]
----------------------------------------------

Verifica si el valor es un identificador sintácticamente válido en PHP, por ejemplo, para nombres de clases, métodos, funciones, etc.

```php
Validators::isPhpIdentifier('');        // false
Validators::isPhpIdentifier('Hello1');  // true
Validators::isPhpIdentifier('1Hello');  // false
Validators::isPhpIdentifier('one two'); // false
```


isBuiltinType(string $type): bool .[method]
-------------------------------------------

Comprueba si `$type` es un tipo incorporado de PHP. De lo contrario, es un nombre de clase.

```php
Validators::isBuiltinType('string'); // true
Validators::isBuiltinType('Foo');    // false
```


isTypeDeclaration(string $type): bool .[method]
-----------------------------------------------

Comprueba si la declaración de tipo dada es sintácticamente válida.

```php
Validators::isTypeDeclaration('?string');      // true
Validators::isTypeDeclaration('string|null');  // true
Validators::isTypeDeclaration('Foo&Bar');      // true
Validators::isTypeDeclaration('(A&C)|null');   // true

Validators::isTypeDeclaration('?string|null'); // false
Validators::isTypeDeclaration('|foo');         // false
Validators::isTypeDeclaration('(A|B)');        // false
```


isClassKeyword(string $type): bool .[method]
--------------------------------------------

Comprueba si `$type` es uno de los tipos internos `self`, `parent`, `static`.

```php
Validators::isClassKeyword('self'); // true
Validators::isClassKeyword('Foo');  // false
```


isUnicode(mixed $value): bool .[method]
---------------------------------------

Verifica si el valor es una cadena UTF-8 válida.

```php
Validators::isUnicode('nette'); // true
Validators::isUnicode('');      // true
Validators::isUnicode("\xA0");  // false
```


isUrl(mixed $value): bool .[method]
-----------------------------------

Verifica si el valor es una dirección URL válida.

```php
Validators::isUrl('https://nette.org:8080/path?query#fragment'); // true
Validators::isUrl('http://localhost');            // true
Validators::isUrl('http://192.168.1.1');          // true
Validators::isUrl('http://[::1]');                // true
Validators::isUrl('http://user:pass@nette.org');  // false
Validators::isUrl('nette.org');                   // false
```


isUri(string $value): bool .[method]
------------------------------------

Verifica si el valor es una dirección URI válida, es decir, una cadena que comienza con un esquema sintácticamente válido.

```php
Validators::isUri('https://nette.org');           // true
Validators::isUri('mailto:gandalf@example.org');  // true
Validators::isUri('nette.org');                   // false
```
