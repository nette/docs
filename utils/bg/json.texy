Работа с JSON
*************

.[perex]
[api:Nette\Utils\Json] е статичен клас с функции за кодиране и декодиране на JSON формат. Той обработва уязвимостите на различни версии на PHP и хвърля изключения при грешки.


Инсталация:

```shell
composer require nette/utils
```

Всички примери предполагат създаден псевдоним:

```php
use Nette\Utils\Json;
```


Използване
==========


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Преобразува `$value` в JSON формат.

При настройка `$pretty` форматира JSON за по-лесно четене и прегледност:

```php
Json::encode($value); // връща JSON
Json::encode($value, pretty: true); // връща по-прегледен JSON
```

При `$asciiSafe` генерира изход в ASCII, т.е. unicode знаците се заменят със секвенции `\uxxxx`:

```php
Json::encode('жълто', asciiSafe: true);
// '"\u0436\u044a\u043b\u0442\u043e"'
```

Параметърът `$htmlSafe` гарантира, че изходът няма да съдържа знаци със специално значение в HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

С `$forceObjects` дори масивите с числови ключове ще бъдат кодирани като JavaScript обекти:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

При грешка хвърля изключение `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Обработка на изключението
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Парсва JSON в PHP.

Настройката `$forceArray` налага връщането на масиви вместо обекти:

```php
Json::decode('{"variable": true}'); // връща обект от тип stdClass
Json::decode('{"variable": true}', forceArrays: true); // връща масив
```

При грешка хвърля изключение `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Обработка на изключението
}
```


Как да изпратите JSON от презентер?
===================================

За това може да се използва методът `$this->sendJson($data)`, който можем да извикаме например в метод `action*()`, вижте [Изпращане на отговор|application:presenters#Odeslání odpovědi].
