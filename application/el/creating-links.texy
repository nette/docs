Δημιουργία συνδέσμων URL
************************

<div class=perex>

Η δημιουργία συνδέσμων στο Nette είναι τόσο απλή όσο το να δείχνεις με το δάχτυλο. Απλά στοχεύστε και το framework θα κάνει όλη τη δουλειά για εσάς. Θα δείξουμε:

- πώς να δημιουργείτε συνδέσμους σε πρότυπα και αλλού
- πώς να διακρίνετε έναν σύνδεσμο προς την τρέχουσα σελίδα
- τι να κάνετε με τους μη έγκυρους συνδέσμους

</div>


Χάρη στην [αμφίδρομη δρομολόγηση |routing], δεν θα χρειαστεί ποτέ να γράψετε σκληρά κωδικοποιημένες διευθύνσεις URL της εφαρμογής σας σε πρότυπα ή κώδικα, οι οποίες μπορεί να αλλάξουν αργότερα, ή να τις συνθέσετε πολύπλοκα. Στον σύνδεσμο, αρκεί να καθορίσετε τον presenter και την ενέργεια, να περάσετε τυχόν παραμέτρους και το framework θα δημιουργήσει το URL μόνο του. Στην πραγματικότητα, είναι πολύ παρόμοιο με την κλήση μιας συνάρτησης. Αυτό θα σας αρέσει.


Στο πρότυπο παρουσιαστή .[#toc-in-the-presenter-template]
=========================================================

Τις περισσότερες φορές δημιουργούμε συνδέσμους σε πρότυπα και ένα εξαιρετικό βοήθημα είναι το χαρακτηριστικό `n:href`:

```latte
<a n:href="Product:show">detail</a>
```

Παρατηρήστε ότι αντί για το χαρακτηριστικό HTML `href`, χρησιμοποιήσαμε το [n:attribute |latte:syntax#n-atributy] `n:href`. Η τιμή του δεν είναι ένα URL, όπως θα ήταν στην περίπτωση του χαρακτηριστικού `href`, αλλά το όνομα του presenter και της ενέργειας.

Το κλικ σε έναν σύνδεσμο είναι, απλοποιημένα, κάτι σαν την κλήση της μεθόδου `ProductPresenter::renderShow()`. Και αν έχει παραμέτρους στην υπογραφή της, μπορούμε να την καλέσουμε με ορίσματα:

```latte
<a n:href="Product:show $product->id, $product->slug">product detail</a>
```

Είναι επίσης δυνατό να περάσετε ονομασμένες παραμέτρους. Ο παρακάτω σύνδεσμος περνάει την παράμετρο `lang` με την τιμή `cs`:

```latte
<a n:href="Product:show $product->id, lang: cs">product detail</a>
```

Αν η μέθοδος `ProductPresenter::renderShow()` δεν έχει το `$lang` στην υπογραφή της, μπορεί να λάβει την τιμή της παραμέτρου χρησιμοποιώντας το `$lang = $this->getParameter('lang')` ή από την [ιδιότητα |presenters#Parametry požadavku].

Αν οι παράμετροι είναι αποθηκευμένες σε έναν πίνακα, μπορούν να επεκταθούν με τον τελεστή `...` (στο Latte 2.x με τον τελεστή `(expand)`):

```latte
{var $args = [$product->id, lang => cs]}
<a n:href="Product:show ...$args">product detail</a>
```

Στους συνδέσμους, μεταβιβάζονται επίσης αυτόματα οι λεγόμενες [persistent παράμετροι|presenters#persistentní parametry].

Το χαρακτηριστικό `n:href` είναι πολύ χρήσιμο για τις ετικέτες HTML `<a>`. Αν θέλουμε να εμφανίσουμε έναν σύνδεσμο αλλού, για παράδειγμα σε κείμενο, χρησιμοποιούμε το `{link}`:

```latte
Address is: {link Home:default}
```


V kódu
======

Για τη δημιουργία ενός συνδέσμου στον presenter, χρησιμοποιείται η μέθοδος `link()`:

```php
$url = $this->link('Product:show', $product->id);
```

Οι παράμετροι μπορούν επίσης να περαστούν χρησιμοποιώντας έναν πίνακα, όπου μπορούν επίσης να καθοριστούν ονομασμένες παράμετροι:

```php
$url = $this->link('Product:show', [$product->id, 'lang' => 'cs']);
```

Οι σύνδεσμοι μπορούν επίσης να δημιουργηθούν χωρίς presenter, γι' αυτό υπάρχει το [#LinkGenerator] και η μέθοδός του `link()`.


Odkazy na presenter
===================

Αν ο στόχος του συνδέσμου είναι ένας presenter και μια ενέργεια, έχει αυτή τη σύνταξη:

```
[//] [[[[:]module:]presenter:]action | this] [#fragment]
```

Η μορφή υποστηρίζεται από όλες τις ετικέτες Latte και όλες τις μεθόδους του presenter που λειτουργούν με συνδέσμους, δηλαδή `n:href`, `{link}`, `{plink}`, `link()`, `lazyLink()`, `isLinkCurrent()`, `redirect()`, `redirectPermanent()`, `forward()`, `canonicalize()` και επίσης το [#LinkGenerator]. Έτσι, ακόμα κι αν χρησιμοποιείται το `n:href` στα παραδείγματα, θα μπορούσε να είναι οποιαδήποτε από τις συναρτήσεις.

Η βασική μορφή είναι επομένως `Presenter:action`:

```latte
<a n:href="Home:default">homepage</a>
```

Αν συνδέουμε σε μια ενέργεια του τρέχοντος presenter, μπορούμε να παραλείψουμε το όνομά του:

```latte
<a n:href="default">homepage</a>
```

Αν ο στόχος είναι η ενέργεια `default`, μπορούμε να την παραλείψουμε, αλλά η άνω και κάτω τελεία πρέπει να παραμείνει:

```latte
<a n:href="Home:">homepage</a>
```

Οι σύνδεσμοι μπορούν επίσης να οδηγούν σε άλλα [modules |directory-structure#Presentery a šablony]. Εδώ, οι σύνδεσμοι διακρίνονται σε σχετικούς προς ένα ένθετο υπο-module, ή απόλυτους. Η αρχή είναι ανάλογη με τις διαδρομές στο δίσκο, μόνο που αντί για κάθετες χρησιμοποιούνται άνω και κάτω τελείες. Ας υποθέσουμε ότι ο τρέχων presenter είναι μέρος του module `Front`, τότε γράφουμε:

```latte
<a n:href="Shop:Product:show">link to Front:Shop:Product:show</a>
<a n:href=":Admin:Product:show">link to Admin:Product:show</a>
```

Μια ειδική περίπτωση είναι ένας σύνδεσμος [προς τον εαυτό του|#Odkaz na aktuální stránku], όπου καθορίζουμε το `this` ως στόχο.

```latte
<a n:href="this">refresh</a>
```

Μπορούμε να συνδέσουμε σε ένα συγκεκριμένο τμήμα της σελίδας μέσω ενός λεγόμενου fragment μετά το σύμβολο δίεσης `#`:

```latte
<a n:href="Home:#main">link to Home:default and fragment #main</a>
```


Absolutní cesty
===============

Οι σύνδεσμοι που δημιουργούνται χρησιμοποιώντας το `link()` ή το `n:href` είναι πάντα απόλυτες διαδρομές (δηλαδή ξεκινούν με το σύμβολο `/`), αλλά όχι απόλυτες διευθύνσεις URL με πρωτόκολλο και τομέα όπως `https://domain`.

Για να δημιουργήσετε μια απόλυτη διεύθυνση URL, προσθέστε δύο κάθετες στην αρχή (π.χ. `n:href="//Home:"`). Ή μπορείτε να αλλάξετε τον presenter ώστε να δημιουργεί μόνο απόλυτους συνδέσμους ορίζοντας `$this->absoluteUrls = true`.


Odkaz na aktuální stránku
=========================

Ο στόχος `this` δημιουργεί έναν σύνδεσμο προς την τρέχουσα σελίδα:

```latte
<a n:href="this">refresh</a>
```

Ταυτόχρονα, μεταβιβάζονται όλες οι παράμετροι που καθορίζονται στην υπογραφή της μεθόδου `action<Action>()` ή `render<View>()`, αν η `action<Action>()` δεν έχει οριστεί. Έτσι, αν βρισκόμαστε στη σελίδα `Product:show` και `id: 123`, ο σύνδεσμος προς το `this` θα μεταβιβάσει και αυτή την παράμετρο.

Φυσικά, είναι δυνατό να καθορίσετε τις παραμέτρους απευθείας:

```latte
<a n:href="this refresh: 1">refresh</a>
```

Η συνάρτηση `isLinkCurrent()` ελέγχει εάν ο στόχος του συνδέσμου είναι ο ίδιος με την τρέχουσα σελίδα. Αυτό μπορεί να χρησιμοποιηθεί, για παράδειγμα, σε ένα πρότυπο για τη διάκριση συνδέσμων κ.λπ.

Οι παράμετροι είναι ίδιες με αυτές της μεθόδου `link()`, αλλά επιπλέον είναι δυνατό να καθορίσετε έναν χαρακτήρα μπαλαντέρ `*` αντί για μια συγκεκριμένη ενέργεια, ο οποίος σημαίνει οποιαδήποτε ενέργεια του συγκεκριμένου presenter.

```latte
{if !isLinkCurrent('Admin:login')}
	<a n:href="Admin:login">Login</a>
{/if}

<li n:class="isLinkCurrent('Product:*') ? active">
	<a n:href="Product:">...</a>
</li>
```

Σε συνδυασμό με το `n:href` σε ένα στοιχείο, μπορεί να χρησιμοποιηθεί μια συντομευμένη μορφή:

```latte
<a n:class="isLinkCurrent() ? active" n:href="Home:">...</a>
```

Ο χαρακτήρας μπαλαντέρ `*` μπορεί να χρησιμοποιηθεί μόνο αντί για την ενέργεια, όχι για τον presenter.

Για να ελέγξουμε εάν βρισκόμαστε σε ένα συγκεκριμένο module ή το υπο-module του, χρησιμοποιούμε τη μέθοδο `isModuleCurrent(moduleName)`.

```latte
<li n:class="isModuleCurrent('Forum:Users') ? active">
	<a n:href="Product:">...</a>
</li>
```


Odkazy na signál
================

Ο στόχος ενός συνδέσμου δεν χρειάζεται να είναι μόνο ένας presenter και μια ενέργεια, αλλά μπορεί επίσης να είναι ένα [σήμα|components#Signál] (καλούν τη μέθοδο `handle<Signal>()`). Τότε η σύνταξη είναι η εξής:

```
[//] [sub-component:]signal! [#fragment]
```

Το σήμα διακρίνεται λοιπόν από το θαυμαστικό:

```latte
<a n:href="click!">signal</a>
```

Μπορείτε επίσης να δημιουργήσετε έναν σύνδεσμο προς το σήμα ενός υπο-component (ή υπο-υπο-component):

```latte
<a n:href="componentName:click!">signal</a>
```


Odkazy v komponentě
===================

Επειδή τα [components|components] είναι ανεξάρτητες, επαναχρησιμοποιήσιμες μονάδες που δεν θα πρέπει να έχουν καμία σύνδεση με τους γύρω presenters, οι σύνδεσμοι λειτουργούν λίγο διαφορετικά εδώ. Το χαρακτηριστικό Latte `n:href` και η ετικέτα `{link}` καθώς και οι μέθοδοι του component όπως το `link()` και άλλες θεωρούν τον στόχο του συνδέσμου **πάντα ως το όνομα του σήματος**. Επομένως, δεν είναι καν απαραίτητο να συμπεριλάβετε το θαυμαστικό:

```latte
<a n:href="click">signal, not action</a>
```

Αν θέλαμε να συνδέσουμε σε presenters στο πρότυπο του component, θα χρησιμοποιούσαμε την ετικέτα `{plink}`:

```latte
<a href={plink Home:default}>home</a>
```

ή στον κώδικα

```php
$this->getPresenter()->link('Home:default')
```


Aliasy .{data-version:v3.2.2}
=============================

Μερικές φορές μπορεί να είναι χρήσιμο να αντιστοιχίσετε ένα εύκολα απομνημονεύσιμο ψευδώνυμο σε ένα ζεύγος Presenter:action. Για παράδειγμα, να ονομάσετε την αρχική σελίδα `Front:Home:default` απλά ως `home` ή το `Admin:Dashboard:default` ως `admin`.

Τα ψευδώνυμα ορίζονται στη [διαμόρφωση|configuration] κάτω από το κλειδί `application › aliases`:

```neon
application:
    aliases:
        home: Front:Home:default
        admin: Admin:Dashboard:default
        sign: Front:Sign:in
```

Στους συνδέσμους, γράφονται στη συνέχεια χρησιμοποιώντας το σύμβολο @, για παράδειγμα:

```latte
<a n:href="@admin">administration</a>
```

Υποστηρίζονται επίσης σε όλες τις μεθόδους που λειτουργούν με συνδέσμους, όπως το `redirect()` και παρόμοιες.


Neplatné odkazy
===============

Μπορεί να συμβεί να δημιουργήσουμε έναν μη έγκυρο σύνδεσμο - είτε επειδή οδηγεί σε έναν ανύπαρκτο presenter, είτε επειδή περνάει περισσότερες παραμέτρους από όσες δέχεται η μέθοδος προορισμού στην υπογραφή της, είτε όταν δεν μπορεί να δημιουργηθεί URL για την ενέργεια προορισμού. Ο τρόπος χειρισμού των μη έγκυρων συνδέσμων καθορίζεται από τη στατική μεταβλητή `Presenter::$invalidLinkMode`. Αυτή μπορεί να πάρει έναν συνδυασμό αυτών των τιμών (σταθερών):

- `Presenter::InvalidLinkSilent` - σιωπηλή λειτουργία, το σύμβολο # επιστρέφεται ως URL
- `Presenter::InvalidLinkWarning` - δημιουργείται μια προειδοποίηση E_USER_WARNING, η οποία θα καταγραφεί στη λειτουργία παραγωγής, αλλά δεν θα προκαλέσει διακοπή της εκτέλεσης του σεναρίου
- `Presenter::InvalidLinkTextual` - οπτική προειδοποίηση, εμφανίζει το σφάλμα απευθείας στον σύνδεσμο
- `Presenter::InvalidLinkException` - δημιουργείται η εξαίρεση InvalidLinkException

Η προεπιλεγμένη ρύθμιση είναι `InvalidLinkWarning` στη λειτουργία παραγωγής και `InvalidLinkWarning | InvalidLinkTextual` στη λειτουργία ανάπτυξης. Το `InvalidLinkWarning` στο περιβάλλον παραγωγής δεν προκαλεί διακοπή του σεναρίου, αλλά η προειδοποίηση θα καταγραφεί. Στο περιβάλλον ανάπτυξης, το [Tracy |tracy:] το συλλαμβάνει και εμφανίζει ένα bluescreen. Το `InvalidLinkTextual` λειτουργεί επιστρέφοντας ένα μήνυμα σφάλματος ως URL, το οποίο ξεκινά με τους χαρακτήρες `#error:`. Για να κάνουμε τέτοιους συνδέσμους ορατούς με την πρώτη ματιά, προσθέτουμε στο CSS μας:

```css
a[href^="#error:"] {
	background: red;
	color: white;
}
```

Αν δεν θέλουμε να δημιουργούνται προειδοποιήσεις στο περιβάλλον ανάπτυξης, μπορούμε να ορίσουμε τη σιωπηλή λειτουργία απευθείας στη [διαμόρφωση|configuration].

```neon
application:
	silentLinks: true
```


LinkGenerator
=============

Πώς να δημιουργήσετε συνδέσμους με παρόμοια άνεση όπως η μέθοδος `link()`, αλλά χωρίς την παρουσία ενός presenter; Γι' αυτό υπάρχει το [api:Nette\Application\LinkGenerator].

Το LinkGenerator είναι μια υπηρεσία που μπορείτε να ζητήσετε να σας περάσει μέσω του κατασκευαστή και στη συνέχεια να δημιουργήσετε συνδέσμους χρησιμοποιώντας τη μέθοδό του `link()`.

Υπάρχει μια διαφορά σε σύγκριση με τους presenters. Το LinkGenerator δημιουργεί όλους τους συνδέσμους απευθείας ως απόλυτες διευθύνσεις URL. Επιπλέον, δεν υπάρχει "τρέχων presenter", οπότε δεν μπορείτε να καθορίσετε μόνο το όνομα της ενέργειας ως στόχο `link('default')` ή να καθορίσετε σχετικές διαδρομές προς τα modules.

Οι μη έγκυροι σύνδεσμοι δημιουργούν πάντα την εξαίρεση `Nette\Application\UI\InvalidLinkException`.
