Створення URL-посилань
**********************

<div class=perex>

Створювати посилання в Nette просто, як показувати пальцем. Достатньо лише вказати напрямок, і фреймворк зробить усю роботу за вас. Ми покажемо:

- як створювати посилання в шаблонах та інших місцях
- як відрізнити посилання на поточну сторінку
- що робити з недійсними посиланнями

</div>


Завдяки [двосторонньому роутингу |routing] вам ніколи не доведеться вписувати URL-адреси вашого застосунку вручну в шаблони чи код, оскільки вони можуть згодом змінитися, або складно їх складати. У посиланні достатньо вказати презентер та дію, передати можливі параметри, і фреймворк сам згенерує URL. Власне, це дуже схоже на виклик функції. Вам це сподобається.


У шаблоні презентера
====================

Найчастіше ми створюємо посилання в шаблонах, і чудовим помічником є атрибут `n:href`:

```latte
<a n:href="Product:show">деталі</a>
```

Зверніть увагу, що замість HTML-атрибута `href` ми використали [n:атрибут |latte:syntax#n-atributy] `n:href`. Його значенням є не URL, як це було б у випадку атрибута `href`, а назва презентера та дії.

Натискання на посилання, спрощено кажучи, схоже на виклик методу `ProductPresenter::renderShow()`. І якщо він має параметри у своїй сигнатурі, ми можемо викликати його з аргументами:

```latte
<a n:href="Product:show $product->id, $product->slug">деталі продукту</a>
```

Можна передавати й іменовані параметри. Наступне посилання передає параметр `lang` зі значенням `cs`:

```latte
<a n:href="Product:show $product->id, lang: cs">деталі продукту</a>
```

Якщо метод `ProductPresenter::renderShow()` не має `$lang` у своїй сигнатурі, він може отримати значення параметра за допомогою `$lang = $this->getParameter('lang')` або з [властивості |presenters#Parametry požadavku].

Якщо параметри зберігаються в масиві, їх можна розгорнути оператором `...` (у Latte 2.x оператором `(expand)`):

```latte
{var $args = [$product->id, lang => cs]}
<a n:href="Product:show ...$args">деталі продукту</a>
```

У посиланнях також автоматично передаються так звані [персистентні параметри|presenters#persistentní parametry].

Атрибут `n:href` дуже зручний для HTML-тегів `<a>`. Якщо ми хочемо вивести посилання в іншому місці, наприклад, у тексті, використовуємо `{link}`:

```latte
Адреса: {link Home:default}
```


У коді
======

Для створення посилання в презентері служить метод `link()`:

```php
$url = $this->link('Product:show', $product->id);
```

Параметри можна передати також за допомогою масиву, де можна вказати й іменовані параметри:

```php
$url = $this->link('Product:show', [$product->id, 'lang' => 'cs']);
```

Посилання можна створювати і без презентера, для цього існує [#LinkGenerator] та його метод `link()`.


Посилання на презентер
======================

Якщо ціллю посилання є презентер та дія, воно має такий синтаксис:

```
[//] [[[[:]module:]presenter:]action | this] [#fragment]
```

Формат підтримують усі теги Latte та всі методи презентера, які працюють з посиланнями, тобто `n:href`, `{link}`, `{plink}`, `link()`, `lazyLink()`, `isLinkCurrent()`, `redirect()`, `redirectPermanent()`, `forward()`, `canonicalize()`, а також [#LinkGenerator]. Тому, хоча в прикладах використано `n:href`, там могла б бути будь-яка з функцій.

Основною формою є `Presenter:action`:

```latte
<a n:href="Home:default">головна сторінка</a>
```

Якщо ми посилаємося на дію поточного презентера, ми можемо опустити його назву:

```latte
<a n:href="default">головна сторінка</a>
```

Якщо ціллю є дія `default`, ми можемо її опустити, але двокрапка має залишитися:

```latte
<a n:href="Home:">головна сторінка</a>
```

Посилання також можуть вказувати на інші [модулі |directory-structure#Presentery a šablony]. Тут посилання розрізняються на відносні до вкладеного підмодуля або абсолютні. Принцип аналогічний до шляхів на диску, тільки замість слешів використовуються двокрапки. Припустимо, що поточний презентер є частиною модуля `Front`, тоді запишемо:

```latte
<a n:href="Shop:Product:show">посилання на Front:Shop:Product:show</a>
<a n:href=":Admin:Product:show">посилання на Admin:Product:show</a>
```

Особливим випадком є посилання [на себе|#Odkaz na aktuální stránku], коли як ціль вказуємо `this`.

```latte
<a n:href="this">оновити</a>
```

Ми можемо посилатися на певну частину сторінки через так званий фрагмент за знаком решітки `#`:

```latte
<a n:href="Home:#main">посилання на Home:default та фрагмент #main</a>
```


Абсолютні шляхи
===============

Посилання, згенеровані за допомогою `link()` або `n:href`, завжди є абсолютними шляхами (тобто починаються зі знака `/`), але не абсолютними URL з протоколом та доменом, як `https://domain`.

Для генерації абсолютного URL додайте на початок два слеші (наприклад, `n:href="//Home:"`). Або можна перемкнути презентер, щоб він генерував лише абсолютні посилання, встановивши `$this->absoluteUrls = true`.


Посилання на поточну сторінку
=============================

Ціль `this` створить посилання на поточну сторінку:

```latte
<a n:href="this">оновити</a>
```

Водночас передаються всі параметри, зазначені в сигнатурі методу `action<Action>()` або `render<View>()`, якщо `action<Action>()` не визначено. Отже, якщо ми на сторінці `Product:show` і `id: 123`, посилання на `this` передасть і цей параметр.

Звичайно, можна вказати параметри безпосередньо:

```latte
<a n:href="this refresh: 1">оновити</a>
```

Функція `isLinkCurrent()` перевіряє, чи ціль посилання збігається з поточною сторінкою. Це можна використати, наприклад, у шаблоні для розрізнення посилань тощо.

Параметри такі ж, як у методі `link()`, але додатково можна замість конкретної дії вказати заступний знак `*`, який означає будь-яку дію даного презентера.

```latte
{if !isLinkCurrent('Admin:login')}
	<a n:href="Admin:login">Увійдіть</a>
{/if}

<li n:class="isLinkCurrent('Product:*') ? active">
	<a n:href="Product:">...</a>
</li>
```

У комбінації з `n:href` в одному елементі можна використовувати скорочену форму:

```latte
<a n:class="isLinkCurrent() ? active" n:href="Home:">...</a>
```

Заступний знак `*` можна використовувати лише замість дії, а не презентера.

Для перевірки, чи ми знаходимося в певному модулі або його підмодулі, використовуємо метод `isModuleCurrent(moduleName)`.

```latte
<li n:class="isModuleCurrent('Forum:Users') ? active">
	<a n:href="Product:">...</a>
</li>
```


Посилання на сигнал
===================

Ціллю посилання може бути не тільки презентер та дія, але й [сигнал|components#Signál] (викликають метод `handle<Signal>()`). Тоді синтаксис такий:

```
[//] [sub-component:]signal! [#fragment]
```

Сигнал, отже, відрізняється знаком оклику:

```latte
<a n:href="click!">сигнал</a>
```

Можна створити й посилання на сигнал підкомпонента (або під-підкомпонента):

```latte
<a n:href="componentName:click!">сигнал</a>
```


Посилання в компоненті
======================

Оскільки [компоненти|components] є окремими повторно використовуваними одиницями, які не повинні мати жодних зв'язків з навколишніми презентерами, посилання тут працюють трохи інакше. Атрибут Latte `n:href` та тег `{link}`, а також методи компонента, такі як `link()` та інші, розглядають ціль посилання **завжди як назву сигналу**. Тому навіть не потрібно вказувати знак оклику:

```latte
<a n:href="click">сигнал, а не дія</a>
```

Якщо ми хочемо в шаблоні компонента посилатися на презентери, використовуємо для цього тег `{plink}`:

```latte
<a href={plink Home:default}>вступ</a>
```

або в коді

```php
$this->getPresenter()->link('Home:default')
```


Аліаси .{data-version:v3.2.2}
=============================

Іноді може бути корисно призначити парі Presenter:дія легко запам'ятовуваний псевдонім. Наприклад, головну сторінку `Front:Home:default` назвати просто `home` або `Admin:Dashboard:default` як `admin`.

Аліаси визначаються в [конфігурації|configuration] під ключем `application › aliases`:

```neon
application:
    aliases:
        home: Front:Home:default
        admin: Admin:Dashboard:default
        sign: Front:Sign:in
```

У посиланнях вони потім записуються за допомогою символу @, наприклад:

```latte
<a n:href="@admin">адміністрація</a>
```

Вони також підтримуються у всіх методах, що працюють з посиланнями, таких як `redirect()` тощо.


Недійсні посилання
==================

Може статися, що ми створимо недійсне посилання - або тому, що воно веде на неіснуючий презентер, або тому, що передає більше параметрів, ніж цільовий метод приймає у своїй сигнатурі, або коли для цільової дії неможливо згенерувати URL. Як поводитися з недійсними посиланнями, визначає статична змінна `Presenter::$invalidLinkMode`. Вона може набувати комбінації таких значень (констант):

- `Presenter::InvalidLinkSilent` - тихий режим, як URL повертається знак #
- `Presenter::InvalidLinkWarning` - викидається попередження E_USER_WARNING, яке в робочому режимі буде залоговано, але не спричинить переривання виконання скрипта
- `Presenter::InvalidLinkTextual` - візуальне попередження, виводить помилку безпосередньо в посиланні
- `Presenter::InvalidLinkException` - викидається виняток InvalidLinkException

Стандартне налаштування — `InvalidLinkWarning` у робочому режимі та `InvalidLinkWarning | InvalidLinkTextual` у режимі розробки. `InvalidLinkWarning` у робочому середовищі не спричиняє переривання скрипта, але попередження буде залоговано. У середовищі розробки його перехопить [Tracy |tracy:] і відобразить блюскрін. `InvalidLinkTextual` працює так, що як URL повертає повідомлення про помилку, яке починається символами `#error:`. Щоб такі посилання були помітні з першого погляду, доповнимо CSS:

```css
a[href^="#error:"] {
	background: red;
	color: white;
}
```

Якщо ми не хочемо, щоб у середовищі розробки генерувалися попередження, можемо встановити тихий режим безпосередньо в [конфігурації|configuration].

```neon
application:
	silentLinks: true
```


LinkGenerator
=============

Як створювати посилання з такою ж зручністю, як метод `link()`, але без наявності презентера? Для цього існує [api:Nette\Application\LinkGenerator].

LinkGenerator — це сервіс, який ви можете отримати через конструктор, а потім створювати посилання його методом `link()`.

Порівняно з презентерами є відмінність. LinkGenerator створює всі посилання одразу як абсолютні URL. Також не існує "поточного презентера", тому не можна як ціль вказати лише назву дії `link('default')` або вказувати відносні шляхи до модулів.

Недійсні посилання завжди викидають `Nette\Application\UI\InvalidLinkException`.
