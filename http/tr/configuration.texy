HTTP'yi Yapılandırma
********************

.[perex]
Nette HTTP için yapılandırma seçeneklerine genel bakış.

Tüm çerçeveyi değil, yalnızca bu kütüphaneyi kullanıyorsanız, [yapılandırmayı nasıl yükleyeceğinizi |bootstrap:] okuyun.


HTTP Üstbilgileri .[#toc-http-headers]
======================================

```neon
http:
	# headers that are sent with each request
	headers:
		X-Powered-By: MyCMS
		X-Content-Type-Options: nosniff
		X-XSS-Protection: '1; mode=block'

	# affects header X-Frame-Options
	frames: ...      # (string|bool) defaults to 'SAMEORIGIN'
```

Güvenlik nedeniyle, çerçeve bir sayfanın başka bir sayfanın içinde görüntülenebileceğini belirten bir `X-Frame-Options: SAMEORIGIN` başlığı gönderir (öğe `<iframe>`) yalnızca aynı etki alanındaysa. Bu bazı durumlarda istenmeyen bir durum olabilir (örneğin, bir Facebook uygulaması geliştiriyorsanız), bu nedenle davranış `frames: http://allowed-host.com`.


İçerik Güvenliği Politikası .[#toc-content-security-policy]
-----------------------------------------------------------

Başlıklar `Content-Security-Policy` (bundan sonra CSP olarak anılacaktır) kolayca bir araya getirilebilir, açıklamaları [CSP açıklam |https://content-security-policy.com] asında bulunabilir. CSP direktifleri ( `script-src` gibi) spesifikasyona göre dizeler olarak ya da daha iyi okunabilirlik için değer dizileri olarak yazılabilir. Bu durumda `'self'` gibi anahtar kelimelerin etrafına tırnak işareti koymaya gerek yoktur. Nette ayrıca otomatik olarak `nonce` değerini üretecektir, böylece `'nonce-y4PopTLM=='` başlıkta gönderilecektir.

```neon
http:
	# Content Security Policy
	csp:
		# string according to CSP specification
		default-src: "'self' https://example.com"

		# array of values
		script-src:
			- nonce
			- strict-dynamic
			- self
			- https://example.com

		# bool in the case of switches
		upgrade-insecure-requests: true
		block-all-mixed-content: false
```

Kullanım `<script n:nonce>...</script>` ve nonce değeri otomatik olarak doldurulacaktır. Nette'de güvenli web siteleri yapmak gerçekten çok kolay.

Benzer şekilde, `Content-Security-Policy-Report-Only` (CSP ile paralel olarak kullanılabilir) ve [Özellik Politikası |https://developers.google.com/web/updates/2018/06/feature-policy] başlıkları da eklenebilir:

```neon
http:
	# Content Security Policy Report-Only
	cspReportOnly:
		default-src: self
		report-uri: 'https://my-report-uri-endpoint'

	# Feature Policy
	featurePolicy:
		unsized-media: none
		geolocation:
			- self
			- https://example.com
```


HTTP Çerezi .[#toc-http-cookie]
-------------------------------

 [Nette\Http\Response::setCookie() |response#setCookie] ve session yöntemlerinin bazı parametrelerinin varsayılan değerlerini değiştirebilirsiniz.

```neon
http:
	# cookie scope by path
	cookiePath: ...        # (string) defaults to '/'

	# which hosts are allowed to receive the cookie
	cookieDomain: 'example.com'  # (string|domain) defaults to unset

	# to send cookies only via HTTPS?
	cookieSecure: ...      # (bool|auto) defaults to auto

	# disables the sending of the cookie that Nette uses as protection against CSRF
	disableNetteCookie: ...  # (bool) defaults to false
```

 `cookieDomain` seçeneği hangi etki alanlarının (kökenlerin) çerezleri kabul edebileceğini belirler. Belirtilmezse, çerez, alt alan adları hariç tutularak *aynı (alt) alan adı tarafından kabul edilir. Eğer `cookieDomain` belirtilirse, alt alan adları da dahil edilir. Bu nedenle, `cookieDomain` belirtmek, belirtmemekten daha az kısıtlayıcıdır.

Örneğin, `cookieDomain: nette.org` ayarlanırsa, çerez `doc.nette.org` gibi tüm alt alan adlarında da kullanılabilir. Bu, `domain` yani `cookieDomain: domain` özel değeri ile de elde edilebilir.

 `cookieSecure` 'un varsayılan değeri `auto` 'dir, bu da web sitesi HTTPS üzerinde çalışıyorsa çerezlerin `Secure` bayrağıyla gönderileceği ve bu nedenle yalnızca HTTPS üzerinden kullanılabileceği anlamına gelir.


HTTP Proxy .[#toc-http-proxy]
-----------------------------

Site bir HTTP proxy'sinin arkasında çalışıyorsa, HTTPS bağlantılarının algılanmasının doğru çalışması için proxy'nin IP adresini ve istemci IP adresini girin. Böylece [Nette\Http\Request::getRemoteAddress( |request#getRemoteAddress] ) ve [isSecured() |request#isSecured] doğru değerleri döndürür ve şablonlarda `https:` protokolü ile bağlantılar oluşturulur.

```neon
http:
	# IP address, range (ie. 127.0.0.1/8) or array of these values
	proxy: 127.0.0.1       # (string|string[]) defaults to none
```


Oturum .[#toc-session]
======================

Temel [oturum |sessions] ayarları:

```neon
session:
	# shows session panel in Tracy Bar?
	debugger: ...        # (bool) defaults to false

	# inactivity time after which the session expires
	expiration: 14 days  # (string) defaults to '3 hours'

	# when to start the session?
	autoStart: ...       # (smart|always|never) defaults to 'smart'

	# handler, service that implements the SessionHandlerInterface interface
	handler: @handlerService
```

 `autoStart` seçeneği oturumun ne zaman başlatılacağını kontrol eder. `always` değeri, oturumun her zaman uygulama başladığında başlatılacağı anlamına gelir. `smart` değeri, oturumun uygulama başladığında yalnızca zaten mevcutsa veya ondan okumak ya da ona yazmak istediğimiz anda başlatılacağı anlamına gelir. Son olarak, `never` değeri oturumun otomatik olarak başlatılmasını devre dışı bırakır.

Ayrıca, tüm PHP [oturum yönergelerini |https://www.php.net/manual/en/session.configuration.php] (camelCase biçiminde) ve ayrıca [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters]'u da ayarlayabilirsiniz. Örnek

```neon
session:
	# 'session.name' written as 'name'
	name: MYID

	# 'session.save_path' written as 'savePath'
	savePath: "%tempDir%/sessions"
```


Oturum Çerezi .[#toc-session-cookie]
------------------------------------

Oturum çerezi [diğer çerez |#HTTP cookie] lerle aynı parametrelerle gönderilir, ancak bunları onun için değiştirebilirsiniz:

```neon
session:
	# which hosts are allowed to receive the cookie
	cookieDomain: 'example.com'   # (string|domain)

	# restrictions when accessing cross-origin request
	cookieSamesite: None          # (Strict|Lax|None) defaults to Lax
```

 `cookieSamesite` seçeneği, çerezin [Siteler Arası İstek Sahteciliği |nette:glossary#cross-site-request-forgery-csrf] saldırılarına karşı bir miktar koruma sağlayan [çapraz kökenli istek |nette:glossary#SameSite cookie]lerle gönderilip gönderilmeyeceğini etkiler.
