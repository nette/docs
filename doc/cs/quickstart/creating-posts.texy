Vytváření a editování příspěvků
**************************

To je skvělé! Máme již super nový blog, lidé urputně diskutují v komentářích a my máme komečně trochu času na více programování. Přestože je Adminer skvělý nástroj, není tak komfortní pro psaní nových příspěvků na blog. Zřejmě je ten správný čas pro vytvoření jednoduchého formuláře pro přidání nových příspěvků přímo z aplikace. Pojďme na to.

Začněme se navržením uživatelského rozhraní:

1. Na úvodní stránce přídáme odkaz "Napsat nový příspěvek".
2. Tento odkaz zobrazí formulář s titulkem a textareou pro obsah příspěvku.
3. Když kliknete na tlačátko Uložit, příspěvek se uloží do databáze.

Později také přidáme autentikaci a přidávání příspěvků umožníme pouze přihlášeným uživatelům. Ale to až později. Jaký kód potřebujeme napsat teď, aby vše fungovalo?

1. Přidáme odkaz do šablony hlavní stránky (`app/templates/Homepage/default.latte`)
2. Vytvoříme novou stránku (šablonu) na které bude onen formulář
3. Definujeme formulář pro přidávání nových příspěvků
4. Dafinujeme handler, který se spustí po úspěšném odeslání formuláře a který nový spříspěvek uloží do databáze


Odkaz na nový příspěvek
===

Pravděpodobně již víte jak přidat odkaz na úvodní stránku. Vyzkoušejte si to.

Pokud si nejste jisti jak na to, umístěte tento kód do souboru `app/templates/Homepage/default.latte`:

/---html
<a n:href="Post:create">Napsat nový příspěvek</a>
\---


Stránka pro vytvoření nového příspěvku
===

Právě vytvořený odkaz odkazuje na `PostPresenter` a jeho akci `create`. Můžeme přidat novou metodu `renderCreate`, ale momentálně to není nezbytné. Nepotřebujeme získávat žádná data z databáze a předávat je do šablony, takže by tato metoda byla prázdná. V takovýchto případech nemusí metoda vůbec existovat.

.[note]
Pokud chcete, můžete zde tuto prázdnou metodu nechat. Pravděpodobně bude v budoucnu potřeba. Je to na vás.

Vytvořme nyní šablonu (`app/templates/Post/create.latte`):

/---html
{block #content}
<h1>Nový příspěvek</h1>

{control postForm}
\--

Vše by již mělo být jasné. Poslední řádka vykresluje formulář, který teprve vytvoříme.


Formulář pro ukládání příspěvků
===

Formuláře a komponenty jsou již probrány při vytváření komentářů. Pokud jste nyní zmateni, vraťte se na [tvorbu formulářů a komponent |comments#toc-form-for-commenting]. My zde počkáme. ;)

Nyní přidejme tuto metodu do přesenteru `PostPresenter`:

/---code php
        protected function createComponentPostForm()
        {
                $form = new Nette\Application\UI\Form;
                $form->addText('title', 'Titulek:')
                        ->setRequired();
                $form->addTextArea('content', 'Obsah:')
                        ->setRequired();

                $form->addSubmit('send', 'Uložit a publikovat');
                $form->onSuccess[] = $this->postFormSucceeded;

                return $form;
        }
\---


Ukládání nového příspěvku z formuláře
===

Pokračujme přidáním metody, která zpracuje data z formuláře:

/---php
        public function postFormSucceeded($form)
        {
                $values = $form->getValues();
                $post = $this->database->table('posts')->insert($values);

                $this->flashMessage("Příspěvek byl úspěšně publikován.", 'success');
                $this->redirect('show', $post->id);
        }
\---

Pouze rychlé vysvětlení. Tato metoda získá data z formuláře, vloží je do databáze, vytvoří zprávu pro uživatele o úspěšném uložení příspěvku a přesměruje na stránku s novým příspěvkem, takže se můžete hned podívat jak vypadá.


Úprava příspěvků
===

Nyní přidáme také možnost editace příspěvku. Bude to velmi jednoduché. Již máme formulář `postForm`. Ten můžeme použít i pro editaci. Přidáme novou stránku `edit` a upravíme handler metodu, která bude schopna jak přidat nový článek (tak jako to dělá teď), tak již existující článek editovat.

Přidáme metodu do presenteru `PostPresenter`:

/---php
        public function actionEdit($postId)
        {
                $post = $this->database->table('posts')->get($postId);
                if (!$post) {
                        $this->error('Příspěvek nebyl nalezen');
                }
                $this['postForm']->setDefaults($post->toArray());
        }
\---

Všimněte si, že se metoda jmenuje `actionEdit` (a ne `renderEdit`, jak jste možná čekali). Render metody se používají pro vložení dat do šablon. Oproti tomu Action metody toho mohou dělat mnohem více. Mohou kontrolovat, jestli požadovaná stránka může být zobrazena současným návštěvníkem, nebo uživatelem a mohou také vykonávat spoustu práce, která nenáleží handle metodám. Předávání dat do šablon bude samozřejmě fungovat i v Action metodách, ale není doporučeno to dělat, protože proto tato metoda není určena. Navíc je kód daleko lépe čitelný, pokud jej rozdělíte na renderovací metody a metody vykonávající nějakou akci.

Nyní vytvoříme další šablonu (`app/templates/Post/edit.latte`):

/---html
{block content}
<h1>Upravit příspěvek</h1>

{control postForm}
\---

Upravíme také handler metodu:

/---code php
        public function postFormSucceeded(Form $form)
        {
                $values = $form->getValues();
                $postId = $this->getParameter('postId');

                if ($postId) {
                        $post = $this->database->table('posts')->get($postId);
                        $post->update($values);
                } else {
                        $post = $this->database->table('posts')->insert($values);
                }

                $this->flashMessage('Příspěvek byl úspěšně publikován.', 'success');
                $this->redirect('show', $post->id);
        }
\---

Pokud je k dispozici parametr `postId`, znamená to, že příspěvek je určen k editaci. V tomto případě ověříme, že požadovaný příspěvek opravdu existuje a pokud ano, aktualizujeme ho v databázi. Pokud parametr `postId` není k dispozici, pak to znamená, že by měl být nový příspěvek přidán.

Kde se však onen parametr `postId` vezme? Jedná se o parametr, který vyl vložen do metody `actionEdit`. Nyní můžete přidat odkaz na šablonu `app/templates/Post/show.latte`:

/---html
<a n:href="edit $post->id">Upravit příspěvek</a>
\---


Shrnutí
=======

Blog je nyní funkční, návštěvníci jej aktivně komentují a my již nejsme strikně vázání na Adminer. Aplikace je plně nezávislá a kdokoliv může přidat nový příspěvek. Tak moment... To není pravděpodobně v pořádku, že kdokoliv - a tím myslím opravdu kdokoliv s přístupem na internet - může přidávat nové příspěvky. Je zapotřebí najké zabezpečení, aby mohl nový příspěvek přidat pouze přihlášený uživatel. Na to se podíváme v příští kapitole.
