Работа с поплавъци
******************

.[perex]
[api:Nette\Utils\Floats] е статичен клас с полезни функции за сравняване на десетични числа.


Настройка:

```shell
composer require nette/utils
```

Всички примери предполагат, че псевдонимът вече е създаден:

```php
use Nette\Utils\Floats;
```


Мотивация .[#toc-motivation]
============================

Питате се защо е необходим клас за сравняване на плувки? Имам предвид, че мога да използвам операторите `<`, `>`, `===` и всичко е готово.
Това не е точно така. Какво мислите, че ще даде този код?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Ако стартирате този код, някои от вас ще се изненадат да видят, че програмата отпечатва `not same`.

При извършване на математически операции с десетични числа възникват грешки, тъй като десетичните числа се преобразуват в двоични. Например, `0.1 + 0.2` отпечатва `0.300000000000000044…`. Ето защо, когато правим сравнения, трябва да допуснем малко разминаване с определен десетичен знак.

Това прави класът `Floats`. Следното сравнение ще работи както трябва:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

При опит за сравняване на `NAN` се получава изключение `\LogicException`.


Сравнение на плаващи стойности .[#toc-float-comparison]
=======================================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Връща `true`, ако `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Връща `true`, ако `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Връща `true`, ако `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Връща `true`, ако се прилага `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Връща `true`, ако `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Ако `$a` < `$b`, се връща `-1`, ако е равно на `0` a pokud je `$a` > `$b`, се връща `1`.

Може да се използва напр. с функцията `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr je nyní [-3.5, 1, 2, 5]
```


Спомагателни функции .[#toc-helpers-functions]
==============================================


isZero(float $value): bool .[method]
------------------------------------

Връща `true`, ако стойността е нула.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Връща `true`, ако стойността е цяло число.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
