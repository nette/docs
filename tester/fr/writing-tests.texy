Tests d'écriture
****************

.[perex]
L'écriture de tests pour Nette Tester est unique en ce sens que chaque test est un script PHP qui peut être exécuté de manière autonome. Cela présente un grand potentiel.
Lorsque vous écrivez le test, vous pouvez simplement l'exécuter pour voir s'il fonctionne correctement. Si ce n'est pas le cas, vous pouvez facilement le parcourir dans l'IDE et rechercher un bug.

Vous pouvez même ouvrir le test dans un navigateur. Mais surtout, en l'exécutant, vous effectuerez le test. Vous saurez immédiatement s'il a réussi ou échoué.

Dans le chapitre d'introduction, nous avons [montré |guide#What Makes Tester Unique?] un test vraiment trivial de l'utilisation des tableaux PHP. Maintenant, nous allons créer notre propre classe, que nous allons tester, même si elle sera également simple.

Commençons par une disposition typique de répertoire pour une bibliothèque ou un projet. Il est important de séparer les tests du reste du code, par exemple en raison du déploiement, car nous ne voulons pas télécharger les tests sur le serveur. La structure peut être la suivante :

```
├── src/           # code that we will test
│   ├── Rectangle.php
│   └── ...
├── tests/         # tests
│   ├── bootstrap.php
│   ├── RectangleTest.php
│   └── ...
├── vendor/
└── composer.json
```

Et maintenant, nous allons créer des fichiers individuels. Nous allons commencer par la classe testée, que nous placerons dans le fichier `src/Rectangle.php`

```php .{file:src/Rectangle.php}
<?php
class Rectangle
{
	private float $width;
	private float $height;

	public function __construct(float $width, float $height)
	{
		if ($width < 0 || $height < 0) {
			throw new InvalidArgumentException('The dimension must not be negative.');
		}
		$this->width = $width;
		$this->height = $height;
	}

	public function getArea(): float
	{
		return $this->width * $this->height;
	}

	public function isSquare(): bool
	{
		return $this->width === $this->height;
	}
}
```

Et nous allons créer un test pour elle. Le nom du fichier de test doit correspondre au masque `*Test.php` ou `*.phpt`, nous choisirons la variante `RectangleTest.php`:


```php .{file:tests/RectangleTest.php}
<?php
use Tester\Assert;

require __DIR__ . '/bootstrap.php';

// oblong général
$rect = new Rectangle(10, 20);
Assert::same(200.0, $rect->getArea()); # nous allons vérifier les résultats attendus
Assert::false($rect->isSquare());
```

Comme vous pouvez le constater, les [méthodes d'assertion |Assertions] telles que `Assert::same()` sont utilisées pour affirmer qu'une valeur réelle correspond à une valeur attendue.

La dernière étape consiste à créer le fichier `bootstrap.php`. Il contient un code commun pour tous les tests. Par exemple, le chargement automatique des classes, la configuration de l'environnement, la création d'un répertoire temporaire, les aides et autres. Chaque test charge le bootstrap et ne s'occupe que du test. Le bootstrap peut ressembler à :

```php .{file:tests/bootstrap.php}
<?php
require __DIR__ . '/vendor/autoload.php'; # charger l'autoloader de Composer

Tester\Environment::setup(); # initialisation du testeur Nette

// et autres configurations (juste un exemple, dans notre cas elles ne sont pas nécessaires)
date_default_timezone_set('Europe/Prague');
define('TmpDir', '/tmp/app-tests');
```

.[note]
Ce bootstrap suppose que l'autoloader de Composer sera également capable de charger la classe `Rectangle.php`. Ceci peut être réalisé, par exemple, en [définissant la section autoload |best-practices:composer#autoloading] dans `composer.json`, etc.

Nous pouvons maintenant exécuter le test à partir de la ligne de commande comme tout autre script PHP autonome. La première exécution révélera toute erreur de syntaxe, et si vous n'avez pas fait de faute de frappe, vous verrez :

/--pre .[terminal]
$ php RectangleTest.php

<span style="color:#FFF; background-color:#090">OK</span>
\--

Si nous changeons dans le test la déclaration en false `Assert::same(123, $rect->getArea());`, ceci se produira :

/--pre .[terminal]
$ php RectangleTest.php

<span style="color: #FFF">Failed: </span><span style="color: #FF0">200.0</span><span style="color: #FFF"> should be </span><span style="color: #FF0">123</span>

<span style="color: #CCC">in </span><span style="color: #FFF">RectangleTest.php(5)</span><span style="color: #808080"> Assert::same(123, $rect->getArea());</span>

<span style="color: #FFF; background-color: #900">FAILURE</span>
\--


Lorsque l'on écrit des tests, il est bon d'attraper toutes les situations extrêmes. Par exemple, si l'entrée est zéro, un nombre négatif, dans d'autres cas une chaîne vide, null, etc. En fait, cela vous oblige à réfléchir et à décider comment le code doit se comporter dans de telles situations. Les tests corrigent ensuite le comportement.

Dans notre cas, une valeur négative devrait lever une exception, que nous vérifions avec [Assert::exception() |Assertions#Assert::exception]:

```php .{file:tests/RectangleTest.php}
// la largeur ne doit pas être un nombre négatif
Assert::exception(
	fn() => new Rectangle(-1, 20),
	InvalidArgumentException::class,
	'La dimension ne doit pas être négative',
);
```

Et nous ajoutons un test similaire pour la hauteur. Enfin, nous testons que `isSquare()` renvoie `true` si les deux dimensions sont identiques. Essayez d'écrire de tels tests à titre d'exercice.


Tests bien agencés .[#toc-well-arranged-tests]
==============================================

La taille du fichier de test peut augmenter et devenir rapidement encombrante. Il est donc pratique de regrouper les différentes zones testées dans des fonctions distinctes.

Tout d'abord, nous allons montrer une variante plus simple mais élégante, en utilisant la fonction globale `test()`. Le testeur ne la crée pas automatiquement, pour éviter une collision si vous aviez une fonction avec le même nom dans votre code. Il est uniquement créé par la méthode `setupFunctions()`, que vous appelez dans le fichier `bootstrap.php` :

```php .{file:tests/bootstrap.php}
Tester\Environment::setup();
Tester\Environment::setupFunctions();
```

Grâce à cette fonction, nous pouvons diviser joliment le fichier de test en unités nommées. Lors de l'exécution, les étiquettes seront affichées l'une après l'autre.

```php .{file:tests/RectangleTest.php}
<?php
use Tester\Assert;

require __DIR__ . '/bootstrap.php';

test('general oblong', function () {
	$rect = new Rectangle(10, 20);
	Assert::same(200.0, $rect->getArea());
	Assert::false($rect->isSquare());
});

test('general square', function () {
	$rect = new Rectangle(5, 5);
	Assert::same(25.0, $rect->getArea());
	Assert::true($rect->isSquare());
});

test('dimensions must not be negative', function () {
	Assert::exception(
		fn() => new Rectangle(-1, 20),
        InvalidArgumentException::class,
	);

	Assert::exception(
		fn() => new Rectangle(10, -1),
        InvalidArgumentException::class,
	);
});
```

Si vous devez exécuter le code avant ou après chaque test, passez-le à `setUp()` ou `tearDown()` :

```php
setUp(fonction () {
	// code d'initialisation à exécuter avant chaque test()
}) ;
```

La deuxième variante est l'objet. Nous allons créer ce qu'on appelle un TestCase, qui est une classe où les unités individuelles sont représentées par des méthodes dont le nom commence par test-.

```php .{file:tests/RectangleTest.php}
class RectangleTest extends Tester\TestCase
{
	public function testGeneralOblong()
	{
		$rect = new Rectangle(10, 20);
		Assert::same(200.0, $rect->getArea());
		Assert::false($rect->isSquare());
	}

	public function testGeneralSquare()
	{
		$rect = new Rectangle(5, 5);
		Assert::same(25.0, $rect->getArea());
		Assert::true($rect->isSquare());
	}

	/** @throws InvalidArgumentException */
	public function testWidthMustNotBeNegative()
	{
		$rect = new Rectangle(-1, 20);
	}

	/** @throws InvalidArgumentException */
	public function testHeightMustNotBeNegative()
	{
		$rect = new Rectangle(10, -1);
	}
}

// Exécution des méthodes de test
(new RectangleTest)->run();
```

Cette fois, nous avons utilisé une annotation `@throw` pour tester les exceptions. Consultez le chapitre [TestCase] pour plus d'informations.


Fonctions d'aide .[#toc-helpers-functions]
==========================================

Nette Tester comprend plusieurs classes et fonctions qui peuvent vous faciliter les tests, par exemple, des aides pour tester le contenu d'un document HTML, pour tester les fonctions de travail avec les fichiers, etc.

Vous pouvez trouver une description de ces fonctions sur la page [Helpers].


Annotation et saut de tests .[#toc-annotation-and-skipping-tests]
=================================================================

L'exécution des tests peut être affectée par des annotations dans le commentaire phpDoc au début du fichier. Par exemple, cela pourrait ressembler à ceci :

```php .{file:tests/RectangleTest.php}
/**
 * @phpExtension pdo, pdo_pgsql
 * @phpVersion >= 7.2
 */
```

Les annotations indiquent que le test ne doit être exécuté qu'avec la version 7.2 ou supérieure de PHP et si les extensions PHP pdo et pdo_pgsql sont présentes. Ces annotations sont contrôlées par l'[exécuteur de test en ligne de commande |running-tests], qui, si les conditions ne sont pas remplies, saute le test et le marque avec la lettre `s` - sauté. Cependant, elles n'ont aucun effet lorsque le test est exécuté manuellement.

Pour une description des annotations, voir [Test Annotations |Test Annotations].

Le test peut également être ignoré en fonction de sa propre condition avec `Environment::skip()`. Par exemple, nous allons ignorer ce test sous Windows :

```php
if (defined('PHP_WINDOWS_VERSION_BUILD')) {
	Tester\Environment::skip('Requires UNIX.');
}
```


Structure des répertoires .[#toc-directory-structure]
=====================================================

Pour les bibliothèques ou les projets un peu plus importants, nous recommandons de diviser le répertoire de test en sous-répertoires en fonction de l'espace de noms de la classe testée :

```
└── tests/
	├── NamespaceOne/
	│   ├── MyClass.getUsers.phpt
	│   ├── MyClass.setUsers.phpt
	│   └── ...
	│
	├── NamespaceTwo/
	│   ├── MyClass.creating.phpt
	│   ├── MyClass.dropping.phpt
	│   └── ...
	│
	├── bootstrap.php
	└── ...
```

Vous pourrez ainsi exécuter des tests à partir d'un seul sous-répertoire de l'espace de noms :

/--pre .[terminal]
tester tests/NamespaceOne
\--


Cas limites .[#toc-edge-cases]
==============================

Un test qui n'appelle aucune méthode d'assertion est suspect et sera évalué comme erroné :

/--pre .[terminal]
<span style="color: #FFF; background-color: #900">Error: This test forgets to execute an assertion.</span>
\--

Si le test sans appel aux assertions doit vraiment être considéré comme valide, appelez par exemple `Assert::true(true)`.

Il peut également être perfide d'utiliser `exit()` et `die()` pour terminer le test avec un message d'erreur. Par exemple, `exit('Error in connection')` termine le test avec un code de sortie 0, qui signale le succès. Utilisez `Assert::fail('Error in connection')`.
