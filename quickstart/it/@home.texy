Scriviamo la prima applicazione!
********************************

.[perex]
Conosciamo insieme Nette Framework, creando un semplice blog con commenti. Andiamo!

Già dopo i primi due capitoli avremo il nostro blog funzionante e potremo pubblicare i nostri fantastici post, anche se le funzioni saranno per ora piuttosto limitate. Dovresti leggere anche i capitoli successivi, dove programmeremo l'aggiunta di commenti, la modifica degli articoli e infine metteremo in sicurezza il blog.

.[tip]
Questo tutorial presuppone che tu abbia letto la pagina [Installazione |nette:installation] e preparato con successo gli strumenti necessari. Presuppone inoltre che tu comprenda la [programmazione orientata agli oggetti in PHP |nette:introduction-to-object-oriented-programming].

Utilizza PHP 8.1 o versioni successive. L'applicazione completa è disponibile [su GitHub |https://github.com/nette-examples/quickstart/tree/v4.0].


Pagina di benvenuto
===================

Iniziamo creando un nuovo progetto nella directory `nette-blog`:

```shell
composer create-project nette/web-project nette-blog
```

A questo punto, la pagina iniziale del Web Project dovrebbe già funzionare. Proviamolo aprendo il browser al seguente indirizzo URL:

```
http://localhost/nette-blog/www/
```

e vedremo la pagina iniziale di Nette Framework:

[* qs-welcome.webp .{url: http://localhost/nette-blog/www/} *]

L'applicazione funziona e puoi iniziare a fare modifiche.

.[note]
Se si è verificato un problema, [prova questi pochi suggerimenti |nette:troubleshooting#Nette non funziona viene visualizzata una pagina bianca].


Contenuto del Web Project
=========================

Il Web Project ha la seguente struttura:

/--pre
<b>nette-blog/</b>
├── <b>app/</b>              ← directory dell'applicazione
│   ├── <b>Core/</b>         ← classi di base necessarie per il funzionamento
│   ├── <b>Presentation/</b> ← presenter, template & co.
│   │   └── <b>Home/</b>     ← directory del presenter Home
│   └── <b>Bootstrap.php</b> ← classe di avvio Bootstrap
├── <b>assets/</b>           ← raw assets (SCSS, TypeScript, immagini sorgente)
├── <b>bin/</b>              ← script eseguiti dalla riga di comando
├── <b>config/</b>           ← file di configurazione
├── <b>log/</b>              ← log degli errori
├── <b>temp/</b>             ← file temporanei, cache, …
├── <b>vendor/</b>           ← librerie installate da Composer
│   └── <b>autoload.php</b>  ← autoloading di tutti i pacchetti installati
└── <b>www/</b>              ← directory pubblica - l'unica accessibile dal browser
	├── <b>assets/</b>       ← file statici compilati (CSS, JS, immagini, ...)
    └── <b>index.php</b>     ← file iniziale con cui si avvia l'applicazione
\--

La directory `www/` è destinata all'archiviazione di immagini, file JavaScript, stili CSS e altri file accessibili pubblicamente. Solo questa directory è accessibile da Internet, quindi imposta la directory radice della tua applicazione in modo che punti proprio qui (puoi farlo nella configurazione di Apache o nginx, ma facciamolo più tardi, ora non è importante).

La cartella più importante per noi è `app/`. Qui troviamo il file `Bootstrap.php`, che contiene la classe che serve a caricare l'intero framework e a configurare l'applicazione. Qui si attiva l'[autoloading |robot-loader:], si imposta il [debugger |tracy:] e le [route |application:routing].


Pulizia
=======

Il Web Project contiene una pagina iniziale, che cancelleremo prima di iniziare a programmare qualcosa. Quindi, senza timore, sostituiamo il contenuto del file `app/Presentation/Home/default.latte` con "Hello world!".


[* qs-hello.webp .{url:-} *]


Tracy (debugger)
================

Uno strumento estremamente importante per lo sviluppo è lo [strumento di debug Tracy |tracy:]. Prova a provocare un errore nel file `app/Presentation/Home/HomePresenter.php` (ad esempio rimuovendo una parentesi graffa nella definizione della classe HomePresenter) e guarda cosa succede. Apparirà una pagina di notifica che descrive l'errore in modo comprensibile.

[* qs-tracy.avif .{url:-}(schermata del debugger) *]

Tracy ci aiuterà enormemente quando cercheremo errori nell'applicazione. Nota anche la Tracy Bar fluttuante nell'angolo in basso a destra dello schermo, che contiene informazioni sull'esecuzione dell'applicazione.

[* qs-tracybar.webp .{url:-} *]

In modalità produzione, Tracy è ovviamente disattivata e non mostra alcuna informazione sensibile. Tutti gli errori in questo caso vengono salvati nella cartella `log/`. Proviamolo. Nel file `app/Bootstrap.php`, decommentiamo la riga seguente e cambiamo il parametro della chiamata a `false`, in modo che il codice appaia così:

```php .{file:app/Bootstrap.php}
...
$this->configurator->setDebugMode(false);
...
```

Dopo aver aggiornato la pagina, non vedremo più Tracy. Al suo posto verrà visualizzato un messaggio user-friendly:

[* qs-fatal.webp .{url:-}(schermata di errore) *]

Ora diamo un'occhiata alla directory `log/`. Qui (nel file `exception.log`) troveremo l'errore registrato e anche la già nota pagina con il messaggio di errore (salvata come file HTML con un nome che inizia con `exception-`).

Commentiamo di nuovo la riga `// $configurator->setDebugMode(false);`. Tracy abilita automaticamente la modalità sviluppatore su localhost e la disabilita ovunque altrove.

Possiamo correggere l'errore che abbiamo creato e continuare a scrivere l'applicazione.


Invia un ringraziamento
=======================

Ti mostreremo un trucco che farà piacere agli autori open source. In modo semplice, dai una stella su GitHub alle librerie che il tuo progetto utilizza. Basta eseguire:

```shell
composer thanks
```

Provalo!

{{priority: -1}}
{{sitename: Nette Quickstart}}
