Praca z callbackami
*******************

.[perex]
[api:Nette\Utils\Callback] to statyczna klasa z funkcjami do pracy z [callbackami PHP |https://www.php.net/manual/en/language.types.callable.php].


Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają utworzony alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Sprawdza, czy zmienna `$callable` jest prawidłowym callbackiem. W przeciwnym razie rzuca `Nette\InvalidArgumentException`. Jeśli `$syntax` jest true, funkcja tylko weryfikuje, czy `$callable` ma strukturę callbacku, ale nie sprawdza, czy dana klasa lub metoda faktycznie istnieje. Zwraca `$callable`.

```php
Callback::check('trim'); // nie rzuca wyjątku
Callback::check(['NonExistentClass', 'method']); // rzuca Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // nie rzuca wyjątku
Callback::check(function () {}); // nie rzuca wyjątku
Callback::check(null); // rzuca Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Konwertuje callback PHP do formy tekstowej. Klasa lub metoda nie musi istnieć.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Zwraca refleksję dla metody lub funkcji w callbacku PHP.

```php
$ref = Callback::toReflection('trim');
// $ref jest ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref jest ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Sprawdza, czy callback PHP jest funkcją lub metodą statyczną.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Odwrotnie rozwija Closure utworzone za pomocą `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
