Sessions
********
<div class=perex>


HTTP est un protocole sans état, mais presque toutes les applications ont besoin de conserver un état entre les requêtes, par exemple le contenu d'un panier d'achat. C'est à cela que sert une session. Voyons maintenant

- comment utiliser les sessions
- comment éviter les conflits de noms
- comment définir l'expiration

</div>

Lors de l'utilisation de sessions, chaque utilisateur reçoit un identifiant unique appelé ID de session, qui est transmis dans un cookie. Cet identifiant sert de clé pour les données de session. Contrairement aux cookies, qui sont stockés du côté du navigateur, les données de session sont stockées du côté du serveur.

On configure la session dans la [configuration |configuration#session], le choix du temps d'expiration est important.

La session est gérée par l'objet [api:Nette\Http\Session], que vous obtenez en le passant en utilisant l'[injection de dépendances |dependency-injection:passing-dependencies]. Dans les présentateurs, il suffit d'appeler `$session = $this->getSession()`.

→ [Installation et configuration requise |@home#Installation]


Démarrage de la session .[#toc-starting-session]
================================================

Par défaut, Nette démarre automatiquement une session au moment où nous commençons à lire ou à écrire des données dans celle-ci. Pour démarrer manuellement une session, utilisez `$session->start()`.

PHP envoie des en-têtes HTTP affectant la mise en cache lors du démarrage de la session, voir [php:session_cache_limiter], et éventuellement un cookie avec l'ID de la session. Par conséquent, il est toujours nécessaire de démarrer la session avant d'envoyer des données au navigateur, sinon une exception sera levée. Donc, si vous savez qu'une session sera utilisée pendant le rendu de la page, lancez-la manuellement avant, par exemple dans le présentateur.

En mode développeur, Tracy démarre la session car il l'utilise pour afficher les barres de redirection et de demandes AJAX dans la barre Tracy.


Section .[#toc-section]
=======================

En PHP pur, le stockage des données de session est implémenté comme un tableau accessible via une variable globale `$_SESSION`. Le problème est que les applications sont normalement constituées d'un certain nombre de parties indépendantes, et si toutes n'ont qu'un seul et même tableau disponible, tôt ou tard, une collision de noms se produira.

Nette Framework résout le problème en divisant l'espace entier en sections (objets [api:Nette\Http\SessionSection]). Chaque unité utilise alors sa propre section avec un nom unique et aucune collision ne peut se produire.

Nous obtenons la section à partir du gestionnaire de session :

```php
$section = $session->getSection('unique name');
```

Dans le présentateur il suffit d'appeler `getSession()` avec le paramètre :

```php
// $this est le présentateur
$section = $this->getSession('unique name');
```

L'existence de la section peut être vérifiée par la méthode `$session->hasSection('unique name')`.

La section elle-même est très facile à utiliser avec les méthodes `set()`, `get()` et `remove()`:

```php
// écriture de variables
$section->set('userName', 'franta');

// lecture d'une variable, renvoie null si elle n'existe pas
echo $section->get('userName');

// suppression d'une variable
$section->remove('userName');
```

Il est possible d'utiliser le cycle `foreach` pour obtenir toutes les variables de la section :

```php
foreach ($section as $key => $val) {
	echo "$key = $val";
}
```


Comment définir l'expiration .[#toc-how-to-set-expiration]
----------------------------------------------------------

L'expiration peut être définie pour des sections individuelles ou même des variables individuelles. Nous pouvons laisser la connexion de l'utilisateur expirer au bout de 20 minutes, tout en conservant en mémoire le contenu d'un panier d'achat.

```php
// la section expirera après 20 minutes
$section->setExpiration('20 minutes');
```

Le troisième paramètre de la méthode `set()` est utilisé pour définir l'expiration des variables individuelles :

```php
// la variable 'flash' expire après 30 secondes
$section->set('flash', $message, '30 seconds');
```

.[note]
N'oubliez pas que le temps d'expiration de l'ensemble de la session (voir la [configuration de la session |configuration#session]) doit être égal ou supérieur au temps défini pour les sections ou les variables individuelles.

L'annulation de l'expiration précédemment définie peut être obtenue par la méthode `removeExpiration()`. La suppression immédiate de la section entière sera assurée par la méthode `remove()`.


Événements $onStart, $onBeforeWrite .[#toc-events-onstart-onbeforewrite]
------------------------------------------------------------------------

L'objet `Nette\Http\Session` possède les [événements |nette:glossary#Events] `$onStart` et `$onBeforeWrite`, ce qui vous permet d'ajouter des rappels qui sont appelés après le démarrage de la session ou avant qu'elle ne soit écrite sur le disque puis terminée.

```php
$session->onBeforeWrite[] = function () {
	// écrit les données dans la session
	$this->section->set('basket', $this->basket);
};
```


Gestion des sessions .[#toc-session-management]
===============================================

Aperçu des méthodes de la classe `Nette\Http\Session` pour la gestion des sessions :
<div class=wiki-methods-brief>


start(): void .[method]
-----------------------
Démarre une session.


isStarted(): bool .[method]
---------------------------
La session est-elle lancée ?


close(): void .[method]
-----------------------
Termine la session. La session se termine automatiquement à la fin du script.


destroy(): void .[method]
-------------------------
Termine et supprime la session.


exists(): bool .[method]
------------------------
La requête HTTP contient-elle un cookie avec un ID de session ?


regenerateId(): void .[method]
------------------------------
Génère un nouvel ID de session aléatoire. Les données restent inchangées.


getId(): string .[method]
-------------------------
Renvoie l'ID de la session.

</div>


Configuration .[#toc-configuration]
-----------------------------------

Nous configurons la session dans la [configuration |configuration#session]. Si vous écrivez une application qui n'utilise pas de conteneur DI, utilisez ces méthodes pour la configurer. Elles doivent être appelées avant le démarrage de la session.
<div class=wiki-methods-brief>


setName(string $name): static .[method]
---------------------------------------
Définit le nom du cookie qui est utilisé pour transmettre l'ID de session. Le nom par défaut est `PHPSESSID`. Ceci est utile si vous exécutez plusieurs applications différentes sur le même site.


getName(): string .[method]
---------------------------
Renvoie le nom du cookie de session.


setOptions(array $options): static .[method]
--------------------------------------------
Configure la session. Il est possible de définir toutes les [directives de session |https://www.php.net/manual/en/session.configuration.php] PHP (en format camelCase, par exemple écrire `savePath` au lieu de `session.save_path`) et aussi [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters].


setExpiration(?string $time): static .[method]
----------------------------------------------
Définit le temps d'inactivité après lequel la session expire.


setCookieParameters(string $path, string $domain=null, bool $secure=null, string $samesite=null): static .[method]
------------------------------------------------------------------------------------------------------------------
Définit les paramètres des cookies. Vous pouvez modifier les valeurs par défaut des paramètres dans [configuration |configuration#Session cookie].


setSavePath(string $path): static .[method]
-------------------------------------------
Définit le répertoire dans lequel les fichiers de session sont stockés.


setHandler(\SessionHandlerInterface $handler): static .[method]
---------------------------------------------------------------
Définit le gestionnaire personnalisé, voir la [documentation PHP |https://www.php.net/manual/en/class.sessionhandlerinterface.php].

</div>


Sécurité d'abord .[#toc-safety-first]
=====================================

Le serveur suppose qu'il communique avec le même utilisateur tant que les demandes contiennent le même identifiant de session. La tâche des mécanismes de sécurité est de garantir que ce comportement fonctionne réellement et qu'il n'existe aucune possibilité de substituer ou de voler un identifiant.

C'est pourquoi Nette Framework configure correctement les directives PHP pour transférer l'identifiant de session uniquement dans les cookies, pour éviter l'accès depuis JavaScript et pour ignorer les identifiants dans l'URL. De plus, dans les moments critiques, comme la connexion de l'utilisateur, il génère un nouvel identifiant de session.

La fonction ini_set est utilisée pour configurer PHP, mais malheureusement, son utilisation est interdite chez certains hébergeurs. Si c'est votre cas, essayez de demander à votre hébergeur d'autoriser cette fonction pour vous, ou au moins de configurer son serveur correctement. .[note]
