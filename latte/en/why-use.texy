Why Use Templates?
******************


Why should I use a templating system in PHP?
--------------------------------------------

First, let's briefly recall the history of PHP, full of interesting twists. One of the first programming languages used for templating HTML was C. However, its use for this purpose proved unsuitable. Rasmus Lerdorf created PHP to facilitate dynamic HTML generation with C on the backend. PHP was initially designed as a templating language, but over time it gained more features and became a full-fledged programming language.

Nevertheless, it still functions as a templating language. PHP files can be used as HTML pages, where you can output a variable using `<?= $foo ?>`.

Early in PHP's history, the Smarty templating system was introduced to strictly separate appearance (HTML/CSS) from application logic. Its capabilities were deliberately limited compared to PHP, so a developer couldn't, for example, query a database from a template. However, these systems introduced additional dependency, increased project complexity, and required learning a new Smarty language. Their benefits were controversial, and plain PHP continued to be used for templates.

Over time, template systems have become more useful. An increasing number of programmers and companies have realized the importance of security. They have recognized the existence of [vulnerabilities such as XSS|safety-first]. The correct way to display a variable is not `<?= $foo ?>` but `<?= htmlspecialchars($foo) ?>`, and neglecting to escape, i.e., using the `htmlspecialchars()` function, can cause a serious security breach. Template systems introduced auto-escaping, so it was enough to write just `{$foo}`, and the variable would be displayed with escaping included.

Templating systems brought support for inheritance, sandboxing, and other useful features, making template writing much simpler than with PHP. At some point, the benefits of templating systems significantly outweighed concerns about introducing new dependency.


Why should I use the Latte templating system?
---------------------------------------------

The main reasons are security and syntax.

All templating systems, like Twig, Blade, or Smarty, have introduced XSS protection in the form of automatic escaping throughout their existence. However, Latte went further, realizing that for automatic escaping to be truly functional, the system needed to understand HTML. It had to recognize not just a string of characters, but also tags, attributes, etc. This is because different escaping methods are required within HTML text, inside HTML tags, and within JavaScript, etc. Latte learned to understand HTML and escape in each of these contexts [appropriately|safety-first#Context-Aware Escaping]. It thus became the first and so far the only PHP templating system with context-sensitive escaping.

Latte represents a genuinely secure templating system, while other systems tend to create a false sense of security.

Another significant advantage of Latte is the use of PHP syntax, so the programmer/coder doesn't need to learn a new language but can utilize what they already know well.


What are the main differences between templating systems like Latte, Twig, and Blade?
-------------------------------------------------------------------------------------

The differences between templating systems like Latte, Twig, and Blade mainly lie in their syntax, security, and integration with frameworks:

- Latte: uses PHP language syntax, making it easier to learn and use. It provides top-notch protection against XSS attacks.
- Twig: uses Python-like syntax, which is quite different from PHP. It escapes without context distinction. It is well integrated with the Symfony framework.
- Blade: uses a mix of PHP and custom syntax. It escapes without context distinction. It is tightly integrated with Laravel features and ecosystem.


Is it worth it for companies to use a templating system?
--------------------------------------------------------

Firstly, the costs associated with training, usage, and overall benefits vary significantly depending on the system. The Latte templating system, thanks to its use of PHP syntax, greatly simplifies learning for programmers already familiar with this language. It usually takes a few hours for a programmer to become sufficiently acquainted with Latte, reducing training costs and accelerating the adoption of technology and, most importantly, efficiency in daily use.

Additionally, Latte provides a high level of protection against XSS vulnerability thanks to its unique context-aware escaping technology. This protection is crucial for ensuring web application security and minimizing the risk of attacks that could endanger users or company data. Web application security is also important for maintaining a company's good reputation. Security issues can lead to loss of trust from customers and damage the company's reputation in the market.

Using Latte also reduces overall development and maintenance costs by making both easier. Therefore, using a templating system is definitely worth it.


How does Latte affect web application performance and server resources?
-----------------------------------------------------------------------

Although Latte templates are processed quickly, this aspect does not really matter. The reason is that parsing files occurs only once during the first display. They are then compiled into PHP code, stored on disk, and run on every subsequent request without requiring recompilation.

This is how it works in a production environment. During development, Latte templates are recompiled every time their content changes, so the developer always sees the current version.
