Odsev PHP
*********

.[perex]
[api:Nette\Utils\Reflection] je statični razred z uporabnimi funkcijami za refleksijo PHP. Njegov namen je odpraviti pomanjkljivosti v izvirnih razredih in poenotiti obnašanje v različnih različicah PHP.

Namestitev:

```shell
composer require nette/utils
```

Vsi primeri predpostavljajo, da je definiran naslednji vzdevek razreda:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Ugotovi, ali ima refleksija dostop do komentarjev PHPdoc. Komentarji morda niso na voljo zaradi predpomnilnika opkod, glejte na primer direktivo [opcache.save-comments |https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Razširi `$name` razreda na polno ime v kontekstu `$context`, tj. v kontekstu njegovega imenskega prostora in opredeljenih vzdevkov. Tako vrne, kako bi razčlenjevalnik PHP razumel `$name`, če bi bil zapisan v telesu `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Vrne odsev metode, ki vsebuje deklaracijo `$method`. Običajno je vsaka metoda samostojna deklaracija, telo metode pa je lahko tudi v lastnosti in pod drugim imenom.

Ker PHP ne zagotavlja dovolj informacij za določitev dejanske deklaracije, Nette uporabi lastno hevristiko, ki bi morala biti **zanesljiva**.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Vrne odsev razreda ali lastnosti, ki vsebuje deklaracijo lastnosti `$prop`. Lastnost je lahko deklarirana tudi v lastnosti.

Ker PHP ne zagotavlja dovolj informacij za določitev dejanske deklaracije, Nette uporabi lastno hevristiko, ki pa **ni** zanesljiva.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Določi, ali je `$type` vgrajena vrsta PHP. V nasprotnem primeru je ime razreda.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Uporabite [Nette\Utils\Validator::isBuiltinType(). |validators#isBuiltinType]


toString($reflection): string .[method]
---------------------------------------

Pretvori odsev v človeku berljiv niz.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
