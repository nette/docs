Práce s callbacky
*****************

.[perex]
[api:Nette\Utils\Callback] je statická třída s funkcemi pro práci s [PHP callbacky |https://www.php.net/manual/en/language.types.callable.php].


Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Zkontroluje, zda proměnná `$callable` je platný callback. Jinak vyhodí `Nette\InvalidArgumentException`. Pokud `$syntax` je true, funkce jen ověří, že `$callable` má strukturu callbacku, ale neověřuje, zda daná třída nebo metoda skutečně existuje. Vrací `$callable`.

```php
Callback::check('trim'); // nevyhodí výjimku
Callback::check(['NonExistentClass', 'method']); // vyhodí Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // nevyhodí výjimku
Callback::check(function () {}); // nevyhodí výjimku
Callback::check(null); // vyhodí Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Převede PHP callback do textové formy. Třída nebo metoda nemusí existovat.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Vrací reflexi pro metodu nebo funkci v PHP callbacku.

```php
$ref = Callback::toReflection('trim');
// $ref je ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref je ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Zjišťuje, zda je PHP callback funkcí nebo statickou metodou.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Zpětně rozbalí Closure vytvořenou pomocí `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
