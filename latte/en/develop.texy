Practices for Developers
************************


How to Render a Template
========================

Just run this code:

```php
$latte = new Latte\Engine;

$latte->setTempDirectory('/path/to/tempdir');

$params = [
	'items' => ['one', 'two', 'three'],
];

// render to output
$latte->render('template.latte', $params);
// or render to string
$html = $latte->renderToString('template.latte', $params);
```

Latte automatically regenerates the cache every time you change the template, which can be turned off in the production environment to save a little performance:

```php
$latte->setAutoRefresh(false);
```


Typesafe Parameters
-------------------

You can also use an object instead of the `$params` array, which has some advantages. You get typesafe notation, [autosuggestion in IDE |type-system]
and way for registration of [filters|#Custom Filters] and [#functions]. The example uses the capabilities of PHP 8:

```php
class MailTemplate
{
	public function __construct(
		public string $lang = 'cs',
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplate(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


Parameter Escaping
------------------

If the parameter contains an HTML string that is no longer to be escaped, you can wrap it in a `Latte\Runtime\Html` object:

```php
$params = [
	'article_body' => new Latte\Runtime\Html($article->html_body),
];
```


Linter: Validating the Template Syntax .{data-version:2.11}{toc: Linter}
========================================================================

You can check for syntax errors in Latte templates using the `latte-lint` console command:

```shell
vendor/bin/latte-lint <path>
```


Template from String
====================

You can load template from strings using `Latte\Loaders\StringLoader`:

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


Exception Handler
=================

You can define your own handler for expected exceptions. Exceptions raised inside [`{try}`|tags#try] and in the [sandbox] are passed to it.

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


Layout Lookup
=============

You can use the API to choose which layout template to use when child template do not contain the `{layout}` tag. This will simplify the writing of templates or allow automatic layout look up.

This is achieved in the following way:

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// it returns the path to the parent template file
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

{{composer: latte/latte}}
