Funzioni Latte
**************

.[perex]
Nei template, oltre alle normali funzioni PHP, possiamo utilizzare anche queste funzioni aggiuntive.

.[table-latte-filters]
| `clamp`      | [limita un valore all'interno di un intervallo specificato |#clamp]
| `divisibleBy`| [controlla se una variabile è divisibile per un numero |#divisibleBy]
| `even`       | [controlla se un dato numero è pari |#even]
| `first`      | [restituisce il primo elemento di un array o carattere di una stringa |#first]
| `group`      | [raggruppa i dati secondo vari criteri |#group]
| `hasBlock`   | [verifica l'esistenza di un blocco |#hasBlock]
| `last`       | [restituisce l'ultimo elemento di un array o carattere di una stringa |#last]
| `odd`        | [controlla se un dato numero è dispari |#odd]
| `slice`      | [estrae una parte di un array o di una stringa |#slice]


Utilizzo
========

Le funzioni vengono utilizzate allo stesso modo delle normali funzioni PHP e possono essere utilizzate in tutte le espressioni:

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

[Funzioni personalizzate|custom-functions] possono essere registrate in questo modo:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

Nel template, viene quindi chiamata così:

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Funzioni
========


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------
Limita un valore all'interno dell'intervallo inclusivo specificato min e max.

```latte
{=clamp($level, 0, 255)}
```

Vedi anche [filtro clamp|filters#clamp].


divisibleBy(int $value, int $by): bool .[method]
------------------------------------------------
Controlla se una variabile è divisibile per un numero.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]
--------------------------------
Controlla se un dato numero è pari.

```latte
{if even($num)} ... {/if}
```


first(string|iterable $value): mixed .[method]
----------------------------------------------
Restituisce il primo elemento di un array o carattere di una stringa:

```latte
{=first([1, 2, 3, 4])}    {* stampa 1 *}
{=first('abcd')}          {* stampa 'a' *}
```

Vedi anche [#last], [filtro first|filters#first].


group(iterable $data, string|int|\Closure $by): array .[method]{data-version:3.0.16}
------------------------------------------------------------------------------------
La funzione raggruppa i dati secondo vari criteri.

In questo esempio, le righe della tabella vengono raggruppate per la colonna `categoryId`. L'output è un array di array, dove la chiave è il valore nella colonna `categoryId`. [Leggi il tutorial dettagliato|cookbook/grouping].

```latte
{foreach group($items, categoryId) as $categoryId => $categoryItems}
    <ul>
        {foreach $categoryItems as $item}
            <li>{$item->name}</li>
        {/foreach}
    </ul>
{/foreach}
```

Vedi anche il filtro [group|filters#group].


hasBlock(string $name): bool .[method]{data-version:3.0.10}
-----------------------------------------------------------
Verifica se esiste un blocco con il nome specificato:

```latte
{if hasBlock(header)} ... {/if}
```

Vedi anche [controllo dell'esistenza dei blocchi|template-inheritance#Kontrola existence bloků].


last(string|array $value): mixed .[method]
------------------------------------------
Restituisce l'ultimo elemento di un array o carattere di una stringa:

```latte
{=last([1, 2, 3, 4])}    {* stampa 4 *}
{=last('abcd')}          {* stampa 'd' *}
```

Vedi anche [#first], [filtro last|filters#last].


odd(int $value): bool .[method]
-------------------------------
Controlla se un dato numero è dispari.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, ?int $length=null, bool $preserveKeys=false): string|array .[method]
-----------------------------------------------------------------------------------------------------------
Estrae una parte di un array o di una stringa.

```latte
{=slice('hello', 1, 2)}           {* stampa 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* stampa ['b', 'c'] *}
```

Il filtro funziona come la funzione PHP `array_slice` per gli array o `mb_substr` per le stringhe con fallback alla funzione `iconv_substr` in modalità UTF‑8.

Se start è positivo, la sequenza inizierà spostata di questo numero dall'inizio dell'array/stringa. Se è negativo, la sequenza inizierà spostata di tanto dalla fine.

Se il parametro length è specificato ed è positivo, la sequenza conterrà tanti elementi. Se a questa funzione viene passato un parametro length negativo, la sequenza conterrà tutti gli elementi dell'array originale, iniziando dalla posizione start e terminando alla posizione minore di length elementi dalla fine dell'array. Se questo parametro non viene specificato, la sequenza conterrà tutti gli elementi dell'array originale, iniziando dalla posizione start.

Per impostazione predefinita, il filtro riordina e reimposta le chiavi intere dell'array. Questo comportamento può essere modificato impostando preserveKeys su true. Le chiavi stringa vengono sempre conservate, indipendentemente da questo parametro.
