Detailed Description of Syntax
******************************


- [#Philosophy]
- [#Paragraphs of Text]
- [#Headings]
- [#Horizontal lines]
- [#Code]
- [#Turning off the Texy]
- [#Quotes]
- [#Links]
- [#Images]
- [#Phrases]
- [#Direct HTML]
- [#Lists]
- [#Modifiers]
- [#Typography]
- [#Long Words Hyphenation]
- [#Tables]


Philosophy
==========

The Texy tool was created to allow inexperienced users to easily edit the content of web pages. Therefore, the syntax is maximally intuitive. The intention is that the text in pure (unformatted) form is clear and its format can be guessed.

Today, Texy also serves well-experienced HTML experts. Allows you to freely combine Texy notation with HTML tags. Thus, experienced users do not have to learn a new meta-language and make full use of their knowledge. Texy only simplifies their work.

The primary logic of the syntax is ** not to use any syntax **. Just write plain text. Inserting advanced information, such as CSS classes or links, does not disrupt the flow of text. And it is written in a way that even non-technical users can easily understand.


Paragraphs of Text
==================

A paragraph is considered to be one or more consecutive lines of text. The paragraphs are separated by a blank line.

/--code texy
First paragraph lorem ipsum dolor sit amet.

Second paragraph, který tvoří jeden řádek.
And second line of paragraph. Texy will join the lines.
\--

/--texysource
First paragraph lorem ipsum dolor sit amet.

Second paragraph, který tvoří jeden řádek.
And second line of paragraph. Texy will join the lines.
\--

*In the edit box (textarea) is not a division into two lines of paragraph evident. That's why Texy considers them one paragraph.*

To wrap a line in a paragraph, insert one space to the left:

/--code texy
April is the cruellest month, breeding
 Lilacs out of the dead land, mixing
 Memory and desire, stirring
 Dull roots with spring rain.
\--

/--texysource
April is the cruellest month, breeding
 Lilacs out of the dead land, mixing
 Memory and desire, stirring
 Dull roots with spring rain.
\--


Headings
========

Headings can be written in two ways: **underlined** or **surrounded**.

Each headline has its own degree. In the case of **underlined**, the importance of the title is decided by the underline character. From the highest to the lowest, these are: `#` `*` `=` `-`

/--code texy
Head Title
**********


Subtitle
========
\--

/--texysource
Head Title
**********


Subtitle
========
\--

For **surrounded** titles, the level determines the number of preceding characters. It can be `#` nebo `=`

The following applies: the more characters, the more important the title (minimum two characters, maximum seven).

/--code texy
=== Head title ===

## Subtitle
\--

As you can see in the case of the subtitle, the characters on the right can be omitted.

*Subtitle levels are always relative only! So Texy finds the highest caption used and relatively differentiates the other captions.*


Horizontal Lines
================

Texy knows these notations:

/--code texy
------------

********
\--

/--texysource
-------------

********
\--


Code
====

Used to insert source code. Syntax highlighting can also be activated using an add-on module.

/--code texy
  /---code php
    function reImage($matches) {
      $content = $matches[1];
      $align = $matches[5];
      $href = $matches[6];
    }
  \---
\--

/--texysource
  /---code php
    function reImage($matches) {
      $content = $matches[1];
      $align = $matches[5];
      $href = $matches[6];
    }
  \---
\--

*Note the words `php` to indicate the language.*


Turning Off the Texy
====================

The keyword `html` or` text` affects whether the content will be understood as HTML (including tags) or plain text.

/--code texy
  /---html
    <em>example</em>: **this is not strong**
  \---


  /---text
    <em>example</em>: **this is not strong**
  \---
\--

To turn off Texy inline, it is possible to use a double apostrophe `''` and wrap a part of the text that is not to be Texy processed.

/--code texy
   Example: ''**this is not strong**''
\--


Division into Blocks (Div)
==========================

Use this ability to create more complex documents.

/--code texy
  /---div .[header]

    content of div

  \---
\--

/--texysource
  /---div .[header]

    content of div

  \---
\--


It is also possible to nest blocks:

/--code texy
  /---div .[header]

    ## This is a header.

    /---div
      inner div
    \---

    Texy is sexy!

  \---
\--

/--texysource
  /---div .[header]

    ## This is a header.

    /---div
      inner div
    \---

    Texy is sexy!

  \---
\--


Quotes
======

Quotes are indented, similarly to emails, by a character `>`

/--code texy
> This is a blockquote with two paragraphs.
>
> 640 K should be enough for everyone
\--

/--texysource
> This is a blockquote with two paragraphs.
>
> 640 K should be enough for everyone
\--


Links
=====

Links are written by enclosing the referencing text in quotation marks, followed by a colon and a URL. Texy tries to intelligently guess the end of the URL. You can also help it by enclosing the URL in square brackets. The `http://` section is optional.

It is also possible to insert emails as a link, Texy transforms them into a form that should confuse spambots.

/--code texy
Look at homepage:[https://texy.info].

Do you know "La Trine":https://www.latrine.cz?

"Write me":me@example.com
\--

/--texysource
Look at homepage:[https://texy.info].

Do you know "La Trine":https://www.latrine.cz?

"Write me":me@example.com
\--


References
----------

In order not to "pollute" the text flow by inserting URLs, it is possible to list all addresses in one place and then just link to them. This is called a reference. In addition to the address, it is possible to add the text of the link and the [modifier | #modifier].

/--code texy
 [homepage]: https://texy.info/ Texy .(homepage)
 [nette]: http://nette.org

This is [homepage]

Look at "this site":[nette]
\--


Images
======

They are written between square brackets with an asterisk:

/--code texy
[* image.gif *]
\--

/--texysource line
[* image.gif *]
\--

In text paragraphs, you often need to choose whether the image should be left-aligned or right-aligned. To do this, use the `<` and `>` character used before the right parenthesis:

/--code texy
[* image.gif <] Left-aligned image

[* image.gif >] Right-aligned image
\--

/--texysource
[* image.gif <] Left-aligned image

[* image.gif >] Right-aligned image
\--

*Note: In the example above, Texy used a straight CSS style for alignment. It is possible to configure the system to assign a selected class to images instead.*

*Note: it is possible to set a default directory for all (relative) image URLs. In the examples given, it was `images/`, so in Texy code the directory is not listed, while in the generated HTML it is.*

*Note: if no alternative text is specified by default (as shown below), Texy will use the default. Here's a simple `image`*


Dimensions
----------

For local images, Texy detects the dimensions automatically. If you want to specify them manually, enter them as follows:

/--code texy
[* image.gif 10x20 *]
\--

/--texysource line
[* image.gif 10x20 *]
\--


Modifiers
---------

You can learn more about them in [another chapter | #modifier], but it doesn't hurt to show how they're written on images. Let's try a modifier to specify alternate text and class:

/--code texy
[* image.gif .(alt text)[photo] *]
\--

/--texysource line
[* image.gif .(alt text)[photo] *]
\--


Reference
---------

For the same reasons as for links, images can also be written using references. You need to define URLs (or multiple URLs separated by `|`) and possibly modifiers.

/--code texy
What a beautiful girl [* picture*] !

[* picture*]: image.gif .(my girl)
\--

/--texysource
What a beautiful girl [* picture*] !

[* picture*]: image.gif .(my girl)
\--


Figure with Caption
-------------------

Enter three asterisks after the image, followed by a caption:


/--code texy
[* image.gif *] *** This is the *caption* below the image
\--

/--texysource
[* image.gif *] *** This is the *caption* below the image
\--


Phrases
=======

Probably the most used syntax in Texy. In almost all cases, a double character is used.

/--code texy
//italics//

*too italics*

**bold**

***heavy bold***

superscript^2 vs. subscript_2
\--

/--texysource
//italics//

*too italics*

**bold**

***heavy bold***

superscript^2 vs. subscript_2
\--

/--div .[output]
//italics//

*too italics*

**bold**

***heavy bold***

superscript^2 vs. subscript_2
\--

A special case of a phrase is the so-called code. It differs from the other phrases in that its content will no longer be formatted and will be displayed literally:

/--code texy
This is `<br />` and entity `&ndash`
\--

/--texysource
This is `<br />` and entity `&ndash`
\--

*Note: whether the `<code>` element is used or another (or none) can be changed simply by configuring Texy.*


With Modifier
-------------

It is possible to insert it into each phrase, always just before the closing character:

/--code texy
**strong and green .{color:green}** like Hulk
\--

/--texysource
**strong and green .{color:green}** like Hulk
\--

/--div .[output]
**strong and green .{color:green}** like Hulk
\--


Direct HTML
===========

Texy is not a substitute for HTML. It also doesn't look for alternative ways to write HTML. The goal is to simplify content writing. If you find it easier to write a structure directly in HTML, you can do so. HTML tags are fully supported.

/--code texy
This <strong class=info>is strong</strong> text.
<br> This is not.
\--

/--texysource
This <strong class=info>is strong</strong> text.
<br> This is not.
\--

*Note: note that Texy adjusts the notation of attributes and tags to be valid (even for XHTML output). It also pays attention to the **well-formed notation**!*

*Note: Deciding which tags and which attributes can be used in the text is fully user configurable. This demonstrates one example from the distribution.*


Lists
=====

Bulleted lists are written using `*`, `+` or `-`. It must be written at the very beginning of the line and followed by a space.

/--code texy
-   Red
-   Green
-   Blue
\--

/--texysource
-   Red
-   Green
-   Blue
\--

/--div .[output]
-   Red
-   Green
-   Blue
\--


Numbered Lists
--------------

Texy knows these five ways of writing (the first two are equivalent):

/--code texy
1)  Learn
2)  Learn
3)  Learn

a)  Long
b)  Wide
c)  Shortsighted

A)  DOS
B)  Windows
C)  Linux

I)  Yesterday
II)  Today
III)  Tomorrow
\--

/--texysource
1)  Learn
2)  Learn
3)  Learn

a)  Long
b)  Wide
c)  Shortsighted

A)  DOS
B)  Windows
C)  Linux

I)  Yesterday
II)  Today
III)  Tomorrow
\--

/--div .[output]
1)  Learn
2)  Learn
3)  Learn

a)  Long
b)  Wide
c)  Shortsighted

A)  DOS
B)  Windows
C)  Linux

I)  Yesterday
II)  Today
III)  Tomorrow
\--


Nested Lists
------------

/--code texy
a)  Bird
  I)  Bird
    -   Red
    -   Green
    -   Blue
  II)  McHale
  III)  Parish
b)  McHale
c)  Parish
      1)  Bird
      2)  McHale
      3)  Parish
\--

/--texysource
a)  Bird
  I)  Bird
    -   Red
    -   Green
    -   Blue
  II)  McHale
  III)  Parish
b)  McHale
c)  Parish
      1)  Bird
      2)  McHale
      3)  Parish
\--


Definition List
---------------

/--code texy
Wild Bill concert:
     - date: 9 December 2004
     - place: Vodová Hall, Brno
     - price: 260 CZK
\--

/--texysource
Wild Bill concert:
     - date: 9 December 2004
     - place: Vodová Hall, Brno
     - price: 260 CZK
\--

/--div .[output]
Wild Bill concert:
     - date: 9 December 2004
     - place: Vodová Hall, Brno
     - price: 260 CZK
\--


With Modifiers
--------------

The modifier that affects the entire list is listed in the line before it. Others (classic) at the end of the line:

/--code texy
.{color:red}
triangl:   .{color:blue}
    - triangle      .{color:green}
    - untuned percussion musical instrument
    - tringulation tower
\--

/--div .[output]
.{color:red}
triangl:   .{color:blue}
    - triangle      .{color:green}
    - untuned percussion musical instrument
    - tringulation tower
\--


Modifiers .[#modifier]
======================

Texy's most powerful weapon. The following types of modifiers can be used:

- (caption) adds a title to the object (or alternative text to images)
- `[class1 class2 #id]` specifying the class and / or ID of the element
- {class: blue} direct style notation
- {target: _blank} or direct entry of HTML attributes
- horizontal alignment:
   - left <
   - right >
   - centered <>
   - to block =

- vertical alignment: (only for tables)
   - up ^
   - center -
   - down _

Modifiers are written continuously (without spaces) and **must be preceded by a dot**. So for example `.(description)[left]` sets the title attribute to `description` and the class to `left`.

**Modifiers are always written rightmost**.

Example of applying a modifier to a paragraph of text:

/--code texy
Centered with a modifier  .<>

Colored by a modifier .{color:blue; lang: cs}
\--

/--texysource
Centered with a modifier  .<>

Colored by a modifier .{color:blue; lang: cs}
\--


Typography .[#typography]
=========================

This includes all modifications and replacements of the text that modify its appearance in accordance with typographic rules and the like:

/--code texy
- "English" 'typographic' quotation marks
- dash vs. hyphen: 10-15 vs. česko-slovenský
- dash: one -- two
- typographic cross for dimensions 10 x 20
- arrows <- and -> and <-> ;
- three dots...
- preservation of HTML entities &amp;
- replacing (TM) or (R) with the relevant entities (C)
\--

/--div .[output]
- "English" 'typographic' quotation marks
- dash vs. hyphen: 10-15 vs. česko-slovenský
- dash: one -- two
- typographic cross for dimensions 10 x 20
- arrows <- and -> and <-> ;
- three dots...
- preservation of HTML entities &amp;
- replacing (TM) or (R) with the relevant entities (C)
\--

Spaces handling:

/--code texy
- inserting unbreakable spaces for one-letter prepositions (a car)
- unbreakable spaces for telephone numbers +420 776 552 046
\--

/--code html
inserting unbreakable spaces for one-letter prepositions (a&nbsp;car)

unbreakable spaces for telephone numbers +420&nbsp;776&nbsp;552&nbsp;046
\--

*Note: Replacements are usually governed by other rules that determine when
symbol replace and when not. For example, the arrow `->` cannot be at the end of a line, etc. So don't be surprised if in some cases Texy doesn't make the substitution.*


Abbreviations, Acronyms
-----------------------

Double parenthetical notation is used:

/--code texy
one word: NATO((North Atlantic Treaty Organisation))

multiword: "et al."((and more))
\--

/--texysource
one word: NATO((North Atlantic Treaty Organisation))

multiword: "et al."((and more))
\--


Clickable Web Addresses
-----------------------

Automatic conversion of web addresses and emails into a clickable form

/--code texy
more information at www.texy.info and also ...
\--

/--div .[output]
more information at www.texy.info and also ...
\--


Long Words Hyphenation
======================

Very interesting and important function of Texy. Long words can disrupt the appearance of the page, so it's a good idea to tell your browser where to wrap them. Texy searches for these places taking into account national customs, so he divides the word according to syllables:

/--code texy
nejneobhospodařovávatelnějšími
\--

/--code html
nejneobhospoda&shy;řovávatelnější&shy;mi</p
\--

*Note: the word length limit is optional*


Tables .[#table]
================

Example of a simple table, columns are separated by a character `|`

/--code texy
| first col | second col | third col
| Adam      | Eva        | Franta
\--

And the result is:

| first col | second col | third col
| Adam      | Eva        | Franta


The table header can be defined with this notation:

/--code texy
|-----------------------------
| First Name | Last Name | Age
|----------------------------
| Jesus      | Christ    | 33
| Cecilie    | Svobodova | 74
\--

|-----------------------------
| First Name | Last Name | Age
|----------------------------
| Jesus      | Christ    | 33
| Cecilie    | Svobodova | 74

If the header does not form a row (rows), we can define it at the cell level. Just insert an asterisk immediately after the `|` character


/--code texy
|* First Name | Jesus    | Cecilie
|* Last Name  | Christ   | Svobodova
|* Age        | 33       | 74
\--


|* First Name | Jesus    | Cecilie
|* Last Name  | Christ   | Svobodova
|* Age        | 33       | 74


Merging Columns
---------------

Notice the double `||`:

/--code texy
|-----------------------------
| Name                  || Age
|----------------------------
| Jesus      | Christ    | 33
\--

|-----------------------------
| Name                  || Age
|----------------------------
| Jesus      | Christ    | 33


Merging Rows
------------

Notice the `^` character symbolizing the upward direction:


/--code texy
|-----------------------------
| First Name | Last Name | Age
|----------------------------
| Bill                  || 50
|                       ^| 52
| Jim        | Beam      | 70
\--

|-----------------------------
| First Name | Last Name | Age
|----------------------------
| Bill                  || 50
|                       ^| 52
| Jim        | Beam      | 70


Modifiers
---------

The following rules apply:
- a modifier affecting the whole table is inserted immediately before the table
- the modifier affecting the line is inserted at the end of the line
- the modifier affecting the column is inserted at the beginning of the cell (left in the cell)
- and finally the modifier affecting the cell is inserted at the end of the cell (right in the cell)

Take a look at an example.

/--code texy
.(people)
| .{color: green} first col | second col      .>| third col | .{font-style:italic}
| Adam                      | Eva .{color: blue}| Franta    |
\--

There is:
- `.(people)` table modifier
- `.{color: green}` column modifier
- `.{font-style:italic}` line modifier
- `.{color: blue}` a také `.>` cell modifier

So the resulting table looks like this:


.(people)
| .{color: green} first col | second col      .>| third col | .{font-style:italic}
| Adam                      | Eva .{color: blue}| Franta    |
