Wkład w kod
***********

Nette Framework używa Git i [GitHub |https://github.com/nette/nette] jako repozytoriów dla kodu. Najlepszym sposobem na wniesienie wkładu jest wprowadzenie zmian w swojej gałęzi, a następnie wysłanie pull request (PR) na GitHub. Ten dokument podsumowuje główne kroki, jak to zrobić.


Przygotowanie środowiska .[#toc-priprava-prostredi]
===================================================

Po pierwsze, [rozwidlić |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] [Nette z GitHub |https://github.com/nette]. Starannie skonfiguruj [swoje |https://help.github.com/en/github/getting-started-with-github/set-up-git] środowisko Git, skonfiguruj swoją nazwę użytkownika i e-mail, te informacje będą Cię identyfikować w historii zmian kodu.


Edycja kodu .[#toc-editace-kodu]
================================

Zanim zaczniesz programować, utwórz nowy oddział.

```shell
git checkout -b new_branch_name
```

I możesz zacząć edytować kod.


Testowanie zmian .[#toc-testovani-zmen]
=======================================

Zainstaluj Nette Tester. Najprostszym sposobem jest wywołanie `composer install` w katalogu głównym repozytorium. Powinieneś teraz być w stanie uruchomić testy używając `./vendor/bin/tester` w terminalu Unix lub `vendor\bin\tester` w terminalu Windows.

Niektóre testy mogą zakończyć się niepowodzeniem z powodu brakującego php.ini. Dlatego należy wywołać Tester z parametrem -c i podać ścieżkę do php.ini, na przykład `./vendor/bin/tester -c ./tests/php.ini`.

Po tym, jak uruchomienie testowe zadziała, możesz wdrożyć własne zmiany w kodzie. Więcej informacji na temat testowania za pomocą Nette Tester można znaleźć w [jego dokumentacji |tester:].


Standardy kodowania .[#toc-coding-standards]
============================================

Twój kod musi być zgodny ze [standardem kodowania |coding standard] używanym przez Nette Framework. Jest to łatwe do zrobienia, ponieważ istnieje automatyczne narzędzie do sprawdzania i poprawiania twojego kodu. Wymaga PHP 7.1 i może być zainstalowany za pośrednictwem Composera w wybranym globalnym folderze:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Powinieneś teraz być w stanie uruchomić narzędzie w terminalu. Na przykład to polecenie sprawdzi i naprawi kod w folderach `src` i `tests` w bieżącym katalogu:

```shell
/path/to/nette-coding-standard/ecs check src tests --config /path/to/nette-coding-standard/coding-standard-php71.yml --fix
```


Zobowiązanie do zmiany .[#toc-komitovani-zmen]
==============================================

Po edycji kodu, popełniasz go. Możesz stworzyć kilka commitów, po jednym dla każdego logicznego kroku. Każdy commit powinien być znaczący sam w sobie. Powinna ona zawierać również testy.

Sprawdź, czy Twój kod jest zgodny z zasadami:
- Kod nie generuje żadnych błędów
- Nie narusza on żadnych testów.
- Zmiany w kodzie są testowane.
- Nie wprowadzasz niepotrzebnych zmian w białej przestrzeni.

Opis komitywy powinien być zgodny z formatem `Latte: fixed multi-template rendering [Closes #69]`, tj.
- obszar, po którym następuje dwukropek
- cel commitu w czasie przeszłym, jeśli to możliwe, zacznij od "added .(dodana nowa właściwość)", "fixed .(poprawka)", "refactored .(zmiana w kodzie bez zmiany zachowania)", changed, removed
- możliwy link do issue trackera
- jeśli commit łamie wsteczną kompatybilność, dodaj "BC break"
- po temacie może być jedna wolna linia i dokładniejszy opis wraz z linkami do forum.


Wysyłanie żądania wyciągnięcia .[#toc-posilani-pull-requestu]
=============================================================

Jeśli jesteś zadowolony ze zmian, popchnij je do GitHuba.

```shell
git push původu new_branch_name
```

Kod jest już publicznie dostępny, ale trzeba je przesłać do gałęzi master w repozytorium Nette. Zrób [pull request |https://help.github.com/articles/creating-a-pull-request]
Każde żądanie ma swoją nazwę i opis. Proszę podać zwięzły tytuł. Na przykład "Zabezpieczenie sygnałów przed atakiem CSRF".

Opis pull request powinien zawierać inne konkretne informacje:
```
- bug fix? yes/no   <!-- #issue numbers, if any -->
- new feature? yes/no
- BC break? yes/no
- doc PR: nette/docs#???  <!-- highly welcome, see https://nette.org/en/writing -->
```

Proszę zmodyfikować tabelę informacji, aby pasowała do twojego żądania ściągnięcia.
- Proszę wskazać, czy jest to nowa funkcja czy poprawka błędu
- odnieść się do każdego **powiązanego problemu**, który zostanie zamknięty po zatwierdzeniu pull requesta.
- wskaż, czy wniosek wymaga **zmian w dokumentacji**, jeśli tak, podaj linki do odpowiedniego zagadnienia. Nie musisz od razu wprowadzać zmiany w dokumentacji, ale pull request nie zostanie zaakceptowany, jeśli zmiana dokumentacji będzie potrzebna. Zmiana dokumentacji musi być przygotowana dla dokumentacji w języku angielskim, inne wersje językowe są opcjonalne.
- Wskaż, czy zmiana kodu spowoduje **BC break**. Proszę wziąć pod uwagę wszystko, co może być jego przyczyną.

Stół finałowy może wyglądać tak:
```
- bug fix? no
- new feature? yes   issue #123
- BC break? no
```


Przerabianie zmian .[#toc-prepracovani-zmen]
============================================

Częstym zjawiskiem jest otrzymywanie komentarzy z uwagami. Zastosuj się do sugerowanych zmian i włącz je. Możesz dodać proponowane zmiany jako nowe commity i scalić je z poprzednimi commitami. Zobacz sekcję [Interactive rebase |https://help.github.com/en/github/using-git/about-git-rebase] na stronie GitHub. Następnie ponownie prześlij commit do GitHub, a wszystko automatycznie pojawi się w żądaniu pociągnięcia.

{{priority: -1}}
