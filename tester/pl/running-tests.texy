Uruchamianie testów
*******************

.[perex]
Najbardziej widocznym elementem Nette Tester jest narzędzie do uruchamiania testów z wiersza poleceń. Jest niezwykle szybkie i solidne, ponieważ automatycznie uruchamia wszystkie testy jako oddzielne procesy i to równolegle w wielu wątkach. Potrafi również uruchamiać się samo w tzw. trybie watch.

Narzędzie do uruchamiania testów wywołujemy z wiersza poleceń. Jako parametr podajemy katalog z testami. Dla bieżącego katalogu wystarczy podać kropkę:

/--pre .[terminal]
vendor/bin/tester .
\--

Narzędzie do uruchamiania testów przeszuka podany katalog i wszystkie podkatalogi i wyszuka testy, czyli pliki `*.phpt` i `*Test.php`. Jednocześnie czyta i ocenia ich [adnotacje|test-annotations], aby wiedzieć, które z nich i jak uruchamiać.

Następnie uruchomi testy. Podczas wykonywania testów wypisuje na bieżąco wyniki na terminal jako znaki:

- <code style="color: #CCC; background-color: #000">.</code> – test przeszedł
- <code style="color: #CCC; background-color: #000">s</code> – test został pominięty (skipped)
- <code style="color: #FFF; background-color: #900">F</code> – test zawiódł (failed)

Wyjście może wyglądać na przykład tak:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.5.2

Uwaga: Nie użyto pliku php.ini.
PHP 8.3.2 (cli) | php -n | 8 wątków

........s..........................

<span style="color: #FFF; background-color: #090">OK (35 tests, 1 skipped, 1.7 seconds)</span>
\--

Przy ponownym uruchomieniu najpierw wykonuje testy, które przy poprzednim uruchomieniu zawiodły, więc natychmiast dowiesz się, czy udało Ci się naprawić błąd.

Jeśli żaden test nie zawiedzie, kod powrotu Testera wynosi zero. W przeciwnym razie kod powrotu jest niezerowy.

.[warning]
Tester uruchamia procesy PHP bez `php.ini`. Szczegółowiej w części [#Vlastní php.ini].


Parametry wiersza poleceń
=========================

Przegląd wszystkich opcji wiersza poleceń uzyskamy, uruchamiając Testera bez parametrów lub z parametrem `-h`:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.5.2

Usage:
    tester [options] [<test file> | <directory>]...

Options:
    -p <path>                    Określ interpreter PHP do uruchomienia (domyślnie: php).
    -c <path>                    Szukaj pliku php.ini (lub szukaj w katalogu) <path>.
    -C                           Użyj systemowego php.ini.
    -d <key=value>...            Zdefiniuj wpis INI 'key' z wartością 'value'.
    -s                           Pokaż informacje o pominiętych testach.
    --stop-on-fail               Zatrzymaj wykonywanie przy pierwszym niepowodzeniu.
    -j <num>                     Uruchom <num> zadań równolegle (domyślnie: 8).
    -o <console|console-lines|tap|junit|log|none>  (np. -o junit:output.xml)
                                 Określ jeden lub więcej formatów wyjściowych z opcjonalną nazwą pliku.
    -w | --watch <path>          Obserwuj katalog.
    -i | --info                  Pokaż informacje o środowisku testów i zakończ.
    --setup <path>               Skrypt do konfiguracji runnera.
    --temp <path>                Ścieżka do katalogu tymczasowego. Domyślnie przez sys_get_temp_dir().
    --colors [1|0]               Włącz lub wyłącz kolory.
    --coverage <path>            Generuj raport pokrycia kodu do pliku.
    --coverage-src <path>        Ścieżka do kodu źródłowego.
    -h | --help                  Ta pomoc.
\--


-p <path> .[filter]
-------------------
Określa binarkę PHP, która będzie używana do uruchamiania testów. Standardowo jest to `php`.

/--pre .[terminal]
tester -p /home/user/php-7.2.0-beta/php-cgi tests
\--


-c <path> .[filter]
-------------------
Określa, który `php.ini` będzie używany podczas uruchamiania testów. Domyślnie żaden php.ini nie jest używany. Więcej w części [#Vlastní php.ini].


-C .[filter]
------------
Użyje się systemowego `php.ini`. Na UNIXie również wszystkie odpowiednie pliki INI `/etc/php/{sapi}/conf.d/*.ini`. Więcej w części [#Vlastní php.ini].


-d <key=value> .[filter]
------------------------
Ustawia wartość dyrektywy konfiguracyjnej PHP dla testów. Parametr może być użyty wielokrotnie.

/--pre .[terminal]
tester -d max_execution_time=20
\--


-s
---
Wyświetlą się informacje o pominiętych testach.


--stop-on-fail .[filter]
------------------------
Tester zatrzyma testowanie przy pierwszym zawodzącym teście.


-j <num> .[filter]
------------------
Określa, ile równoległych procesów z testami zostanie uruchomionych. Domyślna wartość to 8. Jeśli chcemy, aby wszystkie testy przebiegły seryjnie, użyjemy wartości 1.


-o <console|console-lines|tap|junit|log|none> .[filter]
-------------------------------------------------------
Ustawia format wyjścia. Domyślny jest format dla konsoli. Możesz podać nazwę pliku, do którego zostanie zapisane wyjście (np. `-o junit:output.xml`). Opcję `-o` można powtórzyć wielokrotnie, aby wygenerować więcej formatów naraz.

- `console`: zgodne z domyślnym formatem, ale w tym przypadku nie wyświetli się logo ASCII
- `console-lines`: podobne do console, ale wynik każdego testu jest podany w osobnej linii z dodatkowymi informacjami
- `tap`: [format TAP |https://en.wikipedia.org/wiki/Test_Anything_Protocol] odpowiedni do przetwarzania maszynowego
- `junit`: format XML JUnit, również odpowiedni do przetwarzania maszynowego
- `log`: Wyjścia przebiegu testowania. Wszystkie nieudane, pominięte, a także udane testy
- `none`: nic się nie wypisuje


''-w | --watch <path>'' .[filter]
---------------------------------
Po zakończeniu testowania Tester nie kończy pracy, ale pozostaje uruchomiony i śledzi pliki PHP w podanym katalogu. Przy zmianie uruchomi testy ponownie. Parametr może być użyty wielokrotnie, jeśli chcemy śledzić więcej katalogów.

Przydaje się przy refaktoryzacji biblioteki lub debugowaniu testów.

/--pre .[terminal]
tester --watch src tests
\--


''-i | --info'' .[filter]
-------------------------
Wyświetla informacje o środowisku uruchomieniowym dla testów. Na przykład:

/--pre .[terminal]
tester -p /usr/bin/php7.1 -c tests/php.ini --info

<span style="color: #0F0">Binarka PHP:</span>
/usr/bin/php7.1

<span style="color: #0F0">Wersja PHP:</span>
7.1.7-1+0~20170711133844.5+jessie~1.gbp5284f4 (cli)

<span style="color: #0F0">Silniki pokrycia kodu:</span>
(niedostępne)

<span style="color: #0F0">Wczytane pliki php.ini:</span>
/var/www/dev/demo/tests/php.ini

<span style="color: #0F0">Katalog tymczasowy PHP:</span>
/tmp

<span style="color: #0F0">Wczytane rozszerzenia:</span>
Core, ctype, date, dom, ereg, fileinfo, filter, hash, ...
\--


--setup <path> .[filter]
------------------------
Tester przy starcie wczytuje podany skrypt PHP. W nim dostępna jest zmienna `Tester\Runner\Runner $runner`. Załóżmy plik `tests/runner-setup.php` z zawartością:

```php
$runner->outputHandlers[] = new MyOutputHandler;
```

Testera uruchomimy:

/--pre .[terminal]
tester --setup tests/runner-setup.php tests
\--


--temp <path> .[filter]
-----------------------
Ustawia ścieżkę do katalogu dla tymczasowych plików Testera. Domyślną wartość zwraca `sys_get_temp_dir()`. Jeśli domyślna wartość nie jest poprawna, zostaniesz powiadomiony.

Jeśli nie jesteśmy pewni, jaki katalog jest używany, uruchomimy Testera z parametrem `--info`.


--colors 1|0 .[filter]
----------------------
Domyślnie Tester wykrywa kolorowy terminal i koloruje swoje wyjście. Ta opcja nadpisuje autodetekcję. Globalnie możemy kolorowanie ustawić zmienną środowiskową systemu `NETTE_TESTER_COLORS`.


--coverage <path> .[filter]
---------------------------
Tester wygeneruje raport z przeglądem, ile kodu źródłowego pokrywają testy. Ta opcja wymaga zainstalowanego rozszerzenia PHP [Xdebug |https://xdebug.org/], lub [PCOV |https://github.com/krakjoe/pcov], albo PHP 7 z PHPDBG SAPI, które jest szybsze. Rozszerzenie pliku docelowego określa jego format. Albo HTML, albo Clover XML.

/--pre .[terminal]
tester tests --coverage coverage.html  # raport HTML
tester tests --coverage coverage.xml   # raport Clover XML
\--

Priorytet wyboru mechanizmu jest następujący:
1) PCOV
2) PHPDBG
3) Xdebug

Przy użyciu PHPDBG możemy przy obszernych testach napotkać na niepowodzenie testu z powodu wyczerpania pamięci. Zbieranie informacji o pokrytym kodzie jest pamięciochłonne. W tym przypadku pomoże nam wywołanie `Tester\CodeCoverage\Collector::flush()` wewnątrz testu. Zapisze zebrane dane na dysk i zwolni pamięć. Jeśli zbieranie danych nie przebiega lub jest używany Xdebug, wywołanie nie ma żadnego efektu.

["Przykładowy raport HTML":https://files.nette.org/tester/coverage.html] z pokryciem kodu.


--coverage-src <path> .[filter]
-------------------------------
Użyjemy jednocześnie z opcją `--coverage`. `<path>` to ścieżka do kodów źródłowych, dla których raport jest generowany. Może być użyty wielokrotnie.


Własny php.ini
==============
Tester uruchamia procesy PHP z parametrem `-n`, co oznacza, że żadne `php.ini` nie jest wczytywane. W UNIXie również te z `/etc/php/conf.d/*.ini`. To zapewnia jednakowe środowisko dla przebiegu testów, ale również wyłącza wszystkie rozszerzenia PHP normalnie wczytywane przez systemowe PHP.

Jeśli chcesz zachować wczytywanie systemowych plików php.ini, użyj parametru `-C`.

Jeśli potrzebujesz jakichś rozszerzeń lub specjalnych ustawień INI dla testów, zalecamy utworzenie własnego pliku `php.ini`, który będzie dystrybuowany z testami. Testera następnie uruchamiamy z parametrem `-c`, na przykład `tester -c tests/php.ini tests`, gdzie plik INI może wyglądać tak:

```ini
[PHP]

extension=php_pdo_mysql.dll
extension=php_pdo_pgsql.dll

memory_limit=512M
```

Uruchomienie Testera w UNIXie z systemowym `php.ini`, na przykład `tester -c /etc/php/cli/php.ini` nie wczyta pozostałych INI z `/etc/php/conf.d/*.ini`. To jest właściwość PHP, nie Testera.
