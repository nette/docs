Файловая система
****************

.[perex]
[api:Nette\Utils\FileSystem] — это класс с полезными функциями для работы с файловой системой. Одним из преимуществ по сравнению с нативными функциями PHP является то, что в случае ошибки они выбрасывают исключения.


Если вам нужно искать файлы на диске, используйте [Finder|finder].

Установка:

```shell
composer require nette/utils
```

Следующие примеры предполагают созданный псевдоним (alias):

```php
use Nette\Utils\FileSystem;
```


Манипуляции
===========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Копирует файл или весь каталог. По умолчанию перезаписывает существующие файлы и каталоги. С параметром `$overwrite`, установленным в `false`, вызовет исключение `Nette\InvalidStateException`, если целевой файл или каталог `$target` существует. При ошибке вызывает исключение `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Создает каталог, если он не существует, включая родительские каталоги. При ошибке вызывает исключение `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Удаляет файл или весь каталог, если он существует. Если каталог не пуст, сначала удаляет его содержимое. При ошибке вызывает исключение `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Устанавливает права доступа к файлу на `$fileMode` или к каталогу на `$dirMode`. Рекурсивно проходит и устанавливает права доступа также всему содержимому каталога.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Открывает файл и возвращает ресурс (resource). Параметр `$mode` работает так же, как у нативной функции `fopen()`:https://www.php.net/manual/en/function.fopen.php. В случае ошибки вызывает исключение `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Возвращает содержимое файла `$file`. При ошибке вызывает исключение `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Читает содержимое файла строка за строкой. В отличие от нативной функции `file()`:https://www.php.net/manual/en/function.file.php, не загружает весь файл в память, а читает его постепенно, так что можно читать и файлы больше доступной памяти. `$stripNewLines` указывает, следует ли удалять символы конца строки `\r` и `\n`.
В случае ошибки вызывает исключение `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Переименовывает или перемещает файл или каталог `$origin`. По умолчанию перезаписывает существующие файлы и каталоги. С параметром `$overwrite`, установленным в `false`, вызовет исключение `Nette\InvalidStateException`, если целевой файл или каталог `$target` существует. При ошибке вызывает исключение `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Записывает строку `$content` в файл `$file`. При ошибке вызывает исключение `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Пути
====


isAbsolute(string $path): bool .[method]
----------------------------------------

Определяет, является ли путь `$path` абсолютным.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Соединяет все сегменты пути и нормализует результат.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Нормализует `..` и `.` и разделители каталогов в пути к системным.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Преобразует слеши в `/`, используемые в unix-системах.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Преобразует слеши в символы, специфичные для текущей платформы, т.е. `\` в Windows и `/` в других системах.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Выводит окончательный путь из пути `$path` относительно базового каталога `$basePath`. Абсолютные пути (`/foo`, `C:/foo`) оставляет без изменений (только нормализует слеши), относительные пути присоединяет к базовому пути.

```php
// В Windows слеши в выводе были бы обратными (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Статический vs нестатический доступ
===================================

Чтобы, например, для целей тестирования можно было легко заменить класс другим (mock'ом), используйте его нестатически:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
