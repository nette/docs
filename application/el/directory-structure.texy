Δομή καταλόγου της εφαρμογής
****************************

<div class=perex>

Πώς να σχεδιάσετε μια σαφή και επεκτάσιμη δομή καταλόγων για έργα στο Nette Framework; Θα σας δείξουμε δοκιμασμένες πρακτικές που θα σας βοηθήσουν να οργανώσετε τον κώδικά σας. Θα μάθετε:

- πώς να **χωρίσετε λογικά** την εφαρμογή σε καταλόγους
- πώς να σχεδιάσετε τη δομή ώστε να **επεκτείνεται καλά** με την ανάπτυξη του έργου
- ποιες είναι οι **πιθανές εναλλακτικές** και τα πλεονεκτήματα ή μειονεκτήματά τους

</div>


Είναι σημαντικό να αναφέρουμε ότι το ίδιο το Nette Framework δεν επιμένει σε καμία συγκεκριμένη δομή. Είναι σχεδιασμένο έτσι ώστε να μπορεί εύκολα να προσαρμοστεί σε οποιεσδήποτε ανάγκες και προτιμήσεις.


Βασική δομή έργου .[#toc-basic-project-structure]
=================================================

Παρόλο που το Nette Framework δεν υπαγορεύει καμία σταθερή δομή καταλόγων, υπάρχει μια δοκιμασμένη προεπιλεγμένη διάταξη με τη μορφή του [Web Project|https://github.com/nette/web-project]:

/--pre
<b>web-project/</b>
├── <b>app/</b>              ← κατάλογος με την εφαρμογή
├── <b>assets/</b>           ← αρχεία SCSS, JS, εικόνες..., εναλλακτικά resources/
├── <b>bin/</b>              ← σενάρια για τη γραμμή εντολών
├── <b>config/</b>           ← διαμόρφωση
├── <b>log/</b>              ← καταγεγραμμένα σφάλματα
├── <b>temp/</b>             ← προσωρινά αρχεία, cache
├── <b>tests/</b>            ← δοκιμές
├── <b>vendor/</b>           ← βιβλιοθήκες εγκατεστημένες από τον Composer
└── <b>www/</b>              ← δημόσιος κατάλογος (document-root)
\--

Μπορείτε να τροποποιήσετε αυτή τη δομή ελεύθερα σύμφωνα με τις ανάγκες σας - να μετονομάσετε ή να μετακινήσετε φακέλους. Στη συνέχεια, αρκεί μόνο να ενημερώσετε τις σχετικές διαδρομές προς τους καταλόγους στο αρχείο `Bootstrap.php` και ενδεχομένως στο `composer.json`. Τίποτα περισσότερο δεν χρειάζεται, καμία πολύπλοκη επαναδιαμόρφωση, καμία αλλαγή σταθερών. Το Nette διαθέτει έξυπνη αυτόματη ανίχνευση και αναγνωρίζει αυτόματα τη θέση της εφαρμογής, συμπεριλαμβανομένης της βασικής της διεύθυνσης URL.


Αρχές οργάνωσης κώδικα .[#toc-code-organization-principles]
===========================================================

Όταν εξερευνάτε για πρώτη φορά ένα νέο έργο, θα πρέπει να μπορείτε να προσανατολιστείτε γρήγορα σε αυτό. Φανταστείτε ότι ανοίγετε τον κατάλογο `app/Model/` και βλέπετε αυτή τη δομή:

/--pre
<b>app/Model/</b>
├── <b>Services/</b>
├── <b>Repositories/</b>
└── <b>Entities/</b>
\--

Από αυτό, μπορείτε να συμπεράνετε μόνο ότι το έργο χρησιμοποιεί κάποιες υπηρεσίες, αποθετήρια και οντότητες. Δεν μαθαίνετε τίποτα για τον πραγματικό σκοπό της εφαρμογής.

Ας δούμε μια διαφορετική προσέγγιση - **οργάνωση ανά τομείς**:

/--pre
<b>app/Model/</b>
├── <b>Cart/</b>
├── <b>Payment/</b>
├── <b>Order/</b>
└── <b>Product/</b>
\--

Εδώ είναι διαφορετικά - με την πρώτη ματιά είναι σαφές ότι πρόκειται για ένα e-shop. Τα ίδια τα ονόματα των καταλόγων αποκαλύπτουν τι μπορεί να κάνει η εφαρμογή - λειτουργεί με πληρωμές, παραγγελίες και προϊόντα.

Η πρώτη προσέγγιση (οργάνωση ανά τύπο κλάσης) φέρνει στην πράξη μια σειρά προβλημάτων: ο κώδικας που σχετίζεται λογικά είναι διάσπαρτος σε διαφορετικούς φακέλους και πρέπει να πηδάτε μεταξύ τους. Γι' αυτό θα οργανώσουμε ανά τομείς.


Χώροι ονομάτων .[#toc-namespaces]
---------------------------------

Είναι σύνηθες η δομή καταλόγων να αντιστοιχεί στους χώρους ονομάτων στην εφαρμογή. Αυτό σημαίνει ότι η φυσική θέση των αρχείων αντιστοιχεί στο namespace τους. Για παράδειγμα, μια κλάση που βρίσκεται στο `app/Model/Product/ProductRepository.php` θα πρέπει να έχει το namespace `App\Model\Product`. Αυτή η αρχή βοηθά στον προσανατολισμό στον κώδικα και απλοποιεί την αυτόματη φόρτωση.


Jednotné vs množné číslo v názvech
----------------------------------

Παρατηρήστε ότι για τους κύριους καταλόγους της εφαρμογής χρησιμοποιούμε ενικό αριθμό: `app`, `config`, `log`, `temp`, `www`. Το ίδιο και μέσα στην εφαρμογή: `Model`, `Core`, `Presentation`. Αυτό συμβαίνει επειδή καθένας από αυτούς αντιπροσωπεύει μια ενιαία, ολοκληρωμένη έννοια.

Ομοίως, για παράδειγμα, το `app/Model/Product` αντιπροσωπεύει τα πάντα γύρω από τα προϊόντα. Δεν θα το ονομάσουμε `Products`, επειδή δεν είναι ένας φάκελος γεμάτος προϊόντα (αυτό θα σήμαινε ότι θα υπήρχαν αρχεία `nokia.php`, `samsung.php`). Είναι ένας χώρος ονομάτων που περιέχει κλάσεις για την εργασία με προϊόντα - `ProductRepository.php`, `ProductService.php`.

Ο φάκελος `app/Tasks` είναι στον πληθυντικό αριθμό επειδή περιέχει ένα σύνολο ανεξάρτητων εκτελέσιμων σεναρίων - `CleanupTask.php`, `ImportTask.php`. Καθένα από αυτά είναι μια ξεχωριστή μονάδα.

Για λόγους συνέπειας, συνιστούμε να χρησιμοποιείτε:
- Ενικό αριθμό για χώρους ονομάτων που αντιπροσωπεύουν μια λειτουργική ενότητα (ακόμα κι αν λειτουργούν με πολλαπλές οντότητες)
- Πληθυντικό αριθμό για συλλογές ανεξάρτητων μονάδων
- Σε περίπτωση αβεβαιότητας ή αν δεν θέλετε να το σκεφτείτε, επιλέξτε τον ενικό αριθμό


Veřejný adresář `www/`
======================

Αυτός ο κατάλογος είναι ο μόνος προσβάσιμος από τον ιστό (το λεγόμενο document-root). Συχνά μπορείτε να συναντήσετε και το όνομα `public/` αντί για `www/` - είναι απλώς θέμα σύμβασης και δεν επηρεάζει τη λειτουργικότητα του φυτωρίου. Ο κατάλογος περιέχει:
- Το [σημείο εισόδου |bootstrap#index.php] της εφαρμογής `index.php`
- Το αρχείο `.htaccess` με κανόνες για το mod_rewrite (για τον Apache)
- Στατικά αρχεία (CSS, JavaScript, εικόνες)
- Ανεβασμένα αρχεία

Για τη σωστή ασφάλεια της εφαρμογής, είναι ζωτικής σημασίας να έχετε σωστά [διαμορφωμένο το document-root |nette:troubleshooting#Jak změnit či ostranit z URL adresář www].

.[note]
Ποτέ μην τοποθετείτε τον φάκελο `node_modules/` σε αυτόν τον κατάλογο - περιέχει χιλιάδες αρχεία που μπορεί να είναι εκτελέσιμα και δεν θα πρέπει να είναι δημόσια προσβάσιμα.


Aplikační adresář `app/`
========================

Αυτός είναι ο κύριος κατάλογος με τον κώδικα της εφαρμογής. Η βασική δομή:

/--pre
<b>app/</b>
├── <b>Core/</b>               ← θέματα υποδομής
├── <b>Model/</b>              ← επιχειρηματική λογική
├── <b>Presentation/</b>       ← presenters και πρότυπα
├── <b>Tasks/</b>              ← σενάρια εντολών
└── <b>Bootstrap.php</b>       ← κλάση εκκίνησης της εφαρμογής
\--

Το `Bootstrap.php` είναι η [κλάση εκκίνησης της εφαρμογής|bootstrap], η οποία αρχικοποιεί το περιβάλλον, φορτώνει τη διαμόρφωση και δημιουργεί το DI container.

Ας ρίξουμε τώρα μια πιο λεπτομερή ματιά στους επιμέρους υποκαταλόγους.


Presentery a šablony
====================

Το τμήμα παρουσίασης της εφαρμογής βρίσκεται στον κατάλογο `app/Presentation`. Μια εναλλακτική είναι το σύντομο `app/UI`. Είναι ο τόπος για όλους τους presenters, τα πρότυπά τους και τυχόν βοηθητικές κλάσεις.

Οργανώνουμε αυτό το επίπεδο ανά τομείς. Σε ένα σύνθετο έργο που συνδυάζει e-shop, blog και API, η δομή θα έμοιαζε ως εξής:

/--pre
<b>app/Presentation/</b>
├── <b>Shop/</b>              ← e-shop frontend
│   ├── <b>Product/</b>
│   ├── <b>Cart/</b>
│   └── <b>Order/</b>
├── <b>Blog/</b>              ← blog
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← διαχείριση
│   ├── <b>Dashboard/</b>
│   └── <b>Products/</b>
└── <b>Api/</b>               ← API endpoints
	└── <b>V1/</b>
\--

Αντίθετα, για ένα απλό blog, θα χρησιμοποιούσαμε την εξής διάρθρωση:

/--pre
<b>app/Presentation/</b>
├── <b>Front/</b>             ← frontend webu
│   ├── <b>Home/</b>
│   └── <b>Post/</b>
├── <b>Admin/</b>             ← διαχείριση
│   ├── <b>Dashboard/</b>
│   └── <b>Posts/</b>
├── <b>Error/</b>
└── <b>Export/</b>            ← RSS, sitemaps κ.λπ.
\--

Φάκελοι όπως `Home/` ή `Dashboard/` περιέχουν presenters και πρότυπα. Φάκελοι όπως `Front/`, `Admin/` ή `Api/` ονομάζονται **modules**. Τεχνικά, πρόκειται για συνηθισμένους καταλόγους που χρησιμεύουν για τη λογική διάρθρωση της εφαρμογής.

Κάθε φάκελος με presenter περιέχει έναν ομώνυμο presenter και τα πρότυπά του. Για παράδειγμα, ο φάκελος `Dashboard/` περιέχει:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presenter
└── <b>default.latte</b>              ← πρότυπο
\--

Αυτή η δομή καταλόγων αντικατοπτρίζεται στους χώρους ονομάτων των κλάσεων. Για παράδειγμα, το `DashboardPresenter` βρίσκεται στον χώρο ονομάτων `App\Presentation\Admin\Dashboard` (βλ. [#mapování presenterů]):

```php
namespace App\Presentation\Admin\Dashboard;

class DashboardPresenter extends Nette\Application\UI\Presenter
{
	// ...
}
```

Στον presenter `Dashboard` μέσα στο module `Admin` αναφερόμαστε στην εφαρμογή χρησιμοποιώντας τη σημειογραφία με άνω και κάτω τελεία ως `Admin:Dashboard`. Στην ενέργειά του `default` στη συνέχεια ως `Admin:Dashboard:default`. Σε περίπτωση ένθετων modules, χρησιμοποιούμε περισσότερες άνω και κάτω τελείες, για παράδειγμα `Shop:Order:Detail:default`.


Flexibilní vývoj struktury
--------------------------

Ένα από τα μεγάλα πλεονεκτήματα αυτής της δομής είναι το πόσο κομψά προσαρμόζεται στις αυξανόμενες ανάγκες του έργου. Ας πάρουμε ως παράδειγμα το τμήμα που δημιουργεί XML feeds. Στην αρχή, έχουμε μια απλή μορφή:

/--pre
<b>Export/</b>
├── <b>ExportPresenter.php</b>   ← ένας presenter για όλες τις εξαγωγές
├── <b>sitemap.latte</b>         ← πρότυπο για το sitemap
└── <b>feed.latte</b>            ← πρότυπο για το RSS feed
\--

Με τον καιρό, προστίθενται περισσότεροι τύποι feeds και χρειαζόμαστε περισσότερη λογική γι' αυτούς... Κανένα πρόβλημα! Ο φάκελος `Export/` γίνεται απλά ένα module:

/--pre
<b>Export/</b>
├── <b>Sitemap/</b>
│   ├── <b>SitemapPresenter.php</b>
│   └── <b>sitemap.latte</b>
└── <b>Feed/</b>
	├── <b>FeedPresenter.php</b>
	├── <b>zbozi.latte</b>         ← feed για το Zboží.cz
	└── <b>heureka.latte</b>       ← feed για το Heureka.cz
\--

Αυτή η μετατροπή είναι απολύτως ομαλή - αρκεί να δημιουργήσετε νέους υποφακέλους, να χωρίσετε τον κώδικα σε αυτούς και να ενημερώσετε τους συνδέσμους (π.χ. από `Export:feed` σε `Export:Feed:zbozi`). Χάρη σε αυτό, μπορούμε να επεκτείνουμε σταδιακά τη δομή ανάλογα με τις ανάγκες, το επίπεδο ένθεσης δεν περιορίζεται με κανέναν τρόπο.

Αν, για παράδειγμα, στη διαχείριση έχετε πολλούς presenters που σχετίζονται με τη διαχείριση παραγγελιών, όπως `OrderDetail`, `OrderEdit`, `OrderDispatch` κ.λπ., μπορείτε για καλύτερη οργάνωση σε αυτό το σημείο να δημιουργήσετε ένα module (φάκελο) `Order`, στο οποίο θα βρίσκονται (οι φάκελοι για) οι presenters `Detail`, `Edit`, `Dispatch` και άλλοι.


Umístění šablon
---------------

Στα προηγούμενα παραδείγματα, είδαμε ότι τα πρότυπα βρίσκονται απευθείας στον φάκελο με τον presenter:

/--pre
<b>Dashboard/</b>
├── <b>DashboardPresenter.php</b>     ← presenter
├── <b>DashboardTemplate.php</b>      ← προαιρετική κλάση για το πρότυπο
└── <b>default.latte</b>              ← πρότυπο
\--

Αυτή η τοποθέτηση αποδεικνύεται στην πράξη η πιο βολική - έχετε όλα τα σχετικά αρχεία αμέσως πρόχειρα.

Εναλλακτικά, μπορείτε να τοποθετήσετε τα πρότυπα στον υποφάκελο `templates/`. Το Nette υποστηρίζει και τις δύο παραλλαγές. Μπορείτε ακόμη και να τοποθετήσετε τα πρότυπα εντελώς εκτός του φακέλου `Presentation/`. Όλα σχετικά με τις δυνατότητες τοποθέτησης προτύπων θα βρείτε στο κεφάλαιο [Αναζήτηση προτύπων|templates#Hledání šablon].


Pomocné třídy a komponenty
--------------------------

Στους presenters και τα πρότυπα συχνά ανήκουν και άλλα βοηθητικά αρχεία. Τα τοποθετούμε λογικά ανάλογα με το πεδίο εφαρμογής τους:

1. **Απευθείας στον presenter** σε περίπτωση συγκεκριμένων components για τον συγκεκριμένο presenter:

/--pre
<b>Product/</b>
├── <b>ProductPresenter.php</b>
├── <b>ProductGrid.php</b>        ← component για την εμφάνιση προϊόντων
└── <b>FilterForm.php</b>         ← φόρμα για φιλτράρισμα
\--

2. **Για το module** - συνιστούμε να χρησιμοποιήσετε τον φάκελο `Accessory`, ο οποίος τοποθετείται βολικά στην αρχή της αλφαβήτου:

/--pre
<b>Front/</b>
├── <b>Accessory/</b>
│   ├── <b>NavbarControl.php</b>    ← components για το frontend
│   └── <b>TemplateFilters.php</b>
├── <b>Product/</b>
└── <b>Cart/</b>
\--

3. **Για ολόκληρη την εφαρμογή** - στο `Presentation/Accessory/`:
/--pre
<b>app/Presentation/</b>
├── <b>Accessory/</b>
│   ├── <b>LatteExtension.php</b>
│   └── <b>TemplateFilters.php</b>
├── <b>Front/</b>
└── <b>Admin/</b>
\--

Ή μπορείτε να τοποθετήσετε βοηθητικές κλάσεις όπως `LatteExtension.php` ή `TemplateFilters.php` στον φάκελο υποδομής `app/Core/Latte/`. Και τα components στο `app/Components`. Η επιλογή εξαρτάται από τις συνήθειες της ομάδας.


Model - srdce aplikace
======================

Το μοντέλο περιέχει όλη την επιχειρηματική λογική της εφαρμογής. Για την οργάνωσή του ισχύει ξανά ο κανόνας - δομούμε ανά τομείς:

/--pre
<b>app/Model/</b>
├── <b>Payment/</b>                   ← όλα γύρω από τις πληρωμές
│   ├── <b>PaymentFacade.php</b>      ← κύριο σημείο εισόδου
│   ├── <b>PaymentRepository.php</b>
│   ├── <b>Payment.php</b>            ← οντότητα
├── <b>Order/</b>                     ← όλα γύρω από τις παραγγελίες
│   ├── <b>OrderFacade.php</b>
│   ├── <b>OrderRepository.php</b>
│   ├── <b>Order.php</b>
└── <b>Shipping/</b>                  ← όλα γύρω από την αποστολή
\--

Στο μοντέλο, τυπικά συναντάμε αυτούς τους τύπους κλάσεων:

**Facades**: αντιπροσωπεύουν το κύριο σημείο εισόδου σε έναν συγκεκριμένο τομέα στην εφαρμογή. Λειτουργούν ως ενορχηστρωτής που συντονίζει τη συνεργασία μεταξύ διαφορετικών υπηρεσιών με σκοπό την υλοποίηση πλήρων use-cases (όπως "δημιουργία παραγγελίας" ή "επεξεργασία πληρωμής"). Κάτω από το επίπεδο ενορχήστρωσης, η facade κρύβει τις λεπτομέρειες υλοποίησης από την υπόλοιπη εφαρμογή, παρέχοντας έτσι μια καθαρή διεπαφή για την εργασία με τον συγκεκριμένο τομέα.

```php
class OrderFacade
{
	public function createOrder(Cart $cart): Order
	{
		// validation
		// order creation
		// sending email
		// writing to statistics
	}
}
```

**Υπηρεσίες**: εστιάζουν σε μια συγκεκριμένη επιχειρηματική λειτουργία εντός του τομέα. Σε αντίθεση με τη facade, η οποία ενορχηστρώνει ολόκληρα use-cases, μια υπηρεσία υλοποιεί συγκεκριμένη επιχειρηματική λογική (όπως υπολογισμούς τιμών ή επεξεργασία πληρωμών). Οι υπηρεσίες είναι τυπικά stateless και μπορούν να χρησιμοποιηθούν είτε από facades ως δομικά στοιχεία για πιο σύνθετες λειτουργίες, είτε απευθείας από άλλα μέρη της εφαρμογής για απλούστερες εργασίες.

```php
class PricingService
{
	public function calculateTotal(Order $order): Money
	{
		// price calculation
	}
}
```

**Repositories**: εξασφαλίζουν όλη την επικοινωνία με τον χώρο αποθήκευσης δεδομένων, τυπικά μια βάση δεδομένων. Ο ρόλος του είναι η φόρτωση και η αποθήκευση οντοτήτων και η υλοποίηση μεθόδων για την αναζήτησή τους. Το repository απομονώνει την υπόλοιπη εφαρμογή από τις λεπτομέρειες υλοποίησης της βάσης δεδομένων και παρέχει μια αντικειμενοστραφή διεπαφή για την εργασία με δεδομένα.

```php
class OrderRepository
{
	public function find(int $id): ?Order
	{
	}

	public function findByCustomer(int $customerId): array
	{
	}
}
```

**Entities**: αντικείμενα που αντιπροσωπεύουν τις κύριες επιχειρηματικές έννοιες στην εφαρμογή, οι οποίες έχουν τη δική τους ταυτότητα και αλλάζουν με την πάροδο του χρόνου. Τυπικά, πρόκειται για κλάσεις που αντιστοιχίζονται σε πίνακες βάσης δεδομένων χρησιμοποιώντας ORM (όπως το Nette Database Explorer ή το Doctrine). Οι οντότητες μπορούν να περιέχουν επιχειρηματικούς κανόνες που σχετίζονται με τα δεδομένα τους και λογική επικύρωσης.

```php
// Entity mapped to the database table orders
class Order extends Nette\Database\Table\ActiveRow
{
	public function addItem(Product $product, int $quantity): void
	{
		$this->related('order_items')->insert([
			'product_id' => $product->id,
			'quantity' => $quantity,
			'unit_price' => $product->price,
		]);
	}
}
```

**Value objects**: αμετάβλητα αντικείμενα που αντιπροσωπεύουν τιμές χωρίς δική τους ταυτότητα - για παράδειγμα, ένα χρηματικό ποσό ή μια διεύθυνση email. Δύο παρουσίες ενός value object με τις ίδιες τιμές θεωρούνται ταυτόσημες.


Infrastrukturní kód
===================

Ο φάκελος `Core/` (ή επίσης `Infrastructure/`) είναι το σπίτι για την τεχνική βάση της εφαρμογής. Ο κώδικας υποδομής τυπικά περιλαμβάνει:

/--pre
<b>app/Core/</b>
├── <b>Router/</b>               ← δρομολόγηση και διαχείριση URL
│   └── <b>RouterFactory.php</b>
├── <b>Security/</b>             ← αυθεντικοποίηση και εξουσιοδότηση
│   ├── <b>Authenticator.php</b>
│   └── <b>Authorizator.php</b>
├── <b>Logging/</b>              ← καταγραφή και παρακολούθηση
│   ├── <b>SentryLogger.php</b>
│   └── <b>FileLogger.php</b>
├── <b>Cache/</b>                ← επίπεδο προσωρινής αποθήκευσης
│   └── <b>FullPageCache.php</b>
└── <b>Integration/</b>          ← ενσωμάτωση με εξωτερικές υπηρεσίες
	├── <b>Slack/</b>
	└── <b>Stripe/</b>
\--

Για μικρότερα έργα, φυσικά, αρκεί μια επίπεδη διάρθρωση:

/--pre
<b>Core/</b>
├── <b>RouterFactory.php</b>
├── <b>Authenticator.php</b>
└── <b>QueueMailer.php</b>
\--

Πρόκειται για κώδικα που:

- Επιλύει την τεχνική υποδομή (δρομολόγηση, καταγραφή, προσωρινή αποθήκευση)
- Ενσωματώνει εξωτερικές υπηρεσίες (Sentry, Elasticsearch, Redis)
- Παρέχει βασικές υπηρεσίες για ολόκληρη την εφαρμογή (mail, βάση δεδομένων)
- Είναι ως επί το πλείστον ανεξάρτητος από τον συγκεκριμένο τομέα - η cache ή ο logger λειτουργεί το ίδιο για ένα eshop ή ένα blog.

Αναρωτιέστε αν μια συγκεκριμένη κλάση ανήκει εδώ ή στο μοντέλο; Η βασική διαφορά είναι ότι ο κώδικας στο `Core/`:

- Δεν γνωρίζει τίποτα για τον τομέα (προϊόντα, παραγγελίες, άρθρα)
- Είναι ως επί το πλείστον δυνατό να μεταφερθεί σε άλλο έργο
- Επιλύει το "πώς λειτουργεί" (πώς να στείλετε ένα mail), όχι το "τι κάνει" (τι mail να στείλετε)

Παράδειγμα για καλύτερη κατανόηση:

- `App\Core\MailerFactory` - δημιουργεί παρουσίες της κλάσης για την αποστολή email, διαχειρίζεται τις ρυθμίσεις SMTP
- `App\Model\OrderMailer` - χρησιμοποιεί το `MailerFactory` για την αποστολή email σχετικά με παραγγελίες, γνωρίζει τα πρότυπά τους και πότε πρέπει να σταλούν


Příkazové skripty
=================

Οι εφαρμογές συχνά χρειάζεται να εκτελούν δραστηριότητες εκτός των συνηθισμένων αιτήσεων HTTP - είτε πρόκειται για επεξεργασία δεδομένων στο παρασκήνιο, συντήρηση ή περιοδικές εργασίες. Για την εκτέλεση χρησιμοποιούνται απλά σενάρια στον κατάλογο `bin/`, ενώ η λογική υλοποίησης τοποθετείται στο `app/Tasks/` (ή `app/Commands/`).

Παράδειγμα:

/--pre
<b>app/Tasks/</b>
├── <b>Maintenance/</b>               ← σενάρια συντήρησης
│   ├── <b>CleanupCommand.php</b>     ← διαγραφή παλιών δεδομένων
│   └── <b>DbOptimizeCommand.php</b>  ← βελτιστοποίηση βάσης δεδομένων
├── <b>Integration/</b>               ← ενσωμάτωση με εξωτερικά συστήματα
│   ├── <b>ImportProducts.php</b>     ← εισαγωγή από σύστημα προμηθευτή
│   └── <b>SyncOrders.php</b>         ← συγχρονισμός παραγγελιών
└── <b>Scheduled/</b>                 ← τακτικές εργασίες
	├── <b>NewsletterCommand.php</b>  ← αποστολή ενημερωτικών δελτίων
	└── <b>ReminderCommand.php</b>    ← ειδοποιήσεις πελατών
\--

Τι ανήκει στο μοντέλο και τι στα σενάρια εντολών; Για παράδειγμα, η λογική για την αποστολή ενός email είναι μέρος του μοντέλου, η μαζική αποστολή χιλιάδων email ανήκει ήδη στο `Tasks/`.

Οι εργασίες συνήθως [εκκινούνται από τη γραμμή εντολών |https://blog.nette.org/cs/cli-skripty-v-nette-aplikaci] ή μέσω cron. Μπορούν επίσης να εκκινηθούν μέσω αιτήματος HTTP, αλλά είναι απαραίτητο να σκεφτείτε την ασφάλεια. Ο presenter που εκκινεί την εργασία πρέπει να ασφαλιστεί, για παράδειγμα, μόνο για συνδεδεμένους χρήστες ή με ισχυρό token και πρόσβαση από επιτρεπόμενες διευθύνσεις IP. Για μεγάλες εργασίες, είναι απαραίτητο να αυξήσετε το χρονικό όριο του σεναρίου και να χρησιμοποιήσετε το `session_write_close()`, ώστε να μην κλειδώνεται η session.


Další možné adresáře
====================

Εκτός από τους βασικούς καταλόγους που αναφέρθηκαν, μπορείτε να προσθέσετε άλλους εξειδικευμένους φακέλους ανάλογα με τις ανάγκες του έργου. Ας ρίξουμε μια ματιά στους πιο συνηθισμένους από αυτούς και τη χρήση τους:

/--pre
<b>app/</b>
├── <b>Api/</b>              ← λογική για API ανεξάρτητη από το επίπεδο παρουσίασης
├── <b>Database/</b>         ← σενάρια μετανάστευσης και seeders για δοκιμαστικά δεδομένα
├── <b>Components/</b>       ← κοινόχρηστα οπτικά components σε ολόκληρη την εφαρμογή
├── <b>Event/</b>            ← χρήσιμο αν χρησιμοποιείτε αρχιτεκτονική βασισμένη σε γεγονότα
├── <b>Mail/</b>             ← πρότυπα email και σχετική λογική
└── <b>Utils/</b>            ← βοηθητικές κλάσεις
\--

Για κοινόχρηστα οπτικά components που χρησιμοποιούνται σε presenters σε ολόκληρη την εφαρμογή, μπορείτε να χρησιμοποιήσετε τον φάκελο `app/Components` ή `app/Controls`:

/--pre
<b>app/Components/</b>
├── <b>Form/</b>                 ← κοινόχρηστα components φόρμας
│   ├── <b>SignInForm.php</b>
│   └── <b>UserForm.php</b>
├── <b>Grid/</b>                 ← components για λίστες δεδομένων
│   └── <b>DataGrid.php</b>
└── <b>Navigation/</b>           ← στοιχεία πλοήγησης
	├── <b>Breadcrumbs.php</b>
	└── <b>Menu.php</b>
\--

Εδώ ανήκουν τα components που έχουν πιο σύνθετη λογική. Αν θέλετε να μοιραστείτε components μεταξύ πολλών έργων, είναι σκόπιμο να τα διαχωρίσετε σε ένα ξεχωριστό πακέτο composer.

Στον κατάλογο `app/Mail` μπορείτε να τοποθετήσετε τη διαχείριση της επικοινωνίας μέσω email:

/--pre
<b>app/Mail/</b>
├── <b>templates/</b>            ← πρότυπα email
│   ├── <b>order-confirmation.latte</b>
│   └── <b>welcome.latte</b>
└── <b>OrderMailer.php</b>
\--


Mapování presenterů
===================

Η αντιστοίχιση ορίζει κανόνες για την εξαγωγή του ονόματος της κλάσης από το όνομα του presenter. Τους καθορίζουμε στη [διαμόρφωση|configuration] κάτω από το κλειδί `application › mapping`.

Σε αυτή τη σελίδα, δείξαμε ότι τοποθετούμε τους presenters στον φάκελο `app/Presentation` (ή `app/UI`). Πρέπει να ενημερώσουμε το Nette για αυτή τη σύμβαση στο αρχείο διαμόρφωσης. Μια γραμμή αρκεί:

```neon
application:
	mapping: App\Presentation\*\**Presenter
```

Πώς λειτουργεί η αντιστοίχιση; Για καλύτερη κατανόηση, ας φανταστούμε πρώτα μια εφαρμογή χωρίς modules. Θέλουμε οι κλάσεις των presenters να ανήκουν στον χώρο ονομάτων `App\Presentation`, ώστε ο presenter `Home` να αντιστοιχεί στην κλάση `App\Presentation\HomePresenter`. Αυτό το επιτυγχάνουμε με αυτή τη διαμόρφωση:

```neon
application:
	mapping: App\Presentation\*Presenter
```

Η αντιστοίχιση λειτουργεί έτσι ώστε το όνομα του presenter `Home` να αντικαθιστά τον αστερίσκο στη μάσκα `App\Presentation\*Presenter`, δίνοντας το τελικό όνομα κλάσης `App\Presentation\HomePresenter`. Απλό!

Ωστόσο, όπως βλέπετε στα παραδείγματα σε αυτό και σε άλλα κεφάλαια, τοποθετούμε τις κλάσεις των presenters σε ομώνυμους υποκαταλόγους, για παράδειγμα, ο presenter `Home` αντιστοιχεί στην κλάση `App\Presentation\Home\HomePresenter`. Αυτό το επιτυγχάνουμε διπλασιάζοντας την άνω και κάτω τελεία (απαιτεί Nette Application 3.2):

```neon
application:
	mapping: App\Presentation\**Presenter
```

Τώρα προχωράμε στην αντιστοίχιση presenters σε modules. Για κάθε module, μπορούμε να ορίσουμε μια συγκεκριμένη αντιστοίχιση:

```neon
application:
	mapping:
		Front: App\Presentation\Front\**Presenter
		Admin: App\Presentation\Admin\**Presenter
		Api: App\Api\*Presenter
```

Σύμφωνα με αυτή τη διαμόρφωση, ο presenter `Front:Home` αντιστοιχεί στην κλάση `App\Presentation\Front\Home\HomePresenter`, ενώ ο presenter `Api:OAuth` στην κλάση `App\Api\OAuthPresenter`.

Επειδή τα modules `Front` και `Admin` έχουν παρόμοιο τρόπο αντιστοίχισης και πιθανότατα θα υπάρχουν περισσότερα τέτοια modules, είναι δυνατό να δημιουργηθεί ένας γενικός κανόνας που τα αντικαθιστά. Έτσι, στη μάσκα της κλάσης προστίθεται ένας νέος αστερίσκος για το module:

```neon
application:
	mapping:
		*: App\Presentation\*\**Presenter
		Api: App\Api\*Presenter
```

Λειτουργεί επίσης για βαθύτερα ένθετες δομές καταλόγων, όπως για παράδειγμα ο presenter `Admin:User:Edit`, με το τμήμα με τον αστερίσκο να επαναλαμβάνεται για κάθε επίπεδο και το αποτέλεσμα να είναι η κλάση `App\Presentation\Admin\User\Edit\EditPresenter`.

Μια εναλλακτική σύνταξη είναι να χρησιμοποιήσετε έναν πίνακα που αποτελείται από τρία τμήματα αντί για μια συμβολοσειρά. Αυτή η σύνταξη είναι ισοδύναμη με την προηγούμενη:

```neon
application:
	mapping:
		*: [App\Presentation, *, **Presenter]
		Api: [App\Api, '', *Presenter]
```
