Reutilizarea formularelor în mai multe locuri
*********************************************

.[perex]
Cum să reutilizați același formular în mai multe locuri și să nu duplicați codul? Acest lucru este foarte ușor de făcut în Nette și aveți mai multe moduri de a alege.


Fabrica de formulare .[#toc-form-factory]
=========================================

Să creăm o clasă care poate crea un formular. O astfel de clasă se numește fabrică. În locul în care dorim să folosim formularul (de exemplu, în prezentator), solicităm [fabrica ca dependență |dependency-injection:passing-dependencies].

O parte a fabricii este codul care transmite datele pentru procesare ulterioară atunci când formularul este trimis cu succes. De obicei, la nivelul modelului. De asemenea, verifică dacă totul a decurs bine și [transmite înapoi |forms:validation#Processing-errors] orice eroare către formular. Modelul din exemplul următor este reprezentat de clasa `Facade`:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// adăugarea de elemente la formular

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// procesarea formularului
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

Desigur, fabrica poate fi parametrică, adică poate primi parametri care vor afecta aspectul formularului creat.

Vom demonstra acum trecerea fabricii către prezentator. Mai întâi, o scriem în fișierul de configurare:

```neon
services:
	- EditFormFactory
```

Și apoi o solicităm în prezentator. Urmează și următorul pas de procesare a formularului trimis și anume redirecționarea către pagina următoare:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Deoarece redirecționarea este gestionată de către gestionarul de prezentare, componenta poate fi utilizată în mai multe locuri și redirecționată în altă parte în fiecare loc.


Componentă cu formular .[#toc-component-with-form]
==================================================

O altă modalitate este de a crea o nouă [componentă |application:components] care să conțină un formular. Acest lucru ne oferă posibilitatea de a reda formularul într-un mod specific, de exemplu, deoarece componenta include un șablon.
Sau putem utiliza semnale pentru comunicarea AJAX și încărcarea informațiilor în formular, de exemplu pentru autocompletare etc.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// adăugarea de elemente la formular

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// procesarea formularului
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// invocarea unui eveniment
		$this->onSave($this, $values);
	}
}
```

În continuare, vom crea fabrica care va produce această componentă. [Scrieți |application:components#Components with Dependencies] doar [interfața acesteia |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

Și adăugați-o la fișierul de configurare:

```neon
services:
	- EditControlFactory
```

Și acum putem solicita fabrica și o putem folosi în prezentator:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// sau redirecționarea către rezultatul editării, de exemplu:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Best Practices}}
