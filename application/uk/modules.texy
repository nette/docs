Модулі
******

.[perex]
У Nette модулі являють собою логічні одиниці, з яких складається додаток. Вони включають ведучі, шаблони, можливо, компоненти та класи моделей.

Одного компонента для презентаторів і одного для шаблонів буде недостатньо для реальних проектів. Наявність десятків файлів в одній папці щонайменше неорганізована. Як вийти з цього становища? Ми просто розділяємо їх на підкаталоги на диску і на простори імен у коді. І це саме те, що роблять модулі Nette.

Тому давайте забудемо про єдину папку для ведучих і шаблонів і натомість створимо модулі, наприклад, `Admin` і `Front`.

/--pre
<b>app/</b>
├── <del>Presenters/</del>
├── <b>Modules/</b>              ← директория с модулями

│   ├── <b>Admin/</b>            ← модуль Admin
│   │   ├── <b>Presenters/</b>   ← его презентеры
│   │   │   ├── <b>DashboardPresenter.php</b>
│   │   │   └── <b>templates/</b>
│   └── <b>Front/</b>            ← модуль Front
│       └── <b>Presenters/</b>   ← его презентеры
│           └── ...
\--

Ця структура каталогів буде відображена в просторах імен класів, так, наприклад, `DashboardPresenter` буде знаходитися в просторі `App\Modules\Admin\Presenters`:

```php
namespace App\Modules\Admin\Presenters;

class DashboardPresenter extends Nette\Application\UI\Presenter
{
	// ...
}
```

Ведучий `Dashboard` усередині модуля `Admin` позначається в додатку за допомогою подвійної точкової нотації як `Admin:Dashboard`, а його дія `default` позначається як `Admin:Dashboard:default`.
А звідки Nette знає, що `Admin:Dashboard` представляє клас `App\Modules\Admin\Presenters\DashboardPresenter`? Ми говоримо про це, використовуючи [відображення |#Mapping] в конфігурації.
Таким чином, наведена структура не є фіксованою, і ви можете змінювати її на свій розсуд.

Модулі, звісно, можуть містити всі інші частини, крім презентаторів і шаблонів, такі як компоненти, класи моделей тощо.


Вкладені модулі .[#toc-nested-modules]
--------------------------------------

Модулі не обов'язково повинні формувати тільки плоску структуру, ви також можете створювати, наприклад, підмодулі:

/--pre
<b>app/</b>
├── <b>Modules/</b>              ← директория с модулями
│   ├── <b>Blog/</b>             ← модуль Blog
│   │   ├── <b>Admin/</b>        ← подмодуль Admin
│   │   │   ├── <b>Presenters/</b>
│   │   │   └── ...
│   │   └── <b>Front/</b>        ← подмодуль Front
│   │       ├── <b>Presenters/</b>
│   │       └── ...
│   ├── <b>Forum/</b>            ← модуль Forum
│   │   └── ...
\--

Таким чином, модуль `Blog` розбивається на підмодулі `Admin` і `Front`. І знову ж таки це буде відображено в просторах імен, які будуть `App\Modules\Blog\Admin\Presenters` тощо. Ведучий `Dashboard` всередині підмодуля називається `Blog:Admin:Dashboard`.

Розгалуження може бути настільки глибоким, наскільки ви захочете, тому ви можете створювати підмодулі.


Створення посилань .[#toc-creating-links]
-----------------------------------------

Посилання в шаблонах ведучого є відносними щодо поточного модуля. Таким чином, посилання `Foo:default` веде до ведучого `Foo` у тому ж модулі, що й поточний ведучий. Наприклад, якщо поточним модулем є `Front`, то посилання має такий вигляд:

```latte
<a n:href="Product:show">odkaz na Front:Product:show</a>
```

Посилання є відносним, навіть якщо ім'я модуля є його частиною, тоді він вважається підмодулем:

```latte
<a n:href="Shop:Product:show">odkaz na Front:Shop:Product:show</a>
```

Абсолютні посилання записуються аналогічно абсолютним шляхам на диску, але з двокрапками замість косих рисок. Таким чином, абсолютне посилання починається з двокрапки:

```latte
<a n:href=":Admin:Product:show">odkaz na Admin:Product:show</a>
```

Щоб дізнатися, чи перебуваємо ми в певному модулі або підмодулі, ми використовуємо функцію `isModuleCurrent(moduleName)`.

```latte
<li n:class="isModuleCurrent('Forum:Users') ? active">
	<a n:href="Product:">...</a>
</li>
```


Маршрутизація .[#toc-routing]
-----------------------------

Див. [розділ про маршрутизацію |routing#modules].


Складання карти .[#toc-mapping]
-------------------------------

Визначає правила, за якими ім'я класу виводиться з імені ведучого. Ми записуємо їх у [конфігурацію |configuration] під ключем `application › mapping`.

Почнемо з прикладу, в якому не використовуються модулі. Ми просто хочемо, щоб класи ведучого мали простір імен `App\Presenters`. Тобто ми хочемо, щоб ведучий, наприклад, `Homepage` відображався на клас `App\Presenters\HomepagePresenter`. Цього можна досягти за допомогою такої конфігурації:

```neon
application:
	mapping:
		*: App\Presenters\*Presenter
```

Ім'я презентера замінюється зірочкою, і в результаті виходить назва класу. Легко!

Якщо ми розділимо доповідачів на модулі, то для кожного модуля в нас може бути свій маппінг:

```neon
application:
	mapping:
		Front: App\Modules\Front\Presenters\*Presenter
		Admin: App\Modules\Admin\Presenters\*Presenter
		Api: App\Api\*Presenter
```

Тепер презентер `Front:Homepage` визначається класом `App\Modules\Front\HomepagePresenter`, а презентер `Admin:Dashboard` ` - `App\AdminModule\DashboardPresenter`.

Зручніше буде створити загальне правило (зірочка), яке замінить перші два правила і додасть додаткову зірочку тільки для модуля:

```neon
application:
	mapping:
		*: App\Modules\*\Presenters\*Presenter
		Api: App\Api\*Presenter
```

Але що якщо ми використовуємо кілька вкладених модулів і в нас є, наприклад, провідний `Admin:User:Edit`? У цьому випадку сегмент із зірочкою, що представляє модуль для кожного рівня, буде просто повторюватися, і результатом буде клас `App\Modules\Admin\User\Presenters\EditPresenter`.

Альтернативною нотацією є використання масиву, що складається з трьох сегментів, замість рядка. Ця нотація еквівалентна попередній:

```neon
application:
	mapping:
		*: [App\Modules, *, Presenters\*Presenter]
```

Значення за замовчуванням - `*: *Module\*Presenter`.
