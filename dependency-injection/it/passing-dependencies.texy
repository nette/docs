Passaggio di dipendenze
***********************
<div class=perex>


Gli argomenti, o "dipendenze" nella terminologia DI, possono essere passati alle classi nei seguenti modi principali:

* passaggio per costruttore
* passando per un metodo (chiamato setter)
* impostando una proprietà
* con un metodo, un'annotazione o un attributo * con un'iniezione*.

</div>

I primi tre metodi si applicano in generale a tutti i linguaggi orientati agli oggetti, mentre il quarto è specifico per i presentatori Nette, quindi viene discusso in un [capitolo a parte |best-practices:inject-method-attribute]. Daremo ora un'occhiata più da vicino a ciascuna di queste opzioni e le illustreremo con esempi specifici.


Iniezione del costruttore .[#toc-constructor-injection]
=======================================================

Le dipendenze vengono passate come argomenti al costruttore quando l'oggetto viene creato:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Questa forma è utile per le dipendenze obbligatorie di cui la classe ha assolutamente bisogno per funzionare, poiché senza di esse l'istanza non può essere creata.

Da PHP 8.0, è possibile utilizzare una forma di notazione più breve, funzionalmente equivalente:

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

A partire da PHP 8.1, una proprietà può essere contrassegnata da un flag `readonly` che dichiara che il contenuto della proprietà non cambierà:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Il contenitore DI passa le dipendenze al costruttore automaticamente, utilizzando l'[autowiring |autowiring]. Gli argomenti che non possono essere passati in questo modo (per esempio stringhe, numeri, booleani) vengono [scritti nella configurazione |services#Arguments].


Iniezione di setter .[#toc-setter-injection]
============================================

Le dipendenze vengono passate chiamando un metodo che le memorizza in una proprietà privata. La convenzione di denominazione usuale per questi metodi è la forma `set*()`, motivo per cui vengono chiamati setter.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Questo metodo è utile per le dipendenze opzionali che non sono necessarie per il funzionamento della classe, poiché non è garantito che l'oggetto le riceva effettivamente (cioè che l'utente chiami il metodo).

Allo stesso tempo, questo metodo consente di richiamare ripetutamente il setter per modificare la dipendenza. Se ciò non è auspicabile, si può aggiungere un controllo al metodo o, a partire da PHP 8.1, contrassegnare la proprietà `$cache` con il flag `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

La chiamata al setter è definita nella configurazione del contenitore DI, nella [sezione setup |services#Setup]. Anche qui il passaggio automatico delle dipendenze è usato dall'autowiring:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Iniezione di proprietà .[#toc-property-injection]
=================================================

Le dipendenze vengono passate direttamente alla proprietà:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Questo metodo è considerato inappropriato, perché la proprietà deve essere dichiarata come `public`. Quindi, non si ha alcun controllo sul fatto che la dipendenza passata sia effettivamente del tipo specificato (questo era vero prima di PHP 7.4) e si perde la possibilità di reagire alla nuova dipendenza assegnata con il proprio codice, ad esempio per prevenire modifiche successive. Allo stesso tempo, la proprietà diventa parte dell'interfaccia pubblica della classe, il che potrebbe non essere auspicabile.

L'impostazione della variabile è definita nella configurazione del contenitore DI, nella [sezione setup |services#Setup]:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Quale strada scegliere? .[#toc-which-way-to-choose]
===================================================

- il costruttore è adatto alle dipendenze obbligatorie di cui la classe ha bisogno per funzionare
- il setter, invece, è adatto per le dipendenze opzionali, o per le dipendenze che possono essere modificate
- Le variabili pubbliche non sono consigliate
