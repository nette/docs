PHP Refleksija
**************

.[perex]
[api:Nette\Utils\Reflection] je statični razred z uporabnimi funkcijami za PHP refleksijo. Njegova naloga je popravljati pomanjkljivosti izvornih razredov in poenotiti obnašanje med različnimi različicami PHP.


Namestitev:

```shell
composer require nette/utils
```

Vsi primeri predpostavljajo ustvarjen alias:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Ugotovi, ali ima refleksija dostop do PHPdoc komentarjev. Komentarji so lahko nedostopni zaradi opcode predpomnilnika, glejte na primer direktivo [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Razširi ime razreda `$name` na njegovo polno ime v kontekstu razreda `$context`, torej v kontekstu njegovega imenskega prostora in definiranih aliasov. Torej dejansko pove, kako bi PHP razčlenjevalnik razumel `$name`, če bi bil zapisan v telesu razreda `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Vrne refleksijo metode, ki vsebuje deklaracijo metode `$method`. Običajno je vsaka metoda svoja lastna deklaracija, vendar se telo metode lahko nahaja tudi v lastnosti (trait) in pod drugim imenom.

Ker PHP ne zagotavlja zadostnih informacij, s katerimi bi bilo mogoče ugotoviti dejansko deklaracijo, Nette uporablja lastno hevristiko, ki **bi morala biti** zanesljiva.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Vrne refleksijo razreda ali lastnosti (trait), ki vsebuje deklaracijo lastnosti `$prop`. Lastnost je namreč lahko deklarirana tudi v lastnosti (trait).

Ker PHP ne zagotavlja zadostnih informacij, s katerimi bi bilo mogoče ugotoviti dejansko deklaracijo, Nette uporablja lastno hevristiko, ki **ni** zanesljiva.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Ugotovi, ali je `$type` vgrajen tip PHP. V nasprotnem primeru gre za ime razreda.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Uporabite [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Pretvori refleksijo v človeško razumljiv niz.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param v DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
