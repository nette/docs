Помічники
*********


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` розширює `SimpleXMLElement` за допомогою простих запитів у форматі HTML або XML за допомогою селекторів CSS.

```php
# create DomQuery from HTML string
$dom = Tester\DomQuery::fromHtml('
	<article class="post">
		<h1>Title</h1>
		<div class="content">Text</div>
	</article>
');

# test element existence using CSS selectors
Assert::true($dom->has('article.post'));
Assert::true($dom->has('h1'));

# find elements as DomQuery array
$headings = $dom->find('h1');
Assert::same('Title', (string) $headings[0]);

# test if element matches selector (since version 2.5.3)
$content = $dom->find('.content')[0];
Assert::true($content->matches('div'));
Assert::false($content->matches('p'));

# find closest ancestor matching selector (since 2.5.5)
$article = $content->closest('.post');
Assert::true($article->matches('article'));
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` емулює файли в пам'яті, щоб допомогти вам протестувати код, який використовує функції на кшталт `fopen()`, `file_get_contents()` або `parse_ini_file()`. Наприклад:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Це не твердження, а помічник для тестування приватних методів і властивостей об'єктів.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // доступний private $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Метод `purge()` створює вказаний каталог і, якщо він уже існує, видаляє весь його вміст. Він зручний для створення тимчасових каталогів. Наприклад, у `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Тести запускаються паралельно. Іноді нам не потрібно перекривати час виконання тестів. Зазвичай тести баз даних потребують підготовки вмісту бази даних, і їм потрібно, щоб ніщо не заважало їм під час виконання тесту. У цих випадках ми використовуємо `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Перший аргумент - ім'я блокування. Другий - шлях до каталогу для збереження блокування. Спочатку запускається тест, який отримує блокування. Решта тестів повинні почекати, поки він завершиться.


Environment::bypassFinals() .[filter]
-------------------------------------
Класи або методи, позначені як `final`, важко тестувати. Виклик `Tester\Environment::bypassFinals()` на початку тестування призводить до того, що ключові слова `final` видаляються під час завантаження коду.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- покращує читабельність дампа помилок (увімкнено розфарбування), інакше виводиться стандартне трасування стека PHP
- дозволяє перевірити, що твердження були викликані в тесті, інакше тести без (наприклад, забутих) тверджень теж пройдуть
- автоматично запускає збирач покриття коду під час використання `--coverage` (описано пізніше)
- друкує статус OK або FAILURE наприкінці скрипта


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Створює глобальні функції `test()`, `testException()`, `setUp()` і `tearDown()`, на які можна розбити тести.

```php
test('опис тесту', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Позволяет узнать, был ли тест запущен напрямую или через Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# запускається Tester
} else {
	# інший спосіб
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester запускает тесты параллельно в заданном количестве потоков. Мы найдем номер потока в переменной окружения, когда нас это заинтересует:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::VariableThread);
```
