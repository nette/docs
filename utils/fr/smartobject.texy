SmartObject : Améliorations des objets PHP
******************************************
<div class=perex>


SmartObject étend les capacités des objets de PHP avec quelques bonbons syntaxiques. Vous aimez les bonbons ? Lisez et apprenez

- pourquoi il est bon de l'utiliser `Nette\SmartObject`
- ce que sont les *propriétés
- comment déclencher des événements

</div>

Dans ce chapitre, nous nous concentrons sur `Nette\SmartObject`, un trait qui étend les capacités des objets de PHP. Ce trait est utilisé par presque toutes les classes du Nette Framework. En même temps, il est suffisamment transparent pour être utilisé dans vos classes. Essayons de dire pourquoi vous devriez le faire.

Le trait `Nette\SmartObject` est un successeur simplifié de la classe obsolète `Nette\Object` de Nette 2.x.

Installation :

```shell
composer require nette/utils
```


Classes strictes .[#toc-strict-classes]
=======================================

PHP donne une grande liberté aux développeurs, ce qui en fait un langage parfait pour faire des erreurs. Mais vous pouvez arrêter ce mauvais comportement et commencer à écrire des applications sans bogues difficiles à découvrir. Vous vous demandez comment ? C'est très simple : il suffit d'adopter des règles plus strictes.

Pouvez-vous trouver une erreur dans cet exemple ?

```php
class Circle
{
	public $radius = 0.0;

	public function getArea(): float
	{
		return $this->radius * $this->radius * M_PI;
	}
}

$circle = new Circle;
$circle->raduis = 10;
echo $circle->getArea(); // 10² * π ≈ 314
```

À première vue, il semble que ce code va imprimer 314 ; mais il renvoie 0. Comment est-ce possible ? Par accident, `$circle->radius` a été mal tapé et remplacé par `raduis`. Ce n'est qu'une petite erreur de frappe, qui vous donnera du mal à la corriger car PHP ne dit rien quand quelque chose ne va pas. Pas même un message d'erreur de type Warning ou Notice. Parce que PHP ne pense pas qu'il s'agisse d'une erreur.

L'erreur mentionnée pourrait être corrigée immédiatement, si la classe `Circle` utilisait `Nette\SmartObject`:

```php
class Circle
{
	use Nette\SmartObject;
}
```

Alors que le premier code s'est exécuté avec succès (bien qu'il contienne une erreur), le second ne l'a pas fait :

[* debugger-circle.webp .{url:-} *]

Trait `Nette\SmartObject` rendait `Circle` plus strict et lançait une exception lorsque vous essayiez d'accéder à une propriété non déclarée. Et [Tracy |tracy:] affichait un message d'erreur à ce sujet. La ligne de code comportant une faute de frappe fatale est maintenant mise en évidence et le message d'erreur comporte une description significative : *Canot write to an undeclared property Circle::$raduis, vous vouliez dire $radius?*. Le programmeur peut maintenant corriger l'erreur qu'il n'aurait peut-être pas remarquée autrement et qu'il pourrait avoir du mal à retrouver par la suite.

L'une des nombreuses capacités remarquables de `Nette\SmartObject` est de lancer des exceptions lors de l'accès à des membres non déclarés.

```php
$circle = new Circle;
echo $circle->undeclared; // throws Nette\MemberAccessException
$circle->undeclared = 1; // throws Nette\MemberAccessException
$circle->unknownMethod(); // throws Nette\MemberAccessException
```

Mais il a beaucoup plus à offrir !

.[note]
Utilisez `SmartObject` uniquement pour les classes de base qui n'héritent de personne, la fonctionnalité sera transmise à tous ses descendants.


Voulez-vous dire ? .[#toc-did-you-mean]
=======================================

Si vous faites une faute de frappe en accédant à une variable d'objet ou en appelant une méthode, une exception est levée et tente de vous indiquer où se trouve l'erreur. Elle contient l'addendum iconique "did you mean ?".

```php
class Foo
{
	use Nette\SmartObject;

	public static function from($var)
	{
		// ...
	}
}

$foo = Foo::form($var);
// it throws Nette\MemberAccessException
// "Call to undefined static method Foo::form(), did you mean from()?"
```

Certaines fautes de frappe peuvent être littéralement invisibles. Le cerveau est habitué à voir à la fois `form` et `from`, et il peut facilement arriver que vous regardiez le nom de la méthode et ne voyiez pas l'erreur, même si vous n'êtes pas dyslexique. Mais si vous lisez `Foo::form(), did you mean from()?` dans le texte de l'exception, vous vous rendrez immédiatement compte de la faute de frappe.

SmartObject inclut dans les suggestions non seulement toutes les méthodes et propriétés de la classe, mais aussi les membres magiques/virtuels définis par les annotations `@method` et `@property`. Et surtout, Tracy peut corriger ces erreurs [automatiquement |tracy:open-files-in-ide#toc-demos].


Propriétés, Getters et Setters .[#toc-properties-getters-and-setters]
=====================================================================

*(Pour les programmeurs plus expérimentés)*

Dans les langages modernes orientés objet (par exemple C#, Python, Ruby, JavaScript), le terme *propriété* fait référence aux [membres spéciaux |https://en.wikipedia.org/wiki/Property_(programming)] d'une classe, qui ressemblent à des variables mais sont représentés par des méthodes. Lorsque l'on lit ou assigne des valeurs à ces "variables", ce sont des méthodes qui sont appelées à la place (appelées getters et setters). Il s'agit d'une fonctionnalité très utile, qui nous permet de contrôler l'accès à ces variables. Grâce à elle, nous pouvons valider les entrées ou reporter le calcul des valeurs de ces variables au moment où l'on y accède réellement.

Toute classe qui utilise `Nette\SmartObject` acquiert la capacité d'imiter les propriétés. Comment faire ?

- Ajoutez une annotation à la classe sous la forme `@property <type> $xyz`
- Créez un getter nommé `getXyz()` ou `isXyz()`, un setter nommé `setXyz()`
- Le getter et le setter doivent être *public* ou *protégé* et les deux sont optionnels, donc il peut y avoir des propriétés *lire seulement* ou *écrire seulement

Nous allons utiliser les propriétés de la classe Circle pour nous assurer que la variable `$radius` ne contient que des nombres non négatifs. Nous remplacerons `public $ radius` par la propriété :

```php
/**
 * @property float $radius
 * @property-read bool $visible
 */
class Circle
{
	use Nette\SmartObject;

	private float $radius = 0.0; // n'est plus public !

	// getter pour la propriété $radius
	protected function getRadius(): float
	{
		return $this->radius;
	}

	// setter pour la propriété $radius
	protected function setRadius(float $radius): void
	{
		// assainissement de la valeur avant de l'enregistrer
		$this->radius = max(0.0, $radius);
	}

	// getter pour la propriété $visible
	protected function isVisible(): bool
	{
		return $this->radius > 0;
	}
}

$circle = new Circle;
$circle->radius = 10;  // calls setRadius(10)
echo $circle->radius;  // calls getRadius()
echo $circle->visible; // calls isVisible()
```

Les propriétés sont principalement un sucre syntaxique pour embellir le code et faciliter la vie du programmeur. Vous n'êtes pas obligé de les utiliser, si vous ne le souhaitez pas.


Événements .[#toc-events]
=========================

*(Pour les programmeurs plus expérimentés)*

Maintenant nous allons créer des fonctions, qui seront appelées lorsque le rayon change. Appelons-le `change` événement et ces fonctions gestionnaires d'événements :

```php
class Circle
{
	use Nette\SmartObject;

	public array $onChange = [];

	public function setRadius(float $radius): void
	{
		// elle appelle des callbacks dans $onChange avec les paramètres $this, $radius
		$this->onChange($this, $radius);
		// mieux : Nette\Utils\Arrays::invoke($this->onChange, $this, $radius);

		$this->radius = max(0.0, $radius);
	}
}

$circle = new Circle;

// ajout d'un gestionnaire d'événements
$circle->onChange[] = function (Circle $circle, float $newValue): void {
	echo 'il y a eu un changement !
};

$circle->setRadius(10);
```

Dans le code de la méthode `setRadius`, vous voyez un sucre syntaxique - au lieu d'itérer sur le tableau `$onChange` et d'appeler chaque callback, il suffit d'écrire un simple `onChange(...)` et de spécifier les paramètres qui sont passés à chaque callback. Ainsi, SmartObject crée une méthode fictive `onChange()` nommée d'après le tableau `$onChange`. Une convention de `on` + mot est nécessaire.

Pour des raisons de clarté du code, nous vous recommandons d'éviter ce sucre syntaxique et d'utiliser la fonction [Nette\Utils\Arrays::invoke |arrays#invoke] pour appeler les callbacks.


Classes statiques .[#toc-static-classes]
========================================

Vous pouvez marquer les classes statiques, c'est-à-dire les classes qui ne sont pas destinées à être instanciées, avec le trait `Nette\StaticClass`:

```php
class Strings
{
	use Nette\StaticClass;
}
```

Lorsque vous essayez de l'instancier, une exception `Error` est levée avec l'information que la classe spécifiée est statique.
