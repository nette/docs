Callback'lerle Çalışma
**********************

.[perex]
[api:Nette\Utils\Callback], [PHP callback'leri |https://www.php.net/manual/en/language.types.callable.php] ile çalışmak için fonksiyonlar içeren statik bir sınıftır.


Kurulum:

```shell
composer require nette/utils
```

Tüm örnekler, oluşturulmuş bir takma ad varsayar:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

`$callable` değişkeninin geçerli bir callback olup olmadığını kontrol eder. Aksi takdirde `Nette\InvalidArgumentException` fırlatır. Eğer `$syntax` true ise, fonksiyon yalnızca `$callable`'ın bir callback yapısına sahip olduğunu doğrular, ancak belirtilen sınıfın veya metodun gerçekten var olup olmadığını doğrulamaz. `$callable`'ı döndürür.

```php
Callback::check('trim'); // istisna fırlatmaz
Callback::check(['NonExistentClass', 'method']); // Nette\InvalidArgumentException fırlatır
Callback::check(['NonExistentClass', 'method'], true); // istisna fırlatmaz
Callback::check(function () {}); // istisna fırlatmaz
Callback::check(null); // Nette\InvalidArgumentException fırlatır
```


toString($callable): string .[method]
-------------------------------------

PHP callback'ini metin biçimine dönüştürür. Sınıf veya metot mevcut olmayabilir.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

PHP callback'indeki metot veya fonksiyon için yansımayı döndürür.

```php
$ref = Callback::toReflection('trim');
// $ref, ReflectionFunction('trim')'dir

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref, ReflectionMethod('MyClass', 'method')'dir
```


isStatic($callable): bool .[method]
-----------------------------------

PHP callback'inin bir fonksiyon mu yoksa statik bir metot mu olduğunu belirler.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

`Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php kullanılarak oluşturulan bir Closure'ı geri açar.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
