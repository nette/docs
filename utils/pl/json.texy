Praca z JSON
************

.[perex]
[api:Nette\Utils\Json] to klasa statyczna z funkcjami do kodowania i dekodowania formatu JSON. Obsługuje podatności różnych wersji PHP i rzuca wyjątki w przypadku błędów.


Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają utworzony alias:

```php
use Nette\Utils\Json;
```


Użycie
======


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Konwertuje `$value` do formatu JSON.

Przy ustawieniu `$pretty` na `true` sformatuje JSON dla łatwiejszego czytania i przejrzystości:

```php
Json::encode($value); // zwraca JSON
Json::encode($value, pretty: true); // zwraca bardziej przejrzysty JSON
```

Przy `$asciiSafe` na `true` wygeneruje wyjście w ASCII, tj. znaki unicode zastąpi sekwencjami `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Parametr `$htmlSafe` na `true` zapewni, że wyjście nie będzie zawierać znaków mających specjalne znaczenie w HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Z `$forceObjects` na `true` nawet tablice z kluczami numerycznymi będą kodowane jako obiekty JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

W przypadku błędu rzuca wyjątek `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Obsługa wyjątku
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parsuje JSON do PHP.

Ustawienie `$forceArray` na `true` wymusi zwracanie tablic zamiast obiektów:

```php
Json::decode('{"variable": true}'); // zwraca obiekt typu stdClass
Json::decode('{"variable": true}', forceArrays: true); // zwraca tablicę
```

W przypadku błędu rzuca wyjątek `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Obsługa wyjątku
}
```


Jak wysłać JSON z presentera?
=============================

Można do tego użyć metody `$this->sendJson($data)`, którą możemy wywołać na przykład w metodzie `action*()`, zobacz [Wysyłanie odpowiedzi|application:presenters#Odeslání odpovědi].
