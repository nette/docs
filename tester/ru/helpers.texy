Помощники
*********


DomQuery
--------
`Tester\DomQuery` это класс, расширяющий `SimpleXMLElement` с методами, облегчающими тестирование содержимого HTML или XML.

```php
# let's have an HTML document in $html that we load
$dom = Tester\DomQuery::fromHtml($html);

# we can test the presence of elements using CSS selectors
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[type="submit"]'));

# or select elements as array of DomQuery
$elems = $dom->find('input[data-autocomplete]');
```


FileMock
--------
`Tester\FileMock` эмулирует файлы в памяти, чтобы помочь вам протестировать код, который использует функции типа `fopen()`, `file_get_contents()` или `parse_ini_file()`. Например:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Это не утверждение, а помощник для тестирования приватных методов и свойств объектов.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // accessible private $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Метод `purge()` создает указанный каталог и, если он уже существует, удаляет все его содержимое. Он удобен для создания временных каталогов. Например, в `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
Тесты запускаются параллельно. Иногда нам не нужно перекрывать время выполнения тестов. Обычно тесты баз данных нуждаются в подготовке содержимого базы данных, и им нужно, чтобы ничто не мешало им во время выполнения теста. В этих случаях мы используем `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Первый аргумент - имя блокировки. Второй - путь к каталогу для сохранения блокировки. Сначала запускается тест, который получает блокировку. Остальные тесты должны подождать, пока он завершится.


Environment::bypassFinals() .[filter]
-------------------------------------
Классы или методы, помеченные как `final`, трудно тестировать. Вызов `Tester\Environment::bypassFinals()` в начале тестирования приводит к тому, что ключевые слова `final` удаляются при загрузке кода.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- улучшает читабельность дампа ошибок (включена раскраска), иначе выводится стандартная трассировка стека PHP
- позволяет проверить, что утверждения были вызваны в тесте, иначе тесты без (например, забытых) утверждений тоже пройдут
- автоматически запускает сборщик покрытия кода при использовании `--coverage` (описано позже)
- печатает статус OK или FAILURE в конце скрипта


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Создает глобальные функции `test()`, `setUp()` и `tearDown()`, на которые можно разбить тесты.

```php
test('описание теста', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Позволяет узнать, был ли тест запущен напрямую или через Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# run by Tester
} else {
	# another way
}
```


Environment::VariableThread .[filter]
-------------------------------------
Tester запускает тесты параллельно в заданном количестве потоков. Мы найдем номер потока в переменной окружения, когда нас это заинтересует:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::VariableThread);
```
