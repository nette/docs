Funkcije polja
**************

.[perex]
Ta stran govori o razredih [Nette\Utils\Arrays |#Arrays], [ArrayHash |#ArrayHash] in [ArrayList |#ArrayList], ki so povezani z polji.


Namestitev:

```shell
composer require nette/utils
```


Mreže .[#toc-arrays]
====================

[api:Nette\Utils\Arrays] je statični razred, ki vsebuje nekaj priročnih funkcij za polja. Njegov ekvivalent za iteratorje je [Nette\Utils\Iterables |iterables].

Naslednji primeri predpostavljajo, da je definiran naslednji vzdevek razreda:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Funkcija fleksibilno preoblikuje `$array` v asociativno polje ali predmete v skladu z določeno potjo `$path`. Pot je lahko niz ali polje. Sestavljena je iz imen ključev v vhodnem polju in operatorjev, kot so "[]", "->", "=" in "|". Če je pot neveljavna, se vrže `Nette\InvalidArgumentException`.

```php
// pretvorba v asociativno polje z uporabo preprostega ključa
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    //...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// pripisovanje vrednosti z ene tipke na drugo s pomočjo operatorja =
$result = Arrays::associate($arr, 'name=age'); // ali ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// ustvarjanje objekta z uporabo operatorja ->
$result = Arrays::associate($arr, '->name'); // ali ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// združevanje tipk z uporabo operatorja |
$result = Arrays::associate($arr, 'name|age'); // ali ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// dodajanje v polje z uporabo []
$result = Arrays::associate($arr, 'name[]'); // ali ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Preizkusi polje glede prisotnosti vrednosti. Uporablja strogo primerjavo (`===`)

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Preizkusi, ali vsi elementi v polju prestanejo test, ki ga izvaja navedena funkcija s podpisom `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Glejte [some( |#some()]).


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Vrne novo polje, ki vsebuje vse pare ključ-vrednost, ki ustrezajo danemu `$predicate`. Povratni klic ima podpis `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Vrne prvi element (ki ustreza določenemu predikatu, če je podan). Če takega elementa ni, vrne rezultat klica `$else` ali nič.
 `$predicate` ima podpis `function ($value, int|string $key, array $array): bool`.

Za razliko od `reset()` ne spreminja notranjega kazalca. Parametra `$predicate` in `$else` obstajata od različice 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Glej [last() |#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Vrne ključ prvega elementa (ki ustreza določenemu predikatu, če je podan) ali nič, če takega elementa ni. `$predicate` ima podpis `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Glej [lastKey( |#lastKey()]).


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Večdimenzionalno polje pretvori v ravno polje.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Vrne `$array[$key]` item. Če ne obstaja, se vrže `Nette\InvalidArgumentException`, razen če je kot tretji argument določena privzeta vrednost.

```php
// če $array['foo'] ne obstaja, vrže izjemo
$value = Arrays::get($array, 'foo');

// če $array['foo'] ne obstaja, vrne 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Argument `$key` je lahko tudi polje.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrne 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Pridobi referenco na dani `$array[$key]`. Če indeks ne obstaja, se ustvari nov indeks z vrednostjo `null`.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// vrne referenco $array['foo']
```

Deluje z večdimenzionalnimi polji in funkcijo [get() |#get()].

```php
$value = & Arrays::get($array, ['color', 'favorite']);
// vrne referenco $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Vrne samo tiste elemente polja, ki ustrezajo regularnemu izrazu `$pattern`. Če je `$invert` `true` , vrne elemente, ki se ne ujemajo. Napaka pri sestavljanju ali izvajanju regexa vrže `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// vrne samo številčne elemente
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Vsebino polja `$inserted` vstavi v polje `$array` takoj za `$key`. Če je `$key` `null` (ali ne obstaja), se vstavi na konec.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Vsebino polja `$inserted` vstavi v polje `$array` pred `$key`. Če je `$key` `null` (ali ne obstaja), se vstavi na začetek.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Prikliče vse povratne klice in vrne polje rezultatov.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Prikliče metodo za vsak predmet v polju in vrne polje rezultatov.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Preveri, ali je polje indeksirano v naraščajočem vrstnem redu številskih ključev od nič, tj. seznam.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Vrne zadnji element (ki ustreza določenemu predikatu, če je podan). Če takega elementa ni, vrne rezultat klica `$else` ali nič.
 `$predicate` ima podpis `function ($value, int|string $key, array $array): bool`.

Za razliko od `end()` ne spreminja notranjega kazalca. Parametra `$predicate` in `$else` obstajata od različice 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Glej [first( |#first()]).


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Vrne ključ zadnjega elementa (ki ustreza določenemu predikatu, če je podan) ali nič, če takega elementa ni. `$predicate` ima podpis `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Glej [firstKey( |#firstKey()]).


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Kliče `$transformer` na vse elemente v polju in vrne polje vrnjenih vrednosti. Povratni klic ima podpis `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Ustvari novo polje s preoblikovanjem vrednosti in ključev prvotnega polja. Funkcija `$transformer` ima podpis `function ($value, $key, array $array): ?array{$newValue, $newKey}`. Če `$transformer` vrne `null`, se element preskoči. Pri ohranjenih elementih se prvi element vrnjenega polja uporabi kot novi ključ, drugi element pa kot nova vrednost.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Ta metoda je uporabna v primerih, ko je treba spremeniti strukturo polja (hkrati ključe in vrednosti) ali filtrirati elemente med transformacijo (tako, da se za neželene elemente vrne ničla).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Rekurzivno združi dve polji. Uporabna je na primer za združevanje drevesnih struktur. Obnaša se kot operator `+` za polje, tj. doda par ključ/vrednost iz drugega polja v prvo in v primeru trka ključev ohrani vrednost iz prvega polja.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Vrednosti iz drugega polja se vedno dodajo prvemu. Izginotje vrednosti `10` iz drugega polja se lahko zdi nekoliko zmedeno. Opozoriti je treba, da je ta vrednost kot tudi vrednost `5` in the first array have the same numeric key `0`, zato je v dobljenem polju samo element iz prvega polja.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Normalizira polje v asociativno polje. Numerične ključe zamenja z njihovimi vrednostmi, nova vrednost bo `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Vrne in odstrani vrednost elementa iz polja. Če ne obstaja, vrže izjemo ali vrne `$default`, če je naveden.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// vrže Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Preimenuje ključ. Če je bil ključ najden v polju, vrne `true`.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Vrne ničelno indeksiran položaj danega ključa v polju. Vrne `null`, če ključa ni mogoče najti.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // vrne 0
$position = Arrays::getKeyOffset($array, 'second'); // vrne 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // vrne nič
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Preizkusi, ali vsaj en element v polju prestane test, ki ga izvaja posredovani povratni klic s podpisom `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Glej [every( |#every()]).


toKey(mixed $key): string|int .[method]
---------------------------------------

Pretvori vrednost v ključ polja, ki je bodisi celo število bodisi niz.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Kopira elemente polja `$array` v objekt `$object` in ga nato vrne.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // nastavi $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Vsak element polja pretvori v niz in ga obkroži z objektoma `$prefix` in `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash .[#toc-arrayhash]
===========================

Objekt [api:Nette\Utils\ArrayHash] je potomec generičnega razreda stdClass in ga razširi na možnost, da ga obravnava kot polje, na primer dostop do članov z uporabo oglatih oklepajev:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // deluje tudi zapis predmeta
$hash->foo; // 123
```

Za pridobitev števila elementov lahko uporabite funkcijo `count($hash)`.

Po objektu lahko iterirate tako kot po polju, tudi z referenco:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Obstoječa polja lahko pretvorite v `ArrayHash` z uporabo `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Pretvorba je rekurzivna:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // objekt ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Lahko se ji izognemo z drugim parametrom:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // polje
```

Preoblikovanje nazaj v polje:

```php
$array = (array) $hash;
```


ArrayList .[#toc-arraylist]
===========================

[api:Nette\Utils\ArrayList] predstavlja linearno polje, v katerem so indeksi samo cela števila, naraščajoča od 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Za pridobitev števila elementov lahko uporabite funkcijo `count($list)`.

Po predmetu lahko iterirate tako kot po polju, tudi z referenco:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

Obstoječa polja lahko pretvorite v `ArrayList` z uporabo `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Dostop do ključev, ki presegajo dovoljene vrednosti, vrže izjemo `Nette\OutOfRangeException`:

```php
echo $list[-1]; // vrže Nette\OutOfRangeException
unset($list[30]); // vrže Nette\OutOfRangeException
```

Odstranitev ključa povzroči preštevilčenje elementov:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Na začetek lahko dodate nov element z uporabo `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
