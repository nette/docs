Работа с изображения
********************

.[perex]
Класът [api:Nette\Utils\Image] опростява манипулирането на изображения, като например преоразмеряване, изрязване, изостряне, рисуване или комбиниране на няколко изображения.


PHP разполага с богат набор от функции за манипулиране на изображения. Но API-то им не е много удобно. Това не би бил Nette Framework, ако не предлагаше секси API.

Инсталация:

```shell
composer require nette/utils
```

Всички примери предполагат създаден псевдоним:

```php
use Nette\Utils\Image;
use Nette\Utils\ImageColor;
use Nette\Utils\ImageType;
```


Създаване на изображение
========================

Създаваме ново true color изображение, например с размери 100×200:

```php
$image = Image::fromBlank(100, 200);
```

По желание може да се определи цвят на фона (по подразбиране е черен):

```php
$image = Image::fromBlank(100, 200, ImageColor::rgb(125, 0, 0));
```

Или зареждаме изображение от файл:

```php
$image = Image::fromFile('nette.jpg');
```


Запазване на изображение
========================

Изображението може да бъде запазено във файл:

```php
$image->save('resampled.jpg');
```

Можем да определим качеството на компресия в диапазона 0..100 за JPEG (по подразбиране 85), WEBP (по подразбиране 80) и AVIF (по подразбиране 30) и 0..9 за PNG (по подразбиране 9):

```php
$image->save('resampled.jpg', 80); // JPEG, качество 80%
```

Ако форматът не е ясен от разширението на файла, може да се определи с [константа|#Formáty]:

```php
$image->save('resampled.tmp', null, ImageType::JPEG);
```

Изображението може да бъде записано в променлива вместо на диск:

```php
$data = $image->toString(ImageType::JPEG, 80); // JPEG, качество 80%
```

или да се изпрати директно в браузъра със съответния HTTP хедър `Content-Type`:

```php
// изпраща хедър Content-Type: image/png
$image->send(ImageType::PNG);
```


Формати
=======

Поддържаните формати са JPEG, PNG, GIF, WebP, AVIF и BMP, но те трябва да бъдат поддържани и от вашата версия на PHP, което можете да проверите с функцията [#isTypeSupported()]. Анимациите не се поддържат.

Форматът се представя от константите `ImageType::JPEG`, `ImageType::PNG`, `ImageType::GIF`, `ImageType::WEBP`, `ImageType::AVIF` и `ImageType::BMP`.

```php
$supported = Image::isTypeSupported(ImageType::JPEG);
```

Трябва ли да откриете формата на изображението при зареждане? Методът го връща във втория параметър:

```php
$image = Image::fromFile('nette.jpg', $type);
```

Самото откриване без зареждане на изображението се извършва от `Image::detectTypeFromFile()`.


Преоразмеряване
===============

Честа операция е промяната на размерите на изображението. Текущите размери се връщат от методите `getWidth()` и `getHeight()`.

За промяна се използва методът `resize()`. Пример за пропорционално преоразмеряване, така че да не надвишава размери 500x300 пиксела (или ширината ще бъде точно 500 px, или височината ще бъде точно 300 px, единият от размерите се изчислява така, че да се запази съотношението на страните):

```php
$image->resize(500, 300);
```

Възможно е да се посочи само един размер, а другият ще бъде изчислен:

```php
$image->resize(500, null); // ширина 500px, височината се изчислява

$image->resize(null, 300); // ширината се изчислява, височина 300px
```

Всеки размер може да бъде посочен и в проценти:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Поведението на `resize` може да се повлияе от следните флагове. Всички, освен `Image::Stretch`, запазват съотношението на страните.

|---------------------------------------------------------------------------------------
| Флаг                   | Описание
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (по подразбиране) | крайните размери ще бъдат по-малки или равни на исканите размери
| `Image::OrBigger`         | запълва (и евентуално надхвърля в един размер) целевата площ
| `Image::Cover`            | запълва целевата площ и изрязва това, което надхвърля
| `Image::ShrinkOnly`       | само намаляване (предотвратява разтягането на малко изображение)
| `Image::Stretch`          | не запазва съотношението на страните


Флаговете се посочват като трети аргумент на функцията:

```php
$image->resize(500, 300, Image::OrBigger);
```

Флаговете могат да се комбинират:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Изображенията могат да бъдат обърнати вертикално или хоризонтално, като един от размерите (или и двата) се посочи като отрицателно число:

```php
$flipped = $image->resize(null, '-100%'); // обръщане вертикално

$flipped = $image->resize('-100%', '-100%'); // завъртане на 180°

$flipped = $image->resize(-125, 500); // преоразмеряване и обръщане хоризонтално
```

След намаляване на размера на изображението е възможно да се подобри външният му вид чрез леко изостряне:

```php
$image->sharpen();
```


Изрязване
=========

За изрязване се използва методът `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Подобно на `resize()`, всички стойности могат да бъдат посочени в проценти. Процентите за `$left` и `$top` се изчисляват от оставащото място, подобно на CSS свойството `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Изображението може също да бъде изрязано автоматично, например изрязване на черни рамки:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Методът `cropAuto()` е обектен заместител на функцията `imagecropauto()`, в [нейната документация|https://www.php.net/manual/en/function.imagecropauto] ще намерите повече информация.


Цветове .{data-version:4.0.2}
=============================

Методът `ImageColor::rgb()` ви позволява да дефинирате цвят чрез стойностите на червено, зелено и синьо (RGB). По желание можете да посочите и стойност на прозрачност в диапазона от 0 (напълно прозрачно) до 1 (напълно непрозрачно), т.е. същото като в CSS.

```php
$color = ImageColor::rgb(255, 0, 0); // Червено
$transparentBlue = ImageColor::rgb(0, 0, 255, 0.5); // Полупрозрачно синьо
```

Методът `ImageColor::hex()` позволява да дефинирате цвят чрез шестнадесетичен формат, подобно на CSS. Поддържа форматите `#rgb`, `#rrggbb`, `#rgba` и `#rrggbbaa`:

```php
$color = ImageColor::hex("#F00"); // Червено
$transparentGreen = ImageColor::hex("#00FF0080"); // Полупрозрачно зелено
```

Цветовете могат да се използват в други методи, като `ellipse()`, `fill()` и т.н.


Рисуване и редакции
===================

Можеш да рисуваш, можеш да пишеш, но не късай листата. На ваше разположение са всички функции на PHP за работа с изображения, вижте [#Преглед на методите], но в обектна обвивка:

```php
$image->filledEllipse($centerX, $centerY, $width, $height, ImageColor::rgb(255, 0, 0));
```

Тъй като PHP функциите за рисуване на правоъгълници са непрактични поради определянето на координати, класът `Image` предлага техни заместители под формата на функциите [#rectangleWH()] и [#filledRectangleWH()].


Комбиниране на няколко изображения
==================================

В изображението лесно може да се вмъкне друго изображение:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, ImageColor::rgb(52, 132, 210));

// координатите могат да бъдат посочени отново в проценти
$blank->place($logo, '80%', '80%'); // вмъкваме близо до долния десен ъгъл
```

При вмъкването се спазва алфа каналът, освен това можем да повлияем на прозрачността на вмъкваното изображение (създаваме т.нар. воден знак):

```php
$blank->place($image, '80%', '80%', 25); // прозрачността е 25 %
```

Такова API е наистина удоволствие да се използва!


Преглед на методите
===================


static fromBlank(int $width, int $height, ?ImageColor $color=null): Image .[method]
-----------------------------------------------------------------------------------
Създава ново true color изображение с дадените размери. Цветът по подразбиране е черен.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Зарежда изображение от файл и връща неговия [тип|#Formáty] в `$detectedFormat`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Зарежда изображение от низ и връща неговия [тип|#Formáty] в `$detectedFormat`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method][deprecated]
---------------------------------------------------------------------------------------------
Тази функция е заменена от класа `ImageColor`, вижте [цветове|#Barvy].


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Връща разширението на файла за дадения [тип|#Formáty].


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Връща mime типа за дадения [тип|#Formáty].


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Връща [тип|#Formáty] на изображението според разширението на файла.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Връща [тип|#Formáty] на изображението и в параметрите `$width` и `$height` също неговите размери.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Връща [тип|#Formáty] на изображението от низ и в параметрите `$width` и `$height` също неговите размери.


static isTypeSupported(int $type): bool .[method]
-------------------------------------------------
Проверява дали даденият [тип|#Formáty] на изображението е поддържан.


static getSupportedTypes(): array .[method]{data-version:4.0.4}
---------------------------------------------------------------
Връща масив от поддържаните [типове|#Formáty] на изображения.


static calculateTextBox(string $text, string $fontFile, float $size, float $angle=0, array $options=[]): array .[method]
------------------------------------------------------------------------------------------------------------------------
Изчислява размерите на правоъгълника, който обхваща текста с определен шрифт и размер. Връща асоциативен масив, съдържащ ключовете `left`, `top`, `width`, `height`. Левият ръб може да бъде и отрицателен, ако текстът започва с ляво подрязване.


affine(array $affine, ?array $clip=null): Image .[method]
---------------------------------------------------------
Върнете изображение, съдържащо афинно трансформирано изображение src, като използвате незадължителна област на изрязване. ([повече |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Връща конкатенацията на две афинни трансформационни матрици, което е полезно, ако няколко трансформации трябва да се приложат едновременно към едно и също изображение. ([повече |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, ?mixed $options=null): array .[method]
-----------------------------------------------------------------
Връща матрична трансформационна матрица. ([повече |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Позволява два различни режима на рисуване в truecolor изображения. В режим на смесване, алфа каналният компонент на цвета, използван във всички функции за рисуване, като `setPixel()`, определя до каква степен трябва да се позволи на основния цвят да прозира. В резултат на това съществуващият цвят в този момент автоматично се смесва с рисувания цвят и резултатът се запазва в изображението. Крайният пиксел е непрозрачен. В режим без смесване, рисуваният цвят се копира буквално с информацията за алфа канала и замества целевия пиксел. Режимът на смесване не е наличен при рисуване върху палетни изображения. ([повече |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Активирайте рисуването на изгладени линии и полигони. Не поддържа алфа канали. Работи само с truecolor изображения.

Използването на антиалиасни примитиви с прозрачен цвят на фона може да доведе до неочаквани резултати. Методът на смесване използва цвета на фона като всички останали цветове. ([повече |https://www.php.net/manual/en/function.imageantialias])


arc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color): void .[method]
---------------------------------------------------------------------------------------------------------------------------
Рисува дъга от кръг с център в дадените координати. ([повече |https://www.php.net/manual/en/function.imagearc])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Връща идентификатор на цвят, представляващ цвета, съставен от дадените RGB компоненти. Трябва да се извика за създаване на всеки цвят, който ще се използва в изображението. ([повече |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Действа по същия начин като `colorAllocate()` с добавяне на параметър за прозрачност `$alpha`. ([повече |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Връща индекса на цвета на пиксела на определеното място в изображението. Ако изображението е truecolor, тази функция връща RGB стойността на този пиксел като цяло число. Използвайте битово изместване и битово маскиране за достъп до отделните стойности на червения, зеления и синия компонент: ([повече |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Връща индекса на цвета в палитрата на изображението, който е „най-близък“ до зададената RGB стойност. "Разстоянието" между искания цвят и всеки цвят в палитрата се изчислява, сякаш RGB стойностите представляват точки в триизмерно пространство. ([повече |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Връща индекса на цвета в палитрата на изображението, който е „най-близък“ до зададената RGB стойност и ниво `$alpha`. ([повече |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Получете индекса на цвета, който има оттенък, бяло и черно най-близо до дадения цвят. ([повече |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Де-алокира цвят, предварително разпределен с `colorAllocate()` или `colorAllocateAlpha()`. ([повече |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Връща индекса на зададения цвят в палитрата на изображението. ([повече |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Връща индекса на зададения цвят + алфа в палитрата на изображението. ([повече |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Приспособява цветовете на палитрата към второто изображение. ([повече |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Връща индекс на цвят за искания цвят, или точния цвят, или най-близката възможна алтернатива. ([повече |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Връща индекс на цвят за искания цвят, или точния цвят, или най-близката възможна алтернатива. ([повече |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Задава указания индекс в палитрата на зададения цвят. ([повече |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Получава цвета на указания индекс. ([повече |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Връща броя на цветовете в палитрата на изображението. ([повече |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(?int $color=null): int .[method]
-------------------------------------------------
Получава или задава прозрачния цвят в изображението. ([повече |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Прилага конволюционна матрица към изображението, като използва дадения коефициент и отместване. ([повече |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Изисква наличието на *Bundled GD extension*, така че може да не работи навсякъде.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Копира част от `$src` върху изображението, започвайки от координати `$srcX`, `$srcY` с ширина `$srcW` и височина `$srcH`. Дефинираната част ще бъде копирана на координати `$dstX` и `$dstY`. ([повече |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Копира част от `$src` върху изображението, започвайки от координати `$srcX`, `$srcY` с ширина `$srcW` и височина `$srcH`. Дефинираната част ще бъде копирана на координати `$dstX` и `$dstY`. ([повече |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Копира част от `$src` върху изображението, започвайки от координати `$srcX`, `$srcY` с ширина `$srcW` и височина `$srcH`. Дефинираната част ще бъде копирана на координати `$dstX` и `$dstY`.

Тази функция е идентична с `copyMerge()` с изключение на това, че при сливането запазва оттенъка на източника, като преобразува целевите пиксели в сива скала преди операцията по копиране. ([повече |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Копира правоъгълна част от едно изображение върху друго изображение, гладко интерполира стойностите на пикселите, така че особено намаляването на размера на изображението все още запазва голяма яснота.

С други думи, `copyResampled()` взема правоъгълна област от `$src` с ширина `$srcW` и височина `$srcH` в позиция (`$srcX`, `$srcY`) и я поставя в правоъгълна област на изображението с ширина `$dstW` и височина `$dstH` в позиция (`$dstX`, `$dstY`).

Ако изходните и целевите координати, ширина и височина се различават, се извършва съответното разтягане или свиване на фрагмента на изображението. Координатите се отнасят до горния ляв ъгъл. Тази функция може да се използва за копиране на области в рамките на едно и също изображение, но ако областите се припокриват, резултатите няма да бъдат предвидими. ([повече |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Копира правоъгълна част от едно изображение върху друго изображение. С други думи, `copyResized()` получава правоъгълна област от `$src` с ширина `$srcW` и височина `$srcH` в позиция (`$srcX`, `$srcY`) и я поставя в правоъгълна област на изображението с ширина `$dstW` ] и височина `$dstH` в позиция (`$dstX`, `$dstY`).

Ако изходните и целевите координати, ширина и височина се различават, се извършва съответното разтягане или свиване на фрагмента на изображението. Координатите се отнасят до горния ляв ъгъл. Тази функция може да се използва за копиране на области в рамките на едно и също изображение, но ако областите се припокриват, резултатите няма да бъдат предвидими. ([повече |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Изрязва изображението до дадената правоъгълна област. Размерите могат да се задават като цели числа в пиксели или низове в проценти (например `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, ?ImageColor $color=null): Image .[method]
-------------------------------------------------------------------------------------
Автоматично изрязва изображението според дадения `$mode`. ([повече |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------
Рисува елипса с център на зададените координати. ([повече |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, ImageColor $color): void .[method]
-------------------------------------------------------
Запълва област, започвайки от дадената координата (горе вляво е 0, 0) с дадения `$color`. ([повече |https://www.php.net/manual/en/function.imagefill])


filledArc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------------------------------------------------
Рисува частична дъга с център на зададените координати. ([повече |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------------
Рисува елипса с център на зададените координати. ([повече |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------------
Създава в изображението запълнен многоъгълник. ([повече |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------
Създава правоъгълник, запълнен с `$color` в изображението, започвайки от точка `$x1` & `$y1` и завършвайки в точка `$x2` & `$y2`. Точка 0, 0 е горният ляв ъгъл на изображението. ([повече |https://www.php.net/manual/en/function.imagefilledrectangle])


filledRectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------------
Създава правоъгълник, запълнен с `$color` в изображението, започвайки от точка `$left` & `$top` с ширина `$width` и височина `$height`. Точка 0, 0 е горният ляв ъгъл на изображението.


fillToBorder(int $x, int $y, int $border, ImageColor $color): void .[method]
----------------------------------------------------------------------------
Извършва запълване, чийто цвят на границата е дефиниран с `$border`. Началната точка на запълването е `$x`, `$y` (горе вляво е 0, 0) и областта се запълва с цвят `$color`. ([повече |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Прилага дадения филтър `$filtertype` към изображението. ([повече |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Обръща изображението, използвайки дадения `$mode`. ([повече |https://www.php.net/manual/en/function.imageflip])


ftText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
----------------------------------------------------------------------------------------------------------------------------------------
Напишете текст в изображението. ([повече |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Прилага гама корекция към изображението спрямо входната и изходната гама. ([повече |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Връща текущото изрязване, т.е. областта, извън която няма да бъдат нарисувани пиксели. ([повече |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Връща височината на изображението.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Връща оригиналния ресурс.


getWidth(): int .[method]
-------------------------
Връща ширината на изображението.


interlace(?int $interlace=null): int .[method]
----------------------------------------------
Включва или изключва режима на преплитане. Ако режимът на преплитане е зададен и изображението се запазва като JPEG, то ще бъде запазено като прогресивен JPEG. ([повече |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Установява дали изображението е truecolor. ([повече |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Задайте флага за алфа смесване, за да използвате ефекти на слоеве. ([повече |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
---------------------------------------------------------------------------
Рисува линия между две дадени точки. ([повече |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, ImageColor $color): void .[method]
-------------------------------------------------------------
Рисува отворен многоъгълник върху изображението. За разлика от `polygon()`, между последната и първата точка не се рисува линия. ([повече |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Копира палитрата от `$source` в изображението. ([повече |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Преобразува изображение, базирано на палитра, в пълноцветно изображение. ([повече |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Копира `$image` в изображението на координати `$left` и `$top`. Координатите могат да се задават като цели числа в пиксели или низове в проценти (например `'50%'`).


polygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------
Създава многоъгълник в изображението. ([повече |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------
Създава правоъгълник на зададените координати. ([повече |https://www.php.net/manual/en/function.imagerectangle])


rectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------
Създава правоъгълник на зададените координати.


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Преоразмерява изображението, [повече информация|#Změna velikosti]. Размерите могат да се задават като цели числа в пиксели или низове в проценти (например `'50%'`).


resolution(?int $resX=null, ?int $resY=null): mixed .[method]
-------------------------------------------------------------
Задава или връща резолюцията на изображението в DPI (точки на инч). Ако не е зададен нито един от незадължителните параметри, текущата резолюция се връща като индексиран масив. Ако е зададен само `$resX`, хоризонталната и вертикалната резолюция се задават на тази стойност. Ако са зададени и двата незадължителни параметъра, хоризонталната и вертикалната резолюция се задават на тези стойности.

Резолюцията се използва само като мета информация, когато изображенията се четат и записват във формати, поддържащи този вид информация (в момента PNG и JPEG). Тя не влияе на никакви операции по рисуване. Резолюцията по подразбиране на новите изображения е 96 DPI. ([повече |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Завърта изображението с дадения `$angle` в градуси. Центърът на въртене е центърът на изображението и завъртяното изображение може да има различни размери от оригиналното изображение. ([повече |https://www.php.net/manual/en/function.imagerotate])

.[note]
Изисква наличието на *Bundled GD extension*, така че може да не работи навсякъде.


save(string $file, ?int $quality=null, ?int $type=null): void .[method]
-----------------------------------------------------------------------
Запазва изображението във файл.

Качеството на компресия е в диапазона 0..100 за JPEG (по подразбиране 85), WEBP (по подразбиране 80) и AVIF (по подразбиране 30) и 0..9 за PNG (по подразбиране 9). Ако типът не е ясен от разширението на файла, можете да го зададете с помощта на една от константите `ImageType`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Задава флага дали при запазване на PNG изображения да се запази пълната информация за алфа канала (за разлика от едноцветната прозрачност).

Алфа смесването трябва да бъде деактивирано (`alphaBlending(false)`), за да се запази алфа каналът на първо място. ([повече |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Мащабира изображението, използвайки дадения интерполационен алгоритъм. ([повече |https://www.php.net/manual/en/function.imagescale])


send(int $type=ImageType::JPEG, ?int $quality=null): void .[method]
-------------------------------------------------------------------
Извежда изображението в браузъра.

Качеството на компресия е в диапазона 0..100 за JPEG (по подразбиране 85), WEBP (по подразбиране 80) и AVIF (по подразбиране 30) и 0..9 за PNG (по подразбиране 9).


setBrush(Image $brush): void .[method]
--------------------------------------
Задава изображението на четката, което ще се използва във всички функции за рисуване на линии (например `line()` и `polygon()`) при рисуване със специалните цветове IMG_COLOR_BRUSHED или IMG_COLOR_STYLEDBRUSHED. ([повече |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Задава текущото изрязване, т.е. областта, извън която няма да бъдат нарисувани пиксели. ([повече |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Задава метода на интерполация, който влияе на методите `rotate()` и `affine()`. ([повече |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, ImageColor $color): void .[method]
-----------------------------------------------------------
Рисува пиксел на зададената координата. ([повече |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Задава стила, който трябва да се използва от всички функции за рисуване на линии (например `line()` и `polygon()`) при рисуване със специалния цвят IMG_COLOR_STYLED или линии от изображения с цвят IMG_COLOR_STYLEDBRUSHED. ([повече |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Задава дебелината на линиите при рисуване на правоъгълници, многоъгълници, дъги и т.н. на `$thickness` пиксела. ([повече |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Задава изображението на плочката, което ще се използва във всички функции за запълване на региони (например `fill()` и `filledPolygon()`), когато се запълва със специалния цвят IMG_COLOR_TILED.

Плочката е изображение, използвано за запълване на област с повтарящ се модел. Всяко изображение може да се използва като плочка и чрез задаване на прозрачен цветен индекс на изображението на плочката с `colorTransparent()` може да се създаде плочка, където определени части от подлежащата област ще прозират. ([повече |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Изостря изображението.

.[note]
Изисква наличието на *Bundled GD extension*, така че може да не работи навсякъде.


toString(int $type=ImageType::JPEG, ?int $quality=null): string .[method]
-------------------------------------------------------------------------
Запазва изображението в низ.

Качеството на компресия е в диапазона 0..100 за JPEG (по подразбиране 85), WEBP (по подразбиране 80) и AVIF (по подразбиране 30) и 0..9 за PNG (по подразбиране 9).


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Преобразува truecolor изображение в палетно. ([повече |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
-----------------------------------------------------------------------------------------------------------------------------------------
Извежда дадения текст в изображението. ([повече |https://www.php.net/manual/en/function.imagettftext])
