Trabajo con callbacks
*********************

.[perex]
[api:Nette\Utils\Callback] es una clase estática con funciones para trabajar con [callbacks de PHP |https://www.php.net/manual/en/language.types.callable.php].


Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que se ha creado un alias:

```php
use Nette\Utils\Callback;
```


check($callable, bool $syntax=false): callable .[method]
--------------------------------------------------------

Comprueba si la variable `$callable` es un callback válido. De lo contrario, lanza `Nette\InvalidArgumentException`. Si `$syntax` es true, la función solo verifica que `$callable` tenga la estructura de un callback, pero no verifica si la clase o método dado realmente existe. Devuelve `$callable`.

```php
Callback::check('trim'); // no lanza excepción
Callback::check(['NonExistentClass', 'method']); // lanza Nette\InvalidArgumentException
Callback::check(['NonExistentClass', 'method'], true); // no lanza excepción
Callback::check(function () {}); // no lanza excepción
Callback::check(null); // lanza Nette\InvalidArgumentException
```


toString($callable): string .[method]
-------------------------------------

Convierte un callback de PHP a forma textual. La clase o método no tiene que existir.

```php
Callback::toString('trim');                // 'trim'
Callback::toString(['MyClass', 'method']); // 'MyClass::method'
```


toReflection($callable): ReflectionMethod|ReflectionFunction .[method]
----------------------------------------------------------------------

Devuelve la reflexión para el método o función en el callback de PHP.

```php
$ref = Callback::toReflection('trim');
// $ref es ReflectionFunction('trim')

$ref = Callback::toReflection(['MyClass', 'method']);
// $ref es ReflectionMethod('MyClass', 'method')
```


isStatic($callable): bool .[method]
-----------------------------------

Determina si un callback de PHP es una función o un método estático.

```php
Callback::isStatic('trim');                // true
Callback::isStatic(['MyClass', 'method']); // true
Callback::isStatic([$obj, 'method']);      // false
Callback::isStatic(function () {});        // false
```


unwrap(Closure $closure): callable|array .[method]
--------------------------------------------------

Desenvuelve inversamente una Closure creada mediante `Closure::fromCallable`:https://www.php.net/manual/en/closure.fromcallable.php.

```php
$closure = Closure::fromCallable(['MyClass', 'method']);
Callback::unwrap($closure);     // ['MyClass', 'method']
```
