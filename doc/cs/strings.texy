Práce s řetězci
***************

.[perex]
[api:Nette\Utils\Strings] je statická třída s užitečnými funkcemi pro práci s řetězci převážně v kódování UTF-8.


Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Strings;
```



Změna velikosti písmen
======================

lower(string $s): string .[method]
----------------------------------

Převede UTF-8 řetězec na malá písmena.

```php
echo Strings::lower('Dobrý den'); // 'dobrý den'
```


upper(string $s): string .[method]
----------------------------------

Převede UTF-8 řetězec na velká písmena.

```php
echo Strings::upper('Dobrý den'); // 'DOBRÝ DEN'
```


firstUpper(string $s): string .[method]
---------------------------------------

Převede první písmeno UTF-8 řetězce na velké, ostatní nemění.

```php
echo Strings::firstUpper('dobrý den'); // 'Dobrý den'
```


firstLower(string $s): string .[method]
---------------------------------------

Převede první písmeno UTF-8 řetězce na malé, ostatní nemění.

```php
echo Strings::firstLower('Dobrý den'); // 'dobrý den'
```


capitalize(string $s): string .[method]
---------------------------------------

Převede první písmeno každého slova v UTF-8 řetězci na velké, ostatní na malé.

```php
echo Strings::capitalize('Dobrý den'); // 'Dobrý Den'
```



Úprava řetězce
==============

normalize(string $s): string .[method]
--------------------------------------

Odstraňuje kontrolní znaky, normalizuje konce řádků na `\n`, ořízne úvodní a koncové prázdné řádky, ořízne pravostranné mezery na řádcích, normalizuje UTF-8 na normální formu NFC.


normalizeNewLines(string $s): string .[method]
----------------------------------------------

Sjednotí v řetězci konce řádků na typ používaný v unixových systémech.

```php
$unixLikeLines = Strings::normalizeNewLines($string);
```


webalize(string $s, string $charlist=null, bool $lower=true): string .[method]
------------------------------------------------------------------------------

Upraví UTF-8 řetězec do tvaru používaného v URL, tj. odstraní diakritiku a všechny znaky, kromě písmen anglické abecedy a číslic, nahradí spojovníkem.

```php
echo Strings::webalize('náš produkt'); // 'nas-produkt'
```

Mají-li být zachovány i jiné znaky, lze je uvést v druhém parametru funkce.

```php
echo Strings::webalize('10. obrázek_id', '._'); // '10.-obrazek_id'
```

Třetím parametrem lze potlačit převádění na malá písmenka.

```php
echo Strings::webalize('Dobrý den', null, false); // 'Dobry-den'
```


trim(string $s, string $charlist=null): string .[method]
--------------------------------------------------------

Ořízne mezery (nebo jiné znaky určené druhým parametrem) ze začátku a konce UTF-8 řetězce.

```php
echo Strings::trim('  Hello  '); // 'Hello'
```


truncate(string $s, int $maxLen, string $append=`'…'`): string .[method]
------------------------------------------------------------------------

Ořízne UTF-8 řetězec na uvedenou maximální délku, přičemž se snaží zachovávat celá slova. Pokud dojde ke zkrácení řetězce, přidá na konec trojtečku (lze změnit třetím parametrem).

```php
$text = 'Řekněte, jak se máte?';
echo Strings::truncate($text, 5);       // 'Řekn…'
echo Strings::truncate($text, 20);      // 'Řekněte, jak se…'
echo Strings::truncate($text, 30);      // 'Řekněte, jak se máte?'
echo Strings::truncate($text, 20, '~'); // 'Řekněte, jak se~'
```


indent(string $s, int $level=1, string $indentationChar=`"\t"`): string .[method]
---------------------------------------------------------------------------------

Odsadí víceřádkový text zleva. Počet odsazení určuje druhý parametr, čím odsazovat parametr třetí (výchozí hodnotou je tabulátor).

```php
echo Strings::indent('Nette');         // "\tNette"
echo Strings::indent('Nette', 2, '+'); // '++Nette'
```


padLeft(string $s, int $length, string $pad=`' '`): string .[method]
--------------------------------------------------------------------

Doplní UTF-8 řetězec na zadanou délku opakováním řetězce `$pad` zleva.

```php
echo Strings::padLeft('Nette', 6);        // ' Nette'
echo Strings::padLeft('Nette', 8, '+*');  // '+*+Nette'
```


padRight(string $s, int $length, string $pad=`' '`): string .[method]
---------------------------------------------------------------------

Doplní UTF-8 řetězec na zadanou délku opakováním řetězce `$pad` zprava.

```php
echo Strings::padRight('Nette', 6);       // 'Nette '
echo Strings::padRight('Nette', 8, '+*'); // 'Nette+*+'
```


substring(string $s, int $start, int $length=null): string .[method]
--------------------------------------------------------------------

Vrátí část UTF-8 řetězce `$s` zadanou počáteční pozicí `$start` a délkou `$length`. Pokud je `$start` záporný, bude vrácený řetězec začínat znakem -`$start` znakem od konce.

```php
echo Strings::substring('Nette Framework', 0, 5); // 'Nette'
echo Strings::substring('Nette Framework', 6);    // 'Framework'
echo Strings::substring('Nette Framework', -4);   // 'work'
```


reverse(string $s): string .[method]
------------------------------------

Obrátí UTF-8 řetězec.

```php
echo Strings::reverse('Nette'); // 'etteN'
```


length(string $s): int .[method]
--------------------------------

Vrací počet znaků (nikoli bytů) v řetězci UTF-8.

To je počet kódových bodů Unicode, které se mohou lišit od počtu grafémů.

```php
echo Strings::length('Nette');   // 5
echo Strings::length('červená'); // 7
```


startsWith(string $haystack, string $needle): bool .[method]
------------------------------------------------------------

Zjistí jestli řetězec `$haystack` začíná řetězcem `$needle`.

```php
$haystack = 'Začíná';
$needle = 'Za';
Strings::startsWith($haystack, $needle); // true
```


endsWith(string $haystack, string $needle): bool .[method]
----------------------------------------------------------

Zjistí jestli řetězec `$haystack` končí řetězcem `$needle`.

```php
$haystack = 'Končí';
$needle = 'čí';
Strings::endsWith($haystack, $needle); // true
```


contains(string $haystack, string $needle): bool .[method]
----------------------------------------------------------

Zjistí jestli řetězec `$haystack` obsahuje `$needle`.

```php
$haystack = 'Posluchárna';
$needle = 'sluch';
Strings::contains($haystack, $needle); // true
```


compare(string $left, string $right, int $length=null): bool .[method]
----------------------------------------------------------------------

Porovnání dvou UTF-8 řetězců nebo jejich částí bez ohledu na velikost písmen. Pokud `$length` obsahuje null, porovnávají se celé řetězce, pokud je záporný, porovnává se příslušný počet znaků od konce řetězců, jinak se porovnává příslušný počet znaků od začátku.

```php
echo Strings::compare('Nette', 'nette');     // true
echo Strings::compare('Nette', 'next', 2);   // true - shoda prvních 2 znaků
echo Strings::compare('Nette', 'Latte', -2); // true - shoda posledních 2 znaků
```


findPrefix(...$strings): string .[method]
-----------------------------------------

Najde společný začátek řetězců. Nebo vrátí prázdný řetězec, pokud společná předpona nebyla nalezena.

```php
echo Strings::findPrefix('prefix-a', 'prefix-bb', 'prefix-c');   // 'prefix-'
echo Strings::findPrefix(['prefix-a', 'prefix-bb', 'prefix-c']); // 'prefix-'
echo Strings::findPrefix('Nette', 'is', 'great');                // ''
```


before(string $haystack, string $needle, int $nth=1): ?string .[method]
-----------------------------------------------------------------------

Vrátí část řetězce `$haystack` před n-tým `$nth` výskytem řetězce `$needle`. Nebo `null`, pokud `$needle` nebyl nalezen. Při záporné hodnotě `$nth` se hledá od konce řetězce.

```php
echo Strings::before('Nette_is_great', '_', 1);  // 'Nette'
echo Strings::before('Nette_is_great', '_', -2); // 'Nette'
echo Strings::before('Nette_is_great', ' ');     // null
echo Strings::before('Nette_is_great', '_', 3);  // null
```

.[note]
Verze 2 vracela `false` místo `null`.


after(string $haystack, string $needle, int $nth=1): ?string .[method]
----------------------------------------------------------------------

Vrátí část řetězce `$haystack` po n-tém `$nth` výskytu řetězce `$needle`. Nebo `null`, pokud `$needle` nebyl nalezen. Při záporné hodnotě `$nth` se hledá od konce řetězce.

```php
echo Strings::after('Nette_is_great', '_', 2);  // 'great'
echo Strings::after('Nette_is_great', '_', -1); // 'great'
echo Strings::after('Nette_is_great', ' ');     // null
echo Strings::after('Nette_is_great', '_', 3);  // null
```

.[note]
Verze 2 vracela `false` místo `null`.


indexOf(string $haystack, string $needle, int $nth=1): ?int .[method]
---------------------------------------------------------------------

Vrátí pozici v bajtech n-tého `$nth` výskýtu řetězce `$needle` v řetězci `$haystack`. Nebo `null`, pokud nebyl `$needle` nalezen. Při záporné hodnotě `$nth` se hledá od konce řetězce.

```php
echo Strings::indexOf('abc abc abc', 'abc', 2);  // 4
echo Strings::indexOf('abc abc abc', 'abc', -1); // 8
echo Strings::indexOf('abc abc abc', 'd');       // null
```

.[note]
Verze 2 vracela `false` místo `null`.



Kódování
========

fixEncoding(string $s): string .[method]
----------------------------------------

Odstraní z řetězce neplatné UTF-8 znaky.

```php
$correctStrings = Strings::fixEncoding($string);
```


checkEncoding(string $s): bool .[method]
----------------------------------------

Zjistí, jestli jde o platný UTF-8 řetězec.

```php
$isUtf8 = Strings::checkEncoding($string);
```


toAscii(string $s): string .[method]
------------------------------------

Převede řetězec UTF-8 na ASCII, tj. odebere diakritiku atd.

```php
echo Strings::toAscii('žluťoučký kůň'); // 'zlutoucky kun'
```


chr(int $code): string .[method]
--------------------------------

Vrací specifický znak v UTF-8 z kódového bodu (číslo v rozsahu 0x0000..D7FF a 0xE000..10FFFF).

```php
echo Strings::chr(0xA9); // '©' v kódování UTF-8
```


Regulární výrazy
================

Třída Strings zapouzdřuje několik funkcí pro práci s regulárními výrazy. Na rozdíl od nativních PHP funkcí disponuje čitelnějším API a především jakákoliv chyba při kompilaci nebo zpracování výrazu vyhodí výjimku `Nette\RegexpException`.


split(string $subject, string $pattern, int $flags=null): array .[method]
-------------------------------------------------------------------------

Rozdělí řetězec do pole podle regulárního výrazu. Jako `$flag` je možné uvést stejné příznaky jako u funkce [php:preg_split], s tím, že příznak `PREG_SPLIT_DELIM_CAPTURE` je nastaven vždy.

```php
$res = Strings::split('Prvni,  druhy,treti', '~,\s*~');
// ['Prvni', 'druhy', 'treti']
$res = Strings::split('Prvni,  druhy,treti', '~(,)\s*~');
// ['Prvni', ',', 'druhy', ',', 'treti']
```


match(string $subject, string $pattern, int $flags=null, int $offset=0): array .[method]
----------------------------------------------------------------------------------------

Zjistí, jestli zadaný řetězec odpovídá regulárnímu výrazu, a vrátí pole s nalezeným výrazem a jednotlivými podvýrazy. Jako `$flag` je možné uvést stejné příznaky jako u funkce [php:preg_match].

Volitelný parametr `$offset` lze použít k určení alternativního místa, od kterého se má začít hledat (v bajtech, nikoliv ve znakech!).

```php
list($res) = Strings::match('Prvni,  druhy,treti', '~[a-z]+~i'); // 'Prvni'
list($res) = Strings::match('Prvni,  druhy,treti', '~\d+~'); // null
```


matchAll(string $subject, string $pattern, int $flags=null, int $offset=0): array .[method]
-------------------------------------------------------------------------------------------

Hledá v řetězci všechny výskyty odpovídající regulárnímu výrazu a vrátí je jako dvourozměrné pole. Jako `$flag` je možné uvést stejné příznaky jako u funkce [php:preg_match_all], s tím rozdílem, že příznak `PREG_SET_ORDER` je výchozí hodnotou.

Volitelný parametr `$offset` lze použít k určení alternativního místa, od kterého se má začít hledat (v bajtech, nikoliv ve znakech!).

```php
$res = Strings::matchAll('Prvni,  druhy,treti', '~[a-z]+~i');
/*
[
	0 => ['Prvni'],
	1 => ['druhy'],
	2 => ['treti'],
]
*/

$res = Strings::matchAll('Prvni,  druhy,treti', '~\d+~'); // []
```


replace(string $subject, string|array $pattern, string|callable $replacement=null, int $limit=-1): string .[method]
-------------------------------------------------------------------------------------------------------------------

Nahrazuje všechny výskyty odpovídající regulárnímu výrazu `$pattern`, který může být řetězec nebo pole ve tvaru `pattern => replacement`. Třetí argument je náhradní řetězec nebo callback a čtvrtý omezuje počet záměn.

```php
echo Strings::replace('Prvni,  druhy,treti', '~[a-z]+~i', '*');
// '*,  *,*'

echo Strings::replace('Prvni,  druhy,treti', [
	'~[a-z]+~i' => '*',
	'~\s+~' => '+',
]);
// '*,+*,*'

echo Strings::replace('Prvni,  druhy,treti', '~[a-z]+~i', function (array $m): string {
	return strrev($m[0]);
});
// 'invrP,  yhurd,itert'
```


{{composer: nette/utils}}
