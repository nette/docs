Koda Katkıda Bulunma
********************

.[perex]
Nette Framework'e katkıda bulunmayı planlıyor ve kural ve prosedürlere aşina olmanız mı gerekiyor? Bu başlangıç kılavuzu, koda etkili bir şekilde katkıda bulunma, depolarla çalışma ve değişiklikleri uygulama adımlarında size yol gösterecektir.


Prosedür .[#toc-procedure]
==========================

Koda katkıda bulunmak için [GitHub |https://github.com] 'da bir hesabınızın olması ve Git sürüm kontrol sistemiyle çalışmanın temellerine aşina olmanız gerekir. Git'e aşina değilseniz, [git - the simple guide |https://rogerdudler.github.io/git-guide/] 'a göz atabilir ve birçok [grafik istemciden |https://git-scm.com/downloads/guis] birini kullanmayı düşünebilirsiniz.


Ortamın ve Deponun Hazırlanması .[#toc-preparing-the-environment-and-repository]
--------------------------------------------------------------------------------

1) GitHub'da, değiştirmeyi düşündüğünüz [paket deposunun |www:packages] bir [çatalını |https://help.github.com/en/github/getting-started-with-github/fork-a-repo] oluşturun
2) Bu depoyu bilgisayarınıza [klonlayın |https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository]
3) `composer install` komutunu kullanarak [Nette Tester |tester:] dahil olmak üzere bağımlılıkları yükleyin
4) Çalıştırarak testlerin çalıştığını doğrulayın `composer tester`
5) Yayınlanan en son sürüme göre [yeni |#New Branch] bir [dal |#New Branch] oluşturun


Kendi Değişikliklerinizin Uygulanması .[#toc-implementing-your-own-changes]
---------------------------------------------------------------------------

Artık kendi kod ayarlamalarınızı yapabilirsiniz:

1) İstenen değişiklikleri uygulayın ve testleri unutmayın
2) Testlerin başarıyla çalıştığından emin olmak için `composer tester`
3) Kodun [kodlama standartlarını |#coding standards]karşılayıp karşılamadığını kontrol edin
4) Değişiklikleri [aşağıdaki biçimde |#Commit Description]bir açıklama ile kaydedin (işleyin)

Her mantıksal adım için bir tane olmak üzere birden fazla taahhüt oluşturabilirsiniz. Her commit kendi başına anlamlı olmalıdır.


Değişikliklerin Gönderilmesi .[#toc-submitting-changes]
-------------------------------------------------------

Değişikliklerden memnun kaldığınızda, bunları gönderebilirsiniz:

1) Değişiklikleri GitHub'a çatalınıza gönderin
2) Oradan, bir [pull request|https://help.github.com/articles/creating-a-pull-request] (PR) oluşturarak bunları Nette deposuna gönderin
3) Açıklamada [yeterli bilgi |#pull request description] sağlayın


Geri Bildirimin Dahil Edilmesi .[#toc-incorporating-feedback]
-------------------------------------------------------------

Taahhütleriniz artık başkaları tarafından görülebilir. Öneriler içeren yorumlar almak yaygındır:

1) Önerilen değişiklikleri takip edin
2) Bunları yeni taahhütler olarak dahil edin veya [öncekilerle birleştirin |https://help.github.com/en/github/using-git/about-git-rebase]
3) İşlemleri GitHub'a yeniden gönderin; otomatik olarak çekme isteğinde görüneceklerdir

Var olanı değiştirmek için asla yeni bir çekme isteği oluşturmayın.


Dokümantasyon .[#toc-documentation]
-----------------------------------

İşlevselliği değiştirdiyseniz veya yeni bir işlev eklediyseniz, [bunu belgelere eklem |documentation] eyi de unutmayın.


Yeni Şube .[#toc-new-branch]
============================

Mümkünse, değişiklikleri en son yayınlanan sürüme, yani daldaki son etikete göre yapın. v3.2.1 etiketi için bu komutu kullanarak bir dal oluşturun:

```shell
git checkout -b new_branch_name v3.2.1
```


Kodlama Standartları .[#toc-coding-standards]
=============================================

Kodunuz Nette Framework'te kullanılan [kodlama standardını |coding standard] karşılamalıdır. Kodu kontrol etmek ve düzeltmek için otomatik bir araç mevcuttur. Composer aracılığıyla **global olarak** istediğiniz bir klasöre yükleyebilirsiniz:

```shell
composer create-project nette/coding-standard /path/to/nette-coding-standard
```

Şimdi aracı terminalde çalıştırabilmelisiniz. İlk komut kontrol eder ve ikincisi geçerli dizindeki `src` ve `tests` klasörlerindeki kodu düzeltir:

```shell
/path/to/nette-coding-standard/ecs check
/path/to/nette-coding-standard/ecs check --fix
```


Taahhüt Açıklaması .[#toc-commit-description]
=============================================

Nette'de taahhüt konuları aşağıdaki formata sahiptir: `Presenter: fixed AJAX detection [Closes #69]`

- alanı ve ardından iki nokta üst üste
- geçmiş zamanda commit'in amacı; mümkünse aşağıdaki gibi kelimelerle başlayın: "added .(yeni özellik)", "fixed .(düzeltme)", "refactored .(davranış değişikliği olmadan kod değişikliği)", changed, removed
- eğer taahhüt geriye dönük uyumluluğu bozuyorsa, "BC break" ekleyin
- sorun izleyiciyle herhangi bir bağlantı, örneğin `(#123)` veya `[Closes #69]`
- konudan sonra bir boş satır ve ardından, örneğin forum bağlantıları da dahil olmak üzere, daha ayrıntılı bir açıklama gelebilir


Çekme Talebi Açıklaması .[#toc-pull-request-description]
========================================================

Bir çekme isteği oluştururken, GitHub arayüzü bir başlık ve açıklama girmenize izin verecektir. Kısa ve öz bir başlık girin ve açıklamada değişikliğinizin nedenleri hakkında mümkün olduğunca fazla bilgi ekleyin.

Ayrıca, başlıkta yeni bir özellik mi yoksa bir hata düzeltmesi mi olduğunu ve geriye dönük uyumluluk sorunlarına (BC break) neden olup olmayacağını belirtin. İlgili bir sorun varsa, çekme isteğinin onaylanması üzerine kapatılması için ona bağlantı verin.

```
- bug fix / new feature?  <!-- #issue numbers, if any -->
- BC break? yes/no
- doc PR: nette/docs#?    <!-- highly welcome, see https://nette.org/en/writing -->
```


{{priority: -1}}
