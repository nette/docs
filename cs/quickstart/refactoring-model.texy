Model
**************

Na zacatku jsme modelovou vrstvu preskocili, abychom se rychle dostali k potrebnym datum. To se ale v praxi velmi nedoporucuje. Na demo dobre do firmy ne ;-) Zrefaktorujeme si tedy aplikaci a vytvorime si modelovou vrstvu. Tedy tu vrstvu ktera nas v prezenteru oddeli od prime komunikace s tabulkami a zastiti to pod pekne api.


obrazek ?
/--
databaze      |               |
emaily        |    manager    |   presenter
logovani      |               |
\--



V adresari app/model/ vytvorime naseho managera co se nam bude starat o clanky ArticlesManager.php.

/---php
<?php

namespace App\Model;

use Nette;

/**
 * Article management.
 */
class ArticleManager extends Nette\Object
{


}

\--

Zaroven ho zaregistrujeme v app/config/config.neon v sekci services, nepotrebujeme ho pojmenovat tak na konec pridame odrazku a spolu s namespace ve kterem je definovan ho zapiseme

/--neon
services:
	- App\Forms\SignFormFactory
	router: App\RouterFactory::createRouter
	- App\Model\ArticleManager
\--

Tim nette, potazmo DI containeru rikame, kdyby se nekdo ptal na tuhle tridu tak vis kde ji hledat a vygeneruj nam pro ni tovarnicku ktera nam zajisti aby trida dostala vse o co si rekne v konstruktoru.

(lze takto resit i skrze interfacy, ??? resit to tu?)


Prepneme se do HomepagePresenter.php ktery procistime a upravime, tak ze se zbavime zavislosti na nette\database\context a nahradime za novou zavyslost na nasem nove vytvorenem modelu.

/--php
<?php

namespace App\Presenters;

use Nette,
	App\Model;

/**
 * Homepage presenter.
 */
class HomepagePresenter extends BasePresenter
{
	/** @var Model\ArticleManager */
	private $articleManager;

	public function __construct(Model\ArticleManager $articles)
	{
		$this->articleManager = $articles;
	}


	public function renderDefault()
	{
		$this->template->posts = $this->articleManager->findAll()->limit(5);
	}

}


\--
.[tip]
V sekci use mame App/Model, tak si muzeme zapis v php kodu zkratit na Model\ArticleManager ( nebojte, i v komentarich to funguje a vase chytre IDE by si s tim melo poradit)


V konstrukotu si pozadame o ArticleManager, ktery si priradime do private property a v metode renderDefault zavolame metodu findAll ( ktera v tuto chvili neexistuje) a nad vysledkem co se nam vrati zavoalme jeste metodu limit(5);

Doplnime si tedy do naseho managera metodu findAll

app/model/ArticleManager.php

/--
...
public function findAll()
{
	return $this->database->table('posts')
		->order('created_at DESC');
}
...
\--

kam jsme presunuli kus kodu co se dotazoval databaze na clanky. Zde tedy ouzivame property database kterou ale nemame nikde definovanou. Tak si ji zadefinujeme a jeji obsah obsah naplnime tim o co si rekneme v konstruktoru.

/--
...
/**
 * @var Nette\Database\Context
 */
private $database;


public function __construct(Nette\Database\Context $database)
{
	$this->database = $database;
}
...
\--

cele to pak vypada nasledovne:

/--
<?php

namespace App\Model;

use Nette;

/**
 * Article management.
 */
class ArticleManager extends Nette\Object
{

	/**
	 * @var Nette\Database\Context
	 */
	private $database;


	public function __construct(Nette\Database\Context $database)
	{
		$this->database = $database;
	}


	public function findAll()
	{
		return $this->database->table('posts')
			->order('created_at DESC');

	}

}

\--


Trida ArticleManager si v kontruktori rekne o predani Nette\Database\Context a jelikoz tato trida je v DI containeru zaregistrovana, vytovri jeji instanci a predaji, DI za nas takto vytovri instanci ArticleManagera a preda ho v konstrukotru HomepagePresenter ktery si o nej pozadal. Takova matroska :) Vsichni si jen rikaji co chteji a nezajimaji se o to kde se to vytvari. O to se postara Nette DI container (odkaz na dokumentaci kde to je pospane vice)


