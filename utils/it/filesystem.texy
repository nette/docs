File system
***********

.[perex]
[api:Nette\Utils\FileSystem] è una classe con funzioni utili per lavorare con il file system. Uno dei vantaggi rispetto alle funzioni PHP native è che lanciano eccezioni in caso di errore.


Se hai bisogno di cercare file sul disco, usa [Finder|finder].

Installazione:

```shell
composer require nette/utils
```

Gli esempi seguenti presuppongono la creazione di un alias:

```php
use Nette\Utils\FileSystem;
```


Manipolazione
=============


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Copia un file o un'intera directory. Per impostazione predefinita, sovrascrive i file e le directory esistenti. Con il parametro `$overwrite` impostato su `false`, lancia un'eccezione `Nette\InvalidStateException` se il file o la directory di destinazione `$target` esiste. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Crea una directory se non esiste, incluse le directory padre. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Elimina un file o un'intera directory se esiste. Se la directory non è vuota, elimina prima il suo contenuto. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Imposta i permessi del file su `$fileMode` o della directory su `$dirMode`. Attraversa ricorsivamente e imposta i permessi anche per l'intero contenuto della directory.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Apre un file e restituisce una risorsa. Il parametro `$mode` funziona allo stesso modo della funzione nativa `fopen()`:https://www.php.net/manual/en/function.fopen.php. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Restituisce il contenuto del file `$file`. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Legge il contenuto del file riga per riga. A differenza della funzione nativa `file()`, non carica l'intero file in memoria, ma lo legge progressivamente, rendendo possibile leggere anche file più grandi della memoria disponibile. `$stripNewLines` indica se rimuovere i caratteri di fine riga `\r` e `\n`.
In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Rinomina o sposta il file o la directory `$origin`. Per impostazione predefinita, sovrascrive i file e le directory esistenti. Con il parametro `$overwrite` impostato su `false`, lancia un'eccezione `Nette\InvalidStateException` se il file o la directory di destinazione `$target` esiste. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Scrive la stringa `$content` nel file `$file`. In caso di errore, lancia un'eccezione `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Percorsi
========


isAbsolute(string $path): bool .[method]
----------------------------------------

Determina se il percorso `$path` è assoluto.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Unisci tutti i segmenti del percorso e normalizza il risultato.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizza `..` e `.` e i separatori di directory nel percorso a quelli di sistema.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Converte le barre rovesciate in `/` utilizzate nei sistemi Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Converte le barre rovesciate nei caratteri specifici della piattaforma corrente, cioè `\` su Windows e `/` altrove.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Deriva il percorso finale dal percorso `$path` rispetto alla directory di base `$basePath`. Lascia invariati i percorsi assoluti (`/foo`, `C:/foo`) (normalizza solo le barre), i percorsi relativi vengono aggiunti al percorso di base.

```php
// Su Windows le barre nell'output sarebbero invertite (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Approccio statico vs non statico
================================

Ad esempio, per poter sostituire facilmente la classe con un'altra (un mock) a scopo di test, utilizzala in modo non statico:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
