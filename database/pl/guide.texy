Baza danych Nette
*****************

.[perex]
Nette Database to potężna i elegancka warstwa bazy danych dla PHP z naciskiem na prostotę i inteligentne funkcje. Oferuje dwa uzupełniające się sposoby pracy z danymi - przy użyciu [eksploratora |Explorer] do szybkiego rozwoju lub [sposobu SQL |SQL way] do pełnej kontroli nad zapytaniami.

<div class="grid gap-3">
<div>


[Sposób SQL |SQL way]
=====================
- Bezpieczne, parametryzowane zapytania
- Precyzyjna kontrola nad strukturą zapytań SQL
- Idealny do pisania złożonych zapytań z zaawansowanymi funkcjami
- Optymalizacja wydajności przy użyciu określonych funkcji SQL

</div>

<div>


[Droga odkrywcy |explorer]
==========================
- Szybki rozwój bez pisania SQL
- Intuicyjna obsługa relacji między tabelami
- Automatyczna optymalizacja zapytań
- Doskonały do szybkich i wygodnych interakcji z bazą danych

</div>

</div>


Instalacja .[#toc-installation]
===============================

Bibliotekę można pobrać i zainstalować za pomocą [Composera |best-practices:composer]:

```shell
composer require nette/database
```


Obsługiwane bazy danych
=======================

Nette Database obsługuje następujące bazy danych:

|* Serwer bazy danych |* Nazwa DSN |* Obsługa eksploratora
|-----------------------|--------------|-----------------------|
| MySQL (>= 5.1) | mysql | TAK |
| PostgreSQL (>= 9.0) | pgsql | TAK |
| SQLite 3 (>= 3.8) | sqlite | TAK |
| Oracle | oci | NIE |
| MS SQL (PDO_SQLSRV) | sqlsrv | TAK |
| MS SQL (PDO_DBLIB) | mssql | NIE |
| ODBC | odbc | NIE |


Dwa podejścia do pracy z bazą danych .[#toc-two-approaches-to-database-work]
============================================================================

W Nette Database można pisać zapytania SQL bezpośrednio (sposób SQL) lub pozwolić, aby SQL był generowany automatycznie (sposób Explorer). Zobaczmy, jak oba podejścia rozwiązują te same zadania:

[Sposób SQL |SQL way] - Pisanie zapytań SQL

```php
// Wstawianie rekordu
$database->query('INSERT INTO books', [
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// Pobieranie rekordów: autorzy książek
$result = $database->query('
	SELECT authors.*, COUNT(books.id) AS books_count
	FROM authors
	LEFT JOIN books ON authors.id = books.author_id
	WHERE authors.active = 1
	GROUP BY authors.id
');

// Wyświetlanie (nieoptymalne, generuje N dodatkowych zapytań)
foreach ($result as $author) {
	$books = $database->query('
		SELECT * FROM books
		WHERE author_id = ?
		ORDER BY published_at DESC
	', $author->id);

	echo "Author $author->name has written $author->books_count books:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

[Sposób Explorer |explorer] - automatyczne generowanie SQL

```php
// Wstawianie rekordu
$database->table('books')->insert([
	'author_id' => $authorId,
	'title' => $bookData->title,
	'published_at' => new DateTime,
]);

// Pobieranie rekordów: autorzy książek
$authors = $database->table('authors')
	->where('active', 1);

// Wyświetl (automatycznie generuje tylko 2 zoptymalizowane zapytania)
foreach ($authors as $author) {
	$books = $author->related('books')
		->order('published_at DESC');

	echo "Author $author->name has written {$books->count()} books:\n";

	foreach ($books as $book) {
		echo "- $book->title\n";
	}
}
```

Podejście Explorer automatycznie generuje i optymalizuje zapytania SQL. W powyższym przykładzie sposób SQL generuje N+1 zapytań (jedno dla autorów i jedno dla książek każdego autora), podczas gdy Explorer wykonuje tylko dwa zoptymalizowane zapytania - jedno dla autorów i drugie dla wszystkich ich książek.

W zależności od potrzeb można dowolnie łączyć oba podejścia w aplikacji.


Połączenie i konfiguracja .[#toc-connection-and-configuration]
==============================================================

Aby połączyć się z bazą danych, wystarczy utworzyć instancję klasy [api:Nette\Database\Connection]:

```php
$database = new Nette\Database\Connection($dsn, $user, $password);
```

Parametr `$dsn` (Data Source Name) ma taki sam format jak [PDO |https://www.php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters], np. `host=127.0.0.1;dbname=test`. Jeśli połączenie nie powiedzie się, zostanie wyświetlony komunikat `Nette\Database\ConnectionException`.

Jednak wygodniejszą metodą jest użycie [konfiguracji aplikacji |configuration]. Dodaj sekcję `database`, a zostaną utworzone wymagane obiekty, w tym panel bazy danych na pasku debugowania [Tracy |tracy:].

```neon
database:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: password
```

Następnie obiekt połączenia można [pobrać jako usługę z kontenera DI |dependency-injection:passing-dependencies], np:

```php
class Model
{
	public function __construct(
		// or Nette\Database\Explorer
		private Nette\Database\Connection $database,
	) {
	}
}
```

Aby uzyskać więcej informacji, patrz [konfiguracja bazy danych |configuration].


Ręczne tworzenie eksploratora .[#toc-manual-creation-of-explorer]
-----------------------------------------------------------------

Jeśli nie korzystasz z kontenera Nette DI, możesz ręcznie utworzyć instancję `Nette\Database\Explorer`:

```php
// database connection
$connection = new Nette\Database\Connection('mysql:host=127.0.0.1;dbname=mydatabase', 'user', 'password');
// cache storage, implements Nette\Caching\Storage, e.g.:
$storage = new Nette\Caching\Storages\FileStorage('/path/to/temp/dir');
// handles database structure reflection
$structure = new Nette\Database\Structure($connection, $storage);
// defines rules for mapping table names, columns, and foreign keys
$conventions = new Nette\Database\Conventions\DiscoveredConventions($structure);
$explorer = new Nette\Database\Explorer($connection, $structure, $conventions, $storage);
```


Zarządzanie połączeniami .[#toc-connection-management]
======================================================

Po utworzeniu obiektu `Connection` automatycznie łączy się on z bazą danych. Jeśli chcesz opóźnić połączenie, włącz tryb leniwy w [konfiguracji |configuration], ustawiając `lazy`, lub zrób to w następujący sposób:

```php
$database = new Nette\Database\Connection($dsn, $user, $password, ['lazy' => true]);
```

Aby zarządzać połączeniem, użyj metod `connect()`, `disconnect()`, i `reconnect()`.
- `connect()` ustanawia połączenie, jeśli nie zostało jeszcze ustanowione i może rzucić `Nette\Database\ConnectionException`.
- `disconnect()` rozłącza się z bazą danych.
- `reconnect()` rozłącza się, a następnie ponownie łączy z bazą danych i może również rzucić `Nette\Database\ConnectionException`.

Dodatkowo można monitorować zdarzenia połączenia za pomocą zdarzenia `onConnect`, które jest tablicą wywołań zwrotnych wykonywanych po połączeniu z bazą danych.

```php
// Wywoływana po połączeniu z bazą danych
$database->onConnect[] = function($database) {
	echo "Connected to the database";
};
```


Pasek debugowania Tracy .[#toc-tracy-debug-bar]
===============================================

Jeśli używasz [Tracy |tracy:], panel Database na pasku debugowania jest automatycznie włączony. Wyświetla on wszystkie wykonane zapytania, ich parametry, czas wykonania i lokalizację w kodzie, w której zostały wywołane.

[* db-panel.webp *]
