DI Konteynerini Yapılandırma
****************************

.[perex]
Nette DI konteyneri için yapılandırma seçeneklerine genel bakış.


Yapılandırma dosyası
====================

Nette DI konteynerinin yapılandırma dosyaları kullanılarak kontrol edilmesi kolaydır. Genellikle [NEON formatında |neon:format] yazılırlar. Düzenleme için bu formatı [destekleyen editörler |best-practices:editors-and-tools#ide-editor] kullanmanızı öneririz.

<pre>
"decorator .[prism-token prism-atrule]":[#Decorator]: 	"Dekoratör .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"DI Konteyner .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Extensions]: 	"Ek DI uzantılarını yükleyin .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Including files]: 	"Including files .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#Parameters]: 	"Parameters .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Otomatik hizmet kaydı .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Services .[prism-token prism-comment]"
</pre>

`%`, you must escape it by doubling it to `%%` karakterini içeren bir dize yazmak için. .[note]


Parametreler .[#toc-parameters]
===============================

Daha sonra hizmet tanımlarının bir parçası olarak kullanılabilecek parametreler tanımlayabilirsiniz. Bu, daha düzenli olarak değiştirmek isteyeceğiniz değerleri ayırmanıza yardımcı olabilir.

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

Herhangi bir yapılandırma dosyasının başka bir yerinde `%foo%` aracılığıyla `foo` parametresine başvurabilirsiniz. Ayrıca `'%wwwDir%/images'` gibi dizgilerin içinde de kullanılabilirler.

Parametrelerin sadece string olması gerekmez, dizi değerleri de olabilirler:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Tek tuşa `%mailer.user%` olarak başvurabilirsiniz.

Kodunuzda, örneğin sınıfınızda herhangi bir parametrenin değerini almanız gerekiyorsa, o zaman bu sınıfa geçirin. Örneğin, yapıcıda. Sınıfların parametre değerlerini sorgulayabileceği global bir yapılandırma nesnesi yoktur. Bu, bağımlılık enjeksiyonu ilkesine aykırı olacaktır.


Hizmetler .[#toc-services]
==========================

[Ayrı bir bölüme |services] bakınız.


Dekoratör .[#toc-decorator]
===========================

Belirli bir türdeki tüm hizmetleri toplu olarak nasıl düzenleyebilirim? Belirli bir ortak atadan miras kalan tüm sunucular için belirli bir yöntemi çağırmanız mı gerekiyor? İşte dekoratörün geldiği yer burasıdır.

```neon
decorator:
	# bu sınıfın veya arayüzün örneği olan tüm hizmetler için
	App\Presenters\BasePresenter:
		setup:
			- setProjectId(10)     # bu yöntemi çağır
			- $absoluteUrls = true # ve değişkeni ayarlayın
```

Dekoratör ayrıca [etiketleri |services#Tags] ayarlamak veya [enjeksiyon modunu |services#Inject Mode] açmak için de kullanılabilir.

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

DI konteynerinin teknik ayarları.

```neon
di:
	# Tracy Bar'da DIC gösteriyor mu?
	debugger: ...        # (bool) varsayılan değer true

	# asla otomatik bağlamadığınız parametre türleri
	excluded: ...        # (string[])

	# DI konteynerinin miras aldığı sınıf
	parentClass: ...     # (string) varsayılan olarak Nette\DI\Container
```


Meta Veri Aktarımı .[#toc-metadata-export]
------------------------------------------

DI konteyner sınıfı ayrıca çok fazla meta veri içerir. Meta veri dışa aktarımını azaltarak bunu azaltabilirsiniz.

```neon
di:
	export:
		# parametreleri dışa aktarmak için?
		parameters: false   # (bool) varsayılan değer true

		# etiketleri dışa aktarın ve hangileri?
		tags:               # (string[]|bool) varsayılan tüm
			- event.subscriber

		# otomatik kablolama için verileri dışa aktar ve hangisi?
		types:              # (string[]|bool) varsayılan tüm
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

`$container->parameters` dizisini kullanmıyorsanız, parametre dışa aktarımını devre dışı bırakabilirsiniz. Ayrıca, yalnızca `$container->findByTag(...)` yöntemini kullanarak hizmet aldığınız etiketleri dışa aktarabilirsiniz.
Yöntemi hiç çağırmazsanız, `false` ile etiket dışa aktarımını tamamen devre dışı bırakabilirsiniz.

Kullandığınız sınıfları `$container->getByType()` yöntemine parametre olarak belirterek [otomatik kablolama |autowiring] için meta verileri önemli ölçüde azaltabilirsiniz.
Ve yine, yöntemi hiç çağırmazsanız (veya `Nette\Application\Application` adresini almak için yalnızca [bootstrap |application:bootstrap] içinde çağırırsanız), `false` ile dışa aktarmayı tamamen devre dışı bırakabilirsiniz.


Uzantılar .[#toc-extensions]
============================

Diğer DI uzantılarının kaydı. Bu şekilde, örneğin `Dibi\Bridges\Nette\DibiExtension22` DI uzantısını `dibi` adı altında ekleriz:

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Daha sonra `dibi` adlı bölümde yapılandırıyoruz:

```neon
dibi:
	host: localhost
```

Parametreli bir uzantı sınıfı da ekleyebilirsiniz:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Dosyalar Dahil .[#toc-including-files]
======================================

Ek yapılandırma dosyaları `includes` bölümüne eklenebilir:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

`parameters.php` adı bir yazım hatası değildir, yapılandırma bir dizi olarak döndüren bir PHP dosyasına da yazılabilir:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Aynı anahtarlara sahip öğeler yapılandırma dosyalarında görünürse, diziler söz konusu olduğunda bunların [üzerine yazılır veya birleştirilir |#Merging]. Daha sonra dahil edilen dosyanın bir öncekinden daha yüksek önceliği vardır. `includes` bölümünün listelendiği dosya, içine dahil edilen dosyalardan daha yüksek önceliğe sahiptir.


Arama .[#toc-search]
====================

Hizmetlerin DI konteynerine otomatik olarak eklenmesi, çalışmayı son derece keyifli hale getirir. Nette, kapsayıcıya otomatik olarak sunucuları ekler, ancak diğer sınıfları kolayca ekleyebilirsiniz.

Sınıfların hangi dizinlerde (ve alt dizinlerde) aranması gerektiğini belirtmeniz yeterlidir:

```neon
search:
	# bölüm adlarını kendiniz seçersiniz
	myForms:
		in: %appDir%/Forms

	model:
		in: %appDir%/Model
```

Ancak genellikle, tüm sınıfları ve arayüzleri eklemek istemeyiz, bu yüzden onları filtreleyebiliriz:

```neon
search:
	myForms:
		in: %appDir%/Forms

		# dosya adına göre filtreleme (string|string[])
		files:
			- *Factory.php

		# sınıf adına göre filtreleme (string|string[])
		classes:
			- *Factory
```

Ya da aşağıdaki sınıflardan en az birini miras alan veya uygulayan sınıfları seçebiliriz:


```neon
search:
	myForms:
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

Ayrıca negatif kurallar da tanımlayabilirsiniz, yani sınıf adı maskeleri veya ataları ve bunlara uymaları halinde hizmet DI konteynerine eklenmeyecektir:

```neon
search:
	myForms:
		exclude:
			classes: ...
			extends: ...
			implements: ...
```

Eklenen hizmetler için etiketler belirlenebilir:

```neon
search:
	myForms:
		tags: ...
```


Birleştirme .[#toc-merging]
===========================

Aynı anahtarlara sahip öğeler daha fazla yapılandırma dosyasında görünüyorsa, diziler söz konusu olduğunda bunların üzerine yazılır veya birleştirilir. Daha sonra dahil edilen dosya daha yüksek önceliğe sahiptir.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>Sonuç</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Belirli bir dizinin birleştirilmesini önlemek için dizinin adından hemen sonra ünlem işareti kullanın:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>Sonuç</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>
