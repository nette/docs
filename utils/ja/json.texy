JSONの操作
*******

.[perex]
[api:Nette\Utils\Json] は、JSON形式のエンコードとデコードのための関数を持つ静的クラスです。さまざまなPHPバージョンの脆弱性を処理し、エラー時に例外をスローします。


インストール:

```shell
composer require nette/utils
```

すべての例は、エイリアスが作成されていることを前提としています:

```php
use Nette\Utils\Json;
```


使用法
===


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

`$value` をJSON形式に変換します。

`$pretty` を設定すると、JSONを読みやすく、見やすくフォーマットします:

```php
Json::encode($value); // JSONを返します
Json::encode($value, pretty: true); // より見やすいJSONを返します
```

`$asciiSafe` を使用すると、出力をASCIIで生成します。つまり、Unicode文字を `\uxxxx` シーケンスに置き換えます:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

パラメータ `$htmlSafe` は、出力にHTMLで特別な意味を持つ文字が含まれないようにします:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

`$forceObjects` を使用すると、数値キーを持つ配列もJavaScriptオブジェクトとしてエンコードされます:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

エラー時には `Nette\Utils\JsonException` 例外をスローします。

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// 例外処理
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

JSONをPHPにパースします。

`$forceArray` 設定は、オブジェクトの代わりに配列を返すことを強制します:

```php
Json::decode('{"variable": true}'); // stdClass型のオブジェクトを返します
Json::decode('{"variable": true}', forceArrays: true); // 配列を返します
```

エラー時には `Nette\Utils\JsonException` 例外をスローします。

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// 例外処理
}
```


PresenterからJSONを送信するには？
=======================

これには `$this->sendJson($data)` メソッドを使用できます。これは例えば `action*()` メソッド内で呼び出すことができます。[レスポンスの送信|application:presenters#Odeslání odpovědi] を参照してください。
