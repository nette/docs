Używanie Latte ze Slim 4
************************

.[perex]
Ten artykuł, którego autorem jest "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, opisuje użycie Latte ze Slim Framework.

Najpierw "zainstaluj Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html, a następnie Latte za pomocą Composera:

```shell
composer require latte/latte
```


Konfiguracja
------------

W katalogu głównym projektu utwórz nowy katalog `templates`. Wszystkie szablony zostaną do niego umieszczone później.

Do pliku `config/defaults.php` dodaj nowy klucz konfiguracyjny `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte kompiluje szablony do natywnego kodu PHP i zapisuje je w pamięci podręcznej na dysku. Są więc tak samo szybkie, jakby były napisane w natywnym języku PHP.

Do pliku `config/defaults.php` dodaj nowy klucz konfiguracyjny `template_temp`: Upewnij się, że katalog `{project}/tmp/templates` istnieje i ma prawa do odczytu i zapisu.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte automatycznie regeneruje pamięć podręczną przy każdej zmianie szablonu, co można w środowisku produkcyjnym wyłączyć i zaoszczędzić trochę wydajności:

```php
// w środowisku produkcyjnym zmień na false
$settings['template_auto_refresh'] = true;
```

Dalej dodaj definicję kontenera DI dla klasy `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

Samo renderowanie szablonu Latte technicznie by działało, ale musimy również zapewnić, aby działało z obiektem response PSR-7.

W tym celu utworzymy specjalną klasę `TemplateRenderer`, która wykona tę pracę za nas.

Dalej utwórz plik `src/Renderer/TemplateRenderer.php` i skopiuj/wklej ten kod:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Użycie
------

Zamiast bezpośredniego użycia obiektu Latte Engine, użyjemy do renderowania szablonu do obiektu kompatybilnego z PSR-7 obiektu `TemplateRenderer`.

Typowa klasa obsługi akcji może wyglądać tak: Renderuje szablon o nazwie `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Aby to działało, utwórz plik szablonu w `templates/home.latte` z tą zawartością:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Jeśli wszystko jest poprawnie skonfigurowane, powinien pojawić się następujący wynik:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
