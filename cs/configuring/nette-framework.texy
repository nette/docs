Konfigurace Nette Frameworku
****************************

Většinu parametrů Nette Frameworku lze nyní ovlivnit pomocí konfiguračního souboru. Nette Framework sám sebe konfiguruje pomocí [rozšíření DI Containeru |cs/configuring#toc-rozsireni-pro-kontejner], které přijímá parametry v sekci `nette` v konfiguračním souboru, která se nachází pod hlavní sekcí `common` (pokud ji používáte).


Sessions
----------

Lze nastavovat všechny PHP "direktivy":http://www.php.net/manual/en/session.configuration.php (ve formátu camelCase).

/-- neon
nette:
	session:
		autoStart: true  # výchozí je false
		expiration: "+ 10 days"
		name: ...
		...
\--

.[tip]
Doporučuje se používat `autoStart: smart`, protože pak automaticky startuje session, pouze pokud je již vytvořena.


Application
-----------

/--neon
nette:
	application:
		debugger: true # panel do Laděnky
		catchExceptions: ...
		errorPresenter: ...

\--


Routování
---------

/--neon
nette:
	routing:
		debugger: true  # panel v Debugger baru
		routes:
				index.php: Dashboard:default
				'<presenter>/<action>[/<id>]': Dashboard:default


\--

.[warning]
Konfigurace rout je zatím experimentální.


Security
--------

Uvedením pole `users` vytvoříme SimpleAuthenticator, uvedením polí `roles` nebo `resources` vytvoříme autorizátor Nette\Security\Permission.

/--neon
nette:
	security:
		debugger: true  # panel v Debugger baru
		frames: ... # hodnota hlavičky X-Frame-Options

		users:
			frantisek: tajneheslo

		roles:
			guest:
			member:
			admin: [member]  # admin dědí od membera

		resources:
			file:
\--


Maily
------

Standardní mailer je SendmailMailer, uvedením `smtp` aktivujeme SmtpMailer.

/--neon
common:
	parameters:
		smtp:
			smtp: true
			# dále lze uvést host, port, username, password, secure, timeout

	nette:
		mailer: %smtp%


\--

Pro vytvoření emailové zprávy můžeme použít `$container->nette->createMail()`.


Databáze
---------

Můžeme vytvořit více připojení, které uvedeme pod klíčem `database`. Takto vytvoříme spojení nazvané `default` a dostupné pod `$container->nette->database->default`.

/--neon
nette:
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false # panel v Debugger baru
			explain: false  # explain dotazů v Debugger baru
			reflection: discovered # nebo conventional nebo název třídy

\--

Framework tak vytvoří nejen objekt `Nette\Database\Connection`, ale nastavují mu i pomocné objekty jako reflection & cache a ve vývojářském režimu přidá panel do Debugger baru.

V rámci konfiguračního souboru se můžeme ke službě dostat přes autowiring (`@Nette\Database\Connection`), přes název služby (`@nette.database.default`) nebo si vytvořit alias a ten používat:

/--neon
services:
	database: @nette.database.default

	authorizator: Auth(@database)
\--


Formuláře
--------

V konfiguračním souboru lze změnit výchozí chybové hlášky.

/--neon
nette:
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'

\--

Pro vytvoření formuláře vhodného pro použití mimo presentery můžeme použít `$container->nette->createBasicForm()`.


Šablony
--------

Lze přepínat HTML a XHTML režim šablon:

/--neon
nette:
	xhtml: no  # výchozí je true

\--

Základní nakonfigurovanou šablonu s helpery a Latte vyrobí  `$container->nette->createTemplate()`.


DI
---

/--neon
nette:
	container:
		debugger: true  # aktivuje panel v Debugger baru
\--


Debugger
------

Lze konfigurovat některé parametry `Nette\Diagnostics\Debugger` a nastavovat panely do Debugger baru.

/--neon
nette:
	debugger:
		email: %webmasterEmail%
		strictMode: TRUE
		editor: ...
		browser: ...
		bar: # panely do Debugger baru
			- Nette\DI\Diagnostics\ContainerPanel # alias DI Container baru
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)
		blueScreen: # panely do Laděnky
			- DoctrinePanel::renderException
\--


Cache
------

Objekt pro přístup ke keši vyrobí `$container->nette->createCache($namespace = NULL)`.


Low-level úpravy
---------------

Všechna tato nastavení ovlivňují podobu výsledného systémového DI kontejneru. Oproti přímému zápisu do sekcí `services` či `factories` nabízejí srozumitelnější a stručnější syntax. Nicméně zůstává možnost si jednotlivé služby ještě "doladit" na nižší úrovni:

/--neon
services:
	nette.mailer:
		class: MySmtpMailer

	nette.presenterFactory:
		class: MyPresenterFactory


factories:
	nette.mail:
		setup:
			- addHeader('X-Mailer', 'Nette Framework 2.0')
\--

Nebo vytvořit nové služby poděděním existujících: (přidá metodu `$container->createSecuredForm()`)

/--neon
factories:
	securedForm < nette.basicForm:
		setup:
			- addProtection()
\--

{{tags: di, config}}
