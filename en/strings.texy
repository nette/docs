String Functions
****************

.[perex]
[Nette\Utils\Strings |api:] is a static class, which contains many useful functions for working with UTF-8 encoded strings.

All examples assume the following class alias is defined:

/--php
use Nette\Utils\Strings;
\--



Letter Case
===========

lower(string $s): string .[method]
----------------------------------

Converts all characters of UTF-8 string to lower case.

/--php
echo Strings::lower('Hello world'); // hello world
\--


upper(string $s): string .[method]
----------------------------------

Converts all characters of a UTF-8 string to upper case.

/--php
echo Strings::upper('Hello world'); // HELLO WORLD
\--


firstUpper(string $s): string .[method]
---------------------------------------

Converts the first character of a UTF-8 string to upper case and leaves the other characters unchanged.

/--php
echo Strings::firstUpper('hello world'); // Hello world
\--


firstLower(string $s): string .[method]
---------------------------------------

Converts the first character of a UTF-8 string to lower case and leaves the other characters unchanged.

/--php
echo Strings::firstLower('Hello world'); // hello world
\--


capitalize(string $s): string .[method]
---------------------------------------

Converts the first character of every word of a UTF-8 string to upper case and the others to lower case.

/--php
echo Strings::capitalize('Hello world'); // Hello World
\--



Editing a String
================

normalize(string $s): string .[method]
--------------------------------------

Removes right-side spaces, control sequences and unifies line endings to `\n`.


webalize(string $s, string $charlist=null, bool $lower=true): string .[method]
------------------------------------------------------------------------------

Adjusts a UTF-8 string for usage in URL, i.e. removes all accents and replaces all remaining characters except English alphabet letters and numerals with hyphens.

/--php
echo Strings::webalize('žluťoučký kůň'); // zlutoucky-kun
\--

Other characters may be preserved as well, but they must be passed as second argument.

/--php
echo Strings::webalize('10. image_id', '._'); // 10.-image_id
\--

The third argument may suppress converting the string to lower case.

/--php
echo Strings::webalize('Hello world', null, false); // Hello-world
\--


trim(string $s, string $charlist=null): string .[method]
--------------------------------------------------------

Removes all left and right side spaces (or the characters passed as second argument) from a UTF-8 encoded string.

/--php
echo Strings::trim('  Hello  '); // 'Hello'
\--


truncate(string $s, int $maxLen, string $append=`'…'`): string .[method]
------------------------------------------------------------------------

Truncates a UTF-8 string to given maximal length, while trying not to split whole words. Only if the string is truncated, an ellipsis (or something else set with third argument) is appended to the string.

/--php
$text = 'Hello, how are you today?';
echo Strings::truncate($text, 5); // 'Hell…'
echo Strings::truncate($text, 20); // 'Hello, how are you…'
echo Strings::truncate($text, 30); // 'Hello, how are you today?'
echo Strings::truncate($text, 20, '~'); // 'Hello, how are you~'
\--


indent(string $s, int $level=1, string $indentationChar=`"\t"`): string .[method]
---------------------------------------------------------------------------------

Indents a multiline text from the left. Second argument sets how many indentation chars should be used, while the indent itself is the third argument (*tab* by default).

/--php
echo Strings::indent('Nette'); // '	Nette'
echo Strings::indent('Nette', 2, '+'); // '++Nette'
\--


padLeft(string $s, int $length, string $pad=`' '`): string .[method]
--------------------------------------------------------------------

Pads a UTF-8 string to given length by prepending the `$pad` string to the beginning.

/--php
echo Strings::padLeft('Nette', 6); // ' Nette'
echo Strings::padLeft('Nette', 8, '+'); // '+++Nette'
echo Strings::padLeft(' Nette', 11, 'WOW'); // 'WOWWO Nette'
\--


padRight(string $s, int $length, string $pad=`' '`): string .[method]
---------------------------------------------------------------------

Pads UTF-8 string to given length by appending the `$pad` string to the end.

/--php
echo Strings::padRight('Nette', 6); // 'Nette '
echo Strings::padRight('Nette', 8, '+'); // 'Nette+++'
echo Strings::padRight('Nette is ', 16, 'great'); // 'Nette is greatgr'
\--


substring(string $s, int $start, int $length=null): string .[method]
--------------------------------------------------------------------

Returns a part of UTF-8 string.

/--php
echo Strings::substring('Nette is great', 0, 5); // 'Nette'
echo Strings::substring('Nette is great', 6, 2); // 'is'
echo Strings::substring('Nette is great', 9); // 'great'
\--


normalizeNewLines(string $s): string .[method]
----------------------------------------------

Standardize line endings to unix-like.

/--php
$unixLikeLines = Strings::normalizeNewLines($string);
\--


reverse(string $s): string .[method]
------------------------------------

Reverse UTF-8 string.

/--php
echo Strings::reverse('Nette'); // 'etteN'
\--


length(string $s): int .[method]
--------------------------------

Returns a length of a UTF-8 string.

/--php
echo Strings::length('Nette'); // '5'
echo Strings::length('červená'); // '7'
\--


startsWith(string $haystack, string $needle): bool .[method]
------------------------------------------------------------

Returns `true` if `$haystack` string begins with `$needle`.

/--php
$haystack = 'Begins';
$needle = 'Be';
Strings::startsWith($haystack, $needle); // true
\--


endsWith(string $haystack, string $needle): bool .[method]
----------------------------------------------------------

Returns `true` if `$haystack` string end with `$needle`.

/--php
$haystack = 'Ends';
$needle = 'ds';
Strings::endsWith($haystack, $needle); // true
\--


contains(string $haystack, string $needle): bool .[method]
----------------------------------------------------------

Returns `true` if `$haystack` string contains `$needle`.

/--php
$haystack = 'Contains';
$needle = 'tai';
Strings::contains($haystack, $needle); // true
\--


compare(string $left, string $right, int $len=null): bool .[method]
-------------------------------------------------------------------

Compares two UTF-8 strings or their parts, without taking character case into account. If `$len` is greater then zero, the respective amount of characters from the beginning of strings is compared, if it's negative, the respective amount of characters from the end is compared, if it's equal to zero, whole strings are compared.

/--php
echo Strings::compare('Nette', 'nette'); // true
echo Strings::compare('Nette', 'next', 2); // true - two first characters match
echo Strings::compare('Nette', 'Latte', -2); // true - two last characters match
\--


findPrefix(...$strings): string .[method]
-----------------------------------------

Finds the common prefix of strings or returns empty string if the prefix was not found.

/--php
echo Strings::findPrefix('prefix-Nette', 'prefix-is', 'prefix-great'); // 'prefix-'
echo Strings::findPrefix(['prefix-Nette', 'prefix-is', 'prefix-great']); // 'prefix-'
echo Strings::findPrefix('Nette', 'is', 'great'); // ''
\--


before(string $haystack, string $needle, int $nth=1): ?string .[method]
-----------------------------------------------------------------------

Returns part of `$haystack` before `$nth` occurence of `$needle` or returns `null` if the needle was not found. Negative value means searching from the end.

/--php
echo Strings::before('Nette_is_great', '_', 1); // 'Nette'
echo Strings::before('Nette_is_great', '_', -2); // 'Nette'
echo Strings::before('Nette_is_great', ' '); // null
echo Strings::before('Nette_is_great', '_', 3); // null
\--

.[note]
Version 2 returns `false` instead of `null`.


after(string $haystack, string $needle, int $nth=1): ?string .[method]
----------------------------------------------------------------------

Returns part of `$haystack` after `$nth` occurence of `$needle` or returns `null` if the `$needle` was not found. Negative value of `$nth` means searching from the end.

/--php
echo Strings::after('Nette_is_great', '_', 2); // 'great'
echo Strings::after('Nette_is_great', '_', -1); // 'great'
echo Strings::after('Nette_is_great', ' '); // null
echo Strings::after('Nette_is_great', '_', 3); // null
\--

.[note]
Version 2 returns `false` instead of `null`.


indexOf(string $haystack, string $needle, int $nth=1): ?int .[method]
---------------------------------------------------------------------

Returns position of `$nth` occurence of `$needle` in `$haystack` or `null` if the `$needle` was not found. Negative value of `$nth` means searching from the end.

/--php
echo Strings::indexOf('abc abc abc', 'abc', 2); // 4
echo Strings::indexOf('abc abc abc', 'abc', -1); // 8
echo Strings::indexOf('abc abc abc', 'd'); // null
\--

.[note]
Version 2 returns `false` instead of `null`.


Encoding
========

fixEncoding(string $s): string .[method]
----------------------------------------

Removes all invalid UTF-8 characters from a string.

/--php
$correctStrings = Strings::fixEncoding($string);
\--


checkEncoding(string $s): bool .[method]
----------------------------------------

Checks if the string is valid for UTF-8 encoding.

/--php
$isUtf8 = Strings::checkEncoding($string);
\--


toAscii(string $s): string .[method]
------------------------------------

Converts string to ASCII.

/--php
echo Strings::toAscii('žluťoučký kůň'); // zlutoucky kun
\--


chr(string $code): string .[method]
-----------------------------------

Returns a specific character in UTF-8.

/--php
echo Strings::chr(0xA9); // creates '©'
\--


Regular Expressions
===================

Class Strings contains a few methods for working with regular expressions. Unlike native php functions, it provides readable API and throws `Nette\RegexpException` if any regexp error occurs.


split(string $subject, string $pattern, int $flags=null): array .[method]
-------------------------------------------------------------------------

Splits a string into array by the regular expression. Argument `$flag` takes same arguments as [php:preg_split], but `PREG_SPLIT_DELIM_CAPTURE` is set by default.

/--php
$res = Strings::split('One,  two,three', '~,\s*~');
// ['One', 'two', 'three']
$res = Strings::split('One,  two,three', '~(,)\s*~');
// ['One', ',', 'two', ',', 'three']
\--


match(string $subject, string $pattern, int $flags=null, int $offset=0): array .[method]
----------------------------------------------------------------------------------------

Checks if given string matches a regex pattern and returns an array with first found match and each subpattern. Argument `$flag` takes same arguments as function [php:preg_match].

/--php
list($res) = Strings::match('One,  two,three', '~[a-z]+~i'); // 'One'
list($res) = Strings::match('One,  two,three', '~\d+~'); // null
\--


matchAll(string $subject, string $pattern, int $flags=null, int $offset=0): array .[method]
-------------------------------------------------------------------------------------------

Finds all occurrences matching regular expression pattern and returns a two-dimensional array. Argument `$flag` takes same arguments as function [php:preg_match_all], but `PREG_SET_ORDER` is set by default.

/--php
$res = Strings::matchAll('One,  two,tree', '~[a-z]+~i');
/*
[
	0 => ['One'],
	1 => ['two'],
	2 => ['three'],
]
*/

$res = Strings::matchAll('One,  two,three', '~\d+~'); // []
\--


replace(string $subject, string $pattern, string $replacement=null, int $limit=-1): string .[method]
----------------------------------------------------------------------------------------------------

Replaces all occurrences matching regular expression, passed in as second argument. Though it might as well be a hash-map in `pattern => replacement` format. The third argument is a replacement string or a callback and the fourth limits the count of replacements.

/--php
echo Strings::replace('One, two,three', '~[a-z]+~i', '*');
// '*,  *,*'

echo Strings::replace('One,  two,three', [
	'~[a-z]+~i' => '*',
	'~\s+~' => '+',
]);
// '*,+*,*'

echo Strings::replace('One,  two,three', '~[a-z]+~i', function ($m) {
	return strrev($m[0]);
});
// 'enO,  owt,eerht'
\--


{{composer: nette/utils}}
