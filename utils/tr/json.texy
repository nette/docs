JSON İşlevleri
**************

.[perex]
[api:Nette\Utils\Json] JSON kodlama ve kod çözme işlevlerine sahip durağan bir sınıftır. Farklı PHP sürümlerindeki güvenlik açıklarını ele alır ve hatalarda istisnalar atar.

Kurulum:

```shell
composer require nette/utils
```

Tüm örnekler aşağıdaki sınıf takma adının tanımlandığını varsayar:

```php
use Nette\Utils\Json;
```


Kullanım .[#toc-usage]
======================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

`$value` adresini JSON biçimine dönüştürür.

`$pretty` ayarlandığında, JSON'u daha kolay okuma ve anlaşılırlık için biçimlendirir:

```php
Json::encode($value); // JSON döndürür
Json::encode($value, pretty: true); // daha net JSON döndürür
```

`$asciiSafe` ayarlandığında, ASCII çıktısı üretir, yani unicode karakterleri `\uxxxx` dizileriyle değiştirir:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

`$htmlSafe` parametresi, çıktının HTML'de özel anlamı olan karakterler içermemesini sağlar:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

`$forceObjects` ile, sayısal anahtarlara sahip diziler bile JavaScript nesneleri olarak kodlanacaktır:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Hata durumunda bir `Nette\Utils\JsonException` istisnası atar.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// İstisna işleme
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

JSON'u PHP'ye ayrıştırır.

`$forceArray` ayarı, nesneler yerine dizilerin döndürülmesini zorlar:

```php
Json::decode('{"variable": true}'); // stdClass türünde bir nesne döndürür
Json::decode('{"variable": true}', forceArray: true); // bir dizi döndürür
```

Hata durumunda bir `Nette\Utils\JsonException` istisnası atar.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// İstisna işleme
}
```


Bir Sunucudan JSON Nasıl Gönderilir? .[#toc-how-to-send-a-json-from-a-presenter]
================================================================================

Örneğin `action*()` yönteminde çağrılabilen `$this->sendJson($data)` yöntemini kullanabilirsiniz, [Yanıt Gönderme |application:presenters#Sending a Response] bölümüne bakın.
