Bootstrap
*********

<div class=perex>

Bootstrap √© o c√≥digo de inicializa√ß√£o que inicializa o ambiente, cria um recipiente de inje√ß√£o de depend√™ncia (DI), e inicia a aplica√ß√£o. Vamos discutir:

- como configurar sua aplica√ß√£o utilizando arquivos NEON
- como lidar com os modos de produ√ß√£o e desenvolvimento
- como criar o recipiente DI

</div>


As aplica√ß√µes, sejam scripts baseados na web ou em linha de comando, come√ßam por alguma forma de inicializa√ß√£o do ambiente. Nos tempos antigos, podia ser um arquivo chamado, por exemplo, `include.inc.php` que estava encarregado disto, e estava inclu√≠do no arquivo inicial.
Nas aplica√ß√µes Nette modernas, ele foi substitu√≠do pela classe `Bootstrap`, que como parte da aplica√ß√£o pode ser encontrada no `app/Bootstrap.php`. Pode ser parecido, por exemplo, com isto:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// O configurador √© respons√°vel pela configura√ß√£o do ambiente e dos servi√ßos do aplicativo.
		$this->configurator = new Configurator;
		// Defina o diret√≥rio para os arquivos tempor√°rios gerados pelo Nette (por exemplo, modelos compilados)
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// O Nette √© inteligente e o modo de desenvolvimento √© ativado automaticamente,
		// ou voc√™ pode ativ√°-lo para um endere√ßo IP espec√≠fico, descomentando a seguinte linha:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Habilita o Tracy: a melhor ferramenta de depura√ß√£o do tipo "canivete su√≠√ßo".
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: carrega automaticamente todas as classes no diret√≥rio fornecido
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Carregar arquivos de configura√ß√£o
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php .[#toc-index-php]
===========================

O arquivo inicial para aplicativos Web √© `index.php`, localizado no diret√≥rio p√∫blico `www/`. Ele usa a classe `Bootstrap` para inicializar o ambiente e criar um cont√™iner DI. Em seguida, ele obt√©m o servi√ßo `Application` do cont√™iner, que inicia o aplicativo Web:

```php
$bootstrap = new App\Bootstrap;
// Inicializar o ambiente + criar um cont√™iner DI
$container = $bootstrap->bootWebApplication();
// O cont√™iner DI cria um objeto Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// Iniciar o aplicativo Nette e tratar a solicita√ß√£o de entrada
$application->run();
```

Como voc√™ pode ver, a classe [api:Nette\Bootstrap\Configurator], que agora vamos apresentar mais detalhadamente, ajuda a configurar o ambiente e criar um recipiente de inje√ß√£o de depend√™ncia (DI).


Desenvolvimento vs Modo de Produ√ß√£o .[#toc-development-vs-production-mode]
==========================================================================

O Nette se comporta de forma diferente, dependendo se est√° sendo executado em um servidor de desenvolvimento ou de produ√ß√£o:

üõ†Ô∏è Development Mode (Modo de desenvolvimento):
	- Exibe a barra de depura√ß√£o Tracy com informa√ß√µes √∫teis (por exemplo, consultas SQL, tempo de execu√ß√£o, uso de mem√≥ria).
	- Mostra uma p√°gina de erro detalhada com rastros de chamadas de fun√ß√£o e conte√∫do de vari√°veis quando ocorre um erro.
	- Atualiza automaticamente o cache quando modelos Latte, arquivos de configura√ß√£o etc. s√£o modificados.


Modo de produ√ß√£o:
	- N√£o exibe nenhuma informa√ß√£o de depura√ß√£o; todos os erros s√£o registrados.
	- Mostra um `ErrorPresenter` ou uma p√°gina gen√©rica de "Erro do servidor" quando ocorre um erro.
	- O cache nunca √© atualizado automaticamente!
	- Otimizado para velocidade e seguran√ßa.


O modo √© determinado automaticamente, portanto, na maioria dos casos, n√£o h√° necessidade de configur√°-lo ou altern√°-lo manualmente:

- Modo de desenvolvimento: Ativo no localhost (endere√ßo IP `127.0.0.1` ou `::1`), a menos que um proxy esteja em uso (ou seja, com base em seus cabe√ßalhos HTTP).
- Modo de produ√ß√£o: Ativo em todos os outros lugares.

Se voc√™ quiser ativar o modo de desenvolvimento em outros casos, por exemplo, para programadores que acessam de um endere√ßo IP espec√≠fico, voc√™ pode usar `setDebugMode()`:

```php
$this->configurator->setDebugMode('23.75.345.200'); // um ou mais endere√ßos IP
```

Definitivamente, recomendamos combinar um endere√ßo IP com um cookie. Armazenaremos um token secreto no cookie `nette-debug`, por exemplo `secret1234`, e o modo de desenvolvimento ser√° ativado para programadores com esta combina√ß√£o de IP e cookie.

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Tamb√©m podemos desligar completamente o modo desenvolvedor, mesmo para o localhost:

```php
$this->configurator->setDebugMode(false);
```

Note que o valor `true` liga o modo desenvolvedor por hard, o que nunca deveria acontecer em um servidor de produ√ß√£o.


Ferramenta de depura√ß√£o Tracy .[#toc-debugging-tool-tracy]
==========================================================

Para facilitar a depura√ß√£o, vamos acionar a grande ferramenta [Tracy |tracy:]. No modo desenvolvedor ela visualiza os erros e no modo de produ√ß√£o registra os erros no diret√≥rio especificado:

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Arquivos tempor√°rios .[#toc-temporary-files]
============================================

Nette utiliza o cache para cont√™iner DI, RobotLoader, modelos, etc. Portanto, √© necess√°rio definir o caminho para o diret√≥rio onde o cache ser√° armazenado:

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

No Linux ou macOS, defina as [permiss√µes de escrita |nette:troubleshooting#Setting directory permissions] para os diret√≥rios `log/` e `temp/`.


RobotLoader .[#toc-robotloader]
===============================

Normalmente, queremos carregar automaticamente as classes usando [o RobotLoader |robot-loader:], ent√£o temos que inici√°-lo e deix√°-lo carregar classes do diret√≥rio onde se encontra `Bootstrap.php` (ou seja, `__DIR__`) e todos os seus subdiret√≥rios:

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Uma maneira alternativa √© usar apenas o [Composer |best-practices:composer] PSR-4 auto-carregamento.


Fuso hor√°rio .[#toc-timezone]
=============================

O Configurador permite que voc√™ especifique um fuso hor√°rio para sua aplica√ß√£o.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Configura√ß√£o de cont√™ineres DI .[#toc-di-container-configuration]
=================================================================

Parte do processo de inicializa√ß√£o √© a cria√ß√£o de um container DI, ou seja, uma f√°brica para objetos, que √© o cora√ß√£o de toda a aplica√ß√£o. Na verdade, √© uma classe PHP gerada pela Nette e armazenada em um diret√≥rio cache. A f√°brica produz objetos chave da aplica√ß√£o e arquivos de configura√ß√£o instruem-no como cri√°-los e configur√°-los, e assim influenciamos o comportamento de toda a aplica√ß√£o.

Os arquivos de configura√ß√£o s√£o geralmente escritos no [formato NEON |neon:format]. Voc√™ pode ler [o que pode ser configurado aqui |nette:configuring].

.[tip]
No modo de desenvolvimento, o recipiente √© atualizado automaticamente cada vez que voc√™ altera o c√≥digo ou os arquivos de configura√ß√£o. No modo de produ√ß√£o, ele √© gerado apenas uma vez e as mudan√ßas de arquivo n√£o s√£o verificadas para maximizar o desempenho.

Os arquivos de configura√ß√£o s√£o carregados usando `addConfig()`:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

O m√©todo `addConfig()` pode ser chamado v√°rias vezes para adicionar v√°rios arquivos.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

O nome `cli.php` n√£o √© um erro de digita√ß√£o, a configura√ß√£o tamb√©m pode ser escrita em um arquivo PHP, que a devolve como um array.

Alternativamente, podemos usar a [se√ß√£o`includes`  |dependency-injection:configuration#including files] para carregar mais arquivos de configura√ß√£o.

Se itens com as mesmas chaves aparecerem dentro dos arquivos de configura√ß√£o, eles ser√£o [sobrescritos ou fundidos |dependency-injection:configuration#Merging] no caso de arrays. O arquivo inclu√≠do posteriormente tem uma prioridade mais alta do que o anterior. O arquivo no qual a se√ß√£o `includes` √© listada tem uma prioridade mais alta do que os arquivos inclu√≠dos nela.


Par√¢metros est√°ticos .[#toc-static-parameters]
----------------------------------------------

Os par√¢metros usados nos arquivos de configura√ß√£o podem ser definidos [na se√ß√£o `parameters` |dependency-injection:configuration#parameters] e tamb√©m passados (ou sobrescritos) pelo m√©todo `addStaticParameters()` (tem o pseud√¥nimo `addParameters()`). √â importante que diferentes valores de par√¢metros causem a gera√ß√£o de recipientes DI adicionais, ou seja, classes adicionais.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

Nos arquivos de configura√ß√£o, podemos escrever a nota√ß√£o usual `%projectId%` para acessar o par√¢metro `projectId`.


Par√¢metros din√¢micos .[#toc-dynamic-parameters]
-----------------------------------------------

Tamb√©m podemos adicionar par√¢metros din√¢micos ao recipiente, seus diferentes valores, ao contr√°rio dos par√¢metros est√°ticos, n√£o causar√£o a gera√ß√£o de novos recipientes DI.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

As vari√°veis ambientais poderiam ser facilmente disponibilizadas usando par√¢metros din√¢micos. Podemos acess√°-las via `%env.variable%` em arquivos de configura√ß√£o.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Par√¢metros padr√£o .[#toc-default-parameters]
--------------------------------------------

Voc√™ pode usar os seguintes par√¢metros est√°ticos nos arquivos de configura√ß√£o:

- `%appDir%` √© o caminho absoluto para o diret√≥rio do arquivo `Bootstrap.php`
- `%wwwDir%` √© o caminho absoluto para o diret√≥rio que cont√©m o arquivo de entrada `index.php`
- `%tempDir%` √© o caminho absoluto para o diret√≥rio de arquivos tempor√°rios
- `%vendorDir%` √© o caminho absoluto para o diret√≥rio onde o Composer instala as bibliotecas
- `%rootDir%` √© o caminho absoluto para o diret√≥rio raiz do projeto
- `%debugMode%` indica se a aplica√ß√£o est√° em modo de depura√ß√£o
- `%consoleMode%` indica se o pedido veio atrav√©s da linha de comando


Servi√ßos Importados .[#toc-imported-services]
---------------------------------------------

Estamos indo mais fundo agora. Embora o prop√≥sito de um recipiente DI seja criar objetos, excepcionalmente pode haver a necessidade de inserir um objeto existente no recipiente. Fazemos isso definindo o servi√ßo com o atributo `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Criar uma nova inst√¢ncia e inseri-la no bootstrap:

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Diferentes Ambientes .[#toc-different-environments]
===================================================

N√£o hesite em personalizar a classe `Bootstrap` de acordo com suas necessidades. Voc√™ pode adicionar par√¢metros ao m√©todo `bootWebApplication()` para diferenciar os projetos da Web. Como alternativa, voc√™ pode adicionar outros m√©todos, como `bootTestEnvironment()` para inicializar o ambiente para testes de unidade, `bootConsoleApplication()` para scripts chamados pela linha de comando e assim por diante.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // Inicializa√ß√£o do Nette Tester
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
