Práce s poli
************

.[perex]
Tato stránka se věnuje třídám [Nette\Utils\Arrays|#Arrays], [#ArrayHash] a [#ArrayList], které se týkají polí.


Instalace:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] je statická třída obsahující užitečné funkce pro práci s poli. Její obdobou pro iterátory je [Nette\Utils\Iterables|iterables].

Následující příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Funkce flexibilně transformuje pole `$array` na asociativní pole nebo objekty podle zadané cesty `$path`. Cesta může být řetězec nebo pole. Tvoří ji názvy klíčů vstupního pole a operátory jako '[]', '->', '=', a '|'. Vyhazuje `Nette\InvalidArgumentException` v případě, že cesta je neplatná.

```php
// převod na asociativní pole podle jednoduchého klíče
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// přiřazení hodnot z jednoho klíče k jinému s použitím operátoru =
$result = Arrays::associate($arr, 'name=age'); // nebo ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// vytvoření objektu s použitím operátoru ->
$result = Arrays::associate($arr, '->name'); // nebo ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// kombinace klíčů pomocí operátoru |
$result = Arrays::associate($arr, 'name|age'); // nebo ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// přidání do pole s použitím []
$result = Arrays::associate($arr, 'name[]'); // nebo ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Testuje pole na přítomnost hodnoty. Používá striktní porovnání (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Testuje, zda všechny prvky v poli projdou testem implementovaným v `$predicate` se signaturou `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Viz [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Vrací nové pole obsahující všechny dvojice klíč-hodnota odpovídající zadanému predikátu. Callback má signaturu `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Vrátí první položku (odpovídající predikátu, je-li zadán). Pokud taková položka neexistuje, vrátí výsledek volání `$else` nebo null.
Parametr `$predicate` má signaturu `function ($value, int|string $key, array $array): bool`.

Nezmění vnitřní ukazatel narozdíl od `reset()`. Parametry `$predicate` a `$else` existují od verze 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Viz [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Vrací klíč první položky (odpovídající predikátu, pokud je uveden) nebo null, pokud taková položka neexistuje. Predikát `$predicate` má signaturu `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Viz [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Sjednotí víceúrovňové pole do plochého.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Vrací prvek `$array[$key]`. Pokud neexistuje, vyhodí buď výjimku `Nette\InvalidArgumentException`, nebo je-li uveden třetí parametr `$default`, vrátí ten.

```php
// pokud $array['foo'] neexistuje, vyhodí výjimku
$value = Arrays::get($array, 'foo');

// pokud $array['foo'] neexistuje, vrátí 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Klíčem `$key` může být i pole.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// vrátí 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Získá referenci na zadaný prvek pole. Pokud prvek neexistuje, bude vytvořen s hodnotou null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// vrátí referenci na $array['foo']
```

Stejně jako funkce [get() |#get()] umí pracovat s vícerozměrnými poli.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// vrátí referenci na $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Vrátí pouze ty prvky pole, jejichž hodnota odpovídá regulárnímu výrazu `$pattern`. Pokud `$invert` je `true` vrací naopak prvky, které neodpovídají. Chyba při kompilaci nebo zpracování výrazu vyhodí výjimku `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// vrátí pouze prvky pole tvořené číslicemi
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` hned za prvek s klíčem `$key`. Pokud `$key` je `null` (nebo v poli není), vkládá se na konec.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` před prvek s klíčem `$key`. Pokud `$key` je `null` (nebo v poli není), vloží se na začátek.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Vyvolá všechny callbacky a vrátí pole výsledků.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Zavolá metodu na každém objektu v poli a vrátí pole výsledků.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Ověří, zda-li je pole indexované podle vzestupné řady numerických klíčů od nuly, a.k.a list.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Vrátí poslední položku (odpovídající predikátu, je-li zadán). Pokud taková položka neexistuje, vrátí výsledek volání `$else` nebo null.
Parametr `$predicate` má signaturu `function ($value, int|string $key, array $array): bool`.

Nezmění vnitřní ukazatel narozdíl od `end()`. Parametry `$predicate` a `$else` existují od verze 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Viz [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Vrací klíč poslední položky (odpovídající predikátu, pokud je uveden) nebo null, pokud taková položka neexistuje. Predikát `$predicate` má signaturu `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Viz [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Zavolá `$transformer` na všechny prvky v poli a vrátí pole vrácených hodnot. Callback má signaturu `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Vytváří nové pole transformací hodnot a klíčů původního pole. Funkce `$transformer` má signaturu `function ($value, $key, array $array): ?array{$newKey, $newValue}`. Pokud `$transformer` vrátí `null`, prvek je přeskočen. Pro zachované prvky se první prvek vráceného pole použije jako nový klíč a druhý prvek jako nová hodnota.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Tato metoda je užitečná v situacích, kdy potřebujete změnit strukturu pole (klíče i hodnoty současně) nebo filtrovat prvky při transformaci (vracením null pro nežádoucí prvky).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Rekurzivně sloučí dvě pole. Hodí se například ke slučování stromových struktur. Při slučování se řídí stejnými pravidly jako operátor&nbsp;`+` aplikovaný na pole, tj. k prvnímu poli přidává dvojice klíč/hodnota z druhého pole a v případě kolize klíčů ponechá hodnotu z prvního pole.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Hodnoty z druhého pole jsou vždy přidány na konec prvního. Jako trošku matoucí se může zdát zmizení hodnoty `10` z druhého pole. Je třeba si uvědomit, že tato hodnota a stejně tak hodnota `5` v poli prvním mají přiřazený stejný numerický klíč `0`, proto ve výsledném poli je jen prvek z prvního pole.


normalize(array $array, string $filling=null): array .[method]
--------------------------------------------------------------

Normalizuje pole na asociativní pole. Numerické klíče nahradí jejich hodnotami, novou hodnotou bude `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, mixed $default=null): mixed .[method]
--------------------------------------------------------------------------

Vrátí a odstraní hodnotu prvku z pole. Pokud neexistuje, vyhodí výjimku, nebo vrátí hodnotu `$default`, pokud je uvedena.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Přejmenuje klíč v poli. Vrací `true`, pokud byl klíč v poli nalezen.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Vrátí pozici daného klíče v poli. Pozice je číslována od 0. V případě, že klíč nebude nalezen, vrátí funkce `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // vrátí 0
$position = Arrays::getKeyOffset($array, 'second'); // vrátí 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // vrátí null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Testuje, zda alespoň jeden prvek v poli projde testem implementovaným v `$predicate` se signaturou `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Viz [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Převede hodnotu na klíč pole, což je buď integer, nebo řetězec.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Zkopíruje prvky pole `$array` do objektu `$object`, který poté vrátí.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // nastaví $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Každou položku v poli přetypuje na řetězec a obalí předponou `$prefix` a příponou `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

Objekt [api:Nette\Utils\ArrayHash] je potomkem generické třídy stdClass a rozšiřuje jej o schopnost zacházet s ním jako s polem, tedy například přistupovat ke členům přes hranaté závorky:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // zároveň funguje i objektový zápis
$hash->foo; // 123
```

Lze používat funkci `count($hash)` pro zjištění počtu prvků.

Nad objektem lze iterovat stejně jako v případě pole, a to i s referencí:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Existující pole můžeme tranformovat na `ArrayHash` metodou `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Převod je rekurzivní:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // objekt ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Tomu lze zabránit druhým parametrem:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // pole
```

Transformace zpátky na pole:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] představuje lineární pole, kde indexy jsou pouze celá čísla vzestupně od 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Existující pole můžeme tranformovat na `ArrayList` metodou `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Lze používat funkci `count($list)` pro zjištění počtu prvků.

Nad objektem lze iterovat stejně jako v případě pole, a to i s referencí:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

Přístup ke klíčům mimo povolené hodnoty vyhodí výjimku `Nette\OutOfRangeException`:

```php
echo $list[-1]; // vyhodí Nette\OutOfRangeException
unset($list[30]); // vyhodí Nette\OutOfRangeException
```

Odstranění klíče způsobí přečíslování prvků:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Nový prvek lze přidat na začátek metodou `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
