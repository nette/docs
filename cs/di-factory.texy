DI: Továrny
***********

.[perex]
Nette DI umí automaticky generovat kód továren na základě rozhraní, což vám ušetří psaní kódu.

Továrna je třída, která vyrábí a konfiguruje objekty. Předává jim tedy i jejich závislosti. Jak taková továrna vypadá jsme si ukázali v [úvodní kapitole|dependency-injection#továrna].

Nette DI umí kód továren automaticky generovat. Vše, co musíte udělat, je vytvořit rozhraní a Nette DI vygeneruje implementaci. Rozhraní musí mít přesně jednu metodu s názvem `create` a deklarovat návratový typ:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Tedy továrna `ArticleFactory` má metodu `create`, která vytváří objekty `Article`. Třída `Article` může vypadat třeba následovně:

```php
class Article
{
	private $db;

	public function __construct(Nette\Database\Connection $db)
	{
		$this->db = $db;
	}
}
```

Továrnu přidáme do konfiguračního souboru `config.neon`:

```neon
services:
	- ArticleFactory
```

Nette DI vygeneruje odpovídající implementaci továrny.

V kódu, který továrnu používá, si tak vyžádáme objekt podle rozhraní a Nette DI použije vygenerovanou implementaci:

```php
class UserController
{
	private $articleFactory;

	public function __construct(ArticleFactory $articleFactory)
	{
		$this->articleFactory = $articleFactory;
	}

	public function foo()
	{
		// necháme továrnu vytvořit objekt
		$article = $this->articleFactory->create();
	}
}
```


Parametrizovaná továrna
=======================

Tovární metoda `create` může přijímat parametry, které poté předá do konstrukturu. Doplňme například třídu `Article` o ID autora článku:

```php
class Article
{
	private $db;
	private $authorId;

	public function __construct(Nette\Database\Connection $db, int $authorId)
	{
		$this->db = $db;
		$this->authorId = $authorId;
	}
}
```

Parametr přidáme také do továrny:

```php
interface ArticleFactory
{
	function create(int $authorId): Article;
}
```

Díky tomu, že se parametr v konstruktoru i parametr v továrně jmenují stejně, Nette DI je zcela automaticky předá.


Pokročilá definice
==================

Definici lze zapsat i ve víceřádkové podobě za použití klíče `implement`:

```neon
services:
	articleFactory:
		implement: ArticleFactory
```

Při zápisu tímto delším způsobem je možné uvést další argumenty pro konstruktor v klíči `arguments` a doplňující konfiguraci pomocí `setup`, stejně, jako u běžných služeb.

Příklad: pokud by metoda `create()` nepřijímala parametr `$authorId`, mohli bychom uvést pevnou hodnotu v konfiguraci, která by se předávala do konstruktoru `Article`:

```neon
services:
	articleFactory:
		implement: ArticleFactory
		arguments:
			authorId: 123
```

Nebo naopak pokud by `create()` parametr `$authorId` přijimala, ale nebyl by součástí konstruktoru a předával se metodou `Article::setAuthorId()`, odkázali bychom se na něj v sekci `setup`:

```neon
services:
	articleFactory:
		implement: ArticleFactory
		setup:
			- setAuthorId($authorId)
```


Továrna na komponenty
=====================

Uvažujme následující komponentu, která má závislost na `Service`:

```php
class MyControl extends Nette\Application\UI\Control
{
	private $service;

	public function __construct(Service $service)
	{
		$this->service = $service;
	}
}
```

Komponenty jsou typicky vytvářeny přímo v kódu presenteru či nadřazené komponenty. V takovém případě Nette DI nemůže závislosti automaticky předat, získáme je tedy ve třídě, která danou komponentu vytváří a předáme komponentě:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	private $service;

	public function __construct(Service $service)
	{
		$this->service = $service;
	}

	protected function createComponentMyControl(): MyControl
	{
		$control = new MyControl($this->service);
		return $control;
	}
}
```

Potože komponenta může mít závislostí více, má i v těchto případech smysl si vytvořit pro komponentu továrnu. Můžeme si ji opět nechat vygenerovat na základě rozhraní. Naše rozhraní pro komponentu může vypadat například takto:

```php
interface MyControlFactory
{
	public function create(): MyControl;
}
```

Továrnu zaregistrujeme v konfiguračním souboru:

```neon
services:
	- MyControlFactory
```

V presenteru pak bude stačit získat továrnu a zavolat metodu `create`:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	private $myControlFactory;

	public function __construct(MyControlFactory $myControlFactory)
	{
		$this->myControlFactory = $myControlFactory;
	}

	protected function createComponentMyControl(): MyControl
	{
		$control = $this->myControlFactory->create();
		return $control;
	}
}
```

Vytvořené komponentě budou automaticky konstruktorem předány její závislosti.

{{composer: nette/di}}

/--comment
TODO: extensive update
accessory, multiple tovarny
\--
