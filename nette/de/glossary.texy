Glossar
*******


AJAX .[#toc-ajax]
-----------------
Asynchronous JavaScript and XML - Technologie für die Client-Server-Kommunikation über das HTTP-Protokoll, ohne dass die gesamte Seite bei jeder Anfrage neu geladen werden muss. Trotz des Akronyms wird häufig das [JSON-Format |#JSON] anstelle von XML verwendet.


Präsentator-Aktion .[#toc-presenter-action]
-------------------------------------------
Logischer Teil des [Presenters |#presenter], der eine Aktion ausführt, z. B. eine Produktseite anzeigen, einen Benutzer abmelden usw. Ein Presenter kann mehrere Aktionen haben.


BOM
----------
Die so genannte *byte order mask* ist ein spezielles erstes Zeichen einer Datei und gibt die Bytereihenfolge in der Kodierung an. Einige Editoren fügen es automatisch ein, es ist praktisch unsichtbar, aber es verursacht Probleme mit Headern und Ausgaben, die von PHP aus gesendet werden. Sie können [Code Checker |code-checker:] zur Entfernung verwenden.


Steuergerät .[#toc-controller]
------------------------------
Der Controller verarbeitet die Anfragen des Benutzers und ruft auf deren Grundlage eine bestimmte Anwendungslogik (d.h. ein [Modell |#model]) auf, dann ruft er die [Ansicht |#view] für die Darstellung der Daten auf. Eine Analogie zu Controllern sind [Presenter |#presenter] im Nette Framework.


Cross-Site Scripting (XSS) .[#toc-cross-site-scripting-xss]
-----------------------------------------------------------
Cross-Site Scripting ist eine Methode zur Störung von Websites, bei der unverschlüsselte Eingaben verwendet werden. Ein Angreifer kann seinen eigenen HTML- oder JavaScript-Code einschleusen und das Aussehen der Seite verändern oder sogar sensible Informationen über die Benutzer sammeln. Der Schutz gegen XSS ist einfach: konsistentes und korrektes Escaping aller Strings und Eingaben.

Nette Framework verfügt über die brandneue Technologie des [Context-Aware Escaping |latte:safety-first#context-aware-escaping], mit der Sie die Cross-Site-Scripting-Risiken für immer ausschalten können. Es entschlüsselt alle Eingaben automatisch auf der Grundlage eines bestimmten Kontexts, so dass es für einen Programmierer unmöglich ist, versehentlich etwas zu vergessen.


Cross-Site Request Forgery (CSRF) .[#toc-cross-site-request-forgery-csrf]
-------------------------------------------------------------------------
Ein Cross-Site Request Forgery-Angriff besteht darin, dass der Angreifer das Opfer dazu verleitet, eine Seite zu besuchen, die im Browser des Opfers eine Anfrage an den Server ausführt, bei dem das Opfer gerade angemeldet ist, und der Server glaubt, dass die Anfrage vom Opfer absichtlich gestellt wurde. Der Server führt unter der Identität des Opfers eine bestimmte Aktion durch, ohne dass das Opfer dies bemerkt. Dabei kann es sich um das Ändern oder Löschen von Daten, das Senden einer Nachricht usw. handeln.

Nette Framework **schützt Formulare und Signale in Presentern** automatisch vor dieser Art von Angriffen. Dies geschieht, indem verhindert wird, dass sie von einer anderen Domäne aus gesendet oder aufgerufen werden.


Entkommen .[#toc-escaping]
--------------------------
Escaping ist die Umwandlung von Zeichen mit besonderer Bedeutung in einem bestimmten Kontext in eine andere gleichwertige Sequenz. Beispiel: Wir wollen Anführungszeichen in eine in Anführungszeichen eingeschlossene Zeichenfolge schreiben. Da Anführungszeichen im Kontext der in Anführungszeichen eingeschlossenen Zeichenfolge eine besondere Bedeutung haben, muss eine andere äquivalente Sequenz verwendet werden. Die konkrete Sequenz wird durch die Kontextregeln bestimmt (z. B. `\"` in PHPs in Anführungszeichen eingeschlossenem String, `&quot;` in HTML-Attributen usw.).


Filter (ehemals Helper) .[#toc-filter-formerly-helper]
------------------------------------------------------
Filter-Funktion. In Vorlagen ist ein [Filter |latte:syntax#filters] eine Funktion, die dabei hilft, Daten in der Ausgabeform zu verändern oder zu formatieren. In Vorlagen sind mehrere [Standardfilter |latte:filters] vordefiniert.


Ungültigkeitserklärung .[#toc-invalidation]
-------------------------------------------
Hinweis auf ein neu zu renderndes [Snippet |#snippet]. In anderem Zusammenhang auch Löschung eines Caches.


JSON .[#toc-json]
-----------------
Datenaustauschformat, das auf der JavaScript-Syntax (bzw. deren Untermenge) basiert. Die genaue Spezifikation finden Sie unter www.json.org.


Komponente .[#toc-component]
----------------------------
Wiederverwendbarer Teil einer Anwendung. Sie kann ein visueller Teil einer Seite sein, wie im Kapitel [application:components] beschrieben, oder der Begriff kann auch für die Klasse [Component |component-model:] stehen (eine solche Komponente muss nicht visuell sein).


Steuerelement-Zeichen .[#toc-control-characters]
------------------------------------------------
Steuerzeichen sind unsichtbare Zeichen, die in einem Text vorkommen und eventuell Probleme verursachen können. Um sie massenhaft aus Dateien zu entfernen, können Sie [Code Checker |code-checker:] verwenden, um sie aus einer Variablen zu entfernen, die Funktion [Strings::normalize() |utils:strings#normalize].


Ereignisse .[#toc-events]
-------------------------
Ein Ereignis ist eine erwartete Situation in einem Objekt, und wenn es eintritt, werden so genannte Handler, also Funktionen, die auf das Ereignis reagieren, aufgerufen ("Beispiel":https://gist.github.com/dg/332cdd51bdf7d66a6d8003b134508a38). Ein Ereignis kann die Übermittlung eines Formulars, eine Benutzeranmeldung usw. sein.

Zum Beispiel tritt eine Benutzeranmeldung in der Methode `Nette\Security\User::login()` auf. Das Objekt `User` hat eine öffentliche Variable `$onLoggedIn`, die ein Array ist, dem jeder einen Callback hinzufügen kann. Sobald sich der Benutzer anmeldet, ruft die Methode `login()` alle Rückrufe im Array auf. Der Name einer Variablen in der Form `onXyz` ist eine Konvention, die in ganz Nette verwendet wird.


Latte .[#toc-latte]
-------------------
Eines der innovativsten [Templating-Systeme |latte:] überhaupt.


Modell .[#toc-model]
--------------------
Das Modell stellt die Daten- und Funktionsbasis der gesamten Anwendung dar. Es umfasst die gesamte Anwendungslogik (manchmal auch als "Geschäftslogik" bezeichnet). Es ist das **M** von **M**VC oder MPV. Jede Benutzeraktion (Einloggen, in den Warenkorb legen, Änderung eines Datenbankwertes) stellt eine Aktion des Modells dar.

Das Modell verwaltet seinen inneren Zustand und bietet eine öffentliche Schnittstelle. Durch Aufruf dieser Schnittstelle können wir seinen Zustand annehmen oder ändern. Das Modell weiß nichts von der Existenz einer [Ansicht |#view] oder eines [Controllers |#controller], das Modell ist völlig unabhängig von ihnen.


Model-View-Controller .[#toc-model-view-controller]
---------------------------------------------------
Software-Architektur, die sich bei der Entwicklung von GUI-Anwendungen herausgebildet hat, um den Code für die Ablaufsteuerung ([Controller |#controller]) vom Code der Anwendungslogik ([Model |#model]) und vom Code für die Datenwiedergabe ([View |#view]) zu trennen. Auf diese Weise ist der Code besser verständlich, erleichtert die zukünftige Entwicklung und ermöglicht es, die einzelnen Teile getrennt zu testen.


Modell-Ansicht-Präsentator .[#toc-model-view-presenter]
-------------------------------------------------------
Architektur basierend auf [Model-View-Controller |#Model-View-Controller].


Baustein .[#toc-module]
-----------------------
Ein [Modul |application:modules] im Nette Framework stellt eine Sammlung von Presentern und Templates dar, eventuell auch Komponenten und Modelle, die einem Presenter Daten zur Verfügung stellen. Es ist also ein bestimmter logischer Teil einer Anwendung.

Ein E-Shop kann zum Beispiel drei Module haben:
1) Produktkatalog mit Warenkorb.
2) Verwaltung für den Kunden.
3) Verwaltung für den Ladenbesitzer.


Namensraum .[#toc-namespace]
----------------------------
Namespace ist ein Feature der Sprache PHP ab der Version 5.3 und auch einiger anderer Programmiersprachen. Es hilft, Namenskollisionen (z.B. zwei Klassen mit demselben Namen) zu vermeiden, wenn verschiedene Bibliotheken zusammen verwendet werden. Siehe [PHP-Dokumentation |https://www.php.net/manual/en/language.namespaces.rationale.php] für weitere Details.


Präsentator .[#toc-presenter]
-----------------------------
Presenter ist ein Objekt, das die vom Router aus der [HTTP-Anfrage |api:Nette\Application\Request] übersetzte [Anfrage |api:Nette\Application\Request] entgegennimmt und eine [Antwort |api:Nette\Application\Response] erzeugt. Die Antwort kann eine HTML-Seite, ein Bild, ein XML-Dokument, eine Datei, JSON, ein Redirect oder was auch immer Sie sich vorstellen.

Unter einem Presenter versteht man in der Regel einen Abkömmling der Klasse [api:Nette\Application\UI\Presenter]. Bei Anfragen führt er entsprechende [Aktionen |application:presenters#life-cycle-of-presenter] aus und rendert Vorlagen.


Router .[#toc-router]
---------------------
Bidirektionaler Übersetzer zwischen HTTP-Anfrage/URL und Presenter-Aktion. Bidirektional bedeutet, dass es nicht nur möglich ist, eine [Presenter-Aktion |#presenter action] aus der HTTP-Anfrage abzuleiten, sondern auch eine entsprechende URL für eine Aktion zu generieren. Mehr dazu finden Sie im Kapitel über [URL-Routing |application:routing].


SameSite Cookie .[#toc-samesite-cookie]
---------------------------------------
SameSite-Cookies bieten einen Mechanismus, um zu erkennen, was zum Laden einer Seite geführt hat. Das SameSite-Flag kann drei Werte haben: `Lax`, `Strict` und `None` (es erfordert HTTPS). Wenn eine Anfrage für eine Seite direkt aus dem Web selbst kommt oder der Benutzer die Seite durch direkte Eingabe in die Adressleiste oder durch Anklicken eines Lesezeichens öffnet,
sendet der Browser alle Cookies an den Server (d. h. mit den Flags `Lax`, `Strict` und `None`). Wenn ein Nutzer durch Anklicken eines Links von einer anderen Website auf die Website gelangt, werden Cookies mit den Kennzeichen `Lax` und `None` an den Server übermittelt. Wenn die Anfrage auf eine andere Weise zustande kommt
Wenn die Anfrage auf andere Weise erfolgt, z. B. durch Senden eines POST-Formulars von einer anderen Quelle, Laden innerhalb eines Iframe, Verwendung von JavaScript usw., werden nur Cookies mit der Kennzeichnung `None` gesendet.


Schnipsel .[#toc-snippet]
-------------------------
Ausschnitt einer Seite, der bei einer [AJAX-Anfrage |#AJAX] separat neu gerendert werden kann.


Ansicht .[#toc-view]
--------------------
Die Ansicht ist eine Anwendungsschicht, die für das Rendern der Anfrageergebnisse verantwortlich ist. Normalerweise verwendet sie ein Templating-System und weiß, wie sie ihre Komponenten oder Ergebnisse aus dem Modell darstellen muss.



/--comment
Pokyny pro autory:
- vysvětlení by mělo být stručné, cca 1 odstavec (kde nestačí stručné vysvětlení, musí být odkaz na jiné místo v dokumentaci)
- na pojmy zde pak lze odkazovat z jiných částí dokumentace případně z fóra
\--

{{leftbar: www:@menu-common}}
{{priority: -2}}
