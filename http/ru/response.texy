HTTP-ответ
**********

.[perex]
Nette инкапсулирует HTTP-ответ в объекты с понятным API.

HTTP-ответ представляет собой объект [api:Nette\Http\Response |api:Nette\Http\Response]. Если вы работаете с Nette, этот объект автоматически создается фреймворком, и вы можете получить его с помощью [внедрения зависимостей |dependency-injection:passing-dependencies]. В презентерах достаточно просто вызвать метод `$this->getHttpResponse()`.

→ [Установка и требования |@home#Instalace]


Nette\Http\Response
===================

Объект, в отличие от [Nette\Http\Request|request], является mutable (изменяемым), то есть с помощью сеттеров вы можете изменять состояние, например, отправлять заголовки. Не забывайте, что все сеттеры должны быть вызваны **перед отправкой любого вывода.** Был ли уже отправлен вывод, показывает метод `isSent()`. Если он возвращает `true`, любая попытка отправить заголовок вызовет исключение `Nette\InvalidStateException`.


setCode(int $code, ?string $reason=null) .[method]
--------------------------------------------------
Изменяет [код состояния ответа |https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10]. Для лучшей понятности исходного кода рекомендуем для кода использовать вместо чисел [предопределенные константы |api:Nette\Http\IResponse].

```php
$httpResponse->setCode(Nette\Http\Response::S404_NotFound);
```


getCode(): int .[method]
------------------------
Возвращает код состояния ответа.


isSent(): bool .[method]
------------------------
Возвращает, были ли уже отправлены заголовки с сервера в браузер, и, следовательно, уже невозможно отправлять заголовки или изменять код состояния.


setHeader(string $name, string $value) .[method]
------------------------------------------------
Отправляет HTTP-заголовок и **перезаписывает** ранее отправленный заголовок с тем же именем.

```php
$httpResponse->setHeader('Pragma', 'no-cache');
```


addHeader(string $name, string $value) .[method]
------------------------------------------------
Отправляет HTTP-заголовок и **не перезаписывает** ранее отправленный заголовок с тем же именем.

```php
$httpResponse->addHeader('Accept', 'application/json');
$httpResponse->addHeader('Accept', 'application/xml');
```


deleteHeader(string $name) .[method]
------------------------------------
Удаляет ранее отправленный HTTP-заголовок.


getHeader(string $header): ?string .[method]
--------------------------------------------
Возвращает отправленный HTTP-заголовок или `null`, если такой не существует. Параметр нечувствителен к регистру.

```php
$pragma = $httpResponse->getHeader('Pragma');
```


getHeaders(): array .[method]
-----------------------------
Возвращает все отправленные HTTP-заголовки как ассоциативный массив.

```php
$headers = $httpResponse->getHeaders();
echo $headers['Pragma'];
```


setContentType(string $type, ?string $charset=null) .[method]
-------------------------------------------------------------
Изменяет заголовок `Content-Type`.

```php
$httpResponse->setContentType('text/plain', 'UTF-8');
```


redirect(string $url, int $code=self::S302_Found): void .[method]
-----------------------------------------------------------------
Перенаправляет на другой URL. Не забудьте после этого завершить скрипт.

```php
$httpResponse->redirect('http://example.com');
exit;
```


setExpiration(?string $time) .[method]
--------------------------------------
Устанавливает экспирацию HTTP-документа с помощью заголовков `Cache-Control` и `Expires`. Параметром является либо временной интервал (как текст), либо `null`, что запрещает кеширование.

```php
// кеш в браузере истечет через час
$httpResponse->setExpiration('1 hour');
```


sendAsFile(string $fileName) .[method]
--------------------------------------
Ответ будет скачан с помощью диалогового окна *Сохранить как* под указанным именем. Сам файл при этом не отправляется.

```php
$httpResponse->sendAsFile('faktura.pdf');
```


setCookie(string $name, string $value, $time, ?string $path=null, ?string $domain=null, ?bool $secure=null, ?bool $httpOnly=null, ?string $sameSite=null) .[method]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Отправляет cookie. Значения по умолчанию параметров:

| `$path`     | `'/'`   | cookie имеет область действия на все пути в (суб)домене *(настраиваемый)*
| `$domain`   | `null`  | что означает с областью действия на текущий (суб)домен, но не его субдомены *(настраиваемый)*
| `$secure`   | `true`  | если сайт работает по HTTPS, иначе `false` *(настраиваемый)*
| `$httpOnly` | `true`  | cookie недоступен для JavaScript
| `$sameSite` | `'Lax'` | cookie может не отправляться при [доступе с другого домена|nette:glossary#SameSite cookie]

Значения по умолчанию параметров `$path`, `$domain` и `$secure` вы можете изменить в [конфигурации|configuration#HTTP cookie].

Время можно указывать как количество секунд или строку:

```php
$httpResponse->setCookie('lang', 'cs', '100 days');
```

Параметр `$domain` определяет, какие домены могут принимать cookie. Если он не указан, cookie принимает тот же (суб)домен, который его установил, но не его субдомены. Если `$domain` указан, субдомены также включаются. Поэтому указание `$domain` менее ограничивающее, чем его отсутствие. Например, при `$domain = 'nette.org'` cookie доступны и на всех субдоменах, таких как `doc.nette.org`.

Для значения `$sameSite` вы можете использовать константы `Response::SameSiteLax`, `Response::SameSiteStrict` и `Response::SameSiteNone`.


deleteCookie(string $name, ?string $path=null, ?string $domain=null, ?bool $secure=null): void .[method]
--------------------------------------------------------------------------------------------------------
Удаляет cookie. Значения по умолчанию параметров:
- `$path` с областью действия на все каталоги (`'/'`)
- `$domain` с областью действия на текущий (суб)домен, но не его субдомены
- `$secure` руководствуется настройками в [конфигурации|configuration#HTTP cookie]

```php
$httpResponse->deleteCookie('lang');
```
