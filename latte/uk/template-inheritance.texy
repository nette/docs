Спадкування та повторне використання шаблонів
*********************************************

.[perex]
Механізми повторного використання та спадкування шаблонів підвищать вашу продуктивність, оскільки кожен шаблон містить лише свій унікальний контент, а повторювані елементи та структури використовуються повторно. Представляємо три концепції: `[спадкування макетів |#layoutová dědičnost]`, `[горизонтальне повторне використання |#horizontální znovupoužití]` та `[спадкування одиниць |#jednotková dědičnost]`.

Концепція спадкування шаблонів Latte схожа на спадкування класів у PHP. Ви визначаєте **батьківський шаблон**, від якого можуть успадковуватися інші **дочірні шаблони** і можуть перезаписувати частини батьківського шаблону. Це чудово працює, коли елементи мають спільну структуру. Звучить складно? Не хвилюйтеся, це дуже просто.


Спадкування макетів `{layout}` .{toc:Спадкування макетів}
=========================================================

Розглянемо спадкування шаблону макета, тобто layout, на прикладі. Це батьківський шаблон, який ми назвемо, наприклад, `layout.latte`, і який визначає каркас HTML-документа:

```latte
<!doctype html>
<html lang="en">
<head>
	<title>{block title}{/block}</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="content">
		{block content}{/block}
	</div>
	<div id="footer">
		{block footer}&copy; Copyright 2008{/block}
	</div>
</body>
</html>
```

Теги `{block}` визначають три блоки, які дочірні шаблони можуть заповнити. Тег block лише повідомляє, що це місце може бути перезаписане дочірнім шаблоном шляхом визначення власного блоку з такою самою назвою.

Дочірній шаблон може виглядати так:

```latte
{layout 'layout.latte'}

{block title}My amazing blog{/block}

{block content}
	<p>Welcome to my awesome homepage.</p>
{/block}
```

Ключовим тут є тег `{layout}`. Він повідомляє Latte, що цей шаблон «розширює» інший шаблон. Коли Latte рендерить цей шаблон, він спочатку знаходить батьківський шаблон — у цьому випадку `layout.latte`.

У цей момент Latte помічає три теги block у `layout.latte` і замінює ці блоки вмістом дочірнього шаблону. Оскільки дочірній шаблон не визначив блок *footer*, замість нього використовується вміст з батьківського шаблону. Вміст у тегу `{block}` у батьківському шаблоні завжди використовується як резервний.

Вивід може виглядати так:

```latte
<!doctype html>
<html lang="en">
<head>
	<title>My amazing blog</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<div id="content">
		<p>Welcome to my awesome homepage.</p>
	</div>
	<div id="footer">
		&copy; Copyright 2008
	</div>
</body>
</html>
```

У дочірньому шаблоні блоки можуть бути розміщені лише на найвищому рівні або всередині іншого блоку, тобто:

```latte
{block content}
	<h1>{block title}Welcome to my awesome homepage{/block}</h1>
{/block}
```

Також блок завжди буде створено незалежно від того, чи буде навколишня умова `{if}` оцінена як true чи false. Тож, навіть якщо це не виглядає так, цей шаблон визначає блок.

```latte
{if false}
	{block head}
		<meta name="robots" content="noindex, follow">
	{/block}
{/if}
```

Якщо ви хочете, щоб вивід всередині блоку відображався умовно, використовуйте замість цього наступне:

```latte
{block head}
	{if $condition}
		<meta name="robots" content="noindex, follow">
	{/if}
{/block}
```

Простір поза блоками в дочірньому шаблоні виконується перед рендерингом шаблону макета, тому ви можете використовувати його для визначення змінних, таких як `{var $foo = bar}`, і для поширення даних по всьому ланцюжку спадкування:

```latte
{layout 'layout.latte'}
{var $robots = noindex}

...
```


Багаторівневе спадкування
-------------------------
Ви можете використовувати стільки рівнів спадкування, скільки вам потрібно. Поширеним способом використання спадкування макетів є наступний трирівневий підхід:

1) Створіть шаблон `layout.latte`, який містить основний каркас зовнішнього вигляду сайту.
2) Створіть шаблон `layout-SECTIONNAME.latte` для кожної секції вашого сайту. Наприклад, `layout-news.latte`, `layout-blog.latte` тощо. Усі ці шаблони розширюють `layout.latte` і включають стилі та дизайн, специфічні для окремих секцій.
3) Створіть індивідуальні шаблони для кожного типу сторінки, наприклад, для статті новин або запису в блозі. Ці шаблони розширюють відповідний шаблон секції.


Динамічне спадкування
---------------------
Як назву батьківського шаблону можна використовувати змінну або будь-який вираз PHP, тому спадкування може поводитися динамічно:

```latte
{layout $standalone ? 'minimum.latte' : 'layout.latte'}
```

Ви також можете використовувати Latte API для `[автоматичного |develop#automaticke-dohledavani-layoutu]` вибору шаблону макета.


Поради
------
Ось кілька порад щодо роботи зі спадкуванням макетів:

- Якщо ви використовуєте `{layout}` у шаблоні, це має бути перший тег шаблону в цьому шаблоні.

- Макет може `[автоматично знаходитись |develop#automaticke-dohledavani-layoutu]` (як, наприклад, у `[presenter'ах |application:templates#hledani-sablon]`). У такому випадку, якщо шаблон не повинен мати макет, він повідомляє про це тегом `{layout none}`.

- Тег `{layout}` має псевдонім `{extends}`.

- Назва файлу макета залежить від `[завантажувача |loaders]`.

- Ви можете мати скільки завгодно блоків. Пам'ятайте, що дочірні шаблони не зобов'язані визначати всі батьківські блоки, тому ви можете заповнити розумні значення за замовчуванням у кількох блоках, а потім визначити лише ті, які вам потрібні пізніше.


Блоки `{block}` .{toc: Блоки}
=============================

.[note]
Див. також анонімний [`{block}` |tags#block]

Блок представляє спосіб змінити рендеринг певної частини шаблону, але жодним чином не втручається в логіку навколо нього. У наступному прикладі ми покажемо, як блок працює, а також як він не працює:

```latte .{file: parent.latte}
{foreach $posts as $post}
{block post}
	<h1>{$post->title}</h1>
	<p>{$post->body}</p>
{/block}
{/foreach}
```

Якщо ви відрендерите цей шаблон, результат буде точно таким же, як з тегами `{block}`, так і без них. Блоки мають доступ до змінних із зовнішніх областей видимості. Вони лише дають можливість бути перезаписаними дочірнім шаблоном:

```latte .{file: child.latte}
{layout 'parent.Latte'}

{block post}
	<article>
		<header>{$post->title}</header>
		<section>{$post->text}</section>
	</article>
{/block}
```

Тепер при рендерингу дочірнього шаблону цикл буде використовувати блок, визначений у дочірньому шаблоні `child.Latte`, замість блоку, визначеного в `parent.Latte`; запущений шаблон тоді еквівалентний наступному:

```latte
{foreach $posts as $post}
	<article>
		<header>{$post->title}</header>
		<section>{$post->text}</section>
	</article>
{/foreach}
```

Однак, якщо ми створимо нову змінну всередині іменованого блоку або замінимо значення існуючої, зміна буде видима лише всередині блоку:

```latte
{var $foo = 'foo'}
{block post}
	{do $foo = 'new value'}
	{var $bar = 'bar'}
{/block}

foo: {$foo}                  // prints: foo
bar: {$bar ?? 'not defined'} // prints: not defined
```

Вміст блоку можна змінити за допомогою `[фільтрів |syntax#filtry]`. Наступний приклад видаляє весь HTML і змінює регістр літер:

```latte
<title>{block title|stripHtml|capitalize}...{/block}</title>
```

Тег також можна записати як `[n:атрибут |syntax#n:atributy]`:

```latte
<article n:block=post>
	...
</article>
```


Локальні блоки
--------------

Кожен блок перезаписує вміст батьківського блоку з такою самою назвою — крім локальних блоків. У класах це було б щось на зразок приватних методів. Таким чином, ви можете створювати шаблон, не турбуючись, що через збіг імен блоків вони будуть перезаписані з іншого шаблону.

```latte
{block local helper}
	...
{/block}
```


Рендеринг блоків `{include}` .{toc: Рендеринг блоків}
-----------------------------------------------------

.[note]
Див. також [`{include file}` |tags#include]

Щоб вивести блок у певному місці, використовуйте тег `{include blockname}`:

```latte
<title>{block title}{/block}</title>

<h1>{include title}</h1>
```

Також можна вивести блок з іншого шаблону:

```latte
{include footer from 'main.latte'}
```

Блок, що рендериться, не має доступу до змінних активного контексту, за винятком випадків, коли блок визначено в тому ж файлі, де він і вставлений. Однак він має доступ до глобальних змінних.

Ви можете передавати змінні в блок таким чином:

```latte
{include footer, foo: bar, id: 123}
```

Як назву блоку можна використовувати змінну або будь-який вираз PHP. У такому випадку перед змінною ми додаємо ключове слово `block`, щоб Latte вже під час компіляції знало, що це блок, а не `[включення шаблону |tags#include]`, назва якого також могла б бути у змінній:

```latte
{var $name = footer}
{include block $name}
```

Блок можна рендерити і всередині самого себе, що, наприклад, корисно при рендерингу деревовидної структури:

```latte
{define menu, $items}
<ul>
	{foreach $items as $item}
		<li>
		{if is_array($item)}
			{include menu, $item}
		{else}
			{$item}
		{/if}
		</li>
	{/foreach}
</ul>
{/define}
```

Замість `{include menu, ...}` ми можемо написати `{include this, ...}`, де `this` означає поточний блок.

Блок, що рендериться, можна змінити за допомогою `[фільтрів |syntax#filtry]`. Наступний приклад видаляє весь HTML і змінює регістр літер:

```latte
<title>{include heading|stripHtml|capitalize}</title>
```


Батьківський блок
-----------------

Якщо вам потрібно вивести вміст блоку з батьківського шаблону, використовуйте `{include parent}`. Це корисно, якщо ви хочете лише доповнити вміст батьківського блоку, а не повністю його перезаписати.

```latte
{block footer}
	{include parent}
	<a href="https://github.com/nette">GitHub</a>
	<a href="https://twitter.com/nettefw">Twitter</a>
{/block}
```


Визначення `{define}` .{toc: Визначення}
----------------------------------------

Крім блоків, у Latte також існують «визначення». У звичайних мовах програмування ми б порівняли їх із функціями. Вони корисні для повторного використання фрагментів шаблону, щоб уникнути повторень.

Latte намагається робити речі простими, тому, по суті, визначення такі ж, як і блоки, і **все, що сказано про блоки, стосується також і визначень**. Вони відрізняються від блоків тим, що:

1) вони укладені в теги `{define}`
2) вони рендеряться лише тоді, коли ви їх вставляєте через `{include}`
3) їм можна визначати параметри, подібно до функцій у PHP

```latte
{block foo}<p>Hello</p>{/block}
{* prints: <p>Hello</p> *}

{define bar}<p>World</p>{/define}
{* prints nothing *}

{include bar}
{* prints: <p>World</p> *}
```

Уявіть, що у вас є допоміжний шаблон із колекцією визначень, як малювати HTML-форми.

```latte .{file: forms.latte}
{define input, $name, $value, $type = 'text'}
	<input type={$type} name={$name} value={$value}>
{/define}

{define textarea, $name, $value}
	<textarea name={$name}>{$value}</textarea>
{/define}
```

Аргументи завжди необов'язкові зі значенням за замовчуванням `null`, якщо не вказано значення за замовчуванням (тут `'text'` є значенням за замовчуванням для `$type`). Також можна оголошувати типи параметрів: `{define input, string $name, ...}`.

Шаблон з визначеннями завантажується за допомогою `[`{import}` |#horizontalni-znovupouziti]`. Самі визначення рендеряться `[так само, як і блоки |#Vykreslení bloků]`:

```latte
<p>{include input, 'password', null, 'password'}</p>
<p>{include textarea, 'comment'}</p>
```

Визначення не мають доступу до змінних активного контексту, але мають доступ до глобальних змінних.


Динамічні назви блоків
----------------------

Latte дозволяє велику гнучкість при визначенні блоків, оскільки назва блоку може бути будь-яким виразом PHP. Цей приклад визначає три блоки з назвами `hi-Peter`, `hi-John` та `hi-Mary`:

```latte .{file: parent.latte}
{foreach [Peter, John, Mary] as $name}
	{block "hi-$name"}Hi, I am {$name}.{/block}
{/foreach}
```

У дочірньому шаблоні ми можемо пере-визначити, наприклад, лише один блок:

```latte .{file: child.latte}
{block hi-John}Hello. I am {$name}.{/block}
```

Тож вивід виглядатиме так:

```latte
Hi, I am Peter.
Hello. I am John.
Hi, I am Mary.
```


Перевірка існування блоків `{ifset}` .{toc: Перевірка існування блоків}
-----------------------------------------------------------------------

.[note]
Див. також [`{ifset $var}` |tags#ifset-elseifset]

За допомогою тесту `{ifset blockname}` ми перевіряємо, чи існує блок (або кілька блоків) у поточному контексті:

```latte
{ifset footer}
	...
{/ifset}

{ifset footer, header, main}
	...
{/ifset}
```

Як назву блоку можна використовувати змінну або будь-який вираз PHP. У такому випадку перед змінною ми додаємо ключове слово `block`, щоб було зрозуміло, що це не тест на існування `[змінних |tags#ifset-elseifset]`:

```latte
{ifset block $name}
	...
{/ifset}
```

Існування блоків також перевіряє функція `[`hasBlock()` |functions#hasBlock]`:

```latte
{if hasBlock(header) || hasBlock(footer)}
	...
{/if}
```


Поради
------
Кілька порад щодо роботи з блоками:

- Останній блок верхнього рівня не обов'язково повинен мати закриваючий тег (блок закінчується кінцем документа). Це спрощує написання дочірніх шаблонів, які містять один основний блок.

- Для кращої читабельності ви можете вказати назву блоку в тегу `{/block}`, наприклад `{/block footer}`. Однак назва повинна збігатися з назвою блоку. У великих шаблонах ця техніка допоможе вам визначити, які теги блоків закриваються.

- Ви не можете безпосередньо визначити кілька тегів блоків з однаковою назвою в одному шаблоні. Однак цього можна досягти за допомогою `[динамічних назв блоків |#dynamické názvy bloků]`.

- Ви можете використовувати `[n:атрибути |syntax#n:atributy]` для визначення блоків, як-от `<h1 n:block=title>Welcome to my awesome homepage</h1>`

- Блоки також можна використовувати без назв лише для застосування `[фільтрів |syntax#filtry]`: `{block|strip} hello {/block}`


Горизонтальне повторне використання `{import}` .{toc: Горизонтальне повторне використання}
==========================================================================================

Горизонтальне повторне використання є третім механізмом повторного використання та спадкування в Latte. Воно дозволяє завантажувати блоки з інших шаблонів. Це схоже на те, як ми створюємо файл із допоміжними функціями в PHP, який потім завантажуємо за допомогою `require`.

Хоча спадкування макетів шаблонів є однією з найпотужніших функцій Latte, воно обмежене простим спадкуванням — шаблон може розширювати лише один інший шаблон. Горизонтальне повторне використання — це спосіб досягти множинного спадкування.

Маємо файл з визначеннями блоків:

```latte .{file: blocks.latte}
{block sidebar}...{/block}

{block menu}...{/block}
```

За допомогою команди `{import}` ми імпортуємо всі блоки та `[визначення |#definice]`, визначені в `blocks.latte`, до іншого шаблону:

```latte .{file: child.latte}
{import 'blocks.latte'}

{* тепер можна використовувати блоки sidebar та menu *}
```

Якщо ви імпортуєте блоки в батьківському шаблоні (тобто використовуєте `{import}` у `layout.latte`), блоки будуть доступні також у всіх дочірніх шаблонах, що дуже практично.

Шаблон, призначений для імпорту (наприклад, `blocks.latte`), не повинен `[розширювати |#Layoutová dědičnost]` інший шаблон, тобто використовувати `{layout}`. Однак він може імпортувати інші шаблони.

Тег `{import}` повинен бути першим тегом шаблону після `{layout}`. Назва шаблону може бути будь-яким виразом PHP:

```latte
{import $ajax ? 'ajax.latte' : 'not-ajax.latte'}
```

Ви можете використовувати стільки команд `{import}` у шаблоні, скільки забажаєте. Якщо два імпортованих шаблони визначають один і той самий блок, перемагає перший. Однак найвищий пріоритет має головний шаблон, який може перезаписати будь-який імпортований блок.

Вміст перезаписаних блоків можна зберегти, вставивши блок так само, як вставляється `[батьківський блок |#rodičovský blok]`:

```latte
{layout 'layout.latte'}

{import 'blocks.latte'}

{block sidebar}
	{include parent}
{/block}

{block title}...{/block}
{block content}...{/block}
```

У цьому прикладі `{include parent}` викликає блок `sidebar` із шаблону `blocks.latte`.


Спадкування одиниць `{embed}` .{toc: Спадкування одиниць}
=========================================================

Спадкування одиниць розширює ідею спадкування макетів до рівня фрагментів контенту. Тоді як спадкування макетів працює з «каркасом документа», який оживляють дочірні шаблони, спадкування одиниць дозволяє створювати каркаси для менших одиниць контенту та повторно використовувати їх де завгодно.

У спадкуванні одиниць ключовим є тег `{embed}`. Він поєднує поведінку `{include}` та `{layout}`. Дозволяє вставляти вміст іншого шаблону чи блоку та необов'язково передавати змінні, так само як у випадку `{include}`. Також дозволяє перезаписувати будь-який блок, визначений усередині вбудованого шаблону, як при використанні `{layout}`.

Наприклад, використаємо елемент акордеон. Розглянемо каркас елемента, збережений у шаблоні `collapsible.latte`:

```latte
<section class="collapsible {$modifierClass}">
	<h4 class="collapsible__title">
		{block title}{/block}
	</h4>

	<div class="collapsible__content">
		{block content}{/block}
	</div>
</section>
```

Теги `{block}` визначають два блоки, які дочірні шаблони можуть заповнити. Так, як у випадку батьківського шаблону при спадкуванні макетів. Ви також бачите змінну `$modifierClass`.

Давайте використаємо наш елемент у шаблоні. Тут на сцену виходить `{embed}`. Це надзвичайно потужний тег, який дозволяє нам робити все: вставляти вміст шаблону елемента, додавати до нього змінні та додавати до нього блоки з власним HTML:

```latte
{embed 'collapsible.latte', modifierClass: my-style}
	{block title}
		Hello World
	{/block}

	{block content}
		<p>Lorem ipsum dolor sit amet, consectetuer adipiscing
		elit. Nunc dapibus tortor vel mi dapibus sollicitudin.</p>
	{/block}
{/embed}
```

Вивід може виглядати так:

```latte
<section class="collapsible my-style">
	<h4 class="collapsible__title">
		Hello World
	</h4>

	<div class="collapsible__content">
		<p>Lorem ipsum dolor sit amet, consectetuer adipiscing
		elit. Nunc dapibus tortor vel mi dapibus sollicitudin.</p>
	</div>
</section>
```

Блоки всередині вбудованих тегів утворюють окремий шар, незалежний від інших блоків. Тому вони можуть мати таку ж назву, як і блок поза вбудовуванням, і на них це ніяк не впливає. За допомогою тегу `[include |#Vykreslení bloků]` всередині тегів `{embed}` ви можете вставляти блоки, створені тут, блоки з вбудованого шаблону (які *не є* `[локальними |#lokální bloky]`), а також блоки з головного шаблону, які, навпаки, *є* локальними. Ви також можете `[імпортувати блоки |#horizontální znovupoužití]` з інших файлів:

```latte
{block outer}…{/block}
{block local hello}…{/block}

{embed 'collapsible.latte', modifierClass: my-style}
	{import 'blocks.latte'}

	{block inner}…{/block}

	{block title}
		{include inner} {* works, block is defined inside embed *}
		{include hello} {* works, block is local in this template *}
		{include content} {* works, block is defined in embedded template *}
		{include aBlockDefinedInImportedTemplate} {* works *}
		{include outer} {* does not work! - block is in outer layer *}
	{/block}
{/embed}
```

Вбудовані шаблони не мають доступу до змінних активного контексту, але мають доступ до глобальних змінних.

За допомогою `{embed}` можна вставляти не тільки шаблони, але й інші блоки, і, отже, попередній приклад можна було б записати таким чином:

```latte
{define collapsible}
<section class="collapsible {$modifierClass}">
	<h4 class="collapsible__title">
		{block title}{/block}
	</h4>
	...
</section>
{/define}


{embed collapsible, modifierClass: my-style}
	{block title}
		Hello World
	{/block}
	...
{/embed}
```

Якщо ми передаємо вираз у `{embed}` і незрозуміло, чи це назва блоку чи файлу, ми додаємо ключове слово `block` або `file`:

```latte
{embed block $name} ... {/embed}
```


Випадки використання
====================

У Latte існують різні типи спадкування та повторного використання коду. Давайте підсумуємо основні концепції для більшої ясності:


`{include template}`
--------------------

**Випадок використання**: Використання `header.latte` та `footer.latte` всередині `layout.latte`.

`header.latte`

```latte
<nav>
   <div>Home</div>
   <div>About</div>
</nav>
```

`footer.latte`

```latte
<footer>
   <div>Copyright</div>
</footer>
```

`layout.latte`

```latte
{include 'header.latte'}

<main>{block main}{/block}</main>

{include 'footer.latte'}
```


`{layout}`
----------

**Випадок використання**: Розширення `layout.latte` всередині `homepage.latte` та `about.latte`.

`layout.latte`

```latte
{include 'header.latte'}

<main>{block main}{/block}</main>

{include 'footer.latte'}
```

`homepage.latte`

```latte
{layout 'layout.latte'}

{block main}
	<p>Homepage</p>
{/block}
```

`about.latte`

```latte
{layout 'layout.latte'}

{block main}
	<p>About page</p>
{/block}
```


`{import}`
----------

**Випадок використання**: `sidebar.latte` у `single.product.latte` та `single.service.latte`.

`sidebar.latte`

```latte
{block sidebar}<aside>This is sidebar</aside>{/block}
```

`single.product.latte`

```latte
{layout 'product.layout.latte'}

{import 'sidebar.latte'}

{block main}<main>Product page</main>{/block}
```

`single.service.latte`

```latte
{layout 'service.layout.latte'}

{import 'sidebar.latte'}

{block main}<main>Service page</main>{/block}
```


`{define}`
----------

**Випадок використання**: Функції, яким ми передаємо змінні і щось рендеримо.

`form.latte`

```latte
{define form-input, $name, $value, $type = 'text'}
	<input type={$type} name={$name} value={$value}>
{/define}
```

`profile.service.latte`

```latte
{import 'form.latte'}

<form action="" method="post">
	<div>{include form-input, username}</div>
	<div>{include form-input, password}</div>
	<div>{include form-input, submit, Submit, submit}</div>
</form>
```


`{embed}`
---------

**Випадок використання**: Вставка `pagination.latte` у `product.table.latte` та `service.table.latte`.

`pagination.latte`

```latte
<div id="pagination">
	<div>{block first}{/block}</div>

	{for $i = $min + 1; $i < $max - 1; $i++}
		<div>{$i}</div>
	{/for}

	<div>{block last}{/block}</div>
</div>
```

`product.table.latte`

```latte
{embed 'pagination.latte', min: 1, max: $products->count}
	{block first}First Product Page{/block}
	{block last}Last Product Page{/block}
{/embed}
```

`service.table.latte`

```latte
{embed 'pagination.latte', min: 1, max: $services->count}
	{block first}First Service Page{/block}
	{block last}Last Service Page{/block}
{/embed}
```
