Робота з масивами
*****************

.[perex]
Ця сторінка присвячена класам [Nette\Utils\Arrays |#Arrays], [#ArrayHash] та [#ArrayList], які стосуються масивів.


Встановлення:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] — це статичний клас, що містить корисні функції для роботи з масивами. Його аналогом для ітераторів є [Nette\Utils\Iterables|iterables].

Наступні приклади передбачають створений псевдонім:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

Функція гнучко перетворює масив `$array` на асоціативний масив або об'єкти відповідно до вказаного шляху `$path`. Шлях може бути рядком або масивом. Він складається з назв ключів вхідного масиву та операторів, таких як '[]', '->', '=', та '|'. Викликає `Nette\InvalidArgumentException`, якщо шлях недійсний.

```php
// перетворення на асоціативний масив за простим ключем
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// присвоєння значень з одного ключа іншому за допомогою оператора =
$result = Arrays::associate($arr, 'name=age'); // або ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// створення об'єкта за допомогою оператора ->
$result = Arrays::associate($arr, '->name'); // або ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// комбінація ключів за допомогою оператора |
$result = Arrays::associate($arr, 'name|age'); // або ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// додавання до масиву за допомогою []
$result = Arrays::associate($arr, 'name[]'); // або ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Перевіряє масив на наявність значення. Використовує строге порівняння (`===`).

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Перевіряє, чи всі елементи масиву проходять тест, реалізований у `$predicate` із сигнатурою `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Див. [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Повертає новий масив, що містить усі пари ключ-значення, які відповідають заданому предикату. Callback має сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Повертає перший елемент (що відповідає предикату, якщо він вказаний). Якщо такого елемента не існує, повертає результат виклику `$else` або null. Параметр `$predicate` має сигнатуру `function ($value, int|string $key, array $array): bool`.

Не змінює внутрішній покажчик на відміну від `reset()`. Параметри `$predicate` та `$else` існують з версії 4.0.4.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Див. [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Повертає ключ першого елемента (що відповідає предикату, якщо він вказаний) або null, якщо такого елемента не існує. Предикат `$predicate` має сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Див. [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Об'єднує багаторівневий масив у плоский.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

Повертає елемент `$array[$key]`. Якщо він не існує, викликає виняток `Nette\InvalidArgumentException`, або, якщо вказано третій параметр `$default`, повертає його.

```php
// якщо $array['foo'] не існує, викликає виняток
$value = Arrays::get($array, 'foo');

// якщо $array['foo'] не існує, повертає 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Ключем `$key` може бути і масив.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// повертає 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Отримує посилання на вказаний елемент масиву. Якщо елемент не існує, він буде створений зі значенням null.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// повертає посилання на $array['foo']
```

Так само, як функція [#get()], вміє працювати з багатовимірними масивами.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// повертає посилання на $array['color']['favorite']
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Повертає лише ті елементи масиву, значення яких відповідають регулярному виразу `$pattern`. Якщо `$invert` дорівнює `true`, повертає, навпаки, елементи, які не відповідають. Помилка під час компіляції або обробки виразу викликає виняток `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// повертає лише елементи масиву, що складаються з цифр
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Вставляє вміст масиву `$inserted` у масив `$array` одразу після елемента з ключем `$key`. Якщо `$key` дорівнює `null` (або його немає в масиві), вставляється в кінець.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Вставляє вміст масиву `$inserted` у масив `$array` перед елементом з ключем `$key`. Якщо `$key` дорівнює `null` (або його немає в масиві), вставляється на початок.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Викликає всі callback'и та повертає масив результатів.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Викликає метод для кожного об'єкта в масиві та повертає масив результатів.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Перевіряє, чи масив індексований за зростаючою послідовністю числових ключів від нуля, тобто є списком (list).

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Повертає останній елемент (що відповідає предикату, якщо він вказаний). Якщо такого елемента не існує, повертає результат виклику `$else` або null. Параметр `$predicate` має сигнатуру `function ($value, int|string $key, array $array): bool`.

Не змінює внутрішній покажчик на відміну від `end()`. Параметри `$predicate` та `$else` існують з версії 4.0.4.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Див. [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Повертає ключ останнього елемента (що відповідає предикату, якщо він вказаний) або null, якщо такого елемента не існує. Предикат `$predicate` має сигнатуру `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Див. [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Викликає `$transformer` для всіх елементів масиву та повертає масив повернутих значень. Callback має сигнатуру `function ($value, $key, array $array): mixed`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Створює новий масив шляхом трансформації значень та ключів вихідного масиву. Функція `$transformer` має сигнатуру `function ($value, $key, array $array): ?array{$newKey, $newValue}`. Якщо `$transformer` повертає `null`, елемент пропускається. Для збережених елементів перший елемент повернутого масиву використовується як новий ключ, а другий елемент — як нове значення.

```php
$array = ['a' => 1, 'b' => 2];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Цей метод корисний у ситуаціях, коли потрібно змінити структуру масиву (ключі та значення одночасно) або фільтрувати елементи під час трансформації (повертаючи null для небажаних елементів).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Рекурсивно об'єднує два масиви. Це корисно, наприклад, для об'єднання деревоподібних структур. При об'єднанні керується тими ж правилами, що й оператор `+`, застосований до масивів, тобто до першого масиву додає пари ключ/значення з другого масиву, а в разі колізії ключів залишає значення з першого масиву.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Значення з другого масиву завжди додаються в кінець першого. Дещо заплутаним може здатися зникнення значення `10` з другого масиву. Слід усвідомити, що це значення, так само як і значення `5` у першому масиві, мають однаковий числовий ключ `0`, тому у результуючому масиві є лише елемент з першого масиву.


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

Нормалізує масив до асоціативного масиву. Числові ключі замінює їхніми значеннями, новим значенням буде `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

Повертає та видаляє значення елемента з масиву. Якщо він не існує, викликає виняток або повертає значення `$default`, якщо воно вказане.

```php
$array = [1 => 'foo', 'x' => 'bar'];
$a = Arrays::pick($array, 'x');
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Перейменовує ключ у масиві. Повертає `true`, якщо ключ було знайдено в масиві.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Повертає позицію вказаного ключа в масиві. Позиція нумерується з 0. У випадку, якщо ключ не буде знайдено, функція поверне `null`.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // повертає 0
$position = Arrays::getKeyOffset($array, 'second'); // повертає 1
$position = Arrays::getKeyOffset($array, 'not-exists'); // повертає null
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Перевіряє, чи хоча б один елемент масиву проходить тест, реалізований у `$predicate` із сигнатурою `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Див. [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Перетворює значення на ключ масиву, який є або цілим числом, або рядком.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Копіює елементи масиву `$array` в об'єкт `$object`, який потім повертає.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // встановлює $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

Кожен елемент у масиві перетворює на рядок і обгортає префіксом `$prefix` та суфіксом `$suffix`.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

Об'єкт [api:Nette\Utils\ArrayHash] є нащадком загального класу stdClass і розширює його можливістю поводитися з ним як з масивом, тобто, наприклад, отримувати доступ до членів через квадратні дужки:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // одночасно працює і об'єктний запис
$hash->foo; // 123
```

Можна використовувати функцію `count($hash)` для визначення кількості елементів.

Над об'єктом можна ітерувати так само, як і над масивом, навіть за посиланням:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'нове значення';
}
```

Існуючий масив можна перетворити на `ArrayHash` за допомогою методу `from()`:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Перетворення є рекурсивним:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // об'єкт ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Цьому можна запобігти за допомогою другого параметра:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // масив
```

Перетворення назад на масив:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] представляє лінійний масив, де індекси є лише цілими числами, що зростають від 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Існуючий масив можна перетворити на `ArrayList` за допомогою методу `from()`:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Можна використовувати функцію `count($list)` для визначення кількості елементів.

Над об'єктом можна ітерувати так само, як і над масивом, навіть за посиланням:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'нове значення';
}
```

Доступ до ключів поза дозволеними значеннями викликає виняток `Nette\OutOfRangeException`:

```php
echo $list[-1]; // викликає Nette\OutOfRangeException
unset($list[30]); // викликає Nette\OutOfRangeException
```

Видалення ключа спричиняє перенумерацію елементів:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Новий елемент можна додати на початок за допомогою методу `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
