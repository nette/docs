Składanie prezenterów z traitów
*******************************

.[perex]
Jeśli potrzebujemy w wielu prezenterach zaimplementować ten sam kod (np. weryfikację, czy użytkownik jest zalogowany), można umieścić kod we wspólnym przodku. Drugą możliwością jest stworzenie jednofunkcyjnych [traitów|nette:introduction-to-object-oriented-programming#traity].

Zaletą tego rozwiązania jest to, że każdy z prezenterów może użyć dokładnie tych traitów, których rzeczywiście potrzebuje, podczas gdy wielokrotne dziedziczenie nie jest możliwe w PHP.

Te traity mogą wykorzystywać fakt, że przy tworzeniu presentera kolejno wywoływane są wszystkie [metody inject|inject-method-attribute#Metody inject]. Trzeba tylko dopilnować, aby nazwa każdej metody inject była unikalna.

Traity mogą dołączyć kod inicjalizacyjny do zdarzeń [onStartup lub onRender |application:presenters#Zdarzenia].

Przykłady:

```php
trait RequireLoggedUser
{
	public function injectRequireLoggedUser(): void
	{
		$this->onStartup[] = function () {
			if (!$this->getUser()->isLoggedIn()) {
				$this->redirect('Sign:in', $this->storeRequest());
			}
		};
	}
}

trait StandardTemplateFilters
{
	public function injectStandardTemplateFilters(TemplateBuilder $builder): void
	{
		$this->onRender[] = function () use ($builder) {
			$builder->setupTemplate($this->template);
		};
	}
}
```

Presenter następnie po prostu używa tych traitów:

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	use StandardTemplateFilters;
	use RequireLoggedUser;
}
```


{{sitename: Best Practices}}
