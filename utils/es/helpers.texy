Funciones auxiliares
********************

.[perex]
[api:Nette\Utils\Helpers] es una clase estática con funciones útiles.

Instalación:

```shell
composer require nette/utils
```

Todos los ejemplos asumen que el siguiente alias de clase está definido:

```php
use Nette\Utils\Helpers;
```


capture(callable $cb): string .[method]
---------------------------------------

Ejecuta una llamada de retorno y devuelve la salida capturada como una cadena.

```php
$res = Helpers::capture(function () use ($template) {
	$template->render();
});
```


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------

Devuelve el valor ajustado al rango inclusivo de min y max.

```php
Helpers::clamp($level, 0, 255);
```


compare(mixed $left, string $operator, mixed $right): bool .[method]
--------------------------------------------------------------------

Compara dos valores de la misma forma que PHP. Distingue entre los operadores `>`, `>=`, `<`, `<=`, `=`, `==`, `===`, `!=`, `!==`, `<>`.
La función es útil en situaciones en las que el operador es variable.

```php
Helpers::compare(10, '<', 20); // true
```


falseToNull(mixed $value): mixed .[method]
------------------------------------------

Convierte `false` a `null`, no cambia otros valores.

```php
Helpers::falseToNull(false); // null
Helpers::falseToNull(123);   // 123
```


getLastError(): string .[method]
--------------------------------

Devuelve el último error PHP ocurrido o una cadena vacía si no ocurrió ningún error. A diferencia de `error_get_last()`, no se ve afectado por la directiva de PHP `html_errors` y siempre devuelve texto, no HTML.

```php
Helpers::getLastError();
```


getSuggestion(string[] $possibilities, string $value): ?string .[method]
------------------------------------------------------------------------

Busca una cadena de `$possibilities` que sea lo más similar a `$value`, pero no la misma. Sólo admite codificaciones de 8 bits.

Es útil si una determinada opción no es válida y queremos sugerir al usuario una similar (pero diferente, por lo que se ignora la misma cadena). De esta forma, Nette crea los mensajes `did you mean ...?`.

```php
$items = ['foo', 'bar', 'baz'];
Helpers::getSuggestion($items, 'fo');   // 'foo'
Helpers::getSuggestion($items, 'barr'); // 'bar'
Helpers::getSuggestion($items, 'baz');  // 'bar', ne 'baz'
```
