Funcții flotoare
****************

.[perex]
[api:Nette\Utils\Floats] este o clasă statică cu funcții utile pentru compararea numerelor float.


Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun că este definit următorul alias de clasă:

```php
use Nette\Utils\Floats;
```


Motivație .[#toc-motivation]
============================

Vă întrebați la ce servește o clasă de comparație float? Puteți utiliza operatorii `<`, `>`, `===`, credeți dumneavoastră.
Acest lucru nu este în întregime adevărat. Ce credeți că va imprima acest cod?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Dacă executați codul, unii dintre voi vor fi surprinși că programul a tipărit `not same`.

Operațiile matematice cu numere float provoacă erori din cauza conversiei între sistemele zecimal și binar. De exemplu, `0.1 + 0.2` echivalează cu `0.300000000000000044…`. Prin urmare, atunci când comparăm numere flotante, trebuie să tolerăm o mică diferență de la o anumită zecimală.

Și asta este ceea ce face clasa `Floats`. Următoarea comparație va funcționa așa cum era de așteptat:

```php
echo Floats::areEqual($a, $b) ? 'same': 'not same'; // același
```

Când se încearcă să se compare `NAN`, se aruncă o excepție `\LogicException`.


Compararea flotorilor .[#toc-float-comparison]
==============================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Se returnează `true` dacă `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Se returnează `true` dacă `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Se returnează `true` dacă `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Se returnează `true` dacă `$a` > `$b`.

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Se returnează `true` dacă `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Dacă `$a` < `$b`, se returnează `-1`, dacă sunt egale se returnează `0` and if `$a` > `$b` se returnează `1`.

Poate fi utilizată, de exemplu, cu funcția `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr este [-3.5, 1, 2, 5]
```


Funcții ajutătoare .[#toc-helpers-functions]
============================================


isZero(float $value): bool .[method]
------------------------------------

Returnează `true` dacă valoarea este zero.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Returnează `true` dacă valoarea este un număr întreg.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
