SmartObject: PHP-Objekt-Verbesserungen
**************************************
<div class=perex>


SmartObject erweitert die Objektfähigkeiten von PHP um ein paar syntaktische Bonbons. Mögen Sie Süßigkeiten? Lesen und lernen Sie

- warum es gut ist, es zu benutzen `Nette\SmartObject`
- was *Eigenschaften* sind
- wie man Ereignisse auslöst

</div>

In diesem Kapitel konzentrieren wir uns auf `Nette\SmartObject`, ein Trait, das die Objektfähigkeiten von PHP erweitert. Dieser Trait wird von fast allen Klassen im Nette Framework verwendet. Gleichzeitig ist sie transparent genug, um in Ihren Klassen verwendet zu werden. Lassen Sie uns versuchen zu sagen, warum Sie es tun sollten.

Der Trait `Nette\SmartObject` ist ein vereinfachter Nachfolger der veralteten Klasse `Nette\Object` aus Nette 2.x.

Installation:

```shell
composer require nette/utils
```


Strenge Klassen .[#toc-strict-classes]
======================================

PHP gibt Entwicklern große Freiheiten, was es zu einer perfekten Sprache macht, um Fehler zu machen. Aber Sie können dieses schlechte Verhalten stoppen und anfangen, Anwendungen ohne schwer zu entdeckende Fehler zu schreiben. Sie fragen sich wie? Es ist ganz einfach - Sie müssen nur strengere Regeln aufstellen.

Können Sie einen Fehler in diesem Beispiel finden?

```php
class Circle
{
	public $radius = 0.0;

	public function getArea(): float
	{
		return $this->radius * $this->radius * M_PI;
	}
}

$circle = new Circle;
$circle->raduis = 10;
echo $circle->getArea(); // 10² * π ≈ 314
```

Auf den ersten Blick sieht es so aus, als würde der Code 314 ausgeben, aber er liefert 0. Wie ist das überhaupt möglich? Versehentlich wurde `$circle->radius` zu `raduis` vertippt. Das ist nur ein kleiner Tippfehler, der sich nur schwer korrigieren lässt, weil PHP nichts sagt, wenn etwas falsch ist. Nicht einmal eine Warn- oder Hinweis-Fehlermeldung. Denn PHP hält das nicht für einen Fehler.

Der genannte Fehler könnte sofort korrigiert werden, wenn die Klasse `Circle` `Nette\SmartObject` verwenden würde:

```php
class Circle
{
	use Nette\SmartObject;
}
```

Während der erste Code erfolgreich ausgeführt wurde (obwohl er einen Fehler enthielt), tat dies der zweite nicht:

[* debugger-circle.webp .{url:-} *]

Trait `Nette\SmartObject` machte `Circle` strenger und löste eine Ausnahme aus, wenn man versuchte, auf eine nicht deklarierte Eigenschaft zuzugreifen. Und [Tracy |tracy:] zeigte eine entsprechende Fehlermeldung an. Die Codezeile mit dem fatalen Tippfehler ist nun hervorgehoben und die Fehlermeldung hat eine aussagekräftige Beschreibung: *Cannot write to an undeclared property Circle::$raduis, did you mean $radius?*. Der Programmierer kann nun den Fehler beheben, den er sonst vielleicht übersehen hätte und der später nur schwer zu finden ist.

Eine der vielen bemerkenswerten Fähigkeiten von `Nette\SmartObject` ist das Auslösen von Exceptions beim Zugriff auf nicht deklarierte Member.

```php
$circle = new Circle;
echo $circle->undeclared; // throws Nette\MemberAccessException
$circle->undeclared = 1; // throws Nette\MemberAccessException
$circle->unknownMethod(); // throws Nette\MemberAccessException
```

Aber es hat noch viel mehr zu bieten!

.[note]
Verwenden Sie `SmartObject` nur für Basisklassen, die von niemandem erben, die Funktionalität wird an alle ihre Nachkommen weitergegeben.


Meinten Sie? .[#toc-did-you-mean]
=================================

Wenn Sie sich beim Zugriff auf eine Objektvariable oder beim Aufruf einer Methode vertippen, wird eine Ausnahme ausgelöst, die Ihnen mitzuteilen versucht, wo der Fehler liegt. Sie enthält den ikonischen "Meinten Sie?"-Zusatz.

```php
class Foo
{
	use Nette\SmartObject;

	public static function from($var)
	{
		// ...
	}
}

$foo = Foo::form($var);
// es wird eine Nette\MemberAccessException geworfen
// "Call to undefined static method Foo::form(), did you mean from()?"
```

Einige Tippfehler können buchstäblich unsichtbar sein. Das Gehirn ist daran gewöhnt, sowohl `form` als auch `from` zu sehen, und es kann leicht passieren, dass man auf den Methodennamen schaut und den Fehler einfach nicht sieht, selbst wenn man nicht an Legasthenie leidet. Wenn Sie jedoch `Foo::form(), did you mean from()?` im Ausnahmetext lesen, wird Ihnen der Tippfehler sofort auffallen.

SmartObject berücksichtigt in den Vorschlägen nicht nur alle Methoden und Eigenschaften der Klasse, sondern auch magische/virtuelle Mitglieder, die durch die Anmerkungen `@method` und `@property` definiert sind. Und das Beste ist, dass Tracy diese Fehler [automatisch |tracy:open-files-in-ide#toc-demos] beheben kann.


Eigenschaften, Getter und Setter .[#toc-properties-getters-and-setters]
=======================================================================

*(Für erfahrenere Programmierer)*

In modernen objektorientierten Sprachen (z. B. C#, Python, Ruby, JavaScript) bezieht sich der Begriff *Eigenschaft* auf [spezielle Mitglieder |https://en.wikipedia.org/wiki/Property_(programming)] einer Klasse, die wie Variablen aussehen, aber durch Methoden dargestellt werden. Beim Lesen oder Zuweisen von Werten zu diesen "Variablen" werden stattdessen Methoden aufgerufen (sogenannte Getter und Setter). Dies ist eine sehr nützliche Funktion, die es uns ermöglicht, den Zugriff auf diese Variablen zu kontrollieren. Auf diese Weise können wir Eingaben überprüfen oder die Berechnung von Werten dieser Variablen auf den Zeitpunkt verschieben, zu dem tatsächlich auf sie zugegriffen wird.

Jede Klasse, die `Nette\SmartObject` verwendet, erwirbt die Fähigkeit, Eigenschaften zu imitieren. Wie wird das gemacht?

- Fügen Sie der Klasse eine Bemerkung in der Form `@property <type> $xyz`
- Erstellen Sie einen Getter namens `getXyz()` oder `isXyz()`, einen Setter namens `setXyz()`
- Getter und Setter müssen *public* oder *protected* sein und beide sind optional, so dass es *read-only* oder *write-only* Eigenschaften geben kann.

Wir werden die Eigenschaften in der Klasse Circle verwenden, um sicherzustellen, dass die Variable `$radius` nur nicht-negative Zahlen enthält. Wir werden `public $ radius` durch die Eigenschaft ersetzen:

```php
/**
 * @property float $radius
 * @property-read bool $visible
 */
class Circle
{
	use Nette\SmartObject;

	private float $radius = 0.0; // nicht mehr öffentlich!

	// Getter für die Eigenschaft $radius
	protected function getRadius(): float
	{
		return $this->radius;
	}

	// Setter für die Eigenschaft $radius
	protected function setRadius(float $radius): void
	{
		// Bereinigung des Werts vor dem Speichern
		$this->radius = max(0.0, $radius);
	}

	// Getter für die Eigenschaft $visible
	protected function isVisible(): bool
	{
		return $this->radius > 0;
	}
}

$circle = new Circle;
$circle->radius = 10;  // calls setRadius(10)
echo $circle->radius;  // calls getRadius()
echo $circle->visible; // calls isVisible()
```

Eigenschaften sind hauptsächlich ein syntaktischer Zucker, um den Code zu verschönern und das Leben des Programmierers zu erleichtern. Sie müssen sie nicht verwenden, wenn Sie es nicht wollen.


Ereignisse .[#toc-events]
=========================

*(Für erfahrenere Programmierer)*

Jetzt werden wir Funktionen erstellen, die aufgerufen werden, wenn sich der Radius ändert. Nennen wir das Ereignis `change` und diese Funktionen Event-Handler:

```php
class Circle
{
	use Nette\SmartObject;

	public array $onChange = [];

	public function setRadius(float $radius): void
	{
		// es werden Rückrufe in $onChange mit den Parametern $this, $radius aufgerufen
		$this->onChange($this, $radius);
		// besser: Nette\Utils\Arrays::invoke($this->onChange, $this, $radius);

		$this->radius = max(0.0, $radius);
	}
}

$circle = new Circle;

// Hinzufügen eines Event-Handlers
$circle->onChange[] = function (Circle $circle, float $newValue): void {
	echo 'Es gab eine Änderung!';
};

$circle->setRadius(10);
```

Im Code der `setRadius` -Methode sehen Sie syntaktischen Zucker - statt einer Iteration auf dem `$onChange` -Array und dem Aufruf jedes Callbacks, müssen Sie nur ein einfaches `onChange(...)` schreiben und die Parameter angeben, die an jeden Callback übergeben werden. SmartObject erstellt also eine fiktive `onChange()` Methode, die nach dem `$onChange` Array benannt ist. Eine Konvention von `on` + Wort ist erforderlich.

Im Interesse der Klarheit des Codes empfehlen wir, diesen syntaktischen Zucker zu vermeiden und die Funktion [Nette\Utils\Arrays::invoke |arrays#invoke] zum Aufrufen von Callbacks zu verwenden.


Statische Klassen .[#toc-static-classes]
========================================

Sie können statische Klassen, d. h. Klassen, die nicht instanziiert werden sollen, mit dem Trait `Nette\StaticClass` kennzeichnen:

```php
class Strings
{
	use Nette\StaticClass;
}
```

Beim Versuch, sie zu instanziieren, wird eine `Error` Ausnahme mit der Information ausgelöst, dass die angegebene Klasse statisch ist.
