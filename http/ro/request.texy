Cerere HTTP
***********

.[perex]
Nette încapsulează cererea HTTP în obiecte cu o API inteligibilă și, în același timp, oferă un filtru de igienizare.

Cererea HTTP este reprezentată de obiectul [api:Nette\Http\Request]. Dacă lucrați cu Nette, acest obiect este creat automat de framework și îl puteți primi prin [injecție de dependențe |dependency-injection:passing-dependencies]. În presentere, este suficient să apelați metoda `$this->getHttpRequest()`. Dacă lucrați în afara Nette Framework, puteți crea obiectul folosind [RequestFactory|#RequestFactory].

Un mare avantaj al Nette este că, la crearea obiectului, curăță automat toți parametrii de intrare GET, POST, COOKIE și, de asemenea, URL-ul de caractere de control și secvențe UTF-8 invalide. Cu aceste date puteți lucra în siguranță în continuare. Datele curățate sunt apoi utilizate în presentere și formulare.

→ [Instalare și cerințe |@home#Instalace]


Nette\Http\Request
==================

Acest obiect este imuabil (nu poate fi modificat). Nu are setteri, are doar un așa-numit wither `withUrl()`, care nu modifică obiectul, ci returnează o nouă instanță cu valoarea modificată.


withUrl(Nette\Http\UrlScript $url): Nette\Http\Request .[method]
----------------------------------------------------------------
Returnează o clonă cu o altă adresă URL.


getUrl(): Nette\Http\UrlScript .[method]
----------------------------------------
Returnează URL-ul cererii ca obiect [UrlScript|urls#UrlScript].

```php
$url = $httpRequest->getUrl();
echo $url; // https://doc.nette.org/cs/?action=edit
echo $url->getHost(); // nette.org
```

Atenție: browserele nu trimit fragmentul către server, așa că `$url->getFragment()` va returna un șir gol.


getQuery(?string $key=null): string|array|null .[method]
--------------------------------------------------------
Returnează parametrii GET ai cererii.

```php
$all = $httpRequest->getQuery(); // returnează un array cu toți parametrii din URL
$id = $httpRequest->getQuery('id'); // returnează parametrul GET 'id' (sau null)
```


getPost(?string $key=null): string|array|null .[method]
-------------------------------------------------------
Returnează parametrii POST ai cererii.

```php
$all = $httpRequest->getPost(); // returnează un array cu toți parametrii din POST
$id = $httpRequest->getPost('id'); // returnează parametrul POST 'id' (sau null)
```


getFile(string|string[] $key): Nette\Http\FileUpload|array|null .[method]
-------------------------------------------------------------------------
Returnează [încărcarea|#fisiere-incarcate] ca obiect [api:Nette\Http\FileUpload]:

```php
$file = $httpRequest->getFile('avatar');
if ($file->hasFile()) { // a fost încărcat vreun fișier?
	$file->getUntrustedName(); // numele fișierului trimis de utilizator
	$file->getSanitizedName(); // nume fără caractere periculoase
}
```

Pentru a accesa structura imbricată, specificați un array de chei.

```php
//<input type="file" name="my-form[details][avatar]" multiple>
$file = $request->getFile(['my-form', 'details', 'avatar']);
```

Deoarece nu se poate avea încredere în datele din exterior și, prin urmare, nici în structura fișierelor, această metodă este mai sigură decât, de exemplu, `$request->getFiles()['my-form']['details']['avatar']`, care poate eșua.


getFiles(): array .[method]
---------------------------
Returnează arborele [tuturor încărcărilor|#fisiere-incarcate] într-o structură normalizată, ale cărei frunze sunt obiecte [api:Nette\Http\FileUpload]:

```php
$files = $httpRequest->getFiles();
```


getCookie(string $key): string|array|null .[method]
---------------------------------------------------
Returnează cookie-ul sau `null` dacă nu există.

```php
$sessId = $httpRequest->getCookie('sess_id');
```


getCookies(): array .[method]
-----------------------------
Returnează toate cookie-urile.

```php
$cookies = $httpRequest->getCookies();
```


getMethod(): string .[method]
-----------------------------
Returnează metoda HTTP cu care a fost făcută cererea.

```php
$httpRequest->getMethod(); // GET, POST, HEAD, PUT
```


isMethod(string $method): bool .[method]
----------------------------------------
Testează metoda HTTP cu care a fost făcută cererea. Parametrul este case-insensitive.

```php
if ($httpRequest->isMethod('GET')) // ...
```


getHeader(string $header): ?string .[method]
--------------------------------------------
Returnează antetul HTTP sau `null` dacă nu există. Parametrul este case-insensitive.

```php
$userAgent = $httpRequest->getHeader('User-Agent');
```


getHeaders(): array .[method]
-----------------------------
Returnează toate antetele HTTP ca un array asociativ.

```php
$headers = $httpRequest->getHeaders();
echo $headers['Content-Type'];
```


isSecured(): bool .[method]
---------------------------
Este conexiunea criptată (HTTPS)? Pentru o funcționare corectă, poate fi necesar să [configurați proxy-ul|configuration#HTTP proxy].


isSameSite(): bool .[method]
----------------------------
Cererea provine de pe același (sub)domeniu și este inițiată printr-un clic pe un link? Nette utilizează cookie-ul `_nss` (anterior `nette-samesite`) pentru detectare.


isAjax(): bool .[method]
------------------------
Este o cerere AJAX?


getRemoteAddress(): ?string .[method]
-------------------------------------
Returnează adresa IP a utilizatorului. Pentru o funcționare corectă, poate fi necesar să [configurați proxy-ul|configuration#HTTP proxy].


getRemoteHost(): ?string .[method deprecated]
---------------------------------------------
Returnează rezoluția DNS a adresei IP a utilizatorului. Pentru o funcționare corectă, poate fi necesar să [configurați proxy-ul|configuration#HTTP proxy].


getBasicCredentials(): ?string .[method]
----------------------------------------
Returnează datele de autentificare pentru [Basic HTTP authentication |https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication].

```php
[$user, $password] = $httpRequest->getBasicCredentials();
```


getRawBody(): ?string .[method]
-------------------------------
Returnează corpul cererii HTTP.

```php
$body = $httpRequest->getRawBody();
```


detectLanguage(array $langs): ?string .[method]
-----------------------------------------------
Detectează limba. Ca parametru `$lang`, transmitem un array cu limbile suportate de aplicație, iar aceasta va returna limba preferată de browserul vizitatorului. Nu este magie, ci doar utilizează antetul `Accept-Language`. Dacă nu există nicio potrivire, returnează `null`.

```php
// browserul trimite, de ex., Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = ['hu', 'pl', 'en']; // limbi suportate de aplicație
echo $httpRequest->detectLanguage($langs); // en
```


RequestFactory {#RequestFactory}
================================

Clasa [api:Nette\Http\RequestFactory] servește la crearea unei instanțe `Nette\Http\Request`, care reprezintă cererea HTTP curentă. (Dacă lucrați cu Nette, obiectul cererii HTTP este creat automat de framework.)

```php
$factory = new Nette\Http\RequestFactory;
$httpRequest = $factory->fromGlobals();
```

Metoda `fromGlobals()` creează obiectul cererii pe baza variabilelor globale PHP curente (`$_GET`, `$_POST`, `$_COOKIE`, `$_FILES` și `$_SERVER`). La crearea obiectului, curăță automat toți parametrii de intrare GET, POST, COOKIE și, de asemenea, URL-ul de caractere de control și secvențe UTF-8 invalide, ceea ce asigură siguranța în lucrul ulterior cu aceste date.

RequestFactory poate fi configurat înainte de a apela `fromGlobals()`:

- prin metoda `$factory->setBinary()` dezactivați curățarea automată a parametrilor de intrare de caractere de control și secvențe UTF-8 invalide.
- prin metoda `$factory->setProxy(...)` specificați adresa IP a [serverului proxy |configuration#HTTP proxy], ceea ce este necesar pentru detectarea corectă a adresei IP a utilizatorului.

RequestFactory permite definirea filtrelor care transformă automat părți ale URL-ului cererii. Aceste filtre elimină caracterele nedorite din URL, care pot fi introduse acolo, de exemplu, printr-o implementare incorectă a sistemelor de comentarii pe diverse site-uri web:

```php
// eliminarea spațiilor din cale
$requestFactory->urlFilters['path']['%20'] = '';

// eliminarea punctului, virgulei sau parantezei drepte de la sfârșitul URI-ului
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// curățarea căii de slash-uri duplicate (filtru implicit)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```

Prima cheie `'path'` sau `'url'` specifică la ce parte a URL-ului se aplică filtrul. A doua cheie este expresia regulată care trebuie căutată, iar valoarea este înlocuirea care se utilizează în locul textului găsit.


Fișiere încărcate {#fisiere-incarcate}
======================================

Metoda `Nette\Http\Request::getFiles()` returnează un array cu toate încărcările într-o structură normalizată, ale cărei frunze sunt obiecte [api:Nette\Http\FileUpload]. Acestea încapsulează datele trimise de elementul de formular `<input type=file>`.

Structura reflectă denumirea elementelor în HTML. În cel mai simplu caz, poate fi un singur element de formular numit, trimis ca:

```latte
<input type="file" name="avatar">
```

În acest caz, `$request->getFiles()` returnează un array:

```php
[
	'avatar' => /* Instanță FileUpload */
]
```

Obiectul `FileUpload` este creat chiar și în cazul în care utilizatorul nu a trimis niciun fișier sau trimiterea a eșuat. Dacă fișierul a fost trimis, returnează metoda `hasFile()`:

```php
$request->getFile('avatar')->hasFile();
```

În cazul numelui elementului care utilizează notația pentru array-uri:

```latte
<input type="file" name="my-form[details][avatar]">
```

arborele returnat arată astfel:

```php
[
	'my-form' => [
		'details' => [
			'avatar' => /* Instanță FileUpload */
		],
	],
]
```

Se poate crea și un array de fișiere:

```latte
<input type="file" name="my-form[details][avatars][]" multiple>
```

În acest caz, structura arată astfel:

```php
[
	'my-form' => [
		'details' => [
			'avatars' => [
				0 => /* Instanță FileUpload */,
				1 => /* Instanță FileUpload */,
				2 => /* Instanță FileUpload */,
			],
		],
	],
]
```

Accesarea indexului 1 al array-ului imbricat se face cel mai bine astfel:

```php
$file = $request->getFile(['my-form', 'details', 'avatars', 1]);
if ($file instanceof FileUpload) {
	// ...
}
```

Deoarece nu se poate avea încredere în datele din exterior și, prin urmare, nici în structura fișierelor, această metodă este mai sigură decât, de exemplu, `$request->getFiles()['my-form']['details']['avatars'][1]`, care poate eșua.


Prezentare generală a metodelor `FileUpload` .{toc: FileUpload}
---------------------------------------------------------------


hasFile(): bool .[method]
-------------------------
Returnează `true` dacă utilizatorul a încărcat un fișier.


isOk(): bool .[method]
----------------------
Returnează `true` dacă fișierul a fost încărcat cu succes.


getError(): int .[method]
-------------------------
Returnează codul de eroare la încărcarea fișierului. Este una dintre constantele [UPLOAD_ERR_XXX|http://php.net/manual/en/features.file-upload.errors.php]. Dacă încărcarea a avut succes, returnează `UPLOAD_ERR_OK`.


move(string $dest) .[method]
----------------------------
Mută fișierul încărcat într-o nouă locație. Dacă fișierul țintă există deja, acesta va fi suprascris.

```php
$file->move('/path/to/files/name.ext');
```


getContents(): ?string .[method]
--------------------------------
Returnează conținutul fișierului încărcat. Dacă încărcarea nu a avut succes, returnează `null`.


getContentType(): ?string .[method]
-----------------------------------
Detectează tipul de conținut MIME al fișierului încărcat pe baza semnăturii sale. Dacă încărcarea nu a avut succes sau detectarea a eșuat, returnează `null`.

.[caution]
Necesită extensia PHP `fileinfo`.


getUntrustedName(): string .[method]
------------------------------------
Returnează numele original al fișierului, așa cum a fost trimis de browser.

.[caution]
Nu aveți încredere în valoarea returnată de această metodă. Clientul ar fi putut trimite un nume de fișier dăunător cu intenția de a deteriora sau de a pirata aplicația dvs.


getSanitizedName(): string .[method]
------------------------------------
Returnează numele de fișier igienizat. Conține doar caractere ASCII `[a-zA-Z0-9.-]`. Dacă numele nu conține astfel de caractere, returnează `'unknown'`. Dacă fișierul este o imagine în format JPEG, PNG, GIF, WebP sau AVIF, returnează și extensia corectă.

.[caution]
Necesită extensia PHP `fileinfo`.


getSuggestedExtension(): ?string .[method]{data-version:3.2.4}
--------------------------------------------------------------
Returnează extensia de fișier potrivită (fără punct) corespunzătoare tipului MIME detectat.

.[caution]
Necesită extensia PHP `fileinfo`.


getUntrustedFullPath(): string .[method]
----------------------------------------
Returnează calea originală a fișierului, așa cum a fost trimisă de browser la încărcarea unui folder. Calea completă este disponibilă numai în PHP 8.1 și versiunile ulterioare. În versiunile anterioare, această metodă returnează numele original al fișierului.

.[caution]
Nu aveți încredere în valoarea returnată de această metodă. Clientul ar fi putut trimite un nume de fișier dăunător cu intenția de a deteriora sau de a pirata aplicația dvs.


getSize(): int .[method]
------------------------
Returnează dimensiunea fișierului încărcat. Dacă încărcarea nu a avut succes, returnează `0`.


getTemporaryFile(): string .[method]
------------------------------------
Returnează calea către locația temporară a fișierului încărcat. Dacă încărcarea nu a avut succes, returnează `''`.


isImage(): bool .[method]
-------------------------
Returnează `true` dacă fișierul încărcat este o imagine în format JPEG, PNG, GIF, WebP sau AVIF. Detectarea se bazează pe semnătura sa și nu verifică integritatea întregului fișier. Dacă imaginea este deteriorată poate fi determinat, de exemplu, încercând să o [încărcați|#toImage].

.[caution]
Necesită extensia PHP `fileinfo`.


getImageSize(): ?array .[method]
--------------------------------
Returnează o pereche `[lățime, înălțime]` cu dimensiunile imaginii încărcate. Dacă încărcarea nu a avut succes sau nu este o imagine validă, returnează `null`.


toImage(): Nette\Utils\Image .[method] {#toImage}
-------------------------------------------------
Încarcă imaginea ca obiect [Image|utils:images]. Dacă încărcarea nu a avut succes sau nu este o imagine validă, aruncă o excepție `Nette\Utils\ImageException`.
