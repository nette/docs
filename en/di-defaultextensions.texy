DI: Built-in Container Extensions
*********************************

Nette has a few built-in [Nette\DI\CompilerExtension |api:] to DI container.

ExtensionsExtension
===================

Using this extension we can add a more extensions defined in NEON configuration files.

/---neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
\---

That's the way how we add `Dibi\Bridges\Nette\DibiExtension22` extension named *dibi*, so settings will be in dibi section.

/---neon
dibi:
	host: localhost
\---

We can pass arguments into constructor for extension class.

/---neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
\---


InjectExtension
===============

This extension allows us to use option `inject: true`, it activates dependency injection over variables with [@inject |di-usage#toc-inject-annotations] annotatin
and [inject* | di-usage#toc-passing-by-an-inject-method] methods.

/---neon
services:
	blog.articles:
		class: App\Model\Articles
		inject: true
\---

/---php
namespace App\Model;

use Nette\Database\Connection;

class Articles
{

	/** @var Connection @inject */
	public $connection;

}
\---

By default is `inject` attribute set only for presenters.


DecoratorExtension
==================

Using this extensions we can add tags or manage calling methods in `setup`
section for all services of given class or implementing given interface.

/---neon
decorator:
	# key is class or interface name
	App\Repository\AbstractRepository:
		setup:
			- setConnection
		inject: yes

	App\Component\BaseControl:
		setup:
			- setTranslator(@mytranslator)
		tags: [view]
\---


PhpExtension
============

All PHP directives could be set by this extensions. Take a look to all possible PHP directives at [php.net |http://php.net/manual/en/ini.list.php].

/---neon
php:
	date.timezone: Europe/Prague
\---


ConstantExtension
=================

We can define PHP contants by this extension.

/---neon
constant:
	FOOBAR: 'baz'
\---

The `FOOBAR` contant will available in our application after startup.


{{composer: nette/di}}
