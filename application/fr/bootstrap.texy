Bootstrap
*********

<div class=perex>

Bootstrap est le code d'amor√ßage qui initialise l'environnement, cr√©e le conteneur d'injection de d√©pendances (DI) et lance l'application. Nous allons discuter :

- comment il est configur√© √† l'aide des fichiers NEON
- comment distinguer les modes production et d√©veloppement
- comment cr√©er le conteneur DI

</div>


Les applications, qu'elles soient web ou des scripts ex√©cut√©s depuis la ligne de commande, commencent leur ex√©cution par une forme d'initialisation de l'environnement. Autrefois, un fichier nomm√© par exemple `include.inc.php` s'en chargeait, inclus par le fichier initial.
Dans les applications Nette modernes, il a √©t√© remplac√© par la classe `Bootstrap`, que vous trouverez dans le fichier `app/Bootstrap.php` en tant que partie de l'application. Elle peut ressembler √† ceci, par exemple :

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// Le Configurator est responsable de la configuration de l'environnement et des services de l'application.
		$this->configurator = new Configurator;
		// D√©finit le r√©pertoire pour les fichiers temporaires g√©n√©r√©s par Nette (par exemple, les templates compil√©s)
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// Nette est intelligent et le mode d√©veloppement est activ√© automatiquement,
		// ou vous pouvez l'activer pour une adresse IP sp√©cifique en d√©commentant la ligne suivante :
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Active Tracy : l'ultime "couteau suisse" pour le d√©bogage.
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader : charge automatiquement toutes les classes dans le r√©pertoire s√©lectionn√©
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Charge les fichiers de configuration
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php
=========

Le fichier initial pour les applications web est `index.php`, situ√© dans le [r√©pertoire public |directory-structure#verejny-adresar-www] `www/`. Il demande √† la classe Bootstrap d'initialiser l'environnement et de cr√©er le conteneur DI. Ensuite, il obtient le service `Application` √† partir de celui-ci, qui lance l'application web :

```php
$bootstrap = new App\Bootstrap;
// Initialisation de l'environnement + cr√©ation du conteneur DI
$container = $bootstrap->bootWebApplication();
// Le conteneur DI cr√©e l'objet Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// Lancement de l'application Nette et traitement de la requ√™te entrante
$application->run();
```

Comme vous pouvez le voir, la classe [api:Nette\Bootstrap\Configurator] aide √† configurer l'environnement et √† cr√©er le conteneur d'injection de d√©pendances (DI), que nous allons maintenant pr√©senter plus en d√©tail.


Mode D√©veloppement vs Production
================================

Nette se comporte diff√©remment selon qu'il s'ex√©cute sur un serveur de d√©veloppement ou de production :

üõ†Ô∏è  Mode D√©veloppement (Development):
	- Affiche la barre de d√©bogage Tracy avec des informations utiles (requ√™tes SQL, temps d'ex√©cution, m√©moire utilis√©e)
	- En cas d'erreur, affiche une page d'erreur d√©taill√©e avec les appels de fonction et le contenu des variables
	- Rafra√Æchit automatiquement le cache lors de la modification des templates Latte, des fichiers de configuration, etc.


üöÄ  Mode Production (Production):
	- N'affiche aucune information de d√©bogage, toutes les erreurs sont √©crites dans le journal
	- En cas d'erreur, affiche l'ErrorPresenter ou une page g√©n√©rique "Server Error"
	- Le cache n'est jamais rafra√Æchi automatiquement !
	- Optimis√© pour la vitesse et la s√©curit√©


La s√©lection du mode se fait par autod√©tection, il n'est donc g√©n√©ralement pas n√©cessaire de configurer quoi que ce soit ou de basculer manuellement :

- mode d√©veloppement : sur localhost (adresse IP `127.0.0.1` ou `::1`) s'il n'y a pas de proxy pr√©sent (c'est-√†-dire son en-t√™te HTTP)
- mode production : partout ailleurs

Si nous voulons activer le mode d√©veloppement dans d'autres cas, par exemple pour les programmeurs acc√©dant depuis une adresse IP sp√©cifique, nous utilisons `setDebugMode()` :

```php
$this->configurator->setDebugMode('23.75.345.200'); // un tableau d'adresses IP peut √©galement √™tre fourni
```

Nous recommandons vivement de combiner l'adresse IP avec un cookie. Nous stockons un jeton secret, par exemple `secret1234`, dans le cookie `nette-debug`, et activons ainsi le mode d√©veloppement pour les programmeurs acc√©dant depuis une adresse IP sp√©cifique et ayant √©galement le jeton mentionn√© dans le cookie :

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Nous pouvons √©galement d√©sactiver compl√®tement le mode d√©veloppement, m√™me pour localhost :

```php
$this->configurator->setDebugMode(false);
```

Attention, la valeur `true` active le mode d√©veloppement de mani√®re forc√©e, ce qui ne doit jamais se produire sur un serveur de production.


Outil de D√©bogage Tracy
=======================

Pour faciliter le d√©bogage, nous activons √©galement l'excellent outil [Tracy |tracy:]. En mode d√©veloppement, il visualise les erreurs, et en mode production, il enregistre les erreurs dans le r√©pertoire sp√©cifi√© :

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Fichiers Temporaires
====================

Nette utilise un cache pour le conteneur DI, RobotLoader, les templates, etc. Il est donc n√©cessaire de d√©finir le chemin vers le r√©pertoire o√π le cache sera stock√© :

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

Sous Linux ou macOS, d√©finissez les [permissions d'√©criture |nette:troubleshooting#Nastaven√≠ pr√°v adres√°≈ô≈Ø] pour les r√©pertoires `log/` et `temp/`.


RobotLoader
===========

En r√®gle g√©n√©rale, nous voudrons charger automatiquement les classes √† l'aide de [RobotLoader |robot-loader:], nous devons donc le d√©marrer et le laisser charger les classes du r√©pertoire o√π se trouve `Bootstrap.php` (c'est-√†-dire `__DIR__`), ainsi que de tous ses sous-r√©pertoires :

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Une approche alternative consiste √† laisser les classes √™tre charg√©es uniquement via [Composer |best-practices:composer] tout en respectant PSR-4.


Fuseau Horaire
==============

Via le configurateur, vous pouvez d√©finir le fuseau horaire par d√©faut.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Configuration du Conteneur DI
=============================

Une partie du processus de d√©marrage est la cr√©ation du conteneur DI, ou factory d'objets, qui est le c≈ìur de toute l'application. Il s'agit en fait d'une classe PHP g√©n√©r√©e par Nette et stock√©e dans le r√©pertoire cache. La factory produit les objets cl√©s de l'application, et √† l'aide des fichiers de configuration, nous lui indiquons comment les cr√©er et les configurer, influen√ßant ainsi le comportement de toute l'application.

Les fichiers de configuration sont g√©n√©ralement √©crits au format [NEON |neon:format]. Dans un chapitre s√©par√©, vous apprendrez [tout ce qui peut √™tre configur√© |nette:configuring].

.[tip]
En mode d√©veloppement, le conteneur est automatiquement mis √† jour √† chaque modification du code ou des fichiers de configuration. En mode production, il n'est g√©n√©r√© qu'une seule fois et les modifications ne sont pas v√©rifi√©es pour maximiser les performances.

Nous chargeons les fichiers de configuration √† l'aide de `addConfig()` :

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

Si nous voulons ajouter plusieurs fichiers de configuration, nous pouvons appeler la fonction `addConfig()` plusieurs fois.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

Le nom `cli.php` n'est pas une faute de frappe ; la configuration peut √©galement √™tre √©crite dans un fichier PHP qui la retourne sous forme de tableau.

Nous pouvons √©galement ajouter d'autres fichiers de configuration dans la [section `includes` |dependency-injection:configuration#Vkl√°d√°n√≠ soubor≈Ø].

Si des √©l√©ments avec les m√™mes cl√©s apparaissent dans les fichiers de configuration, ils seront √©cras√©s ou, dans le cas des [tableaux, fusionn√©s |dependency-injection:configuration#Sluƒçov√°n√≠]. Le fichier inclus ult√©rieurement a une priorit√© plus √©lev√©e que le pr√©c√©dent. Le fichier dans lequel la section `includes` est list√©e a une priorit√© plus √©lev√©e que les fichiers qui y sont inclus.


Param√®tres Statiques
--------------------

Les param√®tres utilis√©s dans les fichiers de configuration peuvent √™tre d√©finis [dans la section `parameters` |dependency-injection:configuration#parametry] et √©galement transmis (ou √©cras√©s) via la m√©thode `addStaticParameters()` (qui a un alias `addParameters()`). Il est important de noter que diff√©rentes valeurs de param√®tres entra√Æneront la g√©n√©ration de conteneurs DI suppl√©mentaires, c'est-√†-dire de classes suppl√©mentaires.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

Le param√®tre `projectId` peut √™tre r√©f√©renc√© dans la configuration en utilisant la notation habituelle `%projectId%`.


Param√®tres Dynamiques
---------------------

Nous pouvons √©galement ajouter des param√®tres dynamiques au conteneur, dont les diff√©rentes valeurs, contrairement aux param√®tres statiques, ne provoquent pas la g√©n√©ration de nouveaux conteneurs DI.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

Nous pouvons ainsi facilement ajouter, par exemple, des variables d'environnement, qui peuvent ensuite √™tre r√©f√©renc√©es dans la configuration en utilisant la notation `%env.variable%`.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Param√®tres par D√©faut
---------------------

Dans les fichiers de configuration, vous pouvez utiliser ces param√®tres statiques :

- `%appDir%` est le chemin absolu vers le r√©pertoire contenant le fichier `Bootstrap.php`
- `%wwwDir%` est le chemin absolu vers le r√©pertoire contenant le fichier d'entr√©e `index.php`
- `%tempDir%` est le chemin absolu vers le r√©pertoire des fichiers temporaires
- `%vendorDir%` est le chemin absolu vers le r√©pertoire o√π Composer installe les biblioth√®ques
- `%rootDir%` est le chemin absolu vers le r√©pertoire racine du projet
- `%debugMode%` indique si l'application est en mode d√©bogage
- `%consoleMode%` indique si la requ√™te provient de la ligne de commande


Services Import√©s
-----------------

Maintenant, allons plus en profondeur. Bien que le but du conteneur DI soit de cr√©er des objets, il peut exceptionnellement √™tre n√©cessaire d'ins√©rer un objet existant dans le conteneur. Nous le faisons en d√©finissant le service avec l'indicateur `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Et dans le bootstrap, nous ins√©rons l'objet dans le conteneur :

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Environnements Diff√©rents
=========================

N'h√©sitez pas √† modifier la classe Bootstrap selon vos besoins. Vous pouvez ajouter des param√®tres √† la m√©thode `bootWebApplication()` pour distinguer les projets web. Ou nous pouvons ajouter d'autres m√©thodes, par exemple `bootTestEnvironment()`, qui initialise l'environnement pour les tests unitaires, `bootConsoleApplication()` pour les scripts appel√©s depuis la ligne de commande, etc.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // initialisation de Nette Tester
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
