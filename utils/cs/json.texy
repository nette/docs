Práce s JSON
************

.[perex]
[api:Nette\Utils\Json] je statická třída s funkcemi pro kódování a dekódování formátu JSON. Ošetřuje zranitelnosti různých verzí PHP a vyhazuje výjimky při chybách.

Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Json;
```


Použití
=======


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Převádí `$value` do formátu JSON.

Při nastavení `$pretty` naformátuje JSON pro snažší čtení a přehlednost:

```php
Json::encode($value); // vrací JSON
Json::encode($value, pretty: true); // vrací přehlednější JSON
```

Při `$asciiSafe` vygeneruje výstup v ASCII, tj. unicode znaky nahradí za sekvence `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Parametr `$htmlSafe` zajistí, že výstup nebude obsahovat znaky mající v HTML speciální význam:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

S `$forceObjects` se budou i pole s numerickými klíči kódovat jako JavaScriptové objekty:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Při chybě vyhazuje výjimku `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Ošetření výjimky
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parsuje JSON do PHP.

Nastavení `$forceArray` vynutí vrácení polí místo objektů:

```php
Json::decode('{"variable": true}'); // vrací objekt typu stdClass
Json::decode('{"variable": true}', forceArray: true); // vrací pole
```

Při chybě vyhazuje výjimku `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Ošetření výjimky
}
```


Jak odeslat JSON z presenteru?
==============================

Lze k tomu použít metodu `$this->sendJson($data)`, kterou můžeme zavolat třeba v metodě `action*()`, viz [Odeslání odpovědi|application:presenters#Odeslání odpovědi].
