Database & ORM
**************

/--div .[perex]
Nette Framework provides you with a layer for a simpler work with databases. What does it do?

- composes SQL queries with ease
- easily fetches data
- uses efficient queries and does not transmit unnecessary data
\--


Basic element is a wrapper over [php:PDO] called [api:Nette\Database\Connection]:


/--php
use Nette\Database\Connection;

$database = new Connection($dsn, $user, $password);
\--

A panel in Debugger bar will automatically appear after connection. It informs you about all the performed SQL queries, time of their execution, the number of rows returned and the panel even shows an EXPLAIN form of the queries and places in the code where each query was performed.

Nette\Database (in contrary to PDO) allows `Connection` to list parameters in commands `exec` and `query`:

/--php
$database->exec('INSERT INTO users', array( // an array can be a parameter
	'name' => 'Jim',
	'created' => new DateTime, // or a DateTime object
	'avatar' => fopen('image.gif', 'r'), // or a file
), ...); // it is even possible to use multiple inserts

$database->exec('UPDATE users SET ? WHERE id=?', $data, $id);

$database->query('SELECT * FROM categories WHERE id=?', 123)->dump();
\--


Working with tables
===================

For complex selection you can use a tool which builds upon an excellent library [NotORM |www.notorm.com] and which offers you a more readable API. Depicted database can be traversed like this:

[* db-schema-1-.png .[noborder] *] *** An example of SQL database

/--php
foreach ($database->table('book')->order('title')->limit(5) as $book)
{
	echo $book->title, ' (', $book->author->name, ')';
	// equivalent to $book['title'], ' (', $book['author']['name'], ')';

	foreach ($book->related('book_tag') as $book_tag) {
		echo $book_tag->tag->name . ', ';
	}
}
\--

In a template you can use Latte syntax:

/--html
{foreach $database->table('book')->order('title')->limit(5) as $book}
	<h2>{$book->title} ({$book->author->name})</h2>

	{foreach $book->related('book_tag') as $book_tag}
		{$book_tag->tag->name}{sep}, {/sep}
	{/foreach}
{/foreach}
\--

Efficiency
----------

You will be pleased how efficiently the database layer works. No columns are transmitted unnecessarily. The example above performs following queries:

/--
SELECT * FROM `book` ORDER BY title LIMIT 5

SELECT * FROM `author` WHERE (`author`.`id` IN (11, 12))

SELECT * FROM `book_tag` WHERE (`book_tag`.`book_id` IN (1, 4, 2, 3))

SELECT * FROM `tag` WHERE (`tag`.`id` IN (21, 22, 23))
\--

If you use cache ([see API | http://api.nette.org/2.0/Nette.Database.Connection.html#_setCacheStorage]) Nette\Database queries only columns which are actually used:

/--
SELECT `id`, `title`, `author_id` FROM `book` ORDER BY title LIMIT 5

SELECT `id`, `name` FROM `author` WHERE (`author`.`id` IN (11, 12))

SELECT `book_id`, `tag_id` FROM `book_tag` WHERE (`book_tag`.`book_id` IN (1, 4, 2, 3))

SELECT `id`, `name` FROM `tag` WHERE (`tag`.`id` IN (21, 22, 23))
\--


Table Selection API
-------------------

.[wide]
| `$table = $conn->table($tableName)` | Get representation of table $tableName
| `$table->find($value)` | Search by primary key
| `$table->where($where[, $parameters[, ...]])` |	Set WHERE (explained later)
| `$table->order($columns)` | Set ORDER BY, can be expression `('column DESC, id DESC')`
| `$table->select($columns)` | Set retrieved columns, can be expression `('col, MD5(col) AS hash')`
| `$table->limit($limit[, $offset])` | Set LIMIT and OFFSET
| `$table->group($columns[, $having])` | Set GROUP BY and HAVING

You can use fluent interface, for example `$table->where(...)->order(...)->limit(...)`. More `where` conditions can be connected with the `AND` operator.

.[wide]
| `$table->where("field", $value)` | Means field = $value
| `$table->where("field", NULL)` | Means field IS NULL
| `$table->where("field > ?", $val)` | Means field > $val
| `$table->where("field", array(1, 2))` | Means field IN (1, 2)
| `$table->where("field", $conn->table($tableName))` | Means field IN (SELECT $primary FROM $tableName)
| `$table->where("field", $conn->table($tableName)->select('col'))` | Means field IN (SELECT col FROM $tableName)
| `$table->where(array("field" => "x", "field2" => "y"))` | Same as `$table->where("field", "x")->where("field2", "y")`

If you use the dot notation `("$table.$column")`, a relation with linked table will be automatically created.

Aggregate queries can also be created:

.[wide]
| `$table->count("*")` | Get number of rows
| `$table->count("DISTINCT $column")` | Get number of distinct values
| `$table->min($column)` | Get minimum value
| `$table->max($column)` | Get maximum value
| `$table->aggregation("GROUP_CONCAT($column)")` | Run any aggregation function

Fetching data:

.[wide]
| `foreach ($table as $id => $row)` | Iterate all rows in result
| `$row = $table->get($id)` | Get single row with ID $id from table
| `$row = $table[$id]` | Get row with ID $id from the result
| `$row = $table->fetch()` | Get next row from the result
| `$array = $table->fetchPairs($key, $value)` | Fetch all values to associative array
| `$array = $table->fetchPairs($key)` | Fetch all rows to associative array
| `count($table)` | Get number of rows in result set

Working with single row:

.[wide]
| `$data = $row[$column]` nebo `$row->$column` | Returns the value of attribute $column or one row from parent table. E.g. `$book['title'] == $book->title` or `$book['author'] == $book->author == $book->ref('author')`
| `$parent = $child->ref($tableName)` | Returns one row from foreign table (parent). E.g. `$book->ref('author')->name`
| `$tableChildren = $parent->related($tableName)` | Returns children table filtered using the value of parent's primary key. Attribute in children table with name derived from parent table is used. E.g. `$author->related('book')->count()`
| `$tableChildren = $parent->related($tableName, $column)` | Uses concrete attribute in children table to filter. E.g. `$author->related('book', 'maintainer_id')->count()`
| `(string) $row` | Returns primary key value


ActiveRow
---------

Every row returned by [Selection | api:Nette\Database\Table\Selection] is represented by [ActiveRow | api:Nette\Database\Table\ActiveRow] instance. This class provides standard interface for accessing fetched columns. You can read data as properties or by array access. Array access provides also possibility to get column by its index.

/--code php
echo $book->id;
echo $book['title'];
echo $book[0];         // the first fetched column
\--

If column does not exist, [MemberAccessException | api:Nette\MemberAccessException] is thrown. You can check if column is set by standard isset construct.
/--code php
isset($book->id);
isset($book['title']);
\--
Be careful, `isset` will return FALSE even if the column was fetched, but the value is NULL.


Relations
---------

The main Nette\Database\Table principle is to fetch data from different tables separately. This behavior is maintained by Nette\Database itself, row's related data will be fetched for all other rows at once. We have two simple types of relation: "has one" and "has many".

.[note]
We will use DiscoveredReflection, which fetches relationships right from your database.

Has one relation
---------------
Has one relation is a common use-case. Book *has one* author. Book *has one* translator. Getting related row is mainly done by [ref() | api:Nette\Database\Table\ActiveRow::ref()] method. Ref() method accepts two arguments: target table name and source joining column. See example:

/--code php
$book = $selectionFactory->table('book')->get(1);
$book->ref('author', 'author_id');
\--

In example above we fetch related author entry from `author` table, the author primary key is searched by `book.author_id` column. Ref() method returns ActiveRow instance or NULL if there is no appropriate entry. Returned row is an instance of ActiveRow so we can work with it the same way as with the book entry.

/--code php
$author = $book->ref('author', 'author_id');
$author->name;
$author->born;

// or directly
$book->ref('author', 'author_id')->name;
$book->ref('author', 'author_id')->born;
\--

Book also has one translator, so getting translator name is quite easy.
/--code php
$book->ref('author', 'translator_id')->name
\--

All of this is fine, but it's somewhat cumbersome, don't you think? Database already contains the foreign keys definitions so why not use them automatically? Let's do that!

If we call property, which does not exist, ActiveRow tries to resolve the calling property name as "has one" relation. Getting this property is the same as calling ref() method with just one argument. We will call the only argument the **key**. Key will be resolved to particular foreign key relation. The passed key is matched against row columns, and if it matches, foreign key defined on the matched column is used for getting data from related target table. See example:

/--code php
$book->author->name;
// same as
$book->ref('author')->name;
\--

The ActiveRow instance has no author column. All book columns are searched for a match with *key*. Matching in this case means the column name has to contain the key. So in the example above, the `author_id` column contains string "author" and is therefore matched by "author" key. If you want to get the book translator, just can use e.g. "translator" as a key,  because "translator" key will match the `translator_id` column. You can find more about the key matching logic in [Joining expressions | database-joining-expressions] chapter.

/--code php
echo $book->title . ": ";
echo $book->author->name;
if ($book->translator) {
	echo " (translated by " . $book->translator->name . ")";
}
\--

If you want to fetch multiple books, you should use the same approach. Nette\Database will fetch authors and translators for all the fetched books at once.

/--code php
$books = $selectionFactory->table('book');
foreach ($books as $book) {
	echo $book->title . ": ";
	echo $book->author->name;
	if ($book->translator) {
		echo " (translated by " . $book->translator->name . ")";
	}
}
\--

The code will run only these 3 queries:
/--code sql
SELECT * FROM `book`;
SELECT * FROM `author` WHERE (`id` IN (1, 2, 3)); -- ids of fetched books from author_id column
SELECT * FROM `author` WHERE (`id` IN (2, 3));    -- ids of fetched books from translator_id column
\--


Has many relation
-----------------

"Has many" relation is just reversed "has one" relation. Author *has* written *many* books. Author *has* translated *many* books. As you can see, this type of relation is a little bit more difficult, because the relation is "named" ("written", "translated"). ActiveRow instance has [related() | api:Nette\Database\Table\ActiveRow::related()] method, which will return array of related entries. Entries are also ActiveRow instances. See example bellow:

/--code php
$author = $selectionFactory->table('author')->get(11);
echo $author->name . " has written:";

foreach ($author->related('book.author_id') as $book) {
	echo $book->title;
}

echo "and translated:";
foreach ($author->related('book.translator_id') as $book) {
	echo $book->title;
}
\--

[Related() | api:Nette\Database\Table\ActiveRow::related()] method accepts full join description passed as two arguments or as one argument joined by dot. The first argument is the target table, the second is the target column.
/--code php
$author->related('book.translator_id');
// same as
$author->related('book', 'translator_id');
\--

You can use Nette\Database heuristics based on foreign keys and provide only **key** argument. Key will be matched against all foreign keys pointing into the current table (`author` table). If there is a match, Nette\Database will use this foreign key, otherwise it will throw appropriate exception: [MissingReferenceException | api:Nette\Database\Reflection\MissingReferenceException] or [AmbiguousReferenceKeyException | api:Nette\Database\Reflection\AmbiguousReferenceKeyException]. You can find more about the key matching logic in [Joining expressions | database-joining-expressions] chapter.

Of course you can call related methods for all fetched authors, Nette\Database will again fetch the appropriate books at once.

/--code php
$authors = $selectionFactory->table('author');
foreach ($authors as $author) {
	echo $author->name . " has written:";
	foreach ($author->related('book') as $book) {
		$book->title;
	}
}
\--

Example above will run only two queries:

/--code sql
SELECT * FROM `author`;
SELECT * FROM `book` WHERE (`author_id` IN (1, 2, 3)); -- ids of fetched authors
\--

{{toc: title}}

{{themeicon: icon-database.png}}

{{tags: nette\database}}
