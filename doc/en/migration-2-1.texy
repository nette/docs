Migrating to version 2.1
************************

.[perex]
There are [#new features] and same [incompatibilities|#Backward Incompatible Changes] that should be considered, and code should be tested before switching Nette Framework versions.


New Features
============

Application & Presenter
-----------
- Presenter: new method `sendJson()`
- PresenterFactory: configurable mapping Presenter name -> Class name
- Route: new pseudo-variables `%basePath%`, `%tld%` and `%domain%`

Caching
--------
- added SQLite storage (`Nette/Caching/Storages/SQLiteStorage`)

Database (NDB)
--------------
- complete refactoring, a ton of bug fixes
- Connection:
	- lazy connection
	- all queries are logged (error queries, transactions, â€¦)
	- added onConnect event
	- DSN in connection panel
- much better (dibi-like) SQL preprocessor
- Selection, ActiveRow: insert() & update() methods return row instances with refetched data
- Selection: added placeholder support select(), group(), having(), order() methods
- SqlLiteral: added placeholder support
- Selection:
	- added: WHERE conditions consider NOT for IN operator
	- insert() method returns IRow
- drivers:
	- new driver for Sqlsrv
	- Sqlite supports multi-inserts
	- fixes for PostgreSQL

Debugger
--------
- Dumper: colored and clickable dumps in HTML or terminal
- Debugger: full stack trace on fatal errors (requires Xdebug)
- Debugger: method `barDump()` accepts options
- BlueScreen: new property `$collapsePaths` which allows you to configure which paths are collapses in stack trace
- Bar: you can see bar after redirect
- Bar: new method `getPanel()`
- Dumper: possibility to include JS & CSS separately

Dependency Injection (DI)
-------------------------
- annotation @inject
- auto-generated factories and accessors via interface
- adding compiler extensions via config file
- auto-detection of sections in config file
- configurable presenters via config file
- Container: new methods `findByType()` and `callInjects()`

Forms
-----
- new macro `n:name` for `<form> <input> <select> <textarea>`
- partially rendered radiolists using `{input name:$key}` and `{label name:$key}`
- setOmitted: excludes value from $form->getValues() result
- removed dependency on Environment
- improved toggles
- improved netteForms.js
- validation scopes
- data-nette-rules attribute is JSON
- `getOwnErrors()` returns only errors attached to form
- Radiolist::getLabel(..., $key) returns label for single item

Http
----
- added new SessionPanel
- Helpers: new method `ipMatch()`
- RequestFactory: new method `setProxy()`
- Url: new methods `getQueryParameter()` and `setQueryParameter()`

Latte
-----
- new modifier `|noescape` which is preferred over exclamation mark
- new macro `n:ifcontent`
- `{include block}` can be written without hash
- template allows helpers overriding
- native support for empty macros `{macro /}`
- a lot of small improvements
- PhpWriter supports indexed arguments like %1.raw

Utils
-----
- Arrays: new method `isList()`
- Arrays: method `flatten()` supports key preserving
- Strings: new methods `findPrefix()` and `normalizeNewLines()`
- Json: supports pretty output
- Neon: is superset of JSON
- Validators: new method `isType()`
- new utility class `FileSystem`
- new utility class `Callback`

Mailing
-------
- SmtpMailer: persistent connection
- SmtpMailer: some methods protected and can be overloaded

Others
------
- ObjectMixin: new methods `getMagicMethods`, `getExtensionMethod`, `setExtensionMethod` and `checkType`
- ObjectMixin: magic methods setProperty(), getProperty(), isProperty() and addProperty() by @method
- both `RobotLoader` and `NetteLoader` can be registered before existing autoloaders instead of after
- SafeStream: supports `ftruncate` (requires PHP 5.4+)



Backward Incompatible Changes
=============================

Database (NDB)
--------------

- `Nette\Database\Connection` is not a descendant of `PDO`:http://www.php.net/manual/en/class.pdo.php
- rename methods `exec()` -> `query()`, `fetchColumn()` -> `fetchField()` and `lastInsertId()` -> `getInsertId()`
- `Nette\Database\Statement` rename to `Nette\Database\ResultSet`, which is not a descendant of `PDOStatement`:http://www.php.net/manual/en/class.pdostatement.php
- rename methods `rowCount()` -> `getRowCount()` and `columnCount()` -> `getColumnCount()`
- MySQL: removed timezone setting. Use onConnect[] event instead. ("commit":https://github.com/nette/nette/commit/61c9d9f1c254334e82b9388cdc95d3256e6fd71e)

Are you using Nette Database Table (NDBT), a great part of the NDB to which is accessed via `$database->table(...)`?

- method `table()` was moved from `Connection` to new class `Nette\Database\Context`. It "contains":http://api.nette.org/2.1.0/Nette.Database.Context.html all of the important methods for working with databases, so feel free to change the `Connection` for `Context` and you're done.
- properties of `ActiveRow` are now read-only, for updating use `$row->update(array('field' => 'value'))`. The old behavior had so many difficulties, sorry.
- backjoin syntax was changed from `book_tag:tag.name` to `:book_tag.tag.name` (see semicolons)
- instead of second argument `$having` in method `group()` use method `having()`
- Selection: removed support for INNER join in where statement ("commit":https://github.com/nette/nette/commit/68314840e2429351d1e37e00c6070a21bdc36744)


Dependency Injection (DI)
-------------------------

- class `Nette\Config\Configurator` -> `Nette\Configurator`
- in configuration file was merged definition of `factories` a `services` in common `services`. Append key `autowired: no` to the factories.
- introduced "bullet" syntax for anonymous services:

/--code neon
services:
	Namespace\Class: self  # old way

	- Namespace\Class  # new way
\--

Work directly with the DI container is usually not a good idea, but if you do so:
- factory method call as `$container->createService('name')` instead of `$container->createServiceName()`
- all default factories are deprecated: `createLatte()`, `createCache()`, `createMail()` a `createBasicForm()`
- access to services via `$container->getService()` or `getByType()` instead of `$container->serviceName`
- Container: removed property `$classes`, removed parameter `$meta` in method `addService()`
- ServiceDefinition: removed property `$internal` and method `setInternal()`
- ContainerBuilder: method `generateClass()` is deprecated, use `generateClasses()[0]` instead
- ContainerBuilder operates on expanded parameters, removed `Helpers: escape()`
- Configurator: deprecated parameter `productionMode`, use `debugMode` instead
- Configurator: methods `setProductionMode`, `isProductionMode` and `detectProductionMode` are deprecated, use `*Debug*` variants instead
- Container: removed deprecated property `$params`, use `$parameters` instead

If you write your own extensions, you should know that these namespaces was renamed: `Nette\Config` -> `Nette\DI` and `Nette\Utils\PhpGenerator` -> `Nette\PhpGenerator`.

Compared to the dev-version the annotation `@inject` a methods `inject()` are processed automatically only for presenters. They can be enabled using key `inject: yes` in the definition.

If you are using old `Environment`, it will require to set constant `TEMP_DIR`.


Application & Presenter
-----------------------
- Presenter prevents substitution of array to persistent parameters. If you need `array` set it as default value
- deprecated methods `getService()` (use `getContext()->getService()`), `getHttpContext()` and `getApplication()`
- magical `getParameter(NULL)` -> `getParameters()`
- instead of weird `invalidateControl()`, `redrawControl()` can be used
- Application: methods `storeRequest()` and `restoreRequest()` are deprecated, call them on `UI\Presenter` instead
- Application\Routers\Route: foo-parameters are not optional when pattern is missing


Latte
-----
- default mode is HTML (instead of XHTML), what can be set "in configuration":http://doc.nette.org/cs/2.1/configuring#toc-sablony
- automatically "quotes .(yeah, that God word!)" attributes in `<a title={$title}>`. It should be without any complications, but for sure
- attribute `n:input` is changed to `n:name` and can be used also in label, select, form and textarea, not only in `<input>`
- deprecated macro `{attr}` (use `n:attr`) and `{assign}` changed to `{var}`
- use `{$var|noescape}` instead of old "exclamation mark" notation `{!$var}`, it's more clearer
- in dev version was used `{#block}`, it was unclear, so you won't find it in 2.1
- native support for empty macros, use for example `{label foo /}` instead of `{label foo}`

There's new feature in Latte which automatically detects if `<a href={$url}>` doesn't contain something like `javascript:hackThisWeb()`. Only http, https, ftp and mailto protocols are allowed (plus relative paths of course). Attributes like src, action, formaction and `<object data=...>` are checked too. If you want to print URL without control, use `|nosafeurl` modifier.

And there's small change related to manual checkbox rendering. See bellow.


Forms
-----
Checkboxes and RadioLists are rendered as `<label><input>...</label>` instead of `<label>...</label><input>`. And because of it, `getLabel()` and `{label}` returns nothing and `getControl()` and `{input}` return HTML in new way. If you need old behavior, please switch to "partial rendering" using colon: `{label elementName:}` or `{input elementName:}`. Easy as a pie.

Macro `{control form}` prints error messages together with element, only unassigned message are printed above the form. You should do the same also if the manual rendering is used, "for example":https://github.com/nette/sandbox/blob/f1819483da6467af1706fbc6b5679aa2f79aa8d0/app/templates/components/form.latte.

- `setValue()` control value and throws exception if something is wrong
- validation rules like `Form::INTEGER`, `NUMERIC` and `FLOAT` converts value to integer and float
- TextArea: removed default values of attributes `cols` a `rows` (they were required by old HTML4)
- elements marked through `setDisabled()` won't be in `$form->getValues()` (browser doesn't send them)
- deprecated `SelectBox::setPrompt(TRUE)`, use string instead of TRUE
- renamed `MultiSelectBox::getSelectedItem()` -> `getSelectedItems()`
- JSON is used in `data-nette-rules` HTML attributes, so `netteForms.js` has to be updated to latest version
- Form: removed deprecated event `$onInvalidSubmit`, use `$onError` instead
- RadioList: calling `getValue(TRUE)` is deprecated, use `getRawValue()` instead

Debugger
---------
- `Nette\Diagnostics\Debugger::$blueScreen` -> `Debugger::getBlueScreen()`
- and similar `$bar` -> `getBar()`, `$logger` -> `getLogger()` a `$fireLogger` -> `getFireLogger()`
- deprecated `Nette\Diagnostics\Debugger::tryError()`, `catchError()` and also `toStringException()`, simply use `trigger_error()` instead
- deprecated internal `Nette\Diagnostics\Helpers::clickableDump()` a `htmlDump()`, which were replaced by `Dumper`


Mail
----
- Deprecated method `Nette\Mail\Message::send()`, use mailer, see "documentation":http://doc.nette.org/cs/2.1/mailing.
- Mail\Message: methods `setHtmlBody()` and `setBody()` render template immediately
- MimePart: removed method `generateMessage()`, use `getEncodedMessage()` instead


other changes
-------------
- Nette Framework dropped support of PHP 5.2, `migration-53.php` should help you with update to namespaces
- minimized version is generated in "PHAR format":http://www.php.net/manual/en/book.phar.php, also in distribution there's `nette.phar` instead of `nette.min.php`. Result is the same.
- `Nette\Utils\Finder::find($mask)` filters also directories (not only files)
- `Nette\Security\User` accepts authenticator. Be aware of cyclic dependencies
- usage of `mb_internal_encoding()` instead of `iconv_set_encoding()` in loader
- deprecated constants `NETTE, NETTE_DIR a NETTE_VERSION_ID`
- and class `Nette\Loaders\AutoLoader`
- and variable `Nette\Framework::$iAmUsingBadHost`
- is highly recommended to not use `callback()` and class `Nette\Callback`, because global functions can cause some "problems":https://github.com/nette/nette/issues/1187
- namespace was renamed from `Nette\Utils\PhpGenerator` -> `Nette\PhpGenerator`
- Nette will warn you â€žPossible problem: you are sending a cookie while already having some data in output buffer,â€œ if you want to send HTTP header or cookie and have some data in output buffer. Buffer can overflow.
- InstanceFilter: removed entirely
- RecursiveFilter: removed method `accept()` and parameter `$childrenCallback` in constructor
- RequestFactory: removed method `setEncoding()`, only UTF-8 and binary (via `setBinary()`) is now supported
- ObjectMixin: removed method `callProperty()`
- ObjectMixin: removes support for non-registered extension methods (`*_prototype_*` functions)
