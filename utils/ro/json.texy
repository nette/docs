Lucrul cu JSON
**************

.[perex]
[api:Nette\Utils\Json] este o clasă statică cu funcții pentru codificarea și decodarea formatului JSON. Gestionează vulnerabilitățile diferitelor versiuni PHP și aruncă excepții la erori.


Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun crearea unui alias:

```php
use Nette\Utils\Json;
```


Utilizare
=========


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Convertește `$value` în format JSON.

Când `$pretty` este setat, formatează JSON-ul pentru o citire și claritate mai ușoară:

```php
Json::encode($value); // returnează JSON
Json::encode($value, pretty: true); // returnează JSON mai lizibil
```

Cu `$asciiSafe`, generează ieșire în ASCII, adică înlocuiește caracterele unicode cu secvențe `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Parametrul `$htmlSafe` asigură că ieșirea nu va conține caractere cu semnificație specială în HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Cu `$forceObjects`, chiar și array-urile cu chei numerice vor fi codificate ca obiecte JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

La eroare, aruncă excepția `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Tratarea excepției
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parsează JSON în PHP.

Setarea `$forceArray` forțează returnarea de array-uri în loc de obiecte:

```php
Json::decode('{"variable": true}'); // returnează obiect de tip stdClass
Json::decode('{"variable": true}', forceArrays: true); // returnează array
```

La eroare, aruncă excepția `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Tratarea excepției
}
```


Cum se trimite JSON dintr-un presenter?
=======================================

Puteți utiliza metoda `$this->sendJson($data)` pentru aceasta, pe care o puteți apela, de exemplu, în metoda `action*()`, vezi [Trimiterea unui răspuns |application:presenters#Odeslání odpovědi].
