Začínáme
********

.[perex]
Seznamte se v rychlosti s Nette Frameworkem při tvorbě jednoduchého úkolovníku. Ukážeme si, jak vytvořit bezpečnou aplikaci včetně přihlašování s využitím databáze, šablon, formulářů, routování i AJAXu.

Co všechno bude náš úkolovník umět?

- sdružovat úkoly do samostatných seznamů
- přidávat nové úkoly i nové seznamy
- označit úkol jako dokončený (pomocí AJAXu)
- přihlásit uživatele a odeslat zapomenuté heslo


Stažení
=======

Nejprve si prosím ověřte, že máte spuštěný webový server s PHP ve verzi 5.3.0 nebo jakoukoliv vyšší.

Stáhneme si Nette Framework a tzv. sandbox, což je předpřipravená kostra aplikace. Pokud používáte nástroj "Composer":http://doc.nette.org/cs/composer, stačí spustit v kořenovém adresáři webového serveru tento příkaz a sandbox i s frameworkem se vám stahnou do adresáře `sandbox`:

/--
php composer.phar create-project nette/sandbox sandbox dev-release-2.0.x
\--

Nebo si [stáhněte Nette Framework |http://nette.org/cs/download] ručně a archív rozbalte. Obsahuje řadu složek, které jsou [popsány jinde |doc:installation], nás teď bude zajímat pouze zmíněný `sandbox`. Ten zkopírujte do kořenového adresáře webového serveru.

Otevřete v prohlížeči adresu:

/--
http://localhost/sandbox/www/
\--

a Nette Framework vás s gratulací přivítá:

[* welcome-620.jpg *]


Pohled do sandboxu
==================

Pojďme sandbox nejprve trošku prozkoumat:

/--pre
<b>www/</b>                      ← kořenový adresář webového serveru
└── <b>sandbox/</b>
    ├── <b>app/</b>              ← místo pro naši aplikaci
    │   ├── <b>config/</b>       ← konfigurační soubory
    │   ├── <b>model/</b>        ← třídy modelové vrstvy
    │   ├── <b>presenters/</b>   ← třídy presenterů
    │   ├── <b>templates/</b>    ← šablony
    │   └── <b>bootstrap.php</b> ← zaváděcí soubor
    │
    ├── <b>libs/</b>             ← knihovny, které bude naše aplikace využívat
    │   └── <b>Nette/</b>        ← jako třeba váš oblíbený framework :-)
    │
    ├── <b>log/</b>              ← zde se v produkčním módu logují chybová hlášení
    ├── <b>temp/</b>             ← místo pro dočasné soubory cache nebo session
    ├── <b>test/</b>             ← unit testy naší aplikace
    └── <b>www/</b>              ← složka veřejně přístupná z webu
\--


Složka `www` je určena pro obrázky, JavaScripty, CSS a další veřejně dostupné zdroje. Je jako jediná přístupná z prohlížeče, proto si sem můžete namířit kořenový adresář webového serveru.

Pokud používáte Linux nebo Mac OS X, bude potřeba nastavit oprávnění pro zápis do složek `temp` a `log`. Nejsnázeji příkazem `chmod -R a+rwX temp log`.

Nás bude především zajímat složka `app`, ve které budeme programovat. V ní se nachází soubor `bootstrap.php`, vstupní bod aplikace. Stará se o načtení frameworku a konfigurace, aktivuje [automatické načítání tříd | cs/auto-loading], nastaví [routování | cs/routing] a spustí aplikaci.

Routování říká, jakou přesně mají mít URL adresy podobu. Výhoda Nette Frameworku je, že tvar URL můžete změnit kdykoliv a velice snadno, proto se routování budeme věnovat až ve chvíli, kdy budeme mít celou aplikaci naprogramovanou.


Laděnka
=======

Nesmírně důležitým nástrojem při vývoji je [Debugger |cs/debugging], někdy přezdívaný Laděnka. Schválně si zkuste otevřít soubor `app/presenters/HomepagePresenter.php` a udělat v něm nějakou chybu, třeba smazat písmenko ze slova `class`. Objeví se vám srozumitelná červená stránka a hned jste v obraze:

[* debugger-620.png *]

Laděnka vám neuvěřitelným způsobem usnadní práci při hledání chyb. Také si všimněte plovoucího Debugger baru v pravé spodní části, který vás informuje o důležitých běhových údajích.

V produkčním prostředí Laděnka pochopitelně žádné citlivé údaje neprozrazuje a namísto toho je loguje. Hned si to vyzkoušejme. V souboru `bootstrap.php` vypněte debug-mód řádkem:

/--php
$configurator->setDebugMode(FALSE);   // <- tento řádek přidejte
$configurator->enableDebugger(__DIR__ . '/../log');
\--

A po znovunačtení bude červená obrazovka nahrazená uživatelsky srozumitelnou zprávou:

[* server-error-620.png *]

Podívejte se do adresáře `log`, kde jednak najdete v souboru `error.log` stručnou zprávu o chybě, ale také celou červenou stránku uloženou v souboru, jehož název začíná slovem `exception`.

Řádek `$configurator->setDebugMode(FALSE);` opět zakomentujte a Laděnka bude debug-mód zapínat automaticky na serveru `localhost`. Všude jinde bude vypnutý.

Nyní, vyzbrojeni základními znalostmi, se můžeme pustit do návrhu databáze a modelu.
