Konfigurace
***********

.[perex]
Přehled všech konfiguračních voleb v Nette Frameworku.

Nette umožňuje nastavovat aplikaci pomocí [konfiguračních souborů |bootstrap#konfigurace-di-kontejneru]. Ty se obykle zapisují ve formátu NEON. [Vyzkoušejte si |https://ne-on.org] si jeho syntaxi.

<pre>
"application .[prism-token prism-atrule]":[#Application]: 	"Application .[prism-token prism-comment]"<br>
"constants .[prism-token prism-atrule]":[di-builtin-extensions#ConstantsExtension]: 	"Definice PHP konstant .[prism-token prism-comment]"<br>
"database .[prism-token prism-atrule]":[#Databáze]: 	"Databáze .[prism-token prism-comment]"<br>
"decorator .[prism-token prism-atrule]":[di-builtin-extensions#decoratorextension]: 	"Dekorátor .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI kontejner]: 			"DI kontejner .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[di-builtin-extensions#ExtensionsExtension]: 	"Instalace dalších DI rozšíření .[prism-token prism-comment]"<br>
"forms .[prism-token prism-atrule]":[#Formuláře]: 		"Formuláře .[prism-token prism-comment]"<br>
"http .[prism-token prism-atrule]":[#HTTP hlavičky]: 		"HTTP hlavičky .[prism-token prism-comment]"<br>
"latte .[prism-token prism-atrule]":[#Šablony Latte]: 		"Šablony Latte .[prism-token prism-comment]"<br>
"mail .[prism-token prism-atrule]":[#Maily]: 		"Maily .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[di-services#parametry]: 	"Parametry .[prism-token prism-comment]"<br>
"php .[prism-token prism-atrule]":[di-builtin-extensions#PhpExtension]: 			"PHP konfigurace .[prism-token prism-comment]"<br>
"routing .[prism-token prism-atrule]":[#Routování]: 		"Routování .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[di-builtin-extensions#SearchExtension]: 		"Automatická registrace služeb .[prism-token prism-comment]"<br>
"security .[prism-token prism-atrule]":[#Přístupová oprávnění]: 	"Přístupová oprávnění .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[di-services#sluzby]: 		"Služby .[prism-token prism-comment]"<br>
"session .[prism-token prism-atrule]":[#Session]: 		"Session .[prism-token prism-comment]"<br>
"tracy .[prism-token prism-atrule]":[#Tracy debugger]: 		"Tracy debugger .[prism-token prism-comment]"
</pre>


Služby a parametry
==================

Konfigurační soubor je místem, kam umísťujeme definice vlastních služeb. Slouží k tomu sekce `services`, podrobný popis najdete v kapitole [Služby |di-services].

Například takto může vypadat definice služby pojmenované `database`, což bude instance `PDO`:

```neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
```


Přístupová oprávnění
====================

Uvedením pole `users` vytvoříme SimpleAuthenticator, uvedením polí `roles` nebo `resources` vytvoříme autorizátor Nette\Security\Permission.

```neon
security:
	debugger: true  # panel v Debugger baru

	users:
		frantisek: tajneheslo

	roles:
		guest:
		member:
		admin: [member]  # admin dědí od membera

	resources:
		file:
```


Application
===========

Chyby
-----

`errorPresenter` říká, jaký presenter se má zavolat, dojde-li v naší aplikaci k chybě. Jak takový presenter může vypadat, [najdeme ve skeletonu |https://github.com/nette/web-project/blob/master/app/Presenters/ErrorPresenter.php].

Parametr `catchExceptions` ovlivňuje, zda dojde k zavolání error presenteru. Změnou hodnoty na `true` můžeme v debug módu ověřit správnou funkčnost error presenteru.

```neon
application:
	debugger: true # panel do Tracy
	errorPresenter:  ...  # default: Nette:Error
	catchExceptions: ...  # default: zapnuto v produkčním režimu
	silentLinks: ...      # default: false
```

Volba `silentLinks` určuje, jak se Nette zachová v debug módu při tom, když se nepodaří vygenerovat odkaz. Výchozí hodnota `false` znamená, že Nette vyhodí `E_USER_WARNING` chybu. Nastavením na `true` dojde k potlačení této chybové hlášky. V produkčním prostředí se `E_USER_WARNING` vyvolá vždy. Toto chování můžeme také ovlivnit nastavením třídní proměnné [Presenteru::$invalidLinkMode|presenters#Neplatné odkazy].


Mapování
--------

Výchozí hodnota: `*: *Module\*Presenter` (v Sandboxu je pak upravená na `*: App\*Module\Presenters\*Presenter`)

Tento parametr obsahuje pole s pravidly pro přepis názvu presenteru na název třídy. Klíč v poli obsahuje název modulu, pro který se má toto pravidlo uplatnit, nebo `*` jako fallback pro ostatní moduly. Hodnota pak obsahuje masku pravidla:

```neon
application:
	mapping:
		Admin: App\Admin\*Module\*Presenter
		*: App\*Module\Presenters\*Presenter
```

Presenter `Front:Blog:Article` je obsažen v modulu Front, pro ten nemáme žádný vlastní mapping, použije se tedy obecný s hvezdičkou a výsledná třída bude `App\FrontModule\BlogModule\Presenters\ArticlePresenter`. Presenter `Admin:User:Edit` se nachází v modulu `Admin`, pro které zde máme oddělený mapping. Výsledný název třídy bude `App\Admin\UserModule\EditPresenter` (všimněte si, že jelikož je modul `Admin` již uveden v pravidlech mappingu, ve výsledném názvu třídy bude zahozen).


Automatická registrace presenterů
---------------------------------

Nette automaticky registruje presentery jako služby, což poté zrychlí jejich vytváření. Je zde několik konfiguračních možností, které určují, kde a jak bude Nette tyto presentery hledat.

Parametr `scanComposer` určuje, zde má Nette hledat presentery v Composer classmap. `scanFilter` říká, jaký řetězec musí obsahovat třída a název souboru, který bude automaticky registrován.

Hodnota `scanDirs` udává, v jakých adresářích má Nette hledat presentery pomocí RobotLoaderu. Pokud zapíšeme do konfigurace nějakou hodnotu, bude spojená s tou výchozí, což je `%appDir%`:

```neon
application:
	scanComposer: false  # default: true
	scanFilter: Page  # default: Presenter
	scanDirs:
		- foo
```

`scanDirs` pak bude obsahovat hodnoty `%appDir%` a `foo`, pokud bychom chtěli skenování adresářů vypnout nebo zcela přepsat, musíme použít [vykřičník |di-services#toc-vice-konfiguracnich-souboru], který hodnotu přepíše:

```neon
application:
	scanDirs!:
		- foo
```

`scanDirs` bude nyní obsahovat pouze hodnotu `foo`.


Databáze
========

Povinný prvek je pouze `dsn`:

```neon
database:
		dsn: "sqlite:%appDir%/Model/demo.db"
```

Framework vytvoří nejen objekt `Nette\Database\Connection`, ale nastavují mu i pomocné objekty jako reflection & cache a ve vývojářském režimu přidá panel do Tracy baru.

Další nastavení jsou tyto:

```neon
database:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: password

	options:
		PDO::MYSQL_ATTR_COMPRESS: true
		lazy: true  # navázání připojení až když je poprvé potřeba
		driverClass: .... # třída ovladače databáze

	debugger: true        # zobrazí panel v Tracy baru
	explain:  true        # explain dotazů v Tracy bar
	autowired: true       # povoleno u prvního spojení
	conventions:  discovered # nebo 'static' nebo jméno třídy, výchozí je 'discovered'
```

V položce `options` můžete uvádět další hodnoty, které najdete v dokumentaci ovladačů PDO.

V konfiguračním souboru můžeme definovat i více než jedno databázové spojení:

```neon
database:
	main:
		dsn: 'mysql:host=127.0.0.1;dbname=test'
		user: root
		password: password

	anotherDb:
		dsn: 'sqlite::memory:'
```

Každé takto definované spojení vytvoří dvě služby - objekt `Nette\Database\Connection` pod názvem `database.[NAME].connection` (tedy v našem případě `database.main.connection` a `database.anotherDb.connection`) a objekt `Nette\Database\Context` pod názvem `database.[NAME].context`, který se používá při práci s vrstvou [Database Explorer].

Služby prvního spojení se předávají přes autowiring, nicméně můžeme to vypnout skrze `autowired: false` a naopak u jiného spojení zapnout přes `autowired: true`.

Služby ostatních spojení, která nejsou autowirovaná, lze předat explicitně v konfiguraci:

```neon
services:
	- UserManager(@database.anotherDb.connection) # nebo @database.anotherDb.context
```



DI kontejner
============

```neon
di:
	debugger: false  # vypne DI panel v Debugger baru
```


Formuláře
=========

V konfiguračním souboru lze změnit výchozí chybové hlášky.

```neon
forms:
	messages:
		EQUAL: 'Zadejte %s.'
		NOT_EQUAL: 'Tato hodnota by neměla být %s.'
		FILLED: 'Toto pole je povinné.'
		BLANK: 'Toto pole by mělo být prázdné.'
		MIN_LENGTH: 'Zadejte prosím alespoň %d znaků.'
		MAX_LENGTH: 'Zadejte prosím maximálně %d znaků.'
		LENGTH: 'Zadejte prosím hodnotu %d až %d znaků dlouho.'
		EMAIL: 'Zadejte platnou e-mailovou adresu.'
		URL: 'Zadejte prosím platné URL.'
		INTEGER: 'Zadejte platné celé číslo.'
		FLOAT: 'Zadejte platné číslo.'
		MIN: 'Zadejte prosím hodnotu větší nebo rovnou %d.'
		MAX: 'Zadejte prosím hodnotu menší nebo rovnou %d.'
		RANGE: 'Zadejte hodnotu mezi %d a %d.'
		MAX_FILE_SIZE: 'Velikost nahraného souboru může být nejvýše %d bytů.'
		MAX_POST_SIZE: 'Nahraná data překračují limit %d bytů.'
		MIME_TYPE: 'Nahraný soubor není v očekávaném formátu.'
		IMAGE: 'Nahraný soubor musí být obraz ve formátu JPEG, GIF, PNG nebo WebP.'
		Nette\Forms\Controls\SelectBox::VALID: 'Vyberte prosím platnou možnost.'
		Nette\Forms\Controls\UploadControl::VALID: 'Při nahrávání souboru došlo k chybě.'
		Nette\Forms\Controls\CsrfProtection::PROTECTION: 'Vaše relace vypršela. Vraťte se na domovskou stránku a zkuste to znovu.'
```


HTTP hlavičky
=============

```neon
http:
	frames: ... # ovlivňuje hlavičku X-Frame-Options

	headers:
		X-Powered-By: MyCMS       # odešle vlastní HTTP hlavičku

	csp:                          # Content Security Policy
		script-src: [
			nonce, strict-dynamic # pro prohlížeče podporující CSP Level 3
			*, unsafe-inline      # pro prohlížeče nepodporující CSP Level 3
		]

	cspReportOnly:                # Content Security Policy Report Only
		default-src: self
		report-uri: 'https://my-report-uri-endpoint'
```

Framework z bezpečnostních důvodů odesílá hlavičku `X-Frame-Options: SAMEORIGIN`, která říká, že stránku lze zobrazit uvnitř jiné stránky (v elementu IFRAME) pouze pokud se nachází na stejné doméně. To může být v některých situacích nežádoucí (například pokud vyvíjíte aplikaci pro Facebook), chování lze proto vypnout nastavením položky `frames: true`.

V příkladě nastavujeme hlavičky `Content-Security-Policy` & `Content-Security-Policy-Report-Only`. Více informací najdete v [dokumentaci CSP |https://content-security-policy.com].


HTTP proxy
==========

Můžete zadat HTTP proxy, aby detekce IP adresy klienta fungovala správně.

```neon
http:
	proxy: 127.0.0.1  # IP adresa, rozsah, název hostitele nebo pole těchto hodnot
```


Šablony Latte
=============

Lze přepínat HTML a XHTML režim šablon a registrovat vlastní [Latte |latte:] značky. Vlastní tagy mohou být zaregistrovány buď pomocí jména třídy nebo pomocí reference na službu. Jako výchozí je zavolána metoda `install`, ale to můžete změnit tím, že přidáte dvojtečku a jméno vaší metody.

```neon
latte:
	xhtml: true  # výchozí je no
	macros:
		- App\MyLatteMacros::register         # statická metoda, classname nebo callable
		- @App\MyLatteMacrosFactory           # služba s metodou install
		- @App\MyLatteMacrosFactory::register # služba s metodou register

	templateClass: App\MyTemplateClass        # výchozí je Nette\Bridges\ApplicationLatte\Template

services:
	- App\MyLatteMacrosFactory
```


Maily
=====

Standardní mailer je SendmailMailer, uvedením `smtp` aktivujeme SmtpMailer.

```neon
mail:
	smtp: true # zapne SmtpMailer místo SendmailMailer
	# nepovinné nastavení
	host: ...
	port: ...
	username: ...
	password: ...
	secure: # povolené hodnoty jsou ssl, tls nebo null
	timeout: ...
```

Pro zvýšení důvěryhodnosti můžeme emaily podpisovat pomocí [technologie DKIM |https://blog.nette.org/cs/podepisujte-emaily-pomoci-dkim]:

```neon
mail:
	dkim:
		domain: myweb.com
	    selector: lovenette
	    privateKey: %appDir%/cert/dkim.priv
	    passPhrase: ...
	    testMode: ...
```


Routování
=========

Routování obvykle definujeme v RouterFactory, takovou třídu [najdeme ve skeletonu ](https://github.com/nette/web-project/blob/master/app/Router/RouterFactory.php).
Můžeme je však definovat i v konfiguračním souboru:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```

Další nastavení:

```neon
routing:
	debugger: false  # vypne panel v Debugger baru
	cache: true  # serializuje router do DI kontejneru
```


Session
=======

Session standardně vyexpiruje při zavření okna prohlížeče. Dobu expirace nastavíme takto:

```neon
session:
	expiration: 14 days
```

Automatické startování session:

```neon
session:
	autoStart: true # výchozí hodnota je 'smart'
```

Doporučuje se ponechat `autoStart: smart`, protože pak automaticky startuje session, pouze pokud je již vytvořena.

Na sdílených hostinzích je vhodné zvolit vlastní adresář, kam se mají ukládat soubory s relacemi:

```neon
session:
	savePath: "%tempDir%/sessions"
```

V tomto příkladě se `%tempDir%` nahradí hodnotou, kterou jste nastavili v `$configurator->setTempDirectory()` v `Bootstrap.php`.

Pokud chceme platnost session (nebo autentizace) rozšířit na subdomémy, nastavíme ještě parametry cookie:

```neon
session:
	cookieDomain: 'example.com'
```

Pokud chceme zobrazit obsah session v Debugger baru:

```neon
session:
	debugger: true
```

Lze nastavovat všechny PHP [direktivy |http://www.php.net/manual/en/session.configuration.php] (ve formátu camelCase) a také [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters].


Tracy debugger
==============

Lze konfigurovat některé parametry [Tracy |tracy:] a nastavovat panely do Debugger baru.

```neon
tracy:
	# email, na který se posílají notifikace, že došlo k chybě
	email: dev@example.com
	fromEmail: robot@example.com

	# pro odesílání emailů použije v konfiguraci definovaný mailer. Od verze Tracy 2.5.
	netteMailer: true

	# ve vývojovém režimu zobrazí chyby typu notice nebo warning jako BlueScreen
	strictMode: true

	# zobrazí umlčené (@) chybové hlášky
	scream: true

	# formát odkazu pro otevření v editoru
	editor: editor://open/?file=%file&line=%line

	# cesta k prohlížeči, který bude automaticky otevírat zalogované BlueScreen v CLI režimu
	browser: ...

	# pro jaké úrovně chyb (E_WARNING, E_ALL, ...) se loguje i BlueScreen
	logSeverity:

	# cesta k šabloně s vlastní stránkou pro chybu 500
	errorTemplate: ...

	# zobrazí Debugger Bar na spodu stránky
	showBar: true

	# maximální délka řetězce vypisovaná funkcí dump()
	maxLength: 150

	# do kolika úrovní zanoření má vypisovat funkce dump()
	maxDepth: 3

	# zobrazí místo, kde byla volána funkce dump()
	showLocation: false

	editorMapping:
		# originál: nová
		/var/www/html: /data/web
		/home/web: /srv/html

	# přidá panely do Debugger Baru
	bar:
		- Nette\Bridges\DITracy\ContainerPanel
		- IncludePanel
		- XDebugHelper('myIdeKey')
		- MyPanel(@MyService)

	# přidá panely do BlueScreen
	blueScreen:
		- DoctrinePanel::renderException
```


Low-level úpravy
================

Všechna uvedená nastavení ovlivňují podobu DI kontejneru a systémových služeb, které vytváří. Všechny tyto služby lze ještě pozměnit na nižší úrovni. Třeba u služby `application.application`, což je standardně objekt `Nette\Application\Application`, můžeme změnit třídu:

```neon
services:
	application.application:
		factory: MyApplication
		alteration: true
```

Příznak `alteration` je informativní a říká, že jen modifikujeme existující službu.

Můžeme také doplnit setup:

```neon
services:
	application.application:
		factory: MyApplication
		alteration: true
		setup:
			- $onStartup = [@resource::init]
```

Také lze službu z kontejneru odstranit:

```neon
services:
	cache.journal: false
```


Další rozšíření
===============

Přes rozšíření lze konfigurační soubor doplňovat o další sekce, přes které můžeme konfigurovat další komponenty nebo upravovat podobu DI kontejneru.

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22

dibi:
	host: localhost
```

Nette obsahuje několik dalších rozšíření, např. [PhpExtension |di-builtin-extensions#phpextension], [DecoratorExtension |di-builtin-extensions#decoratorextension], [InjectExtension |di-builtin-extensions#injectextension], o kterých se dočtete více v kapitole [DI: Základní rozšíření pro kontejner |di-builtin-extensions].
