Nette\Utils\Validators
**********************

.[perex]
[Nette\Utils\Validators |api:] is a static class with useful functions for data validation.



All examples assume an alias is created:

/--php
use Nette\Utils\Validators;
\--


Rules
=====

Rule definitions are written in a similar way as [Latte filters|default-filters]. Each rule is separated with vertical bar (`|`) and optionally suffixed with parameters after colon.

.[wide]
| Type ||
|---------------------------
| `bool`, `boolean` | boolean value
| `int`, `integer` | integer
| `float` | float
| `number` | integer or float
| `numeric` | [number, including text representation | #isNumeric]
| `numericint` | [integer, including text representation | #isNumericInt]
| `string` | string
| `unicode` | [UTF-8 string | #isUnicode]
| `array` | array
| `list` | [non-associative array | #isList]
| `object` | object
| `resource` | resource
| `scalar` | scalar (`int`, `float`, `bool` or `string`)
| `callable` | [callback | #isCallable]
| `null` | NULL
|-----------------------------
| Value ||
|-----------------------------
| `email` | [E-mail | #isEmail]
| `url` | [URL | #isUrl]
| `none` | ["empty value" | #isNone]
|------------------------------
| Special ||
|------------------------------
| `pattern` | ...
| `alpha` | ...
| `digit` | ...
| `lower` | ...
| `upper` | ...
| `space` | ...
| `xdigit` | ...


is($value, $expected) .{toc: is()}
----------------------------------

Verifies that the input corresponds to the rules.

/--php
Validators::is('Nette Framework', 'string:15'); // 15 characters long string
Validators::is('Nette Framework', 'string:8..'); // minimum of 8 characters long string
Validators::is('Nette Framework', 'string:..32'); // maximum of 32 characters long string
Validators::is('Nette Framework', 'string:8..32'); // minimum of 8 and maximum of 32 characters long string
Validators::is(23, 'int:0..10'); // integer between 0 and 10
Validators::is(1, 'int|float'); // integer or float (can be written as `number`)
\--


assert($value, $expected, $label = 'variable')  .{toc: assert()}
----------------------------------------------------------------

Verifies that the input corresponds to the rules, otherwise throws an assertion exception.

/--php
Validators::assert('Nette Framework', 'string:15'); // ok
Validators::assert('Lorem ipsum dolor sit', 'string:78'); // exception
// The variable expects to be string:78, string 'Lorem ipsum dolor sit' given.
\--


assertField($arr, $field, $expected = NULL, $label = "item '%' in array")  .{toc: assertField()}
------------------------------------------------------------------------------------------------

Verifies that the array item corresponds to the rules, otherwise throws an assertion exception.

/--php
$arr = array('nette' => 'framework');

Validators::assertField($arr, 'nette', 'string:15'); // ok
Validators::assertField($arr, 'foo', 'string:15'); // exception
// Missing item 'foo' in array.

Validators::assertField($arr, 'nette', 'int'); // exception
// The item 'nette' in array expects to be int, string 'framework' given.
\--


Validators
==========

isNumericInt($value) .{toc: isNumericInt()}
-------------------------------------------

Verifies that the input is an integer.

/--php
Validators::isNumericInt(23); // true
Validators::isNumericInt(1.78); // false
Validators::isNumericInt('42'); // true
Validators::isNumericInt('3.14'); // false
Validators::isNumericInt('nette'); // false
\--


isNumeric($value) .{toc: isNumeric()}
-------------------------------------

Verifies that the input is a number.

/--php
Validators::isNumeric(23); // true
Validators::isNumeric(1.78); // true
Validators::isNumeric('42'); // true
Validators::isNumeric('3.14'); // true
Validators::isNumeric('nette'); // false
\--


isCallable($value) .{toc: isCallable()}
---------------------------------------

Verifies that the input is callable.

/--php
Validators::isCallable('Foo::bar'); // true
Validators::isCallable(array($foo, 'bar')); // true
Validators::isCallable(array('Foo::bar')); // true
Validators::isCallable('Lorem ipsum dolor sit...'); // false
Validators::isCallable(23); // false
Validators::isCallable(FALSE); // false
\--


isUnicode($value) .{toc: isUnicode()}
-------------------------------------

Verifies that the input is a valid UTF-8 string.

/--php
Validators::isUnicode('nette'); // true
Validators::isUnicode(''); // true
Validators::isUnicode(1); // false
\--


isNone($value) .{toc: isNone()}
-------------------------------

Verifies that the input is ((none))"empty".

/--php
Validators::isNone(0); // true
Validators::isNone(''); // true
Validators::isNone(FALSE); // true
Validators::isNone(NULL); // true
Validators::isNone('nette'); // false
\--


isList($value) .{toc: isList()}
-------------------------------

Verifies that the input is non-associative array.

/--php
Validators::isList(array('foo', 'bar')); // true
Validators::isList(array('foo' => 'Bar')); // false
\--


isInRange($value, array $range) .{toc: isInRange()}
---------------------------------------------------

Verifies that the input is in a given range.

/--php
Validators::isInRange(5, array(0, 5)); // true
Validators::isInRange(23, array(NULL, 5)); // false
Validators::isInRange(23, array(5)); // true
Validators::isInRange(1, array(5)); // false
\--


isEmail($value) .{toc: isEmail()}
---------------------------------

Verifies that the input is a valid email address.

/--php
Validators::isEmail('example@nette.org'); // true
Validators::isEmail('nette'); // false
\--


isUrl($value) .{toc: isUrl()}
-----------------------------

Verifies that the input is a valid URL address.

/--php
Validators::isUrl('https://nette.org'); // true
Validators::isUrl('nette'); // false
\--

{{composer: nette/utils}}
