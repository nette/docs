Configurazione del container DI
*******************************

.[perex]
Panoramica delle opzioni di configurazione per il container Nette DI.


File di configurazione
======================

Il container Nette DI è facilmente controllabile tramite file di configurazione. Questi sono solitamente scritti nel [formato NEON|neon:format]. Per la modifica, consigliamo [editor con supporto|best-practices:editors-and-tools#ide-editor] per questo formato.

<pre>
"decorator .[prism-token prism-atrule]":[#decorator]: 	"Decorator .[prism-token prism-comment]"<br>
"di .[prism-token prism-atrule]":[#DI]: 			"Container DI .[prism-token prism-comment]"<br>
"extensions .[prism-token prism-atrule]":[#Rozšíření]: 	"Installazione di estensioni DI aggiuntive .[prism-token prism-comment]"<br>
"includes .[prism-token prism-atrule]":[#Vkládání souborů]: 	"Inclusione di file .[prism-token prism-comment]"<br>
"parameters .[prism-token prism-atrule]":[#parametry]: 	"Parametri .[prism-token prism-comment]"<br>
"search .[prism-token prism-atrule]":[#Search]: 		"Registrazione automatica dei servizi .[prism-token prism-comment]"<br>
"services .[prism-token prism-atrule]":[services]: 		"Servizi .[prism-token prism-comment]"
</pre>

Per scrivere una stringa contenente il carattere `%`, è necessario escaparlo raddoppiandolo in `%%`. .[note]


Parametri
=========

Nella configurazione puoi definire parametri che possono poi essere utilizzati come parte delle definizioni dei servizi. In questo modo puoi rendere la configurazione più chiara o unificare ed estrarre valori che cambieranno.

```neon
parameters:
	dsn: 'mysql:host=127.0.0.1;dbname=test'
	user: root
	password: secret
```

Ci riferiamo al parametro `dsn` ovunque nella configurazione scrivendo `%dsn%`. I parametri possono essere utilizzati anche all'interno di stringhe come `'%wwwDir%/images'`.

I parametri non devono essere solo stringhe o numeri, possono anche contenere array:

```neon
parameters:
	mailer:
		host: smtp.example.com
		secure: ssl
		user: franta@gmail.com
	languages: [cs, en, de]
```

Ci riferiamo a una chiave specifica come `%mailer.user%`.

Se hai bisogno nel tuo codice, ad esempio in una classe, di conoscere il valore di un qualsiasi parametro, passalo a questa classe. Ad esempio nel costruttore. Non esiste un oggetto globale che rappresenti la configurazione, a cui le classi chiedono i valori dei parametri. Ciò violerebbe il principio di dependency injection.


Servizi
=======

Vedi [capitolo separato|services].


Decorator
=========

Come modificare in blocco tutti i servizi di un certo tipo? Ad esempio, chiamare un certo metodo su tutti i presenter che ereditano da un antenato comune specifico? A questo serve il decorator.

```neon
decorator:
	# per tutti i servizi che sono istanze di questa classe o interfaccia
	App\Presentation\BasePresenter:
		setup:
			- setProjectId(10)       # chiama questo metodo
			- $absoluteUrls = true   # e imposta la variabile
```

Il decorator può essere utilizzato anche per impostare [tag|services#Tagy] o attivare la modalità [inject|services#Režim Inject].

```neon
decorator:
	InjectableInterface:
		tags: [mytag: 1]
		inject: true
```


DI
===

Impostazioni tecniche del container DI.

```neon
di:
	# visualizzare DIC nella Tracy Bar?
	debugger: ...        # (bool) predefinito è true

	# tipi di parametri da non autowirare mai
	excluded: ...        # (string[])

	# consentire la creazione lazy dei servizi?
	lazy: ...            # (bool) predefinito è false

	# classe da cui eredita il container DI
	parentClass: ...     # (string) predefinito è Nette\DI\Container
```


Servizi lazy .{data-version:3.2.4}
----------------------------------

L'impostazione `lazy: true` attiva la creazione lazy (differita) dei servizi. Ciò significa che i servizi non vengono effettivamente creati nel momento in cui li richiediamo dal container DI, ma solo al momento del loro primo utilizzo. Ciò può accelerare l'avvio dell'applicazione e ridurre l'utilizzo della memoria, poiché vengono creati solo i servizi effettivamente necessari nella richiesta corrente.

Per un servizio specifico, la creazione lazy può essere [modificata|services#Lazy služby].

.[note]
Gli oggetti lazy possono essere utilizzati solo per classi utente, non per classi PHP interne. Richiede PHP 8.4 o successivo.


Esportazione metadati
---------------------

La classe del container DI contiene anche molti metadati. Puoi ridurne le dimensioni riducendo l'esportazione dei metadati.

```neon
di:
	export:
		# esportare i parametri?
		parameters: false   # (bool) predefinito è true

		# esportare i tag e quali?
		tags:               # (string[]|bool) predefiniti sono tutti
			- event.subscriber

		# esportare i dati per l'autowiring e quali?
		types:              # (string[]|bool) predefiniti sono tutti
			- Nette\Database\Connection
			- Symfony\Component\Console\Application
```

Se non utilizzi l'array `$container->getParameters()`, puoi disattivare l'esportazione dei parametri. Inoltre, puoi esportare solo i tag tramite i quali ottieni i servizi con il metodo `$container->findByTag(...)`.
Se non chiami affatto il metodo, puoi disattivare completamente l'esportazione dei tag usando `false`.

Puoi ridurre significativamente i metadati per [l'autowiring |autowiring] specificando le classi che usi come parametro del metodo `$container->getByType()`.
E ancora, se non chiami affatto il metodo (o solo nel [bootstrap|application:bootstrap] per ottenere `Nette\Application\Application`), puoi disattivare completamente l'esportazione usando `false`.


Estensioni
==========

Registrazione di estensioni DI aggiuntive. In questo modo aggiungiamo ad esempio l'estensione DI `Dibi\Bridges\Nette\DibiExtension22` con il nome `dibi`

```neon
extensions:
	dibi: Dibi\Bridges\Nette\DibiExtension22
```

Successivamente, la configuriamo nella sezione `dibi`:

```neon
dibi:
	host: localhost
```

Come estensione si può aggiungere anche una classe che ha parametri:

```neon
extensions:
	application: Nette\Bridges\ApplicationDI\ApplicationExtension(%debugMode%, %appDir%, %tempDir%/cache)
```


Inclusione di file
==================

Possiamo includere altri file di configurazione nella sezione `includes`:

```neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
```

Il nome `parameters.php` non è un errore di battitura, la configurazione può essere scritta anche in un file PHP, che la restituisce come array:

```php
<?php
return [
	'database' => [
		'main' => [
			'dsn' => 'sqlite::memory:',
		],
	],
];
```

Se nei file di configurazione compaiono elementi con le stesse chiavi, verranno sovrascritti o, nel caso di [array, uniti |#Slučování]. Il file incluso successivamente ha una priorità maggiore rispetto al precedente. Il file in cui è specificata la sezione `includes` ha una priorità maggiore rispetto ai file inclusi al suo interno.


Search
======

L'aggiunta automatica di servizi al container DI rende il lavoro estremamente piacevole. Nette aggiunge automaticamente i presenter al container, ma è possibile aggiungere facilmente anche qualsiasi altra classe.

Basta specificare in quali directory (e sottodirectory) cercare le classi:

```neon
search:
	-	in: %appDir%/Forms
	-	in: %appDir%/Model
```

Di solito, però, non vogliamo aggiungere assolutamente tutte le classi e le interfacce, quindi possiamo filtrarle:

```neon
search:
	-	in: %appDir%/Forms

		# filtraggio per nome file (string|string[])
		files:
			- *Factory.php

		# filtraggio per nome classe (string|string[])
		classes:
			- *Factory
```

Oppure possiamo selezionare classi che ereditano o implementano almeno una delle classi specificate:


```neon
search:
	-	in: %appDir%
		extends:
			- App\*Form
		implements:
			- App\*FormInterface
```

È possibile definire anche regole di esclusione, cioè maschere di nomi di classi o antenati ereditari, che se soddisfatte, il servizio non viene aggiunto al container DI:

```neon
search:
	-	in: %appDir%
		exclude:
			files: ...
			classes: ...
			extends: ...
			implements: ...
```

A tutti i servizi possono essere assegnati tag:

```neon
search:
	-	in: %appDir%
		tags: ...
```


Unione
======

Se in più file di configurazione compaiono elementi con le stesse chiavi, verranno sovrascritti o, nel caso di array, uniti. Il file incluso successivamente ha una priorità maggiore rispetto al precedente.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>risultato</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
	<td>
```neon
items:
	- 1
	- 2
	- 3
```
	</td>
</tr>
</table>

Per gli array, è possibile impedire l'unione specificando un punto esclamativo dopo il nome della chiave:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>risultato</th>
</tr>
<tr>
	<td>
```neon
items:
	- 1
	- 2
```
	</td>
	<td>
```neon
items!:
	- 3
```
	</td>
	<td>
```neon
items:
	- 3
```
	</td>
</tr>
</table>

{{maintitle: Configurazione Dependency Injection}}
