Praca z pływakami
*****************

.[perex]
[api:Nette\Utils\Floats] jest klasą statyczną zawierającą przydatne funkcje do porównywania liczb dziesiętnych.


Instalacja:

```shell
composer require nette/utils
```

Wszystkie przykłady zakładają, że alias został utworzony:

```php
use Nette\Utils\Floats;
```


Motywacja .[#toc-motivation]
============================

Dlaczego klasa do porównywania spławików, zapytacie? To znaczy, mogę użyć operatorów `<`, `>`, `===` i jestem dobrej myśli.
To nie do końca prawda. Jak myślisz, co ten kod wyprowadzi?

```php
$a = 0.1 + 0.2;
$b = 0.3;
echo $a === $b ? 'same' : 'not same';
```

Jeśli uruchomisz kod, niektórzy z was będą zaskoczeni, że program drukuje `not same`.

W operacjach matematycznych z liczbami dziesiętnymi pojawiają się błędy wynikające z konwersji między liczbami dziesiętnymi a binarnymi. Na przykład `0.1 + 0.2` wyprowadza `0.300000000000000044…`. Dlatego przy porównaniach musimy tolerować niewielką różnicę od pewnego miejsca po przecinku.

Tym właśnie zajmuje się klasa `Floats`. Poniższe porównanie będzie działać zgodnie z oczekiwaniami:

```php
echo Floats::areEqual($a, $b) ? 'same' : 'not same'; // same
```

Podczas próby porównania `NAN` rzuca wyjątek `\LogicException`.


Porównywanie pływaków .[#toc-float-comparison]
==============================================


areEqual(float $a, float $b): bool .[method]
--------------------------------------------

Zwraca `true` jeśli `$a` = `$b`.

```php
Floats::areEqual(10, 10.0); // true
```


isLessThan(float $a, float $b): bool .[method]
----------------------------------------------

Zwraca `true` jeśli `$a` < `$b`.

```php
Floats::isLessThan(9.5, 10.2); // true
Floats::isLessThan(INF, 10.2); // false
```


isLessThanOrEqualTo(float $a, float $b): bool .[method]
-------------------------------------------------------

Zwraca `true` jeśli `$a` <= `$b`.

```php
Floats::isLessThanOrEqualTo(9.5, 10.2);    // true
Floats::isLessThanOrEqualTo(10.25, 10.25); // true
```


isGreaterThan(float $a, float $b): bool .[method]
-------------------------------------------------

Zwraca `true` jeśli `$a` > `$b` dotyczy .

```php
Floats::isGreaterThan(9.5, -10.2); // true
Floats::isGreaterThan(9.5, 10.2);  // false
```


isGreaterThanOrEqualTo(float $a, float $b): bool .[method]
----------------------------------------------------------

Zwraca `true` jeśli `$a` >= `$b`.

```php
Floats::isGreaterThanOrEqualTo(9.5, 10.2);  // false
Floats::isGreaterThanOrEqualTo(10.2, 10.2); // true
```


compare(float $a, float $b): int .[method]
------------------------------------------

Jeśli `$a` < `$b`, zwraca `-1`, jeśli równe zwraca `0` a pokud je `$a` > `$b` zwraca `1`.

Może być używany np. z funkcją `usort`.

```php
$arr = [1, 5, 2, -3.5];
usort($arr, [Float::class, 'compare']);
// $arr je nyní [-3.5, 1, 2, 5]
```


Funkcje pomocnicze .[#toc-helpers-functions]
============================================


isZero(float $value): bool .[method]
------------------------------------

Zwraca `true`, jeśli wartość jest zerowa.

```php
Floats::isZero(0.0); // true
Floats::isZero(0);   // true
```


isInteger(float $value): bool .[method]
---------------------------------------

Zwraca `true`, jeśli wartość jest liczbą całkowitą.

```php
Floats::isInteger(0);    // true
Floats::isInteger(0.0);  // true
Floats::isInteger(-5.0); // true

Floats::isInteger(-5.1); // false
Floats::isInteger(INF);  // false
Floats::isInteger(NAN);  // false
```
