HTML Elements
*************

.[perex]
The [api:Nette\Utils\Html] class is a helper for generating HTML code that prevents Cross Site Scripting (XSS) vulnerability.

Installation:

```shell
composer require nette/utils
```

Basic Usage
-----------

```php
use Nette\Utils\Html;

$el = Html::el('img'); // creates <img> element
$el->src = 'image.jpg'; // sets src attribute
echo $el; // prints <img src="image.jpg">

echo $el->getName(); // returns 'img', element's name
echo $el->isEmpty(); // returns true, as <img> is in fact empty
```

HTML attributes
---------------

To change and read the HTML attributes is possible via the object properties. Setting the value to `null` or removing it with `unset()` function removes the attribute:

```php
$el->src = 'image.jpg'; // sets src attribute
echo $el->src; // prints 'image.jpg'
unset($el->src); // or $el->src = null; - removes src attribute
```

The second option is to call methods:

```php
// <img src="image.jpg" alt="photo">
echo Html::el('img')->src('image.jpg')->alt('photo');
```

Attributes may be set in bulk, even when creating the element:

```php
$el = Html::el('input type=text class="red important"');

$el = Html::el('input', [
	'type' => 'text',
	'class' => ['red', 'important'],
]);

$el->addAttributes([ // bulk attributes set
	'value' => $val,
	'required' => true,
]);
```

An attributes' value may not be only a string, but might as well be a boolean:

```php
$checkbox = Html::el('input')->type('checkbox');
$checkbox->checked = true; // <input type="checkbox" checked="checked">
$checkbox->checked = false; // <input type="checkbox">
```

or an array:

```php
```php
$el = Html::el('input');
$el->class[] = $active ? 'active' : null; // null is ignored
$el->class[] = 'top';
echo $el; // <input class="active top">

// alternatively:
$el = Html::el('input');
$el->class['active'] = (bool) $active;
$el->class['top'] = true; // nebo $el->class('top', true);
echo $el; // <input class="active top">

// next example:
$el = Html::el('input');
$el->style['color'] = 'green';
$el->style['display'] = 'block';
echo $el; // <input style="color: green; display: block">

// alternatively:
$el = Html::el('input');
$el->style('color', 'green');
$el->style('display', 'block');
echo $el; // <input style="color: green; display: block">
```

In HTML5, so-called data attributes can be used for user data:

```php
$el = Html::el('img');
$el->{'data-max-size'} = '500x300';
// or
$el->data('max-size', '500x300');

echo $el; // <img src="img.jpg" data-max-size="500x300">
```

If the value of the data attribute is an array, it is automatically serialized to JSON:

```php
$el = Html::el('input');
$el->{'data-items'} = [1,2,3];
echo $el; // <input data-items="[1,2,3]">
```

The `href()` method can make it easier to compose URLs:

```php
echo Html::el('a')->href('index.php', [
	'id' => 10,
	'lang' => 'en',
]);
// <a href="index.php?id=10&amp;lang=en"></a>
```


Elements' Content
-----------------

Content may be set with `setText()` or `setHtml()` or while creating an element:

```php
echo Html::el('a')->href('#')->setText('one < two');
// <a href="#">one &lt; two</a>

echo Html::el('a')->href('#')->setHtml('link<br>');
// <a href="#">link<br></a>

echo Html::el('strong', 'Nette');
// <strong>Nette</strong> or equal output with setText()
```

Getting content of element is done with `getText()` or `getHtml()`.

More Html element may be nested under each other:

```php
$el = Html::el('div');

// inserts new element <strong> into <div>
$strong = $el->create('strong', 'Nette');
// or $el->create('strong')->setText('Nette')

// inserts an Html object into <div>
$el->addHtml( Html::el('br') ); // $el[] = Html::el('br');

echo $el; // <div><strong>Nette</strong><br></div>

// inserts a string into <div>
$el->addHtml('<i>Yes!</i>'); // unlike setHtml() this does not remove the current content of $el

$el->insert(0, Html::el('span')); // prepends new Html node to first position
```

Method `removeChildren()` removes all child nodes.

Child nodes can be access as though it was an array, including iteration:

```php
echo $el[2]; // <br>

foreach ($el as $child) { ... }

echo count($el); // 4 - amount of child nodes
```


Generating HTML Output
----------------------

The easiest way to print an HTML element is either using `echo` function or type-cast it string. Opening and closing tags may be printed separately:

```php
$el = Html::el('div class=header');

echo $el; // <div class="header"></div>
$s = (string) $el; // inserts <div class="header"></div> into $s
echo $el->startTag(); // <div class="header">
echo $el->endTag(); // </div>
```

An automatic [Cross-Site Scriptingu (XSS) |vulnerability-protection#cross-site-scripting-xss] protection is an important feature:

```php
echo Html::el('input')->value('<script>alert()</script>');
// <input value="&lt;script&gt;alert()&lt;/script&gt;">
```

Output format is set by static property `Html::$xhtml`. Defaults to `false`, ie. HTML valid output:

```php
$el = Html::el('input')->disabled(true);
echo $el; // <input disabled>
Html::$xhtml = true;
echo $el; // <input disabled="disabled" />
```


HTML conversion â†” text .{data-version:v3.1}
-------------------------------------------

Conversion from HTML to text:

```php
echo Html::htmlToText('<span>One &amp; Two</span>'); // One & Two
```


{{composer: nette/utils}}
