Reflexão PHP
************

.[perex]
[api:Nette\Utils\Reflection] é uma classe estática com funções úteis para reflexão PHP. Sua tarefa é corrigir as deficiências das classes nativas e unificar o comportamento em diferentes versões do PHP.


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos assumem que um alias foi criado:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Verifica se a reflexão tem acesso aos comentários PHPdoc. Os comentários podem não estar disponíveis devido ao cache de opcode, veja por exemplo a diretiva [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Expande o nome da classe `$name` para seu nome completo no contexto da classe `$context`, ou seja, no contexto de seu namespace e aliases definidos. Em outras palavras, diz como o parser PHP entenderia `$name` se estivesse escrito no corpo da classe `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Retorna a reflexão do método que contém a declaração do método `$method`. Normalmente, cada método é sua própria declaração, mas o corpo do método também pode estar em um trait e com um nome diferente.

Como o PHP não fornece informações suficientes para determinar a declaração real, o Nette usa sua própria heurística, que **deve ser** confiável.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Retorna a reflexão da classe ou trait que contém a declaração da propriedade `$prop`. A propriedade também pode ser declarada em um trait.

Como o PHP não fornece informações suficientes para determinar a declaração real, o Nette usa sua própria heurística, que **não é** confiável.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Verifica se `$type` é um tipo embutido do PHP. Caso contrário, é um nome de classe.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Use [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Converte a reflexão em uma string legível por humanos.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
