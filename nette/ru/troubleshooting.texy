Решение проблем
***************


Nette не работает, отображается белая страница
----------------------------------------------
1. Убедитесь, что версия PHP на веб-хосте поддерживает фреймворк Nette.
2. Проверьте, доступны ли для записи каталоги `temp` и `log`. См. [#Установка прав доступа к каталогам].
3. Заставьте отладчик работать в режиме разработки (`Debugger::enable(Debugger::DEVELOPMENT)`).


Ошибка `#[\ReturnTypeWillChange] attribute should be used`
----------------------------------------------------------
Эта ошибка возникает, если вы обновили PHP до версии 8.1, но используете Nette, который не совместим с ней. Поэтому решением является обновление Nette до более новой версии с помощью `composer update`. Nette поддерживает PHP 8.1 с версии 3.0. Если вы используете более старую версию (вы можете узнать это, посмотрев в `composer.json`), [обновите Nette |migrations:en] или оставайтесь с PHP 8.0.


Установка прав доступа к каталогам
----------------------------------
Если вы разрабатываете на macOS или Linux (или любой другой системе на базе Unix), вам необходимо настроить привилегии записи на веб-сервере. Предположим, что ваше приложение расположено в каталоге по умолчанию `/var/www/html` (Fedora, CentOS, RHEL)

```shell
cd /var/www/html/MY_PROJECT
chmod -R a+rw temp log
```

В некоторых системах Linux (Fedora, CentOS, ...) SELinux может быть включен по умолчанию. Возможно, вам потребуется обновить политики SELinux или установить пути к каталогам `temp` и `log` с правильным контекстом безопасности SELinux. Каталоги `temp` и `log` должны быть установлены в контекст `httpd_sys_rw_content_t`; для остальной части приложения — в основном папки `app` — контекста `httpd_sys_content_t` будет достаточно. Запустите на сервере перечисленные команды от имени root:

```shell
semanage fcontext -at httpd_sys_rw_content_t '/var/www/html/MY_PROJECT/log(/.*)?'
semanage fcontext -at httpd_sys_rw_content_t '/var/www/html/MY_PROJECT/temp(/.*)?'
restorecon -Rv /var/www/html/MY_PROJECT/
```

Далее необходимо включить булево SELinux `httpd_can_network_connect_db`, чтобы разрешить Nette подключаться к базе данных по сети. По умолчанию он отключен. Для выполнения этой задачи можно использовать команду `setsebool`, и если указана опция `-P`, эта настройка будет сохраняться при всех перезагрузках.

```shell
setsebool -P httpd_can_network_connect_db on
```


Ошибка 500 в «боевом» режиме
----------------------------
Если приложение корректно работает в режиме разработки, а в режиме производства выдает ошибку 500, причина может быть в устаревшем кэше. В то время как Nette умно автоматически обновляет кэш в режиме разработки, в производственном режиме он сосредоточен на максимизации производительности, и очистка кэша после каждой модификации кода зависит от вас. Попробуйте удалить `temp/cache`.

В любом случае, причина ошибки указана в журнале. Если вы ничего не видите в журнале (а в ошибке 500 есть уведомление `Tracy is unable to log error`), выясните, почему он не может регистрировать ошибки. Например, переключитесь в режим разработки и вызовите `Tracy\Debugger::log('hello')` и Трейси расскажет вам, почему она не может вести журнал.
Это может быть связано с недостаточными правами на запись в каталог `log/`.


Как настроить сервер для красивых URL?
--------------------------------------
**Apache**: Расширение mod_rewrite должно быть разрешено и настроено в файле `.htaccess`.

```apacheconf
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule !\.(pdf|js|ico|gif|jpg|png|css|rar|zip|tar\.gz)$ index.php [L]
```

Чтобы изменить конфигурацию Apache с помощью файлов .htaccess, необходимо включить директиву AllowOverride. Это поведение по умолчанию для Apache.

**nginx**: директива `try_files` должна использоваться в конфигурации сервера:

```nginx
location / {
	try_files $uri $uri/ /index.php$is_args$args;  # $is_args$args важно
}
```

Блок `location` должен быть определен ровно один раз для каждого пути к файловой системе в блоке `server`. Если в вашей конфигурации уже есть блок `location /`, добавьте директиву `try_files` в существующий блок.


Использование символов { } в JavaScript
---------------------------------------
Символы `{` и `}` используются для записи тегов Latte. Всё (кроме пробела и кавычек), следующее за символом `{`, считается тегом. Если вам нужно вывести символ `{` (часто встречается в JavaScript), вы можете поставить пробел (или другой пустой символ) сразу после `{`. Таким образом вы избежите интерпретации его как метки.

Если необходимо вывести эти символы в ситуации, когда они будут интерпретированы как тег, вы можете использовать специальные теги для вывода этих символов - `{l}` для `{` и `{r}` для `}`.

```
{is tag}
{ is not tag }
{l}is not tag{r}
```


{{leftbar: www:@menu-common}}
