Pomocné třídy
*************

DomQuery
--------
`Tester\DomQuery` je třída usnadňující testování obsahu HTML nebo XML. Popis všech metod najdeme v [API dokumentaci |https://api.nette.org/tester/Tester.DomQuery.html], zde si ukážeme základní použití:

```php
# HTML, které chceme testovat
$html = $template->render();

# Z HTML vytvoříme DOM strukturu
$dom = Tester\DomQuery::fromHtml($html);

# Můžeme testovat
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[name="password"]'));
Assert::true($dom->has('input[type="submit"]'));
```

Jako selektor metody `DomQuery::has($selector)` používáme CSS selektory.


FileMock
--------
`Tester\FileMock` emuluje v paměti soubory a usnadňuje testování kódu, který používá funkce `fopen()`, `file_get_contents()`, `parse_ini_file()` a podobné. Příklad použití:

```php
# Testovaná třída
class Logger
{
	private $logFile;

	public function __construct($logFile)
	{
		$this->logFile = $logFile;
	}

	public function log($message)
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# Nový prázdný soubor
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Testujeme vytvořený obsah
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Environment::purge()
--------------------
Třída `Tester\Helpers` nám nabízí metodu `purge()`, která vytváří zadaný adresář, ale pokud ten již existuje, smaže celý jeho obsah. Hodí se pro vytvoření dočasného adresáře. Například v `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - adresář již může existovat

define('TEMP_DIR', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TEMP_DIR);
```


Environment::lock()
-------------------
Dále se dozvíme, že se testy spouštějí paralelně. Někdy ovšem potřebujeme, aby se běh testů nepřekrýval. Typicky u databázových testů je nutné, aby si test připravil obsah databáze a jiný test mu po čas běhu do databáze nesahal. V těchto testech použijeme `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

První parametr je jméno zámku, druhý je cesta k adresáři pro uložení zámku. Test, který získá zámek první proběhne, ostatní testy musí počkat na jeho dokončení.


Environment::bypassFinals()
---------------------------
Třídy anebo metody označené jako `final` se obtížně testují. Volání `Tester\Environment::bypassFinals()` na začátku testu způsobí, že jsou klíčová slova `final` během načítání kódu vypuštěna.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass už není final
{
	...
}
```


Environment::setup()
--------------------
- zlepší čitelnost výpisu chyb (včetně obarvování), jinak je vypsán výchozí PHP stack trace
- zapne kontrolu, že byly v testu volány aserce, jinak test bez asercí (například zapomenutých) projde také
- při použití `--coverage` spustí automaticky sběr informací o spuštěném kódu (popsáno dále)

Použití je volitelné, ale doporučované.


Environment::RUNNER
-------------------
Může být užitečné vědět, jestli jsme test spustili ručně, anebo pomocí Testeru.

```php
if (getenv(Tester\Environment::RUNNER)) {
	# spuštěno Testerem
} else {
	# spuštěno jinak
}
```


Environment::THREAD
-------------------
Tester spouští testy paralelně v zadaném počtu vláken. Pokud nás zajímá číslo vlákna, zjistíme ho z proměnné prostředí:

```php
echo "Běžím ve vlákně číslo " . getenv(Tester\Environment::THREAD).
```
