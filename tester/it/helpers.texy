Aiutanti
********


DomQuery .[#toc-domquery]
-------------------------
`Tester\DomQuery` è una classe che estende `SimpleXMLElement` con metodi che facilitano il test di contenuti HTML o XML.

```php
# let's have an HTML document in $html that we load
$dom = Tester\DomQuery::fromHtml($html);

# we can test the presence of elements using CSS selectors
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[type="submit"]'));

# or select elements as array of DomQuery
$elems = $dom->find('input[data-autocomplete]');
```


FileMock .[#toc-filemock]
-------------------------
`Tester\FileMock` emula i file in memoria per aiutare a testare un codice che utilizza funzioni come `fopen()`, `file_get_contents()` o `parse_ini_file()`. Ad esempio:

```php
# Tested class
class Logger
{
	public function __construct(
		private string $logFile,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Assert::with() .[filter]
------------------------
Non si tratta di un'asserzione, ma di un aiuto per testare metodi privati e oggetti di proprietà.

```php
class Entity
{
	private $enabled;
	// ...
}

$ent = new Entity;

Assert::with($ent, function () {
	Assert::true($this->enabled); // accessibile privatamente $ent->enabled
});
```


Helpers::purge() .[filter]
--------------------------
Il metodo `purge()` crea la directory specificata e, se esiste già, ne cancella l'intero contenuto. È utile per la creazione di directory temporanee. Ad esempio in `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TempDir', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TempDir);
```


Environment::lock() .[filter]
-----------------------------
I test vengono eseguiti in parallelo. A volte è necessario non sovrapporre l'esecuzione dei test. In genere i test sui database devono preparare il contenuto del database e non devono essere disturbati durante l'esecuzione del test. In questi casi si usa `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

Il primo argomento è il nome di un blocco. Il secondo è il percorso della directory in cui salvare il blocco. Il test che acquisisce il blocco viene eseguito per primo. Gli altri test devono attendere il suo completamento.


Environment::bypassFinals() .[filter]
-------------------------------------
Le classi o i metodi contrassegnati da `final` sono difficili da testare. La chiamata di `Tester\Environment::bypassFinals()` in un inizio di test fa sì che le parole chiave `final` vengano rimosse durante il caricamento del codice.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	// ...
}
```


Environment::setup() .[filter]
------------------------------
- migliora la leggibilità del dump degli errori (colorazione inclusa), altrimenti viene stampato lo stack trace PHP predefinito
- consente di verificare che le asserzioni siano state chiamate nei test, altrimenti passano anche i test senza asserzioni (ad esempio dimenticate)
- avvia automaticamente il raccoglitore di copertura del codice quando viene usato `--coverage` (descritto più avanti)
- stampa lo stato OK o FAILURE alla fine dello script


Environment::setupFunctions() .[filter]{data-version:2.5}
---------------------------------------------------------
Crea le funzioni globali `test()`, `setUp()` e `tearDown()` in cui è possibile suddividere i test.

```php
test('test description', function () {
	Assert::same(123, foo());
	Assert::false(bar());
	// ...
});
```


Environment::VariableRunner .[filter]
-------------------------------------
Permette di sapere se il test è stato eseguito direttamente o tramite il Tester.

```php
if (getenv(Tester\Environment::VariableRunner)) {
	# run by Tester
} else {
	# another way
}
```


Environment::VariableThread .[filter]
-------------------------------------
Il Tester esegue i test in parallelo in un determinato numero di thread. Il numero di thread viene indicato in una variabile ambientale quando si è interessati:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::VariableThread);
```
