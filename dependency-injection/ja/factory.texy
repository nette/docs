生成されたファクトリー
***********

.[perex]
Nette DIは、インターフェイスを元にファクトリーコードを自動生成することができるので、コードを書く手間が省けます。

ファクトリーとは、オブジェクトを作成し、設定するクラスです。したがって、それらの依存関係も渡します。このようなファクトリーがどのようなものであるかは、[導入で |introduction#factory]紹介しました。

```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Nette DIはファクトリーコードを自動生成することができます。インターフェイスを作成するだけで、Nette DIが実装を生成してくれます。インターフェースは、`create` という名前のメソッドを1つだけ持ち、戻り値の型を宣言する必要があります。

```php
interface ArticleFactory
{
	function create(): Article;
}
```

つまり、ファクトリー`ArticleFactory` は、オブジェクトを作成するメソッド`create` を持っています`Article` 。クラス`Article` は、たとえば次のようなものになるでしょう。

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}
}
```

設定ファイルにファクトリーを追加します。

```neon
services:
	- ArticleFactory
```

Nette DIは、対応するファクトリーの実装を生成します。

このように、ファクトリーを利用するコードでは、インターフェースでオブジェクトを要求し、生成された実装をネットDIが利用します。

```php
class UserController
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function foo()
	{
		// let the factory create an object
		$article = $this->articleFactory->create();
	}
}
```


パラメタライズドファクトリー .[#toc-parameterized-factory]
============================================

ファクトリーメソッド`create` はパラメータを受け取ることができ、それをコンストラクタに渡します。例えば、記事の著者IDをクラス`Article` に追加してみましょう。

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
		private int $authorId,
	) {
	}
}
```

また、ファクトリーにパラメータを追加します。

```php
interface ArticleFactory
{
	function create(int $authorId): Article;
}
```

コンストラクタのパラメータとファクトリーのパラメータは同じ名前なので、ネットDIは自動的にこれらを渡します。


高度な定義 .[#toc-advanced-definition]
=================================

定義は、キー`implement` を使って複数行で記述することも可能です。

```neon
services:
	articleFactory:
		implement: ArticleFactory
```

この長い書き方では，通常のサービスと同様に，コンストラクタの引数を`arguments` で，設定を`setup` で追加することが可能です．

例：メソッド`create()` がパラメータ`$authorId` を受け付けない場合，コンストラクタ`Article` に渡される固定値を設定に指定することができる．

```neon
services:
	articleFactory:
		implement: ArticleFactory
		arguments:
			authorId: 123
```

あるいは逆に、`create()` がパラメータ`$authorId` を受け付けたが、それがコンストラクタの一部ではなく、メソッド`Article::setAuthorId()` から渡された場合、セクション`setup` でそれを参照することになる。

```neon
services:
	articleFactory:
		implement: ArticleFactory
		setup:
			- setAuthorId($authorId)
```


アクセッサー .[#toc-accessor]
=======================

Netteではファクトリーの他に、いわゆるアクセサーを生成することができます。アクセサーとは、DIコンテナから特定のサービスを返す`get()` メソッドを持つオブジェクトです。`get()` を複数回呼び出すと、常に同じインスタンスが返されます。

アクセッサは、依存関係にレイジーローディングをもたらします。例えば、エラーを特殊なデータベースに記録するクラスがあるとします。もしデータベース接続をコンストラクタの依存関係として渡した場合、 接続は常に作成する必要がありますが、エラーが発生したときにしか使われないので、 接続はほとんど使われないままです。
その代わりに、このクラスはアクセサを渡すことができ、その`get()` メソッドが呼ばれたときだけ、データベースオブジェクトが作成されます。

アクセサを作るには？インターフェイスを書くだけで、ネットDIが実装を生成してくれます。インターフェイスは、`get` というメソッドを1つだけ持ち、戻り値の型を宣言しなければなりません。

```php
interface PDOAccessor
{
	function get(): PDO;
}
```

アクセッサが返すサービスの定義と一緒に、設定ファイルにアクセッサを追加してください。

```neon
services:
	- PDOAccessor
	- PDO(%dsn%, %user%, %password%)
```

このアクセサは`PDO` というタイプのサービスを返します。 このようなサービスは設定に1つしかないので、アクセサはそれを返します。このタイプのサービスが複数設定されている場合、どのサービスを返すかをその名前を使って指定できます。たとえば、`- PDOAccessor(@db1)` 。


マルチファクトリー/アクセサー .[#toc-multifactory-accessor]
=============================================
今までのファクトリーとアクセッサは、1つのオブジェクトを作成するか返すだけでした。アクセッサと組み合わせたマルチファクトリーも作成することができます。このようなマルチファクトリークラスのインターフェイスは `create<name>()`と `get<name>()`と呼ばれる複数のメソッドで構成されます。

```php
interface MultiFactory
{
	function createArticle(): Article;
	function createFoo(): Model\Foo;
	function getDb(): PDO;
}
```

生成された複数のファクトリーとアクセッサを渡す代わりに、複雑なマルチファクトリーを1つだけ渡すことができます。

あるいは、複数のメソッドの代わりに、パラメータで`create()` と`get()` を使うこともできます。

```php
interface MultiFactoryAlt
{
	function create($name);
	function get($name): PDO;
}
```

この場合、`MultiFactory::createArticle()` は`MultiFactoryAlt::create('article')` と同じことをします。 しかし、この代替構文にはいくつかの欠点があります。どの`$name` の値がサポートされているかは不明ですし、複数の異なる`$name` の値を使用する場合、インターフェースで戻り値の型を指定することができません。


リストを使った定義 .[#toc-definition-with-a-list]
----------------------------------------
マルチファクトリーを構成で定義する方法は？マルチファクトリーから返される3つのサービスと、マルチファクトリーそのものを作成してみましょう。

```neon
services:
	article: Article
	- Model\Foo
	- PDO(%dsn%, %user%, %password%)
	- MultiFactory(
		article: @article  # createArticle()
		foo: @Model\Foo    # createFoo()
		db: @\PDO          # getDb()
	)
```


タグ付き定義 .[#toc-definition-with-tags]
-----------------------------------

マルチファクトリーを定義するもう一つの方法は、[タグを |services#Tags]使うことです。

```neon
services:
	- App\Router\RouterFactory::createRouter
	- App\Model\DatabaseAccessor(
		db1: @database.db1.explorer
	)
```
