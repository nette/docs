System plików
*************

.[perex]
[api:Nette\Utils\FileSystem] to klasa z przydatnymi funkcjami do pracy z systemem plików. Jedną z zalet w porównaniu do natywnych funkcji PHP jest to, że w przypadku błędu rzucają wyjątki.


Jeśli potrzebujesz wyszukiwać pliki na dysku, użyj [Findera|finder].

Instalacja:

```shell
composer require nette/utils
```

Poniższe przykłady zakładają utworzony alias:

```php
use Nette\Utils\FileSystem;
```


Manipulacja
===========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Kopiuje plik lub cały katalog. Domyślnie nadpisuje istniejące pliki i katalogi. Z parametrem `$overwrite` ustawionym na `false` rzuca wyjątek `Nette\InvalidStateException`, jeśli docelowy plik lub katalog `$target` istnieje. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Tworzy katalog, jeśli nie istnieje, włącznie z katalogami nadrzędnymi. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Usuwa plik lub cały katalog, jeśli istnieje. Jeśli katalog nie jest pusty, najpierw usuwa jego zawartość. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Ustawia uprawnienia pliku na `$fileMode` lub katalogu na `$dirMode`. Rekurencyjnie przechodzi i ustawia uprawnienia również dla całej zawartości katalogu.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Otwiera plik i zwraca zasób (resource). Parametr `$mode` działa tak samo jak w natywnej funkcji `fopen()`:https://www.php.net/manual/en/function.fopen.php. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Zwraca zawartość pliku `$file`. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Czyta zawartość pliku linia po linii. W przeciwieństwie do natywnej funkcji `file()`, nie wczytuje całego pliku do pamięci, ale czyta go na bieżąco, dzięki czemu można czytać pliki większe niż dostępna pamięć. `$stripNewLines` określa, czy usuwać znaki końca linii `\r` i `\n`.
W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Zmienia nazwę lub przenosi plik lub katalog `$origin`. Domyślnie nadpisuje istniejące pliki i katalogi. Z parametrem `$overwrite` ustawionym na `false` rzuca wyjątek `Nette\InvalidStateException`, jeśli docelowy plik lub katalog `$target` istnieje. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Zapisuje ciąg znaków `$content` do pliku `$file`. W przypadku błędu rzuca wyjątek `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Ścieżki
=======


isAbsolute(string $path): bool .[method]
----------------------------------------

Sprawdza, czy ścieżka `$path` jest absolutna.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Łączy wszystkie segmenty ścieżki i normalizuje wynik.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizuje `..` i `.` oraz separatory katalogów w ścieżce do systemowych.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Konwertuje ukośniki na `/` używane w systemach uniksowych.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Konwertuje ukośniki na znaki specyficzne dla aktualnej platformy, tj. `\` w Windows i `/` gdzie indziej.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Wyprowadza ostateczną ścieżkę ze ścieżki `$path` względem katalogu bazowego `$basePath`. Ścieżki absolutne (`/foo`, `C:/foo`) pozostawia bez zmian (tylko normalizuje ukośniki), ścieżki względne dołącza do ścieżki bazowej.

```php
// W systemie Windows ukośniki w wyniku byłyby odwrotne (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Dostęp statyczny vs niestatyczny
================================

Aby na przykład do celów testowania można było łatwo zastąpić klasę inną (mockiem), używaj jej niestatycznie:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
