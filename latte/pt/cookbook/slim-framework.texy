Usando Latte com Slim 4
***********************

.[perex]
Este artigo, cujo autor é "Daniel Opitz":https://odan.github.io/2022/04/06/slim4-latte.html, descreve o uso de Latte com o Slim Framework.

Primeiro, "instale o Slim Framework":https://odan.github.io/2019/11/05/slim4-tutorial.html e depois o Latte usando o Composer:

```shell
composer require latte/latte
```


Configuração
------------

No diretório raiz do projeto, crie um novo diretório `templates`. Todos os templates serão colocados nele posteriormente.

No arquivo `config/defaults.php`, adicione uma nova chave de configuração `template`:

```php
$settings['template'] = __DIR__ . '/../templates';
```

Latte compila os templates em código PHP nativo e os armazena em cache no disco. Eles são, portanto, tão rápidos quanto se fossem escritos em PHP nativo.

No arquivo `config/defaults.php`, adicione uma nova chave de configuração `template_temp`: Certifique-se de que o diretório `{project}/tmp/templates` exista e tenha permissões de leitura e escrita.

```php
$settings['template_temp'] = __DIR__ . '/../tmp/templates';
```

Latte regenera automaticamente o cache sempre que o template é alterado, o que pode ser desativado no ambiente de produção para economizar um pouco de desempenho:

```php
// em ambiente de produção, mude para false
$settings['template_auto_refresh'] = true;
```

Em seguida, adicione a definição do contêiner DI para a classe `Latte\Engine`.

```php
<?php

use Latte\Engine;
use Latte\Loaders\FileLoader;
use Psr\Container\ContainerInterface;
// ...

return [

	// ...

	Engine::class => function (ContainerInterface $container) {
		$latte = new Engine();
		$settings = $container->get('settings');
		$latte->setLoader(new FileLoader($settings['template']));
		$latte->setTempDirectory($settings['template_temp']);
		$latte->setAutoRefresh($settings['template_auto_refresh']);

		return $latte;
	},
];
```

A renderização do template Latte em si funcionaria tecnicamente, mas também precisamos garantir que funcione com o objeto de resposta PSR-7.

Para isso, criaremos uma classe especial `TemplateRenderer` que fará esse trabalho por nós.

Em seguida, crie o arquivo `src/Renderer/TemplateRenderer.php` e copie/cole este código:

```php
<?php

namespace App\Renderer;

use Latte\Engine;
use Psr\Http\Message\ResponseInterface;

final class TemplateRenderer
{
	public function __construct(
		private Engine $engine,
	) {
	}

	public function template(
		ResponseInterface $response,
		string $template,
		array $data = [],
	): ResponseInterface
	{
		$string = $this->engine->renderToString($template, $data);
		$response->getBody()->write($string);

		return $response;
	}
}
```


Uso
---

Em vez de usar diretamente o objeto Latte Engine, usaremos o objeto `TemplateRenderer` para renderizar o template em um objeto compatível com PSR-7.

Uma classe típica de manipulador de ação pode parecer assim: Ela renderiza um template chamado `home.latte`:

```php
<?php

namespace App\Action\Home;

use App\Renderer\TemplateRenderer;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

final class HomeAction
{
	public function __construct(
		private TemplateRenderer $renderer,
	) {
	}

	public function __invoke(
		ServerRequestInterface $request,
		ResponseInterface $response,
	): ResponseInterface
	{
		$viewData = [
			'items' => ['one', 'two', 'three'],
		];

		return $this->renderer->template($response, 'home.latte', $viewData);
	}
}
```

Para que isso funcione, crie o arquivo de template em `templates/home.latte` com este conteúdo:

```latte
<ul n:if=$items>
	{foreach $items as $item}
		<li id="item-{$iterator->counter}">{$item|capitalize}</li>
	{/foreach}
</ul>
```

Se tudo estiver configurado corretamente, a seguinte saída deve ser exibida:

```latte
One
Two
Three
```

{{priority: -1}}
{{leftbar: /@left-menu}}
