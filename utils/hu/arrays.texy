Munka tömbökkel
***************

.[perex]
Ez az oldal a [Nette\Utils\Arrays |#Arrays], [#ArrayHash] és [#ArrayList] osztályokkal foglalkozik, amelyek tömbökre vonatkoznak.


Telepítés:

```shell
composer require nette/utils
```


Arrays
======

Az [api:Nette\Utils\Arrays] egy statikus osztály, amely hasznos függvényeket tartalmaz tömbökkel való munkához. Ennek megfelelője iterátorokhoz a [Nette\Utils\Iterables |iterables].

A következő példák feltételezik a következő alias létrehozását:

```php
use Nette\Utils\Arrays;
```


associate(array $array, mixed $path): array|\stdClass .[method]
---------------------------------------------------------------

A függvény rugalmasan átalakítja az `$array` tömböt asszociatív tömbbé vagy objektumokká a megadott `$path` elérési út szerint. Az elérési út lehet string vagy tömb. A bemeneti tömb kulcsneveiből és olyan operátorokból áll, mint '[]', '->', '=', és '|'. `Nette\InvalidArgumentException` kivételt dob, ha az elérési út érvénytelen.

```php
// átalakítás asszociatív tömbbé egyszerű kulcs szerint
$arr = [
    ['name' => 'John', 'age' => 11],
    ['name' => 'Mary', 'age' => null],
    // ...
];
$result = Arrays::associate($arr, 'name');
// $result = ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// értékek hozzárendelése egyik kulcsból a másikhoz a = operátor használatával
$result = Arrays::associate($arr, 'name=age'); // vagy ['name', '=', 'age']
// $result = ['John' => 11, 'Mary' => null, ...]
```

```php
// objektum létrehozása a -> operátor használatával
$result = Arrays::associate($arr, '->name'); // vagy ['->', 'name']
// $result = (object) ['John' => ['name' => 'John', 'age' => 11], 'Mary' => ['name' => 'Mary', 'age' => null]]
```

```php
// kulcsok kombinálása a | operátor segítségével
$result = Arrays::associate($arr, 'name|age'); // vagy ['name', '|', 'age']
// $result: ['John' => ['name' => 'John', 'age' => 11], 'Paul' => ['name' => 'Paul', 'age' => 44]]
```

```php
// hozzáadás a tömbhöz a [] használatával
$result = Arrays::associate($arr, 'name[]'); // vagy ['name', '[]']
// $result: ['John' => [['name' => 'John', 'age' => 22], ['name' => 'John', 'age' => 11]]]
```


contains(array $array, $value): bool .[method]
----------------------------------------------

Teszteli a tömböt egy érték jelenlétére. Szigorú összehasonlítást (`===`) használ.

```php
Arrays::contains([1, 2, 3], 1);    // true
Arrays::contains(['1', false], 1); // false
```


every(array $array, callable $predicate): bool .[method]
--------------------------------------------------------

Teszteli, hogy a tömb minden eleme átmegy-e a `$predicate`-ben implementált teszten, amelynek szignatúrája `function ($value, $key, array $array): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = fn($value) => $value < 40;
$res = Arrays::every($array, $isBelowThreshold); // true
```

Lásd [#some()].


filter(array $array, callable $predicate): array .[method]{data-version:4.0.4}
------------------------------------------------------------------------------

Új tömböt ad vissza, amely minden olyan kulcs-érték párt tartalmaz, amely megfelel a megadott predikátumnak. A callback szignatúrája `function ($value, int|string $key, array $array): bool`.

```php
Arrays::filter(
	['a' => 1, 'b' => 2, 'c' => 3],
	fn($v) => $v < 3,
);
// ['a' => 1, 'b' => 2]
```


first(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
-------------------------------------------------------------------------------------

Visszaadja az első elemet (amely megfelel a predikátumnak, ha meg van adva). Ha ilyen elem nem létezik, visszaadja az `$else` hívás eredményét vagy null-t.
A `$predicate` paraméter szignatúrája `function ($value, int|string $key, array $array): bool`.

Nem változtatja meg a belső mutatót, ellentétben a `reset()`-tel. A `$predicate` és `$else` paraméterek a 4.0.4-es verzió óta léteznek.

```php
Arrays::first([1, 2, 3]);                   // 1
Arrays::first([1, 2, 3], fn($v) => $v > 2); // 3
Arrays::first([]);                          // null
Arrays::first([], else: fn() => false);     // false
```

Lásd [#last()].


firstKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
------------------------------------------------------------------------------------------------

Visszaadja az első elem kulcsát (amely megfelel a predikátumnak, ha meg van adva) vagy null-t, ha ilyen elem nem létezik. A `$predicate` predikátum szignatúrája `function ($value, int|string $key, array $array): bool`.

```php
Arrays::firstKey([1, 2, 3]);                   // 0
Arrays::firstKey([1, 2, 3], fn($v) => $v > 2); // 2
Arrays::firstKey(['a' => 1, 'b' => 2]);        // 'a'
Arrays::firstKey([]);                          // null
```

Lásd [#lastKey()].


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Egyesíti a többszintű tömböt laposra.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, ?mixed $default=null): mixed .[method]
-------------------------------------------------------------------------------

Visszaadja az `$array[$key]` elemet. Ha nem létezik, vagy `Nette\InvalidArgumentException` kivételt dob, vagy ha a harmadik `$default` paraméter meg van adva, azt adja vissza.

```php
// ha $array['foo'] nem létezik, kivételt dob
$value = Arrays::get($array, 'foo');

// ha $array['foo'] nem létezik, 'bar'-t ad vissza
$value = Arrays::get($array, 'foo', 'bar');
```

A `$key` kulcs lehet tömb is.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// 'red'-et ad vissza
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Referenciát szerez a megadott tömbelemre. Ha az elem nem létezik, null értékkel lesz létrehozva.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// referenciát ad vissza $array['foo']-ra
```

Ugyanúgy, mint a [get() |#get()] függvény, tud dolgozni többdimenziós tömbökkel.

```php
$value = & Arrays::getRef($array, ['color', 'favorite']);
// referenciát ad vissza $array['color']['favorite']-re
```


grep(array $array, string $pattern, bool $invert=false): array .[method]
------------------------------------------------------------------------

Csak azokat a tömbelemeket adja vissza, amelyek értéke megfelel a `$pattern` reguláris kifejezésnek. Ha az `$invert` `true`, ellenkezőleg, azokat az elemeket adja vissza, amelyek nem felelnek meg. A kifejezés fordítása vagy feldolgozása során fellépő hiba `Nette\RegexpException` kivételt dob.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// csak a számjegyekből álló tömbelemeket adja vissza
```


insertAfter(array &$array, string|int|null $key, array $inserted): void .[method]
---------------------------------------------------------------------------------

Beilleszti az `$inserted` tömb tartalmát az `$array` tömbbe közvetlenül a `$key` kulccsal rendelkező elem után. Ha a `$key` `null` (vagy nincs a tömbben), a végére illeszti be.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int|null $key, array $inserted): void .[method]
----------------------------------------------------------------------------------

Beilleszti az `$inserted` tömb tartalmát az `$array` tömbbe a `$key` kulccsal rendelkező elem elé. Ha a `$key` `null` (vagy nincs a tömbben), az elejére illeszti be.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


invoke(iterable $callbacks, ...$args): array .[method]
------------------------------------------------------

Meghívja az összes callbacket és visszaadja az eredmények tömbjét.

```php
$callbacks = [
	'+' => fn($a, $b) => $a + $b,
	'*' => fn($a, $b) => $a * $b,
];

$array = Arrays::invoke($callbacks, 5, 11);
// $array = ['+' => 16, '*' => 55];
```


invokeMethod(iterable $objects, string $method, ...$args): array .[method]
--------------------------------------------------------------------------

Meghívja a metódust a tömb minden objektumán és visszaadja az eredmények tömbjét.

```php
$objects = ['a' => $obj1, 'b' => $obj2];

$array = Arrays::invokeMethod($objects, 'foo', 1, 2);
// $array = ['a' => $obj1->foo(1, 2), 'b' => $obj2->foo(1, 2)];
```


isList(array $array): bool .[method]
------------------------------------

Ellenőrzi, hogy a tömb indexelt-e nullától kezdődő numerikus kulcsok növekvő sorrendje szerint, más néven lista.

```php
Arrays::isList(['a', 'b', 'c']); // true
Arrays::isList([4 => 1, 2, 3]); // false
Arrays::isList(['a' => 1, 'b' => 2]); // false
```


last(array $array, ?callable $predicate=null, ?callable $else=null): mixed .[method]
------------------------------------------------------------------------------------

Visszaadja az utolsó elemet (amely megfelel a predikátumnak, ha meg van adva). Ha ilyen elem nem létezik, visszaadja az `$else` hívás eredményét vagy null-t.
A `$predicate` paraméter szignatúrája `function ($value, int|string $key, array $array): bool`.

Nem változtatja meg a belső mutatót, ellentétben az `end()`-del. A `$predicate` és `$else` paraméterek a 4.0.4-es verzió óta léteznek.

```php
Arrays::last([1, 2, 3]);                   // 3
Arrays::last([1, 2, 3], fn($v) => $v < 3); // 2
Arrays::last([]);                          // null
Arrays::last([], else: fn() => false);     // false
```

Lásd [#first()].


lastKey(array $array, ?callable $predicate=null): int|string|null .[method]{data-version:4.0.4}
-----------------------------------------------------------------------------------------------

Visszaadja az utolsó elem kulcsát (amely megfelel a predikátumnak, ha meg van adva) vagy null-t, ha ilyen elem nem létezik. A `$predicate` predikátum szignatúrája `function ($value, int|string $key, array $array): bool`.

```php
Arrays::lastKey([1, 2, 3]);                    // 2
Arrays::lastKey([1, 2, 3], fn($v) => $v < 3);  // 1
Arrays::lastKey(['a' => 1, 'b' => 2]);         // 'b'
Arrays::lastKey([]);                           // null
```

Lásd [#firstKey()].


map(array $array, callable $transformer): array .[method]
---------------------------------------------------------

Meghívja a `$transformer`-t a tömb minden elemén és visszaadja a visszaadott értékek tömbjét. A callback szignatúrája `function ($value, $key, array $array): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, fn($value) => $value . $value);
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mapWithKeys(array $array, callable $transformer): array .[method]
-----------------------------------------------------------------

Új tömböt hoz létre az eredeti tömb értékeinek és kulcsainak átalakításával. A `$transformer` függvény szignatúrája `function ($value, $key, array $array): ?array{$newKey, $newValue}`. Ha a `$transformer` `null`-t ad vissza, az elem átugrásra kerül. A megőrzött elemekhez a visszaadott tömb első eleme új kulcsként, a második elem pedig új értékként lesz használva.

```php
$array = ['a' => 1, 'b' => 2, 'c' => 3];
$result = Arrays::mapWithKeys($array, fn($v, $k) => $v > 1 ? [$v * 2, strtoupper($k)] : null);
// [4 => 'B']
```

Ez a metódus hasznos olyan helyzetekben, amikor meg kell változtatni a tömb struktúráját (kulcsokat és értékeket egyszerre), vagy szűrni az elemeket átalakítás közben (null visszaadásával a nem kívánt elemekhez).


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Rekurzívan egyesít két tömböt. Például alkalmas fa struktúrák egyesítésére. Az egyesítéskor ugyanazokat a szabályokat követi, mint a tömbre alkalmazott `+` operátor, azaz az első tömbhöz hozzáadja a második tömbből származó kulcs/érték párokat, és kulcsütközés esetén meghagyja az értéket az első tömbből.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

A második tömb értékei mindig az első végére kerülnek. Kissé zavarónak tűnhet a `10`-es érték eltűnése a második tömbből. Tudatosítani kell, hogy ehhez az értékhez és ugyanúgy az `5`-ös értékhez az első tömbben ugyanaz a `0` numerikus kulcs van hozzárendelve, ezért az eredménytömbben csak az első tömb eleme van.


normalize(array $array, ?string $filling=null): array .[method]
---------------------------------------------------------------

Normalizálja a tömböt asszociatív tömbre. A numerikus kulcsokat az értékeikkel helyettesíti, az új érték `$filling` lesz.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$array, string|int $key, ?mixed $default=null): mixed .[method]
---------------------------------------------------------------------------

Visszaadja és eltávolítja az elem értékét a tömbből. Ha nem létezik, kivételt dob, vagy visszaadja a `$default` értéket, ha meg van adva.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// Nette\InvalidArgumentException kivételt dob
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): bool .[method]
--------------------------------------------------------------------------------

Átnevezi a kulcsot a tömbben. `true`-t ad vissza, ha a kulcsot megtalálta a tömbben.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


getKeyOffset(array $array, string|int $key): ?int .[method]
-----------------------------------------------------------

Visszaadja a megadott kulcs pozícióját a tömbben. A pozíció 0-tól számozódik. Abban az esetben, ha a kulcs nem található, a függvény `null`-t ad vissza.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::getKeyOffset($array, 'first'); // 0-t ad vissza
$position = Arrays::getKeyOffset($array, 'second'); // 1-et ad vissza
$position = Arrays::getKeyOffset($array, 'not-exists'); // null-t ad vissza
```


some(array $array, callable $predicate): bool .[method]
-------------------------------------------------------

Teszteli, hogy a tömb legalább egy eleme átmegy-e a `$predicate`-ben implementált teszten, amelynek szignatúrája `function ($value, $key, array $array): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = fn($value) => $value % 2 === 0;
$res = Arrays::some($array, $isEven); // true
```

Lásd [#every()].


toKey(mixed $key): string|int .[method]
---------------------------------------

Átalakítja az értéket tömbkulccsá, ami vagy egész szám, vagy string.

```php
Arrays::toKey('1');  // 1
Arrays::toKey('01'); // '01'
```


toObject(iterable $array, object $object): object .[method]
-----------------------------------------------------------

Átmásolja az `$array` tömb elemeit az `$object` objektumba, amit azután visszaad.

```php
$obj = new stdClass;
$array = ['foo' => 1, 'bar' => 2];
Arrays::toObject($array, $obj); // beállítja $obj->foo = 1; $obj->bar = 2;
```


wrap(array $array, string $prefix='', string $suffix=''): array .[method]
-------------------------------------------------------------------------

A tömb minden elemét stringgé típuskonvertálja, és `$prefix` előtaggal és `$suffix` utótaggal burkolja.

```php
$array = Arrays::wrap(['a' => 'red', 'b' => 'green'], '<<', '>>');
// $array = ['a' => '<<red>>', 'b' => '<<green>>'];
```


ArrayHash
=========

Az [api:Nette\Utils\ArrayHash] objektum a generikus stdClass osztály leszármazottja, és kibővíti azzal a képességgel, hogy tömbként kezeljük, azaz például szögletes zárójeleken keresztül férjünk hozzá a tagokhoz:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // egyidejűleg működik az objektum írásmód is
$hash->foo; // 123
```

Használható a `count($hash)` függvény az elemszám megállapítására.

Az objektumon lehet iterálni ugyanúgy, mint tömb esetén, akár referenciával is:

```php
foreach ($hash as $key => $value) {
	// ...
}

foreach ($hash as $key => &$value) {
	$value = 'new value';
}
```

Létező tömböt átalakíthatunk `ArrayHash`-sá a `from()` metódussal:

```php
$array = ['foo' => 123, 'bar' => 456];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Az átalakítás rekurzív:

```php
$array = ['foo' => 123, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // ArrayHash objektum
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Ezt meg lehet akadályozni a második paraméterrel:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
$hash->inner; // tömb
```

Visszaalakítás tömbbé:

```php
$array = (array) $hash;
```


ArrayList
=========

Az [api:Nette\Utils\ArrayList] lineáris tömböt képvisel, ahol az indexek csak 0-tól növekvő sorrendben lévő egész számok.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Létező tömböt átalakíthatunk `ArrayList`-té a `from()` metódussal:

```php
$array = ['foo', 'bar'];
$list = Nette\Utils\ArrayList::from($array);
```

Használható a `count($list)` függvény az elemszám megállapítására.

Az objektumon lehet iterálni ugyanúgy, mint tömb esetén, akár referenciával is:

```php
foreach ($list as $key => $value) {
	// ...
}

foreach ($list as $key => &$value) {
	$value = 'new value';
}
```

Az engedélyezett értékeken kívüli kulcsokhoz való hozzáférés `Nette\OutOfRangeException` kivételt dob:

```php
echo $list[-1]; // Nette\OutOfRangeException kivételt dob
unset($list[30]); // Nette\OutOfRangeException kivételt dob
```

A kulcs eltávolítása az elemek újraszámozását okozza:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```

Új elemet lehet hozzáadni az elejére a `prepend()` metódussal:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```
