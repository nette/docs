Повторно използване на формуляри на различни места
**************************************************

.[perex]
Как да използваме един и същ формуляр на няколко места и да не дублираме кода? Това е много лесно да се направи в Nette и можете да избирате от няколко начина.


Фабрика за формуляри .[#toc-form-factory]
=========================================

Нека създадем клас, който може да създава формуляр. Такъв клас се нарича фабрика. Когато искаме да използваме формуляра (например в презентатор), задаваме заявка към [фабриката като зависимост |dependency-injection:passing-dependencies].

Фабричната част е кодът, който предава данните за по-нататъшна обработка, когато формулярът е успешно изпратен. Обикновено към слоя на модела. Освен това проверява дали всичко е било успешно и [предава |forms:validation#Processing-errors] всички грешки [обратно към |forms:validation#Processing-errors] формата. Моделът в следващия пример е представен от класа `Facade`:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// добавляем елементи към формата

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// обработка на формата
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

Разбира се, фабриката може да бъде параметрична, т.е. може да приема параметри, които да влияят на външния вид на създаваната форма.

Сега ще демонстрираме предаването на фабриката на водещия. Първо го записваме в конфигурационен файл:

```neon
services:
	- EditFormFactory
```

И след това го изискваме в презентатора. Последната стъпка при обработката на изпратения формуляр е пренасочването към следващата страница:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Тъй като пренасочването се обработва от обработчика на презентатора, компонентът може да се използва на няколко места и да се пренасочва към различно място на всяко място.


Компонент с форма .[#toc-component-with-form]
=============================================

Друг начин е да създадете нов [компонент |application:components], който съдържа формуляр. Това ни дава възможност да визуализираме формуляра по определен начин, ако компонентът включва шаблон.
Или можем да използваме сигнали, за да комуникираме с AJAX и да зареждаме информация във формуляра, например за автоматично попълване и т.н.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// добавляем елементи към формата

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// обработка на формата
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// вызов события
		$this->onSave($this, $values);
	}
}
```

След това ще създадем фабрика, която ще произвежда този компонент. Просто [напишете неговия интерфейс |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

И го добавете в конфигурационния файл:

```neon
services:
	- EditControlFactory
```

Сега можем да заявим фабриката и да я използваме в презентатора:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// или перенаправить на результат редактирования, например:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Най-добри практики}}
