Home Page
**********

.[perex]
Let’s create the first page displaying your recent posts.


Before we start, we should know at least some basics about Model-View-Presenter (similar to MVC((Model-View-Controller))) design pattern:

- **Model** - data manipulation layer. It is completely separated from the rest of the application. It only communicates with presenters.

- **View** - a front-end definition layer. It renders requested data to the user using templates.

- **Presenter** (or Controller) - a connection layer. Presenter connects Model and View. Handles requests, asks Model for data and then delegates them to the current View.


For a very simple application like our blog, the Model layer will actually consists only of the database itself - we don’t need any PHP code for it. We need to create only Presenter and View. In Nette, each Presenter has its own Views, so we will continue with both simultaneously.


Creating the Database with Adminer
==================================

Let’s prepare the database which will store our blog posts. We can start very simple - just with a single table for posts.

To create the database we can use "Adminer":[http://adminer.org/], which is preinstalled with sandbox. You can find it at the following URL: `http://localhost/nette-blog/www/adminer/`. If you are already using any other database tool and you’re comfortable with it, feel free to use it.


Let’s open Adminer and create new database called `quickstart`.

Create a new table named `posts` and add these columns:
- `id` int, check autoincrement (AI)
- `title` varchar, length 255
- `content` text
- `created_at` timestamp

It should look like this:

[* adminer-posts.png *]

.[tip]
It’s really important to use the InnoDB table storage, you will see why later, right now, just choose it and submit. You can hit Save now.

Try adding some sample blog posts first, before we add the capability to add new posts directly from our application. Actually, we don’t need to program adding / editing / removing posts to have the blog working. You can easily add new posts in Adminer and have the blog working.



Connecting to the Database
==========================

Now, when the database is created and some posts are pre-filled, it’s a good time to show them on our new shiny page.

First, we need to tell our application which database to use. All the configuration, among with the database configuration, is saved in `/app/config/config.neon`. Set the connection string DSN((Data Source Name)) and your credentials, it should look like this:

/---neon
	nette:
		database:
			dsn: 'mysql:host=localhost;dbname=quickstart'
			user: root
			password:
\---

.[note]
Be careful with indents while editing this file. [NEON |http://ne-on.org] format accepts both spaces and tabs but not both together! Configuration file in the Sandbox uses tabs.



Injecting Database Connection
=============================

The presenter, which will be listing the articles needs a database connection, to get that, you have to write an constructor:

/--php
class HomepagePresenter extends BasePresenter
{

	/** @var \Nette\Database\Connection */
	private $database;

	public function __construct(\Nette\Database\Connection $database)
	{
		$this->database = $database;
	}

}
\--



Loading Posts from Database
===========================

Now let’s fetch the posts from the database and pass them to template, which will then render the HTML code. This is what the so called *render* method is for

/--php
	public function renderDefault()
	{
		$this->template->posts = $this->database->table('posts')
			->order('created_at DESC')
			->limit(5);
	}
\--

The presenter has now one *render method* `renderDefault()` that passes data to a view called `default`. Presenter templates can be found in folder `app/templates/{PresenterName}`. In this case, the templates will be placed in `app/templates/Homepage/default.latte`. In the template, we now have a variable `$posts` available.


Template
========

There is a generic template for the whole page (called *layout*, with header, stylesheets, footer, ...) and then concrete templates for each view (e.g. for displaying the list of blog posts), which can override some of layout template parts.

By default, the layout template is located in `app/templates/@layout.latte`, which contains

/--html
{include #content}
\--

This line tries to include a named block called `#content`, which is defined in concrete template.

You can try to refresh your browser now, even when you haven’t yet created the template. Nette will display a nice error message:

/--
Page not found. Missing template '…/app/templates/Homepage/default.latte'.
\--

Now create the file and insert the minimum required code:

/--html
{block #content}
\--

This means that we’re defining the *content* block, which will be inserted into the whole, layout page. If you refresh the browser, you’ll see an empty page (with only HTML header and footer).

Let’s display the blog posts - add the following code to the template, after the block definition:

/--html
<h1 n:block=title>My awesome blog</h1>

{foreach $posts as $post}
<div class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>
	<h2><a href="{link detail, $post->id}">{$post->title}</a></h2>
	<div class="post">{!$post->content}</div>
</div>
{/foreach}
\--

If you check your browser, you’ll see the list of your blog posts. Not in a very fancy and colorful style, so feel free to add some shiny CSS.

The `{foreach}` macro iterates over all posts passed to the template and displays a piece of HTML code for each post. Just like a PHP code would.

The `{link}` macro generates a URL which leads to the `detail` action (which we are about to create) of current presenter. It also passes *id* of the post as an argument. We’ll get to it in a minute.

The `|date:` thing is called a helper. Helpers are for special formatting of the variables. This one transforms the timestamp (e.g. `2013-04-12`) to nice and readable date format (`April 12, 2013`). You can find more existing "helpers":http://doc.nette.org/en/default-helpers in the documentation or your can add your own one whenever you need it.

One more thing. We can make the code little bit shorter and thus simpler. We can replace *Latte macros* with *n: attributes* like this

/--html
<div n:foreach="$posts as $post" class="post">
	<div class="date">{$post->created_at|date:'F j, Y'}</div>
	<h2><a n:href="detail, $post->id">{$post->title}</a></h2>
	<div class="post">{!$post->content}</div>
</div>
\--

The `n:foreach`, simply wraps the *div* with an *foreach* block (it does exactly the same as the previous block of code).

The `n:href` attribute, is alias for the `{link}` macro.


Summary
=======

We have a very simple MySQL database with some blog posts already created. The application connects to it and displays the posts in a simple list.
