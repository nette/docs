Sunum Yapanlar
**************
<div class=perex>


Nette sunumların ve şablonların nasıl yazılacağını öğreneceğiz. Okuduktan sonra öğreneceksiniz:

- sunum yapan ki̇şi̇ nasil çalişir
- kalıcı parametreler nedir
- şablon nasıl oluşturulur

</div>

Bir sunucunun, ana sayfa; e-mağazadaki ürün; oturum açma formu; site haritası beslemesi vb. gibi bir web uygulamasının belirli bir sayfasını temsil eden bir sınıf [olduğunuzaten biliyoruz |how-it-works#nette-application]. Uygulama bir ila binlerce sunucuya sahip olabilir. Diğer çerçevelerde, kontrolörler olarak da bilinirler.

Genellikle, sunucu terimi, web arayüzleri için uygun olan ve bu bölümün geri kalanında tartışacağımız [api:Nette\Application\UI\Presenter] sınıfının bir torununu ifade eder. Genel anlamda, bir sunucu [api:Nette\Application\IPresenter] arayüzünü uygulayan herhangi bir nesnedir.


Sunucunun Yaşam Döngüsü .[#toc-life-cycle-of-presenter]
=======================================================

Sunucunun görevi, isteği işlemek ve bir yanıt (bir HTML sayfası, görüntü, yönlendirme vb. olabilir) döndürmektir.

Yani başlangıçta bir istek var. Bu doğrudan bir HTTP isteği değil, HTTP isteğinin bir yönlendirici kullanılarak dönüştürüldüğü bir [api:Nette\Application\Request] nesnesidir. Genellikle bu nesneyle temas etmeyiz, çünkü sunucu isteğin işlenmesini akıllıca özel yöntemlere devreder, şimdi bunları göreceğiz.

[* lifecycle.svg *] *** *Sunucunun yaşam döngüsü* .<>

Şekilde, eğer varsa, yukarıdan aşağıya doğru sırayla çağrılan yöntemlerin bir listesi gösterilmektedir. Hiçbirinin var olmasına gerek yoktur, tek bir yöntem olmadan tamamen boş bir sunucuya sahip olabilir ve üzerinde basit bir statik web oluşturabiliriz.


`__construct()`
---------------

Yapıcı tam olarak sunucunun yaşam döngüsüne ait değildir, çünkü nesnenin yaratıldığı anda çağrılır. Ancak öneminden dolayı bundan bahsediyoruz. Yapıcı ( [inject yöntemiyle |best-practices:inject-method-attribute] birlikte) bağımlılıkları aktarmak için kullanılır.

Sunucu, uygulamanın iş mantığıyla ilgilenmemeli, veritabanına yazmamalı ve veritabanından okumamalı, hesaplamalar yapmamalı vb. Bu, model olarak adlandırdığımız bir katmandaki sınıfların görevidir. Örneğin `ArticleRepository` sınıfı makalelerin yüklenmesinden ve kaydedilmesinden sorumlu olabilir. Sunucunun bunu kullanabilmesi için [bağımlılık enjeksiyonu kullanılarak geçirilir |dependency-injection:passing-dependencies]:


```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private ArticleRepository $articles,
	) {
	}
}
```


`startup()`
-----------

İstek alındıktan hemen sonra `startup ()` yöntemi çağrılır. Bunu özellikleri başlatmak, kullanıcı ayrıcalıklarını kontrol etmek vb. için kullanabilirsiniz. Her zaman `parent::startup()` atasının çağrılması gerekir.


`action<Action>(args...)` .{toc: action<Action>()}
--------------------------------------------------

Yönteme benzer şekilde `render<View>()`. O sırada `render<View>()` 'de daha sonra işlenecek olan belirli bir şablon için veri hazırlamak üzere tasarlanmıştır. `action<Action>()` Bir istek, şablon oluşturmayı takip etmeden işlenir. Örneğin, veriler işlenir, bir kullanıcı oturum açar veya kapatır vb. ve ardından [başka bir yere yönlendirir |#Redirection].

Bu önemlidir `action<Action>()` daha önce çağrılır `render<View>()`Bu nedenle, içinde muhtemelen yaşam döngüsünün bir sonraki seyrini değiştirebiliriz, yani oluşturulacak şablonu ve ayrıca yöntemi değiştirebiliriz `render<View>()` `setView('otherView')` kullanılarak çağrılacaktır.

İstekten gelen parametreler yönteme aktarılır. Parametreler için tür belirtmek mümkündür ve önerilir, örneğin `actionShow(int $id, string $slug = null)` - `id` parametresi eksikse veya tamsayı değilse, sunum yapan kişi [404 hatası |#Error 404 etc.] döndürür ve işlemi sonlandırır.


`handle<Signal>(args...)` .{toc: handle<Signal>()}
--------------------------------------------------

Bu yöntem, [Bileşenler |components#Signal] bölümünde tartışacağımız sözde sinyalleri işler. Esas olarak bileşenler ve AJAX isteklerinin işlenmesi için tasarlanmıştır.

Parametreler, aşağıdaki örnekte olduğu gibi yönteme geçirilir `action<Action>()`tip kontrolü de dahil olmak üzere.


`beforeRender()`
----------------

`beforeRender` yöntemi, adından da anlaşılacağı gibi, her yöntemden önce çağrılır `render<View>()`. Ortak şablon yapılandırması, düzen için değişkenlerin geçirilmesi vb. için kullanılır.


`render<View>(args...)` .{toc: render<View>()}
----------------------------------------------

Şablonu sonraki işleme için hazırladığımız, ona veri aktardığımız vb. yer.

Parametreler, aşağıdaki örnekte olduğu gibi yönteme geçirilir `action<Action>()`tip kontrolü de dahil olmak üzere.

```php
public function renderShow(int $id): void
{
	// modelden veri alıyoruz ve bunu şablona aktarıyoruz
	$this->template->article = $this->articles->getById($id);
}
```


`afterRender()`
---------------

`afterRender` yöntemi, adından da anlaşılacağı gibi, her `render<View>()` yöntem. Oldukça nadiren kullanılır.


`shutdown()`
------------

Sunucunun yaşam döngüsünün sonunda çağrılır.


**Devam etmeden önce iyi bir tavsiye**. Gördüğünüz gibi, sunum yapan kişi daha fazla eylemi/görüntüyü işleyebilir, yani daha fazla metoda sahip olabilir `render<View>()`. Ancak sunum yapanların bir veya mümkün olduğunca az eylemle tasarlanmasını öneriyoruz.


Yanıt Gönderme .[#toc-sending-a-response]
=========================================

Sunucunun yanıtı genellikle [HTML sayfasıyla şablonu işlemektir |templates], ancak bir dosya, JSON göndermek veya hatta başka bir sayfaya yönlendirmek de olabilir.

Yaşam döngüsü sırasında herhangi bir zamanda, bir yanıt göndermek ve aynı zamanda sunum yapan kişiden çıkmak için aşağıdaki yöntemlerden herhangi birini kullanabilirsiniz:

- `redirect()`, `redirectPermanent()`, `redirectUrl()` ve `forward()` [yönlendirmeleri |#Redirection]
- `error()` [hata nedeniyle sunucuyu bıraktı|#Error 404 etc.]
- `sendJson($data)` sunumcudan çıkar ve [verileri |#Sending JSON] JSON biçiminde [gönderir |#Sending JSON]
- `sendTemplate()` sunumcudan çıkar ve [şablonu hemen oluşturur|templates]
- `sendResponse($response)` sunucuyu bıraktı ve [kendi yanıtını gönderdi|#Responses]
- `terminate()` cevap vermeden sunuculuğu bıraktı

Bu yöntemlerden herhangi birini çağırmazsanız, sunum yapan kişi otomatik olarak şablonu oluşturmaya devam edecektir. Neden mi? Çünkü vakaların %99'unda bir şablon çizmek isteriz, bu nedenle sunum yapan kişi bu davranışı varsayılan olarak alır ve işimizi kolaylaştırmak ister.


Bağlantı Oluşturma .[#toc-creating-links]
=========================================

Presenter, diğer presenter'lara URL bağlantıları oluşturmak için kullanılan `link()` yöntemine sahiptir. İlk parametre hedef sunumcu ve eylemdir, ardından dizi olarak geçirilebilen argümanlar gelir:

```php
$url = $this->link('Product:show', $id);

$url = $this->link('Product:show', [$id, 'lang' => 'en']);
```

Şablonda diğer sunumculara ve eylemlere aşağıdaki gibi bağlantılar oluşturuyoruz:

```latte
<a n:href="Product:show $id">product detail</a>
```

Gerçek URL yerine tanıdık `Presenter:action` çiftini yazmanız ve parametreleri eklemeniz yeterlidir. İşin püf noktası, bu özelliğin Latte tarafından işleneceğini ve gerçek bir URL oluşturacağını söyleyen `n:href` adresidir. Nette'de URL'ler hakkında hiç düşünmek zorunda değilsiniz, sadece sunucular ve eylemler hakkında.

Daha fazla bilgi için [Bağlantı Oluşturma |Creating Links] bölümüne bakın.


Yeniden Yönlendirme .[#toc-redirection]
=======================================

`redirect()` ve `forward()` yöntemleri, [link() |#Creating Links] yöntemine çok benzer bir sözdizimine sahip olan başka bir sunucuya atlamak için kullanılır.

`forward()` HTTP yeniden yönlendirmesi olmadan hemen yeni sunucuya geçer:

```php
$this->forward('Product:show');
```

HTTP kodu 302 veya 303 ile geçici yeniden yönlendirme örneği:

```php
$this->redirect('Product:show', $id);
```

HTTP kodu 301 ile kalıcı yeniden yönlendirme elde etmek için kullanın:

```php
$this->redirectPermanent('Product:show', $id);
```

`redirectUrl()` yöntemi ile uygulama dışında başka bir URL'ye yönlendirme yapabilirsiniz:

```php
$this->redirectUrl('https://nette.org');
```

Yeniden yönlendirme, `Nette\Application\AbortException` sessiz sonlandırma istisnasını fırlatarak sunum yapan kişinin yaşam döngüsünü derhal sonlandırır.

Yönlendirmeden önce, yönlendirmeden sonra şablonda görüntülenecek bir [flash mesaj |#Flash Messages], mesajlar göndermek mümkündür.


Flaş Mesajlar .[#toc-flash-messages]
====================================

Bunlar genellikle bir işlemin sonucu hakkında bilgi veren mesajlardır. Flash mesajların önemli bir özelliği, yeniden yönlendirmeden sonra bile şablonda mevcut olmalarıdır. Görüntülendikten sonra bile 30 saniye daha canlı kalırlar - örneğin, kullanıcının istemeden sayfayı yenilemesi durumunda - mesaj kaybolmaz.

Sadece [flashMessage() |api:Nette\Application\UI\Control::flashMessage()] yöntemini çağırın ve presenter mesajı şablona aktarmakla ilgilenecektir. İlk bağımsız değişken mesajın metnidir ve isteğe bağlı ikinci bağımsız değişken mesajın türüdür (hata, uyarı, bilgi vb.). `flashMessage()` yöntemi, daha fazla bilgi eklememize izin vermek için bir flash mesajı örneği döndürür.

```php
$this->flashMessage('Item was removed.');
$this->redirect(/* ... */);
```

Şablonda, bu mesajlar `$flashes` değişkeninde `message` (mesaj metni), `type` (mesaj türü) özelliklerini içeren ve daha önce bahsedilen kullanıcı bilgilerini içerebilen `stdClass` nesneleri olarak mevcuttur. Bunları aşağıdaki gibi çiziyoruz:

```latte
{foreach $flashes as $flash}
	<div class="flash {$flash->type}">{$flash->message}</div>
{/foreach}
```


Hata 404 vb. .[#toc-error-404-etc]
==================================

Örneğin görüntülemek istediğimiz makale veritabanında bulunmadığı için isteği yerine getiremediğimizde, HTTP hatası 404'ü temsil eden `error(string $message = null, int $httpCode = 404)` yöntemini kullanarak 404 hatasını atacağız:

```php
public function renderShow(int $id): void
{
	$article = $this->articles->getById($id);
	if (!$article) {
		$this->error();
	}
	// ...
}
```

HTTP hata kodu ikinci parametre olarak geçirilebilir, varsayılan 404'tür. Yöntem, `Nette\Application\BadRequestException` istisnasını fırlatarak çalışır ve ardından `Application` kontrolü hata sunucusuna geçirir. Bu, görevi hata hakkında bilgi veren bir sayfa görüntülemek olan bir sunumcudur.
Hata sunucusu [uygulama yapılandırmasında |configuration] ayarlanır.


JSON Gönderme .[#toc-sending-json]
==================================

JSON biçiminde veri gönderen ve sunum yapan kişiden çıkan eylem yöntemi örneği:

```php
public function actionData(): void
{
	$data = ['hello' => 'nette'];
	$this->sendJson($data);
}
```


Kalıcı Parametreler .[#toc-persistent-parameters]
=================================================

Kalıcı parametreler bağlantılarda **otomatik olarak** aktarılır. Bu, şablondaki her `link()` veya `n:href` adresinde bunları açıkça belirtmek zorunda olmadığımız, ancak yine de aktarılacakları anlamına gelir.

Uygulamanızın birden fazla dil sürümü varsa, geçerli dil her zaman URL'nin bir parçası olması gereken bir parametredir. Ve her bağlantıda bundan bahsetmek inanılmaz derecede yorucu olacaktır. Nette ile buna gerek yok. Sadece `lang` parametresini bu şekilde kalıcı olarak işaretliyoruz:

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	/** @persistent */
	public $lang;
}
```

`lang` parametresinin geçerli değeri `'en'` ise, şablonda `link()` veya `n:href` ile oluşturulan URL `lang=en` içerecektir. Harika!

Ancak, `lang` parametresini de ekleyebilir ve bununla değerini değiştirebiliriz:

```latte
<a n:href="Product:show $id, lang: en">detail in English</a>
```

Ya da tersine, null olarak ayarlanarak kaldırılabilir:

```latte
<a n:href="Product:show $id, lang: null">click here</a>
```

Kalıcı değişken public olarak bildirilmelidir. Ayrıca varsayılan bir değer de belirtebiliriz. Parametre varsayılan değerle aynı değere sahipse, URL'ye dahil edilmeyecektir.

Kalıcılık, sunum yapan sınıfların hiyerarşisini yansıtır, böylece belirli bir sunum yapan sınıfta veya özellikte tanımlanan parametre, ondan miras alan veya aynı özelliği kullanan her sunum yapan sınıfa otomatik olarak aktarılır.

PHP 8'de, kalıcı değiştirgeleri işaretlemek için öznitelikleri de kullanabilirsiniz:

```php
use Nette\Application\Attributes\Persistent;

class ProductPresenter extends Nette\Application\UI\Presenter
{
	#[Persistent]
	public $lang;
}
```


İnteraktif Bileşenler .[#toc-interactive-components]
====================================================

Sunucular yerleşik bir bileşen sistemine sahiptir. Bileşenler, sunucuların içine yerleştirdiğimiz ayrı yeniden kullanılabilir birimlerdir. Bunlar [formlar |forms:in-presenter], datagridler, menüler, aslında tekrar tekrar kullanılması mantıklı olan her şey olabilir.

Bileşenler sunum aracına nasıl yerleştirilir ve daha sonra nasıl kullanılır? Bu konu [Bileşenler |Components] bölümünde açıklanmaktadır. Hatta bunların Hollywood ile ne ilgisi olduğunu bile öğreneceksiniz.

Bazı Bileşenleri Nereden Alabilirim? [Componette |https://componette.org] sayfasında, Nette Framework topluluğu tarafından yapılan ve paylaşılan bazı açık kaynaklı bileşenleri ve Nette için diğer eklentileri bulabilirsiniz.


Daha Derine Gitmek .[#toc-going-deeper]
=======================================

.[tip]
Bu bölümde şimdiye kadar gösterdiklerimiz muhtemelen yeterli olacaktır. Aşağıdaki satırlar, sunum yapanlarla derinlemesine ilgilenen ve her şeyi bilmek isteyenlere yöneliktir.


Gereksinim ve Parametreler .[#toc-requirement-and-parameters]
-------------------------------------------------------------

Sunum yapan kişi tarafından ele alınan istek [api:Nette\Application\Request] nesnesidir ve sunum yapan kişinin `getRequest()` yöntemi tarafından döndürülür. Bir dizi parametre içerir ve bunların her biri ya bazı bileşenlere ya da doğrudan sunum yapan kişiye aittir (aslında bu da özel bir bileşen olsa da bir bileşendir). Bu nedenle Nette parametreleri yeniden dağıtır ve [Bileşenler |Components] bölümünde daha ayrıntılı olarak açıklanan `loadState(array $params)` yöntemini çağırarak tek tek bileşenler (ve sunum yapan kişi) arasında geçiş yapar. Parametreler `getParameters(): array` yöntemi ile, `getParameter($name)` kullanılarak ayrı ayrı elde edilebilir. Parametre değerleri dizeler veya dizelerin dizileridir, temel olarak doğrudan bir URL'den elde edilen ham verilerdir.


Talebi Kaydetme ve Geri Yükleme .[#toc-save-and-restore-the-request]
--------------------------------------------------------------------

Geçerli isteği bir oturuma kaydedebilir veya oturumdan geri yükleyebilir ve sunucunun tekrar yürütmesine izin verebilirsiniz. Bu, örneğin bir kullanıcı bir formu doldurduğunda ve oturum açma süresi dolduğunda kullanışlıdır. Veri kaybetmemek için, oturum açma sayfasına yönlendirmeden önce, kısa bir dize biçiminde bir tanımlayıcı döndüren ve oturum açma sunucusuna parametre olarak ileten `$reqId = $this->storeRequest()` adresini kullanarak geçerli isteği oturuma kaydederiz.

Oturum açtıktan sonra, isteği oturumdan alan ve ona ileten `$this->restoreRequest($reqId)` yöntemini çağırıyoruz. Yöntem, isteğin şu anda oturum açmış olan kullanıcıyla aynı kullanıcı tarafından oluşturulduğunu doğrular. Başka bir kullanıcı giriş yaparsa veya anahtar geçersizse, hiçbir şey yapmaz ve program devam eder.

[Daha önceki bir sayfaya nasıl dönülür |best-practices:restore-request] yemek kitabına bakın.


Kanonizasyon .[#toc-canonization]
---------------------------------

Sunucular SEO'yu (internette aranabilirliğin optimizasyonu) geliştiren gerçekten harika bir özelliğe sahiptir. Farklı URL'lerde yinelenen içeriğin varlığını otomatik olarak önlerler. Birden fazla URL belirli bir hedefe yönlendiriyorsa, örneğin `/index` ve `/index?page=1`, çerçeve bunlardan birini birincil (kanonik) olarak belirler ve diğerlerini HTTP kodu 301 kullanarak ona yönlendirir. Bu sayede arama motorları sayfaları iki kez indekslemez ve sayfa sıralamalarını zayıflatmaz.

Bu işleme kanonizasyon denir. Kanonik URL, genellikle koleksiyondaki ilk uygun [rota olan yönlendirici |routing] tarafından oluşturulan URL'dir.

Kanonizasyon varsayılan olarak açıktır ve `$this->autoCanonicalize = false` adresinden kapatılabilir.

Yeniden yönlendirme bir AJAX veya POST isteği ile gerçekleşmez çünkü veri kaybına neden olur veya SEO katma değeri olmaz.

Ayrıca, `link()` yöntemi gibi sunum yapan kişiyi, eylemleri ve parametreleri bağımsız değişken olarak alan `canonicalize()` yöntemini kullanarak kanonlaştırmayı manuel olarak da çağırabilirsiniz. Bir bağlantı oluşturur ve bunu geçerli URL ile karşılaştırır. Farklıysa, oluşturulan bağlantıya yönlendirir.

```php
public function actionShow(int $id, string $slug = null): void
{
	$realSlug = $this->facade->getSlugForId($id);
	// eğer $slug, $realSlug'dan farklıysa yönlendirir
	$this->canonicalize('Product:show', [$id, $realSlug]);
}
```


Etkinlikler .[#toc-events]
--------------------------

Sunum yapan kişinin yaşam döngüsünün bir parçası olarak çağrılan `startup()`, `beforeRender()` ve `shutdown()` yöntemlerine ek olarak, otomatik olarak çağrılacak başka işlevler de tanımlanabilir. Sunum yapan kişi sözde [olayları |nette:glossary#events] tanımlar ve siz de bunların işleyicilerini `$onStartup`, `$onRender` ve `$onShutdown` dizilerine eklersiniz.

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	public function __construct()
	{
		$this->onStartup[] = function () {
			// ...
		};
	}
}
```

`$onStartup` dizisindeki işleyiciler `startup()` yönteminden hemen önce, ardından `$onRender` ile `beforeRender()` arasında çağrılır. `render<View>()` ve son olarak `shutdown()` adresinden hemen önce `$onShutdown`.


Yanıtlar .[#toc-responses]
--------------------------

Sunucu tarafından döndürülen yanıt, [api:Nette\Application\Response] arayüzünü uygulayan bir nesnedir. Bir dizi hazır yanıt vardır:

- [api:Nette\Application\Responses\CallbackResponse] - bir geri arama gönderir
- [api:Nette\Application\Responses\FileResponse] - dosyayı gönderir
- [api:Nette\Application\Responses\ForwardResponse] - ileri ()
- [api:Nette\Application\Responses\JsonResponse] - JSON gönderir
- [api:Nette\Application\Responses\RedirectResponse] - yönlendi̇rme
- [api:Nette\Application\Responses\TextResponse] - metin gönderir
- [api:Nette\Application\Responses\VoidResponse] - boş yanıt

Yanıtlar `sendResponse()` yöntemi ile gönderilir:

```php
use Nette\Application\Responses;

// Düz metin
$this->sendResponse(new Responses\TextResponse('Hello Nette!'));

// Bir dosya gönderir
$this->sendResponse(new Responses\FileResponse(__DIR__ . '/invoice.pdf', 'Invoice13.pdf'));

// Bir geri arama gönderir
$callback = function (Nette\Http\IRequest $httpRequest, Nette\Http\IResponse $httpResponse) {
	if ($httpResponse->getHeader('Content-Type') === 'text/html') {
		echo '<h1>Hello</h1>';
	}
};
$this->sendResponse(new Responses\CallbackResponse($callback));
```


Daha Fazla Okuma .[#toc-further-reading]
========================================

- [Yöntemleri ve öznitelikleri enjekte |best-practices:inject-method-attribute]etme
- [Özelliklerden sunum yapanların oluşturulması |best-practices:presenter-traits]
- [Ayarların sunum yapanlara aktarılması |best-practices:passing-settings-to-presenters]
- [Önceki bir sayfaya nasıl dönülür |best-practices:restore-request]?
