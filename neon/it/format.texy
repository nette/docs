Formato NEON
************

.[perex]
NEON è un formato di dati strutturati leggibile dall'uomo. In Nette viene utilizzato per i file di configurazione. Viene utilizzato anche per dati strutturati come impostazioni, traduzioni linguistiche, ecc. [Provatelo|https://ne-on.org].

NEON è l'acronimo di *Nette Object Notation*. È meno complesso e goffo di XML o JSON, ma fornisce funzionalità simili. È molto simile a YAML. Il vantaggio principale è che NEON ha le cosiddette [#entità], grazie alle quali la configurazione dei servizi DI è [così sexy |https://gist.github.com/dg/26baf3ce8f29d0f751e9dddfaa06504f]. E consente l'indentazione con tabulazioni.

NEON è costruito da zero per essere facile da usare.


Integrazione
============

- NetBeans (ha supporto integrato)
- PhpStorm ([plugin |https://plugins.jetbrains.com/plugin/7060?pr])
- Visual Studio Code ([Nette Latte + Neon |https://marketplace.visualstudio.com/items?itemName=Kasik96.latte]) o [Nette for VS Code |https://marketplace.visualstudio.com/items?itemName=franken-ui.nette-for-vscode])
- Sublime Text 3 ([plugin |https://github.com/FilipStryk/Nette-Latte-Neon-for-Sublime-Text-3])
- Sublime Text 2 ([plugin |https://github.com/Michal-Mikolas/Nette-package-for-Sublime-Text-2])
- VIM ([plugin |https://github.com/fpob/nette.vim])
- Emacs ([plugin |https://github.com/Fuco1/neon-mode])
- Prism.js ([linguaggio integrato |https://prismjs.com/#supported-languages])


- [NEON for PHP |@home]
- [NEON for JavaScript |https://github.com/matej21/neon-js]
- [NEON for Python |https://github.com/paveldedik/neon-py].


Sintassi
========

Un file scritto in NEON di solito rappresenta un array o una mappa.


Mapping
-------
Un mapping è un insieme di coppie chiave-valore, in PHP si direbbe array associativo. Ogni coppia è scritta come `key: value`, lo spazio dopo `:` è necessario. Il valore può essere qualsiasi cosa: stringa, numero, booleano, null, sequenza o un altro mapping.

```neon
street: 742 Evergreen Terrace
city: Springfield
country: USA
```

In PHP, la stessa struttura sarebbe scritta come:

```php
[ // PHP
	'street' => '742 Evergreen Terrace',
	'city' => 'Springfield',
	'country' => 'USA',
]
```

Questa notazione è detta a blocchi, perché tutti gli elementi sono su righe separate e hanno la stessa indentazione (in questo caso nessuna). NEON supporta anche una rappresentazione inline dei mapping, che è racchiusa tra parentesi graffe, l'indentazione non gioca alcun ruolo e il separatore tra i singoli elementi è una virgola o un ritorno a capo:

```neon
{street: 742 Evergreen Terrace, city: Springfield, country: USA}
```

Lo stesso scritto su più righe (l'indentazione non ha importanza):

```neon
{
	street: 742 Evergreen Terrace
		city: Springfield, country: USA
}
```

In alternativa a <code>: </code> si può usare `=` sia nella notazione a blocchi che in quella inline:

```neon
{street=742 Evergreen Terrace, city=Springfield, country=USA}
```


Sequenze
--------
Le sequenze sono array indicizzati in PHP. Sono scritte come righe che iniziano con un trattino `-` seguito da uno spazio. Il valore può essere di nuovo qualsiasi cosa: stringa, numero, booleano, null, sequenza o un altro mapping.

```neon
- Cat
- Dog
- Goldfish
```

In PHP, la stessa struttura sarebbe scritta come:

```php
[ // PHP
	'Cat',
	'Dog',
	'Goldfish',
]
```

Questa notazione è detta a blocchi, perché tutti gli elementi sono su righe separate e hanno la stessa indentazione (in questo caso nessuna). NEON supporta anche una rappresentazione inline delle sequenze, che è racchiusa tra parentesi quadre, l'indentazione non gioca alcun ruolo e il separatore tra i singoli elementi è una virgola o un ritorno a capo:

```neon
[Cat, Dog, Goldfish]
```

Lo stesso scritto su più righe (l'indentazione non ha importanza):

```neon
[
	Cat, Dog
		Goldfish
]
```

Nella rappresentazione inline non è possibile utilizzare trattini indentati.


Combinazioni
------------
I valori dei mapping e delle sequenze possono essere altri mapping e sequenze. Il ruolo principale è giocato dal livello di indentazione. Nell'esempio seguente, il trattino utilizzato per indicare gli elementi della sequenza ha un'indentazione maggiore rispetto alla chiave `pets`, quindi gli elementi diventano il valore della prima riga:

```neon
pets:
   - Cat
   - Dog
cars:
   - Volvo
   - Skoda
```

In PHP, la stessa struttura sarebbe scritta come:

```php
[ // PHP
	'pets' => [
		'Cat',
		'Dog',
	],
	'cars' => [
		'Volvo',
		'Skoda',
	],
]
```

È possibile combinare la notazione a blocchi e inline:

```neon
pets: [Cat, Dog]
cars: [
	Volvo,
	Skoda,
]
```

All'interno della notazione inline non è più possibile utilizzare la notazione a blocchi, questo non funziona:

```neon
item: [
	pets:
	 - Cat     # QUESTO NON È POSSIBILE!!!
	 - Dog
]
```

Nel caso precedente abbiamo scritto un mapping i cui elementi erano sequenze, ora proviamo il contrario e creiamo una sequenza contenente mapping:

```neon
-
	name: John
	age: 35
-
	name: Peter
	age: 28
```

Non è necessario che i trattini siano su righe separate, possono essere posizionati anche in questo modo:

```neon
- name: John
  age: 35
- name: Peter
  age: 28
```

Sta a voi decidere se allineare le chiavi in colonne usando spazi o usare una tabulazione.

Poiché in PHP si usa la stessa struttura sia per i mapping che per le sequenze, cioè gli array, è possibile unire entrambi. L'indentazione questa volta è la stessa:

```neon
- Cat
street: 742 Evergreen Terrace
- Goldfish
```

In PHP, la stessa struttura sarebbe scritta come:

```php
[ // PHP
	'Cat',
	'street' => '742 Evergreen Terrace',
	'Goldfish',
]
```


Stringhe
--------
Le stringhe in NEON possono essere racchiuse tra virgolette singole o doppie. Ma come potete vedere, possono anche essere senza virgolette.

```neon
- Stringa in NEON senza virgolette
- 'Stringa in NEON tra virgolette singole'
- "Stringa in NEON tra virgolette doppie"
```

Se una stringa contiene i caratteri `# " ' , : = - [ ] { } ( )`, che possono essere confusi con la sintassi NEON, è necessario racchiuderla tra virgolette. Si consiglia di utilizzare le virgolette singole, perché in esse non viene utilizzato l'escaping. Se è necessario scrivere una virgoletta in una tale stringa, raddoppiatela:

```neon
'Virgoletta '' all\'interno di una stringa tra virgolette singole'
```

Le virgolette doppie consentono di utilizzare sequenze di escape per scrivere caratteri speciali usando le barre rovesciate `\`. Sono supportate tutte le sequenze di escape come nel formato JSON e inoltre `\_`, che è uno spazio indivisibile, cioè `\u00A0`.

```neon
- "\t \n \r \f \b \" \\ \/ \_"
- "\u00A9"
```

Ci sono altri casi in cui è necessario racchiudere le stringhe tra virgolette:
- iniziano o terminano con spazi
- sembrano numeri, booleani o null
- NEON li interpreterebbe come [#data]


Stringhe multiriga
------------------

Una stringa multiriga inizia e finisce con tre virgolette su righe separate. L'indentazione della prima riga viene ignorata per tutte le righe:

```neon
'''
	prima riga
		seconda riga
	terza riga
	'''
```

In PHP scriveremmo lo stesso come:

```php
"prima riga\n\tseconda riga\nterza riga" // PHP
```

Le sequenze di escape funzionano solo per le stringhe racchiuse tra virgolette doppie invece che apostrofi:

```neon
"""
	Copyright \u00A9
"""
```


Numeri
------
NEON comprende i numeri scritti nella cosiddetta notazione scientifica e anche i numeri in base binaria, ottale ed esadecimale:

```neon
- 12         # intero
- 12.3       # float
- +1.2e-34   # numero esponenziale

- 0b11010    # numero binario
- 0o666      # numero ottale
- 0x7A       # numero esadecimale
```


Nulls
-----
Null può essere espresso in NEON usando `null` o non specificando un valore. Sono consentite anche varianti con la prima lettera maiuscola o tutte le lettere maiuscole.

```neon
a: null
b:
```


Booleans
--------
I valori logici sono espressi in NEON usando `true` / `false` o `yes` / `no`. Sono consentite anche varianti con la prima lettera maiuscola o tutte le lettere maiuscole.

```neon
[true, TRUE, True, false, yes, no]
```


Data
----
NEON utilizza i seguenti formati per esprimere le date e li converte automaticamente in oggetti `DateTimeImmutable`:

```neon
- 2016-06-03                  # data
- 2016-06-03 19:00:00         # data & ora
- 2016-06-03 19:00:00.1234    # data & microtempo
- 2016-06-03 19:00:00 +0200   # data & ora & zona
- 2016-06-03 19:00:00 +02:00  # data & ora & zona
```


Entità
------
Un'entità è una struttura che assomiglia a una chiamata di funzione:

```neon
Column(type: int, nulls: yes)
```

In PHP viene analizzata come un oggetto [api:Nette\Neon\Entity]:

```php
// PHP
new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true])
```

Le entità possono anche essere concatenate:

```neon
Column(type: int, nulls: yes) Field(id: 1)
```

Il che viene analizzato in PHP in questo modo:

```php
// PHP
new Nette\Neon\Entity(Nette\Neon\Neon::Chain, [
	new Nette\Neon\Entity('Column', ['type' => 'int', 'nulls' => true]),
	new Nette\Neon\Entity('Field', ['id' => 1]),
])
```

All'interno delle parentesi valgono le regole per la notazione inline utilizzata per mapping e sequenze, quindi può essere anche multiriga e in tal caso non è necessario specificare le virgole:

```neon
Column(
	type: int
	nulls: yes
)
```


Commenti
--------
I commenti iniziano con il carattere `#` e tutti i caratteri successivi a destra vengono ignorati:

```neon
# this line will be ignored by the interpreter
street: 742 Evergreen Terrace
city: Springfield  # this is ignored too
country: USA
```


Neon versus JSON
================
JSON è un sottoinsieme di NEON. Ogni JSON può quindi essere analizzato come NEON:

```neon
{
"php": {
	"date.timezone": "Europe\/Prague",
	"zlib.output_compression": true
},
"database": {
	"driver": "mysql",
	"username": "root",
	"password": "beruska92"
},
"users": [
	"Dave", "Kryten", "Rimmer"
]
}
```

E se omettessimo le virgolette?

```neon
{
php: {
	date.timezone: Europe/Prague,
	zlib.output_compression: true
},
database: {
	driver: mysql,
	username: root,
	password: beruska92
},
users: [
	Dave, Kryten, Rimmer
]
}
```

E le parentesi graffe e le virgole?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users: [
	Dave, Kryten, Rimmer
]
```

Le liste con i trattini non sono più leggibili?

```neon
php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Aggiungiamo i commenti?

```neon
# my web application config

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true  # use gzip

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
```

Evvai, ora conoscete la sintassi di NEON!


{{description: NEON è un formato facilmente leggibile per la serializzazione dei dati. È simile a YAML. La differenza principale è che NEON supporta le "entità" e per l'indentazione possiamo usare sia spazi che tabulazioni.}}
{{leftbar: utils:@left-menu}}
