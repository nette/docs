Jak funguje aplikace?
*********************

<div class=perex>

Seznámíme se s tím, jak se vlastně v Nette Framework tvoří aplikace. Po přečtení budete znát:

- MVC, adresářovou strukturu a soubor `Bootstrap.php`
- co jsou to presentery a akce

</div>


Model-View-Controller (MVC)
===========================

Model-View-Controller je softwarová architektura, která vznikla z potřeby oddělit u aplikací s grafickým rozhraním kód obsluhy (controller) od kódu aplikační logiky (model) a od kódu zobrazujícího data (view). Tím jednak aplikaci zpřehledňuje, usnadňuje budoucí vývoj a umožňuje testování jednotlivých části zvlášť.


Model
-----

Model je datový a zejména funkční základ celé aplikace. Je v něm obsažena aplikační logika. Jakákoliv akce uživatele (přihlášení, vložení zboží do košíku, změna hodnoty v databázi) představuje akci modelu. Model si spravuje svůj vnitřní stav a ven nabízí pevně dané rozhraní. Voláním funkcí tohoto rozhraní můžeme zjišťovat či měnit jeho stav. Model o existenci view nebo kontroleru neví.


View
----

View, tedy pohled, je vrstva aplikace, která má na starost zobrazení výsledku požadavku. Obvykle používá šablonovací systém a ví, jak se má zobrazit ta která komponenta nebo výsledek získaný z modelu.


Controller
----------

Řadič, který zpracovává požadavky uživatele a na jejich základě pak volá patřičnou aplikační logiku (tj. model) a poté požádá view o vykreslení dat. Obdobou kontrolerů v Nette Framework jsou [presentery |presenters].



Zpracování akce presenteru
==========================

Všechny požadavky posílá prohlížeč přes jediný PHP soubor, který se nachází ve veřejném adresáři `www/`, a tím je soubor `index.php`. Ten předává řízení do aplikace (tj. do adresáře `app/`) zaváděcímu souboru `Bootstrap.php`, kde se [konfiguruje prostředí a DI kontejner |bootstrap].

DI kontejner vytvoří tzv. front controller, což je objekt třídy `Nette\Application\Application`. Ten ale HTTP požadavkům nerozumí, proto požádá [router |routing], aby mu ho přeložil do řeči, které už rozumí. Tedy aby mu řekl, pro který **presenter** je požadavek určen a kterou **akci** s ním chce vykonat. Router kupříkladu odpoví, že uživatel chce akci `show` presenteru `Product` (je dobrý zvykem to zapisovat jako `Product:show`) a dále předává parametr `id = 123`. Česky by se řeklo: uživatele chce zobrazit produkt s id=123.

Tomu už `Application` rozumí a přistoupí k plnění přání. Vyrobí objekt třídy `ProductPresenter`, která reprezentuje presenter `Product`. (Abychom byli zcela přesní, o výrobu objektu presenteru požádá službu `presenterFactory`). A pak bude presenter požádán o provedení akce (`show` s parametrem `id`).

Presenter je objekt, který vezme požadavek přeložený routerem a vymyslí odpověď. Odpovědí může být HTML stránka, obrázek, XML dokument, soubor na disku, JSON, přesměrování nebo cokoliv potřebujete. Konkrétně ProductPresenter požádá model o data a ty poté předá do šablony k vykreslení. Tohle se zpravidla odehraje v metodě `renderShow`, kde slovo `Show` odpovídá názvu akce a parametr požadavku `id` bude předán jako parametr této metodě:

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	public function renderShow(int $id): void
	{
		// získáme data z modelu a předáme do šablony
		$this->template->product = $this->productRepository->getProduct($id);
	}
}
```

Pole všech parametrů odeslaných aplikaci požadavkem GET najdete v `$this->request->getParameters()`. V běžných případech byste je ale neměli potřebovat, využívejte [routování |routing] a parametrů akce.

Obdobně pole všech hodnot přijatých přes POST naleznete v `$this->request->getPost()`. Ani to byste neměli potřebovat, pokud nezpracováváte požadavek z jiné aplikace. Nejčastěji zpracováváte totiž formuláře vlastní aplikace a na ty máme [formulářovou komponentu|forms#formulare-v-presenterech].

Následně přistoupí presenter k vykreslení šablony.

Cestu k souboru se šablonou odvodí presenter podle jednoduché logiky. Pro presenter `Product` a akci `show` zkusí, zda existuje jeden z těchto souborů:

- `templates/Product/show.latte`
- `templates/Product.show.latte`

Taktéž se pokusí dohledat layout (ten je nepovinný):

- `templates/Product/@layout.latte`
- `templates/Product.@layout.latte`
- `templates/@layout.latte` layout společný pro více presenterů

O šablonovacím jazyku Latte více v [samostatné kapitole |latte:].

Ono to vlastně není nic těžkého! Pokud požaduji akci například `Homepage:default`, tak se

1) vytvoří objekt třídy `HomepagePresenter`
2) zavolá se metoda `renderDefault()` (existuje-li, ale nemusí)
3) vykreslí se šablona např. `templates/Homepage/default.latte` s layoutem např. `templates/@layout.latte`

a v šabloně pak můžeme [vytvořit odkaz |link-generation] na zmíněný `Product:show($id)`, zhruba takto:

```html
<a n:href="Product:show $productId">detail produktu</a>
```

Nechci to zakřiknout, ale tvorba aplikací v Nette bude pohodička.


Adresářová struktura
====================

Když se po stažení distribuce Nette Framework podíváte do adresáře `sandbox`, uvidíte doporučovanou adresářovou strukturu.
Tato uvedená adresářová struktura je jen doporučená, protože ji můžeme snadno jakkoliv změnit nebo složky přejmenovat a bude stačit pouze přenastavit cesty v souboru `Bootstrap.php`.

/--pre
<b>sandbox/</b>
├── <b>app/</b>                  ← adresář s aplikací
│   ├── <b>config/</b>           ← konfigurační soubory
│   │   ├── <b>common.neon</b>   ← konfigurační soubor
│   │   └── <b>local.neon</b>
│   │
│   ├── <b>forms/</b>            ← třídy formulářů
│   ├── <b>model/</b>            ← modelová vrstva a její třídy
│   ├── <b>presenters/</b>       ← třídy presenterů
│   │   ├── <b>HomepagePresenter.php</b>  ← třída presenteru Homepage
│   │   └── <b>templates/</b>    ← adresář se šablonami
│   │       ├── <b>@layout.latte</b> ← šablona společného layoutu
│   │       └── <b>Homepage/</b>     ← šablony presenteru Homepage
│   │           └── <b>default.latte</b>  ← šablona akce default
│   ├── <b>router/</b>           ← třídy routerů
│   │
│   └── <b>Bootstrap.php</b>     ← zaváděcí soubor aplikace
│
├── <b>log/</b>                  ← obsahuje logy, error logy atd.
├── <b>temp/</b>                 ← pro dočasné soubory, cache, ...
│
├── <b>vendor/</b>               ← adresář na knihovny (např. třetích stran)
│   ├── <b>nette/</b>            ← všechny knihovny Nette Frameworku
│   │   └── <b>nette/Nette</b>   ← oblíbený framework nainstalovaný Composerem
│   ├── ...
│   │
│   └── <b>autoload.php</b>      ← soubor který se stará o načítání tříd nainstalovaných balíčků
│
└── <b>www/</b>                  ← veřejný adresář, document root projektu
    ├── <b>.htaccess</b>         ← pravidla pro mod_rewrite
    ├── <b>index.php</b>         ← který spouští aplikaci
    └── <b>images/</b>           ← další adresáře, třeba pro obrázky
\--

Krom toho se v některých složkách nacházejí soubory `.htaccess` resp. `web.config`, které zakazují přístup z prohlížeče (pro Apache resp. IIS). Ujistěte se, že to funguje a že se skutečně z prohlížeče do složky `app/` nebo `libs/` nedostanete.

.[note]
Adresářům `log/` a `temp/` nezapomeňte nastavit práva pro zápis (`chmod 0777`).


Moduly
======

U složitějších aplikací můžeme složky s presentery a šablonami rozčlenit do podadresářů, kterým říkáme moduly. Pokud by naše aplikace obsahovala například moduly `Front` a `Admin`, její struktura by mohla vypadat takto:

/--pre
<b>sandbox/</b>
	<b>app/</b>                ← adresář s aplikací
		<b>AdminModule/</b>    ← modul Admin
			<b>presenters/</b> ← a jeho presentery
			<b>templates/</b>  ← a šablony

		<b>FrontModule/</b>    ← modul Front
			<b>presenters/</b> ← a jeho presentery
			<b>templates/</b>  ← a šablony

		...
\--

Moduly nemusí tvořit jen plochou strukturu, lze vytvářet i submoduly atd.

Pokud by součástí modulu `Front` byl presenter `Product`. Akce `show` se pak zapíše jako `Front:Product:show` a třída `ProductPresenter` se umístí do jmenného prostoru `FrontModule`:

```php
namespace FrontModule;

class ProductPresenter extends \Nette\Application\UI\Presenter
{
	// ...
}
```

{{composer: nette/application}}
