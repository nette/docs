Konfigurace prostředí
*********************

/--div .[perex]
Systémový kontejner je DI kontejner, ve kterém se nacházejí všechny služby a parametry potřebné pro běh aplikace. Řekneme si:

- jak systémový kontejner vytvořit
- jak se konfiguruje pomocí NEON souborů
- jak na produkční a vývojářský režim
- jak používat a vytvářet rozšíření pro kontejner
\--

*Omlouváme se, tato stránka je ještě v přípravě.*


Systémový kontejner je statický [Dependency Injection kontejner |dependency-injection#toc-nette-di-container], ve kterém se nacházejí všechny služby a parametry potřebné pro běh aplikace. Tedy nejen služby frameworku samotného, ale i všech knihoven, které se rozhodnete použít. Jak takový základní kontejner vypadá, se můžete podívat třeba [tady |configuring-systemcontainer].

V praxi se ukázalo, že programování kontejnerů je značně rutinní a nezáživná činnost. Navíc s tím, jak aplikace roste, je stále těžší se v něm orientovat. Pohodlným řešením je nechat si kontejner vygenerovat. Což Nette Framework umí. Stručným konfiguračním jazykem popíšeme, jaké služby má obsahovat a framework sám PHP kód vytvoří. S pravdou ven: i kód výše odkazovaného kontejneru byl vygenerován.


Configurator
============

Generování kontejneru je úkolem třídy [Nette\Config\Configurator|api:]. Samotný PHP kód se vytváří jen jednou a poté uloží do cache, proto musíme určit složku pro dočasné soubory:

/--php
$configurator = new Nette\Config\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');
\--

Poté stačí uvést cestu ke konfiguračnímu souboru:

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
\--

A vytvoření instance je už maličkost:

/--php
// vrací objekt třídy SystemContainer
$container = $configurator->createContainer();
\--


Režim prostředí
---------------

Configurator se pokouší detekovat, zda aplikace běží na ostrém (production) nebo vývojářském (development) serveru. Činí tak podle IP adresy serveru, pokud je 127.0.0.1, považuje jej za vývojářský. Zjistit režim můžeme metodou `isProductionMode()` a přenastavit pomocí `setProductionMode()`.


RobotLoader
-----------

Pro sestavení kontejneru je potřeba načíst všechny třídy, které se v konfiguračním souboru uvádějí. K tomu je obvykle třeba aktivovat [auto-loading]. Třída Configurator nám vychází vstříc metodou, která vyrobí RobotLoader, nám pak stačí uvést indexované adresáře a robota aktivovat. Nezapomeňte tak učinit ještě před samotným voláním `createContainer()`.

/--php
$configurator->createRobotLoader()
	->addDirectory(APP_DIR)
	->addDirectory(LIBS_DIR)
	->register();
\--



Konfigurace v NEON souboru
==========================

Se syntaxí si můžete pohrát na stránce http://ne-on.org.


Definice služeb
---------------

/--code neon
services:
	database:
		class: Nette\Database\Connection(%dsn%, %user%, %password%)

#nebo ve dvou řádcích:
		class: Nette\Database\Connection
		arguments: [%dsn%, %user%, %password%]

\--

Vygeneruje:

/--php
	function createServiceDatabase()
	{
		return new Nette\Database\Connection(
			$this->parameters['dsn'],
			$this->parameters['user'],
			$this->parameters['password']
		);
	}
\--


Definice služby:

/--code neon
services:
	database:
		class: Nette\Database\Connection
		factory: DbFactory::createConnection

\--

`DbFactory::createConnection`:

/--php
class DbFactory
{
	static function createConnection(Nette\DI\Container $container)
	{
		...
	}
}
\--

Vygeneruje:

/--php
	function createServiceDatabase()
	{
		return DbFactory::createConnection($this);
	}
\--




Setup
-----

/--code neon
services:
	database:
		class: Nette\Database\Connection(%dsn%, %user%, %password%)
		setup:
			- setCacheStorage(@cacheStorage)

\--

Vygeneruje:

/--php
	function createServiceDatabase()
	{
		$service = new Nette\Database\Connection(...);
		$service->setCacheStorage($this->cacheStorage);
		return $service;
	}
\--

Autowiring umí odkazy na jiné služby doplnit automaticky, takže lze parametry úplně vynechat:

/--code neon
setup:
	- setCacheStorage
\--

Pokud služba `cacheStorage` neexistuje, můžeme jako parametr uvést výsledek volání funkce:

/--code neon
setup:
	- setCacheStorage( Factory::createStorage() )

# nebo metody jiné služby:
	- setCacheStorage( @factory::createStorage() )
\--

Případně nově vytvořenou třídu:

/--code neon
setup:
	- setCacheStorage( Nette\Caching\Storages\FileStorage(%tempDir%) )

# vygeneruje: $service->setCacheStorage(new Nette\Caching\Storages\FileStorage(...));
\--

Lze nastavovat i hodnoty proměnných:

substitutions
/--code neon
setup:
	- $substitutions( [db: test] )

# vygeneruje: $service->substitutions = array('db' => 'test');
\--


Kompletní příklad:

/--code neon
parameters:
	database:
		driver: mysql
		host: localhost
		dbname: test
		user: jim
		password: beam
		substitutions:
			db: test

services:
	database:
		class: Nette\Database\Connection(
			'%database.driver%:host=%database.host%;dbname=%database.dbname%',
			%database.user%, %database.password%, null,
			Nette\Database\Reflection\DiscoveredReflection()
		)
		setup:
			- setCacheStorage
			- $substitutions( %database.substitutions% )

\--


Dědičnost služeb
----------------

/--code neon
services:
	dev_database < database
		setup:
			- Diagnostics\ConnectionPanel::initialize

\--


Továrny
-------

Továrny se definují takřka stejně jako služby:

/--code neon
factories:
	article:
		class: Article
\--

Vygeneruje:

/--php
	function createArticle()
	{
		return new Article($this->database);
	}
\--

Továrnu pak voláme přímo `$article = $container->createArticle();`

Továrnám lze narozdíl od služeb předávat parametry:

/--code neon
factories:
	article:
		parameters: [id, title: null]
		class: Article(..., %id%)
		setup:
			- $title(%title%)

\--

Vygeneruje:

/--php
	function createArticle($id, $title = NULL)
	{
		$service = new Article($this->database, $id);
		$service->title = $title;
		return $service;
	}
\--



Auto-wiring
===========

Auto-wiring umí automaticky předávat do konstruktoru a dalších metod požadované služby. Řídí se podle type hintů a anotací `@return`. Služba odpovídající hledané třídě musí být v kontejneru právě jedna, jinak se vyhodí výjimka.

Pokud potřebujeme definovat více služeb stejného typu, můžeme je z auto-wiringu vyřadit:

/--code neon
services:
	cacheStorage:
		class: Nette\Caching\Storages\FileStorage(%tempDir%)

	tempCacheStorage:
		class: Nette\Caching\Storages\DevNullStorage
		autowired: no

\--


Více konfiguračních souborů
=======================

Vkládané soubory se uvádějí v sekci `includes`.

/--code neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

Konfigurace se slučují tak, že nejvyšší prioritu má soubor obsahující sekci `includes` a nejnižší první vkládaný soubor. Slučování polí lze zabránit uvedením vykřičníku za název pole:

/--code neon
argument!: [1, 2, 3]
\--




{{themeicon: icon-config.png}}

{{tags: nette\environment, nette\configurator}}
