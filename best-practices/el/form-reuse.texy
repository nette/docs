Επαναχρησιμοποίηση φορμών σε πολλαπλά σημεία
********************************************

.[perex]
Πώς να επαναχρησιμοποιήσετε την ίδια φόρμα σε πολλαπλά σημεία και να μην αντιγράφετε κώδικα; Αυτό είναι πολύ εύκολο να γίνει στη Nette και έχετε πολλούς τρόπους για να επιλέξετε.


Εργοστάσιο φορμών .[#toc-form-factory]
======================================

Ας δημιουργήσουμε μια κλάση που μπορεί να δημιουργήσει μια φόρμα. Μια τέτοια κλάση ονομάζεται εργοστάσιο. Στο μέρος όπου θέλουμε να χρησιμοποιήσουμε τη φόρμα (π.χ. στον παρουσιαστή), ζητάμε το [εργοστάσιο ως εξάρτηση |dependency-injection:passing-dependencies].

Μέρος του εργοστασίου είναι ο κώδικας που περνάει τα δεδομένα για περαιτέρω επεξεργασία όταν η φόρμα υποβληθεί επιτυχώς. Συνήθως στο επίπεδο μοντέλου. Επίσης, ελέγχει αν όλα πήγαν καλά και [περνάει πίσω |forms:validation#Processing-errors] στη φόρμα τυχόν σφάλματα. Το μοντέλο στο ακόλουθο παράδειγμα αντιπροσωπεύεται από την κλάση `Facade`:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// προσθήκη στοιχείων στη φόρμα

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// επεξεργασία φόρμας
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

Φυσικά, το εργοστάσιο μπορεί να είναι παραμετρικό, δηλαδή μπορεί να λαμβάνει παραμέτρους που θα επηρεάζουν την εμφάνιση της φόρμας που δημιουργείται.

Θα επιδείξουμε τώρα την παράδοση του εργοστασίου στον παρουσιαστή. Αρχικά, το γράφουμε στο αρχείο ρυθμίσεων:

```neon
services:
	- EditFormFactory
```

Και στη συνέχεια το ζητάμε στον παρουσιαστή. Εκεί ακολουθεί και το επόμενο βήμα επεξεργασίας της υποβληθείσας φόρμας και αυτό είναι η ανακατεύθυνση στην επόμενη σελίδα:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Δεδομένου ότι η ανακατεύθυνση γίνεται από τον χειριστή του παρουσιαστή, το στοιχείο μπορεί να χρησιμοποιηθεί σε πολλά μέρη και να ανακατευθύνεται αλλού σε κάθε μέρος.


Εξάρτημα με φόρμα .[#toc-component-with-form]
=============================================

Ένας άλλος τρόπος είναι να δημιουργήσετε ένα νέο [στοιχείο |application:components] που περιέχει μια φόρμα. Αυτό μας δίνει τη δυνατότητα να αποδώσουμε τη φόρμα με συγκεκριμένο τρόπο, για παράδειγμα, αφού το συστατικό περιλαμβάνει ένα πρότυπο.
Ή μπορούμε να χρησιμοποιήσουμε σήματα για επικοινωνία AJAX και φόρτωση πληροφοριών στη φόρμα, για παράδειγμα για αυτόματη συμπλήρωση κ.λπ.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// προσθήκη στοιχείων στη φόρμα

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// επεξεργασία φόρμας
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// κλήση συμβάντος
		$this->onSave($this, $values);
	}
}
```

Στη συνέχεια, θα δημιουργήσουμε το εργοστάσιο που θα παράγει αυτό το συστατικό. Απλά [γράψτε τη διεπαφή του |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

Και προσθέστε το στο αρχείο ρυθμίσεων:

```neon
services:
	- EditControlFactory
```

Και τώρα μπορούμε να απαιτήσουμε το εργοστάσιο και να το χρησιμοποιήσουμε στον παρουσιαστή:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// ή ανακατευθύνετε στο αποτέλεσμα της επεξεργασίας, π.χ.:
			// $this->redirect('detail', ['id' => $data->id]),
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Best Practices}}
