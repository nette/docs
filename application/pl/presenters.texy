Prezenterzy
***********
<div class=perex>


Dowiedz się jak pisać prezentery i szablony w Nette. Po przeczytaniu będziesz wiedział:

- jak działa prezenter
- jakie są trwałe parametry
- jak rysować szablony

</div>

[Wiemy już |how-it-works#Nette-Application], że prezenter to klasa, która reprezentuje konkretną stronę aplikacji internetowej, np. stronę główną; produkt w sklepie internetowym; formularz logowania; sitemap feed itp. Aplikacja może mieć od jednego do tysięcy prezenterów. W innych frameworkach są one również nazywane kontrolerami.

Zazwyczaj termin prezenter odnosi się do potomka klasy [api:Nette\Application\UI\Presenter], która jest przydatna do generowania interfejsów internetowych i którą omówimy w dalszej części tego rozdziału. W ogólnym sensie prezenterem jest dowolny obiekt, który implementuje interfejs [api:Nette\Application\IPresenter].


Cykl życia prezentera .[#toc-life-cycle-of-presenter]
=====================================================

Zadaniem prezentera jest obsługa żądania i zwrócenie odpowiedzi (która może być stroną HTML, obrazem, przekierowaniem itp.)

W ten sposób na początku przekazywane jest do niego żądanie. Nie jest to bezpośrednio żądanie HTTP, lecz obiekt [api:Nette\Application\Request], na który przy pomocy routera zostało przekształcone żądanie HTTP. Zwykle nie mamy styczności z tym obiektem, ponieważ prezenter sprytnie deleguje przetwarzanie żądania do innych metod, które teraz pokażemy.

[* lifecycle.svg *] *** *Cykl życia prezentera* .<>

Rysunek przedstawia listę metod, które są wywoływane sekwencyjnie od góry do dołu, jeśli istnieją. Żaden z nich nie musi istnieć, możemy mieć całkowicie pusty prezenter bez ani jednej metody i zbudować na nim prostą statyczną stronę.


`__construct()`
---------------

Konstruktor tak naprawdę nie należy do cyklu życia prezentera, ponieważ jest wywoływany w momencie tworzenia obiektu. Ale wspominamy o tym ze względu na jego znaczenie. Konstruktor (wraz z [metodą inject |best-practices:inject-method-attribute]) służy do przekazywania zależności.

Prezenter nie powinien zaspokajać logiki biznesowej aplikacji, zapisywania do i odczytywania z bazy danych, wykonywania obliczeń itp. Do tego właśnie służą klasy z warstwy, którą nazywamy modelem. Na przykład klasa `ArticleRepository` może być odpowiedzialna za wyszukiwanie i przechowywanie artykułów. Aby prezenter mógł z nim pracować, będzie miał go [przekazanego do niego za pomocą zastrzyku zależności |dependency-injection:passing-dependencies]:


```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private ArticleRepository $articles,
	) {
	}
}
```


`startup()`
-----------

Natychmiast po otrzymaniu żądania wywoływana jest metoda `startup()`. Możesz go użyć do inicjalizacji właściwości, sprawdzenia uprawnień użytkowników itp. Wymagane jest, aby metoda zawsze wywoływała przodka `parent::startup()`.


`action<Action>(args...)` .{toc: action<Action>()}
--------------------------------------------------

Podobna metoda `render<View>()`. Podczas gdy `render<View>()` Metoda ma na celu przygotowanie danych dla konkretnego szablonu, który jest następnie renderowany. `action<Action>()` obsługuje żądanie bez podążania za renderowaniem szablonu. Na przykład, przetwarza dane, loguje użytkownika w lub z i tak dalej, a następnie [przekierowuje |#Redirection] w inne miejsce.

Ważne jest to, że `action<Action>()` jest wywoływany przed `render<View>()`więc możemy w nim potencjalnie zmienić dalszy bieg historii, czyli zmienić szablon do wylosowania, a także metodę `render<View>()`który zostanie wywołany. Odbywa się to za pomocą strony `setView('jineView')`.

Do metody przekazywane są parametry z żądania. Możliwe i zalecane jest podawanie typów do parametrów, np. `actionShow(int $id, string $slug = null)` - jeśli w parametrze `id` zabraknie lub nie będzie on liczbą całkowitą, prezenter zwróci [błąd 404 |#Error-404-etc] i wyjdzie.


`handle<Signal>(args...)` .{toc: handle<Signal>()}
--------------------------------------------------

Metoda ta przetwarza tzw. sygnały, z którymi zapoznamy się w rozdziale poświęconym [komponentom |components#Signal]. Jest on przeznaczony głównie do komponentów i przetwarzania żądań AJAX.

Parametry z żądania są przekazywane do metody, tak jak w przypadku `action<Action>()`, w tym sprawdzanie typów.


`beforeRender()`
----------------

Metoda `beforeRender`, jak sama nazwa wskazuje, jest wywoływana przed każdą metodą `render<View>()`. Jest używany do wspólnej konfiguracji szablonów, przekazywania zmiennych układu i tak dalej.


`render<View>(args...)` .{toc: render<View>()}
----------------------------------------------

Miejsce, w którym przygotowujemy szablon do późniejszego renderowania, przekazujemy do niego dane itp.

Parametry z żądania są przekazywane do metody, tak jak w przypadku `action<Action>()`, w tym sprawdzanie typów.

```php
public function renderShow(int $id): void
{
	// pobieramy dane z modelu i przekazujemy je do szablonu
	$this->template->article = $this->articles->getById($id);
}
```


`afterRender()`
---------------

Metoda `afterRender`, jak sama nazwa wskazuje, jest wywoływana po każdej metodzie `render<View>()`. Jest on raczej rzadko używany.


`shutdown()`
------------

Jest on wywoływany na końcu cyklu życia prezentera.


**Dobra rada, zanim ruszymy dalej**. Presenter jak widać może obsługiwać wiele akcji/widoków, więc może mieć wiele metod `render<View>()`. Zalecamy jednak projektowanie prezenterów z jedną lub jak najmniejszą ilością akcji.


Wysyłanie odpowiedzi .[#toc-sending-a-response]
===============================================

Odpowiedź prezentera to zazwyczaj [render szablonu ze stroną HTML |templates], ale może to być również przesłanie pliku, JSON lub nawet przekierowanie do innej strony.

W dowolnym momencie cyklu życia możemy użyć dowolnej z poniższych metod, aby wysłać odpowiedź i jednocześnie wyjść z prezentera:

- `redirect()`, `redirectPermanent()`, `redirectUrl()` oraz `forward()` [przekierowania |#Redirection]
- `error()` kończy pracę prezentera z [powodu błędu |#Error-404-etc]
- `sendJson($data)` prezenter kończy pracę i [wysyła dane |#Sending-JSON] w formacie JSON
- `sendTemplate()` prezenter kończy pracę i natychmiast [renderuje szablon |templates]
- `sendResponse($response)` prezenter wychodzi i wysyła [swoją własną odpowiedź |#Responses]
- `terminate()` prezenter wychodzi bez odpowiedzi

Jeśli nie wywołasz żadnej z tych metod, prezenter automatycznie przejdzie do renderowania szablonu. Dlaczego? Ponieważ w 99% przypadków chcemy renderować szablon, więc presenter przyjmuje to zachowanie jako domyślne i chce ułatwić nam pracę.


Tworzenie linków .[#toc-creating-links]
=======================================

Presenter ma metodę `link()`, która może być użyta do tworzenia linków URL do innych prezenterów. Pierwszym parametrem jest docelowy prezenter & akcja, a następnie przekazane argumenty, które mogą być określone jako tablica:

```php
$url = $this->link('Product:show', $id);

$url = $this->link('Product:show', [$id, 'lang' => 'cs']);
```

W szablonie linki do innych prezenterów i wydarzeń tworzone są w następujący sposób:

```latte
<a n:href="Product:show $id">detail produktu</a>
```

Wystarczy wpisać znaną parę `Presenter:action` zamiast prawdziwego adresu URL i podać dowolne parametry. Sztuczka to `n:href`, która mówi, że Latte obsłuży ten atrybut i wygeneruje prawdziwy adres URL. Więc w Nette nie musisz w ogóle myśleć o adresach URL, tylko o prezenterach i wydarzeniach.

Więcej informacji na ten temat znajduje się w rozdziale [Tworzenie linków URL |creating-links].


Przekierowanie .[#toc-redirection]
==================================

Aby przekierować do innego prezentera, użyj metod `redirect()` i `forward()`, które mają bardzo podobną składnię do metody [link() |#Creating-Links].

Metoda `forward()` przechodzi natychmiast do nowego prezentera bez przekierowania HTTP:

```php
$this->forward('Product:show');
```

Przykład tymczasowego przekierowania z kodem HTTP 302 lub 303:

```php
$this->redirect('Product:show', $id);
```

Aby uzyskać trwałe przekierowanie z kodem HTTP 301, wykonaj następujące czynności:

```php
$this->redirectPermanent('Product:show', $id);
```

Możesz przekierować do innego adresu URL poza aplikacją za pomocą metody `redirectUrl()`:

```php
$this->redirectUrl('https://nette.org');
```

Przekierowanie natychmiast kończy prezentera, rzucając cichy wyjątek zakończenia `Nette\Application\AbortException`.

Przed przekierowaniem można wysłać [wiadomości flash |#Flash-Messages], czyli takie, które będą wyświetlane w szablonie po przekierowaniu.


Wiadomości błyskowe .[#toc-flash-messages]
==========================================

Są to komunikaty informujące zazwyczaj o wyniku jakiejś operacji. Ważną cechą wiadomości flash jest to, że są one dostępne w szablonie nawet po przekierowaniu. Nawet po ich wyświetleniu pozostaną na żywo przez kolejne 30 sekund - na przykład w przypadku, gdy użytkownik odświeży stronę z powodu błędu transmisji - więc komunikat nie zniknie natychmiast.

Wystarczy wywołać metodę [flashMessage() |api:Nette\Application\UI\Control::flashMessage()], a prezenter zajmie się przekazaniem jej do szablonu. Pierwszy parametr to tekst komunikatu, a opcjonalny drugi to jego typ (błąd, ostrzeżenie, info itp.). Metoda `flashMessage()` zwraca instancję wiadomości flash, do której można dodać dodatkowe informacje.

```php
$this->flashMessage('Item has been deleted.');
$this->redirect(/* ... */); // i przekierować
```

Wiadomości te są dostępne dla szablonu w zmiennej `$flashes` jako obiekty `stdClass`, które zawierają właściwości `message` (tekst wiadomości), `type` (typ wiadomości) oraz mogą zawierać wspomniane już informacje o użytkowniku. Na przykład wyrenderujmy je w następujący sposób:

```latte
{foreach $flashes as $flash}
	<div class="flash {$flash->type}">{$flash->message}</div>
{/foreach}
```


Error 404 i co. .[#toc-error-404-etc]
=====================================

Jeśli żądanie nie może zostać spełnione, na przykład dlatego, że artykuł, który chcemy wyświetlić, nie istnieje w bazie danych, rzucamy błąd 404 za pomocą metody `error(string $message = null, int $httpCode = 404)`.

```php
public function renderShow(int $id): void
{
	$article = $this->articles->getById($id);
	if (!$article) {
		$this->error();
	}
	// ...
}
```

Kod błędu HTTP może być przekazany jako drugi parametr, domyślnie jest to 404. Metoda działa poprzez rzucenie wyjątku `Nette\Application\BadRequestException`, po którym `Application` przekazuje kontrolę do error-presenter. Który jest prezenterem, którego zadaniem jest wyświetlenie strony informującej o błędzie.
Ustawienie prezentera błędów odbywa się w [konfiguracji aplikacji |configuration].


Wysyłanie JSON .[#toc-sending-json]
===================================

Przykład akcji-metody, która wysyła dane w formacie JSON i wychodzi z prezentera:

```php
public function actionData(): void
{
	$data = ['hello' => 'nette'];
	$this->sendJson($data);
}
```


Trwałe parametry .[#toc-persistent-parameters]
==============================================

Parametry trwałe są **przenoszone automatycznie** w linkach. Oznacza to, że nie musimy ich jawnie podawać w każdym wywołaniu `link()` lub `n:href` w szablonie, ale nadal będą one przenoszone.

Jeśli twoja aplikacja ma wiele języków, bieżący język jest parametrem, który musi być częścią adresu URL przez cały czas. I byłoby niesamowicie żmudne, aby uwzględnić go w każdym linku. Z Nette nie ma takiej potrzeby. Wystarczy oznaczyć parametr `lang` jako trwały w ten sposób:

```php
class ProductPresenter extends Nette\Application\UI\Presenter
{
	/** @persistent */
	public $lang;
}
```

Jeśli aktualną wartością parametru `lang` jest `'en'`, adres URL utworzony za pomocą `link()` lub `n:href` w szablonie będzie zawierał `lang=en`. Super!

Jednakże, podczas tworzenia linku, parametr persistent może zostać określony, aby zmienić jego wartość:

```latte
<a n:href="Product:show $id, lang: cs">detail v češtině</a>
```

Możesz też usunąć go poprzez zresetowanie:

```latte
<a n:href="Product:show $id, lang: null">klikni</a>
```

Zmienna trwała musi być zadeklarowana jako publiczna. Można również określić wartość domyślną. Jeśli parametr ma taką samą wartość jak domyślny, nie zostanie uwzględniony w adresie URL.

Persistence bierze pod uwagę hierarchię klas prezenterów, więc parametr zdefiniowany w prezenterze lub cechach jest automatycznie przekazywany do każdego prezentera dziedziczącego po nim lub używającego tej samej cechy.

W PHP 8 możesz również użyć atrybutów do wskazania trwałych parametrów:

```php
use Nette\Application\Attributes\Persistent;

class ProductPresenter extends Nette\Application\UI\Presenter
{
	#[Persistent]
	public $lang;
}
```


Komponenty interaktywne .[#toc-interactive-components]
======================================================

Prezenterzy mają wbudowany system komponentów. Komponenty to samodzielne jednostki wielokrotnego użytku, które wstawiamy do prezenterów. Mogą to być [formularze |forms:in-presenter], datagridy, menu, w rzeczywistości wszystko, co ma sens, aby używać wielokrotnie.

Jak komponenty są wstawiane do prezentera, a następnie wykorzystywane? Dowiesz się tego w rozdziale [Komponenty |components]. Dowiesz się nawet, co łączy ich z Hollywood.

A gdzie mogę dostać komponenty? Na stronie [Componette |https://componette.org/search/component] można znaleźć komponenty open-source, a także szereg innych dodatków dla Nette, umieszczonych tu przez wolontariuszy ze społeczności skupionej wokół frameworka.


Sięgając głębiej .[#toc-going-deeper]
=====================================

.[tip]
Z tym, co do tej pory omówiliśmy w tym rozdziale, jesteś prawdopodobnie całkowicie zadowolony. Kolejne wiersze są dla tych, którzy interesują się prezenterami dogłębnie i chcą wiedzieć wszystko.


Wymagania i parametry .[#toc-requirement-and-parameters]
--------------------------------------------------------

Żądanie obsługiwane przez prezentera ma postać obiektu [api:Nette\Application\Request] i jest zwracane przez metodę prezentera `getRequest()`. Zawiera tablicę parametrów, a każdy z nich należy albo do któregoś z komponentów, albo bezpośrednio do prezentera (który w rzeczywistości też jest komponentem, choć specjalnym). Nette redystrybuuje więc parametry i przekazuje je między poszczególnymi komponentami (i prezenterem), wywołując metodę `loadState(array $params)`, która jest szerzej opisana w rozdziale [Komponenty |Components]. Parametry można uzyskać przy pomocy metody `getParameters(): array`, indywidualnie przy pomocy `getParameter($name)`. Wartości parametrów są ciągami lub tablicami ciągów, są to w zasadzie surowe dane uzyskane bezpośrednio z adresu URL.


Zapisywanie i przywracanie wniosku .[#toc-save-and-restore-the-request]
-----------------------------------------------------------------------

Bieżące żądanie można zapisać do sesji lub przywrócić z niej i pozwolić prezenterowi wykonać je ponownie. Jest to przydatne, na przykład, gdy użytkownik wypełnia formularz i jego login wygasa. Aby uniknąć utraty danych, przed przekierowaniem na stronę logowania zapisujemy bieżące żądanie do sesji za pomocą `$reqId = $this->storeRequest()`, która zwraca jej identyfikator jako krótki łańcuch i przekazuje go jako parametr do prezentera logowania.

Po zalogowaniu się wywołujemy metodę `$this->restoreRequest($reqId)`, która pobiera żądanie z sesji i przekazuje je dalej. Ta metoda sprawdza, czy żądanie zostało utworzone przez tego samego użytkownika, który jest teraz zalogowany. Jeśli zalogował się inny użytkownik lub klucz był nieważny, nie robi nic i program kontynuuje.

Zobacz poradnik [Jak powrócić do wcześniejszej strony |best-practices:restore-request].


Canonicalization .[#toc-canonization]
-------------------------------------

Prezentery mają jedną naprawdę fajną funkcję, która przyczynia się do lepszego SEO (optymalizacji możliwości znalezienia użytkownika w internecie). Automatycznie zapobiegają one istnieniu zduplikowanej treści na różnych adresach URL. Jeśli wiele adresów URL prowadzi do określonego miejsca docelowego, np. `/index` i `/index?page=1`, framework określa jeden z nich jako główny (kanoniczny) i przekierowuje do niego pozostałe za pomocą kodu HTTP 301. Dzięki temu wyszukiwarki nie będą podwójnie indeksować Twojej witryny i rozcieńczać jej page rank.

Proces ten nazywany jest kanonikalizacją. Kanoniczny adres URL to ten wygenerowany przez [router |routing], zwykle pierwszy pasujący router w kolekcji.

Kanonizacja jest domyślnie włączona i można ją wyłączyć poprzez `$this->autoCanonicalize = false`.

Przekierowanie nie nastąpi w przypadku żądań AJAX lub POST, ponieważ spowodowałoby to utratę danych lub nie przyniosłoby wartości dodanej z perspektywy SEO.

Możesz również wywołać kanonizację ręcznie za pomocą metody `canonicalize()`, która przekaże prezentera, akcję i parametry podobnie jak w przypadku metody `link()`. Tworzy link i porównuje go z bieżącym adresem URL. Jeśli się różni, przekierowuje na wygenerowany link.

```php
public function actionShow(int $id, string $slug = null): void
{
	$realSlug = $this->facade->getSlugForId($id);
	// přesměruje, pokud $slug se liší od $realSlug
	$this->canonicalize('Product:show', [$id, $realSlug]);
}
```


Wydarzenia .[#toc-events]
-------------------------

Oprócz metod `startup()`, `beforeRender()` i `shutdown()`, które są wywoływane w ramach cyklu życia prezentera, można zdefiniować dodatkowe funkcje, które będą wywoływane automatycznie. Presenter definiuje tzw. [zdarzenia |nette:glossary#Events], których handlery dodajesz do pól `$onStartup`, `$onRender` oraz `$onShutdown`.

```php
class ArticlePresenter extends Nette\Application\UI\Presenter
{
	public function __construct()
	{
		$this->onStartup[] = function () {
			// ...
		};
	}
}
```

Handlery w polu `$onStartup` są wywoływane tuż przed metodą `startup()`, następnie `$onRender` pomiędzy `beforeRender()` i `render<View>()` i wreszcie `$onShutdown` tuż przed `shutdown()`.


Odpowiedzi .[#toc-responses]
----------------------------

Odpowiedź zwracana przez prezentera jest obiektem implementującym interfejs [api:Nette\Application\Response]. Dostępnych jest wiele gotowych odpowiedzi:

- [api:Nette\Application\Responses\CallbackResponse] - wysyła wywołanie zwrotne
- [api:Nette\Application\Responses\FileResponse] - wysyła plik
- [api:Nette\Application\Responses\ForwardResponse] - forward()
- [api:Nette\Application\Responses\JsonResponse] - wysyła JSON
- [api:Nette\Application\Responses\RedirectResponse] - przekierowanie
- [api:Nette\Application\Responses\TextResponse] - wyślij tekst
- [api:Nette\Application\Responses\VoidResponse] - pusta odpowiedź

Odpowiedzi wysyłane są za pomocą metody `sendResponse()`:

```php
use Nette\Application\Responses;

// Zwykły tekst
$this->sendResponse(new Responses\TextResponse('Hello Nette!'));

// Wysyła plik
$this->sendResponse(new Responses\FileResponse(__DIR__ . '/invoice.pdf', 'Invoice13.pdf'));

// Wysyła wywołanie zwrotne
$callback = function (Nette\Http\IRequest $httpRequest, Nette\Http\IResponse $httpResponse) {
	if ($httpResponse->getHeader('Content-Type') === 'text/html') {
		echo '<h1>Hello</h1>';
	}
};
$this->sendResponse(new Responses\CallbackResponse($callback));
```


Dalsza lektura .[#toc-further-reading]
======================================

- [Wstrzykiwanie metod i atrybutów |best-practices:inject-method-attribute]
- [Składanie prezenterów z cech |best-practices:presenter-traits]
- [Przekazywanie ustawień do prezent |best-practices:passing-settings-to-presenters]erów
- [Jak wrócić do wcześniejszej strony |best-practices:restore-request]
