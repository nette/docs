Array Functions
***************

.[perex]
This page is about the [Nette\Utils\Arrays|#Arrays], [#ArrayHash] and [#ArrayList] classes, which are related to arrays.

Installation:

```shell
composer require nette/utils
```

Arrays
======

[api:Nette\Utils\Arrays] is a static class, which contains a handful of handy array functions.

Following examples assume the following class alias is defined:

```php
use Nette\Utils\Arrays;
```


every(array $arr, callable $callback): bool .[method]
-----------------------------------------------------

Tests whether all elements in the array pass the test implemented by the provided function, which has the signature `function ($value, $key, array $arr): bool`.

```php
$array = [1, 30, 39, 29, 10, 13];
$isBelowThreshold = function ($value): bool { return $value < 40; };
$res = Arrays::every($array, $isBelowThreshold); // false
```


flatten(array $array, bool $preserveKeys=false): array .[method]
----------------------------------------------------------------

Transform multidimensional array to flat array.

```php
$array = Arrays::flatten([1, 2, [3, 4, [5, 6]]]);
// $array = [1, 2, 3, 4, 5, 6];
```


get(array $array, string|int|array $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------------

Returns `$array[$key]` item. If it does not exist, `Nette\InvalidArgumentException` is thrown, unless a default value is set as third argument.

```php
// if $array['foo'] does not exist, throws an exception
$value = Arrays::get($array, 'foo');

// if $array['foo'] does not exist, returns 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Argument `$key` may as well be an array.

```php
$array = ['color' => ['favorite' => 'red'], 5];

$value = Arrays::get($array, ['color', 'favorite']);
// returns 'red'
```



getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Gets reference to given `$array[$key]`. If the index does not exist, new one is created with value `null`.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// returns $array['foo'] reference
```

Works with multidimensional arrays as well as [get() |#get()].

```php
$value = & Arrays::get($array, ['color', 'favorite']);
// returns $array['color']['favorite'] reference
```


grep(array $array, string $pattern, int $flags=null): array .[method]
---------------------------------------------------------------------

Returns only those array items, which matches a regular expression `$pattern`. Regex compilation or runtime error throws `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// returns only numerical items
```

Value `PREG_GREP_INVERT` may be set as `$flags`, which inverts the selection.


insertAfter(array &$array, string|int $key, array $inserted): void .[method]
----------------------------------------------------------------------------

Inserts the contents of the `$inserted` array into the `$array` immediately after the `$key`. If the key does not exist, it is inserted at the end.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertAfter($array, 'first', ['hello' => 'world']);
// $array = ['first' => 10, 'hello' => 'world', 'second' => 20];
```


insertBefore(array &$array, string|int $key, array $inserted): void .[method]
-----------------------------------------------------------------------------

Inserts the contents of the `$inserted` array into the `$array` before the `$key`. If the key does not exist, it is inserted at the beginning.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::insertBefore($array, 'first', ['hello' => 'world']);
// $array = ['hello' => 'world', 'first' => 10, 'second' => 20];
```


isList(array $array): bool .[method]
------------------------------------

Check if the array is indexed in ascending order of numeric keys from zero, a.k.a list.

```php
Arrays::isList(['a', 'b', 'c'])); // true
Arrays::isList([4 => 1, 2, 3])); // false
Arrays::isList(['a' => 1, 'b' => 2])); // false
```


map(array $arr, callable $callback): array .[method]
----------------------------------------------------

Calls `$callback` on all elements in the array and returns the array of return values. The callback has the signature `function ($value, $key, array $arr): bool`.

```php
$array = ['foo', 'bar', 'baz'];
$res = Arrays::map($array, function ($value): string { return $value . $value; });
// $res = ['foofoo', 'barbar', 'bazbaz']
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

It recursively merges two fields. It is useful, for example, for merging tree structures. It behaves as the&nbsp;`+` operator for array, ie. it adds a key/value pair from the second array to the first one and retains the value from the first array in the case of a key collision.

```php
$array1 = ['color' => ['favorite' => 'red'], 5];
$array2 = [10, 'color' => ['favorite' => 'green', 'blue']];

$array = Arrays::mergeTree($array1, $array2);
// $array = ['color' => ['favorite' => 'red', 'blue'], 5];
```

Values from the second array are always appended to the first. The disappearance of the value `10` from the second array may seem a bit confusing. It should be noted that this value as well as the value `5` in the first array have the same numeric key `0`, so in the resulting field there is only an element from the first array.


normalize(array $arr, string $filling=null): array .[method]
------------------------------------------------------------

Normalizes array to associative array. Replace numeric keys with their values, the new value will be `$filling`.

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second']);
// $array = ['first' => null, 'a' => 'second'];
```

```php
$array = Arrays::normalize([1 => 'first', 'a' => 'second'], 'foobar');
// $array = ['first' => 'foobar', 'a' => 'second'];
```


pick(array &$arr, string|int $key, mixed $default=null): mixed .[method]
------------------------------------------------------------------------

Returns and removes the value of an item from an array. If it does not exist, it throws an exception, or returns `$default`, if provided.

```php
$array = [1 => 'foo', null => 'bar'];
$a = Arrays::pick($array, null);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): void .[method]
--------------------------------------------------------------------------------

Renames a key.

```php
$array = ['first' => 10, 'second' => 20];
Arrays::renameKey($array, 'first', 'renamed');
// $array = ['renamed' => 10, 'second' => 20];
```


searchKey(array $array, string|int $key): ?int .[method]
--------------------------------------------------------

Returns zero-indexed position of given array key. Returns `null` if key is not found.

```php
$array = ['first' => 10, 'second' => 20];
$position = Arrays::searchKey($array, 'first'); // returns 0
$position = Arrays::searchKey($array, 'second'); // returns 1
$position = Arrays::searchKey($array, 'not-exists'); // returns null
```

.[note]
Version 2 returns `false` instead of `null`.


some(array $arr, callable $callback): bool .[method]
----------------------------------------------------

Tests whether at least one element in the array passes the test implemented by the provided callback with signature `function ($value, $key, array $arr): bool`.

```php
$array = [1, 2, 3, 4];
$isEven = function ($value): bool { return $value % 2 === 0; };
$res = Arrays::some($array, $isEven); // true
```


toObject(array $arr, object $obj): object .[method]
---------------------------------------------------

Copies the elements of the `$arr` array to the `$obj` object and returns it.

```php
$obj = new stdClass;
Arrays::toObject(['foo' => 'bar'], $obj);
echo $obj->foo; // 'bar'
```


ArrayHash
=========

Object [api:Nette\Utils\ArrayHash] is the descendant of an anonymous stdClass and extends it to the ability to treat it as an array, for example, accessing members using square brackets:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // also works object notation
echo $hash->foo; // 123
```

You can use `count()` and iterate over the object, as in the case of the array:

```php
echo count($hash); // 2

foreach ($hash as $key => $value) ...
```

Existing arrays can be transformed to `ArrayHash` using `from()`:

```php
$array = ['foo' => 123, 'bar' => 456, 'inner' => ['a' => 'b']];

$hash = Nette\Utils\ArrayHash::from($array);
echo $hash->foo; // 123
echo $hash->inner; // ArrayHash('a' => 'b')
echo $hash->inner->a; // 'b'
echo $hash['inner']['a']; // 'b'
```

The transformation is recursive, which can be avoided by the second parameter:

```php
$hash = Nette\Utils\ArrayHash::from($array, false);
echo $hash->inner; // array ['a' => 'b']
```

Transform back to the array:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] represents a linear array where the indexes are only integers ascending from 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
echo count($list); // 3
```

Over the object you can iterate or call `count()`, as in the case of an array.

Accessing keys beyond the allowed values throws an exception `Nette\OutOfRangeException`:

```php
echo $list[-1]; // throws Nette\OutOfRangeException
unset($list[30]); // throws Nette\OutOfRangeException
```

Removing the key will result in renumbering the elements:

```php
// ArrayList(0 => 'a', 1 => 'c')
unset($list[1]);
```

You can add a new element to the beginning using `prepend()`:

```php
$list->prepend('d');
// ArrayList(0 => 'd', 1 => 'a', 2 => 'c')
```


{{composer: nette/utils}}
