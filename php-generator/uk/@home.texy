Генератор PHP-коду
******************

<div class=perex>

- Вам потрібно згенерувати PHP-код для класів, функцій, PHP-файлів тощо?
- Підтримує всі новітні можливості PHP, такі як перерахування, атрибути тощо.
- Дозволяє легко модифікувати існуючі класи
- Вихідні дані відповідають стандарту PSR-12
- Високорозвинена, стабільна і широко використовувана бібліотека

</div>


Установка .[#toc-installation]
------------------------------

Завантажте та встановіть пакет за допомогою [Composer |best-practices:composer]:

```shell
composer require nette/php-generator
```

Сумісність із PHP див. у [таблиці |#Compatibility-Table].


Класи .[#toc-classes]
---------------------

Почнемо з простого прикладу генерації класу з використанням [ClassType |api:Nette\PhpGenerator\ClassType]:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');

$class
	->setFinal()
	->setExtends(ParentClass::class)
	->addImplement(Countable::class)
	->addComment("Description of class.\nSecond line\n")
	->addComment('@property-read Nette\Forms\Form $form');

// для генерации PHP-кода просто приведите к строке или используйте echo:
echo $class;
```

Це призведе до такого результату:

```php
/**
 * Description of class.
 * Second line
 *
 * @property-read Nette\Forms\Form $form
 */
final class Demo extends ParentClass implements Countable
{
	use Nette\SmartObject;
}
```

Ми також можемо використовувати клас `Printer` для генерації коду, який, на відміну від `echo $class`, ми зможемо [додатково налаштувати|#Printers-and-PSR-Compliance]:

```php
$printer = new Nette\PhpGenerator\Printer;
echo $printer->printClass($class);
```

Можна додавати константи ([Constant |api:Nette\PhpGenerator\Constant]) і властивості ([Property |api:Nette\PhpGenerator\Property]):

```php
$class->addConstant('ID', 123)
	->setProtected() // constant visibility
	->setFinal();

$class->addProperty('items', [1, 2, 3])
	->setPrivate() // или setVisibility('private')
	->setStatic()
	->addComment('@var int[]');

$class->addProperty('list')
	->setType('?array')
	->setInitialized(); // prints '= null'
```

Це згенерує:

```php
final protected const ID = 123;

/** @var int[] */
private static $items = [1, 2, 3];

public ?array $list = null;
```

І ми можемо додати [методи |#Method-and-Function-Signature]:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int') // method return type
	->setBody('return count($items ?: $this->items);');

$method->addParameter('items', []) // $items = []
	->setReference()           // &$items = []
	->setType('array');        // array &$items = []
```

Це призводить до:

```php
/**
 * Count it.
 */
final protected function count(array &$items = []): ?int
{
	return count($items ?: $this->items);
}
```

Просувні параметри, введені в PHP 8.0, можуть бути передані в конструктор:

```php
$method = $class->addMethod('__construct');
$method->addPromotedParameter('name');
$method->addPromotedParameter('args', [])
	->setPrivate();
```

Це призводить до:

```php
public function __construct(
	public $name,
	private $args = [],
) {
}
```

Властивості, доступні тільки для читання, введені в PHP 8.1, можуть бути позначені за допомогою `setReadOnly()`.

------

Якщо додана властивість, константа, метод або параметр уже існують, вони будуть перезаписані.

Властивості, константи, методи та параметри можна видаляти за допомогою методів `removeProperty()`, `removeConstant()`, `removeMethod()` або `removeParameter()`, відповідно.

Ви також можете додати в клас існуючі об'єкти `Method`, `Property` або `Constant`:

```php
$method = new Nette\PhpGenerator\Method('getHandle');
$property = new Nette\PhpGenerator\Property('handle');
$const = new Nette\PhpGenerator\Constant('ROLE');

$class = (new Nette\PhpGenerator\ClassType('Demo'))
	->addMember($method)
	->addMember($property)
	->addMember($const);
```

Ви можете клонувати наявні методи, властивості та константи з іншим ім'ям, використовуючи `cloneWithName()`:

```php
$methodCount = $class->getMethod('count');
$methodRecount = $methodCount->cloneWithName('recount');
$class->addMember($methodRecount);
```


Інтерфейс або трейти .[#toc-interface-or-trait]
-----------------------------------------------

Ви можете створювати інтерфейси та трейти:

```php
$interface = new Nette\PhpGenerator\InterfaceType('MyInterface');
$trait = new Nette\PhpGenerator\TraitType('MyTrait');
```

Використання трейтів:

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addTrait('SmartObject');
$class->addTrait('MyTrait')
	->addResolution('sayHello as protected')
	->addComment('@use MyTrait<Foo>');
echo $class;
```

Результат:

```php
class Demo
{
	use SmartObject;
	use MyTrait {
		sayHello as protected;
	}
}
```


Перерахування .[#toc-enums]
---------------------------

Ви можете легко створювати перерахування, які з'явилися в PHP 8.1:

```php
$enum = new Nette\PhpGenerator\EnumType('Suit');
$enum->addCase('Clubs');
$enum->addCase('Diamonds');
$enum->addCase('Hearts');
$enum->addCase('Spades');

echo $enum;
```

Результат:

```php
enum Suit
{
	case Clubs;
	case Diamonds;
	case Hearts;
	case Spades;
}
```

Ви також можете створювати типізовані перерахування:

```php
$enum->addCase('Clubs', '♣');
$enum->addCase('Diamonds', '♦');
```

Можна додати коментар або [атрибути |#Attributes] до кожного варіанту, використовуючи `addComment()` або `addAttribute()`.


Анонімні класи .[#toc-anonymous-class]
--------------------------------------

Передайте `null` як ім'я, і у вас буде анонімний клас:

```php
$class = new Nette\PhpGenerator\ClassType(null);
$class->addMethod('__construct')
	->addParameter('foo');

echo '$obj = new class ($val) ' . $class . ';';
```

Результат:

```php
$obj = new class ($val) {

	public function __construct($foo)
	{
	}
};
```


Глобальні функції .[#toc-global-function]
-----------------------------------------

За генерацію коду звичайних функцій відповідає клас [GlobalFunction |api:Nette\PhpGenerator\GlobalFunction]:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('return $a + $b;');
$function->addParameter('a');
$function->addParameter('b');
echo $function;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFunction($function);
```

Результат:

```php
function foo($a, $b)
{
	return $a + $b;
}
```


Замикання .[#toc-closure]
-------------------------

Клас [Closure |api:Nette\PhpGenerator\Closure] допоможе вам згенерувати код замикань:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('return $a + $b;');
$closure->addParameter('a');
$closure->addParameter('b');
$closure->addUse('c')
	->setReference();
echo $closure;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printClosure($closure);
```

Результат:

```php
function ($a, $b) use (&$c) {
	return $a + $b;
}
```


Стрілочні функції .[#toc-arrow-function]
----------------------------------------

Ви також можете генерувати стрілочні функції:

```php
$closure = new Nette\PhpGenerator\Closure;
$closure->setBody('$a + $b');
$closure->addParameter('a');
$closure->addParameter('b');

echo (new Nette\PhpGenerator\Printer)->printArrowFunction($closure);
```

Результат:

```php
fn($a, $b) => $a + $b
```


Підпис методу та функції .[#toc-method-and-function-signature]
--------------------------------------------------------------

Методи представлені класом [Method |api:Nette\PhpGenerator\Method]. Ви можете встановити видимість, значення, що повертається, додати коментарі, [атрибути |#Attributes] тощо:

```php
$method = $class->addMethod('count')
	->addComment('Count it.')
	->setFinal()
	->setProtected()
	->setReturnType('?int');
```

Кожен параметр представлений класом [Parameter |api:Nette\PhpGenerator\Parameter]. Знову ж таки, ви можете встановити всі можливі властивості:

```php
$method->addParameter('items', []) // $items = []
	->setReference() // &$items = []
	->setType('array'); // array &$items = []

// function count(&$items = [])
```

Для визначення так званих варіативних параметрів (а також операторів splat, spread, ellipsis, unpacking або three dots) використовуйте `setVariadics()`:

```php
$method = $class->addMethod('count');
$method->setVariadics(true);
$method->addParameter('items');
```

Generates:

```php
function count(...$items)
{
}
```


Метод і тіло функції .[#toc-method-and-function-body]
-----------------------------------------------------

Вміст функції або методу може бути передано методу `setBody()` відразу або послідовно (рядок за рядком) шляхом багаторазового виклику `addBody()`:

```php
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('$a = rand(10, 20);');
$function->addBody('return $a;');
echo $function;
```

Результат:

```php
function foo()
{
	$a = rand(10, 20);
	return $a;
}
```

Для зручного впровадження змінних можна використовувати спеціальні заповнювачі.

Простий заповнювач `?`

```php
$str = 'any string';
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addBody('return substr(?, ?);', [$str, $num]);
echo $function;
```

Результат:

```php
function foo()
{
	return substr('any string', 3);
}
```

Варіативний заповнювач `...?`

```php
$items = [1, 2, 3];
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->setBody('myfunc(...?);', [$items]);
echo $function;
```

Результат:

```php
function foo()
{
	myfunc(1, 2, 3);
}
```

Ви також можете використовувати іменовані параметри PHP 8 за допомогою заповнювача `...?:`

```php
$items = ['foo' => 1, 'bar' => true];
$function->setBody('myfunc(...?:);', [$items]);

// myfunc(foo: 1, bar: true);
```

Екрануйте заповнювачі за допомогою косої риски: `\?`

```php
$num = 3;
$function = new Nette\PhpGenerator\GlobalFunction('foo');
$function->addParameter('a');
$function->addBody('return $a \? 10 : ?;', [$num]);
echo $function;
```

Результат:

```php
function foo($a)
{
	return $a ? 10 : 3;
}
```


Принтери та відповідність ПСР .[#toc-printers-and-psr-compliance]
-----------------------------------------------------------------

Код PHP генерується об'єктами `Printer`. Існує `PsrPrinter`, чий вивід відповідає PSR-2 і PSR-12 і використовує пробіли для відступів, і `Printer`, який використовує табуляцію для відступів.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
// ...

$printer = new Nette\PhpGenerator\PsrPrinter;
echo $printer->printClass($class); // 4 spaces indentation
```

Потрібно налаштувати поведінку принтера? Створіть свій власний, успадкувавши клас `Printer`. Ви можете змінити конфігурацію цих змінних:

```php
class MyPrinter extends Nette\PhpGenerator\Printer
{
	public int $wrapLength = 120;
	public string $indentation = "\t";
	public int $linesBetweenProperties = 0;
	public int $linesBetweenMethods = 2;
	public int $linesBetweenUseTypes = 0;
	public bool $bracesOnNextLine = true;
	public string $returnTypeColon = ': ';
}
```


Типи .[#toc-types]
------------------

Кожен тип або тип об'єднання/перетину може бути переданий як рядок. Ви також можете використовувати зумовлені константи для власних типів:

```php
use Nette\PhpGenerator\Type;

$member->setType('array'); // или Type::Array;
$member->setType('array|string'); // или Type::union('array', 'string')
$member->setType('Foo&Bar'); // или Type::intersection(Foo::class, Bar::class)
$member->setType(null); // удаляет тип
```

Те саме стосується і методу `setReturnType()`.


Літерали .[#toc-literals]
-------------------------

За допомогою `Literal` ви можете передавати довільний PHP-код, наприклад, значення властивостей або параметрів за замовчуванням тощо:

```php
use Nette\PhpGenerator\Literal;

$class = new Nette\PhpGenerator\ClassType('Demo');

$class->addProperty('foo', new Literal('Iterator::SELF_FIRST'));

$class->addMethod('bar')
	->addParameter('id', new Literal('1 + 2'));

echo $class;
```

Результат:

```php
class Demo
{
	public $foo = Iterator::SELF_FIRST;

	public function bar($id = 1 + 2)
	{
	}
}
```

Ви також можете передавати параметри в `Literal` і форматувати їх у правильний PHP-код, використовуючи [спеціальні вставки |#Method-and-Function-Body]:

```php
new Literal('substr(?, ?)', [$a, $b]);
// генерирует, например: substr('hello', 5);
```


Атрибути .[#toc-attributes]
---------------------------

Ви можете додавати атрибути PHP 8 до всіх класів, методів, властивостей, констант, перелічень, функцій, замикань і параметрів. [Літерали |#Literals] також можна використовувати як значення параметрів.

```php
$class = new Nette\PhpGenerator\ClassType('Demo');
$class->addAttribute('Deprecated');

$class->addProperty('list')
	->addAttribute('WithArguments', [1, 2]);

$method = $class->addMethod('count')
	->addAttribute('Foo\Cached', ['mode' => true]);

$method->addParameter('items')
	->addAttribute('Bar');

echo $class;
```

Результат:

```php
#[Deprecated]
class Demo
{
	#[WithArguments(1, 2)]
	public $list;


	#[Foo\Cached(mode: true)]
	public function count(#[Bar] $items)
	{
	}
}
```


Простір імен .[#toc-namespace]
------------------------------

Класи, риси, інтерфейси та перерахування (далі класи) можуть бути згруповані в простори імен ([PhpNamespace |api:Nette\PhpGenerator\PhpNamespace]):

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');

// создаем новые классы в пространстве имен
$class = $namespace->addClass('Task');
$interface = $namespace->addInterface('Countable');
$trait = $namespace->addTrait('NameAware');

// или добавляем существующий класс в пространство имен
$class = new Nette\PhpGenerator\ClassType('Task');
$namespace->add($class);
```

Якщо клас уже існує, його буде перезаписано.

Ви можете додавати використовувані за допомогою конструкції `use` класи, трейти та функції:

```php
// use Http\Request;
$namespace->addUse(Http\Request::class);
// use Http\Request as HttpReq;
$namespace->addUse(Http\Request::class, 'HttpReq');
// use function iter\range;
$namespace->addUseFunction('iter\range');
```

Щоб спростити повне ім'я класу, функції або константи відповідно до певних псевдонімів, використовуйте метод `simplifyName`:

```php
echo $namespace->simplifyName('Foo\Bar'); // 'Bar', потому что 'Foo' является текущим пространством имен
echo $namespace->simplifyName('iter\range', $namespace::NameFunction); // 'range', из-за определенного положения об использовании
```

І навпаки, ви можете перетворити спрощене ім'я класу, функції або константи в повне ім'я, використовуючи метод `resolveName`:

```php
echo $namespace->resolveName('Bar'); // 'Foo\Bar'
echo $namespace->resolveName('range', $namespace::NameFunction); // 'iter\range'
```


Дозвіл імен класів .[#toc-class-names-resolving]
------------------------------------------------

**Коли клас є частиною простору імен, він відображається дещо інакше**: усі типи (тобто підказки типів, типи, що повертаються, ім'я батьківського класу,
реалізовані інтерфейси, використовувані трейти та атрибути) автоматично *дозволяються* (якщо ви не вимкнете цю функцію, див. нижче).
Це означає, що ви повинні **використовувати повні імена класів** у визначеннях, і вони будуть замінені
псевдонімами (відповідно до конструкції `use`) або повністю визначеними іменами в результуючому коді:

```php
$namespace = new Nette\PhpGenerator\PhpNamespace('Foo');
$namespace->addUse('Bar\AliasedClass');

$class = $namespace->addClass('Demo');
$class->addImplement('Foo\A') // упростится до A
	->addTrait('Bar\AliasedClass'); // упростится до AliasedClass

$method = $class->addMethod('method');
$method->addComment('@return ' . $namespace->simplifyName('Foo\D')); // в комментариях упрощаем вручную
$method->addParameter('arg')
	->setType('Bar\OtherClass'); // это разрешится до \Bar\OtherClass

echo $namespace;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printNamespace($namespace);
```

Результат:

```php
namespace Foo;

use Bar\AliasedClass;

class Demo implements A
{
	use AliasedClass;

	/**
	 * @return D
	 */
	public function method(\Bar\OtherClass $arg)
	{
	}
}
```

Автодозвіл можна вимкнути в такий спосіб:

```php
$printer = new Nette\PhpGenerator\Printer; // или PsrPrinter
$printer->setTypeResolving(false);
echo $printer->printNamespace($namespace);
```


PHP-файли .[#toc-php-files]
---------------------------

Класи, функції та простори імен можуть бути згруповані у файли PHP, представлені класом [PhpFile |api:Nette\PhpGenerator\PhpFile]:

```php
$file = new Nette\PhpGenerator\PhpFile;
$file->addComment('This file is auto-generated.');
$file->setStrictTypes(); // добавляет declare(strict_types=1)

$class = $file->addClass('Foo\A');
$function = $file->addFunction('Foo\foo');

// или
// $namespace = $file->addNamespace('Foo');
// $class = $namespace->addClass('A');
// $function = $namespace->addFunction('foo');

echo $file;

// или использовать PsrPrinter для вывода, совместимого с PSR-2 / PSR-12
// echo (new Nette\PhpGenerator\PsrPrinter)->printFile($file);
```

Результат:

```php
<?php

/**
 * This file is auto-generated.
 */

declare(strict_types=1);

namespace Foo;

class A
{
}

function foo()
{
}
```


Генерація з використанням Reflection .[#toc-generating-according-to-existing-ones]
----------------------------------------------------------------------------------

Інший поширений випадок використання - створення класу або функції на основі наявних:

```php
// создает класс, идентичный классу PDO
$class = Nette\PhpGenerator\ClassType::from(PDO::class);

// создает функцию, идентичную trim()
$function = Nette\PhpGenerator\GlobalFunction::from('trim');

// создает закрытие, как указано
$closure = Nette\PhpGenerator\Closure::from(
	function (stdClass $a, $b = null) {},
);
```

За замовчуванням тіла функцій і методів порожні. Якщо ви хочете завантажити і їх, використовуйте такий спосіб
(для цього необхідно встановити `nikic/php-parser`):

```php
$class = Nette\PhpGenerator\ClassType::from(Foo::class, withBodies: true);

$function = Nette\PhpGenerator\GlobalFunction::from('foo', withBody: true);
```


Завантаження класу з файлу .[#toc-loading-from-php-file]
--------------------------------------------------------

Ви також можете завантажувати класи безпосередньо з PHP-файлу, який ще не завантажений, або рядка PHP-коду:

```php
$class = Nette\PhpGenerator\ClassType::fromCode(<<<XX
	<?php

	class Demo
	{
		public $foo;
	}
	XX);
```

Завантаження всього файлу PHP, який може містити кілька класів або навіть кілька просторів імен:

```php
$file = Nette\PhpGenerator\PhpFile::fromCode(file_get_contents('classes.php'));
```

Для цього необхідно встановити `nikic/php-parser`.


Дампінг змінних .[#toc-variables-dumper]
----------------------------------------

Клас `Dumper` повертає розібране строкове представлення змінної у форматі PHP. Забезпечує більш якісний і чіткий висновок, ніж рідна функція `var_export()`.

```php
$dumper = new Nette\PhpGenerator\Dumper;

$var = ['a', 'b', 123];

echo $dumper->dump($var); // prints ['a', 'b', 123]
```


Таблиця сумісності .[#toc-compatibility-table]
----------------------------------------------

PhpGenerator 4.0 сумісний з PHP 8.0 - 8.2

{{leftbar: nette:@menu-topics}}
