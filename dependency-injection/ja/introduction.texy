依存性注入（Dependency Injection）とは？
******************************

.[perex]
この章では、Netteフレームワーク全体を支え、あなた自身のアプリケーションを書くときに従うべき、基本的なプログラミングの実践を紹介します。これらは、きれいで、理解しやすく、保守しやすいコードを書くために必要な基本です。

これらのルールを学び、守ることができれば、フレームワークはすべてのステップであなたの味方になってくれます。フレームワークがルーチンワークを処理し、あなたがロジック自体に集中できるよう、可能な限り快適にしてくれます。

ここで紹介する原則は非常にシンプルです。何も心配することはありません。


最初のプログラムを覚えていますか？ .[#toc-remember-your-first-program]
-----------------------------------------------------

あなたがどのような言語で書いたかはわかりませんが、もしPHPだったら、おそらく次のようなものでしょう。

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // prints 24
```

数行の些細なコードですが、非常に多くの重要なコンセプトが隠されています。変数があることがわかります。コードはより小さな単位に分解され、それは例えば関数である。入力引数を渡せば、結果を返してくれる。足りないのは、条件とループだけだ。

関数に入力を渡して結果を返すというのは、数学など他の分野でも使われている、完全に理解できる概念です。

関数にはシグネチャがあり、関数名、パラメータのリストとその型、そして最後に戻り値の型から構成されます。ユーザーとしてはシグネチャに興味があるのであって、通常、内部実装については何も知る必要はない。

ここで、ある関数のシグネチャが次のようなものであると想像してください。

```php
function addition(float $x): float
```

パラメータが1つの足し算？それは変だ...。こんなのはどうだ？

```php
function addition(): float
```

本当に変でしょう？この機能、どう使うんだろう？

```php
echo addition(); // what does it prints?
```

このようなコードを見ていると、私たちは混乱してきます。初心者はもちろん、熟練プログラマーでもこのようなコードは理解できないでしょう。

このような関数の内部は実際どうなっているのだろう？どこで足し算をするのだろう？おそらく、このように、どうにかして、自分自身で取得するのだろう。

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

関数本体には他の関数(あるいは静的メソッド)へのバインディングが隠されていることがわかり、実際に加算がどこから来るのかを知るには、さらに掘り下げなければならない。


Not This Way! .[#toc-not-this-way]
----------------------------------

先ほど紹介したデザインは、多くのマイナス機能のエッセンスです。

- 関数のシグネチャが、足し算を必要としないように見せかけ、私たちを混乱させました。
- この関数を他の2つの数値で計算させる方法がわからない。
- どこで加算しているのか、コードを見なければわからない。
- 隠れたバインディングを発見した
- 完全に理解するには、これらのバインディングも調べる必要があります。

では、足し算の関数は入力を調達するのが仕事なのだろうか？もちろん、そんなことはない。  足すだけである。


このようなコードには遭遇したくありませんし、もちろん書きたいとも思いません。解決策は簡単で、基本に戻ってパラメータを使うだけです。


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


ルール1：パラメータを使用する .[#toc-rule-1-use-parameters]
---------------------------------------------

最も重要なルールは**関数やクラスが必要とするすべてのデータは、関数やクラスに渡されなければならない**。

このルールを破ると、理解しやすく、きれいで、持続可能なコードにすることは不可能になります。

もしこのルールに従えば、隠れた制約のないコードへの道を歩むことになります。作者だけでなく、後から読む人にも理解できるコードへ。関数やクラスのシグネチャからすべてが理解でき、実装の中に隠された秘密を探す必要がないところ。

このような引数の渡し方は、技術的には **dependency injection** と呼ばれています。

(依存性注入と「依存性注入コンテナ」を混同しないでください。これは根本的に異なるもので、コンテナについては[次の |container]章で説明します)。


関数からクラスへ .[#toc-from-functions-to-classes]
------------------------------------------

では、クラスはどのような関係にあるのでしょうか。クラスは単純な関数よりも複雑な存在ですが、ここでもルールその1が適用されます。ただ、[引数を |passing-dependencies]渡す方法が増えただけです。例えば、関数の場合とかなり似ています。

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

あるいは、他のメソッドやコンストラクタを直接使用する方法もあります。

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

どちらの例も、依存性注入に完全に準拠しています。


実際の例 .[#toc-real-life-examples]
-------------------------------

現実の世界では、数字を足すためのクラスを書くことはありません。実際の例題に移りましょう。

ブログの記事を表すクラス`Article` を用意しましょう。

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// save the article to the database
	}
}
```

で、使い方は以下のようになります。

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

メソッド`save()` は、データベースのテーブルに記事を保存します。[Nette Databaseを使って |database:en]実装するのは簡単ですが、一つ難点があります。`Article` 、データベース接続、つまりクラスオブジェクト`Nette\Database\Connection` をどこで取得するのでしょうか？

選択肢はたくさんあるようです。静的変数から取得することもできます。あるいは、データベース接続を提供するクラスから継承する。あるいは、いわゆるシングルトンを利用する。あるいは、Laravelで使用されているいわゆるファサード。

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

素晴らしい、問題が解決されましたね。

それとも、そうでしょうか？

[ルール1：パラメータを使う |#rule #1: use parameters]：クラスが必要とするすべてのデータをパラメータに渡さなければならない。なぜなら、もしそうせずにルールを破ってしまったら、隠れたバインディングや理解しがたいものだらけの汚いコードへの道を歩み始めてしまい、その結果、保守や開発に手間のかかるアプリケーションになってしまうからだ。

クラス`Article` のユーザーは、メソッド`save()` が記事をどこに保存するのかわかりません。データベースのテーブルの中ですか？本番環境と開発環境、どちらで？そして、どのようにこれを変更することができますか？

ユーザはメソッド`save()` がどのように実装されているかを見て、メソッド`DB::insert()` の用途を見つけなければなりません。そのため、このメソッドがどのようにデータベース接続を取得するのかを知るために、さらに検索をしなければなりません。そして、隠されたバインディングは非常に長い鎖を形成することができます。

隠れバインディング、Laravelファサード、静的変数などは、きれいに設計されたコードには決して存在しません。きれいに設計されたコードでは、引数が渡されます。

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

さらに実用的なのは、次に説明するように、コンストラクタを使用することです。

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

例えば、データベースを必要とするクラスを書く場合、どこからデータベースを取得するかは考えずに、渡されるようにしましょう。おそらく、コンストラクタや他のメソッドのパラメータとして渡すのでしょう。依存関係を宣言する。クラスのAPIでそれらを公開する。そうすれば、理解しやすく、予測可能なコードを得ることができる。

エラーメッセージを記録するこのクラスはどうだろう。

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

どうでしょう、[ルールその1「パラメータを使う |#rule #1: use parameters]」に従っているでしょうか？

守ってません。

このクラスは、ログファイルを含むディレクトリという重要な情報を定数から *取得して* います。

使用例を見てみましょう。

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

実装を知らなくても、メッセージがどこに書き込まれるかという質問に答えられますか？LOG_DIR定数の存在が動作に必要であることを示唆するでしょうか？そして、別の場所に書き込む2番目のインスタンスを作ることができるでしょうか？確かに無理ですね。

このクラスを修正しましょう。

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

このクラスは、より明確で、より設定しやすく、したがって、より便利なものになりました。

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


しかし、私は気にしない .[#toc-but-i-don-t-care]
------------------------------------

*"Articleオブジェクトを作成してsave()を呼び出すとき、データベースを処理したくない、構成で設定したものに保存されたい。"*

*"Loggerを使うときは、メッセージを書き込むだけで、どこをどうするかは問わない。グローバル設定を使用させる。"*

以上が正しいコメントです。

例として、ニュースレターを配信し、それがどのように行われたかをログに残すクラスを考えてみましょう。

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

しかし、新しい`Logger` では`LOG_DIR` 定数を使用しないため、コンストラクタにファイルへのパスが必要です。これを解決するにはどうしたらいいでしょうか？`NewsletterDistributor` クラスは、メッセージがどこに書き込まれるかは気にしません。

解決策は、やはり[ルールその1、「パラメータを使う |#rule #1: use parameters]」です。クラスが必要とするデータをすべて渡すのです。

では、ログへのパスをコンストラクタに渡して、`Logger` オブジェクトを作成するときにそれを使用するのでしょうか？いいえ、パスは`NewsletterDistributor` クラスが必要とするデータではないので、それは`Logger` が必要とするものです。クラスはロガーそのものを必要とします。そして、私たちはそれを渡すつもりです。


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

さて、クラス`NewsletterDistributor` のシグネチャから、ロギングがその機能の一部であることは明らかです。そして、ロガーを別のものに置き換えるオプションがあります。

アプリケーション全体では、ロガーのインスタンスは1つで十分で、何かがログに記録される場所ではそれを渡しますが、`Article` クラスの場合は違います。複数のインスタンスを作成したいと思うでしょう。コンストラクタでデータベースの依存性をどのように扱うか？例として、フォームを送信した後に記事をデータベースに保存することになっているコントローラを考えてみましょう。

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

可能な解決策としては、コンストラクタでデータベースオブジェクトを`UserController` に渡し、`$article = new Article($this->db)` を使用する方法があります。

前のケースと同様に、これは正しいやり方ではありません。データベースは`UserController` の依存関係ではなく、`Article` の依存関係です。さらに、`Article` クラスのコンストラクタが何らかの形で変更された (新しいパラメータが追加された) 瞬間に、インスタンスが生成されるすべての場所でコードを修正する必要があります。

解決策はファクトリーです。


ルールその2：ファクトリーを使用する .[#toc-rule-2-use-factories]
-----------------------------------------------

隠しバインディングを取り除き、すべてのデータを引数として渡すことで、より設定可能で柔軟なクラスを手に入れることができます。したがって、より柔軟なクラスを作成し、設定するための何かが必要です。それをファクトリーと呼ぶことにします。

経験則から言うと、クラスに依存性がある場合、そのインスタンスの生成はファクトリーに任せましょう。

ファクトリーは、依存性注入の世界における`new` 演算子の、よりスマートな置き換えです。


ファクトリー .[#toc-factory]
----------------------

ファクトリーとは、オブジェクトの生成や設定を行うクラスです。`Article` を生成するファクトリーを`ArticleFactory` と呼び、コントローラでの使い方は次のようになります。

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// let the factory create an object
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

ファクトリーの実装は次のようなものになります。


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

この時点で、クラスのコンストラクタ`Article` のシグネチャが変更された場合、これに反応する必要があるのはファクトリ`ArticleFactory` だけです。`Article` オブジェクトを扱う他のコード（`UserController` など）は影響を受けません。

今、皆さんは、どうやって自分たちを助けたのかと、額を叩いておられるかもしれません。コードの量は増え、コントローラから別のクラスに移動しました。しかし、ネットDIには隠れたエースがいます。ファクトリーという概念を理解し、[そのようなサービスまで書いて |factory]くれるのです。だから、`ArticleFactory` クラスの代わりに、インターフェイスを作ればいいんです。

```php
interface ArticleFactory
{
	function create(): Article;
}
```

しかし、今は少し先を行っているので、その話はまた今度。


まとめ .[#toc-summary]
-------------------

この章の冒頭で、アプリケーションを設計する方法についての簡単な原則を示すことを約束しました。原則自体は単純なものですが（クラスに必要なデータを与える）、そこから続くものはより多くの思考を必要とします。この章を何度か読んでみてください。

古い習慣を捨て、依存性注入を使い始めたプログラマは、一貫してこれを自分の職業人生における極めて重要な瞬間だと考えています。それは、明確で持続可能なアプリケーションの世界を切り開いたのです。

では、依存性[注入コンテナとは |container]何かを見ていきましょう。
