Sistema de arquivos
*******************

.[perex]
[api:Nette\Utils\FileSystem] é uma classe com funções úteis para trabalhar com o sistema de arquivos. Uma vantagem sobre as funções nativas do PHP é que elas lançam exceções em caso de erro.


Se você precisa procurar arquivos no disco, use o [Finder|finder].

Instalação:

```shell
composer require nette/utils
```

Os exemplos a seguir pressupõem a criação de um alias:

```php
use Nette\Utils\FileSystem;
```


Manipulação
===========


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Copia um arquivo ou um diretório inteiro. Por padrão, sobrescreve arquivos e diretórios existentes. Com o parâmetro `$overwrite` definido como `false`, lança uma exceção `Nette\InvalidStateException` se o arquivo ou diretório de destino `$target` existir. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $dir, int $mode=0777): void .[method]
------------------------------------------------------

Cria um diretório se ele não existir, incluindo diretórios pai. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Exclui um arquivo ou um diretório inteiro, se existir. Se o diretório não estiver vazio, exclui primeiro seu conteúdo. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Define as permissões do arquivo para `$fileMode` ou do diretório para `$dirMode`. Percorre recursivamente e define as permissões para todo o conteúdo do diretório também.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Abre um arquivo e retorna um resource. O parâmetro `$mode` funciona da mesma forma que na função nativa `fopen()`:https://www.php.net/manual/en/function.fopen.php. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Retorna o conteúdo do arquivo `$file`. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Lê o conteúdo do arquivo linha por linha. Ao contrário da função nativa `file()`, não carrega o arquivo inteiro na memória, mas o lê continuamente, tornando possível ler arquivos maiores que a memória disponível. `$stripNewLines` indica se os caracteres de fim de linha `\r` e `\n` devem ser removidos.
Em caso de erro, lança uma exceção `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Renomeia ou move o arquivo ou diretório `$origin`. Por padrão, sobrescreve arquivos e diretórios existentes. Com o parâmetro `$overwrite` definido como `false`, lança uma exceção `Nette\InvalidStateException` se o arquivo ou diretório de destino `$target` existir. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Escreve a string `$content` no arquivo `$file`. Em caso de erro, lança uma exceção `Nette\IOException`.

```php
FileSystem::write('/path/to/file', $content);
```


Caminhos
========


isAbsolute(string $path): bool .[method]
----------------------------------------

Verifica se o caminho `$path` é absoluto.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Junta todos os segmentos do caminho e normaliza o resultado.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normaliza `..` e `.` e os separadores de diretório no caminho para os do sistema.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Converte barras para `/`, usadas em sistemas Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Converte barras para caracteres específicos da plataforma atual, ou seja, `\` no Windows e `/` em outros lugares.

```php
$path = FileSystem::platformSlashes($path);
```


resolvePath(string $basePath, string $path): string .[method]{data-version:4.0.6}
---------------------------------------------------------------------------------

Deriva o caminho final a partir do caminho `$path` em relação ao diretório base `$basePath`. Caminhos absolutos (`/foo`, `C:/foo`) são deixados inalterados (apenas normaliza as barras), caminhos relativos são anexados ao caminho base.

```php
// No Windows, as barras na saída seriam invertidas (\)
FileSystem::resolvePath('/base/dir', '/abs/path');      // '/abs/path'
FileSystem::resolvePath('/base/dir', 'rel');            // '/base/dir/rel'
FileSystem::resolvePath('base/dir', '../file.txt');     // 'base/file.txt'
FileSystem::resolvePath('base', '');                    // 'base'
```


Acesso estático vs. não estático
================================

Para poder substituir facilmente a classe por outra (mock) para fins de teste, por exemplo, use-a de forma não estática:

```php
class AnyClassUsingFileSystem
{
	public function __construct(
		private FileSystem $fileSystem,
	) {
	}

	public function readConfig(): string
	{
		return $this->fileSystem->read(/* ... */);
	}

	...
}
```
