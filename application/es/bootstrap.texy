Bootstrap
*********

<div class=perex>

Bootstrap es el c√≥digo de arranque que inicializa el entorno, crea un contenedor de inyecci√≥n de dependencias (DI) e inicia la aplicaci√≥n. Vamos a discutir:

- c√≥mo configurar su aplicaci√≥n utilizando archivos NEON
- c√≥mo manejar los modos de producci√≥n y desarrollo
- c√≥mo crear el contenedor DI

</div>


Las aplicaciones, ya sean basadas en web o en scripts de l√≠nea de comandos, comienzan por alg√∫n tipo de inicializaci√≥n del entorno. En la antig√ºedad, pod√≠a ser un archivo llamado por ejemplo `include.inc.php` el que se encargaba de esto, y se inclu√≠a en el archivo inicial.
En las aplicaciones Nette modernas, ha sido sustituido por la clase `Bootstrap`, que como parte de la aplicaci√≥n se puede encontrar en el `app/Bootstrap.php`. Por ejemplo, podr√≠a tener este aspecto:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// El configurador se encarga de configurar el entorno y los servicios de la aplicaci√≥n.
		$this->configurator = new Configurator;
		// Establecer el directorio para los archivos temporales generados por Nette (por ejemplo, plantillas compiladas).
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// Nette es inteligente, y el modo de desarrollo se activa autom√°ticamente,
		// o puede habilitarlo para una direcci√≥n IP espec√≠fica descomentando la siguiente l√≠nea:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Habilita Tracy: la √∫ltima herramienta de depuraci√≥n "navaja suiza".
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: carga autom√°ticamente todas las clases en el directorio dado
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Carga archivos de configuraci√≥n
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php .[#toc-index-php]
===========================

El archivo inicial para aplicaciones web es `index.php`, ubicado en el directorio p√∫blico `www/`. Utiliza la clase `Bootstrap` para inicializar el entorno y crear un contenedor DI. A continuaci√≥n, obtiene el servicio `Application` del contenedor, que lanza la aplicaci√≥n web:

```php
$bootstrap = new App\Bootstrap;
// Inicializar el entorno + crear un contenedor DI
$container = $bootstrap->bootWebApplication();
// El contenedor DI crea un objeto Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// Inicia la aplicaci√≥n Nette y gestiona la petici√≥n entrante
$application->run();
```

Como puedes ver, la clase [api:Nette\Bootstrap\Configurator], que ahora presentaremos con m√°s detalle, ayuda a configurar el entorno y a crear un contenedor de inyecci√≥n de dependencias (DI).


Modo Desarrollo vs Producci√≥n .[#toc-development-vs-production-mode]
====================================================================

Nette se comporta de forma diferente dependiendo de si se est√° ejecutando en un servidor de desarrollo o de producci√≥n:

üõ†Ô∏è Modo Desarrollo:
	- Muestra la barra de depuraci√≥n de Tracy con informaci√≥n √∫til (por ejemplo, consultas SQL, tiempo de ejecuci√≥n, uso de memoria).
	- Muestra una p√°gina de error detallada con trazas de llamadas a funciones y contenidos de variables cuando se produce un error.
	- Actualiza autom√°ticamente la cach√© cuando se modifican las plantillas Latte, los archivos de configuraci√≥n, etc.


Modo de producci√≥n:
	- No muestra ninguna informaci√≥n de depuraci√≥n; se registran todos los errores.
	- Muestra un `ErrorPresenter` o una p√°gina gen√©rica de "Error de servidor" cuando se produce un error.
	- ¬°La cach√© nunca se actualiza autom√°ticamente!
	- Optimizado para velocidad y seguridad.


El modo se determina autom√°ticamente, por lo que en la mayor√≠a de los casos no es necesario configurarlo o cambiarlo manualmente:

- Modo de desarrollo: Activo en localhost (direcci√≥n IP `127.0.0.1` o `::1`) a menos que se est√© utilizando un proxy (es decir, bas√°ndose en sus cabeceras HTTP).
- Modo de producci√≥n: Activo en cualquier otro lugar.

Si desea habilitar el modo de desarrollo en otros casos, por ejemplo, para los programadores que acceden desde una direcci√≥n IP espec√≠fica, puede utilizar `setDebugMode()`:

```php
$this->configurator->setDebugMode('23.75.345.200'); // one or more IP addresses
```

Recomendamos encarecidamente combinar una direcci√≥n IP con una cookie. Almacenaremos un token secreto en la cookie `nette-debug`, por ejemplo `secret1234`, y el modo de desarrollo se activar√° para los programadores con esta combinaci√≥n de IP y cookie.

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Tambi√©n podemos desactivar completamente el modo de desarrollo, incluso para localhost:

```php
$this->configurator->setDebugMode(false);
```

N√≥tese que el valor `true` activa el modo desarrollador por fuerza, lo que nunca deber√≠a ocurrir en un servidor de producci√≥n.


Herramienta de depuraci√≥n Tracy .[#toc-debugging-tool-tracy]
============================================================

Para facilitar la depuraci√≥n, activaremos la gran herramienta [Tracy |tracy:]. En modo desarrollador visualiza los errores y en modo producci√≥n los registra en el directorio especificado:

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Archivos temporales .[#toc-temporary-files]
===========================================

Nette utiliza la cach√© para el contenedor DI, RobotLoader, plantillas, etc. Por lo tanto es necesario establecer la ruta al directorio donde se almacenar√° la cach√©:

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

En Linux o macOS, establezca los [permisos de escritura |nette:troubleshooting#Setting directory permissions] para los directorios `log/` y `temp/`.


RobotLoader .[#toc-robotloader]
===============================

Normalmente, querremos cargar autom√°ticamente las clases usando [RobotLoader |robot-loader:], as√≠ que tenemos que iniciarlo y dejar que cargue las clases desde el directorio donde se encuentra `Bootstrap.php` (es decir, `__DIR__`) y todos sus subdirectorios:

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Una forma alternativa es utilizar √∫nicamente la carga autom√°tica de [Composer |best-practices:composer] PSR-4.


Zona horaria .[#toc-timezone]
=============================

Configurator le permite especificar una zona horaria para su aplicaci√≥n.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Configuraci√≥n del Contenedor DI .[#toc-di-container-configuration]
==================================================================

Parte del proceso de arranque es la creaci√≥n de un contenedor DI, es decir, una f√°brica de objetos, que es el coraz√≥n de toda la aplicaci√≥n. En realidad es una clase PHP generada por Nette y almacenada en un directorio cach√©. La f√°brica produce objetos clave de la aplicaci√≥n y los archivos de configuraci√≥n le indican c√≥mo crearlos y configurarlos, y as√≠ influimos en el comportamiento de toda la aplicaci√≥n.

Los ficheros de configuraci√≥n suelen estar escritos en [formato NEON |neon:format]. Puede leer [lo que se puede configurar aqu√≠ |nette:configuring].

.[tip]
En el modo de desarrollo, el contenedor se actualiza autom√°ticamente cada vez que cambia el c√≥digo o los archivos de configuraci√≥n. En el modo de producci√≥n, se genera s√≥lo una vez y los cambios en los archivos no se comprueban para maximizar el rendimiento.

Los archivos de configuraci√≥n se cargan utilizando `addConfig()`:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

El m√©todo `addConfig()` se puede llamar varias veces para a√±adir varios archivos.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

El nombre `cli.php` no es una errata, la configuraci√≥n tambi√©n se puede escribir en un archivo PHP, que la devuelve como un array.

Alternativamente, podemos utilizar la [secci√≥n`includes`  |dependency-injection:configuration#including files] para cargar m√°s archivos de configuraci√≥n.

Si aparecen elementos con las mismas claves dentro de los archivos de configuraci√≥n, se [sobrescribir√°n o fusionar√°n |dependency-injection:configuration#Merging] en el caso de los arrays. El fichero incluido m√°s tarde tiene una prioridad mayor que el anterior. El fichero en el que aparece la secci√≥n `includes` tiene mayor prioridad que los ficheros incluidos en √©l.


Par√°metros est√°ticos .[#toc-static-parameters]
----------------------------------------------

Los par√°metros utilizados en los archivos de configuraci√≥n pueden definirse [en la secci√≥n `parameters` |dependency-injection:configuration#parameters] y tambi√©n pasarse (o sobrescribirse) por el m√©todo `addStaticParameters()` (tiene el alias `addParameters()`). Es importante que los diferentes valores de los par√°metros provoquen la generaci√≥n de contenedores DI adicionales, es decir, clases adicionales.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

En los archivos de configuraci√≥n, podemos escribir la notaci√≥n habitual `%projectId%` para acceder al par√°metro denominado `projectId`.


Par√°metros din√°micos .[#toc-dynamic-parameters]
-----------------------------------------------

Tambi√©n podemos a√±adir par√°metros din√°micos al contenedor, sus diferentes valores, a diferencia de los par√°metros est√°ticos, no provocar√°n la generaci√≥n de nuevos contenedores DI.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

Las variables de entorno podr√≠an estar f√°cilmente disponibles utilizando par√°metros din√°micos. Podemos acceder a ellas a trav√©s de `%env.variable%` en archivos de configuraci√≥n.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Par√°metros por defecto .[#toc-default-parameters]
-------------------------------------------------

Puede utilizar los siguientes par√°metros est√°ticos en los archivos de configuraci√≥n:

- `%appDir%` es la ruta absoluta al directorio del archivo `Bootstrap.php`
- `%wwwDir%` es la ruta absoluta al directorio que contiene el archivo de entrada `index.php`
- `%tempDir%` es la ruta absoluta al directorio para los archivos temporales
- `%vendorDir%` es la ruta absoluta al directorio donde Composer instala las bibliotecas
- `%rootDir%` es la ruta absoluta al directorio ra√≠z del proyecto
- `%debugMode%` indica si la aplicaci√≥n est√° en modo depuraci√≥n
- `%consoleMode%` indica si la solicitud lleg√≥ a trav√©s de la l√≠nea de comandos


Servicios importados .[#toc-imported-services]
----------------------------------------------

Ahora vamos a profundizar m√°s. Aunque el prop√≥sito de un contenedor DI es crear objetos, excepcionalmente puede existir la necesidad de insertar un objeto existente en el contenedor. Esto lo hacemos definiendo el servicio con el atributo `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Creamos una nueva instancia y la insertamos en bootstrap:

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Diferentes entornos .[#toc-different-environments]
==================================================

No dude en personalizar la clase `Bootstrap` seg√∫n sus necesidades. Puedes a√±adir par√°metros al m√©todo `bootWebApplication()` para diferenciar entre proyectos web. Alternativamente, puedes a√±adir otros m√©todos, como `bootTestEnvironment()` para inicializar el entorno para pruebas unitarias, `bootConsoleApplication()` para scripts llamados desde la l√≠nea de comandos, etc.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // Inicializaci√≥n del comprobador de redes
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
