Coding Standards
****************

This document describes rules and recommendations for developing Nette Framework.

General rules
=============

- Code must use 1 tab for indenting, not spaces. Tabs are allowed only at the begin of line.
- The recommended line length limit is 120 characters; lines should be 80 characters or less long.
- PHP code must use only UTF-8 without BOM; ASCII encoding is preferred.
- PHP code must always be opened by the full-form PHP tag: `<?php`
- The closing `?>` tag must be omitted from files containing only PHP.
- Blank lines should be added to improve readability and to indicate related blocks of code.
- There should not be more than one statement per line.
- There must not be trailing whitespace at the end of lines.
- All files must end with a single blank line.
- File name should match class name if possible.
- Any file that contains any PHP code must end with the extension `.php`, or `.phtml` in case of templates, or `.phpt` in case of PHP tests.
- Defining constants or functions in the global scope is permitted but strongly discouraged.

For all file names, only alphanumeric characters, underscores, dots, and the dash character (`-`) are permitted.


Common Naming Conventions
=========================

- Always choose meaningful and specific names.
- Avoid using abbreviations unless the full name is excessive.
- Use uppercase for two-letter abbreviations, and Pascal Case for longer abbreviations.
- Use only alphanumeric characters in names
- Variables should always be as verbose as practical. Terse variable names such as `$i` and `$n` are discouraged for anything other than the smallest loop contexts.


Basic expressions
=================

Strings
-------

When a string is literal (contains no variable substitutions), the single quote should be used to demarcate the string, except when a literal string itself contains apostrophes, it is recommended to demarcate the string with double quotes.

Strings may be concatenated using the `.` operator. A space must always be added before and after the `.` operator to improve readability. It is permitted to break the statement into multiple lines:

/--php
$sql = 'SELECT `id`, `name` FROM `people`'
	. 'WHERE `name` = ?'
	. 'ORDER BY `name`';
\--


Arrays
------

- Trailing space must be added after each comma delimiter to improve readability.

/--php
$sampleArray = array(1, 2, 3, 'test');
\--

- When declaring associative arrays, it is encouraged to put each key and value pair on separated line, indented by 1 tab. After last pair the comma must be added.

/--php
$sampleArray = array(
	'firstKey'  => 'firstValue',
	'secondKey' => 'secondValue',
);
\--


Keywords and True/False/Null
----------------------------

- PHP [keywords|http://php.net/manual/en/reserved.keywords.php] must be in lower case.
- The PHP constants `TRUE`, `FALSE`, and `NULL` must be in upper case.


Closures
--------

- Closures must be declared without a space after the `function` keyword, and with a space before and after the `use` keyword.
- The opening brace must go on the same line, and the closing brace must go on the next line following the body.
- In the argument list, there must be one space after each comma, and there must no be a space before each comma.

A closure declaration looks like the following:

/--php
$closureWithArgs = function($arg1, $arg2) {
	// body
};

$closureWithArgsAndVars = function($arg1, $arg2) use ($var1, $var2) {
	// body
};
\--


Method and Function Calls
-------------------------

- There must not be a space between the method or function name, the opening parenthesis, after the opening parenthesis and before the closing parenthesis.
- In the argument list, there must be one space after each comma, and there must no be a space before each comma.
- Call-time pass by-reference is prohibited.

Examples:

/--php
bar();
$foo->bar($arg1);
Foo::bar($arg1, $arg2);
\--

For functions whose arguments permitted arrays, the function call may include `array` and can be split into multiple lines to improve readability. In these cases, the standards for writing arrays still apply:

/--php
fooBar(array(1, 2, 3), 2, 3);

$foo->bar(1, 2, array(
	'firstKey'  => 'firstValue',
	'secondKey' => 'secondValue',
), 3, 4);
\--

Argument lists may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list must be on the next line, and there must be only one argument per line:

/--php
$foo->bar(
	$arg,
	$arg2,
	$arg3
);
\--


Classes
=======

The term "class" refers to all classes, interfaces, and traits.

- Class names must be declared in `PascalCase`.
- Code written for PHP >= 5.3 must use formal namespaces.
- Use a noun or noun phrase for class name.
- Add an appropriate class-suffix when sub-classing another type when possible. (TexyParser, HttpRequest)
- Interface classes must follow the same conventions as other classes, however should begin with `I` letter. Example: `IPresenter`
- The `extends` and `implements` keywords must be declared on the same line as the class name.
- The opening brace for the class must be on the line underneath the class name; the closing brace for the class must go on the next line after the body.
- Every class must have a documentation block.
- Any code within a class must be indented by 1 tab.

Placing additional code in a class file is permitted but discouraged (static constructor calling is allowed). In these files, two blank lines must separate the class from any additional PHP code in the file.

Class members implementation should follow this order as it is practical:
1) Member Variables
  a) public
  b) protected
  c) private
2) Constructor, Destructor
3) Properties
4) Methods
  a) public
  b) protected
  c) private

The ultimate ancestor of all instantiable classes should be `Nette\Object`.


Class properties
----------------

- Properties must be declared in `camelCase`.
- The `var` keyword must not be used to declare a property.
- Property names must not be prefixed with a single underscore to indicate protected or private visibility.
- Properties must describe an entity not the type or size.
- Properties must have documentation block with `@var` directive and specified type.


Constants
---------
- They must always have all letters capitalized, separated by underscore characters (example: CONTENT_TEXTUAL, FIELD_NUMERIC).


Methods
-------

- They must be declared in `camelCase`.
- Visibility must be declared on all methods.
- Method names must not be prefixed with a single underscore to indicate protected or private visibility.
- Like classes, the brace is always written on the line underneath the function name. There is no space between the function name and the opening parenthesis for the arguments. All arguments should have type hint if possible.
- Functions and methods must have documentation block with specified types of returned value.
- Names must be as verbose as is practical to enhance the understandability of code (examples: fetchPairs(), getElementById(), isSubmitted()).
- Try to use a verb or verb-object pair.
- If method returns boolean, try to prefix name with "is", "can", "has" or similar meaningful prefix.
- The return value must not be enclosed in parentheses.

A method declaration looks like the following:

/--php
/**
 * Documentation block here.
 */
class Foo
{

	/**
	 * Documentation block here.
	 * @return void
	 */
	public function verb($arg1, TypeHint $arg2 = NULL)
	{
		// content must be indented by 1 tab
	}

}
\--


`abstract`, `final`, and `static`
---------------------------------

- When present, the `abstract` and `final` declarations must precede the visibility declaration.
- When present, the `static` declaration must come after the visibility declaration.



Control Statements
==================

The general style rules for control structures are as follows:

- There must be one space after the control structure keyword
- There must not be a space after the opening parenthesis and before the closing parenthesis
- There must be one space between the closing parenthesis and the opening brace
- The structure body must be indented once
- The closing brace must be on the next line after the body

The body of each structure must be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body.


`if`, `elseif`, `else`
----------------------

- Comparison "strong typed" operators (`===` and `!==`) are preferred before "weak typed" ones (`==` and `!=`).
- If weak typed comparison operator is used, the intention must be documented with a comment.
- The keyword `elseif` must be used instead of `else if`.

An structure looks like the following:

/--php
if ($a === 2) {
	$x = 2;

} elseif ($a == 0) { // intentionally ==, $a may be NULL
	$x = 4;

} else {
	$x = 7;
}
\--


`switch`, `case`
----------------

A `switch` structure looks like the following:

/--php
switch ($numPeople) {
case 1:
	echo 'First case, with a break';
	break;

case 2:
	echo 'Second case, which falls through';
	// break intentionally omitted

default:
	break;
}
\--

There must be a comment when fall-through is intentional in a non-empty `case` body.


`while`, `do while`
------------------

A `while` statement looks like the following:

/--php
while ($expr) {
	// structure body
}
\--

Similarly, a `do while` statement looks like the following:

/--php
do {
	// structure body;
} while ($expr);
\--

`for`
-----

A `for` statement looks like the following:

/--php
for ($i = 0; $i < 10; $i++) {
	// for body
}
\--

`foreach`
---------

A `foreach` statement looks like the following:

/--php
foreach ($iterable as $key => $value) {
	// foreach body
}
\--


`try`, `catch`
--------------

A `try catch` block looks like the following:

/--php
try {
	// try body
} catch (FirstExceptionType $e) {
	// catch body
} catch (OtherExceptionType $e) {
	// catch body
}
\--
