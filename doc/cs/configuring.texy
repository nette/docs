Konfigurace
***********

/--div .[perex]
Nette umožňuje nastavovat aplikaci pomocí konfiguračních souborů. Řekneme si:

- jak se konfiguruje pomocí NEON souborů
- jak na produkční a vývojářský režim
- jak vytvořit DI kontejner
\--

Configurator
============

Nastavení prostředí a vytvoření Dependency Injection (DI) kontejneru má v Nette na starosti třída [Configurator | api:Nette\Configurator]. Používá se v zaváděcím souboru `bootstrap.php` umístěném ve složce `app/`.


Vývojářský režim
----------------

Vývojářský režim je automaticky aktivní, pokud vyvíjíme na localhostu. Chceme-li ho povolit i mimo něj, například programátorům přistupujícím z konkrétní IP adresy, použijeme `setDebugMode()`:

/--php
$configurator->setDebugMode('23.75.345.200'); // lze uvést i pole IP adres
\--

Ještě bezpečnější je kombinace IP adresy a cookie. Do cookie `nette-debug` uložíme tajný token, např. `secret1234`, a tímto způsobem aktivujeme vývojářský režim pro programátory přistupující z konkrétní IP adresy a zároveň mající v cookie zmíněný token:

/--php
$configurator->setDebugMode('secret1234@23.75.345.200');
\--

Vývojářský režim můžeme také zcela vypnout:

/--php
$configurator->setDebugMode(false);
\--


Debugovací nástroj Tracy
------------------------

Pro snadné debugování ještě zapneme [Tracy | tracy:] a chyby necháme logovat do uvedeného adresáře:

/--php
$configurator->enableTracy(__DIR__ . '/../log');
\--


Cachování konfigurace
---------------------

Konfigurace se načte a zpracuje jen jednou a výsledek se uloží do cache, což zásadním způsobem aplikaci zrychluje. Proto nejprve nastavíme cestu `setTempDirectory()`, kam se bude cache ukládat.

/--php
$configurator = new Nette\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');
\--


RobotLoader
-----------

Zpravidla budeme chtít automaticky načítat třídy aplikace pomocí [RobotLoaderu | robotloader], musíme ho tedy nastartovat.

/--php
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
\--

Alternativní přístup je nechat třídy načítat pouze přes [Composer | composer] při dodržení PSR-4.


Timezone
--------

Přes konfigurátor můžete nastavit defaultní hodnotu timezone.

/--php
$configurator->setTimeZone('Europe/Prague');
\--


Konfigurační soubory
--------------------

Podle konfiguračních souborů se generuje systémový DI kontejner, který je srdcem celé aplikace.

Konfigurační soubory načteme `addConfig()`:

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
\--

Pokud chceme přidat více konfiguračních souborů, můžeme funkci `addConfig()` zavolat vícekrát.

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
$configurator->addConfig(__DIR__ . '/config/config.local.neon');
if (PHP_SAPI === 'cli') {
	$configurator->addConfig(__DIR__ . '/config/config.cli.neon');
}
\--

Pokud se v konfiguračních souborech objeví prvky se stejnými klíči, budou přepsány, nebo v případě polí sloučeny. Později přidaný soubor má vyšší prioritu než předchozí.


Parametry
---------

Parametry do DI kontejneru můžeme předat metodou `addParameters()`. Hodnoty těchto parametrů musí být známe v době kompilace. Proto se pro různé hodnoty vygenerují různé kontejnery.

/--php
$configurator->addParameters([
	'foo' => 'bar',
	'baz' => '%tempDir%',
]);
\--

Na parameter `foo` se lze v konfiguraci odkázat zápisem `%foo%`. Konfigurátor automaticky přidává parametry `appDir`, `wwwDir`, `tempDir`, `debugMode` a `consoleMode`.


Dynamické parametry
-------------------

Do kontejneru můžeme přidat i dynamické parametry, jejichž hodnota může být při každém požadavku jiná. Tím pádem nezpůsobí přegenerování kontejneru.

/--php
$configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
\--

Jednoduše tak můžeme přidat např. environmentální proměnné, na které se pak lze v konfiguraci odkázat zápisem `%env.variable%`.

/--php
$configurator->addDynamicParameters([
	'env' => $_ENV,
]);
\--


Dynamické služby
----------------

Do DI kontejneru můžeme vložit vlastní instanci třídy, namísto toho, aby ji vytvářel sám. Službu musíme definovat s příznakem `dynamic: yes`.

/--neon
services:
	myservice:
		class: App\Model\MyCustomService
		dynamic: yes
\--

A v bootstrapu do kontejneru vložíme objekt:

/--php
$configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
\--


Vytvoření kontejneru
--------------------

Třídu kontejneru vygeneruje a jeho instanci vrátí `createContainer()`:

/--php
/** @var Nette\DI\Container $container */
$container = $configurator->createContainer();
\--

Ve vývojářském režimu se kontejner automaticky aktualizuje při každé změně kódu nebo konfiguračních souborů. V produkčním režimu se vygeneruje jen jednou a změny v souborech se kvůli výkonu nekontrolují.



Konfigurace frameworku
======================

Samotná konfigurace se obykle zapisuje v NEON souboru. Se syntaxí se můžete seznámit na stránce https://ne-on.org.



Sessions
--------

Lze nastavovat všechny PHP "direktivy":http://www.php.net/manual/en/session.configuration.php (ve formátu camelCase).

/-- neon
	session:
		autoStart: true  # výchozí je smart
		expiration: 10 days
		name: ...
		...
\--

.[tip]
Doporučuje se používat `autoStart: smart`, protože pak automaticky startuje session, pouze pokud je již vytvořena.

Více o [konfiguraci sessions | sessions#Konfigurace sessions].


Application
-----------

/--neon
	application:
		debugger: true # panel do Laděnky
		catchExceptions: ...
		errorPresenter: ...

\--


HTTP hlavičky
-------------

/--neon
http:
	frames: ... # ovlivňuje hlavičku X-Frame-Options

	headers:
		X-Powered-By: MyCMS       # custom HTTP header

    csp:                          # Content Security Policy
        script-src: [
            nonce                 # for browsers that support CSP2
            self, unsafe-inline   # for browsers that support CSP1
        ]
\--

Framework z bezpečnostních důvodů odesílá hlavičku `X-Frame-Options: SAMEORIGIN`, která říká, že stránku lze zobrazit uvnitř jiné stránky (v elementu IFRAME) pouze pokud se nachází na stejné doméně. To může být v některých situacích nežádoucí (například pokud vyvíjíte aplikaci pro Facebook), chování lze proto vypnout nastavením položky `frames: yes`.
Můžete ovlivňovat i další odesílané hlavičky nastavením http.headers. V tomto příkladě nastavujeme hlavičku Content-Security-Policy která nám dovolí stahovat externí soubory (img, script apod.) pouze z naší domény. Více o hlavičce [Content-Security-Policy | http://content-security-policy.com/].


HTTP proxy
----------

Můžete zadat HTTP proxy, aby detekce IP adresy klienta fungovala správně.

/--neon
	http:
		proxy: 127.0.0.1  # IP adresa, rozsah, název hostitele nebo pole těchto hodnot
\--


Uživatelé
---------

Uvedením pole `users` vytvoříme SimpleAuthenticator, uvedením polí `roles` nebo `resources` vytvoříme autorizátor Nette\Security\Permission.

/--neon
	security:
		debugger: true  # panel v Debugger baru

		users:
			frantisek: tajneheslo

		roles:
			guest:
			member:
			admin: [member]  # admin dědí od membera

		resources:
			file:
\--


Maily
-----

Standardní mailer je SendmailMailer, uvedením `smtp` aktivujeme SmtpMailer.

/--neon
	mail:
		smtp: true # zapne SmtpMailer místo SendmailMailer
		# nepovinné nastavení
		host: ...
		port: ...
		username: ...
		password: ...
		secure: # povolené hodnoty jsou ssl, tls nebo null
		timeout: ...
\--


Databáze
--------

Můžeme vytvořit více připojení, které uvedeme pod klíčem `database`. Takto vytvoříme spojení nazvané `default`.

/--neon
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false # panel v Debugger baru
			explain: false  # explain dotazů v Debugger baru
			reflection: discovered # nebo static nebo název třídy
\--

Framework tak vytvoří nejen objekt `Nette\Database\Connection`, ale nastavují mu i pomocné objekty jako reflection & cache a ve vývojářském režimu přidá panel do Debugger baru.

V rámci konfiguračního souboru se můžeme ke službě dostat přes autowiring (`@Nette\Database\Connection`), přes název služby (`@nette.database.default`) nebo si vytvořit alias a ten používat:

/--neon
services:
	database: @nette.database.default

	authorizator: Auth(@database)
\--


Formuláře
---------

V konfiguračním souboru lze změnit výchozí chybové hlášky.

/--neon
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
\--


Šablony Latte
-------------

Lze přepínat HTML a XHTML režim šablon a registrovat vlastní Latte makra. Vlastní makra mohou být zaregistrována buď pomocí jména třídy nebo pomocí reference na službu. Jako výchozí je zavolána metoda `install`, ale to můžete změnit tím, že přidáte dvojtečku a jméno vaší metody.

/--neon
	latte:
		xhtml: yes  # výchozí je no
		macros:
			- App\MyLatteMacros::register  # statická metoda, classname nebo callable
			- @App\MyLatteMacrosFactory    # služba s metodou install
			- @App\MyLatteMacrosFactory::register # služba s metodou register

	services:
		- App\MyLatteMacrosFactory
\--


DI kontejner
------------

/--neon
	di:
		debugger: false  # vypne DI panel v Debugger baru
\--


Tracy debugger
--------------

Lze konfigurovat některé parametry Tracy a nastavovat panely do Debugger baru.

/--neon
	tracy:
		email: %webmasterEmail%
		strictMode: true
		editor: ...
		browser: ...
		bar: # panely do Debugger baru
			- Nette\Bridges\DITracy\ContainerPanel # alias DI Container baru
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)
		blueScreen: # panely do Laděnky
			- DoctrinePanel::renderException
\--


Low-level úpravy
----------------

Všechny uvedené nastavení ovlivňují podobu DI kontejneru a systémových služeb, které vytváří. Všechny tyto služby lze ještě pozměnit na nižší úrovni. Třeba u služby `application.application`, což je standardně objekt `Nette\Application\Application`, můžeme změnit třídu:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
\--

Příznak `alteration` je informativní a říká, že jen modifikujeme existující službu.

Můžeme také doplnit setup:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
		setup:
			- $onStartup = [@resource::init]
\--



Vlastní služby
==============

Konfigurační soubor je místem, kam umísťujeme definice vlastních služeb. Slouží k tomu sekce `services`. Například takto může vypadat definice služby pojmenované `database`, což bude instance `PDO`:

/--neon
# v jednom řádku
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)

# nebo ve dvou řádcích:
	database:
		factory: PDO('mysql:host=127.0.0.1;dbname=test', root, password)

# nebo ve třech řádcích :-)
	database:
		class: PDO
		arguments: ['mysql:host=127.0.0.1;dbname=test', root, password]
\--

Což vygeneruje tovární metodu v DI kontejneru:

/--php
function createServiceDatabase()
{
	return new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'password');
}
\--

Kromě vytvoření instance třídy lze volat i metodu:

/--neon
services:
	database: Database::create(root, password)
\--

Vygenerovaný kód:

/--php
function createServiceDatabase()
{
	return Database::create('root', 'password');
}
\--

V tomto případě je nutné, aby metoda `Database::create()` měla definovaný návratový typ buď pomocí anotace `@return` nebo type hintů v PHP 7.

Službu získáme z DI kontejneru metodou `getService()`:

/--php
$database = $container->getService('database');
\--


Setup
-----

Nad vytvořenou službou můžeme volat metody nebo nastavovat hodnoty proměnným:

/--neon
services:
	database:
		factory: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
		setup:
			- setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)
			- $mode = 123
\--

Vygeneruje:

/--php
public function createServiceDatabase()
{
	$service = new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'password');
	$service->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	$service->mode = 123;
	return $service;
}
\--

Parametry metod mohou být kromě řetězců a čísel i pole, lze vytvářet i nové objekty nebo volat metody:

/--neon
services:
	analyser: My\Analyser(
		FilesystemIterator(%appDir%)
		[dryrun: yes, verbose: no]
		DateTime::createFromFormat('Y-m-d')
	)
\--

Vygeneruje:

/--php
public function createServiceAnalyser()
{
	return new My\Analyser(
		new FilesystemIterator('...'),
		['dryrun' => true, 'verbose' => false],
		DateTime::createFromFormat('Y-m-d')
	);
}
\--


Propojení služeb
----------------

Na jednotlivé služby se odkazujeme pomocí zavináče a názvu služby, takže například `@database`:

/--neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
	articles:
	    factory: Model\ArticleRepository(@database)
		setup:
			- setCacheStorage(@cache.storage)   # cache.storage je systémová služba
\--

Vygeneruje:

/--php
public function createServiceArticles()
{
	$service = new Model\ArticleRepository($this->getService('database'));
	$service->setCacheStorage($this->getService('cache.storage'));
	return $service;
}
\--

Nad odkazovanou službou lze volat metody, nicméně pro jednoduchost místo `->` používáme `::`.

/--neon
services:
	routerFactory: App\Router\Factory(@http.request::getMethod())  # http.request je systémová služba
	router: @routerFactory::create()
\--

Vygeneruje:

/--php
public function createServiceRouterFactory()
{
	return new App\Router\Factory($this->getService('http.request')->getMethod());
}

public function createServiceRouter()
{
	return $this->getService('routerFactory')->create();
}
\--


Autowiring
----------

Autowiring je skvělá vlastnost, která umí automaticky předávat do konstruktoru a dalších metod požadované služby, takže je nemusíme vůbec psát. Ušetří vám spoustu času.

Výše uvedený příklad služby `articles` tak můžeme takto zjednodušit:

/--neon
services:
	articles:
	    factory: Model\ArticleRepository
		setup:
			- setCacheStorage
\--

Autowiring se řídí podle typehintů, takže aby fungoval, musí být třída `ArticleRepository` definována asi takto:

/--php
namespace Model;

class ArticleRepository
{
	public function __construct(\PDO $db)
	{}

	public function setCacheStorage(\Nette\Caching\IStorage $storage)
	{}
}
\--

Služba uvedeného typu, jako je `PDO` nebo `Nette\Caching\IStorage`, musí být v kontejneru právě jedna. Pokud by jich bylo víc, autowiring by nevěděl, kterou z nich předat a vyhodil by výjimku.

Je možné v kontejneru umístit dvě služby stejného typu a jednu z nich z autowiringu vyřadit. Autowiring pak bude fungovat a automaticky bude předávat službu druhou:

/--neon
services:
	mainDatabase: PDO('mysql:host=127.0.0.1;dbname=test', root, password)

	tempDatabase:
		factory: PDO('sqlite::memory:)
		autowired: no

	articles: Model\ArticleRepository    # předá do kontruktoru @mainDatabase
\--

Lze také autowiring omezit jen pro určité třídy nebo rozhraní:

/--php
class Parent
{}

class Child extends Parent implements Int
{}

class ParentDependent
{
	function __construct(Parent $obj)
	{}
}

class ChildDependent
{
	function __construct(Child $obj)
	{}
}
\--

/--neon
services:
	child:
		factory: Child
		autowired: [Parent, Int]

	parentDep: ParentDependent  # autowiring automaticky předá službu @child

	childDep: ChildDependent  # vyhodí výjimku!
\--



Anonymní služby
---------------

Pojmenování služeb je vhodné hlavně ve chvíli, kdy na ně chceme odkazovat z jiných částí konfiguračního souboru. Pokud na službu není odkazováno názvem, není ji potřeba pojmenovávat. Pro anonymní služby použijte následující syntax:

/--neon
services:
	- PDO('sqlite::memory:)

	-
	    factory: Model\ArticleRepository
		setup:
			- setCacheStorage
\--

Nicméně i na anonymní služby lze odkazovat, jen místo názvu uvedeme jejich typ (třídu nebo rozhraní):

/--neon
services:
	router: @App\Router\Factory::create
\--

Službu získáme z DI kontejneru metodou `getByType()`:

/--php
$database = $container->getByType(PDO::class);
\--



Více konfiguračních souborů
===========================

V případě, že chceme pro nastavení používat více propojených konfiguračních souborů, můžeme je uvést v sekci `includes`.

/--code neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

Pokud se v konfiguračních souborech objeví prvky se stejnými klíči, budou přepsány, nebo v případě polí sloučeny. Později vkládaný soubor má vyšší prioritu než předchozí, soubor se sekcí `include` má nejvyšší prioritu.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>výsledek</th>
</tr>
<tr>
	<td>
/--code neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--code neon
items:
	- 3
\--
	</td>
	<td>
/--code neon
items:
	- 1
	- 2
	- 3
\--
	</td>
</tr>
</table>

U polí lze zabránit slučování uvedením vykřičníku za názvem klíče:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>výsledek</th>
</tr>
<tr>
	<td>
/--code neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--code neon
items!:
	- 3
\--
	</td>
	<td>
/--code neon
items:
	- 3
\--
	</td>
</tr>
</table>

{{composer: nette/bootstrap}}
