Czym jest Dependency Injection?
*******************************

.[perex]
Ten rozdział wprowadza Cię w podstawowe praktyki programistyczne, które leżą u podstaw frameworka Nette i których powinieneś przestrzegać pisząc własne aplikacje. Są to podstawy potrzebne do pisania czystego, zrozumiałego i możliwego do utrzymania kodu.

Jeśli nauczysz się i będziesz przestrzegać tych zasad, ramy będą dla Ciebie na każdym kroku. Zajmie się rutynowymi zadaniami za Ciebie i uczyni Cię tak wygodnym, jak to tylko możliwe, abyś mógł skupić się na samej logice.

Zasady, które tu pokażemy, są dość proste. Nie masz się czym martwić.


Pamiętasz swój pierwszy program? .[#toc-remember-your-first-program]
--------------------------------------------------------------------

Nie mamy pojęcia, w jakim języku go napisałeś, ale jeśli był to PHP, prawdopodobnie wyglądałby coś takiego:

```php
function suma(float $a, float $b): float
{
	return $a + $b;
}

echo suma(23, 1); // wykazy 24
```

Kilka banalnych linii kodu, ale tak wiele kluczowych koncepcji w nich ukrytych. Że są zmienne. Ten kod jest rozbity na mniejsze jednostki, którymi są na przykład funkcje. Że przekazujemy im argumenty wejściowe, a one zwracają wyniki. Brakuje tylko warunków i pętli.

Fakt, że przekazujemy dane wejściowe do funkcji, a ona zwraca wynik, jest całkowicie zrozumiałym pojęciem, które jest wykorzystywane w innych dziedzinach, takich jak matematyka.

Funkcja ma sygnaturę, która składa się z jej nazwy, listy parametrów i ich typów, wreszcie typu wartości zwracanej. Jako użytkownicy jesteśmy zainteresowani podpisem; zwykle nie musimy wiedzieć nic o wewnętrznej implementacji.

Teraz wyobraź sobie, że podpis funkcji wygląda tak:

```php
function suma(float $x): float
```

Suma z jednym parametrem? To dziwne... A może tak?

```php
function suma(): float
```

To naprawdę dziwne, prawda? Jak korzystać z tej funkcji?

```php
echo suma(); // co wypisuje?
```

Patrząc na taki kod, bylibyśmy zdezorientowani. Nie tylko początkujący nie zrozumiałby tego, nawet wykwalifikowany programista nie zrozumiałby takiego kodu.

Zastanawiasz się, jak taka funkcja wyglądałaby w rzeczywistości w środku? Skąd miałaby wziąć żmije? Prawdopodobnie zdobyłby je *jakoś* na własną rękę, tak jak w tym przypadku:

```php
function suma(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Odkryliśmy ukryte wiązania do innych funkcji (lub metod statycznych) w ciele funkcji, a żeby dowiedzieć się, skąd tak naprawdę pochodzą addendy, musimy kopać dalej.


Nie w ten sposób! .[#toc-not-this-way]
--------------------------------------

Projekt, który właśnie nam pokazano, jest esencją wielu negatywnych cech:

- podpis funkcji udawał, że nie potrzebuje addera, co nas zmyliło.
- nie mamy pojęcia jak sprawić, by funkcja dodawała dwie inne liczby
- musieliśmy zajrzeć do kodu, żeby zobaczyć, skąd biorą się dodatki.
- odkryliśmy ukryte wiązania
- aby w pełni zrozumieć, musimy zbadać również te wiązania

A czy zamawianie środków produkcji jest w ogóle zadaniem funkcji dodawania? Oczywiście, że nie jest. Jest to tylko odpowiedzialność samej funkcji wyliczającej.

Nie chcemy widzieć tego kodu, a już na pewno nie chcemy go pisać. Lekarstwo jest proste: wróć do podstaw i po prostu użyj parametrów:


```php
function suma(float $a, float $b): float
{
	return $a + $b;
}
```


Zasada #1: używaj parametrów .[#toc-rule-1-use-parameters]
----------------------------------------------------------

Najważniejsza zasada to: **wszystkie dane, których potrzebują funkcje lub klasy, muszą być do nich przekazane**.

Jeśli złamiemy tę zasadę, niemożliwe będzie uczynienie kodu zrozumiałym, czystym i zrównoważonym.

Jeśli podążymy za nim, jesteśmy na dobrej drodze do kodu bez ukrytych ograniczeń. W kierunku kodu, który jest zrozumiały nie tylko dla autora, ale dla każdego, kto go potem przeczyta. Gdzie wszystko jest zrozumiałe z sygnatur funkcji i klas i nie ma potrzeby szukania ukrytych tajemnic w implementacji.

Ta technika przekazywania argumentów jest technicznie nazywana **dependency injection**.

(Nie myl wtrysku zależności z "kontenerem wtrysku zależności"; jest to coś radykalnie innego, a kontenery omówimy w [rozdziale 2 |container]).


Od funkcji do klas .[#toc-from-functions-to-classes]
----------------------------------------------------

A jak do tego odnoszą się zajęcia? Klasa jest bardziej złożonym bytem niż prosta funkcja, ale zasada #1 ma zastosowanie również tutaj. Jest po prostu [więcej sposobów na przekazanie argumentów |passing-dependencies]. Na przykład, dość podobny do przypadku funkcji:

```php
class Matematika
{
	public function suma(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Matematika;
echo $math->suma(23, 1); // 24
```

Lub za pomocą innych metod, lub bezpośrednio przez konstruktora:

```php
class Suma
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function spocti(): float
	{
		return $this->a + $this->b;
	}

}

$suma = new Suma(23, 1);
echo $suma->spocti(); // 24
```

Oba przykłady są całkowicie zgodne z wtryskiem zależności.


Prawdziwe przykłady .[#toc-real-life-examples]
----------------------------------------------

W prawdziwym świecie nie będziesz pisał klas dla dodawania liczb. Przejdźmy do realnych przykładów.

Załóżmy klasę `Article` reprezentującą artykuł na blogu:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// uložíme článek do databáze
	}
}
```

a użycie będzie następujące:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Metoda `save()` zapisuje artykuł w tabeli bazy danych. Wdrożenie go z wykorzystaniem [Nette Database |database:] byłoby bułką z masłem, gdyby nie jeden szkopuł: skąd `Article` ma wziąć połączenie z bazą danych, czyli obiekt klasy `Nette\Database\Connection`?

Wygląda na to, że mamy wiele możliwości. Może wziąć go z jakiegoś miejsca w zmiennej statycznej. Lub odziedziczyć go z klasy, która zapewni połączenie z bazą danych. Albo skorzystaj z singletonu. Albo tak zwane fasady, które są używane w Laravel:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Świetnie, rozwiązaliśmy problem.

Czyż nie?

Przypomnijmy [zasadę nr 1: używaj parametrów |#pravidlo č. 1: používej parametry]: musimy przekazać do nich wszystkie dane, których potrzebuje klasa. Ponieważ jeśli tego nie zrobimy i złamiemy zasadę, to rozpoczęliśmy drogę do brudnego kodu pełnego ukrytych wiązań, niezrozumiałości, a wynikiem będzie aplikacja, która jest bólem w utrzymaniu i rozwoju.

Użytkownik klasy `Article` nie ma pojęcia, gdzie metoda `save()` przechowuje artykuł. W tabeli bazy danych? W którym, chrupiącym czy testowym? I jak można to zmienić?

Użytkownik musi spojrzeć na to, jak zaimplementowana jest metoda `save()`, aby znaleźć zastosowanie metody `DB::insert()`. Musi więc dalej szukać, aby dowiedzieć się, jak ta metoda pozyskuje połączenie z bazą danych. A ukryte wiązania mogą tworzyć dość długi łańcuch.

Ukryte wiązania, fasady Laravel lub zmienne statyczne nigdy nie są obecne w czystym i dobrze zaprojektowanym kodzie. W czystym i dobrze zaprojektowanym kodzie przekazywane są argumenty:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Jeszcze bardziej praktyczne, jak zobaczymy poniżej, będzie to konstruktor:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Jeśli zamierzasz napisać klasę, która wymaga na przykład bazy danych do pracy, nie wymyślaj, skąd ją wziąć, ale miej ją przekazaną do ciebie. Być może jako parametr konstruktora lub innej metody. Uświadom sobie zależności. Przyjmij je w API swojej klasy. Otrzymasz zrozumiały i przewidywalny kod.

Co powiesz na tę klasę, która rejestruje komunikaty o błędach:

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Jak myślisz, czy zastosowaliśmy się do [zasady nr 1: użyj parametrów |#pravidlo č. 1: používej parametry]?

Nie zrobiliśmy tego.

Kluczowa informacja, katalog pliku dziennika, jest *pozyskiwana* przez klasę ze stałej.

Zobacz przykładowe użycie:

```php
$logger = new Logger;
$logger->log('Teplota je 23 °C');
$logger->log('Teplota je 10 °C');
```

Czy nie znając implementacji, byłbyś w stanie odpowiedzieć na pytanie, gdzie są zapisane wiadomości? Czy przyszło ci do głowy, że istnienie stałej LOG_DIR jest wymagane, aby to działało? A czy dałoby się stworzyć drugą instancję, która zapisuje gdzie indziej? Na pewno nie.

Naprawmy tę klasę:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message)
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

Klasa jest teraz znacznie bardziej przejrzysta, bardziej konfigurowalna, a przez to bardziej użyteczna.

```php
$logger = new Logger('/cesta/k/logu.txt');
$logger->log('Teplota je 15 °C');
```


Ale nie obchodzi mnie to! .[#toc-but-i-don-t-care]
--------------------------------------------------

*"Kiedy tworzę obiekt Article i wywołuję save(), nie chcę zajmować się bazą danych, chcę tylko, aby został zapisany do tej, którą ustawiłem w konfiguracji. "*.

* "Kiedy używam Loggera, chcę tylko, aby wiadomość została napisana i nie chcę zajmować się tym, gdzie. Niech zostaną użyte ustawienia globalne "*.

To są słuszne uwagi.

Jako przykład weźmy klasę, która wysyła newslettery i loguje jak to poszło:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emaily byly rozeslány');

		} catch (Exception $e) {
			$logger->log('Došlo k chybě při rozesílání');
			throw $e;
		}
	}
}
```

Z tym, że nowy `Logger`, który nie używa już stałej `LOG_DIR`, wymaga ścieżki do pliku w konstruktorze. Jak to rozwiązać? Klasa `NewsletterDistributor` nie dba o to, gdzie są zapisane wiadomości, chce je tylko zapisać.

Rozwiązaniem jest ponownie [zasada #1: użyj parametrów |#pravidlo č. 1: používej parametry]: przekaż im wszystkie dane, których potrzebuje klasa.

Czyli przekazujemy ścieżkę do dziennika do konstruktora, którego następnie używamy do stworzenia obiektu `Logger`? Nie. Ponieważ ścieżka nie przekazuje danych, których potrzebuje klasa `NewsletterDistributor`; potrzebuje `Logger`. Klasa potrzebuje samego loggera. A my przekażemy to sobie:


```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger,
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emaily byly rozeslány');

		} catch (Exception $e) {
			$this->logger->log('Došlo k chybě při rozesílání');
			throw $e;
		}
	}
}
```

Z podpisów klasy `NewsletterDistributor` wynika teraz, że logowanie jest częścią jej funkcjonalności. I masz możliwość wymiany loggera na inny.

O ile możemy sobie poradzić z pojedynczą instancją loggera w całej aplikacji i przekazywać ją wszędzie tam, gdzie coś jest rejestrowane, to w przypadku klasy `Article` jest inaczej. Będziemy chcieli stworzyć wiele jej instancji. Jak poradzić sobie z wiązaniem bazy danych w konstruktorze? Jako przykład weźmy kontroler, który ma zapisać artykuł do bazy danych po przesłaniu formularza:

```php
class UserController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Możliwe rozwiązanie jest bezpośrednio oferowane: mieć obiekt bazy danych przekazywany przez konstruktora do `UserController` i używać `$article = new Article($this->db)`.

Podobnie jak w poprzednim przykładzie, nie jest to prawidłowe podejście. Baza danych nie jest zależna od `UserController`, ale od `Article`. Ponadto w momencie, gdy konstruktor klasy `Article` zostanie w jakiś sposób zmieniony (dodany zostanie nowy parametr), będziemy musieli zmodyfikować kod we wszystkich miejscach, w których tworzone są instancje.

Rozwiązaniem są fabryki.


Zasada nr 2: używaj fabryk .[#toc-rule-2-use-factories]
-------------------------------------------------------

Usuwając ukryte wiązania i przekazując wszystkie dane jako argumenty, otrzymujemy bardziej konfigurowalne i elastyczne klasy. I dlatego potrzebujemy czegoś innego, aby stworzyć i skonfigurować te bardziej elastyczne klasy. Nazwiemy to fabryką.

Zasadą jest: jeśli klasa ma zależności, pozostaw tworzenie ich instancji fabryce.

Fabryki są mądrzejszym zamiennikiem dla operatora `new` w świecie zastrzyków zależności.


Fabryka .[#toc-factory]
-----------------------

Fabryka to klasa, która tworzy i konfiguruje obiekty. Fabryka produkująca `Article` będzie się nazywać `ArticleFactory`, a jej wykorzystanie w sterowniku będzie następujące:

```php
class UserController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// pozwól fabryce stworzyć obiekt
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Implementacja fabryki może wyglądać tak:


```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

W tym momencie, gdy zmienia się sygnatura konstruktora klasy `Article`, jedyną częścią kodu, która musi na to reagować, jest sama fabryka `ArticleFactory`. Każdy inny kod, który pracuje z obiektami `Article`, taki jak `UserController`, pozostaje bez wpływu.

Być może pukacie się teraz w czoło zastanawiając się, jak my właściwie sobie pomogliśmy. Ilość kodu wzrosła i przeniosła się z kontrolera do osobnej klasy. Nette DI ma jednak ukrytego asa w rękawie. Rozumie pojęcie fabryk i może nawet [napisać dla nas |factory] taki serwis. Więc zamiast klasy `ArticleFactory` moglibyśmy po prostu stworzyć interfejs:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Ale wyprzedzamy się, do tego dojdziemy za chwilę.


Podsumowanie .[#toc-summary]
----------------------------

Na początku tego rozdziału obiecaliśmy zademonstrować prostą zasadę projektowania aplikacji. Choć sama zasada jest prosta (przekazuj klasom dane, których potrzebują), to to co z niej wynika wymaga większego zastanowienia. Zapraszam do przeczytania tego rozdziału kilka razy.

Programiści, którzy wyrzucili stare nawyki i zaczęli konsekwentnie używać dependency injection, uważają to za przełomowy moment w swoim życiu zawodowym. Otworzyło to świat jasnych i trwałych zastosowań.

Teraz przyjrzymy się, czym jest [Dependency Injection Container |container].
