Elementy formularza
*******************

.[perex]
Przegląd standardowych elementów formularza.


addText(string|int $name, $label=null): TextInput .[method]
===========================================================

Dodaje jednolinijkowe pole tekstowe (klasa [TextInput |api:Nette\Forms\Controls\TextInput]). Jeśli użytkownik nie wypełni pola, zwraca pusty ciąg `''`, lub `setNullable()` może być użyty do określenia, że zwraca `null`.

```php
$form->addText('name', 'Jméno:')
	->setRequired()
	->setNullable();
```

Automatycznie waliduje UTF-8, obcina lewe i prawe spacje oraz usuwa przerwy w linii, które mógłby wysłać atakujący.

Maksymalna długość może być ograniczona za pomocą `setMaxLength()`. Modyfikacja wartości wprowadzonej przez użytkownika umożliwia [addFilter() |validation#Modifying-Input-Values].

Używając `setHtmlType()`, [charakter |https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_input_types] elementu wejściowego można zmienić na `search`, `tel`, `url`, `range`, `date`, `datetime-local`, `month`, `time`, `week`, `color`. Zalecamy użycie [addInteger |#addInteger] i [addEmail |#addEmail] zamiast typów `number` i `email`, które mają walidację po stronie serwera.

```php
$form->addText('color', 'Vyberte barvu:')
	->setHtmlType('color')
	->addRule($form::Pattern, 'invalid value', '[0-9a-f]{6}');
```

Element może być ustawiony na empty-value, co jest jak wartość domyślna, ale jeśli użytkownik nie zmieni go, element zwróci pusty ciąg lub `null`.

```php
$form->addText('phone', 'Telefon:')
	->setHtmlType('tel')
	->setEmptyValue('+420');
```


addTextArea(string|int $name, $label=null): TextArea .[method]
==============================================================

Dodaje tablicę do wprowadzania tekstu wieloliniowego (klasa [TextArea |api:Nette\Forms\Controls\TextArea]). Jeśli użytkownik nie wypełni pola, zwraca pusty ciąg `''`, lub `setNullable()` może być użyty do określenia, że zwraca `null`.

```php
$form->addTextArea('note', 'Poznámka:')
	->addRule($form::MaxLength, 'Poznámka je příliš dlouhá', 10000);
```

Automatycznie sprawdza UTF-8 i normalizuje separatory linii do `\n`. W przeciwieństwie do pola wejściowego z jednym wierszem, nie występuje przycinanie spacji.

Maksymalna długość może być ograniczona przy użyciu `setMaxLength()`. Funkcja [addFilter() |validation#Modifying-Input-Values] pozwala na modyfikację wartości wprowadzonej przez użytkownika. Wartość pusta może być ustawiona przy użyciu `setEmptyValue()`.


addInteger(string|int $name, $label=null): TextInput .[method]
==============================================================

Dodaje pole do wprowadzania liczby całkowitej (klasa [TextInput |api:Nette\Forms\Controls\TextInput]). Zwraca liczbę całkowitą lub `null`, jeśli użytkownik nic nie wprowadzi.

```php
$form->addInteger('level', 'Úroveň:')
	->setDefaultValue(0)
	->addRule($form::Range, 'Úroveň musí být v rozsahu mezi %d a %d.', [0, 100]);
```


addEmail(string|int $name, $label=null): TextInput .[method]
============================================================

Dodaje pole do wpisania adresu e-mail (klasa [TextInput |api:Nette\Forms\Controls\TextInput]). Jeśli użytkownik nie wypełni pola, zwraca pusty ciąg `''`, lub można określić `setNullable()`, aby zwrócić `null`.

```php
$form->addEmail('email', 'E-mail:');
```

Sprawdza, czy podana wartość jest prawidłowym adresem e-mail. Nie sprawdza, czy domena faktycznie istnieje, sprawdzana jest tylko składnia. Automatycznie waliduje UTF-8, obcina lewe i prawe spacje.

Maksymalna długość może być ograniczona przy użyciu `setMaxLength()`. [AddFilter() |validation#Modifying-Input-Values] może być użyty do modyfikacji wartości wprowadzonej przez użytkownika. Pusta wartość może być ustawiona przy użyciu `setEmptyValue()`.


addPassword(string|int $name, $label=null): TextInput .[method]
===============================================================

Dodaje pole do wpisania hasła (klasa [TextInput |api:Nette\Forms\Controls\TextInput]).

```php
$form->addPassword('password', 'Heslo:')
	->setRequired()
	->addRule($form::MinLength, 'Heslo musí mít alespoň %d znaků', 8)
	->addRule($form::Pattern, 'Musí obsahovat číslici', '.*[0-9].*');
```

Gdy formularz zostanie ponownie wyświetlony, pole będzie puste. Automatycznie waliduje UTF-8, obcina lewe i prawe spacje oraz usuwa przerwy w linii, które mogłyby zostać wysłane przez atakującego.


addCheckbox(string|int $name, $caption=null): Checkbox .[method]
================================================================

Dodaje pole wyboru (klasa Checkbox). Zwraca wartość albo `true` albo `false`, w zależności od tego czy jest zaznaczona.

```php
$form->addCheckbox('agree', 'Souhlasím s podmínkami')
	->setRequired('Je potřeba souhlasit s podmínkami');
```


addCheckboxList(string|int $name, $label=null, array $items=null): CheckboxList .[method]
=========================================================================================

Dodaje pola wyboru do zaznaczania wielu elementów (klasa [CheckboxList |api:Nette\Forms\Controls\CheckboxList]). Zwraca tablicę kluczy dla wybranych elementów. Metoda `getSelectedItems()` zwraca wartości zamiast kluczy.

```php
$form->addCheckboxList('colors', 'Barvy:', [
	'r' => 'červená',
	'g' => 'zelená',
	'b' => 'modrá',
]);
```

Przekaż tablicę oferowanych elementów jako trzeci parametr lub metodą `setItems()`.

Korzystanie z `setDisabled(['r', 'g'])` metoda do dezaktywacji poszczególnych elementów.

Element ten automatycznie sprawdza, czy nie doszło do oszustwa oraz czy wybrane pozycje są rzeczywiście jednymi z oferowanych i nie zostały dezaktywowane. Metoda `getRawValue()` może być użyta do odzyskania elementów wysłanych bez tego ważnego sprawdzenia.

Podczas ustawiania domyślnych wybranych elementów sprawdza również, czy są one jednym z oferowanych elementów, w przeciwnym razie rzuca wyjątek. To sprawdzanie można wyłączyć za pomocą `checkDefaultValue(false)`.


addRadioList(string|int $name, $label=null, array $items=null): RadioList .[method]
===================================================================================

Dodaje przyciski radiowe (klasa [RadioList |api:Nette\Forms\Controls\RadioList]). Zwraca klucz wybranego elementu lub `null`, jeśli użytkownik nic nie wybrał. Metoda `getSelectedItem()` zwraca wartość zamiast klucza.

```php
$sex = [
	'm' => 'muž',
	'f' => 'žena',
];
$form->addRadioList('gender', 'Pohlaví:', $sex);
```

Przekaż tablicę oferowanych elementów jako trzeci parametr lub metody `setItems()`.

Korzystanie z `setDisabled(['m', 'f'])` metoda do dezaktywacji poszczególnych elementów.

Element automatycznie sprawdza, czy nie doszło do podebrania oraz czy wybrana pozycja jest rzeczywiście jedną z oferowanych pozycji i nie została dezaktywowana. Metoda `getRawValue()` może być użyta do odzyskania przesłanego elementu bez tego ważnego sprawdzenia.

Po ustawieniu domyślnego wybranego elementu sprawdza również, czy jest to jeden z oferowanych elementów, w przeciwnym razie rzuca wyjątek. To sprawdzanie można wyłączyć za pomocą `checkDefaultValue(false)`.


addSelect(string|int $name, $label=null, array $items=null): SelectBox .[method]
================================================================================

Dodaje pole wyboru (klasa [SelectBox |api:Nette\Forms\Controls\SelectBox]). Zwraca klucz wybranego elementu lub `null`, jeśli użytkownik nic nie wybrał. Metoda `getSelectedItem()` zwraca wartość zamiast klucza.

```php
$countries = [
	'CZ' => 'Česká Republika',
	'SK' => 'Slovensko',
	'GB' => 'Velká Británie',
];

$form->addSelect('country', 'Země:', $countries)
	->setDefaultValue('SK');
```

Przekaż tablicę oferowanych elementów jako trzeci parametr lub przez metodę `setItems()` Elementy mogą być tablicami dwuwymiarowymi:

```php
$countries = [
	'Europe' => [
		'CZ' => 'Česká Republika',
		'SK' => 'Slovensko',
		'GB' => 'Velká Británie',
	],
	'CA' => 'Kanada',
	'US' => 'USA',
	'?'  => 'jiná',
];
```

W przypadku select boxów pierwszy element ma często specjalne znaczenie, służy jako call to action. Do dodania takiego elementu służy metoda `setPrompt()`.

```php
$form->addSelect('country', 'Země:', $countries)
	->setPrompt('Zvolte zemi');
```

Korzystanie z `setDisabled(['CZ', 'SK'])` metoda do dezaktywacji poszczególnych elementów.

Pozycja automatycznie sprawdza, czy nie doszło do oszustwa oraz czy wybrany przedmiot jest rzeczywiście jednym z oferowanych przedmiotów i nie został dezaktywowany. Metoda `getRawValue()` może być użyta do odzyskania przesłanego elementu bez tego ważnego sprawdzenia.

Gdy ustawiony jest domyślny wybrany element, sprawdza również, czy jest to jeden z oferowanych elementów, w przeciwnym razie rzuca wyjątek. To sprawdzanie można wyłączyć za pomocą `checkDefaultValue(false)`.


addMultiSelect(string|int $name, $label=null, array $items=null): MultiSelectBox .[method]
==========================================================================================

Dodaje select box do wyboru wielu elementów (klasa [MultiSelectBox |api:Nette\Forms\Controls\MultiSelectBox]). Zwraca tablicę kluczy dla wybranych elementów. Metoda `getSelectedItems()` zwraca wartości zamiast kluczy.

```php
$form->addMultiSelect('countries', 'Země:', $countries);
```

Przekaż tablicę oferowanych elementów jako trzeci parametr lub przez metodę `setItems()` Elementy mogą być tablicami dwuwymiarowymi.

Korzystanie z `setDisabled(['CZ', 'SK'])` aby dezaktywować poszczególne elementy.

Element ten automatycznie sprawdza, czy nie doszło do oszustwa oraz czy wybrane pozycje są rzeczywiście jednymi z oferowanych i nie zostały dezaktywowane. Metoda `getRawValue()` może być użyta do odzyskania przesłanych elementów bez tego ważnego sprawdzenia.

Podczas ustawiania domyślnych wybranych elementów sprawdza również, czy są one jednym z oferowanych elementów, w przeciwnym razie rzuca wyjątek. To sprawdzanie można wyłączyć za pomocą `checkDefaultValue(false)`.


addUpload(string|int $name, $label=null): UploadControl .[method]
=================================================================

Dodaje pole wyboru dla przesyłania plików (klasa [UploadControl |api:Nette\Forms\Controls\UploadControl]). Zwraca obiekt [FileUpload |http:request#FileUpload] nawet jeśli użytkownik nie przesłał żadnego pliku, co można wykryć za pomocą metody `FileUpload::hasFile()`.

```php
$form->addUpload('avatar', 'Avatar:')
	->addRule($form::Image, 'Avatar musí být JPEG, PNG, GIF or WebP.')
	->addRule($form::MaxFileSize, 'Maximální velikost je 1 MB.', 1024 * 1024);
```

Jeśli plik nie zostanie załadowany poprawnie, formularz nie zostanie pomyślnie przesłany i zostanie wyświetlony błąd. Tzn. Jeśli przesłanie jest udane, nie ma potrzeby sprawdzania metody `FileUpload::isOk()`.

Nigdy nie ufaj oryginalnej nazwie pliku zwróconej przez metodę `FileUpload::getName()`, klient mógł przesłać złośliwą nazwę pliku z zamiarem uszkodzenia lub zhakowania twojej aplikacji.

Reguły `MimeType` i `Image` wykrywają żądany typ na podstawie sygnatury pliku i nie sprawdzają jego integralności. Możesz określić, czy obraz nie jest uszkodzony, na przykład próbując go [odzyskać |http:request#toImage].


addMultiUpload(string|int $name, $label=null): UploadControl .[method]
======================================================================

Dodaje pole wyboru do przesyłania wielu plików jednocześnie (klasa [UploadControl |api:Nette\Forms\Controls\UploadControl]). Zwraca tablicę obiektów [FileUpload |http:request#FileUpload]. Metoda `FileUpload::hasFile()` dla każdego z nich zwróci `true`.

```php
$form->addMultiUpload('files', 'Soubory:')
	->addRule($form::MaxLength, 'Maximálně lze nahrát %d souborů', 10);
```

Jeśli jakikolwiek plik nie zostanie załadowany poprawnie, formularz nie zostanie pomyślnie przesłany i zostanie wyświetlony błąd. Tzn. Jeśli złożenie jest udane, nie ma potrzeby sprawdzania metody `FileUpload::isOk()`.

Nigdy nie ufaj oryginalnym nazwom plików zwracanym przez metodę `FileUpload::getName()`, klient mógł przesłać złośliwą nazwę pliku z zamiarem uszkodzenia lub zhakowania twojej aplikacji.

Reguły `MimeType` i `Image` wykrywają żądany typ na podstawie sygnatury pliku i nie sprawdzają jego integralności. Możesz określić, czy obraz nie jest uszkodzony, na przykład próbując go [odzyskać |http:request#toImage].


addHidden(string|int $name, string $default=null): HiddenField .[method]
========================================================================

Dodaje ukryte pole (klasa [HiddenField |api:Nette\Forms\Controls\HiddenField]).

```php
$form->addHidden('userid');
```

Używając `setNullable()`, można go ustawić, aby zwracał `null` zamiast pustego łańcucha. Modyfikuje wartość przesłaną przez [addFilter() |validation#Modifying-Input-Values].


addSubmit(string|int $name, $caption=null): SubmitButton .[method]
==================================================================

Dodaje przycisk wysyłania (klasa [SubmitButton |api:Nette\Forms\Controls\SubmitButton]).

```php
$form->addSubmit('submit', 'Odeslat');
```

Możliwe jest również posiadanie wielu przycisków submit w formularzu:

```php
$form->addSubmit('register', 'Register');
$form->addSubmit('cancel', 'Cancel');
```

Aby dowiedzieć się, który z nich został kliknięty, użyj:

```php
if ($form['register']->isSubmittedBy()) {
  // ...
}
```

Jeśli nie chcesz walidować całego formularza po kliknięciu przycisku (na przykład dla przycisków *Cancel* lub *Preview*), użyj funkcji [setValidationScope() |validation#Disabling-Validation].


addButton(string|int $name, $caption): Button .[method]
=======================================================

Dodaje przycisk (klasa [Button |api:Nette\Forms\Controls\Button]), który nie posiada funkcji wysyłania. Może więc zostać wykorzystany do jakiejś innej funkcji, np. wywołania funkcji JavaScript po kliknięciu.

```php
$form->addButton('raise', 'Zvýšit plat')
	->setHtmlAttribute('onclick', 'raiseSalary()');
```


addImageButton(string|int $name, string $src=null, string $alt=null): ImageButton .[method]
===========================================================================================

Dodaje przycisk submit w postaci obrazka (klasa [ImageButton |api:Nette\Forms\Controls\ImageButton]).

```php
$form->addImageButton('submit', '/path/to/image');
```

W przypadku korzystania z wielu przycisków wysyłania, możliwe jest sprawdzenie, który z nich został kliknięty przez `$form['submit']->isSubmittedBy()`.


addContainer(string|int $name): Container .[method]
===================================================

Dodaje podformularz (klasa [Container |api:Nette\Forms\Container]), czyli kontener, do którego można dodawać inne elementy w taki sam sposób, jak dodaje się je do formularza. Sprawdzają się również metody `setDefaults()` lub `getValues()`.

```php
$sub1 = $form->addContainer('first');
$sub1->addText('name', 'Your name:');
$sub1->addEmail('email', 'Email:');

$sub2 = $form->addContainer('second');
$sub2->addText('name', 'Your name:');
$sub2->addEmail('email', 'Email:');
```

Następnie zwraca przekazane dane jako strukturę wielowymiarową:

```php
[
	'first' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
	'second' => [
		'name' => /* ... */,
		'email' => /* ... */,
	],
]
```


Przegląd ustawień .[#toc-overview-of-settings]
==============================================

Dla wszystkich elementów możemy wywołać następujące metody (pełny przegląd znajduje się w [dokumentacji API |https://api.nette.org/forms/master/Nette/Forms/Controls.html]):

.[table-form-methods language-php]
| `setDefaultValue($value)`| ustawia wartość domyślną
| `getValue()` | uzyskać aktualną wartość
| `setOmitted()` | [pomiń wartość |#Omitted-Values]
| `setDisabled()` | [dezaktywować elementy |#Disabling-Inputs]

Rendering:
.[table-form-methods language-php]
| `setCaption($caption)`| zmienia etykietę elementu
| `setTranslator($translator)` | ustawia [kompilator |rendering#translating]
| `setHtmlAttribute($name, $value)` | ustawia [atrybut HTML |rendering#HTML-Attributes] elementu
| `setHtmlId($id)` | ustawia atrybut HTML `id`
| `setHtmlType($type)` | ustawia atrybut HTML `type`
| `setHtmlName($name)`| ustawia atrybut HTML `name`
| `setOption($key, $value)` | [Ustawienia renderingu |rendering#Options]

Walidacja:
.[table-form-methods language-php]
| `setRequired()` | [Element obowiązkowy |validation]
| `addRule()` | Ustawienia [reguł walidacji |validation#Rules]
| `addCondition()`, `addConditionOn()` | Ustawić [warunek walidacji |validation#Conditions]
| `addError($message)`| [Przekazanie komunikatu o błędzie |validation#Processing-Errors]

Poniższe metody można wywołać dla elementów `addText()`, `addPassword()`, `addTextArea()`, `addEmail()`, `addInteger()`:

.[table-form-methods language-php]
| `setNullable()` | określa, czy funkcja getValue() zwróci `null` zamiast pustego łańcucha
| `setEmptyValue($value)`| ustawia specjalną wartość, która jest traktowana jako pusty łańcuch
| `setMaxLength($length)`| określa maksymalną liczbę dozwolonych znaków
| `addFilter($filter)`| [edit input |validation#Modifying-Input-Values]


Pomijanie wartości .[#toc-omitted-values]
-----------------------------------------

Jeśli nie interesuje nas wartość wypełniona przez użytkownika, możemy użyć `setOmitted()`, aby pominąć ją w wyniku metody `$form->getValues()` lub w danych przekazywanych do handlerów. Jest to przydatne dla różnych sprawdzarek haseł, elementów antyspamowych itp.

```php
$form->addPassword('passwordVerify', 'Heslo pro kontrolu:')
	->setRequired('Zadejte prosím heslo ještě jednou pro kontrolu')
	->addRule($form::Equal, 'Hesla se neshodují', $form['password'])
	->setOmitted();
```


Dezaktywacja elementów .[#toc-disabling-inputs]
-----------------------------------------------

Elementy mogą być dezaktywowane za pomocą `setDisabled()`. Użytkownik nie może edytować takich elementów.

```php
$form->addText('username', 'Uživatelské jméno:')
	->setDisabled();
```

Należy pamiętać, że elementy wyłączone nie są w ogóle wysyłane przez przeglądarkę do serwera, więc nie znajdziemy ich w danych zwracanych przez funkcję `$form->getValues()`.

Jeśli ustawisz wartość domyślną dla elementu, musisz to zrobić dopiero po jego dezaktywacji:

```php
$form->addText('username', 'Uživatelské jméno:')
	->setDisabled()
	->setDefaultValue($userName);
```


Elementy niestandardowe .[#toc-custom-controls]
===============================================

Oprócz szerokiej gamy wbudowanych elementów formularza, możesz dodać do swojego formularza elementy niestandardowe w następujący sposób:

```php
$form->addComponent(new DateInput('Datum:'), 'date');
// alternativní syntax: $form['date'] = new DateInput('Datum:');
```

Istnieje sposób definiowania nowych metod formularza do dodawania niestandardowych elementów (np. `$form->addZip()`). Są one nazywane metodami rozszerzenia. Wadą jest to, że podpowiedzi edytora nie będą dla nich działać.

```php
use Nette\Forms\Container;

// přidáme metodu addZip(string $name, string $label = null)
Container::extensionMethod('addZip', function (Container $form, string $name, string $label = null) {
	return $form->addText($name, $label)
		->addRule($form::Pattern, 'Alespoň 5 čísel', '[0-9]{5}');
});

// použití
$form->addZip('zip', 'Kod ZIP:');
```


Elementy niskiego poziomu .[#toc-low-level-fields]
==================================================

Można również wykorzystać elementy, które zapisujemy tylko w szablonie i nie dodajemy ich do formularza, korzystając z jednej z metod `$form->addXyz()`. Przykładowo, jeśli wypisujemy rekordy z bazy danych i nie wiemy z góry, ile ich będzie i jakie będą miały ID, a chcemy wyświetlić checkbox lub radio button dla każdego wiersza, wystarczy, że zakodujemy to w szablonie:

```latte
{foreach $items as $item}
	<p><input type=checkbox name="sel[]" value={$item->id}> {$item->name}</p>
{/foreach}
```

A po złożeniu wartości dowiemy się:

```php
$data = $form->getHttpData($form::DataText, 'sel[]');
$data = $form->getHttpData($form::DataText | $form::DataKeys, 'sel[]');
```

gdzie pierwszy parametr to typ elementu (`DataFile` dla `type=file`, `DataLine` dla wpisów jednowierszowych jak `text`, `password`, `email` itd. oraz `DataText` dla wszystkich pozostałych), a drugi parametr `sel[]` odpowiada nazwie atrybutu HTML. Typ elementu można połączyć z wartością `DataKeys`, która zachowuje klucze elementów. Jest to szczególnie przydatne dla `select`, `radioList` i `checkboxList`.

Co ważne, `getHttpData()` zwraca sanitowaną wartość, w takim przypadku zawsze będzie to tablica prawidłowych łańcuchów UTF-8, bez względu na to, co atakujący może próbować zasunąć serwer. Jest to podobne do pracy bezpośrednio z `$_POST` lub `$_GET`, ale z ważną różnicą, że zawsze zwraca czyste dane, tak jak jesteś przyzwyczajony do standardowych elementów formularza Nette.
