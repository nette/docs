Oturumlar (Sessions)
********************

<div class=perex>

HTTP durumsuz bir protokoldür, ancak neredeyse her uygulamanın istekler arasında durumu koruması gerekir, örneğin alışveriş sepetinin içeriği. İşte bu noktada oturumlar devreye girer. Göstereceğimiz konular:

- oturumları nasıl kullanacağınız
- isim çakışmalarını nasıl önleyeceğiniz
- sona erme süresini nasıl ayarlayacağınız

</div>

Oturumları kullanırken, her kullanıcıya oturum kimliği adı verilen benzersiz bir tanımlayıcı verilir ve bu tanımlayıcı bir çerezde iletilir. Bu, oturum verileri için bir anahtar görevi görür. Tarayıcı tarafında saklanan çerezlerin aksine, oturum verileri sunucu tarafında saklanır.

Oturumu [yapılandırma |configuration#session] içinde ayarlarız, özellikle sona erme süresi seçeneği önemlidir.

Oturum yönetimi [api:Nette\Http\Session] nesnesi tarafından gerçekleştirilir. Bu nesneye [bağımlılık enjeksiyonu |dependency-injection:passing-dependencies] aracılığıyla erişebilirsiniz. Presenter'larda sadece `$session = $this->getSession()` çağırmanız yeterlidir.

→ [Kurulum ve gereksinimler |@home#Instalace]


Oturumu Başlatma
================

Nette, varsayılan olarak oturumu okumaya veya veri yazmaya başladığımızda otomatik olarak başlatır. Oturum manuel olarak `$session->start()` ile başlatılır.

PHP, oturum başlatıldığında önbelleğe almayı etkileyen HTTP başlıklarını gönderir, bkz. [php:session_cache_limiter], ve muhtemelen oturum kimliği içeren bir çerez de gönderir. Bu nedenle, herhangi bir çıktıyı tarayıcıya göndermeden önce oturumu her zaman başlatmak gerekir, aksi takdirde bir istisna atılır. Bu nedenle, sayfa oluşturma sırasında oturumun kullanılacağını biliyorsanız, önceden manuel olarak başlatın, örneğin presenter'da.

Geliştirme modunda, Tracy oturumu başlatır çünkü onu Tracy Bar'daki yönlendirme ve AJAX istekleri çubuklarını görüntülemek için kullanır.


Bölümler
========

Saf PHP'de, oturum veri deposu `$_SESSION` genel değişkeni aracılığıyla erişilebilen bir dizi olarak gerçekleştirilir. Sorun şu ki, uygulamalar genellikle birbirine bağlı olmayan bir dizi parçadan oluşur ve hepsi yalnızca bir diziye erişebiliyorsa, er ya da geç bir isim çakışması meydana gelir.

Nette Framework, tüm alanı bölümlere ( [api:Nette\Http\SessionSection] nesneleri) ayırarak sorunu çözer. Her birim daha sonra benzersiz bir ada sahip kendi bölümünü kullanır ve artık çakışma olamaz.

Bölümü oturumdan alırız:

```php
$section = $session->getSection('benzersiz isim');
```

Presenter'da sadece parametre ile `getSession()` kullanın:

```php
// $this bir Presenter'dır
$section = $this->getSession('benzersiz isim');
```

Bir bölümün varlığı `$session->hasSection('benzersiz isim')` metoduyla kontrol edilebilir.

Bölümün kendisiyle çalışmak daha sonra `set()`, `get()` ve `remove()` metotlarıyla çok kolaydır:

```php
// değişken yazma
$section->set('userName', 'franta');

// değişken okuma, yoksa null döndürür
echo $section->get('userName');

// değişkeni iptal etme
$section->remove('userName');
```

Bölümdeki tüm değişkenleri almak için `foreach` döngüsü kullanılabilir:

```php
foreach ($section as $key => $val) {
	echo "$key = $val";
}
```


Sona Erme Süresini Ayarlama
---------------------------

Tek tek bölümler veya hatta tek tek değişkenler için sona erme süresi ayarlamak mümkündür. Böylece kullanıcının oturum açma süresini 20 dakika sonra sona erdirebilir, ancak sepetin içeriğini hatırlamaya devam edebiliriz.

```php
// bölüm 20 dakika sonra sona erecek
$section->setExpiration('20 minutes');
```

Tek tek değişkenler için sona erme süresini ayarlamak için `set()` metodunun üçüncü parametresi kullanılır:

```php
// 'flash' değişkeni 30 saniye sonra sona erecek
$section->set('flash', $message, '30 seconds');
```

.[note]
Tüm oturumun sona erme süresinin (bkz. [oturum yapılandırması |configuration#session]) tek tek bölümler veya değişkenler için ayarlanan süreye eşit veya daha uzun olması gerektiğini unutmayın.

Daha önce ayarlanan sona erme süresinin iptali `removeExpiration()` metoduyla sağlanır. Tüm bölümün anında iptali `remove()` metoduyla sağlanır.


$onStart, $onBeforeWrite Olayları
---------------------------------

`Nette\Http\Session` nesnesinin [olaylar |nette:glossary#Události] `$onStart` ve `$onBeforeWrite` vardır, bu nedenle oturum başlatıldıktan sonra veya diske yazılmadan ve ardından sonlandırılmadan önce çağrılacak geri aramalar ekleyebilirsiniz.

```php
$session->onBeforeWrite[] = function () {
	// oturum verilerini yazacağız
	$this->section->set('basket', $this->basket);
};
```


Oturum Yönetimi
===============

Oturum yönetimi için `Nette\Http\Session` sınıfının metotlarına genel bakış:

<div class=wiki-methods-brief>


start(): void .[method]
-----------------------
Oturumu başlatır.


isStarted(): bool .[method]
---------------------------
Oturum başlatıldı mı?


close(): void .[method]
-----------------------
Oturumu sonlandırır. Oturum, betiğin çalışması sonunda otomatik olarak sonlandırılır.


destroy(): void .[method]
-------------------------
Oturumu sonlandırır ve siler.


exists(): bool .[method]
------------------------
HTTP isteği oturum kimliği içeren bir çerez içeriyor mu?


regenerateId(): void .[method]
------------------------------
Yeni rastgele bir oturum kimliği oluşturur. Veriler korunur.


getId(): string .[method]
-------------------------
Oturum kimliğini döndürür.

</div>


Yapılandırma
------------

Oturumu [yapılandırma |configuration#session] içinde ayarlarız. DI konteyneri kullanmayan bir uygulama yazıyorsanız, yapılandırma için şu metotlar kullanılır. Oturum başlatılmadan önce çağrılmalıdırlar.

<div class=wiki-methods-brief>


setName(string $name): static .[method]
---------------------------------------
Oturum kimliğinin iletildiği çerezin adını ayarlar. Standart ad `PHPSESSID`'dir. Aynı web sitesi içinde birkaç farklı uygulama çalıştırıyorsanız kullanışlıdır.


getName(): string .[method]
---------------------------
Oturum kimliğinin iletildiği çerezin adını döndürür.


setOptions(array $options): static .[method]
--------------------------------------------
Oturumu yapılandırır. Tüm PHP [oturum yönergeleri |https://www.php.net/manual/en/session.configuration.php] (camelCase biçiminde, ör. `session.save_path` yerine `savePath` yazılır) ve ayrıca [readAndClose |https://www.php.net/manual/en/function.session-start.php#refsect1-function.session-start-parameters] ayarlanabilir.


setExpiration(?string $time): static .[method]
----------------------------------------------
Oturumun sona ereceği etkinlik dışı kalma süresini ayarlar.


setCookieParameters(string $path, ?string $domain=null, ?bool $secure=null, ?string $samesite=null): static .[method]
---------------------------------------------------------------------------------------------------------------------
Çerez parametrelerini ayarlar. Parametrelerin varsayılan değerlerini [yapılandırma |configuration#Session cookie] içinde değiştirebilirsiniz.


setSavePath(string $path): static .[method]
-------------------------------------------
Oturum dosyalarının saklandığı dizini ayarlar.


setHandler(\SessionHandlerInterface $handler): static .[method]
---------------------------------------------------------------
Özel bir işleyici ayarlar, bkz. [PHP belgeleri |https://www.php.net/manual/en/class.sessionhandlerinterface.php].

</div>


Önce Güvenlik
=============

Sunucu, istekler aynı oturum kimliğiyle eşlik ettiği sürece sürekli olarak aynı kullanıcıyla iletişim kurduğunu varsayar. Güvenlik mekanizmalarının görevi, bunun gerçekten böyle olmasını ve tanımlayıcının çalınmasının veya sahtesinin yapılmasının mümkün olmamasını sağlamaktır.

Nette Framework bu nedenle PHP yönergelerini, oturum kimliğini yalnızca çerezde iletecek, JavaScript'e erişilemez hale getirecek ve URL'deki olası tanımlayıcıları yok sayacak şekilde doğru bir şekilde yapılandırır. Ayrıca, kullanıcının oturum açması gibi kritik anlarda yeni bir oturum kimliği oluşturur.

PHP yapılandırması için ini_set fonksiyonu kullanılır, ancak maalesef bazı hostingler bunu yasaklar. Bu sizin hostinginiz için de geçerliyse, onlarla fonksiyonu etkinleştirmelerini veya en azından sunucuyu yapılandırmalarını istemeyi deneyin. .[note]
