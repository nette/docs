HTTP routing in CLI
*******************

.[perex]
Need to run various tasks from the command line, in which you must form url address defined route, and do not know how to do it? Read more ...



Problem
=======
How do I get the correct routing and events in Presenter mode CLI (command line) as well as HTTP (url address), I did not write the url address "hard" and heavily vypocen√© not come to rue wasted?

The simplest problem is to explain some examples:
- Let's say we have a cron (job running in the background) that sends emails to users with a link to login.
- Cron run in CLI mode, the routing ensures we `Nette \ Application \ CliRouter`.
- We also have to rue formed HTTP requests `Nette \ Application \` Route, which describe the features of a url address for some action.

Our example contains three events. Two HTTP request and one for CLI request.

A simple `Presenter` operating these three shares might look like this:
/--php
use Nette\Application\Responses\TextResponse,
	Nette\Security\AuthenticationException;


class DefaultPresenter extends BasePresenter
{

	public function renderDefault()
	{
		$source = '<h1>Homepage</h1><a href="' . $this->link('login') . '">Login</a>';
		$this->sendResponse(new TextResponse($source));
	}



	public function renderLogin()
	{
		$source = '<h1>Login</h1>';
		$this->sendResponse(new TextResponse($source));
	}



	public function actionCron()
	{
		if (!$this->getContext()->params['consoleMode']) {
			throw new AuthenticationException;
		}

		$link = $this->link('//login');

		// Sent as mail with a link
		echo $link;

		$this->terminate();
	}

}
\--

Routes could then look like this:
/--php
use Nette\Application\Routers\Route,
	Nette\Application\Routers\CliRouter;

if ($container->params['consoleMode']) {
	$application->allowedMethods = false;
	$router[] = new CliRouter('Default:default');
} else {
	$router[] = new Route('index.php', 'Default:default', Route::ONE_WAY);
	$router[] = new Route('prihlaseni', 'Default:login');
	$router[] = new Route('<presenter>/<action>[/<id>]', 'Default:default');
}
\--

.[caution]
`CliRouter` defined above me did not work, the following solutions do.
(MartyIX k 4.10.2011)
/--php
$this[] = new CliRouter(["action"=>'Default:default']);
\---

Through a web browser to get to the action:
- `default` -> `http://example.com/`
- `login` -> `http://example.com/prihlaseni`

Via the command line to get to the action:
- `cron` -> `C:\test-cli-routing\www>php index.php Default:cron`

The routing of HTTP requests, we care Nette, which determines the domain of what is called the action, which is used protocol, port, etc.
But the problem is that in command line mode HTTP request does not exist, therefore Nette has to determine the domain, protocol, etc.



Solution
========
The solution is very simple. You need to "foist" Nette own defined object representing the HTTP request.
Nette then works with him as if he created it himself;-).

Due to the fact that the net is used to obtain object [api:Nette\Http\Request] service, whose factory initialization is used, there is nothing easier than to say Nette:
"To create `Http\Request` do not call their factory, but better call my factory :-)"

And the outlook of the fact that other text would be useless, so here is a modified `bootstrap.php`, which takes care of everything:
/--php
use Nette\Diagnostics\Debugger,
	Nette\Utils\Strings,
	Nette\Application\Routers\Route,
	Nette\Application\Routers\CliRouter,
	Nette\Application\Routers\SimpleRouter,
	Nette\Http\Url,
	Nette\Http\UrlScript,
	Nette\Http;


// Load Nette Framework
$params['libsDir'] = __DIR__ . '/../libs';
require $params['libsDir'] . '/Nette/loader.php';


// Enable Nette Debugger for error visualisation & logging
Debugger::$logDirectory = __DIR__ . '/../log';
Debugger::$strictMode = true;
Debugger::enable();


// Load configuration from config.neon file
$configurator = new Nette\Configurator;
$configurator->container->params += $params;
$configurator->container->params['tempDir'] = __DIR__ . '/../temp';
$container = $configurator->loadConfig(__DIR__ . '/config.neon');

// Register our own factory for creating 'Nette\Http\IRequest'.
if ($container->params['consoleMode']) {
	$container->removeService('httpRequest');
	$container->addService('httpRequest', function() {
		// You might want to use the settings from the config, or take from the command line parameters, etc.
		$uri = new UrlScript;
		$uri->scheme = 'http';
		$uri->port = Url::$defaultPorts['http'];
		$uri->host = 'example.com';
		$uri->path = '/';
		$uri->canonicalize();
		$uri->path = Strings::fixEncoding($uri->path);
		$uri->scriptPath = '/';
		return new Http\Request($uri, [], [], [], [], [], 'GET', null, null);
	});
}

// Init application
$application = $container->application;

// Setup router
$router = $container->router;
if ($container->params['consoleMode']) {
	$application->allowedMethods = false;
	$router[] = new CliRouter('Default:default');
} else {
	$router[] = new Route('index.php', 'Default:default', Route::ONE_WAY);
	$router[] = new Route('prihlaseni', 'Default:login');
	$router[] = new Route('<presenter>/<action>[/<id>]', 'Default:default');
}


// Configure and run the application!
$application = $container->application;
//$application->catchExceptions = true;
$application->errorPresenter = 'Error';
$application->run();
\--

{{author: bene|2835}}
