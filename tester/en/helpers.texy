Helpers
*******

DomQuery
--------
`Tester\DomQuery` class helps to test HTML or XML content. Description of all the methods is in [API documentation |https://api.nette.org/tester/Tester.DomQuery.html]. Here, we show basic usage:

```php

# HTML which we want to test
$html = $template->render();

# We create DOM structure from HTML
$dom = Tester\DomQuery::fromHtml($html);

# We can test
Assert::true($dom->has('form#registration'));
Assert::true($dom->has('input[name="username"]'));
Assert::true($dom->has('input[name="password"]'));
Assert::true($dom->has('input[type="submit"]'));
```

We use CSS selector as `DomQuery::has($selector)` parameter.


FileMock
--------
`Tester\FileMock` emulates files in memory and helps you to test a code which uses functions like `fopen()`, `file_get_contents()` or `parse_ini_file()`. For example:

```php
# Tested class
class Logger
{
	private $logFile;

	public function __construct($logFile)
	{
		$this->logFile = $logFile;
	}

	public function log($message)
	{
		file_put_contents($this->logFile, $message . "\n", FILE_APPEND);
	}
}

# New empty file
$file = Tester\FileMock::create('');

$logger = new Logger($file);
$logger->log('Login');
$logger->log('Logout');

# Created content testing
Assert::same("Login\nLogout\n", file_get_contents($file));
```


Environment::purge()
--------------------
Class `Tester\Helpers` offers method `purge()` which creates passed directory but only if doesn't exist yet. If so, it purges all its content. It is handy for temporary directory creation. For example in `tests/bootstrap.php`:

```php
@mkdir(__DIR__ . '/tmp');  # @ - directory may already exist

define('TEMP_DIR', __DIR__ . '/tmp/' . getmypid());
Tester\Helpers::purge(TEMP_DIR);
```


Environment::lock()
-------------------
Later we learn that tests run in parallel. Sometimes we need not to overlap the test running. Typically database tests need to prepare database content and they need nothing disturbs them during running time of the test. In these cases we use `Tester\Environment::lock($name, $dir)`:

```php
Tester\Environment::lock('database', __DIR__ . '/tmp');
```

The first argument is a lock name. The second one is a path to directory for saving the lock. The test which acquires the lock first runs. Other tests must wait till it is completed.


Environment::bypassFinals()
---------------------------
Classes or methods marked as `final` are hard to test. Calling the `Tester\Environment::bypassFinals()` in a test beginning causes that keywords `final` are removed during the code loading.

```php
require __DIR__ . '/bootstrap.php';

Tester\Environment::bypassFinals();

class MyClass extends NormallyFinalClass  # <-- NormallyFinalClass is not final anymore
{
	...
}
```


Environment::setup()
--------------------
- improves error dump readability (coloring included), otherwise, default PHP stack trace is printed
- enables check that assertions have been called in test, otherwise, tests without (e.g. forgotten) assertions pass too
- automatically starts code coverage collector when `--coverage` is used (described later)

Using is optional but recommended.


Environment::RUNNER
-------------------
It could be useful to know if a test is running by the Tester or manually as an ordinary PHP script.

```php
if (getenv(Tester\Environment::RUNNER)) {
	# run by Tester
} else {
	# another way
}
```


Environment::THREAD
-------------------
Tester runs tests in parallel in a given number of threads. We will find a thread number in an environmental variable when we are interested:

```php
echo "I'm running in a thread number " . getenv(Tester\Environment::THREAD).
```
