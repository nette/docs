Getting started
********

.[perex]
Meet Nette Framework and create your first application - a task manager. In this series we will show you how to create secure applications, including logging, using databases, templates, forms, routing, and AJAX.

When finished, our task manager will be capable of:

- organizing tasks into separate lists
- adding new tasks and lists
- marking a task as finished (using AJAX)
- logging user in and sending a forgotten password


Download
=======

The very first thing you need to do is check Nette Framework "requirements":http://doc.nette.org/en/requirements.

If you are using "Composer":http://getcomposer.org/ you can download and install application skeleton (known as `sandbox`) including Nette Framework really easily. To do so, find your web root directory in your command line and execute the following command:

/--
composer create-project nette/sandbox sandbox
\--

Sandbox will be downloaded into sandbox directory.

You can also download Nette Framework "manually":http://nette.org/en/download and extract it. One of included directories is `sandbox`. Copy it to your web root directory.

Open your browser and go to the following address

/--
http://localhost/sandbox/www/
\--

and you should see Nette Framework welcome page:

[* welcome-620.jpg .(welcome message) *]

Sandbox's content
==================

Sandbox has the following structure:

/--pre
<b>www/</b>                      ← web root directory
└── <b>sandbox/</b>
    ├── <b>app/</b>              ← application directory
    │   ├── <b>config/</b>       ← configuration files
    │   ├── <b>model/</b>        ← model layer classes
    │   ├── <b>presenters/</b>   ← presenter classes
    │   ├── <b>templates/</b>    ← templates
    │   └── <b>bootstrap.php</b> ← boot file
    │
    ├── <b>libs/</b>             ← libraries for your application
    │   └── <b>Nette/</b>        ← like your favorite framework :-)
    │
    ├── <b>log/</b>              ← here you can find error message logs
    ├── <b>temp/</b>             ← place for temporary files (cache, sessions, etc.)
    ├── <b>test/</b>             ← directory for unit tests
    └── <b>www/</b>              ← local web root - this is the only directory accessible from the web
\--


Directory `www` is intended for images, JavaScript, CSS, and other publicly available files. This is the only directory directly accessible from the browser, so you can point the root directory of your web server here.

If you are using Linux or Mac OS X, you have to set writing permissions for directories `log` and `temp`. To do so, execute `chmod -R a+rwX temp log` command.

The most important directory for you is `app`. You can find `bootstrap.php` file there, which is used for framework loading and configuration. It activates "autoloading":http://doc.nette.org/en/auto-loading, sets up "routes":http://doc.nette.org/en/routing and runs the application.

Routes specify the form of the URL. Nette Framework advantage is that you can change the form of the URL at any time and very easily, so for now lets put routing aside as we can tweak it once the application is finished..


Laděnka
=======
Extremely important tool for the development is "Debugger":http://doc.nette.org/en/debugging, sometimes called Laděnka.
Try to make some mistakes in your `app/presenters/HomepagePresenter.php` file (e.g. remove a letter from `class` in the class header) and see what happens. Red-screen page will occur with understandable error log.

[* debugger-620.png .(debbuger screen) *]

Laděnka will really help you while debugging errors. Also note the Debugger floating bar in the bottom right, which informs you about important runtime data.

In production mode Laděnka is, of course, disabled and does not reveal any sensitive information. All error logs are saved into `log` directory instead. Just try it out. To disable debug mode, add the following line to the `bootstrap.php` file:

/--php
$configurator->setDebugMode(FALSE);   // <- add this line
$configurator->enableDebugger(__DIR__ . '/../log');
\--

After refreshing the web page, red-screen page will be replaced with user-friendly message:

[* server-error-620.png .(error screen) *]

Now look into `log` directory. You can find the error log there and also a red-screen website saved in an HTML file with a name starting with `exception`.

Comment line `$configurator->setDebugMode(FALSE);`. Laděnka will enable debug mode automatically on `localhost` and disable it elsewhere.

Now, with the basic knowledge, we can start designing our application.
