Fonctions Latte
***************

.[perex]
Dans les templates, en plus des fonctions PHP courantes, nous pouvons utiliser ces fonctions supplémentaires.

.[table-latte-filters]
| `clamp`      | [limite la valeur à une plage donnée |#clamp]
| `divisibleBy`| [vérifie si une variable est divisible par un nombre |#divisibleBy]
| `even`       | [vérifie si un nombre donné est pair |#even]
| `first`      | [retourne le premier élément d'un tableau ou caractère d'une chaîne |#first]
| `group`      | [regroupe les données selon différents critères |#group]
| `hasBlock`   | [vérifie l'existence d'un bloc |#hasBlock]
| `last`       | [retourne le dernier élément d'un tableau ou caractère d'une chaîne |#last]
| `odd`        | [vérifie si un nombre donné est impair |#odd]
| `slice`      | [extrait une partie d'un tableau ou d'une chaîne |#slice]


Utilisation
===========

Les fonctions s'utilisent de la même manière que les fonctions PHP courantes et peuvent être utilisées dans toutes les expressions :

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

Les [fonctions personnalisées|custom-functions] peuvent être enregistrées de cette manière :

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

Dans le template, on l'appelle ensuite comme ceci :

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Fonctions
=========


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------
Limite la valeur à la plage inclusive donnée min et max.

```latte
{=clamp($level, 0, 255)}
```

Voir aussi [le filtre clamp|filters#clamp].


divisibleBy(int $value, int $by): bool .[method]
------------------------------------------------
Vérifie si une variable est divisible par un nombre.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]
--------------------------------
Vérifie si un nombre donné est pair.

```latte
{if even($num)} ... {/if}
```


first(string|iterable $value): mixed .[method]
----------------------------------------------
Retourne le premier élément d'un tableau ou caractère d'une chaîne :

```latte
{=first([1, 2, 3, 4])}    {* affiche 1 *}
{=first('abcd')}          {* affiche 'a' *}
```

Voir aussi [#last], [le filtre first|filters#first].


group(iterable $data, string|int|\Closure $by): array .[method]{data-version:3.0.16}
------------------------------------------------------------------------------------
La fonction regroupe les données selon différents critères.

Dans cet exemple, les lignes du tableau sont regroupées par la colonne `categoryId`. La sortie est un tableau de tableaux où la clé est la valeur de la colonne `categoryId`. [Lisez le tutoriel détaillé|cookbook/grouping].

```latte
{foreach group($items, categoryId) as $categoryId => $categoryItems}
    <ul>
        {foreach $categoryItems as $item}
            <li>{$item->name}</li>
        {/foreach}
    </ul>
{/foreach}
```

Voir aussi le filtre [group|filters#group].


hasBlock(string $name): bool .[method]{data-version:3.0.10}
-----------------------------------------------------------
Vérifie si le bloc du nom spécifié existe :

```latte
{if hasBlock(header)} ... {/if}
```

Voir aussi [la vérification de l'existence des blocs|template-inheritance#Kontrola existence bloků].


last(string|array $value): mixed .[method]
------------------------------------------
Retourne le dernier élément d'un tableau ou caractère d'une chaîne :

```latte
{=last([1, 2, 3, 4])}    {* affiche 4 *}
{=last('abcd')}          {* affiche 'd' *}
```

Voir aussi [#first], [le filtre last|filters#last].


odd(int $value): bool .[method]
-------------------------------
Vérifie si un nombre donné est impair.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, ?int $length=null, bool $preserveKeys=false): string|array .[method]
-----------------------------------------------------------------------------------------------------------
Extrait une partie d'un tableau ou d'une chaîne.

```latte
{=slice('hello', 1, 2)}           {* affiche 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* affiche ['b', 'c'] *}
```

Le filtre fonctionne comme la fonction PHP `array_slice` pour les tableaux ou `mb_substr` pour les chaînes avec un fallback sur la fonction `iconv_substr` en mode UTF‑8.

Si start est positif, la séquence commencera décalée de ce nombre depuis le début du tableau/chaîne. Si il est négatif, la séquence commencera décalée d'autant depuis la fin.

Si le paramètre length est spécifié et est positif, la séquence contiendra autant d'éléments. Si un paramètre length négatif est passé à cette fonction, la séquence contiendra tous les éléments du tableau d'origine, commençant à la position start et se terminant à la position inférieure de length éléments par rapport à la fin du tableau. Si vous ne spécifiez pas ce paramètre, la séquence contiendra tous les éléments du tableau d'origine, commençant à la position start.

Par défaut, le filtre modifie l'ordre et réinitialise les clés entières du tableau. Ce comportement peut être modifié en définissant preserveKeys sur true. Les clés de chaîne sont toujours préservées, quel que soit ce paramètre.
