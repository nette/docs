Funcții Latte
*************

.[perex]
În șabloane, pe lângă funcțiile PHP obișnuite, putem folosi și aceste funcții suplimentare.

.[table-latte-filters]
| `clamp`      | [limitează valoarea la un interval dat |#clamp]
| `divisibleBy`| [verifică dacă o variabilă este divizibilă cu un număr |#divisibleBy]
| `even`       | [verifică dacă numărul dat este par |#even]
| `first`      | [returnează primul element al array-ului sau caracterul șirului |#first]
| `group`      | [grupează datele după diverse criterii |#group]
| `hasBlock`   | [verifică existența unui bloc |#hasBlock]
| `last`       | [returnează ultimul element al array-ului sau caracterul șirului |#last]
| `odd`        | [verifică dacă numărul dat este impar |#odd]
| `slice`      | [extrage o parte a array-ului sau a șirului |#slice]


Utilizare
=========

Funcțiile se utilizează la fel ca funcțiile PHP obișnuite și pot fi folosite în toate expresiile:

```latte
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

[Funcțiile personalizate|custom-functions] pot fi înregistrate în acest mod:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', fn(string $s, int $len = 10) => mb_substr($s, 0, $len));
```

În șablon, se apelează apoi astfel:

```latte
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Funcții
=======


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]
----------------------------------------------------------------------------
Limitează valoarea la intervalul inclusiv dat min și max.

```latte
{=clamp($level, 0, 255)}
```

Vezi și [filtrul clamp|filters#clamp].


divisibleBy(int $value, int $by): bool .[method]
------------------------------------------------
Verifică dacă o variabilă este divizibilă cu un număr.

```latte
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]
--------------------------------
Verifică dacă numărul dat este par.

```latte
{if even($num)} ... {/if}
```


first(string|iterable $value): mixed .[method]
----------------------------------------------
Returnează primul element al array-ului sau caracterul șirului:

```latte
{=first([1, 2, 3, 4])}    {* afișează 1 *}
{=first('abcd')}          {* afișează 'a' *}
```

Vezi și [#last], [filtrul first|filters#first].


group(iterable $data, string|int|\Closure $by): array .[method]{data-version:3.0.16}
------------------------------------------------------------------------------------
Funcția grupează datele după diverse criterii.

În acest exemplu, rândurile din tabel sunt grupate după coloana `categoryId`. Ieșirea este un array de array-uri, unde cheia este valoarea din coloana `categoryId`. [Citiți un tutorial detaliat|cookbook/grouping].

```latte
{foreach group($items, categoryId) as $categoryId => $categoryItems}
    <ul>
        {foreach $categoryItems as $item}
            <li>{$item->name}</li>
        {/foreach}
    </ul>
{/foreach}
```

Vezi și filtrul [group|filters#group].


hasBlock(string $name): bool .[method]{data-version:3.0.10}
-----------------------------------------------------------
Verifică dacă blocul cu numele specificat există:

```latte
{if hasBlock(header)} ... {/if}
```

Vezi și [verificarea existenței blocurilor|template-inheritance#Kontrola existence bloků].


last(string|array $value): mixed .[method]
------------------------------------------
Returnează ultimul element al array-ului sau caracterul șirului:

```latte
{=last([1, 2, 3, 4])}    {* afișează 4 *}
{=last('abcd')}          {* afișează 'd' *}
```

Vezi și [#first], [filtrul last|filters#last].


odd(int $value): bool .[method]
-------------------------------
Verifică dacă numărul dat este impar.

```latte
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, ?int $length=null, bool $preserveKeys=false): string|array .[method]
-----------------------------------------------------------------------------------------------------------
Extrage o parte a array-ului sau a șirului.

```latte
{=slice('hello', 1, 2)}           {* afișează 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* afișează ['b', 'c'] *}
```

Filtrul funcționează ca funcția PHP `array_slice` pentru array-uri sau `mb_substr` pentru șiruri, cu fallback la funcția `iconv_substr` în modul UTF-8.

Dacă start este pozitiv, secvența va începe deplasată cu acest număr de la începutul array-ului/șirului. Dacă este negativ, secvența va începe deplasată cu atâtea de la sfârșit.

Dacă parametrul length este specificat și este pozitiv, secvența va conține atâtea elemente. Dacă în această funcție este transmis un parametru length negativ, secvența va conține toate elementele array-ului original, începând de la poziția start și terminând la poziția mai mică cu length elemente de la sfârșitul array-ului. Dacă nu specificați acest parametru, secvența va conține toate elementele array-ului original, începând de la poziția start.

În mod implicit, filtrul schimbă ordinea și resetează cheile întregi ale array-ului. Acest comportament poate fi schimbat setând preserveKeys la true. Cheile șir sunt întotdeauna păstrate, indiferent de acest parametru.
