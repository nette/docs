Formulários de Reutilização em Vários Lugares
*********************************************

.[perex]
Como reutilizar a mesma forma em vários lugares e não duplicar o código? Isto é realmente fácil de fazer em Nette e você tem várias maneiras de escolher.


Fábrica de formulários .[#toc-form-factory]
===========================================

Vamos criar uma classe que possa criar uma forma. Tal classe é chamada de fábrica. No local onde queremos usar o formulário (por exemplo, no apresentador), solicitamos a [fábrica como dependência |dependency-injection:passing-dependencies].

Parte da fábrica é o código que passa os dados para processamento posterior quando o formulário é enviado com sucesso. Normalmente para a camada do modelo. Ele também verifica se tudo correu bem, e [passa de volta |forms:validation#Processing-errors] quaisquer erros para o formulário. O modelo no exemplo a seguir é representado pela classe `Facade`:

```php
use Nette\Application\UI\Form;

class EditFormFactory
{
	public function __construct(
		private Facade $facade,
	) {
	}

	public function create(/* parameters */): Form
	{
		$form = new Form;

		// adicionar elementos ao formulário

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// processamento de formulários
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
		}
	}
}
```

É claro que a fábrica pode ser paramétrica, ou seja, pode receber parâmetros que afetarão a aparência da forma que está sendo criada.

Vamos agora demonstrar a passagem da fábrica para o apresentador. Primeiro, a escrevemos no arquivo de configuração:

```neon
services:
	- EditFormFactory
```

E depois solicite-o no apresentador. Também segue o próximo passo de processamento do formulário apresentado e que é redirecionado para a página seguinte:


```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditFormFactory $formFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$form = $this->formFactory->create();

		$form->onSuccess[] = function (Form $form) {
			$this->redirect('this');
		};

		return $form;
	}
}
```

Como o redirecionamento é feito pelo apresentador, o componente pode ser usado em vários lugares e redirecionado para outro lugar em cada lugar.


Componente com forma .[#toc-component-with-form]
================================================

Outra maneira é criar um novo [componente |application:components] que contenha uma forma. Isto nos dá a capacidade de renderizar o formulário de uma forma específica, por exemplo, uma vez que o componente inclui um modelo.
Ou podemos usar sinais para comunicação AJAX e carregar informações no formulário, por exemplo, para auto-completar, etc.


```php
use Nette\Application\UI\Form;

class EditControl extends Nette\Application\UI\Control
{
	public $onSave;

	public function __construct(
		private Facade $facade,
	) {
	}

	protected function createComponentForm(): Form
	{
		$form = new Form;

		// adicionar elementos ao formulário

		$form->addSubmit('send', 'Submit');
		$form->onSuccess[] = [$this, 'processForm'];

		return $form;
	}

	public function processForm(Form $form, array $values): void
	{
		try {
			// processamento de formulários
			$this->facade->process($values);

		} catch (AnyModelException $e) {
			$form->addError('...');
			return;
		}

		// invocação de eventos
		$this->onSave($this, $values);
	}
}
```

Em seguida, vamos criar a fábrica que produzirá este componente. Basta [escrever sua interface |application:components#Components with Dependencies]:


```php
interface EditControlFactory
{
	function create(): EditControl;
}
```

E acrescente ao arquivo de configuração:

```neon
services:
	- EditControlFactory
```

E agora podemos exigir a fábrica e utilizá-la no apresentador:

```php
class MyPresenter extends Nette\Application\UI\Presenter
{
	public function __construct(
		private EditControlFactory $controlFactory,
	) {
	}

	protected function createComponentEditForm(): Form
	{
		$control = $this->controlFactory->create();

		$control->onSave[] = function (EditControl $control, $data) {
			$this->redirect('this');
			// or redirect to the result of the edit, e.g.:
			// $this->redirect('detail', ['id' => $data->id]);
		};

		return $control;
	}
}
```

{{priority: -1}}
{{sitename: Melhores Práticas}}
