Funcții JSON
************

.[perex]
[api:Nette\Utils\Json] este o clasă statică cu funcții de codificare și decodificare JSON. Aceasta gestionează vulnerabilitățile din diferite versiuni PHP și aruncă excepții în caz de eroare.

Instalare:

```shell
composer require nette/utils
```

Toate exemplele presupun că este definit următorul alias de clasă:

```php
use Nette\Utils\Json;
```


Utilizare .[#toc-usage]
=======================


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Convertește `$value` în format JSON.

Când `$pretty` este setat, formatează JSON pentru o citire mai ușoară și mai clară:

```php
Json::encode($value); // returnează JSON
Json::encode($value, pretty: true); // returnează JSON mai clar
```

Când este setat `$asciiSafe`, acesta generează o ieșire ASCII, adică înlocuiește caracterele Unicode cu secvențe `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

Parametrul `$htmlSafe` garantează că ieșirea nu conține caractere cu semnificație specială în HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Cu `$forceObjects`, chiar și array-urile cu chei numerice vor fi codificate ca obiecte JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Se aruncă o excepție `Nette\Utils\JsonException` în caz de eroare.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Tratarea excepțiilor
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Parsează JSON în PHP.

Setarea `$forceArray` forțează returnarea de matrici în loc de obiecte:

```php
Json::decode('{"variable": true}'); // returnează un obiect de tip stdClass
Json::decode('{"variable": true}', forceArray: true); // returnează o matrice
```

În caz de eroare, se aruncă o excepție `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Tratarea excepțiilor
}
```


Cum se trimite un JSON de la un prezentator? .[#toc-how-to-send-a-json-from-a-presenter]
========================================================================================

Puteți utiliza metoda `$this->sendJson($data)`, care poate fi apelată, de exemplu, în metoda `action*()`, a se vedea [Trimiterea unui răspuns |application:presenters#Sending a Response].
