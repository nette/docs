Funzioni del filesystem
***********************

.[perex]
[api:Nette\Utils\FileSystem] è una classe statica che contiene funzioni utili per lavorare con il filesystem. Un vantaggio rispetto alle funzioni native di PHP è che lanciano eccezioni in caso di errori.


Installazione:

```shell
composer require nette/utils
```

Gli esempi seguenti presuppongono che sia stato definito il seguente alias di classe:

```php
use Nette\Utils\FileSystem;
```


Manipolazione .[#toc-manipulation]
==================================


copy(string $origin, string $target, bool $overwrite=true): void .[method]
--------------------------------------------------------------------------

Copia un file o un'intera directory. Sovrascrive i file e le directory esistenti per impostazione predefinita. Se `$overwrite` è impostato su `false` e un `$target` esiste già, lancia un'eccezione `Nette\InvalidStateException`. Lancia un'eccezione `Nette\IOException` se si verifica un errore.

```php
FileSystem::copy('/path/to/source', '/path/to/dest', overwrite: true);
```


createDir(string $directory, int $mode=0777): void .[method]
------------------------------------------------------------

Crea una directory se non esiste, comprese le directory parentali. Lancia un'eccezione `Nette\IOException` se si verifica un errore.

```php
FileSystem::createDir('/path/to/dir');
```


delete(string $path): void .[method]
------------------------------------

Elimina un file o un'intera directory, se esistente. Se la directory non è vuota, ne cancella prima il contenuto. Lancia un'eccezione `Nette\IOException` se si verifica un errore.

```php
FileSystem::delete('/path/to/fileOrDir');
```


makeWritable(string $path, int $dirMode=0777, int $fileMode=0666): void .[method]
---------------------------------------------------------------------------------

Imposta i permessi dei file a `$fileMode` o i permessi delle directory a `$dirMode`. Esegue una ricerca ricorsiva e imposta i permessi anche sull'intero contenuto della directory.

```php
FileSystem::makeWritable('/path/to/fileOrDir');
```


open(string $path, string $mode): resource .[method]
----------------------------------------------------

Apre il file e restituisce la risorsa. Il parametro `$mode` funziona come la funzione nativa `fopen()`:https://www.php.net/manual/en/function.fopen.php. Se si verifica un errore, viene sollevata l'eccezione `Nette\IOException`.

```php
$res = FileSystem::open('/path/to/file', 'r');
```


read(string $file): string .[method]
------------------------------------

Legge il contenuto di un file `$file`. Lancia un'eccezione `Nette\IOException` se si verifica un errore.

```php
$content = FileSystem::read('/path/to/file');
```


readLines(string $file, bool $stripNewLines=true): \Generator .[method]
-----------------------------------------------------------------------

Legge il contenuto del file riga per riga. A differenza della funzione nativa `file()`, non legge l'intero file in memoria, ma lo legge continuamente, in modo da poter leggere file più grandi della memoria disponibile. Il parametro `$stripNewLines` specifica se eliminare i caratteri di interruzione di riga `\r` e `\n`.
In caso di errore, solleva un'eccezione `Nette\IOException`.

```php
$lines = FileSystem::readLines('/path/to/file');

foreach ($lines as $lineNum => $line) {
	echo "Line $lineNum: $line\n";
}
```


rename(string $origin, string $target, bool $overwrite=true): void .[method]
----------------------------------------------------------------------------

Rinomina o sposta un file o una directory specificata da `$origin` a `$target`. Sovrascrive i file e le directory esistenti per impostazione predefinita. Se `$overwrite` è impostato su `false` e `$target` esiste già, lancia un'eccezione `Nette\InvalidStateException`. Lancia un'eccezione `Nette\IOException` se si verifica un errore.

```php
FileSystem::rename('/path/to/source', '/path/to/dest', overwrite: true);
```


write(string $file, string $content, int $mode=0666): void .[method]
--------------------------------------------------------------------

Scrive il file `$content` in un file `$file`. Lancia un'eccezione `Nette\IOException` se si verifica un errore.

```php
FileSystem::write('/path/to/file', $content);
```


Percorsi .[#toc-paths]
======================


isAbsolute(string $path): bool .[method]
----------------------------------------

Determina se il sito `$path` è assoluto.

```php
FileSystem::isAbsolute('../backup'); // false
FileSystem::isAbsolute('/backup');   // true
FileSystem::isAbsolute('C:/backup'); // true
```


joinPaths(string ...$segments): string .[method]
------------------------------------------------
Unisce tutti i segmenti del percorso e normalizza il risultato.

```php
FileSystem::joinPaths('a', 'b', 'file.txt'); // 'a/b/file.txt'
FileSystem::joinPaths('/a/', '/b/');         // '/a/b/'
FileSystem::joinPaths('/a/', '/../b');       // '/b'
```


normalizePath(string $path): string .[method]
---------------------------------------------
Normalizza `..` e `.` e i separatori di directory nel percorso.

```php
FileSystem::normalizePath('/file/.');        // '/file/'
FileSystem::normalizePath('\file\..');       // '/file'
FileSystem::normalizePath('/file/../..');    // '/..'
FileSystem::normalizePath('file/../../bar'); // '/../bar'
```


unixSlashes(string $path): string .[method]
-------------------------------------------

Converte gli slash in `/` utilizzati nei sistemi Unix.

```php
$path = FileSystem::unixSlashes($path);
```


platformSlashes(string $path): string .[method]
-----------------------------------------------

Converte gli slash in caratteri specifici della piattaforma corrente, ad esempio `\` su Windows e `/` altrove.

```php
$path = FileSystem::platformSlashes($path);
```
