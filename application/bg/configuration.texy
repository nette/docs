Настройване на приложението
***************************

.[perex]
Преглед на опциите за конфигуриране на приложението Nette.


Приложение .[#toc-application]
==============================

```neon
application:
	# отображает вкладку "Nette Application" на синем экране Tracy?
	debugger: ...           # (bool) по умолчанию true

	# будет ли вызываться презентер ошибок при ошибке?
	catchExceptions: ...    # (bool) по умолчанию true на «боевом» сервере

	# имя презентера ошибок
	errorPresenter: Error   # (string) по умолчанию 'Nette:Error'

	# определяет правила для преобразования имени ведущего в класс
	mapping: ...

	# выдают ли плохие ссылки предупреждения?
	# имеет силу только в режиме разработки
	silentLinks: ...        # (bool) по умолчанию false
```

Тъй като в режим на разработка презентаторите на грешки не се извикват по подразбиране, а грешките се показват от Tracy, промяната на стойността на `catchExceptions` на `true` помага да се провери дали презентаторите на грешки работят правилно по време на разработката.

Опцията `silentLinks` определя как Nette да се държи в режим на разработчик, когато генерирането на връзки е неуспешно (например поради липса на презентатор и т.н.). Стойността по подразбиране `false` означава, че Nette работи `E_USER_WARNING`. Задаването на `true` потиска това съобщение за грешка. В производствена среда винаги се извиква `E_USER_WARNING`. Можем също така да повлияем на това поведение, като зададем променливата на водещия [$invalidLinkMode |creating-links#Invalid-Links].

Съпоставянето [определя правилата, по които |modules#Mapping] името на класа се извежда от основното име.


Автоматично регистриране на водещи .[#toc-automatic-registration-of-presenters]
-------------------------------------------------------------------------------

Nette автоматично добавя презентатори като услуги към контейнера DI, което значително ускорява създаването им. Може да се конфигурира начинът, по който Nette разпознава предентерите:

```neon
application:
	# для поиска презентеров в карте классов Composer?
	scanComposer: ...      # (bool) по умолчанию true

	# маска, которая должна соответствовать классу и имени файла
	scanFilter: ...        # (string) по умолчанию '*Presenter'

	# в каких каталогах искать презентеры?
	scanDirs:              # (string[]|false) по умолчанию '%appDir%'
		- %vendorDir%/mymodule
```

Директориите, изброени в `scanDirs`, не заместват подразбиращата се `%appDir%`, а я допълват, така че `scanDirs` ще съдържа и `%appDir%`, и `%vendorDir%/mymodule`. За да презапишем директорията по подразбиране, използваме [възклицателен знак |dependency-injection:configuration#Merging]:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

Сканирането на директории може да бъде деактивирано чрез задаване на `false`. Не препоръчваме автоматичното добавяне на презентатори да се прекратява напълно, защото в противен случай производителността на приложението ще намалее.


Latte .[#toc-latte]
===================

Тази настройка влияе глобално върху поведението на Latte в компонентите и презентаторите.

```neon
latte:
	# отображает вкладку Latte на панели Tracy для основного шаблона (true) или для всех компонентов (all)?
	debugger: ...        # (true|false|'all') по умолчанию true

	# генерирует шаблоны с declare(strict_types=1)
	strictTypes: ...     # (bool) по умолчанию false

	# класс $this->template
	templateClass: App\MyTemplateClass # по умолчанию Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Ако използвате версия 3 на Latte, можете да добавите ново [разширение |latte:creating-extension], като използвате:

```neon
latte:
	расширения:
		- Latte\Essential\TranslatorExtension
```


Маршрутизиране .[#toc-routing]
==============================

Основни настройки:

```neon
routing:
	# отображает вкладку Routing на панели Tracy?
	debugger: ...   # (bool) по умолчанию true

	# осуществлять сериализацию маршрутов в DI-контейнере?
	cache: ...      # (bool) по умолчанию false
```

Маршрутите обикновено се дефинират в класа RouterFactory. Алтернативно, в конфигурацията могат да се дефинират прости правила за маршрутизация, като се използват двойки `маска: действие`:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Константи .[#toc-constants]
===========================

Създаване на PHP константи:

```neon
constants:
	Foobar: 'baz'
```

Константата `Foobar` ще бъде създадена след стартиране.

.[note]
Константите не трябва да служат като глобално достъпни променливи. Използвайте [инжектиране на зависимости |dependency-injection:passing-dependencies], за да предавате стойности на обекти.


PHP
===

Можете да инсталирате директиви на PHP. Преглед на всички директиви можете да намерите в [php.net |https://www.php.net/manual/ru/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```
