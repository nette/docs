Cos'è l'iniezione di dipendenza?
********************************

.[perex]
Questo capitolo introduce le pratiche di programmazione di base da seguire quando si scrive un'applicazione. Si tratta delle basi necessarie per scrivere codice pulito, comprensibile e manutenibile.

Se imparate e seguite queste regole, Nette vi assisterà in ogni momento. Gestirà per voi le attività di routine e vi metterà il più possibile a vostro agio, in modo che possiate concentrarvi sulla logica.

I principi che vi illustreremo sono piuttosto semplici. Non dovete preoccuparvi di nulla.


Ricordate il vostro primo programma? .[#toc-remember-your-first-program]
------------------------------------------------------------------------

Non abbiamo idea in quale linguaggio l'abbiate scritto, ma se fosse stato PHP, probabilmente avrebbe avuto un aspetto simile a questo:

```php
function addition(float $a, float $b): float
{
	return $a + $b;
}

echo addition(23, 1); // francobollo 24
```

Poche righe di codice banali, ma con tanti concetti chiave nascosti. Che ci sono variabili. Che il codice è suddiviso in unità più piccole, come ad esempio le funzioni. Che si passano loro degli argomenti in ingresso e che restituiscono dei risultati. Mancano solo le condizioni e i cicli.

Il fatto che si passi un input a una funzione e che questa restituisca un risultato è un concetto perfettamente comprensibile, utilizzato anche in altri campi, come la matematica.

Una funzione ha una firma, che consiste nel suo nome, in un elenco di parametri e dei loro tipi e infine nel tipo di valore di ritorno. Come utenti, siamo interessati alla firma; di solito non abbiamo bisogno di sapere nulla dell'implementazione interna.

Immaginiamo ora che la firma di una funzione abbia il seguente aspetto:

```php
function addition(float $x): float
```

Un'addizione con un solo parametro? È strano... Che ne dite di questo?

```php
function addition(): float
```

È davvero strano, vero? Come pensate che venga utilizzata la funzione?

```php
echo addition(); // cosa stampa?
```

Guardando questo codice, siamo confusi. Non solo un principiante non lo capirebbe, anche un programmatore esperto non capirebbe questo codice.

Vi chiedete come sarebbe in realtà una funzione del genere? Dove troverebbe gli addendi? Probabilmente li otterrebbe *in qualche modo* da sola, come in questo caso:

```php
function addition(): float
{
	$a = Input::get('a');
	$b = Input::get('b');
	return $a + $b;
}
```

Si scopre che nel corpo della funzione ci sono legami nascosti con altre funzioni (o metodi statici) e per scoprire da dove provengono effettivamente gli addendi, dobbiamo scavare ulteriormente.


Non in questo modo! .[#toc-not-this-way]
----------------------------------------

Il disegno che ci è stato appena mostrato è l'essenza di molte caratteristiche negative:

- la firma della funzione fingeva di non aver bisogno di addendi, il che ci confondeva
- non abbiamo idea di come far calcolare la funzione con altri due numeri
- abbiamo dovuto guardare nel codice per vedere dove prende gli addendi
- abbiamo scoperto legami nascosti
- per comprendere appieno, dobbiamo esplorare anche questi binding

E il compito della funzione di addizione è anche quello di procurarsi gli input? Ovviamente no.  La sua responsabilità è solo quella di aggiungere.


Non vogliamo incontrare codice di questo tipo e certamente non vogliamo scriverlo. Il rimedio è semplice: tornare alle origini e usare solo i parametri:


```php
function addition(float $a, float $b): float
{
	return $a + $b;
}
```


Regola n. 1: Lascia che ti venga passato .[#toc-rule-1-let-it-be-passed-to-you]
-------------------------------------------------------------------------------

La regola più importante è: **tutti i dati di cui hanno bisogno le funzioni o le classi devono essere passati a loro**.

Invece di inventare meccanismi nascosti per aiutarle a raggiungerli da sole, basta passare i parametri. Si risparmierà il tempo necessario per inventare meccanismi nascosti, che sicuramente non miglioreranno il codice.

Se seguite sempre e ovunque questa regola, sarete sulla buona strada verso un codice senza vincoli nascosti. Verso un codice comprensibile non solo per l'autore, ma anche per chiunque lo legga in seguito. Dove tutto è comprensibile dalle firme delle funzioni e delle classi e non c'è bisogno di cercare segreti nascosti nell'implementazione.

Questa tecnica è sapientemente chiamata **dependency injection**. E i dati si chiamano **dipendenze**, ma si tratta di un semplice passaggio di parametri, niente di più.

.[note]
Non confondere l'iniezione di dipendenze, che è un modello di progettazione, con il "contenitore di iniezione di dipendenze", che è uno strumento, qualcosa di completamente diverso. Parleremo dei contenitori più avanti.


Dalle funzioni alle classi .[#toc-from-functions-to-classes]
------------------------------------------------------------

E come si relazionano le classi? Una classe è un'entità più complessa di una semplice funzione, ma la regola n. 1 si applica anche in questo caso. Ci sono solo [più modi per passare gli argomenti |passing-dependencies]. Per esempio, in modo del tutto simile al caso di una funzione:

```php
class Math
{
	public function addition(float $a, float $b): float
	{
		return $a + $b;
	}
}

$math = new Math;
echo $math->addition(23, 1); // 24
```

Oppure utilizzando altri metodi o direttamente il costruttore:

```php
class Addition
{
	public function __construct(
		private float $a,
		private float $b,
	) {
	}

	public function calculate(): float
	{
		return $this->a + $this->b;
	}

}

$addition = new Addition(23, 1);
echo $addition->calculate(); // 24
```

Entrambi gli esempi sono completamente conformi alla dependency injection.


Esempi reali .[#toc-real-life-examples]
---------------------------------------

Nel mondo reale non si scrivono classi per l'addizione di numeri. Passiamo agli esempi del mondo reale.

Abbiamo una classe `Article` che rappresenta un articolo di blog:

```php
class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		// salvare l'articolo nel database
	}
}
```

e l'utilizzo sarà il seguente:

```php
$article = new Article;
$article->title = '10 Things You Need to Know About Losing Weight';
$article->content = 'Every year millions of people in ...';
$article->save();
```

Il metodo `save()` salva l'articolo in una tabella del database. Implementarlo utilizzando [Nette Database |database:] sarebbe un gioco da ragazzi, se non fosse per un inconveniente: dove `Article` dovrebbe ottenere la connessione al database, cioè l'oggetto della classe `Nette\Database\Connection`?

Sembra che ci siano molte opzioni. Può prenderla da qualche parte in una variabile statica. Oppure ereditarla da una classe che fornisca la connessione al database. Oppure sfruttare un [singleton |global-state#Singleton]. Oppure le cosiddette facciate utilizzate in Laravel:

```php
use Illuminate\Support\Facades\DB;

class Article
{
	public int $id;
	public string $title;
	public string $content;

	public function save(): void
	{
		DB::insert(
			'INSERT INTO articles (title, content) VALUES (?, ?)',
			[$this->title, $this->content],
		);
	}
}
```

Bene, abbiamo risolto il problema.

O forse sì?

Ricordiamo la [regola numero 1: lascia che ti venga passato |#rule #1: Let It Be Passed to You]: tutte le dipendenze di cui la classe ha bisogno devono essere passate ad essa. Perché se non lo facciamo e infrangiamo la regola, abbiamo iniziato a percorrere la strada verso un codice sporco, pieno di vincoli nascosti, incomprensibile e il risultato sarà un'applicazione che è una sofferenza da mantenere e sviluppare.

L'utente della classe `Article` non ha idea di dove il metodo `save()` memorizzi l'articolo. In una tabella del database? In quale, in produzione o in sviluppo? E come si può cambiare?

L'utente deve guardare come è implementato il metodo `save()` per trovare l'uso del metodo `DB::insert()`. Quindi deve cercare ulteriormente per scoprire come questo metodo si procura una connessione al database. E le connessioni nascoste possono formare una catena piuttosto lunga.

I binding nascosti, le facciate di Laravel o le variabili statiche non sono mai presenti in un codice pulito e ben progettato. Nel codice pulito e ben progettato, gli argomenti vengono passati:

```php
class Article
{
	public function save(Nette\Database\Connection $db): void
	{
		$db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

Ancora più pratico, come vedremo in seguito, è utilizzare un costruttore:

```php
class Article
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function save(): void
	{
		$this->db->query('INSERT INTO articles', [
			'title' => $this->title,
			'content' => $this->content,
		]);
	}
}
```

.[note]
Se siete programmatori esperti, potreste pensare che `Article` non dovrebbe avere un metodo `save()`, dovrebbe essere un puro componente di dati e un repository separato dovrebbe occuparsi della memorizzazione. Questo ha senso. Ma questo ci porterebbe ben oltre l'argomento, che è l'iniezione di dipendenza, e cercheremmo di fornire semplici esempi.

Se si sta per scrivere una classe che richiede un database per funzionare, per esempio, non si deve capire da dove prenderlo, ma farselo passare. Magari come parametro di un costruttore o di un altro metodo. Dichiarare le dipendenze. Esponetele nell'API della vostra classe. Otterrete un codice comprensibile e prevedibile.

Che ne dite di questa classe che registra i messaggi di errore?

```php
class Logger
{
	public function log(string $message)
	{
		$file = LOG_DIR . '/log.txt';
		file_put_contents($file, $message . "\n", FILE_APPEND);
	}
}
```

Cosa ne pensate, abbiamo rispettato la [regola n. 1: lascia che ti venga passato |#rule #1: Let It Be Passed to You]?

Non l'abbiamo fatto.

L'informazione chiave, la directory del file di log, è *ottenuta* dalla classe dalla costante.

Si veda l'esempio di utilizzo:

```php
$logger = new Logger;
$logger->log('The temperature is 23 °C');
$logger->log('The temperature is 10 °C');
```

Senza conoscere l'implementazione, si può rispondere alla domanda dove vengono scritti i messaggi? Si potrebbe pensare che l'esistenza della costante LOG_DIR sia necessaria per il suo funzionamento? E si potrebbe creare una seconda istanza che scriva in una posizione diversa? Certamente no.

Correggiamo la classe:

```php
class Logger
{
	public function __construct(
		private string $file,
	) {
	}

	public function log(string $message): void
	{
		file_put_contents($this->file, $message . "\n", FILE_APPEND);
	}
}
```

La classe è ora molto più chiara, più configurabile e quindi più utile.

```php
$logger = new Logger('/path/to/log.txt');
$logger->log('The temperature is 15 °C');
```


Ma non mi interessa! .[#toc-but-i-don-t-care]
---------------------------------------------

*Quando creo un oggetto Article e chiamo save(), non voglio avere a che fare con il database, voglio solo che venga salvato in quello che ho impostato nella configurazione. "*

*"Quando uso Logger, voglio solo che il messaggio venga scritto e non voglio occuparmi di dove. Lasciare che vengano utilizzate le impostazioni globali. "*

Questi sono commenti corretti.

Come esempio, prendiamo una classe che invia newsletter e registriamo come è andata:

```php
class NewsletterDistributor
{
	public function distribute(): void
	{
		$logger = new Logger(/* ... */);
		try {
			$this->sendEmails();
			$logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

La versione migliorata di `Logger`, che non utilizza più la costante `LOG_DIR`, richiede un percorso di file nel costruttore. Come risolvere questo problema? Alla classe `NewsletterDistributor` non interessa dove vengono scritti i messaggi, vuole solo scriverli.

La soluzione è ancora una volta la [regola n. 1: lascia che ti venga passato |#rule #1: Let It Be Passed to You]: passare alla classe tutti i dati di cui ha bisogno.

Quindi passiamo il percorso del log al costruttore, che poi usiamo per creare l'oggetto `Logger`?

```php
class NewsletterDistributor
{
	public function __construct(
		private string $file, // NON IN QUESTO MODO!
	) {
	}

	public function distribute(): void
	{
		$logger = new Logger($this->file);
```

Non è così! Perché il percorso non fa parte dei dati di cui ha bisogno la classe `NewsletterDistributor`, ma ha bisogno di `Logger`. La classe ha bisogno del logger stesso. Ed è questo che passeremo:

```php
class NewsletterDistributor
{
	public function __construct(
		private Logger $logger, // ✅
	) {
	}

	public function distribute(): void
	{
		try {
			$this->sendEmails();
			$this->logger->log('Emails have been sent out');

		} catch (Exception $e) {
			$this->logger->log('An error occurred during the sending');
			throw $e;
		}
	}
}
```

Ora è chiaro dalle firme della classe `NewsletterDistributor` che il logging fa parte delle sue funzionalità. E il compito di sostituire il logger con un altro, magari a scopo di test, è abbastanza banale.
Inoltre, se il costruttore della classe `Logger` viene modificato, non avrà alcun effetto sulla nostra classe.


Regola n. 2: prendere ciò che è vostro .[#toc-rule-2-take-what-is-yours]
------------------------------------------------------------------------

Non lasciarsi ingannare e non farsi passare i parametri delle dipendenze. Passare direttamente le dipendenze.

Questo renderà il codice che utilizza altri oggetti completamente indipendente dalle modifiche ai loro costruttori. La sua API sarà più vera. E soprattutto, sarà banale scambiare queste dipendenze con altre.


Un nuovo membro della famiglia .[#toc-a-new-member-of-the-family]
-----------------------------------------------------------------

Il team di sviluppo ha deciso di creare un secondo logger che scrive sul database. Viene quindi creata la classe `DatabaseLogger`. Abbiamo quindi due classi, `Logger` e `DatabaseLogger`, una scrive su un file, l'altra scrive su un database... non vi sembra che questo nome abbia qualcosa di strano?
Non sarebbe meglio rinominare `Logger` in `FileLogger`? Certo che sì.

Ma facciamolo in modo intelligente. Creeremo un'interfaccia con il nome originale:

```php
interface Logger
{
	function log(string $message): void;
}
```

... che entrambi i logger implementeranno:

```php
class FileLogger implements Logger
//...

class DatabaseLogger implements Logger
//...
```

In questo modo, non sarà necessario modificare nulla nel resto del codice in cui il logger viene utilizzato. Per esempio, il costruttore della classe `NewsletterDistributor` si accontenterà di richiedere `Logger` come parametro. E dipenderà da noi quale istanza passargli.

**Questo è il motivo per cui non diamo mai ai nomi delle interfacce il suffisso `Interface` o il prefisso `I` ** Altrimenti, sarebbe impossibile sviluppare codice in modo così gradevole.


Houston, abbiamo un problema .[#toc-houston-we-have-a-problem]
--------------------------------------------------------------

Mentre in tutta l'applicazione possiamo accontentarci di una singola istanza di un logger, sia esso di file o di database, e passarlo semplicemente ovunque si debba registrare qualcosa, nel caso della classe `Article` è molto diverso. Infatti, ne creiamo istanze a seconda delle necessità, eventualmente più volte. Come gestire il legame con il database nel suo costruttore?

Come esempio, possiamo usare un controllore che deve salvare un articolo nel database dopo aver inviato un modulo:

```php
class EditController extends Controller
{
	public function formSubmitted($data)
	{
		$article = new Article(/* ... */);
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

Viene offerta direttamente una possibile soluzione: far passare l'oggetto database dal costruttore a `EditController` e usare `$article = new Article($this->db)`.

Come nel caso precedente con `Logger` e il percorso del file, questo non è l'approccio corretto. Il database non è una dipendenza di `EditController`, ma di `Article`. Quindi passare il database va contro la [regola #2: prendi ciò che è tuo |#rule #2: take what is yours]. Quando il costruttore della classe `Article` viene modificato (viene aggiunto un nuovo parametro), anche il codice in tutti i punti in cui vengono create le istanze dovrà essere modificato. Ufff.

Houston, cosa stai suggerendo?


Regola n. 3: lasciare che se ne occupi la fabbrica .[#toc-rule-3-let-the-factory-handle-it]
-------------------------------------------------------------------------------------------

Rimuovendo i vincoli nascosti e passando tutte le dipendenze come argomenti, si ottengono classi più configurabili e flessibili. Quindi abbiamo bisogno di qualcos'altro per creare e configurare queste classi più flessibili. Le chiameremo fabbriche.

La regola generale è: se una classe ha delle dipendenze, lasciare la creazione delle sue istanze al factory.

Le fabbriche sono un sostituto più intelligente dell'operatore `new` nel mondo della dependency injection.

.[note]
Non bisogna confondersi con il design pattern *factory method*, che descrive un modo specifico di usare i factory e non è correlato a questo argomento.


Fabbrica .[#toc-factory]
------------------------

Un factory è un metodo o una classe che produce e configura oggetti. Chiamiamo `Article` la classe produttrice `ArticleFactory` e potrebbe assomigliare a questa:

```php
class ArticleFactory
{
	public function __construct(
		private Nette\Database\Connection $db,
	) {
	}

	public function create(): Article
	{
		return new Article($this->db);
	}
}
```

Il suo uso nel controllore sarebbe il seguente:

```php
class EditController extends Controller
{
	public function __construct(
		private ArticleFactory $articleFactory,
	) {
	}

	public function formSubmitted($data)
	{
		// lasciare che la fabbrica crei un oggetto
		$article = $this->articleFactory->create();
		$article->title = $data->title;
		$article->content = $data->content;
		$article->save();
	}
}
```

A questo punto, quando la firma del costruttore della classe `Article` cambia, l'unica parte del codice che deve rispondere è il factory `ArticleFactory` stesso. Qualsiasi altro codice che lavora con gli oggetti `Article`, come ad esempio `EditController`, non sarà influenzato.

Forse in questo momento vi starete battendo la fronte, chiedendoci se siamo stati d'aiuto. La quantità di codice è cresciuta e il tutto comincia a sembrare sospettosamente complicato.

Non preoccupatevi, presto arriveremo al contenitore Nette DI. Questo contenitore ha una serie di assi nella manica che renderanno estremamente semplice la costruzione di applicazioni che utilizzano l'iniezione di dipendenze. Per esempio, al posto della classe `ArticleFactory`, sarà sufficiente [scrivere una semplice interfaccia |factory]:

```php
interface ArticleFactory
{
	function create(): Article;
}
```

Ma stiamo andando avanti, aspettate :-)


Riassunto .[#toc-summary]
-------------------------

All'inizio di questo capitolo abbiamo promesso di mostrare un metodo per progettare codice pulito. Basta dare alle classi

- [le dipendenze di cui hanno bisogno |#Rule #1: Let It Be Passed to You]
- [e non quelle di cui non hanno direttamente bisogno |#Rule #2: Take What Is Yours]
- [e che gli oggetti con dipendenze sono meglio realizzati in factory |#Rule #3: Let the Factory Handle it]

A prima vista può non sembrare, ma queste tre regole hanno implicazioni di vasta portata. Portano a una visione radicalmente diversa della progettazione del codice. Ne vale la pena? I programmatori che hanno abbandonato le vecchie abitudini e hanno iniziato a usare l'iniezione di dipendenza considerano questo momento cruciale della loro vita professionale. Ha aperto un mondo di applicazioni chiare e sostenibili.

Ma cosa succede se il codice non utilizza costantemente l'iniezione di dipendenza? E se è costruito con metodi statici o singleton? Questo comporta dei problemi? Sì, [ed è molto significativo |global-state].
