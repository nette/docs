Hashování hesel
***************

.[perex]
Abychom zajistili bezpečnost našich uživatelů, neukládáme jejich hesla v čitelné podobě, ale uložíme si pouze otisk (tzv. hash). Z otisku nelze zpětně zrekonstruovat původní podobu hesla. Je důležité použít bezpečný algoritmus, kterým otisk vytvoříme. S tím nám pomůže třída [api:Nette\Security\Passwords].

Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Security\Passwords;
```


__construct(int $algo = PASSWORD_DEFAULT, array $options=null): string .[method]
================================================================================

Bude generovat hash hesla pomocí moderního algoritmu. Můžeme určit parametr `cost` z rozsahu 4-31, který udává kolik iterací algoritmu má proběhnout. Pokud parametr neurčíme, bude použita výchozí hodnota `10`.

Parametr `cost` je exponent funkce 2^n. Pokud zvolíme hodnotu příliš vysokou, bude výpočet trvat velmi dlouho. Při nejvyšší hodnotě 31 trvá výpočet hesla cca 64 hodin.

```php
// budeme hesla hashovat 12 iteracemi algoritmu bcrypt
$passwords = new Passwords(PASSWORD_BCRYPT, ['cost' => 12]);
```

hash(string $passwords, array $options=null): string .[method]
==============================================================

Vygeneruje hash hesla.

```php
$hash = $passwords->hash($password); // Zahashuje heslo
```

verify(string $password, string $hash): bool .[method]
======================================================

Zjistí, zda dané heslo odpovídá danému otisku.

```php
if ($passwords->verify($password, $hash)) {
	...
}
```

needsRehash(string $hash): bool .[method]
=========================================

Zjistí, zda hash odpovídá v konstruktoru zadaným volbám.

```php
if ($passwords->needsRehash($hash)) {
	...
}
```

{{composer: nette/security}}
