Validace formulářů
******************

Pravidla
========

Na jakékoliv formulářové prvky lze používat tyto pravidla:

| `Form::REQUIRED` | povinný prvek, alias pro `setRequired()` ||
| `Form::FILLED` | povinný prvek, alias pro `setRequired()` ||
| `Form::BLANK` | prvek nesmí být vyplněn |
| `Form::EQUAL` | hodnota se rovná parametru | `mixed $value` nebo `$values[]`
| `Form::NOT_EQUAL` | hodnota se nerovná parametru | `mixed $value` nebo `$values[]`
| `Form::IS_IN` | hodnota spadá do výčtu | `mixed $value` nebo `$values[]`
| `Form::IS_NOT_IN` | hodnota nesmí spadat do výčtu | `mixed $value` nebo `$values[]`
| `Form::VALID` | je prvek vyplněn správně? Pro `addConditionOn()` ||

Pro prvky `addText()`, `addPassword()`, `addTextArea()`, `addEmail()`, `addInteger()`:

| `Form::MIN_LENGTH` | minimální délka textu | `int $minLength`
| `Form::MAX_LENGTH` | maximální délka textu | `int $maxLength`
| `Form::LENGTH` | délka v daném rozsahu nebo právě tato délka | `[int $min, int $max]` nebo `int $length`
| `Form::EMAIL` | platná e-mailová adresa
| `Form::URL` | absolutní URL
| `Form::PATTERN` | vyhovuje regulárnímu výrazu celou hodnotu, tj. jako by byl obalen znaky ^ a $ | `string $pattern`
| `Form::PATTERN_ICASE` | jako `Form::PATTERN`, ale nezávislé na velikosti písmen  | `string $pattern`
| `Form::INTEGER` | celočíselná hodnota
| `Form::NUMERIC` | alias pro `Form::INTEGER`
| `Form::FLOAT` | číslo
| `Form::MIN` | minimální hodnota číselného prvku | `int\|float $minimum`
| `Form::MAX` | maximální hodnota číselného prvku | `int\|float $maximum`
| `Form::RANGE` | hodnota v daném rozsahu | `[int $min, int $max]`

Validační pravidla `Form::INTEGER`, `NUMERIC` a `FLOAT` rovnou převádí hodnotu na integer resp. float. A dále pravidlo Form::URL, které akceptuje i řetězec ve tvaru např. `nette.org`, jej automaticky doplní na plnohodnotné `http://nette.org`.

Pro prvky `addUpload()`, `addMultiUpload()`:

| `Form::MAX_FILE_SIZE` | maximální velikost souboru | `int $bytes`
| `Form::MIME_TYPE` | MIME type | `string $mimeType` nebo `$mimeTypes[]`. Může obsahovat zástupné znaky, např. `video/*`
| `Form::IMAGE` | obrázek JPEG, PNG, GIF, WebP
| `Form::PATTERN` | jméno souboru vyhovuje regulárnímu výrazu | `string $pattern`
| `Form::PATTERN_ICASE` | jako `Form::PATTERN`, ale nezávislé na velikosti písmen | `string $pattern`

Pro prvky `addMultiUpload()`, `addCheckboxList()`, `addMultiSelect()`:

| `Form::MIN_LENGTH` | minimální počet souborů | `int $minCount`
| `Form::MAX_LENGTH` | maximální počet souborů | `int $maxCount`
| `Form::LENGTH` | počet souborů v daném rozsahu nebo právě tento počet | `[int $minCount, int $maxCount]` nebo `int $count`


Chybové hlášky
==============

Všem validačním pravidlům můžeme přidat vlastní chybovou hlášku, nebo se použije [hláška výchozí |api:Nette\Forms\Validator::$messages], kterou můžete případně přepsat. U [vícejazyčných formulářů |translations] se hlášky automaticky překládají.

V textu chybových hlášek lze používat i speciální zástupné řetězce:

| `%d`     | nahradí argumentem
| `%label` | nahradí se textem popisky
| `%name`  | nahradí se identifikátorem prvku
| `%value` | nahradí se zadanou hodnotou

Kromě pravidel lze přidávat také dotazovací podmínky. Ty se zapisují podobně jako pravidla, jen místo `addRule()` použijeme metodu `addCondition()` a pochopitelně neuvádíme žádnou chybovou zprávu (podmínka se jen ptá):

```php
$form->addPassword('password', 'Heslo:')
	// pokud není heslo delší než 5 znaků
	->addCondition($form::MAX_LENGTH, 5)
		// pak bude muset obsahovat číslici
		->addRule($form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*');
```

Podmínku je možné vázat i na jiný prvek, než ten aktuální. Stačí `addCondition()` nahradit za `addConditionOn()` a jako první parametr uvést odvolávku na jiný prvek. V tomto případě se bude e-mail vyžadovat tehdy, zaškrtne-li se checkbox (tj. jeho logická hodnota bude true):

```php
$form->addCheckbox('newsletters', 'zasílejte mi newslettery');

$form->addEmail('email', 'E-mail:')
	// pokud je checkbox zaškrtnut
	->addConditionOn($form['newsletters'], $form::EQUAL, true)
		// pak vyžaduj e-mail
		->setRequired('Zadejte e-mailovou adresu');
```

Z podmínek lze vytvářet komplexní struktury za pomoci metod `elseCondition()` a `endCondition()`.

Jak vidíte, jazyk pro formulování podmínek a pravidel je velice silný. Všechny konstrukce přitom fungují jak na straně serveru, tak i na straně JavaScriptu.

Můžeme si také přidat vlastní validátory. Metody `addRule()` a `addCondition()` totiž jako název pravidla akceptují callback:

```php
// uživatelský validátor: testuje, zda je hodnota dělitelná argumentem
// poznámka: toto je skutečná funkce, nikoliv metoda v presenteru
function divisibilityValidator(BaseControl $item, int $arg): bool
{
	return $item->getValue() % $arg === 0;
}

$form->addInteger('number', 'Číslo:')
	->addRule('divisibilityValidator', 'Číslo musí být dělitelné %d.', 8);
```


JavaScript
==========

Validační pravidla se na stranu JavaScriptu přenášejí v HTML atributech `data-nette-rules`, které obsahují JSON popisující jednotlivá pravidla nebo podmínky.
Samotnou validaci pak provádí skript, který odchytí událost `submit`, projde jednotlivé prvky a vykoná příslušnou validaci.
Výchozí implementací je knihovna `nette-forms`, která je dostupná z těchto zdrojů:

Instalací přes [npm|https://www.npmjs.com/package/nette-forms]:

```bash
npm install nette-forms
```

A načtením:

```js
import netteForms from 'nette-forms';
netteForms.initOnLoad();
```

Ze složky `vendor`:

```js
import netteForms from '../path/to/vendor/nette/forms/src/assets/netteForms.js';
netteForms.initOnLoad();
```

Z CDN:

```html
<script src="https://nette.github.io/resources/js/3/netteForms.min.js"></script>
```

Z lokálního souboru:

```html
<script src="/path/to/netteForms.min.js"></script>
```

Soubor si můžeme do veřejného adresáře zkopírovat z `vendor/nette/forms/src/assets/netteForms.min.js`.


Vlastní validační pravidla přidáme rozšířením objektu `Nette.validators`:

```html
<script>
Nette.validators.divisibilityValidator = function(elem, args, val) {
	return val % args === 0;
};
</script>
```

Pokud náš validační callback v PHP je statická metoda ve třídě, tak název pro JavaScriptový validátor vytvoříme smazáním zpětných lomítek `\` a nahrazením dvojité dvojtečky za jedno podtržítko `_`, např. `App\MyValidator::divisibilityValidator` zapíšeme jako `AppMyValidator_divisibilityValidator`.

Úprava hodnot
=============

Pomocí metody `addFilter` můžeme upravit hodnotu ještě před samotným zpracování formuláře. `addFilter` je možno kombinovat s metodami `addCondition` a `addConditionOn`.

```php
$form->addText('zip', 'PSČ:')
	->addFilter(function ($value) {
		return str_replace(' ', '', $value);
	});
```

Když poté přístoupíme ve zpracování formuláře k jeho hodnotám, PSČ již bude zbaveno mezer.


Chyby při zpracování
====================

V mnoha případech se o chybě dozvíme až ve chvíli, kdy zpracováváme platný formulář, například zapisujeme novou položku do databáze a narazíme na duplicitu klíčů. V takovém případě chybu zpětně předáme do formuláře metodou `addError()`. Tu lze volat buď na konkrétním prvku, nebo přímo na formuláři:

```php
try {
	$values = $form->getValues();
	$this->user->login($values->username, $values->password);
	$this->redirect('Homepage:');

} catch (Nette\Security\AuthenticationException $e) {
	if ($e->getCode() === Nette\Security\IAuthenticator::INVALID_CREDENTIAL) {
		$form->addError('Neplatné heslo.');
	}
	...
}
```

Doporučuje se připojit chybu přímo k prvku formuláře, protože se zobrazí vedle něj při použití výchozího rendereru.

```php
$form['date']->addError("Omlouváme se, ale toto datum již je zabrané.");
```


Validace celého formuláře
=========================

Pokud z nějakého důvodu potřebujete přidat validační funkcionalitu, typicky ověření správné kombinace hodnot ve více prvcích formuláře, můžete si napsat vlastní validační funkce. Ty pak na formulář navážete pomocí události `onValidate`:

```php
protected function createComponentSignInForm(): Form
{
	$form = new Form;
	...
	$form->onValidate[] = [$this, 'validateSignInForm'];
	return $form;
}

public function validateSignInForm(Form $form): void
{
	$values = $form->getValues();

	if (...) { // validační podmínka
		$form->addError('Tato kombinace není možná.');
	}
}
```

Na událost `onValidate` můžete registrovat libovolný počet funkcí. Funkce je chápána jako úspěšná, pokud nepřidá do formuláře chybu pomocí `$form->addError()`.

Vypnutí validace
================

Někdy se může hodit validaci vypnout. Pokud stisknutí odesílacího tlačítka nemá provádět validaci (vhodné pro tlačítka *Cancel* nebo *Preview*), vypneme ji metodou `$submit->setValidationScope([])`. Pokud má provádět validaci jen částečnou, můžeme určit které pole nebo formulářové kontejnery se mají validovat.

```php
$form->addText('name')->setRequired();

$details = $form->addContainer('details');
$details->addInteger('age')->setRequired('age');
$details->addInteger('age2')->setRequired('age2');

$form->addSubmit('send1'); // Validuje celý formuláře
$form->addSubmit('send2')->setValidationScope([]); // Nevaliduje vůbec
$form->addSubmit('send3')->setValidationScope([$form['name']]); // Validuje pouze pole name
$form->addSubmit('send4')->setValidationScope([$form['details']['age']]); // Validuje pouze pole age
$form->addSubmit('send5')->setValidationScope([$form['details']]); // Validuje kontejner details
```

`setValidationScope` neovlivní událost `onValidate` u formuláře, která bude zavolána vždy. Událost `onValidate` u kontejneru bude vyvolána pouze pokud je tento kontejner označen pro částečnou validaci.


{{composer: nette/forms}}
