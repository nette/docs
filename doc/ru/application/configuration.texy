Настройка приложения
********************

.[perex]
Обзор вариантов конфигурации приложения Nette.


Приложение
==========

```neon
application:
	# отображает вкладку "Nette Application" на синем экране Tracy?
	debugger: ...           # (bool) по умолчанию true

	# будет ли вызываться презентер ошибок при ошибке?
	catchExceptions: ...    # (bool) по умолчанию true на «боевом» сервере

	# имя презентера ошибок
	errorPresenter: Error   # (string) по умолчанию 'Nette:Error'

	# выдают ли плохие ссылки предупреждения?
	# имеет силу только в режиме разработки
	silentLinks: ...        # (bool) по умолчанию false
```

Поскольку в режиме разработки презентеры ошибок по умолчанию не вызываются, а ошибки отображаются Tracy, изменение значения `catchExceptions` на `true` помогает проверить корректность работы презентеров ошибок во время разработки.

Опция `silentLinks` определяет, как Nette ведет себя в режиме разработчика, когда генерация ссылок не удается (например, из-за отсутствия презентера и т. д.). Значение по умолчанию `false` означает, что Nette запускает `E_USER_WARNING`. Установка значения `true` подавляет это сообщение об ошибке. В производственной среде всегда вызывается `E_USER_WARNING`. Мы также можем повлиять на это поведение, установив переменную презентера [$invalidLinkMode |creating-links#Недействительные ссылки].


Маппинг
-------

Определяет правила, согласно которым имя класса (например, `App\Presenters\HomepagePresenter`) происходит от имени презентера (например, `Homepage`). Этого отображения можно достичь с помощью следующей конфигурации:

```neon
application:
	mapping:
		*: App\Presenters\*Presenter
```

Имя презентера заменяется звездочкой, и в результате получается название класса. Легко!

Если мы разделим докладчиков на модули, то для каждого модуля у нас может быть свой маппинг:

```neon
application:
	mapping:
		Front: App\Modules\Front\*Presenter
		Admin: App\Modules\Admin\*Presenter
		Api: App\Api\*Presenter
```

Теперь презентер `Front:Homepage` определяется классом ``App\Modules\Front\HomepagePresenter``, а презентер `Admin:Dashboard`` — ``App\AdminModule\DashboardPresenter``.

Удобнее будет создать общее правило (звездочка), которое заменит первые два правила и добавит дополнительную звездочку только для модуля:

```neon
application:
	mapping:
		*: App\Modules\*\*Presenter
		Api: App\Api\*Presenter
```

Опять же, презентер `Front:Homepage` определяется классом ``App\Modules\Front\HomepagePresenter``.

Но что если мы используем вложенные модули и имеем презентер `Admin:User:Edit`? В этом случае сегмент со звездочкой, представляющий модуль для каждого уровня, просто повторяется, и в результате получается класс `App\Modules\Admin\User\EditPresenter`.

Альтернативной нотацией является использование массива, состоящего из трех сегментов, вместо строки:

```neon
application:
	mapping:
		*: [App\Modules, *, *Presenter]
```

Эта запись эквивалентна оригиналу `App\Modules\*\*Presenter`.

Значение по умолчанию `*: *Module\*Presenter`.


Авторегистрация презентеров
---------------------------

Nette автоматически добавляет презентеры как сервисы в контейнер DI, что значительно ускоряет их создание. Как Nette узнает презентеры, можно настроить:

```neon
application:
	# для поиска презентеров в карте классов Composer?
	scanComposer: ...      # (bool) по умолчанию true

	# маска, которая должна соответствовать классу и имени файла
	scanFilter: ...        # (string) по умолчанию '*Presenter'

	# в каких каталогах искать презентеры?
	scanDirs:              # (string[]|false) по умолчанию '%appDir%'
		- %vendorDir%/mymodule
```

Каталоги, перечисленные в `scanDirs`, не отменяют значение по умолчанию `%appDir%`, а дополняют его, поэтому `scanDirs` будет содержать оба пути `%appDir%` и `%vendorDir%/mymodule`. Чтобы перезаписать каталог по умолчанию, мы используем [восклицательный знак |/dependency-injection/configuration#Merging]:

```neon
application:
	scanDirs!:
		- %vendorDir%/mymodule
```

Сканирование каталога можно отключить, задав значение `false`. Мы не рекомендуем полностью подавлять автоматическое добавление презентеров, иначе производительность приложения снизится.


Latte
=====

Эта настройка глобально влияет на поведение Latte в компонентах и презентерах.

```neon
latte:
	# отображает вкладку Latte на панели Tracy для основного шаблона (true) или для всех компонентов (all)?
	debugger: ...        # (true|false|'all') по умолчанию true

	# переключает Latte в режим XHTML (deprecated)
	xhtml: ...           # (bool) по умолчанию false

	# генерирует шаблоны с declare(strict_types=1)
	strictTypes: ...     # (bool) по умолчанию false

	# класс $this->template
	templateClass: App\MyTemplateClass # по умолчанию Nette\Bridges\ApplicationLatte\DefaultTemplate
```

Также можно зарегистрировать новые теги, введя имя класса или обратившись к сервису. По умолчанию вызывается метод `install()`, но это можно изменить, указав имя другого метода:

```neon
latte:
	# регистрация пользовательских тегов Latte
	macros:
		- App\MyLatteMacros::register         # статический метод, имя класса или вызываемый объект
		- @App\MyLatteMacrosFactory           # сервис с методом установки
		- @App\MyLatteMacrosFactory::register # обслуживание с помощью метода регистрации

services:
	- App\MyLatteMacrosFactory
```


Маршрутизация
=============

Основные настройки:

```neon
routing:
	# отображает вкладку Routing на панели Tracy?
	debugger: ...   # (bool) по умолчанию true

	# осуществлять сериализацию маршрутов в DI-контейнере?
	cache: ...      # (bool) по умолчанию false
```

Маршруты обычно определяются в классе RouterFactory. Альтернативно, простые правила маршрутизации можно определить в конфигурации с помощью пар `маска: действие`:

```neon
routing:
	routes:
		'detail/<id>': Admin:Home:default
		'<presenter>/<action>': Front:Home:default
```


Константы
=========

Создание констант PHP:

```neon
constants:
	FOOBAR: 'baz'
```

Константа `FOOBAR` будет создана после запуска.


PHP
===

Вы можете устанавливать директивы PHP. Обзор всех директив можно найти на сайте [php.net |https://www.php.net/manual/ru/ini.list.php].

```neon
php:
	date.timezone: Europe/Prague
```

{{composer: nette/application}}
