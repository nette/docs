Transmiterea dependențelor
**************************
<div class=perex>


Argumentele, sau "dependențele" în terminologia DI, pot fi transmise claselor în următoarele moduri principale:

* trecerea prin constructor
* transmiterea prin metodă (numită setter)
* prin stabilirea unei proprietăți
* prin metoda, adnotarea sau atributul *inject*.

</div>

Primele trei metode se aplică în general în toate limbajele orientate pe obiecte, cea de-a patra este specifică prezentatorilor Nette, așa că este discutată într-un [capitol separat |best-practices:inject-method-attribute]. În continuare, vom analiza mai îndeaproape fiecare dintre aceste opțiuni și le vom prezenta cu exemple specifice.


Injectarea constructorilor .[#toc-constructor-injection]
========================================================

Dependențele sunt transmise ca argumente constructorului atunci când obiectul este creat:

```php
class MyService
{
	private Cache $cache;

	public function __construct(Cache $service)
	{
		$this->cache = $service;
	}
}

$service = new MyService($cache);
```

Această formă este utilă pentru dependențele obligatorii de care clasa are neapărat nevoie pentru a funcționa, deoarece fără ele instanța nu poate fi creată.

Începând cu PHP 8.0, putem utiliza o formă mai scurtă de notație care este echivalentă din punct de vedere funcțional:

```php
// PHP 8.0
class MyService
{
	public function __construct(
		private Cache $service,
	) {
	}
}
```

Începând cu PHP 8.1, o proprietate poate fi marcată cu un indicator `readonly` care declară că conținutul proprietății nu se va modifica:

```php
// PHP 8.1
class MyService
{
	public function __construct(
		private readonly Cache $service,
	) {
	}
}
```

Containerul DI transmite dependențele către constructor în mod automat, utilizând [autowiring |autowiring]. Argumentele care nu pot fi transmise [în |services#Arguments] acest mod (de exemplu, șiruri de caractere, numere, booleeni) se [scriu în configurație |services#Arguments].


Injectarea setterilor .[#toc-setter-injection]
==============================================

Dependențele sunt transmise prin apelarea unei metode care le stochează într-o proprietate privată. Convenția de denumire obișnuită pentru aceste metode este de forma `set*()`, motiv pentru care sunt numite setteri.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		$this->cache = $service;
	}
}

$service = new MyService;
$service->setCache($cache);
```

Această metodă este utilă pentru dependențele opționale care nu sunt necesare pentru funcția clasei, deoarece nu este garantat faptul că obiectul le va primi efectiv (adică, că utilizatorul va apela metoda).

În același timp, această metodă permite ca setterul să fie apelat în mod repetat pentru a modifica dependența. Dacă acest lucru nu este de dorit, adăugați o verificare la metodă sau, începând cu PHP 8.1, marcați proprietatea `$cache` cu steagul `readonly`.

```php
class MyService
{
	private Cache $cache;

	public function setCache(Cache $service): void
	{
		if ($this->cache) {
			throw new RuntimeException('The dependency has already been set');
		}
		$this->cache = $service;
	}
}
```

Apelarea setterului este definită în configurația containerului DI în [secțiunea setup |services#Setup]. Tot aici este utilizată trecerea automată a dependențelor prin autowiring:

```neon
services:
	-
		create: MyService
		setup:
			- setCache
```


Injectarea proprietăților .[#toc-property-injection]
====================================================

Dependențele sunt trecute direct în proprietate:

```php
class MyService
{
	public Cache $cache;
}

$service = new MyService;
$service->cache = $cache;
```

Această metodă este considerată nepotrivită deoarece proprietatea trebuie declarată ca fiind `public`. Prin urmare, nu avem niciun control asupra faptului că dependența transmisă va fi de tipul specificat (acest lucru era valabil înainte de PHP 7.4) și pierdem posibilitatea de a reacționa la dependența nou atribuită cu propriul cod, de exemplu pentru a preveni modificările ulterioare. În același timp, proprietatea devine parte a interfeței publice a clasei, ceea ce poate să nu fie de dorit.

Setarea variabilei este definită în configurația containerului DI în [secțiunea de configurare |services#Setup]:

```neon
services:
	-
		create: MyService
		setup:
			- $cache = @\Cache
```


Ce modalitate să alegeți? .[#toc-which-way-to-choose]
=====================================================

- constructorul este potrivit pentru dependențele obligatorii de care clasa are nevoie pentru a funcționa
- setterul, pe de altă parte, este potrivit pentru dependențele opționale sau pentru dependențele care pot fi modificate
- variabilele publice nu sunt recomandate
