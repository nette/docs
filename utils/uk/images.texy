Робота із зображеннями
**********************

.[perex]
Клас [api:Nette\Utils\Image] спрощує маніпуляції із зображеннями, такі як зміна розміру, обрізка, підвищення різкості, малювання або об'єднання кількох зображень.


PHP має великий набір функцій для маніпуляції зображеннями. Але їхній API не дуже зручний. Це був би не Nette Framework, якби він не запропонував сексуальний API.

Встановлення:

```shell
composer require nette/utils
```

Усі приклади передбачають створений псевдонім:

```php
use Nette\Utils\Image;
use Nette\Utils\ImageColor;
use Nette\Utils\ImageType;
```


Створення зображення
====================

Створимо нове true color зображення, наприклад, з розмірами 100×200:

```php
$image = Image::fromBlank(100, 200);
```

За бажанням можна вказати колір фону (за замовчуванням чорний):

```php
$image = Image::fromBlank(100, 200, ImageColor::rgb(125, 0, 0));
```

Або завантажимо зображення з файлу:

```php
$image = Image::fromFile('nette.jpg');
```


Збереження зображення
=====================

Зображення можна зберегти у файл:

```php
$image->save('resampled.jpg');
```

Ми можемо вказати якість стиснення в діапазоні 0..100 для JPEG (за замовчуванням 85), WEBP (за замовчуванням 80) та AVIF (за замовчуванням 30) і 0..9 для PNG (за замовчуванням 9):

```php
$image->save('resampled.jpg', 80); // JPEG, якість 80%
```

Якщо з розширення файлу не зрозумілий формат, його можна вказати [константою|#Formáty]:

```php
$image->save('resampled.tmp', null, ImageType::JPEG);
```

Зображення можна замість диска записати у змінну:

```php
$data = $image->toString(ImageType::JPEG, 80); // JPEG, якість 80%
```

або надіслати безпосередньо в браузер із відповідним HTTP заголовком `Content-Type`:

```php
// надсилає заголовок Content-Type: image/png
$image->send(ImageType::PNG);
```


Формати
=======

Підтримувані формати: JPEG, PNG, GIF, WebP, AVIF та BMP, однак їх також має підтримувати ваша версія PHP, що можна перевірити функцією [#isTypeSupported()]. Анімація не підтримується.

Формат представлений константами `ImageType::JPEG`, `ImageType::PNG`, `ImageType::GIF`, `ImageType::WEBP`, `ImageType::AVIF` та `ImageType::BMP`.

```php
$supported = Image::isTypeSupported(ImageType::JPEG);
```

Потрібно визначити формат зображення під час завантаження? Метод поверне його у другому параметрі:

```php
$image = Image::fromFile('nette.jpg', $type);
```

Саме визначення без завантаження зображення виконує `Image::detectTypeFromFile()`.


Зміна розміру
=============

Частою операцією є зміна розмірів зображення. Поточні розміри повертають методи `getWidth()` та `getHeight()`.

Для зміни служить метод `resize()`. Приклад пропорційної зміни розміру так, щоб він не перевищував розміри 500x300 пікселів (або ширина буде точно 500 px, або висота буде точно 300 px, один із розмірів обчислюється так, щоб зберегти співвідношення сторін):

```php
$image->resize(500, 300);
```

Можна вказати лише один розмір, а другий обчислиться:

```php
$image->resize(500, null); // ширина 500px, висота обчислюється

$image->resize(null, 300); // ширина обчислюється, висота 300px
```

Будь-який розмір можна вказати також у відсотках:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Поведінку `resize` можна змінити за допомогою таких прапорців. Усі, крім `Image::Stretch`, зберігають співвідношення сторін.

|---------------------------------------------------------------------------------------
| Прапорець            | Опис
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (за замовчуванням) | кінцеві розміри будуть меншими або рівними заданим розмірам
| `Image::OrBigger`         | заповнює (і, можливо, перевищує в одному вимірі) цільову область
| `Image::Cover`            | заповнює цільову область і обрізає те, що виходить за межі
| `Image::ShrinkOnly`       | тільки зменшення (запобігає розтягуванню маленького зображення)
| `Image::Stretch`          | не зберігати співвідношення сторін


Прапорці вказуються як третій аргумент функції:

```php
$image->resize(500, 300, Image::OrBigger);
```

Прапорці можна комбінувати:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Зображення можна вертикально або горизонтально перевернути, вказавши один із розмірів (або обидва) як від'ємне число:

```php
$flipped = $image->resize(null, '-100%'); // перевернути вертикально

$flipped = $image->resize('-100%', '-100%'); // повернути на 180°

$flipped = $image->resize(-125, 500); // змінити розмір і перевернути горизонтально
```

Після зменшення зображення можна покращити його вигляд легким підвищенням різкості:

```php
$image->sharpen();
```


Обрізка
=======

Для обрізки служить метод `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Подібно до `resize()`, усі значення можуть бути вказані у відсотках. Відсотки для `$left` та `$top` обчислюються з решти місця, подібно до CSS властивості `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Зображення також можна обрізати автоматично, наприклад, обрізати чорні краї:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Метод `cropAuto()` є об'єктною заміною функції `imagecropauto()`, в [її документації|https://www.php.net/manual/en/function.imagecropauto] ви знайдете додаткову інформацію.


Кольори .{data-version:4.0.2}
=============================

Метод `ImageColor::rgb()` дозволяє визначити колір за допомогою значень червоного, зеленого та синього (RGB). За бажанням ви також можете вказати значення прозорості в діапазоні від 0 (повністю прозорий) до 1 (повністю непрозорий), так само, як у CSS.

```php
$color = ImageColor::rgb(255, 0, 0); // Червоний
$transparentBlue = ImageColor::rgb(0, 0, 255, 0.5); // Напівпрозорий синій
```

Метод `ImageColor::hex()` дозволяє визначити колір за допомогою шістнадцяткового формату, подібно до CSS. Підтримує формати `#rgb`, `#rrggbb`, `#rgba` та `#rrggbbaa`:

```php
$color = ImageColor::hex("#F00"); // Червоний
$transparentGreen = ImageColor::hex("#00FF0080"); // Напівпрозорий зелений
```

Кольори можна використовувати в інших методах, таких як `ellipse()`, `fill()` тощо.


Малювання та редагування
========================

Можеш малювати, можеш писати, але листя не рвати. Вам доступні всі функції PHP для роботи із зображеннями, див. [#Přehled metod], але в об'єктній обгортці:

```php
$image->filledEllipse($centerX, $centerY, $width, $height, ImageColor::rgb(255, 0, 0));
```

Оскільки функції PHP для малювання прямокутників непрактичні через визначення координат, клас `Image` пропонує їхні заміни у вигляді функцій [#rectangleWH()] та [#filledRectangleWH()].


Об'єднання кількох зображень
============================

В зображення можна легко вставити інше зображення:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, ImageColor::rgb(52, 132, 210));

// координати можна вказати знову у відсотках
$blank->place($logo, '80%', '80%'); // вставимо поблизу правого нижнього кута
```

При вставці враховується альфа-канал, крім того, ми можемо впливати на прозорість вставлюваного зображення (створимо так званий водяний знак):

```php
$blank->place($image, '80%', '80%', 25); // прозорість 25 %
```

Такий API справді приємно використовувати!


Огляд методів
=============


static fromBlank(int $width, int $height, ?ImageColor $color=null): Image .[method]
-----------------------------------------------------------------------------------
Створює нове true color зображення заданих розмірів. Колір за замовчуванням — чорний.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Завантажує зображення з файлу і повертає його [тип|#Formáty] у `$detectedFormat`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Завантажує зображення з рядка і повертає його [тип|#Formáty] у `$detectedFormat`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method][deprecated]
---------------------------------------------------------------------------------------------
Цю функцію замінив клас `ImageColor`, див. [кольори|#Barvy].


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Повертає розширення файлу для даного [типу|#Formáty].


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Повертає mime-тип для даного [типу|#Formáty].


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Повертає [тип|#Formáty] зображення за розширенням файлу.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Повертає [тип|#Formáty] зображення, а в параметрах `$width` та `$height` також його розміри.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Повертає [тип|#Formáty] зображення з рядка, а в параметрах `$width` та `$height` також його розміри.


static isTypeSupported(int $type): bool .[method]
-------------------------------------------------
Перевіряє, чи підтримується даний [тип|#Formáty] зображення.


static getSupportedTypes(): array .[method]{data-version:4.0.4}
---------------------------------------------------------------
Повертає масив підтримуваних [типів|#Formáty] зображення.


static calculateTextBox(string $text, string $fontFile, float $size, float $angle=0, array $options=[]): array .[method]
------------------------------------------------------------------------------------------------------------------------
Обчислює розміри прямокутника, який охоплює текст певним шрифтом та розміром. Повертає асоціативний масив, що містить ключі `left`, `top`, `width`, `height`. Лівий край може бути від'ємним, якщо текст починається з лівого підрізання.


affine(array $affine, ?array $clip=null): Image .[method]
---------------------------------------------------------
Повертає зображення, що містить афінно трансформоване зображення src, використовуючи необов'язкову область обрізки. ([більше |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Повертає конкатенацію двох афінних матриць трансформації, що корисно, якщо до одного зображення потрібно застосувати кілька трансформацій одночасно. ([більше |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, ?mixed $options=null): array .[method]
-----------------------------------------------------------------
Повертає матрицю трансформації. ([більше |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Дозволяє два різних режими малювання в зображеннях truecolor. У режимі змішування компонент альфа-каналу кольору, що використовується у всіх функціях малювання, таких як `setPixel()`, визначає, наскільки має бути дозволено просвічування основного кольору. В результаті існуючий колір автоматично змішується з кольором малювання в цій точці, і результат зберігається в зображенні. Отриманий піксель є непрозорим. У режимі без змішування колір малювання копіюється буквально з інформацією про альфа-канал і замінює цільовий піксель. Режим змішування недоступний при малюванні на палітрових зображеннях. ([більше |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Активуйте малювання згладжених ліній та полігонів. Не підтримує альфа-канали. Працює тільки з зображеннями truecolor.

Використання згладжених примітивів з прозорим кольором фону може призвести до несподіваних результатів. Метод змішування використовує колір фону так само, як і всі інші кольори. ([більше |https://www.php.net/manual/en/function.imageantialias])


arc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color): void .[method]
---------------------------------------------------------------------------------------------------------------------------
Малює дугу кола з центром у заданих координатах. ([більше |https://www.php.net/manual/en/function.imagearc])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Повертає ідентифікатор кольору, що представляє колір, складений із заданих компонентів RGB. Має бути викликаний для створення кожного кольору, який буде використовуватися в зображенні. ([більше |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Поводиться так само, як `colorAllocate()`, з додаванням параметра прозорості `$alpha`. ([більше |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Повертає індекс кольору пікселя у вказаному місці зображення. Якщо зображення є truecolor, ця функція повертає значення RGB цього пікселя як ціле число. Використовуйте бітовий зсув та бітову маску для доступу до окремих значень червоної, зеленої та синьої компонент: ([більше |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Повертає індекс кольору в палітрі зображення, який є «найближчим» до заданого значення RGB. "Відстань" між бажаним кольором та кожним кольором у палітрі обчислюється так, ніби значення RGB представляють точки в тривимірному просторі. ([більше |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Повертає індекс кольору в палітрі зображення, який є «найближчим» до заданого значення RGB та рівня `$alpha`. ([більше |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Отримайте індекс кольору, який має відтінок, білий та чорний колір, найближчі до заданого кольору. ([більше |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Де-алокує колір, раніше виділений за допомогою `colorAllocate()` або `colorAllocateAlpha()`. ([більше |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Повертає індекс заданого кольору в палітрі зображення. ([більше |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Повертає індекс заданого кольору + альфа в палітрі зображення. ([більше |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Пристосовує кольори палітри до другого зображення. ([більше |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Повертає індекс кольору для бажаного кольору, або точний колір, або найближчу можливу альтернативу. ([більше |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Повертає індекс кольору для бажаного кольору, або точний колір, або найближчу можливу альтернативу. ([більше |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Встановлює заданий індекс у палітрі на заданий колір. ([більше |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Отримує колір зазначеного індексу. ([більше |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Повертає кількість кольорів у палітрі зображення. ([більше |https://www.php.net/manual/en/function.imagecolorstotal])


colorTransparent(?int $color=null): int .[method]
-------------------------------------------------
Отримує або встановлює прозорий колір у зображенні. ([більше |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Застосовує до зображення матрицю згортки, використовуючи заданий коефіцієнт та зсув. ([більше |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Потребує наявності *Bundled GD extension*, тому може працювати не скрізь.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Копіює частину `$src` на зображення, починаючи з координат `$srcX`, `$srcY` з шириною `$srcW` та висотою `$srcH`. Визначена частина буде скопійована на координати `$dstX` та `$dstY`. ([більше |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Копіює частину `$src` на зображення, починаючи з координат `$srcX`, `$srcY` з шириною `$srcW` та висотою `$srcH`. Визначена частина буде скопійована на координати `$dstX` та `$dstY`. ([більше |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Копіює частину `$src` на зображення, починаючи з координат `$srcX`, `$srcY` з шириною `$srcW` та висотою `$srcH`. Визначена частина буде скопійована на координати `$dstX` та `$dstY`.

Ця функція ідентична `copyMerge()`, за винятком того, що при злитті зберігає відтінок джерела, перетворюючи цільові пікселі на сіру шкалу перед операцією копіювання. ([більше |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Копіює прямокутну частину одного зображення на інше зображення, плавно інтерполюючи значення пікселів, так що, зокрема, зменшення розміру зображення все ще зберігає велику чіткість.

Іншими словами, `copyResampled()` бере прямокутну область з `$src` шириною `$srcW` та висотою `$srcH` в позиції (`$srcX`, `$srcY`) і розміщує її в прямокутній області зображення шириною `$dstW` та висотою `$dstH` в позиції (`$dstX`, `$dstY`).

Якщо вихідні та цільові координати, ширина та висота відрізняються, виконується відповідне розтягування або зменшення фрагмента зображення. Координати відносяться до лівого верхнього кута. Цю функцію можна використовувати для копіювання областей в тому ж зображенні, але якщо області перекриваються, результати будуть непередбачуваними. ([більше |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Копіює прямокутну частину одного зображення на інше зображення. Іншими словами, `copyResized()` отримує прямокутну область з `$src` шириною `$srcW` та висотою `$srcH` в позиції (`$srcX`, `$srcY`) і розміщує її в прямокутній області зображення шириною `$dstW` ] та висотою `$dstH` в позиції (`$dstX`, `$dstY`).

Якщо вихідні та цільові координати, ширина та висота відрізняються, виконується відповідне розтягування або зменшення фрагмента зображення. Координати відносяться до лівого верхнього кута. Цю функцію можна використовувати для копіювання областей в тому ж зображенні, але якщо області перекриваються, результати будуть непередбачуваними. ([більше |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Обрізає зображення до заданої прямокутної області. Розміри можна задавати як цілі числа в пікселях або рядки у відсотках (наприклад, `'50%'`).


cropAuto(int $mode=-1, float $threshold=.5, ?ImageColor $color=null): Image .[method]
-------------------------------------------------------------------------------------
Автоматично обрізає зображення відповідно до заданого `$mode`. ([більше |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------
Малює еліпс з центром у заданих координатах. ([більше |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, ImageColor $color): void .[method]
-------------------------------------------------------
Заповнює область, починаючи з заданої координати (лівий верхній кут — 0, 0), заданим `$color`. ([більше |https://www.php.net/manual/en/function.imagefill])


filledArc(int $centerX, int $centerY, int $width, int $height, int $startAngle, int $endAngle, ImageColor $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------------------------------------------------
Малює часткову дугу з центром у заданих координатах. ([більше |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $centerX, int $centerY, int $width, int $height, ImageColor $color): void .[method]
-----------------------------------------------------------------------------------------------------
Малює еліпс з центром у заданих координатах. ([більше |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------------
Створює в зображенні заповнений багатокутник. ([більше |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------
Створює прямокутник, заповнений `$color` в зображенні, починаючи з точки `$x1` & `$y1` і закінчуючи точкою `$x2` & `$y2`. Точка 0, 0 — це лівий верхній кут зображення. ([більше |https://www.php.net/manual/en/function.imagefilledrectangle])


filledRectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------------
Створює прямокутник, заповнений `$color` в зображенні, починаючи з точки `$left` & `$top` з шириною `$width` та висотою `$height`. Точка 0, 0 — це лівий верхній кут зображення.


fillToBorder(int $x, int $y, int $border, ImageColor $color): void .[method]
----------------------------------------------------------------------------
Виконує заливку, колір межі якої визначено за допомогою `$border`. Початковою точкою заливки є `$x`, `$y` (лівий верхній кут — 0, 0), а область заповнюється кольором `$color`. ([більше |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Застосовує заданий фільтр `$filtertype` до зображення. ([більше |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Перевертає зображення за допомогою заданого `$mode`. ([більше |https://www.php.net/manual/en/function.imageflip])


ftText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
----------------------------------------------------------------------------------------------------------------------------------------
Написати текст на зображенні. ([більше |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Застосовує гамма-корекцію до зображення відносно вхідної та вихідної гамми. ([більше |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Повертає поточну область обрізки, тобто область, за межами якої не будуть намальовані жодні пікселі. ([більше |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Повертає висоту зображення.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Повертає оригінальний ресурс.


getWidth(): int .[method]
-------------------------
Повертає ширину зображення.


interlace(?int $interlace=null): int .[method]
----------------------------------------------
Вмикає або вимикає режим черезрядкової розгортки. Якщо режим черезрядкової розгортки встановлено і зображення зберігається як JPEG, воно буде збережено як прогресивний JPEG. ([більше |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Визначає, чи є зображення truecolor. ([більше |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Встановіть прапорець змішування альфа, щоб використовувати ефекти шарів. ([більше |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
---------------------------------------------------------------------------
Малює лінію між двома заданими точками. ([більше |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, ImageColor $color): void .[method]
-------------------------------------------------------------
Малює на зображенні відкритий багатокутник. На відміну від `polygon()`, між останньою та першою точкою лінія не малюється. ([більше |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Копіює палітру з `$source` до зображення. ([більше |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Перетворює зображення на основі палітри на повнокольорове зображення. ([більше |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Копіює `$image` до зображення на координати `$left` та `$top`. Координати можна задавати як цілі числа в пікселях або рядки у відсотках (наприклад, `'50%'`).


polygon(array $points, ImageColor $color): void .[method]
---------------------------------------------------------
Створює в зображенні багатокутник. ([більше |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, ImageColor $color): void .[method]
--------------------------------------------------------------------------------
Створює прямокутник на заданих координатах. ([більше |https://www.php.net/manual/en/function.imagerectangle])


rectangleWH(int $left, int $top, int $width, int $height, ImageColor $color): void .[method]
--------------------------------------------------------------------------------------------
Створює прямокутник на заданих координатах.


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Змінює розмір зображення, [більше інформації|#Změna velikosti]. Розміри можна задавати як цілі числа в пікселях або рядки у відсотках (наприклад, `'50%'`).


resolution(?int $resX=null, ?int $resY=null): mixed .[method]
-------------------------------------------------------------
Встановлює або повертає роздільну здатність зображення в DPI (точки на дюйм). Якщо не задано жодного з необов'язкових параметрів, поточна роздільна здатність повертається як індексований масив. Якщо задано лише `$resX`, горизонтальна та вертикальна роздільна здатність встановлюються на це значення. Якщо задано обидва необов'язкові параметри, горизонтальна та вертикальна роздільна здатність встановлюються на ці значення.

Роздільна здатність використовується лише як метаінформація, коли зображення читаються та записуються у формати, що підтримують цей тип інформації (наразі PNG та JPEG). Це не впливає на жодні операції малювання. Стандартна роздільна здатність нових зображень — 96 DPI. ([більше |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Повертає зображення за допомогою заданого `$angle` у градусах. Центр обертання — це центр зображення, і повернуте зображення може мати інші розміри, ніж оригінальне зображення. ([більше |https://www.php.net/manual/en/function.imagerotate])

.[note]
Потребує наявності *Bundled GD extension*, тому може працювати не скрізь.


save(string $file, ?int $quality=null, ?int $type=null): void .[method]
-----------------------------------------------------------------------
Зберігає зображення у файл.

Якість стиснення знаходиться в діапазоні 0..100 для JPEG (за замовчуванням 85), WEBP (за замовчуванням 80) та AVIF (за замовчуванням 30) і 0..9 для PNG (за замовчуванням 9). Якщо тип не зрозумілий з розширення файлу, ви можете вказати його за допомогою однієї з констант `ImageType`.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Встановлює прапорець, чи зберігати повну інформацію про альфа-канал при збереженні зображень PNG (на відміну від одноколірної прозорості).

Альфа-змішування має бути вимкнено (`alphaBlending(false)`), щоб альфа-канал зберігся на першому місці. ([більше |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Масштабує зображення за допомогою заданого алгоритму інтерполяції. ([більше |https://www.php.net/manual/en/function.imagescale])


send(int $type=ImageType::JPEG, ?int $quality=null): void .[method]
-------------------------------------------------------------------
Виводить зображення в браузер.

Якість стиснення знаходиться в діапазоні 0..100 для JPEG (за замовчуванням 85), WEBP (за замовчуванням 80) та AVIF (за замовчуванням 30) і 0..9 для PNG (за замовчуванням 9).


setBrush(Image $brush): void .[method]
--------------------------------------
Встановлює зображення пензля, яке буде використовуватися у всіх функціях малювання ліній (наприклад, `line()` та `polygon()`) при малюванні спеціальними кольорами IMG_COLOR_BRUSHED або IMG_COLOR_STYLEDBRUSHED. ([більше |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Встановлює поточну область обрізки, тобто область, за межами якої не будуть намальовані жодні пікселі. ([більше |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Встановлює метод інтерполяції, який впливає на методи `rotate()` та `affine()`. ([більше |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, ImageColor $color): void .[method]
-----------------------------------------------------------
Малює піксель на заданій координаті. ([більше |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Встановлює стиль, який мають використовувати всі функції малювання ліній (наприклад, `line()` та `polygon()`) при малюванні спеціальним кольором IMG_COLOR_STYLED або ліній зображень з кольором IMG_COLOR_STYLEDBRUSHED. ([більше |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Встановлює товщину ліній при малюванні прямокутників, багатокутників, дуг тощо на `$thickness` пікселів. ([більше |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Встановлює зображення плитки, яке буде використовуватися у всіх функціях заповнення областей (наприклад, `fill()` та `filledPolygon()`), коли заповнюється спеціальним кольором IMG_COLOR_TILED.

Плитка — це зображення, яке використовується для заповнення області повторюваним візерунком. Будь-яке зображення можна використовувати як плитку, а встановивши прозорий індекс кольору зображення плитки за допомогою `colorTransparent()`, можна створити плитку, де будуть просвічувати певні частини базової області. ([більше |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Підвищує різкість зображення.

.[note]
Потребує наявності *Bundled GD extension*, тому може працювати не скрізь.


toString(int $type=ImageType::JPEG, ?int $quality=null): string .[method]
-------------------------------------------------------------------------
Зберігає зображення в рядок.

Якість стиснення знаходиться в діапазоні 0..100 для JPEG (за замовчуванням 85), WEBP (за замовчуванням 80) та AVIF (за замовчуванням 30) і 0..9 для PNG (за замовчуванням 9).


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Перетворює зображення truecolor на палітрове. ([більше |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(float $size, float $angle, int $x, int $y, ImageColor $color, string $fontFile, string $text, array $options=[]): array .[method]
-----------------------------------------------------------------------------------------------------------------------------------------
Виводить заданий текст на зображення. ([більше |https://www.php.net/manual/en/function.imagettftext])
