Bildfunktionen
**************

.[perex]
Die Klasse [api:Nette\Utils\Image] vereinfacht die Bildbearbeitung, z. B. das Ändern der Größe, Beschneiden, Schärfen, Zeichnen oder Zusammenführen mehrerer Bilder.

PHP verfügt über einen umfangreichen Satz von Funktionen zur Bearbeitung von Bildern. Aber die API ist nicht sehr schön. Es wäre kein Neat Framework, wenn es eine sexy API gäbe.

Einbau:

```shell
composer require nette/utils
```

Die folgenden Beispiele gehen davon aus, dass der folgende Klassenalias definiert ist:

```php
use Nette\Utils\Image;
```


Ein Bild erstellen .[#toc-creating-an-image]
============================================

Wir erstellen ein neues Echtfarbbild, zum Beispiel mit den Maßen 100×200:

```php
$image = Image::fromBlank(100, 200);
```

Optional können Sie eine Hintergrundfarbe angeben (Standard ist schwarz):

```php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
```

Oder wir laden das Bild aus einer Datei:

```php
$image = Image::fromFile('nette.jpg');
```

Müssen Sie das Bildformat beim Laden erkennen? Die Methode gibt das Format im zweiten Parameter zurück:

```php
$image = Image::fromFile('nette.jpg', $type);
// $type ist Image::JPEG, Image::PNG, Image::GIF, Image::WEBP oder Image::BMP
```

Die Erkennung ohne Ladung erfolgt durch `Image::detectTypeFromFile()` verwendet werden.


Speichern Sie das Bild .[#toc-save-the-image]
=============================================

Das Bild kann in einer Datei gespeichert werden:

```php
$image->save('resampled.jpg');
```

Wir können die Kompressionsqualität im Bereich 0..100 für JPEG (Standard 85) und WEBP (Standard 80) und 0..9 für PNG (Standard 9) angeben:

```php
$image->save('resampled.jpg', 80); // JPEG, Qualität 80%
```

Wenn das Format nicht aus der Dateierweiterung ersichtlich ist, können Sie es mit einer der Konstanten `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` und `Image::BMP` angeben:

```php
$image->save('resampled.tmp', null, Image::JPEG);
```

Das Bild kann in eine Variable statt auf die Festplatte geschrieben werden:

```php
$data = $image->toString(Image::JPEG, 80); // JPEG, Qualität 80%.
```

oder direkt an den Browser mit dem entsprechenden HTTP-Header `Content-Type` senden:

```php
// sendet Kopfzeile Content-Type: image/png
$image->send(Image::PNG);
```


Bildgröße ändern .[#toc-image-resize]
=====================================

Ein gängiger Vorgang ist die Größenänderung eines Bildes. Die aktuellen Abmessungen werden von den Methoden `getWidth()` und `getHeight()` zurückgegeben.

Die Methode `resize()` wird für die Größenänderung verwendet. Dies ist ein Beispiel für eine proportionale Größenänderung, so dass sie 500×300 Pixel nicht überschreitet (entweder ist die Breite genau 500px oder die Höhe genau 300px, eine der Dimensionen wird berechnet, um das Seitenverhältnis beizubehalten):

```php
$image->resize(500, 300);
```

Es ist möglich, nur eine Dimension festzulegen, und die zweite Dimension wird berechnet:

```php
$image->resize(500, null); // Breite 500px, Höhe auto

$image->resize(null, 300); // Breite auto, Höhe 300px
```

Jedes Maß kann in Prozenten angegeben werden:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Das Verhalten von `resize` kann durch die folgenden Flags beeinflusst werden. Alle außer `Image::Stretch` behalten das Seitenverhältnis bei.

|---------------------------------------------------------------------------------------
| Flagge | Beschreibung
|---------------------------------------------------------------------------------------
| `Image::OrSmaller` (Standard) | Die resultierenden Abmessungen sind kleiner oder gleich den angegebenen
| `Image::OrBigger` | füllt den Zielbereich aus und erweitert ihn möglicherweise in eine Richtung
| `Image::Cover` | füllt den gesamten Bereich aus und schneidet ab, was darüber hinausgeht
| `Image::ShrinkOnly` | skaliert nur nach unten (erweitert ein kleines Bild nicht)
| `Image::Stretch` | behält das Seitenverhältnis nicht bei


Die Flaggen werden als drittes Argument der Funktion übergeben:

```php
$image->resize(500, 300, Image::OrBigger);
```

Flaggen können kombiniert werden:

```php
$image->resize(500, 300, Image::ShrinkOnly | Image::Stretch);
```

Bilder können vertikal oder horizontal gespiegelt werden, indem eine der Dimensionen (oder beide) als negative Zahl angegeben wird:

```php
$flipped = $image->resize(null, '-100%'); // vertikal spiegeln

$flipped = $image->resize('-100%', '-100%'); // Drehen um 180°

$flipped = $image->resize(-125, 500); // Größe ändern und horizontal spiegeln
```

Nach der Verkleinerung des Bildes können wir es durch Schärfen verbessern:

```php
$image->sharpen();
```


Beschneiden .[#toc-cropping]
============================

Die Methode `crop()` wird für den Anbau verwendet:

```php
$image->crop($left, $top, $width, $height);
```

Wie bei `resize()` können alle Werte in Prozenten angegeben werden. Die Prozentsätze für `$left` und `$top` werden aus dem verbleibenden Platz berechnet, ähnlich wie bei der CSS-Eigenschaft `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Das Bild kann auch automatisch beschnitten werden, z. B. um schwarze Ränder abzuschneiden:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Die Methode `cropAuto()` ist eine Objektkapselung der Funktion `imagecropauto()`, weitere Informationen finden Sie in der [zugehörigen Dokumentation |https://www.php.net/manual/en/function.imagecropauto].


Zeichnen und Editieren .[#toc-drawing-and-editing]
==================================================

Sie können zeichnen, Sie können schreiben, Sie können alle PHP-Funktionen für die Arbeit mit Bildern verwenden, wie z.B. [imagefilledellipse() |https://www.php.net/manual/en/function.imagefilledellipse.php], aber im Objektstil:

```php
$image->filledEllipse($cx, $cy, $width, $height, Image::rgb(255, 0, 0, 63));
```

Siehe [Überblick über die Methoden |#Overview of Methods].


Mehrere Bilder zusammenführen .[#toc-merge-multiple-images]
===========================================================

Sie können problemlos ein anderes Bild in das Bild einfügen:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));

// Koordinaten können auch in Prozent angegeben werden
$blank->place($logo, '80%', '80%'); // in der Nähe der rechten unteren Ecke
```

Beim Einfügen wird der Alphakanal beachtet, außerdem können wir die Transparenz des eingefügten Bildes beeinflussen (wir werden ein sogenanntes Wasserzeichen erstellen):

```php
$blank->place($image, '80%', '80%', 25); // Transparenz beträgt 25 %
```

Eine solche API ist wirklich ein Vergnügen, nicht wahr?


Überblick über die Methoden .[#toc-overview-of-methods]
=======================================================


static fromBlank(int $width, int $height, array $color=null): Image .[method]
-----------------------------------------------------------------------------
Erzeugt ein neues Echtfarbbild mit den angegebenen Abmessungen. Die Standardfarbe ist Schwarz.


static fromFile(string $file, int &$detectedFormat=null): Image .[method]
-------------------------------------------------------------------------
Liest ein Bild aus einer Datei und gibt seinen Typ in `$detectedFormat` zurück. Unterstützt werden die Typen `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` und `Image::BMP`.


static fromString(string $s, int &$detectedFormat=null): Image .[method]
------------------------------------------------------------------------
Liest ein Bild aus einer Zeichenkette und gibt dessen Typ in `$detectedFormat` zurück. Unterstützt werden die Typen `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` und `Image::BMP`.


static rgb(int $red, int $green, int $blue, int $transparency=0): array .[method]
---------------------------------------------------------------------------------
Erzeugt eine Farbe, die in anderen Methoden verwendet werden kann, z. B. `ellipse()`, `fill()`, usw.


static typeToExtension(int $type): string .[method]
---------------------------------------------------
Gibt die Dateierweiterung für die angegebene Konstante `Image::XXX` zurück.


static typeToMimeType(int $type): string .[method]
--------------------------------------------------
Gibt den Mime-Typ für die angegebene Konstante `Image::XXX` zurück.


static extensionToType(string $extension): int .[method]
--------------------------------------------------------
Gibt den Bildtyp als Konstante `Image::XXX` entsprechend der Dateierweiterung zurück.


static detectTypeFromFile(string $file, int &$width=null, int &$height=null): ?int .[method]
--------------------------------------------------------------------------------------------
Gibt den Typ der Bilddatei als Konstante `Image::XXX` zurück und in den Parametern `$width` und `$height` auch ihre Abmessungen.


static detectTypeFromString(string $s, int &$width=null, int &$height=null): ?int .[method]
-------------------------------------------------------------------------------------------
Gibt den Typ des Bildes von string als `Image::XXX` Konstante zurück und in den Parametern `$width` und `$height` auch seine Abmessungen.


affine(array $affine, array $clip=null): Image .[method]
--------------------------------------------------------
Gibt ein Bild zurück, das das affin transformierte Ausgangsbild enthält, wobei ein optionaler Beschneidungsbereich verwendet wird. ([mehr |https://www.php.net/manual/en/function.imageaffine]).


affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Gibt die Verkettung von zwei affinen Transformationsmatrizen zurück, was nützlich ist, wenn mehrere Transformationen in einem Durchgang auf dasselbe Bild angewendet werden sollen. ([mehr |https://www.php.net/manual/en/function.imageaffinematrixconcat])


affineMatrixGet(int $type, mixed $options=null): array .[method]
----------------------------------------------------------------
Gibt eine affine Transformationsmatrix zurück. ([mehr |https://www.php.net/manual/en/function.imageaffinematrixget])


alphaBlending(bool $on): void .[method]
---------------------------------------
Ermöglicht zwei verschiedene Arten des Zeichnens auf Truecolor-Bildern. Im Überblendungsmodus bestimmt die Alphakanalkomponente der Farbe, die allen Zeichenfunktionen wie `setPixel()` zugeführt wird, wie viel von der Grundfarbe durchscheinen darf. Dadurch wird die vorhandene Farbe an dieser Stelle automatisch mit der Zeichenfarbe gemischt und das Ergebnis im Bild gespeichert. Das resultierende Pixel ist undurchsichtig. Im Nichtüberblendungsmodus wird die Zeichenfarbe buchstäblich mit ihren Alphakanalinformationen kopiert und das Zielpixel ersetzt. Der Überblendungsmodus ist beim Zeichnen auf Palettenbildern nicht verfügbar. ([mehr |https://www.php.net/manual/en/function.imagealphablending])


antialias(bool $on): void .[method]
-----------------------------------
Aktivieren Sie die Methoden zum schnellen Zeichnen von Linien und verdrahteten Polygonen mit Antialiasing. Es unterstützt keine Alpha-Komponenten. Sie arbeitet mit einem direkten Mischvorgang. Es funktioniert nur mit Truecolor-Bildern.

Die Verwendung von Primitiven mit Antialiasing und transparenter Hintergrundfarbe kann zu unerwarteten Ergebnissen führen. Bei der Mischmethode wird die Hintergrundfarbe wie jede andere Farbe verwendet. Die fehlende Unterstützung von Alphakomponenten erlaubt keine alphabasierte Antialiasing-Methode. ([mehr |https://www.php.net/manual/en/function.imageantialias])


arc(int $x, int $y, int $w, int $h, int $start, int $end, int $color): void .[method]
-------------------------------------------------------------------------------------
Zeichnet einen Kreisbogen, dessen Mittelpunkt die angegebenen Koordinaten sind. ([mehr |https://www.php.net/manual/en/function.imagearc])


char(int $font, int $x, int $y, string $char, int $color): void .[method]
-------------------------------------------------------------------------
Zeichnet das erste Zeichen von `$char` im Bild mit seiner oberen linken Seite auf `$x`,`$y` (oben links ist 0, 0) mit der Farbe `$color`. ([mehr |https://www.php.net/manual/en/function.imagechar])


charUp(int $font, int $x, int $y, string $char, int $color): void .[method]
---------------------------------------------------------------------------
Zeichnet das Zeichen `$char` vertikal an der angegebenen Koordinate auf dem angegebenen Bild. ([mehr |https://www.php.net/manual/en/function.imagecharup])


colorAllocate(int $red, int $green, int $blue): int .[method]
-------------------------------------------------------------
Gibt einen Farbbezeichner zurück, der die aus den angegebenen RGB-Komponenten zusammengesetzte Farbe darstellt. Sie muss aufgerufen werden, um jede Farbe, die im Bild verwendet werden soll, zu erzeugen. ([mehr |https://www.php.net/manual/en/function.imagecolorallocate])


colorAllocateAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
------------------------------------------------------------------------------
Verhält sich identisch zu `colorAllocate()` mit dem Zusatz des Transparenzparameters `$alpha`. ([mehr |https://www.php.net/manual/en/function.imagecolorallocatealpha])


colorAt(int $x, int $y): int .[method]
--------------------------------------
Gibt den Index der Farbe des Pixels an der angegebenen Stelle im Bild zurück. Handelt es sich bei dem Bild um ein Truecolour-Bild, gibt diese Funktion den RGB-Wert dieses Pixels als Ganzzahl zurück. Verwenden Sie Bit-Shifting und Maskierung, um auf die unterschiedlichen Werte der roten, grünen und blauen Komponenten zuzugreifen: ([mehr |https://www.php.net/manual/en/function.imagecolorat])


colorClosest(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Gibt den Index der Farbe in der Palette des Bildes zurück, die dem angegebenen RGB-Wert "am nächsten" ist. Der "Abstand" zwischen der gewünschten Farbe und jeder Farbe in der Palette wird berechnet, als ob die RGB-Werte Punkte im dreidimensionalen Raum darstellen würden. ([mehr |https://www.php.net/manual/en/function.imagecolorclosest])


colorClosestAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Gibt den Index der Farbe in der Palette des Bildes zurück, die dem angegebenen RGB-Wert und der Stufe `$alpha` am nächsten kommt. ([mehr |https://www.php.net/manual/en/function.imagecolorclosestalpha])


colorClosestHWB(int $red, int $green, int $blue): int .[method]
---------------------------------------------------------------
Ermittelt den Index der Farbe, deren Farbton, Weiß und Schwärze der angegebenen Farbe am nächsten kommt. ([mehr |https://www.php.net/manual/en/function.imagecolorclosesthwb])


colorDeallocate(int $color): void .[method]
-------------------------------------------
Hebt die Zuweisung einer Farbe auf, die zuvor mit `colorAllocate()` oder `colorAllocateAlpha()` zugewiesen wurde. ([mehr |https://www.php.net/manual/en/function.imagecolordeallocate])


colorExact(int $red, int $green, int $blue): int .[method]
----------------------------------------------------------
Gibt den Index der angegebenen Farbe in der Palette des Bildes zurück. ([mehr |https://www.php.net/manual/en/function.imagecolorexact])


colorExactAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
---------------------------------------------------------------------------
Gibt den Index der angegebenen Farbe+Alpha in der Palette des Bildes zurück. ([mehr |https://www.php.net/manual/en/function.imagecolorexactalpha])


colorMatch(Image $image2): void .[method]
-----------------------------------------
Bringt die Farben der Palettenversion eines Bildes näher an die Echtfarbenversion heran. ([mehr |https://www.php.net/manual/en/function.imagecolormatch])


colorResolve(int $red, int $green, int $blue): int .[method]
------------------------------------------------------------
Gibt einen Farbindex für eine angeforderte Farbe zurück, entweder die genaue Farbe oder die nächstmögliche Alternative. ([mehr |https://www.php.net/manual/en/function.imagecolorresolve])


colorResolveAlpha(int $red, int $green, int $blue, int $alpha): int .[method]
-----------------------------------------------------------------------------
Gibt einen Farbindex für eine angeforderte Farbe zurück, entweder die genaue Farbe oder die nächstmögliche Alternative. ([mehr |https://www.php.net/manual/en/function.imagecolorresolvealpha])


colorSet(int $index, int $red, int $green, int $blue): void .[method]
---------------------------------------------------------------------
Damit wird der angegebene Index in der Palette auf die angegebene Farbe gesetzt. ([mehr |https://www.php.net/manual/en/function.imagecolorset])


colorsForIndex(int $index): array .[method]
-------------------------------------------
Ermittelt die Farbe für einen bestimmten Index. ([mehr |https://www.php.net/manual/en/function.imagecolorsforindex])


colorsTotal(): int .[method]
----------------------------
Gibt die Anzahl der Farben in einer Bildpalette zurück ([mehr |https://www.php.net/manual/en/function.imagecolorstotal]).


colorTransparent(int $color=null): int .[method]
------------------------------------------------
Liest oder setzt die transparente Farbe des Bildes. ([mehr |https://www.php.net/manual/en/function.imagecolortransparent])


convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Wendet eine Faltungsmatrix auf das Bild an, wobei der angegebene Koeffizient und Versatz verwendet wird. ([mehr |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Erfordert *GD-Erweiterung*, daher ist nicht sicher, dass sie überall funktioniert.


copy(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH): void .[method]
--------------------------------------------------------------------------------------------------
Kopiert einen Teil von `$src` auf das Bild, beginnend bei den Koordinaten `$srcX`, `$srcY` mit einer Breite von `$srcW` und einer Höhe von `$srcH`. Der definierte Teil wird auf die Koordinaten `$dstX` und `$dstY` kopiert. ([mehr |https://www.php.net/manual/en/function.imagecopy])


copyMerge(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
---------------------------------------------------------------------------------------------------------------------
Kopiert einen Teil von `$src` auf das Bild, beginnend bei den Koordinaten `$srcX`, `$srcY` mit einer Breite von `$srcW` und einer Höhe von `$srcH`. Der definierte Teil wird auf die Koordinaten `$dstX` und `$dstY` kopiert. ([mehr |https://www.php.net/manual/en/function.imagecopymerge])


copyMergeGray(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $srcW, int $srcH, int $opacity): void .[method]
-------------------------------------------------------------------------------------------------------------------------
Kopiert einen Teil von `$src` auf das Bild, beginnend bei den Koordinaten `$srcX`, `$srcY` mit einer Breite von `$srcW` und einer Höhe von `$srcH`. Der definierte Teil wird auf die Koordinaten `$dstX` und `$dstY` kopiert.

Diese Funktion ist identisch mit `copyMerge()`, mit dem Unterschied, dass sie beim Zusammenführen den Farbton der Quelle beibehält, indem sie die Zielpixel vor dem Kopiervorgang in Graustufen umwandelt. ([mehr |https://www.php.net/manual/en/function.imagecopymergegray])


copyResampled(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
---------------------------------------------------------------------------------------------------------------------------------
Kopiert einen rechteckigen Ausschnitt eines Bildes in ein anderes Bild, wobei die Pixelwerte gleichmäßig interpoliert werden, so dass insbesondere bei der Verkleinerung eines Bildes ein hohes Maß an Klarheit erhalten bleibt.

Mit anderen Worten: `copyResampled()` nimmt einen rechteckigen Bereich von `$src` mit der Breite `$srcW` und der Höhe `$srcH` an der Position (`$srcX`,`$srcY`) und platziert ihn in einem rechteckigen Bereich des Bildes mit der Breite `$dstW` und der Höhe `$dstH` an der Position (`$dstX`,`$dstY`).

Wenn Quell- und Zielkoordinaten sowie Breite und Höhe voneinander abweichen, wird das Bildfragment entsprechend gestreckt oder verkleinert. Die Koordinaten beziehen sich auf die linke obere Ecke. Diese Funktion kann zum Kopieren von Regionen innerhalb desselben Bildes verwendet werden, aber wenn sich die Regionen überschneiden, sind die Ergebnisse unvorhersehbar. ([mehr |https://www.php.net/manual/en/function.imagecopyresampled])


copyResized(Image $src, int $dstX, int $dstY, int $srcX, int $srcY, int $dstW, int $dstH, int $srcW, int $srcH): void .[method]
-------------------------------------------------------------------------------------------------------------------------------
Kopiert einen rechteckigen Teil eines Bildes in ein anderes Bild. Mit anderen Worten: `copyResized()` nimmt einen rechteckigen Bereich von `$src` mit der Breite `$srcW` und der Höhe `$srcH` an der Position (`$srcX`,`$srcY`) und platziert ihn in einem rechteckigen Bereich des Bildes mit der Breite `$dstW` und der Höhe `$dstH` an der Position (`$dstX`,`$dstY`).

Wenn Quell- und Zielkoordinaten sowie Breite und Höhe voneinander abweichen, wird das Bildfragment entsprechend gestreckt oder verkleinert. Die Koordinaten beziehen sich auf die linke obere Ecke. Diese Funktion kann zum Kopieren von Regionen innerhalb desselben Bildes verwendet werden, aber wenn sich die Regionen überschneiden, sind die Ergebnisse unvorhersehbar. ([mehr |https://www.php.net/manual/en/function.imagecopyresized])


crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Beschneidet ein Bild auf den angegebenen rechteckigen Bereich. Die Abmessungen können als ganze Zahlen in Pixeln oder als Strings in Prozent (z. B. `'50%'`) übergeben werden.


cropAuto(int $mode=-1, float $threshold=.5, int $color=-1): Image .[method]
---------------------------------------------------------------------------
Beschneidet ein Bild automatisch entsprechend der angegebenen `$mode`. ([mehr |https://www.php.net/manual/en/function.imagecropauto])


ellipse(int $cx, int $cy, int $w, int $h, int $color): void .[method]
---------------------------------------------------------------------
Zeichnet eine Ellipse, deren Mittelpunkt die angegebenen Koordinaten sind. ([mehr |https://www.php.net/manual/en/function.imageellipse])


fill(int $x, int $y, int $color): void .[method]
------------------------------------------------
Führt eine Flutfüllung durch, beginnend an der angegebenen Koordinate (oben links ist 0, 0) mit der angegebenen `$color` im Bild. ([mehr |https://www.php.net/manual/en/function.imagefill])


filledArc(int $cx, int $cy, int $w, int $h, int $s, int $e, int $color, int $style): void .[method]
---------------------------------------------------------------------------------------------------
Zeichnet einen Teilbogen, der auf die angegebene Koordinate im Bild zentriert ist. ([mehr |https://www.php.net/manual/en/function.imagefilledarc])


filledEllipse(int $cx, int $cy, int $w, int $h, int $color): void .[method]
---------------------------------------------------------------------------
Zeichnet eine Ellipse, deren Mittelpunkt die angegebene Koordinate im Bild ist. ([mehr |https://www.php.net/manual/en/function.imagefilledellipse])


filledPolygon(array $points, int $numPoints, int $color): void .[method]
------------------------------------------------------------------------
Erzeugt ein gefülltes Polygon im $image. ([mehr |https://www.php.net/manual/en/function.imagefilledpolygon])


filledRectangle(int $x1, int $y1, int $x2, int $y2, int $color): void .[method]
-------------------------------------------------------------------------------
Erzeugt ein Rechteck, das im Bild mit `$color` gefüllt ist und bei Punkt 1 beginnt und bei Punkt 2 endet. 0, 0 ist die linke obere Ecke des Bildes. ([mehr |https://www.php.net/manual/en/function.imagefilledrectangle])


fillToBorder(int $x, int $y, int $border, int $color): void .[method]
---------------------------------------------------------------------
Führt eine Flutfüllung aus, deren Randfarbe durch `$border` definiert ist. Der Startpunkt für die Füllung ist `$x`, `$y` (oben links ist 0, 0) und der Bereich wird mit der Farbe `$color` gefüllt. ([mehr |https://www.php.net/manual/en/function.imagefilltoborder])


filter(int $filtertype, int ...$args): void .[method]
-----------------------------------------------------
Wendet den angegebenen Filter `$filtertype` auf das Bild an. ([mehr |https://www.php.net/manual/en/function.imagefilter])


flip(int $mode): void .[method]
-------------------------------
Spiegelt das Bild unter Verwendung der angegebenen `$mode`. ([mehr |https://www.php.net/manual/en/function.imageflip])


ftText(int $size, int $angle, int $x, int $y, int $col, string $fontFile, string $text, array $extrainfo=null): array .[method]
-------------------------------------------------------------------------------------------------------------------------------
Schreiben Sie Text in das Bild mit Hilfe von FreeType 2-Schriftarten. ([mehr |https://www.php.net/manual/en/function.imagefttext])


gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Wendet eine Gammakorrektur auf das Bild an, das einen Eingabe- und einen Ausgabegammawert hat. ([mehr |https://www.php.net/manual/en/function.imagegammacorrect])


getClip(): array .[method]
--------------------------
Ruft das aktuelle Beschneidungsrechteck ab, d.h. den Bereich, über den hinaus keine Pixel gezeichnet werden. ([mehr |https://www.php.net/manual/en/function.imagegetclip])


getHeight(): int .[method]
--------------------------
Gibt die Höhe des Bildes zurück.


getImageResource(): resource|GdImage .[method]
----------------------------------------------
Gibt die ursprüngliche Ressource zurück.


getWidth(): int .[method]
-------------------------
Gibt die Breite des Bildes zurück.


interlace(int $interlace=null): int .[method]
---------------------------------------------
Schaltet das Zeilensprungbit ein oder aus. Wenn das Interlace-Bit gesetzt ist und das Bild als JPEG-Bild verwendet wird, wird das Bild als progressives JPEG erstellt. ([mehr |https://www.php.net/manual/en/function.imageinterlace])


isTrueColor(): bool .[method]
-----------------------------
Findet heraus, ob das Bild eine Truecolor-Farbe ist. ([mehr |https://www.php.net/manual/en/function.imageistruecolor])


layerEffect(int $effect): void .[method]
----------------------------------------
Setzen Sie das Alpha-Blending-Flag, um Überlagerungseffekte zu verwenden. ([mehr |https://www.php.net/manual/en/function.imagelayereffect])


line(int $x1, int $y1, int $x2, int $y2, int $color): void .[method]
--------------------------------------------------------------------
Zeichnet eine Linie zwischen den beiden angegebenen Punkten. ([mehr |https://www.php.net/manual/en/function.imageline])


openPolygon(array $points, int $numPoints, int $color): void .[method]
----------------------------------------------------------------------
Zeichnet ein offenes Polygon auf das Bild. Im Gegensatz zu `polygon()` wird keine Linie zwischen dem letzten und dem ersten Punkt gezogen. ([mehr |https://www.php.net/manual/en/function.imageopenpolygon])


paletteCopy(Image $source): void .[method]
------------------------------------------
Kopiert die Palette von `$source` in das Bild. ([mehr |https://www.php.net/manual/en/function.imagepalettecopy])


paletteToTrueColor(): void .[method]
------------------------------------
Konvertiert ein palettenbasiertes Bild, das mit Funktionen wie `create()` erstellt wurde, in ein Echtfarbbild, wie `createtruecolor()`. ([mehr |https://www.php.net/manual/en/function.imagepalettetotruecolor])


place(Image $image, int|string $left=0, int|string $top=0, int $opacity=100): Image .[method]
---------------------------------------------------------------------------------------------
Kopiert `$image` in das Bild an den Koordinaten `$left` und `$top`. Die Koordinaten können als ganze Zahlen in Pixeln oder als Zeichenketten in Prozent übergeben werden (z. B. `'50%'`).


polygon(array $points, int $numPoints, int $color): void .[method]
------------------------------------------------------------------
Erzeugt ein Polygon im Bild. ([mehr |https://www.php.net/manual/en/function.imagepolygon])


rectangle(int $x1, int $y1, int $x2, int $y2, int $col): void .[method]
-----------------------------------------------------------------------
Erzeugt ein Rechteck, das an den angegebenen Koordinaten beginnt. ([mehr |https://www.php.net/manual/en/function.imagerectangle])


resize(int|string $width, int|string $height, int $flags=Image::OrSmaller): Image .[method]
-------------------------------------------------------------------------------------------
Skaliert ein Bild, siehe [weitere Informationen |#Image Resize]. Die Abmessungen können als ganze Zahlen in Pixeln oder als Strings in Prozent (z. B. `'50%'`) übergeben werden.


resolution(int $resX=null, int $resY=null): mixed .[method]
-----------------------------------------------------------
Ermöglicht das Einstellen und Abrufen der Auflösung eines Bildes in DPI (dots per inch). Wenn keiner der optionalen Parameter angegeben wird, wird die aktuelle Auflösung als indiziertes Array zurückgegeben. Wenn nur `$resX` angegeben wird, werden die horizontale und vertikale Auflösung auf diesen Wert gesetzt. Wenn beide optionalen Parameter angegeben werden, werden die horizontale und vertikale Auflösung auf diese Werte gesetzt.

Die Auflösung wird nur als Metainformation verwendet, wenn Bilder aus Formaten gelesen und in Formate geschrieben werden, die diese Art von Information unterstützen (derzeit PNG und JPEG). Sie hat keinen Einfluss auf die Zeichenoperationen. Die Standardauflösung für neue Bilder beträgt 96 DPI. ([mehr |https://www.php.net/manual/en/function.imageresolution])


rotate(float $angle, int $backgroundColor): Image .[method]
-----------------------------------------------------------
Dreht das Bild unter Verwendung der angegebenen `$angle` in Grad. Das Zentrum der Drehung ist die Mitte des Bildes, und das gedrehte Bild kann andere Abmessungen als das Originalbild haben. ([mehr |https://www.php.net/manual/en/function.imagerotate])

.[note]
Erfordert *GD-Erweiterung*, daher ist nicht sicher, dass sie überall funktioniert.


save(string $file, int $quality=null, int $type=null): void .[method]
---------------------------------------------------------------------
Speichert ein Bild in einer Datei.

Die Komprimierungsqualität liegt im Bereich 0..100 für JPEG (Standard 85) und WEBP (Standard 80) und 0..9 für PNG (Standard 9). Wenn der Typ nicht aus der Dateierweiterung ersichtlich ist, können Sie ihn mit einer der Konstanten `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` und `Image::BMP` angeben.


saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Legt fest, ob beim Speichern von PNG-Bildern die vollständige Alphakanal-Information (im Gegensatz zur einfarbigen Transparenz) erhalten bleiben soll.

Alphablending muss deaktiviert werden (`alphaBlending(false)`), damit der Alphakanal überhaupt erhalten bleibt. ([mehr |https://www.php.net/manual/en/function.imagesavealpha])


scale(int $newWidth, int $newHeight=-1, int $mode=IMG_BILINEAR_FIXED): Image .[method]
--------------------------------------------------------------------------------------
Skaliert ein Bild unter Verwendung des angegebenen Interpolationsalgorithmus. ([mehr |https://www.php.net/manual/en/function.imagescale])


send(int $type=Image::JPEG, int $quality=null): void .[method]
--------------------------------------------------------------
Gibt ein Bild an den Browser aus.

Die Komprimierungsqualität liegt im Bereich 0..100 für JPEG (Standard 85) und WEBP (Standard 80) und 0..9 für PNG (Standard 9). Der Typ ist eine der Konstanten `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` und `Image::BMP`.


setBrush(Image $brush): void .[method]
--------------------------------------
Legt das Pinselbild fest, das von allen Funktionen zum Zeichnen von Linien (z. B. `line()` und `polygon()`) verwendet wird, wenn mit den Sonderfarben IMG_COLOR_BRUSHED oder IMG_COLOR_STYLEDBRUSHED gezeichnet wird. ([mehr |https://www.php.net/manual/en/function.imagesetbrush])


setClip(int $x1, int $y1, int $x2, int $y2): void .[method]
-----------------------------------------------------------
Legt das aktuelle Beschneidungsrechteck fest, d. h. den Bereich, über den hinaus keine Pixel gezeichnet werden. ([mehr |https://www.php.net/manual/en/function.imagesetclip])


setInterpolation(int $method=IMG_BILINEAR_FIXED): void .[method]
----------------------------------------------------------------
Legt die Interpolationsmethode fest, die sich auf die Methoden `rotate()` und `affine()` auswirkt. ([mehr |https://www.php.net/manual/en/function.imagesetinterpolation])


setPixel(int $x, int $y, int $color): void .[method]
----------------------------------------------------
Zeichnet ein Pixel an der angegebenen Koordinate. (mehr |https://www.php.net/manual/en/function.imagesetpixel])


setStyle(array $style): void .[method]
--------------------------------------
Legt den Stil fest, der von allen Funktionen zum Zeichnen von Linien (z. B. `line()` und `polygon()`) verwendet werden soll, wenn mit der speziellen Farbe IMG_COLOR_STYLED oder Linien von Bildern mit der Farbe IMG_COLOR_STYLEDBRUSHED gezeichnet wird. ([mehr |https://www.php.net/manual/en/function.imagesetstyle])


setThickness(int $thickness): void .[method]
--------------------------------------------
Setzt die Dicke der Linien, die beim Zeichnen von Rechtecken, Polygonen, Bögen usw. gezeichnet werden, auf `$thickness` Pixel. ([mehr |https://www.php.net/manual/en/function.imagesetthickness])


setTile(Image $tile): void .[method]
------------------------------------
Legt das Kachelbild fest, das von allen Funktionen zum Füllen von Regionen (z. B. `fill()` und `filledPolygon()`) beim Füllen mit der Sonderfarbe IMG_COLOR_TILED verwendet wird.

Eine Kachel ist ein Bild, das dazu dient, einen Bereich mit einem sich wiederholenden Muster zu füllen. Jedes Bild kann als Kachel verwendet werden, und durch Einstellen des transparenten Farbindex des Kachelbildes mit `colorTransparent()` kann eine Kachel erstellt werden, die bestimmte Teile des darunter liegenden Bereichs durchscheinen lässt. ([mehr |https://www.php.net/manual/en/function.imagesettile])


sharpen(): Image .[method]
--------------------------
Schärft das Bild ein wenig.

.[note]
Erfordert *GD-Erweiterung*, daher ist nicht sicher, dass sie überall funktioniert.


string(int $font, int $x, int $y, string $str, int $col): void .[method]
------------------------------------------------------------------------
Zeichnet eine Zeichenkette an den angegebenen Koordinaten. ([mehr |https://www.php.net/manual/en/function.imagestring])


stringUp(int $font, int $x, int $y, string $s, int $col): void .[method]
------------------------------------------------------------------------
Zeichnet eine Zeichenkette vertikal an den angegebenen Koordinaten. ([mehr |https://www.php.net/manual/en/function.imagestringup])


toString(int $type=Image::JPEG, int $quality=null): string .[method]
--------------------------------------------------------------------
Gibt ein Bild als String aus.

Die Komprimierungsqualität liegt im Bereich 0..100 für JPEG (Standard 85) und WEBP (Standard 80) und 0..9 für PNG (Standard 9). Der Typ ist eine der Konstanten `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` und `Image::BMP`.


trueColorToPalette(bool $dither, int $ncolors): void .[method]
--------------------------------------------------------------
Konvertiert ein Truecolor-Bild in ein Palettenbild. ([mehr |https://www.php.net/manual/en/function.imagetruecolortopalette])


ttfText(int $size, int $angle, int $x, int $y, int $color, string $fontfile, string $text): array .[method]
-----------------------------------------------------------------------------------------------------------
Schreibt den angegebenen Text mit TrueType-Schriften in das Bild. ([mehr |https://www.php.net/manual/en/function.imagettftext])
