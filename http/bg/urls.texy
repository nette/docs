Парсер и конструктор на URL адреси
**********************************

.[perex]
Класовете [Url |#Url], [UrlImmutable |#UrlImmutable] и [UrlScript |#UrlScript] позволяват лесно управление, анализиране и манипулиране на URL адреси.

→ [Монтаж и изисквания |@home#Installation]


Урл
===

Класът [api:Nette\Http\Url] позволява лесна работа с URL адреса и отделните му компоненти, които са показани на тази диаграма:

/--pre
 scheme  user  password  host   port    path        query  fragment
   |      |      |        |      |       |            |       |
 /--\   /--\ /------\ /-------\ /--\/----------\ /--------\ /----\
 <b>http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer</b>
 \______\__________________________/
     |               |
  hostUrl        authority
\--

Генерирането на URL адреси е интуитивно:

```php
use Nette\Http\Url;

$url = new Url;
$url->setScheme('https')
	->setHost('localhost')
	->setPath('/edit')
	->setQueryParameter('foo', 'bar');

echo $url; // 'https://localhost/edit?foo=bar'
```

Можете също така да анализирате URL адреса и след това да го манипулирате:

```php
$url = new Url(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);
```

Класът `Url` имплементира интерфейса `JsonSerializable` и предоставя метода `__toString()`, което дава възможност за отпечатване на обекта или използването му с `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


URL Components .[method]
------------------------

Следните методи са достъпни за получаване или промяна на отделни компоненти на URL:

.[language-php]
| Setter | Getter | Върната стойност
|--------------------------------------------------------------------------------------------
| `setScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `setUser(string $user)`| `getUser(): string`| `'john'`
| `setPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `setHost(string $host)`| `getHost(): string`| `'nette.org'`
| `setPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `setPath(string $path)`| `getPath(): string`| `'/en/download'`
| `setQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `setFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'
| | `getAbsoluteUrl(): string` | пълен URL адрес

Предупреждение: Когато работите с URL, получен от [HTTP заявка |request], имайте предвид, че той няма да съдържа фрагмента, тъй като браузърът не го изпраща на сървъра.

Можем да работим и с отделни параметри на заявката, като използваме:

.[language-php]
| Установяване | Получаване
|---------------------------------------------------
| `setQuery(string\|array $query)` | `getQueryParameters(): array`
| `setQueryParameter(string $name, $val)`| `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Връща дясната или лявата част на хоста. Ето как работи, ако хостът е `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Проверява дали два URL адреса са идентични.

```php
$url->isEqual('https://nette.org');
```


Url::isAbsolute(string $url): bool .[method]{data-version:3.3.2}
----------------------------------------------------------------
Проверява дали даден URL адрес е абсолютен. URL адресът се счита за абсолютен, ако започва със схема (напр. http, https, ftp), последвана от двоеточие.

```php
Url::isAbsolute('https://nette.org');    // true
Url::isAbsolute('//nette.org');          // false
```


Url::removeDotSegments(string $path): string .[method]{data-version:3.3.2}
--------------------------------------------------------------------------
Нормализира URL пътя, като премахва специалните сегменти `.` и `..`. Този метод премахва излишните елементи на пътя по същия начин, по който го правят браузърите.

```php
Url::removeDotSegments('/path/../subtree/./file.txt');  // '/subtree/file.txt'
Url::removeDotSegments('/../foo/./bar');                // '/foo/bar'
Url::removeDotSegments('./today/../file.txt');          // 'file.txt'
```


UrlImmutable .[#toc-urlimmutable]
=================================

Класът [api:Nette\Http\UrlImmutable] е неизменна алтернатива на класа `Url` (точно както в PHP `DateTimeImmutable` е неизменна алтернатива на `DateTime`). Вместо сетъри има т.нар. withers, които не променят обекта, а връщат нови екземпляри с променената стойност:

```php
use Nette\Http\UrlImmutable;

$url = new UrlImmutable(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);

$newUrl = $url
	->withUser('')
	->withPassword('')
	->withPath('/en/');

echo $newUrl; // 'http://nette.org:8080/en/?name=param#footer'
```

Класът `UrlImmutable` имплементира интерфейса `JsonSerializable` и предоставя метода `__toString()`, който ви позволява да отпечатате обекта или да го използвате с `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```


URL Components .[method]
------------------------

Следните методи са достъпни за получаване или промяна на отделни компоненти на URL:

.[language-php]
| Wither | Getter | Върната стойност
|--------------------------------------------------------------------------------------------
| `withScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `withUser(string $user)`| `getUser(): string`| `'john'`
| `withPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `withHost(string $host)`| `getHost(): string`| `'nette.org'`
| `withPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `withPath(string $path)`| `getPath(): string`| `'/en/download'`
| `withQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `withFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | пълен URL адрес

Методът `withoutUserInfo()` премахва `user` и `password`.

Можем да работим и с отделни параметри на заявката, като използваме:

.[language-php]
| Увяхване | Получаване
|-----------------------------------------------
| `withQuery(string\|array $query)` | `getQueryParameters(): array`
| `withQueryParameter(string $name, $val)` | `getQueryParameter(string $name)`


getDomain(int $level = 2): string .[method]
-------------------------------------------
Връща дясната или лявата част на хоста. Ето как работи, ако хостът е `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


resolve(string $reference): UrlImmutable .[method]{data-version:3.3.2}
----------------------------------------------------------------------
Разрешава абсолютен URL адрес по същия начин, по който браузърът обработва връзките в HTML страница:
- Ако връзката е абсолютен URL адрес (съдържа схема), той се използва непроменен.
- Ако връзката започва с `//`, се прилага само схемата от текущия URL адрес.
- Ако връзката започва с `/`, се създава абсолютен път от корена на домейна.
- В останалите случаи URL адресът се конструира относително към текущия път.

```php
$url = new UrlImmutable('https://example.com/path/page');
echo $url->resolve('../foo');           // 'https://example.com/foo'
echo $url->resolve('/bar');             // 'https://example.com/bar'
echo $url->resolve('sub/page.html');    // 'https://example.com/path/sub/page.html'
```


isEqual(string|Url $anotherUrl): bool .[method]
-----------------------------------------------
Проверява дали два URL адреса са идентични.

```php
$url->isEqual('https://nette.org');
```


UrlScript .[#toc-urlscript]
===========================

Класът [api:Nette\Http\UrlScript] е потомък на класа `UrlImmutable` и допълнително разграничава тези логически части на URL:

/--pre
      baseUrl    basePath  relativePath  relativeUrl
         |          |        |               |
 /---------------/-----\/--------\---------------------------\
 <b>http://nette.org/admin/script.php/pathinfo/?name=param#footer</b>
                 \_______________/\________/
                        |              |
                   scriptPath       pathInfo
\--

За извличането на тези части са налични следните методи:

.[language-php]
| Getter | Върната стойност
|------------------------------------------------
| `getScriptPath(): string`| `'/admin/script.php'`
| `getBasePath(): string`| `'/admin/'`
| `getBaseUrl(): string`| `'http://nette.org/admin/'`
| `getRelativePath(): string`| `'script.php'`
| `getRelativeUrl(): string`| `'script.php/pathinfo/?name=param#footer'`
| `getPathInfo(): string`| `'/pathinfo/'`


Не създаваме директно обекти `UrlScript`, но методът [Nette\Http\Request::getUrl() |request] ги връща.
