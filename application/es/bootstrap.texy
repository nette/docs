Bootstrap
*********
<div class=perex>


Bootstrap es el código de arranque que inicializa el entorno, crea un contenedor de inyección de dependencias (DI) e inicia la aplicación. Vamos a discutir:

- cómo configurar su aplicación utilizando archivos NEON
- cómo manejar los modos de producción y desarrollo
- cómo crear el contenedor DI

</div>


Las aplicaciones, ya sean basadas en web o en scripts de línea de comandos, comienzan por algún tipo de inicialización del entorno. En la antigüedad, podía ser un archivo llamado por ejemplo `include.inc.php` el que se encargaba de esto, y se incluía en el archivo inicial.
En las aplicaciones Nette modernas, ha sido sustituido por la clase `Bootstrap`, que como parte de la aplicación se puede encontrar en el `app/Bootstrap.php`. Por ejemplo, podría tener este aspecto:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	public static function boot(): Configurator
	{
		$appDir = dirname(__DIR__);
		$configurator = new Configurator;
		//$configurator->setDebugMode('secret@23.75.345.200');
		$configurator->enableTracy($appDir . '/log');
		$configurator->setTempDirectory($appDir . '/temp');
		$configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
		$configurator->addConfig($appDir . '/config/common.neon');
		return $configurator;
	}
}
```


index.php .[#toc-index-php]
===========================

En el caso de las aplicaciones web, el archivo inicial es `index.php`, que se encuentra en el directorio público `www/`. Permite a la clase `Bootstrap` inicializar el entorno y devolver el `$configurator` que crea el contenedor DI. Luego obtiene el servicio `Application`, que ejecuta la aplicación web:

```php
// initialize the environment + get Configurator object
$configurator = App\Bootstrap::boot();
// create a DI container
$container = $configurator->createContainer();
// DI container creates a Nette\Application\Application object
$application = $container->getByType(Nette\Application\Application::class);
// start Nette application
$application->run();
```

Como puedes ver, la clase [api:Nette\Bootstrap\Configurator], que ahora presentaremos con más detalle, ayuda a configurar el entorno y a crear un contenedor de inyección de dependencias (DI).


Modo Desarrollo vs Producción .[#toc-development-vs-production-mode]
====================================================================

Nette distingue entre dos modos básicos en los que se ejecuta una petición: desarrollo y producción. El modo de desarrollo está enfocado a la máxima comodidad del programador, se visualiza Tracy, la caché se actualiza automáticamente al cambiar las plantillas o la configuración del contenedor DI, etc. El modo de producción está enfocado al rendimiento, Tracy sólo registra los errores y no se comprueban los cambios de plantillas y otros ficheros.

La selección del modo se hace por autodetección, por lo que normalmente no hay necesidad de configurar o cambiar nada manualmente. El modo es desarrollo si la aplicación se ejecuta en localhost (es decir, la dirección IP `127.0.0.1` o `::1`) y no hay proxy presente (es decir, su cabecera HTTP). De lo contrario, se ejecuta en modo de producción.

Si desea habilitar el modo de desarrollo en otros casos, por ejemplo, para los programadores que acceden desde una dirección IP específica, puede utilizar `setDebugMode()`:

```php
$configurator->setDebugMode('23.75.345.200'); // one or more IP addresses
```

Recomendamos encarecidamente combinar una dirección IP con una cookie. Almacenaremos un token secreto en la cookie `nette-debug`, por ejemplo `secret1234`, y el modo de desarrollo se activará para los programadores con esta combinación de IP y cookie.

```php
$configurator->setDebugMode('secret1234@23.75.345.200');
```

También podemos desactivar completamente el modo de desarrollo, incluso para localhost:

```php
$configurator->setDebugMode(false);
```

Nótese que el valor `true` activa el modo desarrollador por fuerza, lo que nunca debería ocurrir en un servidor de producción.


Herramienta de depuración Tracy .[#toc-debugging-tool-tracy]
============================================================

Para facilitar la depuración, activaremos la gran herramienta [Tracy |tracy:]. En modo desarrollador visualiza los errores y en modo producción los registra en el directorio especificado:

```php
$configurator->enableTracy($appDir . '/log');
```


Archivos temporales .[#toc-temporary-files]
===========================================

Nette utiliza la caché para el contenedor DI, RobotLoader, plantillas, etc. Por lo tanto es necesario establecer la ruta al directorio donde se almacenará la caché:

```php
$configurator->setTempDirectory($appDir . '/temp');
```

En Linux o macOS, establezca los [permisos de escritura |nette:troubleshooting#Setting directory permissions] para los directorios `log/` y `temp/`.


RobotLoader .[#toc-robotloader]
===============================

Normalmente, querremos cargar automáticamente las clases usando [RobotLoader |robot-loader:], así que tenemos que iniciarlo y dejar que cargue las clases desde el directorio donde se encuentra `Bootstrap.php` (es decir, `__DIR__`) y todos sus subdirectorios:

```php
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Una forma alternativa es utilizar únicamente la carga automática de [Composer |best-practices:composer] PSR-4.


Zona horaria .[#toc-timezone]
=============================

Configurator le permite especificar una zona horaria para su aplicación.

```php
$configurator->setTimeZone('Europe/Prague');
```


Configuración del Contenedor DI .[#toc-di-container-configuration]
==================================================================

Parte del proceso de arranque es la creación de un contenedor DI, es decir, una fábrica de objetos, que es el corazón de toda la aplicación. En realidad es una clase PHP generada por Nette y almacenada en un directorio caché. La fábrica produce objetos clave de la aplicación y los archivos de configuración le indican cómo crearlos y configurarlos, y así influimos en el comportamiento de toda la aplicación.

Los ficheros de configuración suelen estar escritos en [formato NEON |neon:format]. Puede leer [lo que se puede configurar aquí |nette:configuring].

.[tip]
En el modo de desarrollo, el contenedor se actualiza automáticamente cada vez que cambia el código o los archivos de configuración. En el modo de producción, se genera sólo una vez y los cambios en los archivos no se comprueban para maximizar el rendimiento.

Los archivos de configuración se cargan utilizando `addConfig()`:

```php
$configurator->addConfig($appDir . '/config/common.neon');
```

El método `addConfig()` se puede llamar varias veces para añadir varios archivos.

```php
$configurator->addConfig($appDir . '/config/common.neon');
$configurator->addConfig($appDir . '/config/local.neon');
if (PHP_SAPI === 'cli') {
	$configurator->addConfig($appDir . '/config/cli.php');
}
```

El nombre `cli.php` no es una errata, la configuración también se puede escribir en un archivo PHP, que la devuelve como un array.

Alternativamente, podemos utilizar la [sección`includes`  |dependency-injection:configuration#including files] para cargar más archivos de configuración.

Si aparecen elementos con las mismas claves dentro de los archivos de configuración, se [sobrescribirán o fusionarán |dependency-injection:configuration#Merging] en el caso de los arrays. El fichero incluido más tarde tiene una prioridad mayor que el anterior. El fichero en el que aparece la sección `includes` tiene mayor prioridad que los ficheros incluidos en él.


Parámetros estáticos .[#toc-static-parameters]
----------------------------------------------

Los parámetros utilizados en los archivos de configuración pueden definirse [en la sección `parameters` |dependency-injection:configuration#parameters] y también pasarse (o sobrescribirse) por el método `addStaticParameters()` (tiene el alias `addParameters()`). Es importante que los diferentes valores de los parámetros provoquen la generación de contenedores DI adicionales, es decir, clases adicionales.

```php
$configurator->addStaticParameters([
	'projectId' => 23,
]);
```

En los archivos de configuración, podemos escribir la notación habitual `%projectId%` para acceder al parámetro denominado `projectId`. Por defecto, el Configurador rellena los siguientes parámetros: `appDir`, `wwwDir`, `tempDir`, `vendorDir`, `debugMode` y `consoleMode`.


Parámetros dinámicos .[#toc-dynamic-parameters]
-----------------------------------------------

También podemos añadir parámetros dinámicos al contenedor, sus diferentes valores, a diferencia de los parámetros estáticos, no provocarán la generación de nuevos contenedores DI.

```php
$configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

Las variables de entorno podrían estar fácilmente disponibles utilizando parámetros dinámicos. Podemos acceder a ellas a través de `%env.variable%` en archivos de configuración.

```php
$configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Servicios importados .[#toc-imported-services]
----------------------------------------------

Ahora vamos a profundizar más. Aunque el propósito de un contenedor DI es crear objetos, excepcionalmente puede existir la necesidad de insertar un objeto existente en el contenedor. Esto lo hacemos definiendo el servicio con el atributo `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Creamos una nueva instancia y la insertamos en bootstrap:

```php
$configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Diferentes entornos .[#toc-different-environments]
==================================================

Siéntete libre de personalizar la clase `Bootstrap` para adaptarla a tus necesidades. Puedes añadir parámetros al método `boot()` para diferenciar proyectos web, o añadir otros métodos, como `bootForTests()`, que inicializa el entorno para pruebas unitarias, `bootForCli()` para scripts llamados desde la línea de comandos, etc.

```php
public static function bootForTests(): Configurator
{
	$configurator = self::boot();
	Tester\Environment::setup(); // Nette Tester initialization
	return $configurator;
}
```
