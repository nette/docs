URL Parser e Builder
********************

.[perex]
As classes [Url |#Url], [UrlImmutable |#UrlImmutable] e [UrlScript |#UrlScript] facilitam o gerenciamento, a análise e a manipulação de URLs.

→ [Instalação e requisitos |@home#Installation]

Url
===

A classe [api:Nette\Http\Url] facilita o trabalho com a URL e seus componentes individuais, que estão delineados neste diagrama:

/--pre
 scheme  user  password  host   port    path        query  fragment
   |      |      |        |      |       |            |       |
 /--\   /--\ /------\ /-------\ /--\/----------\ /--------\ /----\
 <b>http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer</b>
 \______\__________________________/
     |               |
  hostUrl        authority
\--

A geração de URL é intuitiva:

```php
use Nette\Http\Url;

$url = new Url;
$url->setScheme('https')
	->setHost('localhost')
	->setPath('/edit')
	->setQueryParameter('foo', 'bar');

echo $url; // 'https://localhost/edit?foo=bar'
```

Você também pode analisar a URL e depois manipulá-la:

```php
$url = new Url(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);
```

Os seguintes métodos estão disponíveis para obter ou alterar os componentes individuais da URL:

.[language-php]
| Setter| Getter| Valor devolvido
|--------------------------------------------------------------------------------------------
| `setScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `setUser(string $user)`| `getUser(): string`| `'john'`
| `setPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `setHost(string $host)`| `getHost(): string`| `'nette.org'`
| `setPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `setPath(string $path)`| `getPath(): string`| `'/en/download'`
| `setQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `setFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | URL completa

Também podemos operar com parâmetros de consulta individuais usando:

.[language-php]
| Setter| Getter
|---------------------------------------------------
| `setQuery(string\|array $query)` | `getQueryParameters(): array`
| `setQueryParameter(string $name, $val)`| `getQueryParameter(string $name)`

O método `getDomain(int $level = 2)` retorna a parte direita ou esquerda do anfitrião. É assim que funciona se o anfitrião for `www.nette.org`:

.[language-php]
| `getDomain(1)` | `'org'`
| `getDomain(2)` | `'nette.org'`
| `getDomain(3)` | `'www.nette.org'`
| `getDomain(0)` | `'www.nette.org'`
| `getDomain(-1)` | `'www.nette'`
| `getDomain(-2)` | `'www'`
| `getDomain(-3)` | `''`


A classe `Url` implementa a interface `JsonSerializable` e tem um método `__toString()` para que o objeto possa ser impresso ou usado em dados passados para `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```

O método `isEqual(string|Url $anotherUrl): bool` testa se as duas URLs são idênticas.

```php
$url->isEqual('https://nette.org');
```


UrlImmutável .[#toc-urlimmutable]
=================================

A classe [api:Nette\Http\UrlImmutable] é uma alternativa imutável à classe `Url` (assim como no PHP `DateTimeImmutable` é uma alternativa imutável ao `DateTime`). Ao invés de setters, ela tem os chamados murchadores, que não mudam o objeto, mas retornam novas instâncias com um valor modificado:

```php
use Nette\Http\UrlImmutable;

$url = new UrlImmutable(
	'http://john:xyz%2A12@nette.org:8080/en/download?name=param#footer',
);

$newUrl = $url
	->withUser('')
	->withPassword('')
	->withPath('/en/');

echo $newUrl; // 'http://nette.org:8080/en/?name=param#footer'
```

Os seguintes métodos estão disponíveis para obter ou alterar os componentes individuais da URL:

.[language-php]
| Wither| Getter| Valor devolvido
|--------------------------------------------------------------------------------------------
| `withScheme(string $scheme)`| `getScheme(): string`| `'http'`
| `withUser(string $user)`| `getUser(): string`| `'john'`
| `withPassword(string $password)`| `getPassword(): string`| `'xyz*12'`
| `withHost(string $host)`| `getHost(): string`| `'nette.org'`
| `withPort(int $port)`| `getPort(): ?int`| `8080`
| | `getDefaultPort(): ?int`| `80`
| `withPath(string $path)`| `getPath(): string`| `'/en/download'`
| `withQuery(string\|array $query)`| `getQuery(): string`| `'name=param'`
| `withFragment(string $fragment)`| `getFragment(): string`| `'footer'`
| | `getAuthority(): string`| `'nette.org:8080'`
| | `getHostUrl(): string`| `'http://nette.org:8080'`
| | `getAbsoluteUrl(): string` | URL completa

Também podemos operar com parâmetros de consulta individuais usando:

.[language-php]
| Wither| Getter
|-----------------------------------------------
| `withQuery(string\|array $query)` | `getQueryParameters(): array`
| `withQueryParameter(string $name, $val)` | `getQueryParameter(string $name)`

O método `getDomain(int $level = 2)` funciona da mesma forma que o método em `Url`. O método `withoutUserInfo()` remove `user` e `password`.

A classe `UrlImmutable` implementa a interface `JsonSerializable` e tem um método `__toString()` para que o objeto possa ser impresso ou usado em dados passados para `json_encode()`.

```php
echo $url;
echo json_encode([$url]);
```

O método `isEqual(string|Url $anotherUrl): bool` testa se as duas URLs são idênticas.


UrlScript .[#toc-urlscript]
===========================

A classe [api:Nette\Http\UrlScript] é descendente de `UrlImmutable` e, além disso, distingue estas partes lógicas da URL:

/--pre
      baseUrl    basePath  relativePath  relativeUrl
         |          |        |               |
 /---------------/-----\/--------\---------------------------\
 <b>http://nette.org/admin/script.php/pathinfo/?name=param#footer</b>
                 \_______________/\________/
                        |              |
                   scriptPath       pathInfo
\--

Os seguintes métodos estão disponíveis para obter estas peças:

.[language-php]
| Getter| Valor devolvido
|------------------------------------------------
| `getScriptPath(): string`| `'/admin/script.php'`
| `getBasePath(): string`| `'/admin/'`
| `getBaseUrl(): string`| `'http://nette.org/admin/'`
| `getRelativePath(): string`| `'script.php'`
| `getRelativeUrl(): string`| `'script.php/pathinfo/?name=param#footer'`
| `getPathInfo(): string`| `'/pathinfo/'`


Não criamos objetos `UrlScript` diretamente, mas o método [Nette\Http\Request::getUrl() |request] o devolve.
