Configuring
***********

/--div .[perex]
Nette application is easily configured using NEON files. We'll talk about:

- how to configure your application using NEON files
- how to handle production and development modes
- how to create the DI container
\--

Configurator
============

The environment settings can be configured and Dependency Injection (DI) container created by [Configurator | api:Nette\Configurator]. Is used in `bootstrap.php` located in folder `app/`.


Development mode
----------------

Development mode is automatically active when we develop on *localhost*. If you want to enable it even outside of it, for example, programmers accessing a specific IP address, we will use `setDebugMode()`:

/--php
$configurator->setDebugMode('23.75.345.200'); // one or more IP addresses
\--

Even more secured is the combination of IP address and cookie. We will store a secret token into the `nette-debug' cookie, e.q `secret1234`, the development mode is activated for programmers with this IP and set up cookie.

/--php
$configurator->setDebugMode('secret1234@23.75.345.200');
\--

The development mode can be deactivated by:

/--php
$configurator->setDebugMode(false);
\--


Debugging tool Tracy
--------------------

Turn on great debugging tool [Tracy | tracy:], it'll store all exceptions files into specified folder (`__DIR__ . '/../log'`).

/--php
$configurator->enableTracy(__DIR__ . '/../log');
\--


Caching
-------

The configuration is loaded and processed only once, and the result is cached, which greatly accelerates the application. Therefore, first set the `setTempDirectory()` path where the cache will be saved.

/--php
$configurator = new Nette\Configurator;
$configurator->setTempDirectory(__DIR__ . '/../temp');
\--


RobotLoader
-----------

We would like to load files into application automatically using [RobotLoader], so we have to register it.

/--php
$configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
\--

There is alternative way to load files over [Composer | composer].


Timezone
--------

There is a way how to setup timezone.

/--php
$configurator->setTimeZone('Europe/Prague');
\--


Configuration files
-------------------

We are almose there, just add the configuration file `config.neon`, located in the `app/config` folder, calling `addConfig($file)`:

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
\--

Method `addConfig` can be called multiple times to add multiple files.

/--php
$configurator->addConfig(__DIR__ . '/config/config.neon');
$configurator->addConfig(__DIR__ . '/config/config.local.neon');
if (PHP_SAPI === 'cli') {
	$configurator->addConfig(__DIR__ . '/config/config.cli.neon');
}
\--

If items with the same keys appear in configuration files, they will be overwritten or merged in the case of arrays. The later file has higher priority.


Parameters
----------

Parameters could be passed to the DI container over `addParameters()` method, their values must be known
at the compile time. The container is always generated for the different values of these parameters.

/--php
$configurator->addParameters([
	'foo' => 'bar',
	'baz' => '%tempDir%',
]);
\--

We can access `foo` parameter via `%foo%` in configuration files. The configurator adds be default these parameters `appDir`, `wwwDir`, `tempDir`, `debugMode` a `consoleMode`.


Dynamic parameters
------------------

We can set also dynamic parameters to DI container, their values must not be known at compile time, they are
used at run time. It doesn't generate a new container.

/--php
$configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
\--

The environment variables could be easily set up using dynamic parameters. We can access them via `%env.variable%` in configuration files.

/--php
$configurator->addDynamicParameters([
	'env' => $_ENV,
]);
\--


Dynamic services
----------------

We can insert an instance of the class into the DI container directly, before the DI container creates it for us. The service must be defined with `dynamic: yes` attribute.

/--neon
services:
	myservice:
		class: App\Model\MyCustomService
		dynamic: yes
\--

Create a new instance and insert it in bootstrap:

/--php
$configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
\--



Framework configuration
=======================

Configuration is usually written in NEON format. Have fun trying out the syntax at https://ne-on.org.
Many features of Nette Framework can be set up in configuration file

- [#Sessions]
- [#Application]
- [#HTTP headers]
- [#HTTP proxies]
- [#Access Control]
- [#Mailing]
- [#Database]
- [#Forms]
- [#Latte]
- [#DI container]
- [#Tracy debugger]


Sessions
--------

Here you can set all [directives |php:session.configuration] (in camelCase format).

/-- neon
	session:
		autoStart: true  # default is smart
		expiration: 10 days
		name: ...
		...
\--

.[tip]
`autoStart: smart` is recommended. It automatically starts the session only if it already exists.

Read more on [session configuration | sessions#Session configuration].


Application
-----------

/--neon
	application:
		debugger: true  # debugger bar panel
		catchExceptions: %productionMode%
		errorPresenter: Front:Error

		# mapping between presenter name and presenter class
		mapping:
			Front: App\*Module\*Presenter
\--


HTTP headers
------------

/--neon
	http:
		frames: ...               # header X-Frame-Options

	headers:
		X-Powered-By: MyCMS       # custom HTTP header

    csp:                          # Content Security Policy
        script-src: [
            nonce                 # for browsers that support CSP2
            self, unsafe-inline   # for browsers that support CSP1
        ]
\--

For security reasons Nette Framework sends HTTP header `X-Frame-Options: SAMEORIGIN` by default, so that the page can be embedded in iframe only from pages on the same domain. This behavior may be unwanted in certain situations (for example if you are developing a facebook application). You can override this setting by `frames: yes`, `frames: http://allowed-host.com` or `frames: no`.


HTTP proxies
------------

You can define your HTTP proxy, so that HTTP request's remote address and remote host will be correct.

/--neon
	http:
		proxy: 127.0.0.1  # IP address, range, hostname or array of these values
\--


Access Control
--------------

By filling in `users` option you create `SimpleAuthenticator`, by defining `roles` or `resources` you create `Nette\Security\Permission` authorizator. More in [User Authorization and Privileges |access-control].

/--neon
	security:
		debugger: true  # debugger bar panel

		users:
			johndoe: secretpassword

		roles:
			guest:
			member:
			admin: [member]  # admin extends member

		resources:
			file:
\--


Mailing
-------

Default mailer is `SendmailMailer`. By setting `smtp` you activate `SmtpMailer`.

/--neon
	mail:
		smtp: true  # use SmtpMailer instead of SendmailMailer
		# optional settings
		host: ...
		port: ...
		username: ...
		password: ...
		secure: # possible values are ssl, tls or null
		timeout: ...
\--


Database
--------

You can define multiple database connections, if you do so you can set which one will be [automatically injected |configuring#auto-wiring] to your services by the `autowired` option. The following code shows how to set up one connection called `default`.

/--neon
	database:
		default:
			dsn: "sqlite2:%appDir%/models/demo.db"
			user: ...
			password: ...
			options: [PDO::MYSQL_ATTR_COMPRESS = true]
			debugger: false  # debugger bar panel
			explain: false   # explain queries in debugger bar
			reflection: discovered  # or static or classname, default is discovered
			autowired: true
\--

This creates service `@nette.database.default` and sets reflection and cache for you.


Forms
-----

You can change default validation error messages.

/--neon
	forms:
		messages:
			EQUAL: 'Please enter %s.'
			FILLED: 'Please complete mandatory field.'
			MIN_LENGTH: 'Please enter a value of at least %d characters.'
			EMAIL: '%label must be valid e-mail'
\--


Latte
-----

You can turn on and off XHTML rendering mode and register custom macros. Custom macros may be passed either as a class name or as a service reference. The default called method is `install`, you may change it by appending a double colon and a custom method name.

/--neon
	latte:
		xhtml: yes  # default is no
		macros:
			- App\MyLatteMacros::register  # static method, classname or callable
			- @App\MyLatteMacrosFactory    # service with install method
			- @App\MyLatteMacrosFactory::register # service with register method

	services:
		- App\MyLatteMacrosFactory
\--


DI container
------------

/--neon
	di:
		debugger: false  # disables DI panel
\--


Tracy debugger
--------------

/--neon
	tracy:
		email: webmaster@example.com  # for sending error logs
		strictMode: true
		editor: ...
		browser: ...

		bar:  # debugger bar panels
			- Nette\Bridges\DITracy\ContainerPanel  # alias of DI container bar
			- IncludePanel
			- XDebugHelper('myIdeKey')
			- MyPanel(@MyService)

		blueScreen:  # blue screen panels
			- DoctrinePanel::renderException
\--


Low-level modifications
-----------------------

All these settings affect the contents of the DI container and the system services it creates. All these services can still be changed to a low-level. For instance, we can change class of service `application.application`, which is by default `Nette\Application\Application`:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
\--

The `alteration 'flag is informative and says we only modify an existing service.

We can also add setup:

/--neon
services:
	application.application:
		factory: MyApplication
		alteration: yes
		setup:
			- $onStartup = [@resource::init]
\--



Custom services
===============

The configuration file is place where we add definitions of our own services in section `services`. For example, this is definition of service named `database` which is `PDO` instance:

/--code neon
services:
	# in single line
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)

	# or multi-lines
	database:
		factory: PDO('mysql:host=127.0.0.1;dbname=test', root, password)

	# or more multi-lines :-)
	database:
		class: PDO
		arguments: ['mysql:host=127.0.0.1;dbname=test', root, password]
\--

It generates factory method in DI container:

/--php
function createServiceDatabase()
{
	$service = new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'password');
	return $service;
}
\--

In addition to creating a class instance, you can also call the method:

/--neon
services:
	database: Database::create(root, password)
\--

Result:

/--php
function createServiceDatabase()
{
	$service = Database::create('root', 'password');
	return $service;
}
\--

In this case, the `Database::create()` method must have a defined return type either by using an annotation `@return` or a PHP 7 type hint.

We obtain the service from the DI container using the `getService()`:

/--php
$database = $container->getService('database');
\--


Setup
-----

We can call service methods or set properties:

/--neon
services:
	database:
		factory: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
		setup:
			- setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)
			- $mode = 123
\--

Result:

/--php
public function createServiceDatabase()
{
	$service = new PDO('mysql:host=127.0.0.1;dbname=test', 'root', 'password');
	$service->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	$service->mode = 123;
	return $service;
}
\--

In addition to strings and numbers, the method parameters can also be arrays, created objects or method calls:

/--neon
services:
	analyser: My\Analyser(
		FilesystemIterator(%appDir%)
		[dryrun: yes, verbose: no]
		DateTime::createFromFormat('Y-m-d')
	)
\--

Result:

/--php
public function createServiceAnalyser()
{
	return new My\Analyser(
		new FilesystemIterator('...'),
		['dryrun' => true, 'verbose' => false],
		DateTime::createFromFormat('Y-m-d')
	);
}
\--


Service referencing
-------------------

We refer to the service using at-sign and the name of the service, ie. `@database`:

/--neon
services:
	database: PDO('mysql:host=127.0.0.1;dbname=test', root, password)
	articles:
	    factory: Model\ArticleRepository(@database)
		setup:
			- setCacheStorage(@cache.storage)   # cache.storage is a system service
\--

Result:

/--php
public function createServiceArticles()
{
	$service = new Model\ArticleRepository($this->getService('database'));
	$service->setCacheStorage($this->getService('cache.storage'));
	return $service;
}
\--

We can call referenced service's methods, but for simplicity we write `::` instead of `::`:

/--neon
services:
	routerFactory: App\Router\Factory( @http.request::getMethod() )  # http.request je systémová služba
	router: @routerFactory::create()
\--

Result:

/--php
public function createServiceRouterFactory()
{
	return new App\Router\Factory($this->getService('http.request')->getMethod());
}

public function createServiceRouter()
{
	return $this->getService('routerFactory')->create();
}
\--


Autowiring
----------

Auto-wiring is a great feature that can automatically pass services to the constructor and other methods, so we do not need to write them at all. It saves you a lot of time.

The example of `articles` can be simplified as follows:

/--neon
services:
	articles:
	    factory: Model\ArticleRepository
		setup:
			- setCacheStorage
\--

Autowiring is driven by typehints, so `ArticleRepository` class must be defined as follows:

/--php
namespace Model;

class ArticleRepository
{
	public function __construct(\PDO $db)
	{}

	public function setCacheStorage(\Nette\Caching\IStorage $storage)
	{}
}
\--

A service of the type such as `PDO` or `Nette\Caching\IStorage` must be exacly one in the container. If there were more, autowiring would not know which one to pass and throws an exception.

It is possible to place two services of the same type in the container and exclude one of them from the autowire. Autowiring will then work and will automatically pass the second service:

/--neon
services:
	mainDatabase: PDO('mysql:host=127.0.0.1;dbname=test', root, password)

	tempDatabase:
		factory: PDO('sqlite::memory:)
		autowired: no

	articles: Model\ArticleRepository    # passes @mainDatabase to constructor
\--

Autowiring can also be restricted to specific classes or interfaces:

/--php
class Parent
{}

class Child extends Parent implements Int
{}

class ParentDependent
{
	function __construct(Parent $obj)
	{}
}

class ChildDependent
{
	function __construct(Child $obj)
	{}
}
\--

/--neon
services:
	child:
		factory: Child
		autowired: [Parent, Int]

	parentDep: ParentDependent  # autowiring automatically passes the service @child

	childDep: ChildDependent  # throws exception!
\--


Anonymous services
------------------

Named services are particularly useful when we want to refer to them from other parts of the configuration file. If the service is no longer referenced by name, it does not need to be named. For anonymous services, use the following syntax:

/--neon
services:
	- PDO('sqlite::memory:)

	-
	    factory: Model\ArticleRepository
		setup:
			- setCacheStorage
\--

However, even anonymous services can be referred to, instead of their name we use their type (class or interface):

/--neon
services:
	router: @App\Router\Factory::create
\--

We get the service from the DI container using the `getByType()`:

/--php
$database = $container->getByType(PDO::class);
\--


Multiple configuration files
============================

Use `includes` section to add more configuration files.

/--code neon
includes:
	- parameters.php
	- services.neon
	- presenters.neon
\--

If items with the same keys appear in configuration files, they will be overwritten or merged in the case of arrays. The later included file has higher priority, the file with the `include` section has the highest priority.

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>result</th>
</tr>
<tr>
	<td>
/--code neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--code neon
items:
	- 3
\--
	</td>
	<td>
/--code neon
items:
	- 1
	- 2
	- 3
\--
	</td>
</tr>
</table>

To prevent merging of a certain array use exclamation mark right after the name of the array:

<table class=table>
<tr>
	<th width=33%>config1.neon</th>
	<th width=33%>config2.neon</th>
	<th>result</th>
</tr>
<tr>
	<td>
/--code neon
items:
	- 1
	- 2
\--
	</td>
	<td>
/--code neon
items!:
	- 3
\--
	</td>
	<td>
/--code neon
items:
	- 3
\--
	</td>
</tr>
</table>

{{composer: nette/nette}}
