Getting started
***************

Requirements
====

The very first thing you shall do is to check if your server (or your laptop) satisfies the requirements of *Nette Framework*. It should most likely be fine, but just to be sure we won't start with a broken environment.


Download
===

The recommended and most common way of starting a new project is using [Composer](http://doc.nette.org/cs/composer). If you don't know it, you shall definitely start with that. It's really simple, check their documentation.

With *Composer*, you can download and install application skeleton (known as `sandbox`) including Nette Framework really easily. To do so, find your web root directory (`/var/www` or `C:\InetPub`) in your command line and execute the following command:

/--code sh
$ composer create-project nette/sandbox nette-blog
\--

Sandbox will be downloaded into `nette-blog` directory.

.[note]
You can also download Nette Framework "manually":http://nette.org/en/download, but it's not the recommended way.


Configuring the privileges
====

If you're developing on Mac OS X or Linux (or any other Unix based system), you need to configure write privileges to the webserver.

/--code bash
$ cd nette-blog && chmod -R a+rw temp log
\--


The Welcome Page
====

At this moment, the welcome page of *sandbox* shall be running. Try it by opening your browser and go to the following address

/--
http://localhost/nette-blog/www/
\--

and you should see Nette Framework welcome page:

[* welcome-620.jpg *]

The application is working and you can start making changes to it.


Sandbox's content
====

Sandbox has the following structure:

/--pre
<b>www/</b>                      ← web root directory
└── <b>nette-quick-quick-start/</b>
    ├── <b>app/</b>              ← application directory
    │   ├── <b>config/</b>       ← configuration files
    │   ├── <b>model/</b>        ← model layer classes
    │   ├── <b>presenters/</b>   ← presenter classes
    │   ├── <b>templates/</b>    ← templates
    │   └── <b>bootstrap.php</b> ← boot file
    │
    ├── <b>libs/</b>             ← libraries for your application
    │   └── <b>Nette/</b>        ← like your favorite framework :-)
    │
    ├── <b>log/</b>              ← here you can find error message logs
    ├── <b>temp/</b>             ← place for temporary files (cache, sessions, etc.)
    ├── <b>test/</b>             ← directory for unit tests
    └── <b>www/</b>              ← local web root - this is the only directory accessible from the web
\--

Directory `www` is intended for images, JavaScript, CSS, and other publicly available files. This is the only directory directly accessible from the browser, so you can point the root directory of your web server here (you can configure it in Apache, but let’s do it later; it’s not important now).

The most important directory for you is `app`. You can find `bootstrap.php` file there, which is used for framework loading and configuration. It activates "autoloading":http://doc.nette.org/en/auto-loading, sets up "routes":http://doc.nette.org/en/routing and runs the application.



Cleanup
====

The sandbox contains some sample code. You should probably start by removing it before you write any of your code - feel free to delete the `app/templates/Homepage/default.latte` file. We’ll add our own content in a minute.


Tracy
====

Extremely important tool for the development is "debugger called Tracy":http://doc.nette.org/en/debugging. Try to make some errors in your `app/presenters/HomepagePresenter.php` file (e.g. remove a letter from `class` in the class header) and see what happens. Red-screen page will occur with understandable error log.

[* debugger-620.png .(debbuger screen) *]

Tracy will really help you while hunting for errors. Also note the Debugger floating bar in the bottom right, which informs you about important runtime data.

In the production mode Tracy is, of course, disabled and does not reveal any sensitive information. All error logs are saved into `log` directory instead. Just try it out. To disable debug mode, add the following line to the `app/bootstrap.php` file:

/--php
$configurator->setDebugMode(FALSE);   // <- add this line
\--

After refreshing the web page, red-screen page will be replaced with user-friendly message:

[* server-error-620.png .(error screen) *]

Now look into `log` directory. You can find the error log there and also a red-screen website saved in an HTML file with a name starting with `exception`.

Comment line `$configurator->setDebugMode(FALSE);`. Tracy will enable debug mode automatically on `localhost` and disable it elsewhere.

Now, with the basic knowledge, we can start designing our application.
