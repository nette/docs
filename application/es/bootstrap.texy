Bootstrap
*********

<div class=perex>

Bootstrap es el c√≥digo de arranque que inicializa el entorno, crea el contenedor de inyecci√≥n de dependencias (DI) y ejecuta la aplicaci√≥n. Hablaremos de:

- c√≥mo se configura usando archivos NEON
- c√≥mo distinguir entre modo de producci√≥n y desarrollo
- c√≥mo crear un contenedor DI

</div>


Las aplicaciones, ya sean web o scripts ejecutados desde la l√≠nea de comandos, comienzan su ejecuci√≥n con alguna forma de inicializaci√≥n del entorno. En tiempos pasados, esto sol√≠a estar a cargo de un archivo llamado, por ejemplo, `include.inc.php`, que el archivo inicial inclu√≠a.
En las aplicaciones Nette modernas, ha sido reemplazado por la clase `Bootstrap`, que como parte de la aplicaci√≥n se encuentra en el archivo `app/Bootstrap.php`. Puede verse, por ejemplo, as√≠:

```php
use Nette\Bootstrap\Configurator;

class Bootstrap
{
	private Configurator $configurator;
	private string $rootDir;

	public function __construct()
	{
		$this->rootDir = dirname(__DIR__);
		// El configurador es responsable de configurar el entorno de la aplicaci√≥n y los servicios.
		$this->configurator = new Configurator;
		// Establece el directorio para los archivos temporales generados por Nette (p. ej., plantillas compiladas)
		$this->configurator->setTempDirectory($this->rootDir . '/temp');
	}

	public function bootWebApplication(): Nette\DI\Container
	{
		$this->initializeEnvironment();
		$this->setupContainer();
		return $this->configurator->createContainer();
	}

	private function initializeEnvironment(): void
	{
		// Nette es inteligente y el modo de desarrollo se activa autom√°ticamente,
		// o puedes habilitarlo para una direcci√≥n IP espec√≠fica descomentando la siguiente l√≠nea:
		// $this->configurator->setDebugMode('secret@23.75.345.200');

		// Activa Tracy: la "navaja suiza" definitiva para la depuraci√≥n.
		$this->configurator->enableTracy($this->rootDir . '/log');

		// RobotLoader: carga autom√°ticamente todas las clases en el directorio seleccionado
		$this->configurator->createRobotLoader()
			->addDirectory(__DIR__)
			->register();
	}

	private function setupContainer(): void
	{
		// Carga los archivos de configuraci√≥n
		$this->configurator->addConfig($this->rootDir . '/config/common.neon');
	}
}
```


index.php
=========

El archivo inicial en el caso de las aplicaciones web es `index.php`, que se encuentra en el [directorio p√∫blico |directory-structure#verejny-adresar-www] `www/`. Este solicita a la clase Bootstrap que inicialice el entorno y cree el contenedor DI. Luego, obtiene de √©l el servicio `Application`, que ejecuta la aplicaci√≥n web:

```php
$bootstrap = new App\Bootstrap;
// Inicializaci√≥n del entorno + creaci√≥n del contenedor DI
$container = $bootstrap->bootWebApplication();
// El contenedor DI crea un objeto Nette\Application\Application
$application = $container->getByType(Nette\Application\Application::class);
// Ejecuci√≥n de la aplicaci√≥n Nette y procesamiento de la petici√≥n entrante
$application->run();
```

Como se puede ver, la clase [api:Nette\Bootstrap\Configurator] ayuda con la configuraci√≥n del entorno y la creaci√≥n del contenedor de inyecci√≥n de dependencias (DI), que ahora presentaremos con m√°s detalle.


Modo de desarrollo vs producci√≥n
================================

Nette se comporta de manera diferente dependiendo de si se ejecuta en un servidor de desarrollo o de producci√≥n:

üõ†Ô∏è  Modo de desarrollo (Development):
	- Muestra la barra de depuraci√≥n de Tracy con informaci√≥n √∫til (consultas SQL, tiempo de ejecuci√≥n, memoria utilizada)
	- En caso de error, muestra una p√°gina de error detallada con llamadas a funciones y contenido de variables
	- Actualiza autom√°ticamente la cach√© al cambiar las plantillas Latte, modificar archivos de configuraci√≥n, etc.


üöÄ  Modo de producci√≥n (Production):
	- No muestra ninguna informaci√≥n de depuraci√≥n, todos los errores se registran en el log
	- En caso de error, muestra ErrorPresenter o una p√°gina gen√©rica "Server Error"
	- ¬°La cach√© nunca se actualiza autom√°ticamente!
	- Optimizado para velocidad y seguridad


La elecci√≥n del modo se realiza por autodetecci√≥n, por lo que generalmente no es necesario configurar nada ni cambiar manualmente:

- modo de desarrollo: en localhost (direcci√≥n IP `127.0.0.1` o `::1`) si no hay proxy presente (es decir, su cabecera HTTP)
- modo de producci√≥n: en cualquier otro lugar

Si queremos habilitar el modo de desarrollo tambi√©n en otros casos, por ejemplo, para programadores que acceden desde una direcci√≥n IP espec√≠fica, usamos `setDebugMode()`:

```php
$this->configurator->setDebugMode('23.75.345.200'); // tambi√©n se puede indicar un array de direcciones IP
```

Definitivamente recomendamos combinar la direcci√≥n IP con una cookie. Guardamos un token secreto en la cookie `nette-debug`, por ejemplo, `secret1234`, y de esta manera activamos el modo de desarrollo para los programadores que acceden desde una direcci√≥n IP espec√≠fica y que adem√°s tienen el token mencionado en la cookie:

```php
$this->configurator->setDebugMode('secret1234@23.75.345.200');
```

Tambi√©n podemos desactivar completamente el modo de desarrollo, incluso para localhost:

```php
$this->configurator->setDebugMode(false);
```

Atenci√≥n, el valor `true` activa el modo de desarrollo de forma permanente, lo cual nunca debe ocurrir en un servidor de producci√≥n.


Herramienta de depuraci√≥n Tracy
===============================

Para facilitar la depuraci√≥n, tambi√©n activaremos la excelente herramienta [Tracy |tracy:]. En el modo de desarrollo, visualiza los errores y en el modo de producci√≥n, registra los errores en el directorio especificado:

```php
$this->configurator->enableTracy($this->rootDir . '/log');
```


Archivos temporales
===================

Nette utiliza cach√© para el contenedor DI, RobotLoader, plantillas, etc. Por lo tanto, es necesario establecer la ruta al directorio donde se almacenar√° la cach√©:

```php
$this->configurator->setTempDirectory($this->rootDir . '/temp');
```

En Linux o macOS, establezca [permisos de escritura |nette:troubleshooting#Nastaven√≠ pr√°v adres√°≈ô≈Ø] para los directorios `log/` y `temp/`.


RobotLoader
===========

Generalmente, querremos cargar clases autom√°ticamente usando [RobotLoader |robot-loader:], por lo que debemos iniciarlo y hacer que cargue clases desde el directorio donde se encuentra `Bootstrap.php` (es decir, `__DIR__`), y todos los subdirectorios:

```php
$this->configurator->createRobotLoader()
	->addDirectory(__DIR__)
	->register();
```

Un enfoque alternativo es dejar que las clases se carguen solo a trav√©s de [Composer |best-practices:composer] cumpliendo con PSR-4.


Zona horaria
============

A trav√©s del configurador, puede establecer la zona horaria predeterminada.

```php
$this->configurator->setTimeZone('Europe/Prague');
```


Configuraci√≥n del contenedor DI
===============================

Parte del proceso de arranque es la creaci√≥n del contenedor DI o f√°brica de objetos, que es el coraz√≥n de toda la aplicaci√≥n. En realidad, es una clase PHP que Nette genera y guarda en el directorio de cach√©. La f√°brica produce los objetos clave de la aplicaci√≥n y, mediante archivos de configuraci√≥n, le instruimos c√≥mo debe crearlos y configurarlos, influyendo as√≠ en el comportamiento de toda la aplicaci√≥n.

Los archivos de configuraci√≥n generalmente se escriben en formato [NEON |neon:format]. En un cap√≠tulo aparte, aprender√° [qu√© se puede configurar |nette:configuring].

.[tip]
En el modo de desarrollo, el contenedor se actualiza autom√°ticamente cada vez que se cambia el c√≥digo o los archivos de configuraci√≥n. En el modo de producci√≥n, se genera solo una vez y los cambios no se verifican para maximizar el rendimiento.

Cargamos los archivos de configuraci√≥n usando `addConfig()`:

```php
$this->configurator->addConfig($this->rootDir . '/config/common.neon');
```

Si queremos agregar m√°s archivos de configuraci√≥n, podemos llamar a la funci√≥n `addConfig()` varias veces.

```php
$configDir = $this->rootDir . '/config';
$this->configurator->addConfig($configDir . '/common.neon');
$this->configurator->addConfig($configDir . '/services.neon');
if (PHP_SAPI === 'cli') {
	$this->configurator->addConfig($configDir . '/cli.php');
}
```

El nombre `cli.php` no es un error tipogr√°fico, la configuraci√≥n tambi√©n puede estar escrita en un archivo PHP que la devuelve como un array.

Tambi√©n podemos agregar otros archivos de configuraci√≥n en la [secci√≥n `includes` |dependency-injection:configuration#Vkl√°d√°n√≠ soubor≈Ø].

Si aparecen elementos con las mismas claves en los archivos de configuraci√≥n, se sobrescribir√°n o, en el caso de [arrays, se fusionar√°n |dependency-injection:configuration#Sluƒçov√°n√≠]. El archivo cargado posteriormente tiene mayor prioridad que el anterior. El archivo en el que se indica la secci√≥n `includes` tiene mayor prioridad que los archivos incluidos en √©l.


Par√°metros est√°ticos
--------------------

Los par√°metros utilizados en los archivos de configuraci√≥n se pueden definir en la [secci√≥n `parameters`|dependency-injection:configuration#parametry] y tambi√©n se pueden pasar (o sobrescribir) con el m√©todo `addStaticParameters()` (tiene el alias `addParameters()`). Es importante que diferentes valores de par√°metros provoquen la generaci√≥n de contenedores DI adicionales, es decir, clases adicionales.

```php
$this->configurator->addStaticParameters([
	'projectId' => 23,
]);
```

Al par√°metro `projectId` se puede hacer referencia en la configuraci√≥n con la notaci√≥n habitual `%projectId%`.


Par√°metros din√°micos
--------------------

Tambi√©n podemos agregar par√°metros din√°micos al contenedor, cuyos diferentes valores, a diferencia de los par√°metros est√°ticos, no provocan la generaci√≥n de nuevos contenedores DI.

```php
$this->configurator->addDynamicParameters([
	'remoteIp' => $_SERVER['REMOTE_ADDR'],
]);
```

De esta manera, podemos agregar f√°cilmente, por ejemplo, variables de entorno, a las que luego se puede hacer referencia en la configuraci√≥n con la notaci√≥n `%env.variable%`.

```php
$this->configurator->addDynamicParameters([
	'env' => getenv(),
]);
```


Par√°metros predeterminados
--------------------------

En los archivos de configuraci√≥n, puede utilizar estos par√°metros est√°ticos:

- `%appDir%` es la ruta absoluta al directorio con el archivo `Bootstrap.php`
- `%wwwDir%` es la ruta absoluta al directorio con el archivo de entrada `index.php`
- `%tempDir%` es la ruta absoluta al directorio para archivos temporales
- `%vendorDir%` es la ruta absoluta al directorio donde Composer instala las librer√≠as
- `%rootDir%` es la ruta absoluta al directorio ra√≠z del proyecto
- `%debugMode%` indica si la aplicaci√≥n est√° en modo de depuraci√≥n
- `%consoleMode%` indica si la petici√≥n lleg√≥ a trav√©s de la l√≠nea de comandos


Servicios importados
--------------------

Ahora vamos m√°s profundo. Aunque el prop√≥sito del contenedor DI es fabricar objetos, excepcionalmente puede surgir la necesidad de insertar un objeto existente en el contenedor. Hacemos esto definiendo el servicio con el indicador `imported: true`.

```neon
services:
	myservice:
		type: App\Model\MyCustomService
		imported: true
```

Y en bootstrap insertamos el objeto en el contenedor:

```php
$this->configurator->addServices([
	'myservice' => new App\Model\MyCustomService('foobar'),
]);
```


Entorno diferente
=================

No dude en modificar la clase Bootstrap seg√∫n sus necesidades. Puede agregar par√°metros al m√©todo `bootWebApplication()` para distinguir proyectos web. O podemos agregar otros m√©todos, por ejemplo, `bootTestEnvironment()`, que inicializa el entorno para pruebas unitarias, `bootConsoleApplication()` para scripts llamados desde la l√≠nea de comandos, etc.

```php
public function bootTestEnvironment(): Nette\DI\Container
{
	Tester\Environment::setup(); // inicializaci√≥n de Nette Tester
	$this->setupContainer();
	return $this->configurator->createContainer();
}

public function bootConsoleApplication(): Nette\DI\Container
{
	$this->configurator->setDebugMode(false);
	$this->initializeEnvironment();
	$this->setupContainer();
	return $this->configurator->createContainer();
}
```
