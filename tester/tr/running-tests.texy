Testleri Çalıştırma
*******************

.[perex]
Nette Tester'ın en görünür kısmı, komut satırından test çalıştırıcısıdır. Son derece hızlı ve sağlamdır, çünkü tüm testleri otomatik olarak ayrı işlemler olarak ve paralel olarak birden fazla iş parçacığında çalıştırır. Ayrıca sözde izleme modunda kendi kendini de çalıştırabilir.

Test çalıştırıcısını komut satırından çağırırız. Parametre olarak testlerin bulunduğu dizini belirtiriz. Geçerli dizin için sadece bir nokta girmek yeterlidir:

/--pre .[terminal]
vendor/bin/tester .
\--

Test çalıştırıcısı belirtilen dizini ve tüm alt dizinleri tarar ve `*.phpt` ve `*Test.php` dosyaları olan testleri arar. Aynı zamanda [ek açıklamalarını|test-annotations] okur ve değerlendirir, böylece hangilerini ve nasıl çalıştıracağını bilir.

Ardından testleri çalıştırır. Testlerin yürütülmesi sırasında, sonuçları sürekli olarak terminale karakterler olarak yazdırır:

- <code style="color: #CCC; background-color: #000">.</code> – test geçti
- <code style="color: #CCC; background-color: #000">s</code> – test atlandı (skipped)
- <code style="color: #FFF; background-color: #900">F</code> – test başarısız oldu (failed)

Çıktı örneğin şöyle görünebilir:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.5.2

Not: php.ini kullanılmıyor.
PHP 8.3.2 (cli) | php -n | 8 iş parçacığı

........s..........................

<span style="color: #FFF; background-color: #090">OK (35 test, 1 atlandı, 1.7 saniye)</span>
\--

Tekrarlanan çalıştırmada, önce önceki çalıştırmada başarısız olan testleri yürütür, böylece hatayı düzeltip düzeltmediğinizi hemen öğrenirsiniz.

Hiçbir test başarısız olmazsa, Tester'ın dönüş kodu sıfırdır. Aksi takdirde, dönüş kodu sıfır değildir.

.[warning]
Tester, PHP işlemlerini `php.ini` olmadan çalıştırır. Daha ayrıntılı olarak [#Vlastní php.ini] bölümünde.


Komut Satırı Parametreleri
==========================

Tüm komut satırı seçeneklerine genel bir bakış, Tester'ı parametresiz veya `-h` parametresiyle çalıştırarak elde edilir:

/--pre .[terminal]
 _____ ___  ___ _____ ___  ___
|_   _/ __)( __/_   _/ __)| _ )
  |_| \___ /___) |_| \___ |_|_\  v2.5.2

Kullanım:
    tester [seçenekler] [<test dosyası> | <dizin>]...

Seçenekler:
    -p <yol>                     Çalıştırılacak PHP yorumlayıcısını belirtin (varsayılan: php).
    -c <yol>                     php.ini dosyasını arayın (veya dizine bakın) <yol>.
    -C                           Sistem genelindeki php.ini'yi kullanın.
    -d <anahtar=değer>...        'anahtar' INI girişini 'değer' değeriyle tanımlayın.
    -s                           Atlanan testler hakkında bilgi gösterin.
    --stop-on-fail               İlk başarısızlıkta yürütmeyi durdurun.
    -j <sayı>                    Paralel olarak <sayı> iş çalıştırın (varsayılan: 8).
    -o <console|console-lines|tap|junit|log|none>  (örn. -o junit:output.xml)
                                 İsteğe bağlı dosya adıyla bir veya daha fazla çıktı biçimi belirtin.
    -w | --watch <yol>           Dizini izleyin.
    -i | --info                  Test ortamı bilgilerini gösterin ve çıkın.
    --setup <yol>                Çalıştırıcı kurulumu için betik.
    --temp <yol>                 Geçici dizin yolu. Varsayılan sys_get_temp_dir() ile.
    --colors [1|0]               Renkleri etkinleştirin veya devre dışı bırakın.
    --coverage <yol>             Dosyaya kod kapsamı raporu oluşturun.
    --coverage-src <yol>         Kaynak kodunun yolu.
    -h | --help                  Bu yardım.
\--


-p <path> .[filter]
-------------------
Testleri çalıştırmak için kullanılacak PHP ikili dosyasını belirtir. Standart olarak `php`'dir.

/--pre .[terminal]
tester -p /home/user/php-7.2.0-beta/php-cgi tests
\--


-c <path> .[filter]
-------------------
Testleri çalıştırırken hangi `php.ini`'nin kullanılacağını belirtir. Varsayılan durumda hiçbir php.ini kullanılmaz. Daha fazla bilgi için [#Vlastní php.ini] bölümüne bakın.


-C .[filter]
------------
Sistem genelindeki `php.ini` kullanılır. UNIX'te ayrıca ilgili tüm INI dosyaları `/etc/php/{sapi}/conf.d/*.ini` kullanılır. Daha fazla bilgi için [#Vlastní php.ini] bölümüne bakın.


-d <key=value> .[filter]
------------------------
Testler için PHP yapılandırma yönergesinin değerini ayarlar. Parametre birden çok kez kullanılabilir.

/--pre .[terminal]
tester -d max_execution_time=20
\--


-s
---
Atlanan testler hakkında bilgi gösterilir.


--stop-on-fail .[filter]
------------------------
Tester, ilk başarısız olan testte test etmeyi durdurur.


-j <num> .[filter]
------------------
Kaç tane paralel test işleminin başlatılacağını belirtir. Varsayılan değer 8'dir. Tüm testlerin seri olarak çalışmasını istiyorsak, 1 değerini kullanırız.


-o <console|console-lines|tap|junit|log|none> .[filter]
-------------------------------------------------------
Çıktı biçimini ayarlar. Varsayılan, konsol biçimidir. Çıktının yazılacağı bir dosya adı belirtebilirsiniz (örneğin `-o junit:output.xml`). `-o` seçeneği birden çok kez tekrarlanabilir ve böylece aynı anda birden çok biçim oluşturulabilir.

- `console`: varsayılan biçimle aynıdır, ancak bu durumda ASCII logosu gösterilmez
- `console-lines`: konsola benzer, ancak her testin sonucu ek bilgilerle ayrı bir satırda listelenir
- `tap`: makine işleme için uygun [TAP formatı |https://en.wikipedia.org/wiki/Test_Anything_Protocol]
- `junit`: JUnit XML formatı, aynı zamanda makine işleme için uygundur
- `log`: Test ilerlemesinin çıktıları. Tüm başarısız, atlanmış ve ayrıca başarılı testler
- `none`: hiçbir şey yazdırılmaz


''-w | --watch <path>'' .[filter]
---------------------------------
Test tamamlandıktan sonra Tester bitmez, ancak çalışmaya devam eder ve belirtilen dizindeki PHP dosyalarını izler. Değişiklik olduğunda testleri yeniden başlatır. Parametre, birden fazla dizini izlemek istiyorsak birden çok kez kullanılabilir.

Kütüphaneyi yeniden düzenlerken veya testleri hata ayıklarken kullanışlıdır.

/--pre .[terminal]
tester --watch src tests
\--


''-i | --info'' .[filter]
-------------------------
Testler için çalışma ortamı hakkındaki bilgileri gösterir. Örneğin:

/--pre .[terminal]
tester -p /usr/bin/php7.1 -c tests/php.ini --info

<span style="color: #0F0">PHP ikili dosyası:</span>
/usr/bin/php7.1

<span style="color: #0F0">PHP sürümü:</span>
7.1.7-1+0~20170711133844.5+jessie~1.gbp5284f4 (cli)

<span style="color: #0F0">Kod kapsamı motorları:</span>
(mevcut değil)

<span style="color: #0F0">Yüklenen php.ini dosyaları:</span>
/var/www/dev/demo/tests/php.ini

<span style="color: #0F0">PHP geçici dizini:</span>
/tmp

<span style="color: #0F0">Yüklenen uzantılar:</span>
Core, ctype, date, dom, ereg, fileinfo, filter, hash, ...
\--


--setup <path> .[filter]
------------------------
Tester başlangıçta belirtilen PHP betiğini yükler. İçinde `Tester\Runner\Runner $runner` değişkeni mevcuttur. İçeriği olan `tests/runner-setup.php` dosyasını varsayalım:

```php
$runner->outputHandlers[] = new MyOutputHandler;
```

Tester'ı çalıştırırız:

/--pre .[terminal]
tester --setup tests/runner-setup.php tests
\--


--temp <path> .[filter]
-----------------------
Tester'ın geçici dosyaları için dizin yolunu ayarlar. Varsayılan değeri `sys_get_temp_dir()` döndürür. Varsayılan değer geçerli değilse, uyarılırsınız.

Hangi dizinin kullanıldığından emin değilsek, Tester'ı `--info` parametresiyle çalıştırırız.


--colors 1|0 .[filter]
----------------------
Varsayılan olarak Tester renkli bir terminal algılar ve çıktısını renklendirir. Bu seçenek otomatik algılamayı geçersiz kılar. Renklendirmeyi genel olarak `NETTE_TESTER_COLORS` sistem ortam değişkeniyle ayarlayabiliriz.


--coverage <path> .[filter]
---------------------------
Tester, testlerin ne kadar kaynak kodunu kapsadığına dair genel bir bakış içeren bir rapor oluşturur. Bu seçenek, kurulu [Xdebug |https://xdebug.org/] PHP uzantısını veya [PCOV |https://github.com/krakjoe/pcov]'u veya daha hızlı olan PHPDBG SAPI'li PHP 7'yi gerektirir. Hedef dosyanın uzantısı biçimini belirler. Ya HTML ya da Clover XML.

/--pre .[terminal]
tester tests --coverage coverage.html  # HTML raporu
tester tests --coverage coverage.xml   # Clover XML raporu
\--

Mekanizma seçim önceliği şöyledir:
1) PCOV
2) PHPDBG
3) Xdebug

PHPDBG kullanırken, kapsamlı testlerde bellek tükenmesi nedeniyle test hatasıyla karşılaşabiliriz. Kapsanan kod hakkındaki bilgilerin toplanması bellek yoğundur. Bu durumda, test içinde `Tester\CodeCoverage\Collector::flush()` çağrısı bize yardımcı olur. Toplanan verileri diske yazar ve belleği serbest bırakır. Veri toplama işlemi gerçekleşmiyorsa veya Xdebug kullanılıyorsa, çağrının hiçbir etkisi yoktur.

Kod kapsamıyla ilgili "HTML raporu örneği":https://files.nette.org/tester/coverage.html.


--coverage-src <path> .[filter]
-------------------------------
`--coverage` seçeneğiyle birlikte kullanırız. `<path>`, raporun oluşturulduğu kaynak kodlarının yoludur. Tekrarlanabilir.


Özel php.ini
============
Tester, PHP işlemlerini `-n` parametresiyle çalıştırır, bu da hiçbir `php.ini`'nin yüklenmediği anlamına gelir. UNIX'te `/etc/php/conf.d/*.ini`'dekiler bile yüklenmez. Bu, testlerin çalışması için aynı ortamı sağlar, ancak aynı zamanda sistem PHP'si tarafından normalde yüklenen tüm PHP uzantılarını da devre dışı bırakır.

Sistem php.ini dosyalarının yüklenmesini korumak istiyorsanız, `-C` parametresini kullanın.

Testler için bazı uzantılara veya özel INI ayarlarına ihtiyacınız varsa, testlerle birlikte dağıtılacak kendi `php.ini` dosyanızı oluşturmanızı öneririz. Tester'ı daha sonra `-c` parametresiyle çalıştırırız, örneğin `tester -c tests/php.ini tests`, burada INI dosyası şöyle görünebilir:

```ini
[PHP]

extension=php_pdo_mysql.dll
extension=php_pdo_pgsql.dll

memory_limit=512M
```

Tester'ı UNIX'te sistem `php.ini` ile çalıştırmak, örneğin `tester -c /etc/php/cli/php.ini`, `/etc/php/conf.d/*.ini`'deki diğer INI'leri yüklemez. Bu PHP'nin bir özelliğidir, Tester'ın değil.
