PHP Reflection
**************

.[perex]
Η [api:Nette\Utils\Reflection] είναι μια στατική κλάση με χρήσιμες συναρτήσεις για PHP reflection. Ο σκοπός της είναι να διορθώνει τις ελλείψεις των εγγενών κλάσεων και να ενοποιεί τη συμπεριφορά σε διάφορες εκδόσεις της PHP.


Εγκατάσταση:

```shell
composer require nette/utils
```

Όλα τα παραδείγματα προϋποθέτουν ότι έχει δημιουργηθεί ένα ψευδώνυμο:

```php
use Nette\Utils\Reflection;
```


areCommentsAvailable(): bool .[method]
--------------------------------------

Ελέγχει εάν η reflection έχει πρόσβαση στα σχόλια PHPdoc. Τα σχόλια ενδέχεται να μην είναι διαθέσιμα λόγω της opcode cache, δείτε για παράδειγμα την οδηγία [opcache.save-comments|https://www.php.net/manual/en/opcache.configuration.php#ini.opcache.save-comments].


expandClassName(string $name, ReflectionClass $context): string .[method]
-------------------------------------------------------------------------

Επεκτείνει το όνομα της κλάσης `$name` στο πλήρες όνομά της στο πλαίσιο της κλάσης `$context`, δηλαδή στο πλαίσιο του χώρου ονομάτων της και των ορισμένων ψευδωνύμων. Δηλαδή, στην πραγματικότητα λέει πώς ο αναλυτής της PHP θα κατανοούσε το `$name` εάν ήταν γραμμένο στο σώμα της κλάσης `$context`.

```php
namespace Foo;
use Bar;

class DemoClass
{
	// new Bar, new Baz
}

$context = new ReflectionClass(Foo\DemoClass::class);
Reflection::expandClassName('Bar', $context); // 'Bar'
Reflection::expandClassName('Baz', $context); // 'Foo\Baz'
```


getMethodDeclaringMethod(ReflectionMethod $method): ReflectionMethod .[method]
------------------------------------------------------------------------------

Επιστρέφει τη reflection της μεθόδου που περιέχει τη δήλωση της μεθόδου `$method`. Συνήθως, κάθε μέθοδος είναι η δική της δήλωση, αλλά το σώμα της μεθόδου μπορεί επίσης να βρίσκεται σε ένα trait και με διαφορετικό όνομα.

Επειδή η PHP δεν παρέχει επαρκείς πληροφορίες με τις οποίες μπορεί να προσδιοριστεί η πραγματική δήλωση, η Nette χρησιμοποιεί τη δική της ευρετική μέθοδο, η οποία **θα έπρεπε να είναι** αξιόπιστη.

```php
trait DemoTrait
{
	function foo()
	{
	}
}


class DemoClass
{
	use DemoTrait {
		DemoTrait::foo as foo2;
	}
}


$method = new ReflectionMethod('DemoClass::foo2');
Reflection::getMethodDeclaringMethod($method); // ReflectionMethod('DemoTrait::foo')
```


getPropertyDeclaringClass(ReflectionProperty $prop): ReflectionClass .[method]
------------------------------------------------------------------------------

Επιστρέφει τη reflection της κλάσης ή του trait που περιέχει τη δήλωση της ιδιότητας `$prop`. Η ιδιότητα μπορεί επίσης να δηλωθεί σε ένα trait.

Επειδή η PHP δεν παρέχει επαρκείς πληροφορίες με τις οποίες μπορεί να προσδιοριστεί η πραγματική δήλωση, η Nette χρησιμοποιεί τη δική της ευρετική μέθοδο, η οποία **δεν είναι** αξιόπιστη.

```php
trait DemoTrait
{
	public $foo;
}


class DemoClass
{
	use DemoTrait;
}

$prop = new ReflectionProperty(DemoClass::class, 'foo');
Reflection::getPropertyDeclaringClass($prop); // ReflectionClass('DemoTrait')
```


isBuiltinType(string $type): bool .[method deprecated]
------------------------------------------------------

Ελέγχει εάν το `$type` είναι ενσωματωμένος τύπος της PHP. Διαφορετικά, είναι όνομα κλάσης.

```php
Reflection::isBuiltinType('string'); // true
Reflection::isBuiltinType('Foo');    // false
```

.[note]
Χρησιμοποιήστε το [Nette\Utils\Validator::isBuiltinType() |validators#isBuiltinType].


toString($reflection): string .[method]
---------------------------------------

Μετατρέπει τη reflection σε μια συμβολοσειρά κατανοητή από τον άνθρωπο.

```php
$func = new ReflectionFunction('func');
echo Reflection::toString($func); // 'func()'

$class = new ReflectionClass('DemoClass');
echo Reflection::toString($class); // 'DemoClass'

$method = new ReflectionMethod('DemoClass', 'foo');
echo Reflection::toString($method); // 'DemoClass::foo()'

$param = new ReflectionParameter(['DemoClass', 'foo'], 'param');
echo Reflection::toString($param); // '$param in DemoClass::foo()'

$prop = new ReflectionProperty('DemoClass', 'foo');
echo Reflection::toString($prop); // 'DemoClass::$foo'
```
