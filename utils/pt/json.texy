Trabalhando com JSON
********************

.[perex]
[api:Nette\Utils\Json] é uma classe estática com funções para codificar e decodificar o formato JSON. Ela lida com vulnerabilidades de diferentes versões do PHP e lança exceções em caso de erros.


Instalação:

```shell
composer require nette/utils
```

Todos os exemplos assumem que um alias foi criado:

```php
use Nette\Utils\Json;
```


Uso
===


encode(mixed $value, bool $pretty=false, bool $asciiSafe=false, bool $htmlSafe=false, bool $forceObjects=false): string .[method]
---------------------------------------------------------------------------------------------------------------------------------

Converte `$value` para o formato JSON.

Quando `$pretty` está definido, formata o JSON para facilitar a leitura e a clareza:

```php
Json::encode($value); // retorna JSON
Json::encode($value, pretty: true); // retorna JSON mais legível
```

Com `$asciiSafe`, gera a saída em ASCII, ou seja, substitui caracteres unicode por sequências `\uxxxx`:

```php
Json::encode('žluťoučký', asciiSafe: true);
// '"\u017elu\u0165ou\u010dk\u00fd"'
```

O parâmetro `$htmlSafe` garante que a saída não contenha caracteres com significado especial em HTML:

```php
Json::encode('one<two & three', htmlSafe: true);
// '"one\u003Ctwo \u0026 three"'
```

Com `$forceObjects`, até mesmo arrays com chaves numéricas serão codificados como objetos JavaScript:

```php
Json::encode(['a', 'b', 'c']);
// '["a","b","c"]'
Json::encode(['a', 'b', 'c'], forceObjects: true);
// '{"0":"a","1":"b","2":"c"}'
```

Em caso de erro, lança a exceção `Nette\Utils\JsonException`.

```php
try {
	$json = Json::encode($value);
} catch (Nette\Utils\JsonException $e) {
	// Tratamento da exceção
}
```


decode(string $json, bool $forceArray=false): mixed .[method]
-------------------------------------------------------------

Analisa JSON para PHP.

A configuração `$forceArray` força o retorno de arrays em vez de objetos:

```php
Json::decode('{"variable": true}'); // retorna um objeto do tipo stdClass
Json::decode('{"variable": true}', forceArrays: true); // retorna um array
```

Em caso de erro, lança a exceção `Nette\Utils\JsonException`.

```php
try {
	$value = Json::decode($json);
} catch (Nette\Utils\JsonException $e) {
	// Tratamento da exceção
}
```


Como enviar JSON de um presenter?
=================================

Você pode usar o método `$this->sendJson($data)`, que pode ser chamado, por exemplo, no método `action*()`, veja [Enviar uma resposta|application:presenters#Odeslání odpovědi].
