Latte funkce
************

.[perex]
V šablonách můžeme kromě běžných PHP funkcí používat i tyto další.

.[table-latte-filters]
| `clamp`      | [ohraničí hodnotu do daného rozsahu |#clamp]
| `divisibleBy`| [zkontroluje, zda je proměnná dělitelná číslem |#divisibleBy]
| `even`       | [zkontroluje, zda je dané číslo sudé |#even]
| `first`      | [vrací první prvek pole nebo znak řetězce |#first]
| `last`       | [vrací poslední prvek pole nebo znak řetězce |#last]
| `odd`        | [zkontroluje, zda je dané číslo liché |#odd]
| `slice`      | [extrahuje část pole nebo řetězce |#slice]


Použití
=======

Funkce se používají strejně jaké běžné PHP funkce a lze je použít ve všechn výrazech:

```html
<p>{clamp($num, 1, 100)}</p>

{if odd($num)} ... {/if}
```

Jako funkci lze do šablony zaregistrovat libovolný callback:

```php
$latte = new Latte\Engine;
$latte->addFunction('shortify', function (string $s, int $len = 10): string {
	return mb_substr($s, 0, $len);
});
```

V šabloně se potom volá takto:

```html
<p>{shortify($text)}</p>
<p>{shortify($text, 100)}</p>
```


Funkce
======


clamp(int|float $value, int|float $min, int|float $max): int|float .[method]{data-version:2.9}
----------------------------------------------------------------------------------------------
Ohraničí hodnotu do daného inkluzivního rozsahu min a max.

```html
{=clamp($level, 0, 255)}
```

Viz také [filtr clamp|filters#clamp].


divisibleBy(int $value, int $by): bool .[method]{data-version:2.10.2}
---------------------------------------------------------------------
Zkontroluje, zda je proměnná dělitelná číslem.

```html
{if divisibleBy($num, 5)} ... {/if}
```


even(int $value): bool .[method]{data-version:2.10.2}
-----------------------------------------------------
Zkontroluje, zda je dané číslo sudé.

```html
{if even($num)} ... {/if}
```


first(string|array $value): mixed .[method]{data-version:2.10.2}
----------------------------------------------------------------
Vrací první prvek pole nebo znak řetězce:

```latte
{=first([1, 2, 3, 4])}    {* vypíše 1 *}
{=first('abcd')}          {* vypíše 'a' *}
```

Viz také [#last], [filtr first|filters#first].


last(string|array $value): mixed .[method]{data-version:2.10.2}
---------------------------------------------------------------
Vrací poslední prvek pole nebo znak řetězce:

```latte
{=last([1, 2, 3, 4])}    {* vypíše 4 *}
{=last('abcd')}          {* vypíše 'd' *}
```

Viz také [#first], [filtr last|filters#last].


odd(int $value): bool .[method]{data-version:2.10.2}
----------------------------------------------------
Zkontroluje, zda je dané číslo liché.

```html
{if odd($num)} ... {/if}
```


slice(string|array $value, int $start, int $length = null, bool $preserveKeys = false): string|array .[method]{data-version:2.10.2}
-----------------------------------------------------------------------------------------------------------------------------------
Extrahuje část pole nebo řetězce.

```latte
{=slice('hello', 1, 2)}           {* outputs 'el' *}
{=slice(['a', 'b', 'c'], 1, 2)}   {* outputs ['b', 'c'] *}
```

Filtr funguje jako funkce PHP `array_slice` pro pole nebo `mb_substr` pro řetězce s fallbackem na funkci `iconv_substr` v režimu UTF‑8.

Pokud je start kladný, posloupnost začné posunutá o tento počet od začátku pole/řetezce. Pokud je záporný posloupnost začné posunutá o tolik od konce.

Pokud je zadaný parametr length a je kladný, posloupnost bude obsahovat tolik prvků. Pokud je do této funkce předán záporný parametr length, posloupnost bude obsahovat všechny prvky původního pole, začínající na pozici start a končicí na pozici menší na length prvků od konce pole. Pokud tento parametr nezadáte, posloupnost bude obsahovat všechny prvky původního pole, začínající pozici start.

Ve výchozím nastavení filtr změní pořadí a resetuje celočíselného klíče pole. Toto chování lze změnit nastavením preserveKeys na true. Řetězcové klíče jsou vždy zachovány, bez ohledu na tento parametr.



{{composer: latte/latte}}
