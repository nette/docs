Composer
########

/--div .[perex]
Composer is a tool for manading your dependencies in PHP. It allows us to declare dependencies on libraries and it will install them for us, into our project. We will learn

- how to install Composer
- usage in new or existing project
- creation and publication of own package
\--


Installation into your operating system
*******************************

Composer is distributed as runnable `.phar` file, and you can "download the latest version here":http://getcomposer.org/composer.phar.


Linux
-----

If you're using Linux, it's suggested to install the Composer using it's installed

/--code sh
$ curl -s http://getcomposer.org/installer | php
\--

By copying into folder, that is in system's `PATH`

/--code sh
$ mv ./composer.phar ~/bin/composer # nebo /usr/local/bin/composer
\--

Composer becames globally accessible under simple command

/--code sh
$ composer
\--



Mac OS X
---------

For Mac users it's suggested to install the Composer using "Homebrew":http://mxcl.github.com/homebrew/

/--code sh
$ brew tap josegonzalez/php
$ brew install composer
\--

It's possible, that you don't have installed PHP you system, so before installing Composer, you should install it by

/--code
$ brew install php54
\--

Now you should be able to execute Composer command in console

/--code sh
$ composer
\--

If for some reason, you cannot use Homebrea, or you don't want to, install the Composer [same as the Linux user would do | #linux].



Windows
-------

It's suggested to use the "installer":https://getcomposer.org/Composer-Setup.exe, which you can get "in the download section of Composer website":https://getcomposer.org/download/.


Creating new project
********************

If you have the Composer already installed, new Nette project can be created by executing a simple command

/--code
$ composer create-project nette/sandbox name-of-the-project
\--

Instead the `name-of-the-project` you should provide appropriate name and execute the command. Composer will fetch the `nette/sandbox` repository from Github and right after that, install the `nette/nette` package, which is Nette Framework itself. The only thing left is to check write permissions on directories `temp/` and `log/` and you're ready to go.



Packagist.org - global repository
*********************************

"Packagist":http://packagist.org is the main package repository, in which the composer tryies to search packages, if not told otherwise. You can also publish your own packages here, "just like Nette did":http://packagist.org/packages/nette/.

The easies way to publis a package is to upload it on "Github":http://github.com using "Git":http://git-scm.com/ and pasting url of the resulting repository into Packagist. We will look at how to create a package in a moment.


Usage
*****

The basic for every project or library, that is using the Composer, is the `composer.json` file, which defines meta information and dependencies of your library.

The simplest `composer.json` can look like this

/--code javascript
{
	"require": {
		"php" : ">=5.3.2",
		"nette/nette": "2.0.*"
	}
}
\--

We're saying here, that our application (or library) is dependent on package `nette/nette` and it want's the newest version, that matches the `2.0.*` version constraint and also it will run only on PHP higher or equal to `5.3.2`.

So, we have the `composer.json` file in the root of the project and if we run the

/--code sh
$ composer update
\--

Composer will download the Nette Framework into the directory `vendor/nette/nette`.

.[note]
If you're using latest `nette/sandbox`, everything mentioned till here is already in place.


Lock file
---------

When you run `composer update`, the Composer will create `composer.lock`, right next to `composer.json`. This file contains metadata about installed versions of packages.

It's standard that we commit the `composer.lock` file only into concrete application and not into libraries. There could be a situation, when the newer version of some our dependency was released, and our colleague will pull the latest version of our application, calls the `$ composer install` and now he has newer version of that library. The lock file prevents this, because when you run the `install` and not `update`, the Composer will always install versions exactly as they are in the lock file.

.[note]
If we wanna update the dependencies to newer ones, it's simple as calling `$ composer update`.


Co když nechceme používat centrální repozitář?
----------------------------------------------

Pokud máme vnitrofiremní aplikace, které zkrátka nemůžeme hostovat na Githubu, tak aby jsme si je mohli instalovat přes Composer, tak si můžete jednoduše nadefinovat vlastní repozitáře pro projekt.

Nette Framework je díky centrálnímu repozitáři přístupný vždy, ale ukážeme si definici s jeho repozitářem. V `url` může být libovolná cesta, nebo adresa, která směřuje na git, svn nebo mercurial.

/--code javascript
{
	"repositories": [
		{
			"type": "vcs",
			"url": "git://github.com/nette/nette.git"
		}
	],
	"require": {
		"nette/nette": "dev-master",
	}
}
\--

.[tip]
Stejně tak umí pracovat s repozitáři Pearu (je třeba uvést jiný typ) a zip soubory (distribuční balíky).

.[tip]
Načítání metadat repozitáře pro každý install/update je zdlouhavé a zbytečné. Řešit se to dá použitím aplikace, "která pohání packagist.org":https://github.com/composer/packagist, nebo její "odlehčené, jednodušší verze":https://github.com/composer/satis. Nette komunita nyní "vyvíjí vlastní nástroj":https://github.com/nette/addons.nette.org.

.[note]
Více na téma repozitářů "v oficiální dokumentaci":http://getcomposer.org/doc/05-repositories.md#repositories.


Co když už máme projekt rozjetý?
--------------------------------

Nepovažujme to prosím za nevýhodu, ale za prostor ke zdokonalení našeho projektu. Composer neumí nainstalovat *jenom některé* závislosti, je nutné, aby se staral o všechny závislosti, které jednotlivé balíčky vyžadují.

Doporučovaný postup tedy je vytvořit si v projektu `composer.json` s informacemi o vyžadovaných balíčcích, závislosti nainstalovat a pak smazat přebývající knihovy v `libs/`.


Vlastní balíčky
***************

Za balíček se dá automaticky považovat jakýkoliv projekt, který má v kořenu `composer.json`. Ovšem aby se taková knihovna dala použít jako validní závislost, má povinné dvě pole, `name` a `version`.

/--code javascript
{
	"name": "MojeJmeno/Blog",
	"description" : "Nejlepší blog",
	"version": "1.0.0"
}
\--

.[note]
Jméno se skládá z poskytovatele (vendor) a z konkrétního balíčku, což bylo zavedeno kvůli konfliktům.

.[tip]
Pokud používáme verzovací systém (například git), tak není vůbec nutné verzi uvádět. Composer si umí sám přečíst jaké jsou v projektu "tagy":http://getcomposer.org/doc/02-libraries.md#tags a "větve":http://getcomposer.org/doc/02-libraries.md#branches a detekuje, co z toho vypadá jako verze a je možné si to zvolit jako závislost.


Autoloading
-----------

Composer za nás řeší i autoloading. Každá knihovna může v `composer.json` uvést, jaký standard používá a Composer se přizpůsobí. Řekněme tedy, že bude používat PSR-0, náš hlavní namespace bude `MojeJmeno` a bude v podsložce libs.

/--code javascript
{
	"autoload": {
		"psr-0": {"MojeJmeno": "libs/"},
	}
}
\--

Co když ale PSR-0 tak docela nedodržujeme? Žádný problém, stačí uvést `classmap` místo `psr-0`, což je ekvivalent "RobotLoaderu z Nette":http://doc.nette.org/cs/auto-loading.

/--code javascript
{
	"autoload": {
		"classmap": ["src/", "lib/"]
	}
}
\--

Všechny tyto informace si Composer převede do jedné mapy `namespace => složka` a pak nám z toho generuje autoloader, pro všechny knihovny, které mu sdělily, jak je možné je načítat.


Použití autoloaderu z Composeru
-------------------------------

Po nainstalování závislostí Composerem do připraveného sandboxu se musíme pouze zbavit načítání složky `libs/` pomocí `RobotLoader`u.

/--code php
->addDirectory(LIBS_DIR)
\--

A vše by mělo fungovat jak má.
